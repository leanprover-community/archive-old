[
    {
        "content": "<p>I fear this is impossible, but I don't actually know why. Could</p>\n<ol>\n<li><code>X → Y</code> be notation for <code>function X Y</code>, and</li>\n<li><code>function X Y</code> be an abbreviation for whatever Pi-type it should be.</li>\n</ol>\n<p>Then we could write <code>(hf : f.injective)</code> if I'm not mistaken.</p>",
        "id": 196733385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588835136
    },
    {
        "content": "<p>I'd love to have this. I don't know if it's easier to implement this in Lean, or in C++.</p>",
        "id": 196734297,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588835869
    },
    {
        "content": "<p>1) seems like a really bad idea, 2) is extremely easy to do, you just need to add a case for <code>is_pi</code> here: <a href=\"https://github.com/leanprover-community/lean/blob/675c47294a57c98e3215b6edd9e7efc80ec99475/src/frontends/lean/elaborator.cpp#L2728\" title=\"https://github.com/leanprover-community/lean/blob/675c47294a57c98e3215b6edd9e7efc80ec99475/src/frontends/lean/elaborator.cpp#L2728\">https://github.com/leanprover-community/lean/blob/675c47294a57c98e3215b6edd9e7efc80ec99475/src/frontends/lean/elaborator.cpp#L2728</a><br>\nI think we should also have this for <code>Sort</code>.</p>",
        "id": 196737141,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588838215
    },
    {
        "content": "<p>What do you mean by 1) and 2)?</p>",
        "id": 196737500,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588838450
    },
    {
        "content": "<p>Can we differentiate between <code>pi</code> and <code>function</code> here?</p>",
        "id": 196737883,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588838667
    },
    {
        "content": "<p>1) and 2) refer to Johan's questions.<br>\nOh, <code>function</code> is supposed to be a non-dependent pi!  My advice still stands: 1) is probably a bad idea, 2) is easy and should be done.  You could differentiate between pis and non-dependent pis, for example you could try <code>function.injective</code> if it is non-dependent as well as <code>pi.injective</code>.  I'm not sure if this difference is important.  Do you want different definitions for pis and non-dependent pis?</p>",
        "id": 196738926,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588839260
    },
    {
        "content": "<p>But if we don't have 1), what is the benefit of 2)?</p>",
        "id": 196739360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588839514
    },
    {
        "content": "<p>We can't write <code>f.injective</code> for <code>f : X → Y</code> in that case, right?</p>",
        "id": 196739386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588839531
    },
    {
        "content": "<p>Gabriel pointed to C++ source file where we can hardcode \"if you see a function, try <code>function</code> namespace\".</p>",
        "id": 196739517,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588839602
    },
    {
        "content": "<p>Instead of doing this in Lean.</p>",
        "id": 196739580,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588839620
    },
    {
        "content": "<p>Aah, I see. We add a hack (-;</p>",
        "id": 196739613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588839636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Can you also explain why 1) is a bad idea?</p>",
        "id": 196739631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588839652
    },
    {
        "content": "<p>why not just write <code>f : X \\hom Y</code> and <code>f.injective</code></p>",
        "id": 196739701,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588839709
    },
    {
        "content": "<p>or whatever unicode variant of the arrow that hasn't been used</p>",
        "id": 196739759,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588839727
    },
    {
        "content": "<p>This is more a gut feeling.  But adding definitions typically breaks stuff.  For example defining <code>(≥)</code> as <code>flip (≤)</code> breaks the simplifier.  I would imagine many similar things to happen if <code>→</code> was suddenly no longer a pi.</p>",
        "id": 196739769,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588839734
    },
    {
        "content": "<p>my point is, there's no need to change <code>\\to</code></p>",
        "id": 196739773,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588839737
    },
    {
        "content": "<p>I see there already has been discussion about this, but it seems that my idea didn't come up.</p>",
        "id": 256048196,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633349762
    },
    {
        "content": "<p>Could we have the identifier resolver (or whatever thing does this) try to append <code>function.</code> when we use dot notation on <code>f : α → β</code>?</p>",
        "id": 256048388,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633349829
    },
    {
        "content": "<p>Dot notation-wise, this is the same as having <code>α → β</code> meaning <code>function α β</code>, but without needing to redefine it.</p>",
        "id": 256048581,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633349901
    },
    {
        "content": "<p>I don't know whether we want that more generally on Pi-types.</p>",
        "id": 256048689,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633349967
    },
    {
        "content": "<p>Should it be <code>function</code> or <code>pi</code>?</p>",
        "id": 256049337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633350270
    },
    {
        "content": "<p>Maybe the rule should be try one then the other?</p>",
        "id": 256049378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633350294
    },
    {
        "content": "<p>I guess it could try both?</p>",
        "id": 256049381,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633350296
    },
    {
        "content": "<p>In the same way that <code>abbreviation foo : Type* = bar</code> will do dot notation first on foo then on bar</p>",
        "id": 256049433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633350312
    },
    {
        "content": "<p>We also have a couple of definitions on <code>Pi</code> by the way: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Pi.topological_space\">docs#Pi.topological_space</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Pi.complete\">docs#Pi.complete</a>, ...</p>",
        "id": 256049719,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633350464
    },
    {
        "content": "<p>We have many objects that coerce to function arrows. How would dot notations operate on those?</p>",
        "id": 256050345,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633350747
    },
    {
        "content": "<p>Presumably it will work analogously to the current way dot notation works on coercions: <code>((f : A →foo B) : A → B).injective</code> is <code>function.injective ⇑f</code> and <code>f.injective</code> is <code>foo_hom.injective f</code>.</p>",
        "id": 256051326,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633351179
    },
    {
        "content": "<p>What? Since when does <code>function</code> support dot-notation? <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span> <br>\nI must have been living under a rock.</p>",
        "id": 256051477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633351245
    },
    {
        "content": "<p>Wait what? This is exactly what I'm asking for!</p>",
        "id": 256051575,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633351305
    },
    {
        "content": "<p>The discussion is about whether to add dot notation, and how it should work. I don't think it actually works yet.</p>",
        "id": 256051597,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633351320
    },
    {
        "content": "<p>Or is Anne's message supposed to be conditional?</p>",
        "id": 256051640,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633351323
    },
    {
        "content": "<p>AH yes</p>",
        "id": 256051648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633351327
    },
    {
        "content": "<p>/me should learn to read <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 256051692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633351349
    },
    {
        "content": "<p>Indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.injective</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"c1\">-- error, `α → β` is not of the form `(C ...)`</span>\n</code></pre></div>",
        "id": 256051699,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633351355
    },
    {
        "content": "<p>Sorry for any confusion, hopefully the edit makes the hypothetical nature clearer</p>",
        "id": 256051826,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633351425
    },
    {
        "content": "<p>There is still no way to get dot notation for functions, right? I would also love to have something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo.test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f.test</span> <span class=\"c1\">--fails of course</span>\n</code></pre></div>\n<p>where the notation works for any <code>α</code>.</p>",
        "id": 275902873,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1647685711
    },
    {
        "content": "<p>What's <code>f</code> on that last line? I don't see a <code>variables</code>.</p>",
        "id": 275902957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647685890
    },
    {
        "content": "<p>edited. Sorry, I deleted one line too much from my other experiments</p>",
        "id": 275903036,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1647686027
    },
    {
        "content": "<p>The context is that I want to refactor the <code>with_seminorms</code> part in <code>analysis.seminorm</code>.</p>",
        "id": 275903173,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1647686251
    },
    {
        "content": "<p>Does <code>(f : @foo α)</code> work there?</p>",
        "id": 275904960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647688715
    },
    {
        "content": "<p><code>#check (f : @foo α).test</code> fails with the same error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n</code></pre></div>",
        "id": 275905249,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1647689139
    },
    {
        "content": "<p>I mean declare f with that type</p>",
        "id": 275905258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647689158
    },
    {
        "content": "<p>yes, that works. Thank you. Why does that make a difference?</p>",
        "id": 275905337,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1647689245
    },
    {
        "content": "<p>I didn't read the whole thread, but the following works in Lean 4.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Function.injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">⦄,</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span> <span class=\"bp\">→</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Function.injective.comp</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">g.injective</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.injective</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275927030,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647720277
    },
    {
        "content": "<p>is there any other \"special\" namespaces? does <code>pi/forall</code> work for <code>∀ x, _</code>?</p>",
        "id": 275927319,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647720643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> No, but they can be added if there are useful in practice.</p>",
        "id": 275927534,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647720985
    },
    {
        "content": "<p>Great, I was going to ask about this -- I'll backport it to Lean 3.</p>",
        "id": 275927846,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647721491
    },
    {
        "content": "<p>Dot notation is something which I have really begun to love. Five minutes ago I just proved <code>I \\sub J</code> from <code>h : I = J</code> using <code>h.subset</code> and about an hour ago I proved <code>a &lt;= b</code> from <code>h : a = b</code> using <code>h.le</code>. Now I've \"got the hang of it\" I had started to get frustrated that I couldn't do the same trick with functions :-)</p>",
        "id": 275928023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647721781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> There is also a new form of dot notation in Lean 4 inspired by Swift that we are currently in love with. We can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">x</span>  <span class=\"c1\">-- Sugar for `Except.ok x`</span>\n  <span class=\"k\">else</span>\n    <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"s2\">\"x is zero\"</span> <span class=\"c1\">-- Sugar for `Except.error \"x is zero\"`</span>\n</code></pre></div>\n<p>The namespace is inferred from the expected type.</p>",
        "id": 275928721,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647722743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> Does that mean dot notation is whitespace sensitive now? In Lean 3 you can do <code>x .foo</code>, which can be potentially useful when you have long lines you need to split, but it's not so important since you can't really chain dot notation like you can method calls in most OO languages due to syntax.</p>",
        "id": 275929763,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647724106
    },
    {
        "content": "<p>It <em>already</em> is, Kyle. You can add whitespaces to disambiguate chained dot notation and genuine namespacing.</p>",
        "id": 275929865,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647724257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> That might be one kind of chained \"method call\" (for nullary methods), but Lean doesn't support anything like <code>x.foo(a,b).bar(c,d,e).baz()</code>, which is what I was referring to. It's common to see this sort of chaining where each additional method call gets its own line.</p>",
        "id": 275930813,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647725662
    },
    {
        "content": "<p>fond memories of C#'s LINQ</p>",
        "id": 275931087,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647726046
    },
    {
        "content": "<p>13-year old me loved that stuff</p>",
        "id": 275931089,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647726051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> That's <code>x.foo a b |&gt;.bar c d e |&gt;.baz</code> in Lean 4</p>",
        "id": 275932448,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647727684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Yes, it is. However, in Lean 4, the projection notation never allowed whitespaces between <code>x</code> and <code>.foo</code>.</p>",
        "id": 275932482,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647727736
    },
    {
        "content": "<p>Lean 4 is going to be so cool :-)</p>",
        "id": 275932511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647727792
    }
]