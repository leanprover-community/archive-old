[
    {
        "content": "<p>I cannot believe it. I just spent several hours porting 350 lines of mathlib over to get a mathlib-independent MWE of a time-out issue (file available <a href=\"https://gist.github.com/kbuzzard/cb6976cdca7e305757d9434675c1221d\">here</a>) and after I was done I was just setting up the question to post, and I managed to solve it. It's another universe issue. See the last few lines of the gist.</p>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I was going to ask you a question but I solved it myself, however maybe you are interested in a mathlib-free universe issue. If I say <code>{R : Type u}</code> then my lemma typechecks no problem, but with <code>{R : Type*}</code> I get excessive memory consumption errors -- and even if things do work they clearly take much much longer. Is this evidence that <code>{R : Type*}</code> should be avoided? I think Reid told me he avoided it years ago, but now I am beginning to think that replacing all <code>Type*</code>s by <code>Type u</code>'s in mathlib (when they occur in a def or lemma statement) might result in a speed-up: one could make the definition with Type<em>, see what Lean thinks Type</em> should be, and then replace it with its conclusion.</p>",
        "id": 238307285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620739914
    },
    {
        "content": "<p>I still think it is better not to bother folks with universe management in 99% of cases</p>",
        "id": 238308129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620740220
    },
    {
        "content": "<p>If you say always use <code>Type u</code> then you are likely to make lemmas which have <code>(A : Type u) (B : Type u)</code> which will cause problems later</p>",
        "id": 238308268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620740275
    },
    {
        "content": "<p>It would be nice if there was a variant on <code>Type*</code> which was <code>Type &lt;fresh universe variable&gt;</code> instead of <code>Type &lt;fresh metavariable&gt;</code> since it is the metavariables that cause the problem here</p>",
        "id": 238308437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620740329
    },
    {
        "content": "<p>The other way to solve this problem is to try and put types in <code>variables</code> statements instead of in definitions</p>",
        "id": 238310241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620740977
    },
    {
        "content": "<p>Which means we get to keep <code>Type*</code></p>",
        "id": 238310279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620740988
    },
    {
        "content": "<p>Also, a fun fact - if you write <code>variables {a b c d e f g h i j : Type*}</code> then <code>u_10</code> becomes a universe variable you can reference by name.</p>",
        "id": 238310668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620741117
    },
    {
        "content": "<p>Also, regarding Kevin's repro - from what I remember <code>set_option profiler true</code> does not measure any of this universe variable unification time, which in the case of this lemma was almost all of the time.</p>",
        "id": 238310833,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620741169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/yet.20another.20universe.20issue/near/238308437\">said</a>:</p>\n<blockquote>\n<p>It would be nice if there was a variant on <code>Type*</code> which was <code>Type &lt;fresh universe variable&gt;</code> instead of <code>Type &lt;fresh metavariable&gt;</code> since it is the metavariables that cause the problem here</p>\n</blockquote>\n<p>How much would break if <code>Type*</code> _became_ that meaning, and <code>Type _</code> continues to mean \"fresh metavariable\"?</p>",
        "id": 238314158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620742303
    },
    {
        "content": "<p>The point of <code>Type*</code> within a theorem statement is \"OK so maybe R will end up having type <code>imax (max u v) w</code>\", right?</p>",
        "id": 238315643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620742858
    },
    {
        "content": "<p>That's certainly the effect, I can't comment on whether it was the intent</p>",
        "id": 238320155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620744449
    },
    {
        "content": "<blockquote>\n<p>I managed to solve it. It's another universe issue. See the last few lines of the gist.</p>\n</blockquote>\n<p>As far as I can tell, that universe issue is only present in your MWE, not in the original</p>",
        "id": 238320372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620744509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/yet.20another.20universe.20issue/near/238310668\">said</a>:</p>\n<blockquote>\n<p>Also, a fun fact - if you write <code>variables {a b c d e f g h i j : Type*}</code> then <code>u_10</code> becomes a universe variable you can reference by name.</p>\n</blockquote>\n<p>Indeed, <code>Type*</code> in <code>variable</code> actually <em>means</em> <code>Type &lt;fresh universe variable&gt;</code>, to add to the confusion</p>",
        "id": 238327448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620747004
    },
    {
        "content": "<p>And is the <code>&lt;fresh universe variable&gt;</code> common to the newly declared variables? Is using <code>variables {X Y : Type*}</code> implying that <code>X</code> and <code>Y</code> have the same type?</p>",
        "id": 238342041,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620752084
    },
    {
        "content": "<p>No (it used to mean this, it changed a year or so ago)</p>",
        "id": 238342096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620752112
    },
    {
        "content": "<p>Ah okay great. I am overly using it and was getting worried.</p>",
        "id": 238342164,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620752145
    }
]