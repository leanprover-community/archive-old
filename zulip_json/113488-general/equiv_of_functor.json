[
    {
        "content": "<p>What am I rediscovering here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyz</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">hyz</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">hxy</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">hyz</span> <span class=\"bp\">▸</span> <span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">x</span> <span class=\"err\">≃</span> <span class=\"n\">T</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">r</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>and is <code>T.equiv</code> in mathlib in some form? Any way of making alpha into a groupoid such that f becomes a functor makes f send isomorphisms to equivs. Or something.</p>",
        "id": 161299179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553122290
    },
    {
        "content": "<p>Oh I've just found another one, in <code>localization.lean</code></p>",
        "id": 161302938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553126214
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fraction_ring</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">fraction_ring</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_non_zero_divisors_iff_ne_zero</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">map_zero</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">eq_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mem_non_zero_divisors_iff_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>An injective ring map <code>f : A -&gt; B</code> gives us a map <code>fraction_ring A → fraction_ring B</code>. I need that if <code>f</code> is an equiv then so is <code>map f _</code>. The natural way of proving it is to prove <code>map.id</code> and <code>map.comp</code></p>",
        "id": 161303009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553126292
    },
    {
        "content": "<p>and then invoke some general fact about equivs</p>",
        "id": 161303015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553126308
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_id</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">funext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">map_coe</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">map_comp_map</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">γ</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">is_submonoid</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"err\">∘</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">funext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">map_map</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">γ</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">is_submonoid</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">map_comp_map</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv_of_equiv</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span><span class=\"n\">r</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">localization</span> <span class=\"n\">α</span> <span class=\"n\">S</span> <span class=\"err\">≃</span><span class=\"n\">r</span> <span class=\"n\">localization</span> <span class=\"n\">β</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">map</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">]},</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">map</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">image_eq_preimage</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">preimage</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"n\">ring_equiv</span><span class=\"bp\">.</span><span class=\"n\">to_equiv_symm_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_apply</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">erw</span> <span class=\"n\">map_id</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"n\">ring_equiv</span><span class=\"bp\">.</span><span class=\"n\">to_equiv_symm_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">apply_symm_apply</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">erw</span> <span class=\"n\">map_id</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">map</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>All of that from localization.lean. It's somehow the same argument as mine above.</p>",
        "id": 161305672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553129217
    }
]