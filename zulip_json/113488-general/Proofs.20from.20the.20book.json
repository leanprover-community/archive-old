[
    {
        "content": "<p>I thought it would be fun to formalize some parts of the book \"Proofs from the book\" by Aigner/Ziegler and started this github-repo for this:<br>\n<a href=\"https://github.com/mo271/formal_book\">https://github.com/mo271/formal_book</a><br>\nIn general the statements and proofs are quite accessible and span a wide variety of topics, so I expect some parts to be quite easy to do with what is already present in mathlib, while other parts might be significantly harder. Also some of the chapters might be nice projects for undergraduates.<br>\nContributions/suggestions for improvements are most welcome!</p>",
        "id": 299125244,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1663321348
    },
    {
        "content": "<p>Are some proofs in that book pictures? I was looking through a book called \"proofs without words\" and some of those proofs are very elegant but they would be really really hard to formalise!</p>\n<p>I now have a limited experience with getting undergraduates to formalise a book, because I made this repo <a href=\"https://github.com/ImperialCollegeLondon/m1fexplained\">https://github.com/ImperialCollegeLondon/m1fexplained</a> over the summer, which is a formalisation of some (and hopefully one day most) of the exercises in a standard undergraduate textbook written by my boss! (Martin Liebeck, the head of pure maths at Imperial, and someone who I owe a lot to because five years ago I started doing this weird new thing called Lean and he was totally fine about it). One thing I learnt is that if you want to get undergraduates involved, they're far more likely to embark on something if there's a <em>sorried statement</em>. So if you want to make the project grow organically and are happy to put some effort into an initial push I would thoroughly recommend sorrying a whole bunch of theorem statements. It's easy to forget how hard this part of the job is, once you're good at it. Most of the code in that repo was written by Imperial undergrads over the summer.</p>",
        "id": 299130710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663323581
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/symm_diff_assoc\">docs#symm_diff_assoc</a> is a proof from Proofs of the book.</p>",
        "id": 299131033,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663323704
    },
    {
        "content": "<p>What has happened with mathlib is that at the beginning undergraduates were really useful to us. There was a ton of stuff which needed to be done, and in some sense undergraduates were even sometimes directing what got done, there were people like Chris Hughes and Kenny Lau who were immersed in Imperial's undergraduate degree and were formalising parts of it and responding to other undergraduates who wanted to do things like problem sheet questions. Now mathlib is beyond this point. The stuff on the UG todo list typically cannot be done by beginner UGs any more, for the simple reason that there's nothing easy left; everything is difficult/annoying for one or more reasons and the problems are beyond a beginner. Formalising textbooks like this however are I think a very good alternative way to get UGs involved; my M1F explained repo (the name is an Imperial in joke) was very popular this summer with my project students, probably about 50% of them ended up contributing to it in one way or another (even if not all of them worked out how to do PRs -- people were emailing me proofs etc).</p>",
        "id": 299131461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663323860
    },
    {
        "content": "<p>Very few proofs in that book are \"pictures\" or rely on geometric intuition. </p>\n<p>Re having sorried-statements: that makes sense! I plan to go through some chapters and add more sorried statements/partial proofs. <br>\nI did already link to the open sorrys in the README.md:<br>\n<a href=\"https://github.com/mo271/formal_book/search?q=sorry+extension%3Alean\">https://github.com/mo271/formal_book/search?q=sorry+extension%3Alean</a><br>\n(Perhaps such a link would also be useful for <a href=\"https://github.com/ImperialCollegeLondon/m1fexplained\">https://github.com/ImperialCollegeLondon/m1fexplained</a>?!)</p>",
        "id": 299132804,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1663324477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Proofs.20from.20the.20book/near/299131033\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/symm_diff_assoc\">docs#symm_diff_assoc</a> is a proof from Proofs of the book.</p>\n</blockquote>\n<p>Yeah, and there are a couple of other places where mathlib follows Proofs from the book closely, most notably the entire proof of Bertrand's postulate</p>",
        "id": 299132897,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1663324523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Proofs.20from.20the.20book/near/299131033\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/symm_diff_assoc\">docs#symm_diff_assoc</a> is a proof from Proofs of the book.</p>\n</blockquote>\n<p>Hmm, I don't think that's true (unless the proof has been replaced since I added it). I believe <a href=\"https://mccuan.math.gatech.edu/courses/4317/symmetricdifference.pdf\">the title and introduction of the reference linked in the module doc</a> claim that the proof presented is a proof from \"the Book\" rather than claiming that it's a proof from \"Proofs [from] the book\".</p>",
        "id": 299225993,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1663355593
    },
    {
        "content": "<p>I think the most conceptual proof uses the fact that the symmetric difference of two sets correspond to pointwise addition of their indicator functions taking value in <code>zmod 2</code>. This proof is not intuitionistic though.</p>",
        "id": 299227284,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663356093
    },
    {
        "content": "<p><code>symm_diff_assoc</code> applies to (generalized) Boolean algebras though - is there a suitable notion of indicator function at that level of generality?</p>",
        "id": 299228722,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1663356691
    },
    {
        "content": "<p>I suspect that would need atomicity.</p>",
        "id": 299229164,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663356851
    },
    {
        "content": "<p>A generalized Boolean algebra embeds into a Boolean algebra according to <a href=\"https://math.stackexchange.com/a/2985310/12932\">https://math.stackexchange.com/a/2985310/12932</a>, and a Boolean algebra embeds into a powerset algebra by Stone's representation theorem. These should be enough to reduce the problem to powerset algebras.</p>\n<p>(Hmm and I think the original proof can't be made intuitionistic either; some double negation is involved. Not sure if the co-Heyting diff works, or whether using <code>¬(p ↔ q)</code> or <code>¬(p → q) ∨ ¬(q → p)</code> to define symm_diff makes any difference.)</p>",
        "id": 299232425,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663358342
    },
    {
        "content": "<p>If it could be made intuitionistic, it would hold in co-Heyting algebras, and the dual would hold in Heyting algebras, but the following fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iff_assoc</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">itauto</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 299288486,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663403765
    },
    {
        "content": "<p>OP might be interested to know, the proof of Bertrand’s postulate now in mathlib follows the approach of Aigner and Ziegler</p>",
        "id": 299338097,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663430024
    },
    {
        "content": "<p>(Actually I see someone already commented this)</p>",
        "id": 299338180,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663430065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Proofs.20from.20the.20book/near/299288486\">said</a>:</p>\n<blockquote>\n<p>If it could be made intuitionistic, it would hold in co-Heyting algebras, and the dual would hold in Heyting algebras, but the following fails:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iff_assoc</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">itauto</span> <span class=\"c1\">-- fails</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Indeed, <a href=\"https://math.stackexchange.com/a/440927/12932\">one comment here</a> pointed out associativity is equivalent to the law of excluded middle.</p>",
        "id": 299579795,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663599267
    },
    {
        "content": "<p>not sure about equivalent to LEM, but it's certainly not intuitionistically true</p>",
        "id": 299580873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663599622
    },
    {
        "content": "<p>The last comment below the answer shows it's equivelent to double negation elimination, which is equivalent to LEM. Here's a Lean proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">def</span> <span class=\"n\">iff_assoc</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">lem</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">iff_assoc_iff_lem</span> <span class=\"o\">:</span> <span class=\"n\">iff_assoc</span> <span class=\"bp\">↔</span> <span class=\"n\">lem</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">p</span> <span class=\"n\">false</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">$</span> <span class=\"n\">iff_false</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">false_iff</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">$</span> <span class=\"n\">or.inr</span> <span class=\"bp\">$</span> <span class=\"n\">n</span> <span class=\"bp\">∘</span> <span class=\"n\">or.inl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">r</span><span class=\"bp\">;</span> <span class=\"n\">revert</span> <span class=\"n\">h_1</span> <span class=\"n\">h_2</span> <span class=\"n\">h_3</span><span class=\"bp\">;</span> <span class=\"n\">itauto</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">iff_assoc_iff_lem</span> <span class=\"c\">/-</span><span class=\"cm\"> no axioms -/</span>\n</code></pre></div>",
        "id": 299588594,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663602030
    }
]