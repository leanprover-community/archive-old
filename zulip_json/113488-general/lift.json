[
    {
        "content": "<p>Is there a way to lift something providing the proof of the condition using a tactic? I mean, the standard syntax is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">lift</span> <span class=\"n\">n</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"n\">using</span> <span class=\"n\">hn</span>\n</code></pre></div>\n<p>where <code>hn</code> is a proof that <code>n</code> is nonnegative. I'd like to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">lift</span> <span class=\"n\">n</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h'n</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>or whatever, but I can't find a way to do this. Is this syntax just not there?</p>",
        "id": 240610896,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622211773
    },
    {
        "content": "<p>Does <code>lift n to ℕ, { by simp [h'n] },</code> do this? If so, is that close enough to what you want?</p>",
        "id": 240612259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622212370
    },
    {
        "content": "<p>You need an additional <code>swap</code>. This is what I am doing, but I am not completely satisfied by this solution.</p>",
        "id": 240616977,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622214313
    },
    {
        "content": "<p>Does the <code>(by simp)</code> fail to parse?  Looking at the <code>lift</code> source, there is support for arbitrary expressions after the using.</p>",
        "id": 240617421,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622214487
    },
    {
        "content": "<p><code>using (show 0 ≤ n, by simp [h'n])</code> or <code>using (by simp [h'n] : 0 ≤ n)</code>?</p>",
        "id": 240617458,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622214506
    },
    {
        "content": "<p>I guess somebody needs to modify <a href=\"https://github.com/leanprover-community/mathlib/blob/5360e476391508e092b5a1e5210bd0ed22dc0755/src/tactic/lift.lean#L90\">https://github.com/leanprover-community/mathlib/blob/5360e476391508e092b5a1e5210bd0ed22dc0755/src/tactic/lift.lean#L90</a></p>",
        "id": 240617528,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622214535
    },
    {
        "content": "<p>And write <code>prf ← i_to_expr ``((%%(option.get h_some) : %%expected_prf_ty))</code></p>",
        "id": 240617727,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622214614
    },
    {
        "content": "<p>Yes, this code will try to evaluate <code>by simp</code> without knowing what is supposed to be proven.</p>",
        "id": 240617801,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622214651
    },
    {
        "content": "<p>Thanks for the report (and the way to fix it):<br>\n<a href=\"https://github.com/leanprover-community/mathlib/issues/7739\">#7739</a></p>",
        "id": 240637435,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1622223626
    }
]