[
    {
        "content": "<p>Dear mathlib community (and more generally the leanprover community),</p>\n<p>For some time we've had some difficulties handling the mathlib pull-requests <a href=\"https://bit.ly/3AZk1Qk\">#queue</a>, and a while ago we posted a brief message to let you know that we were working on a long-term solution. After a lot of back-and-forths, considerations, and reconsiderations, we have come up with some changes to the review process and a proposal for reorganising some of the structures in our community. The first effect has already been noticed: we've started using topical labels to get a better grip on the PR <a href=\"https://bit.ly/3AZk1Qk\">#queue</a>. We are generally happy with the reorganisation design, but we do not want to rush the implementation. So for now we are sharing it to let you know what is coming, and solicit help for the points that require technological work.</p>\n<p>The points that will be visible to everybody but are not yet implemented are:</p>\n<ul>\n<li>It will become clearer who is handling each pull-request, and hopefully no pull-request will remain handled by nobody for extended periods of time.</li>\n<li>Many people will be trusted to take a quasi-final decision to merge a PR by making recommendations to the maintainers team. After such recommendations, maintainer will simply check that there is no large scale cohesivity issues (either technological or mathematical) without another detailed small scale review.</li>\n<li>Many discussions that used to be private among maintainers will move to public streams.</li>\n</ul>\n<p>The long explanations below contain a lot of details about how we expect to achieve this.</p>",
        "id": 297917159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662707742
    },
    {
        "content": "<h1>Community organization</h1>\n<p>Currently, mathlib development is overseen by 25 maintainers from the community, who each individually have a wide range of responsibilities and expectations: account administration, continuous integration maintenance, Zulip moderation, the website and blog, tool development, and, of course, mathlib PR review and maintenance of the repository. De facto, they also serve as representatives of the community and discuss political issues and funding opportunities. We do not have any fine-grained way to delegate subsets of these responsibilities to individuals, which makes adding maintainers an unnecessarily weighty decision. Another consequence of this monolithic team organization is that we have a single private maintainers stream on Zulip where all this is discussed. This implies that many things that could be discussed publicly end up private. </p>\n<p>To this end, we devised a reorganization of the community structure. The design of the reorganization, to a large extent, is to make implicit structure more explicit, to more clearly define how responsibilities and expectations are assigned to which people. This will allow us to add many more members of the community to the team that oversees mathlib development. We believe that this will allow us to scale while simultaneously keeping up our high standards for the design and implementation of mathlib. We leave the option open to have a more sophisticated organizational structure in the future as the need arises.</p>\n<p>All groups involved will have discussions in public channels as much as possible. We will also create private streams as needed for the different groups, to be used only when necessary.</p>\n<h2>Admin team</h2>\n<p>The admin team oversees the activities of the Lean community organization and in particular the mathlib project. It is responsible for ensuring the mathlib project continues to reflect the general views and interests of the Lean/mathlib community.</p>\n<p>The admin team is a central hub for coordination among other teams. They are responsible for procedural duties: when a decision needs to be made, what should the process be? How should votes be taken, if it's a voting matter?<br>\nIn particular it is responsible for resolving disagreements among teams by finding a way to reach consensus. The admin team is tasked with finding procedures to resolve conflicts when consensus cannot be reached.</p>\n<p>The admin team is the \"first point of contact\" for the community as a whole. This does not mean that they are in charge of all communication, but rather, can forward messages as needed, put the right people in touch, etc.</p>\n<p>Admin maintainers have the admin privileges for the GitHub organization, and they are the \"default\" keyholders and actors for things that are not the responsibility of other teams.</p>\n<p>The admin team will not necessarily be drawn purely from the current maintainers. In particular, we might want people from Microsoft Research, or Lean 4 programming-oriented community members, on the team.<br>\nThe admin team will have between five and eight members. Five of the initial members will be current maintainers, determined by a vote among the current maintainers; the newly elected members will appoint up to three additional members of the admin team.</p>\n<p>The members of all teams will choose an admin team annually by an election, in a manner organized by the current admin team using a system that gives all members a vote of equal weight. Members of the admin team may be re-elected any number of times with no limit.</p>\n<h2>mathlib team</h2>\n<p>The mathlib team is responsible for the mathlib GitHub repository. This team is divided in two subteams: mathlib maintainers and mathlib reviewers.</p>\n<p>We expect that most current active maintainers will remain mathlib maintainers, and we will appoint a first group of reviewers. At the beginning there will be more mathlib maintainers than reviewers. We expect the reviewer team to grow faster over time.</p>\n<h3>mathlib maintainer team</h3>\n<p>The mathlib maintainers are given the right to merge pull requests (via the bors GitHub bot as we already do). Mathlib maintainers will usually have research-level knowledge in some field of mathematics or computer science, and they are given the responsibility to ensure mathlib has a cohesive design with a high-quality implementation. One should think of mathlib maintainers as being akin to journal editors.</p>\n<p>Community members become maintainers at the invitation of the current maintainers, and anyone may nominate a community member by sending a message to a current maintainer. Maintainers serve for a renewable two year term, with the expectation that the term will be renewed unless the maintainer has become inactive or wishes to step down.</p>\n<h3>mathlib reviewer team</h3>\n<p>The mathlib maintainers should appoint members of the wider community to be <em>reviewers</em>. Reviewers, like mathlib maintainers, should have demonstrated that they can submit PRs that do not require significant revision and that they can leave constructive reviews on others' PRs. We will have a system where a reviewer can submit a PR to the mathlib maintainers that a PR is ready for mathlib (like <code>maintainer merge</code> rather than <code>bors merge</code>), and then a mathlib maintainer will do a quick check and put it onto the bors queue if it's the case. A <code>maintainer merge</code> should be as final as a <code>bors merge</code> since mathlib maintainers appoint reviewers they trust, but mathlib maintainers are responsible for what enters mathlib. A maintainer may choose to <code>maintainer merge</code> instead of <code>bors merge</code> if they want another maintainer to take a last look.</p>\n<h2>Other teams</h2>\n<p>There are many tasks that go into supporting the Lean user community outside of mathlib development. The admin team has freedom to decide how these tasks will be supported, but these are some possibilities:</p>\n<ul>\n<li>\n<p><strong>Code of conduct team.</strong> This team already exists with a well-defined purpose: handle incident reports and maintain community standards. See the <a href=\"https://leanprover-community.github.io/meet.html#community-guidelines\">community web page</a>.</p>\n</li>\n<li>\n<p><strong>Continuous integration team.</strong> In charge of Azure, bors administration, continuous integration virtual machines root access, GitHub actions on various projects of the Lean user community.</p>\n</li>\n<li>\n<p><strong>Zulip team.</strong> The Zulip maintainers have the admin privileges for the Zulip and are responsible for whatever random tasks require an administrator. The Zulip maintainers are expected to appoint additional Zulip moderators, who can move/edit posts, create streams, and watch for unacceptable behavior.</p>\n</li>\n<li>\n<p><strong>Website/blog team.</strong> In charge of the public internet face of the Lean user community.</p>\n</li>\n<li>\n<p><strong>Accounts team.</strong> Holds the passwords to the community Gmail, YouTube, Azure, etc. This information can be distributed to other teams as needed.</p>\n</li>\n<li>\n<p><strong>Supporting tools teams.</strong> There are a bunch of projects in the leanprover-community organization that support mathlib: doc-gen, mathlibtools, Lean 3.xc, VSCode extension. None of these are big enough for a complicated org structure, but they should have explicit maintainers with merge access/PR approval rights.</p>\n</li>\n</ul>",
        "id": 297917229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662707763
    },
    {
        "content": "<h1>Proposal for the PR triage, review, merge pipeline</h1>\n<p>The question of how to handle the lifecycle of a PR is not entirely orthogonal to the reorganization above, but can be considered separately. </p>\n<h2>Area labels and groups</h2>\n<p>We will create a broad categorization of topics that PRs can fall under (for instance, analysis, topology, tactics, etc.): call these \"areas.\" Each area will have an associated GitHub label, GitHub user group, and Zulip channel. Mathlib maintainers and reviewers will self-sort into these groups, which creates a loose association of sub-teams by area. They may \"subscribe\" or \"unsubscribe\" to areas as often as they wish. We expect many maintainers and reviewers will subscribe to multiple areas.</p>\n<p>We will find a way, using GitHub CODEOWNERS, a custom action, manually applying labels, or something else, of making sure that every PR gets associated to at least one area. Anyone having experience in doing such things on GitHub is welcome to join the effort.</p>\n<h2>Reviewing</h2>\n<p>As is now, anyone is allowed to review any PR. We had a long discussion about the failing points of our current process and ways to improve it. Here are some thoughts:</p>\n<ul>\n<li>\n<p>Right now, there's a feeling that if you comment a few times on a PR, you've \"claimed\" it. Claiming a PR should be an explicit, opt-in process. We propose that reviewers and maintainers use self-assignments more systematically. If a maintainer wants to be the   person with final say, they should assign the PR to themselves. A maintainer does not need to be a member of the area-subteam that the PR is associated with to self-assign a PR. But, the associated area-subteam is responsible for making sure that someone takes responsibility; if no maintainer has self-assigned after a certain period of time, that group should discuss to see who will take it on.</p>\n</li>\n<li>\n<p>The triage bot can be improved in many ways, to better understand the queue, tag assignees as well as PR authors, etc. Anyone with technical expertise to make that happen is welcome to help.</p>\n</li>\n<li>\n<p>There are different \"kinds\" of reviews: checking for mathematical correctness, generality, style, type class properties, ... We will create a list of items that a PR should be checked for before being merged. If someone checks a PR for style but not content, this should be explicitly indicated. This could be a checkbox in a bot post, or some other mechanism TBD. Again, help is welcome.</p>\n</li>\n</ul>\n<h2>Merging</h2>\n<p>Mathlib reviewers and maintainers have the autonomy to <code>maintainer merge</code> or <code>bors merge</code> as they see fit, but they should discuss anything controversal with the rest of the relevant area sub-team, the rest of the mathlib maintainers, or the wider community. A responsibility of the maintainers in general is to, as needed, help the mathlib team come to consensus on difficult decisions.</p>",
        "id": 297917270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662707789
    },
    {
        "content": "<p>(maybe this deserves to be in <a class=\"stream\" data-stream-id=\"113486\" href=\"/#narrow/stream/113486-announce\">#announce</a> ?)</p>",
        "id": 297922776,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662710446
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> thank you all for the efforts put in the discussions and in imagining this new structure. Personally, I find it very well conceived and I think it will help mathlib a great deal.</p>",
        "id": 298014276,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1662741948
    },
    {
        "content": "<p>I'm proud and happy to announce that the following community members have accepted the invitation to become mathlib reviewers:</p>\n<ul>\n<li>Aaron Anderson</li>\n<li>Alex J. Best</li>\n<li>Thomas Browning</li>\n<li>Anatole Dedecker</li>\n<li>Yaël Dillies</li>\n<li>Moritz Doll</li>\n<li>Jireh Loreaux</li>\n<li>Joseph Myers</li>\n<li>Andrew Yang</li>\n</ul>",
        "id": 301576225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664517985
    },
    {
        "content": "<p>I have one question about the <a href=\"https://bit.ly/3AZk1Qk\">#queue</a> command. I see that it ranks PR's according to the date of updating, via <code>sort:update-asc</code>. Now, this has the effect that a PR on which people have been working for, say, two months and are constantly updating suggestions is far in the queue, because the \"last update\" can date back just some days. Wouldn't it an option to rank them via <code>sort:opened-asc</code>? A clever use of the <code>awaiting-author</code> tag ensures at any rate that it will not be in the list as long as there is still work to do.</p>",
        "id": 302538956,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1665001582
    },
    {
        "content": "<p>When reviewing, I personally sort the queue using <code>sort:created-asc</code> for that reason.</p>",
        "id": 302601824,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665043911
    },
    {
        "content": "<p>Two more reviewers have joined the team: <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> and <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> !</p>",
        "id": 303369901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665471598
    }
]