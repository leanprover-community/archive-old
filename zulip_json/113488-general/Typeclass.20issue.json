[
    {
        "content": "<p>I'm currently working on some stuff to do with ideals in Dedekind Domains, but am running into issues. <br>\nFor instance, when the following compiles when I put it in a separate file, but when I add it at the bottom of <code>ring_theory/dedekind_domain</code> (minus the two import lines, and deleting <code>{R : Type}</code> since <code>R</code>has already been defined), I get some <code>failed to synthesize type class instance</code> errors. Does anyone know why ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.multiset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.dedekind_domain</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ideal_factorization</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">unique_factorization_monoid</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_cancel_monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">](</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_associated'</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">associated</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">units_eq_one</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">units.coe_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hu</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_factors_eq_ideal'</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_of_associated</span> <span class=\"o\">(</span><span class=\"n\">factors_prod</span> <span class=\"n\">hI</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ideal_factorization</span>\n</code></pre></div>",
        "id": 252193765,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1630943377
    },
    {
        "content": "<p>This has probably to do with <code>α</code> already being defined and having typeclasses in <code>ring_theory.dedekind_domain. So you think you're talking about whatever thing you want on your </code>α<code> but end up talking about the file's </code>α`, which has less instances.</p>",
        "id": 252194131,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630943558
    },
    {
        "content": "<p>What's the exact text of the <em>first</em> error you get?</p>",
        "id": 252195686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630944479
    },
    {
        "content": "<p>So the precise text is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 252196101,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1630944753
    },
    {
        "content": "<p>And what's the output of <code>#where</code> right before the incriminated lemma?</p>",
        "id": 252196366,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630944920
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">ideal_factorization</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span> <span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">ring</span> <span class=\"n\">submodule</span> <span class=\"n\">submodule.is_principal</span> <span class=\"n\">ideal</span> <span class=\"n\">fractional_ideal</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_cancel_monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)]</span>\n <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ideal_factorization</span>\n</code></pre></div>",
        "id": 252196532,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1630945034
    },
    {
        "content": "<p><del>When I post your stuff into that file, the <em>first</em> error I get is a complaint about R already being defined, so I think Yael's explanation is correct. I cannot reproduce your error, and furthermore the code you posted above does not compile, so there is some confusion here.</del> Sorry, I missed your comment about deleting R</p>",
        "id": 252196978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630945308
    },
    {
        "content": "<p>I still cannot reproduce your error. Can you fix up the code so that it works independently, and also post precisely what you are posting on the end of the dedekind_domain file?</p>",
        "id": 252197278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630945481
    },
    {
        "content": "<p>Here's the full code I'd I'm trying to add at the end of <code>dedekind_domain</code>,  including the imports (the code compiles fine when I leave it in a separate file).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.multiset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.dedekind_domain</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ideal_factorization</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">unique_factorization_monoid</span> <span class=\"n\">multiset</span> <span class=\"n\">ideal</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_associated</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">associated</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">units_eq_one</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">units.coe_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hu</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_factors_eq_ideal</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">unique_factorization_monoid.factors</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_of_associated</span> <span class=\"o\">(</span><span class=\"n\">unique_factorization_monoid.factors_prod</span> <span class=\"n\">hI</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">associated_equiv_eq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">associated</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eq</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">eq_of_associated</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hab</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">factors_prod_factors_eq_factors</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">):</span>\n  <span class=\"n\">factors</span> <span class=\"n\">α.prod</span> <span class=\"bp\">=</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"n\">α.prod</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">=</span> <span class=\"n\">α.prod</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">associated</span> <span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"n\">α.prod</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">α.prod</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">prime_factors_unique</span> <span class=\"o\">(</span><span class=\"n\">prime_of_factor</span><span class=\"o\">)</span> <span class=\"n\">h₂</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">associated_equiv_eq</span><span class=\"o\">,</span> <span class=\"n\">multiset.rel_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">eq_of_associated</span> <span class=\"o\">(</span><span class=\"n\">factors_prod</span> <span class=\"o\">(</span><span class=\"n\">prod_ne_zero</span> <span class=\"n\">h₁</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ne_zero_of_ne_zero_le</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_eq_bot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">bot_lt_iff_ne_bot</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hI</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_eq_bot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">bot_lt_iff_ne_bot</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hI</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">count_le_of_ideal_le</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">count</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">count</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">dvd_iff_le</span><span class=\"o\">,</span> <span class=\"n\">dvd_iff_factors_le_factors</span> <span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_iff_count.1</span> <span class=\"n\">h</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ne_zero_of_ne_zero_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_dvd</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">hI</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hI</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_not_mem_inf_factors</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">factors</span> <span class=\"n\">I</span> <span class=\"bp\">⊓</span> <span class=\"n\">factors</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hcontra</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset.inf_eq_inter</span><span class=\"o\">,</span> <span class=\"n\">mem_inter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hcontra</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">false_of_ne</span> <span class=\"o\">(</span><span class=\"n\">prime.ne_zero</span> <span class=\"o\">(</span><span class=\"n\">prime_of_factor</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">hcontra.left</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- This is the result I'm hoping to PR</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sup_eq_prod_inf_factors</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hJ</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">I</span> <span class=\"bp\">⊔</span> <span class=\"n\">J</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"n\">I</span> <span class=\"bp\">⊓</span> <span class=\"n\">factors</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">factors</span> <span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"n\">I</span> <span class=\"bp\">⊓</span> <span class=\"n\">factors</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">=</span> <span class=\"n\">factors</span> <span class=\"n\">I</span> <span class=\"bp\">⊓</span> <span class=\"n\">factors</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">factors_prod_factors_eq_factors</span> <span class=\"o\">(</span><span class=\"n\">zero_not_mem_inf_factors</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">),</span>\n    <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset.inf_eq_inter</span><span class=\"o\">,</span> <span class=\"n\">mem_inter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">prime_of_factor</span> <span class=\"n\">p</span> <span class=\"n\">hp.left</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sup_le_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">dvd_iff_le</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">dvd_iff_le</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dvd_iff_factors_le_factors</span> <span class=\"o\">(</span><span class=\"n\">prod_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">zero_not_mem_inf_factors</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">))</span> <span class=\"n\">hI</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">inf_le_left</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dvd_iff_factors_le_factors</span> <span class=\"o\">(</span><span class=\"n\">prod_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">zero_not_mem_inf_factors</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">))</span> <span class=\"n\">hJ</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">inf_le_right</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">dvd_iff_le</span><span class=\"o\">,</span> <span class=\"n\">dvd_iff_factors_le_factors</span><span class=\"o\">,</span> <span class=\"n\">factors_prod_factors_eq_factors</span><span class=\"o\">,</span> <span class=\"n\">le_iff_count</span><span class=\"o\">],</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset.inf_eq_inter</span><span class=\"o\">,</span> <span class=\"n\">multiset.count_inter</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_min</span> <span class=\"o\">(</span><span class=\"n\">count_le_of_ideal_le</span> <span class=\"n\">le_sup_left</span> <span class=\"n\">hI</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">count_le_of_ideal_le</span> <span class=\"n\">le_sup_right</span> <span class=\"n\">hJ</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">zero_not_mem_inf_factors</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset.inf_eq_inter</span><span class=\"o\">,</span> <span class=\"n\">mem_inter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">prime_of_factor</span> <span class=\"n\">p</span> <span class=\"n\">hp.left</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ne_zero_of_ne_zero_le</span> <span class=\"n\">le_sup_left</span> <span class=\"n\">hI</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">prod_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">zero_not_mem_inf_factors</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ideal_factorization</span>\n</code></pre></div>",
        "id": 252199390,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1630946841
    },
    {
        "content": "<p>(Some of the results here probably should go in other files of course :-)   )</p>",
        "id": 252199552,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1630946926
    },
    {
        "content": "<p>If all you remove is the imports then, as is already noted, you'll get an error about variable R already being declared. I was trying to establish exactly what you are doing about this error because whatever I tried didn't give me the error you're seeing.</p>",
        "id": 252200368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630947386
    },
    {
        "content": "<p>In that file, the convention is that R is a <code>comm_ring</code> and A is an integral domain, so you are mixing conventions and this might be what is causing your problems, however because you are still not showing me how to reproduce your problems I am still not able to help.</p>",
        "id": 252200572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630947507
    },
    {
        "content": "<p>Oh! I just noticed that in your output to <code>#where</code> you have <code>[comm_ring R] [integral_domain R]</code> so that's probably your problem. Why not use a different variable name eg A?</p>",
        "id": 252202823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630948701
    },
    {
        "content": "<p>I just changed <code>R</code> to <code>T</code> everywhere in my code, and that seems to have done the trick !</p>",
        "id": 252202955,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1630948797
    },
    {
        "content": "<p>Thanks a lot for the help, this error was driving me nuts ;-)</p>",
        "id": 252203394,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1630949034
    }
]