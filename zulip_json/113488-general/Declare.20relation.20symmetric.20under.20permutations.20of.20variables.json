[
    {
        "content": "<p>Is there a standard way to say in LEAN that a relation is invariant under permutations of its variables?</p>\n<p>For example I have <code>collinear</code> below, and often find myself proving something is not collinear using  <code>lemma noncollinear</code> but with the variables in an order different from what I need. So, for example, I'll have proved <code> ¬ collinear L p₀ p₁ p₂</code> but the goal is <code> ¬ collinear L p₁ p₀  p₂</code>. I know I could unpack and repack the definition of collinear, but my hope is that LEAN/mathlib already does this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.projective_plane</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">noncollinear</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₀</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₀₀</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">∉</span> <span class=\"n\">l₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₁₀</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₂₀</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp₁p₂</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 323136101,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1674515705
    },
    {
        "content": "<p>I suspect it doesn't directly work for the projective case, but you could look at how the API for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/collinear\">docs#collinear</a> is designed in mathlib</p>",
        "id": 323136398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674515884
    },
    {
        "content": "<p>Note that it's defined on a set of points rather than three points</p>",
        "id": 323136447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674515911
    },
    {
        "content": "<p>That said if your goals are literal permutions of the logical connectives of things you know <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#tauto\">tactic#tauto</a> should solve it for you</p>",
        "id": 323138425,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1674517061
    },
    {
        "content": "<p>Thanks. Am I right that <code>tauto</code> won't work if the logical connectives are \"hidden behind\" a definition, (<code>collinear</code> in this case)? E.g. I have  hypothesis <code>¬ collinear L p₀ p₁ p₂</code> but the goal is  <code>¬ collinear L p₁ p₀  p₂</code>.</p>",
        "id": 323141780,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1674519120
    },
    {
        "content": "<p>Yes, it won't work</p>",
        "id": 323144084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674520419
    },
    {
        "content": "<p>But you can write a lemma that says <code>collinear L p q r ↔ collinear L q r p</code> and prove <em>that</em> by unfolding then using <code>tauto</code>.</p>",
        "id": 323144224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674520496
    },
    {
        "content": "<p>or you might just do <code>:= ⟨λ ⟨l, hp, hq, hr⟩, ⟨l, hq, hr, hp⟩, λ ⟨l, hq, hr, hp⟩, ⟨l, hp, hq, hr⟩⟩</code></p>",
        "id": 323154669,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1674528202
    }
]