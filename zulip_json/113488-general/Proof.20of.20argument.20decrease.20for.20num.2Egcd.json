[
    {
        "content": "<p>I'm trying to define <code>gcd</code> for <code>num</code>. I've already defined <code>num.mod</code> and proved related lemmas (which you can check at <a href=\"https://github.com/skbaek/qelim/blob/master/src/common/num.lean\" target=\"_blank\" title=\"https://github.com/skbaek/qelim/blob/master/src/common/num.lean\">https://github.com/skbaek/qelim/blob/master/src/common/num.lean</a>), and here's my first attempt using those preliminary definitions :</p>\n<div class=\"codehilite\"><pre><span></span>def gcd : num → num → num\n| 0       y := y\n| (pos x) y :=\n  have y % pos x &lt; pos x, from mod_lt _ $ pos_pos _,\n  gcd (y % pos x) (pos x)\n</pre></div>\n\n\n<p>I get an error message saying that Lean failed to prove recursive application is decreasing. Apparently Lean is not using the proof of argument decrease provided by <code>have</code>. I'm not sure why this happens, since the definition of <code>nat.gcd</code> is almost identical. Any ideas?</p>",
        "id": 127717897,
        "sender_full_name": "Seul Baek",
        "timestamp": 1528378138
    },
    {
        "content": "<p>The error message shows what you need to prove: in this case, it's <code>num.sizeof (y % pos x) &lt; pos_num.sizeof x + 1</code> (didn't clone the repo).</p>",
        "id": 127718228,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1528378617
    },
    {
        "content": "<p>The default termination measure for well-founded recursion in the equation compiler is lexicographic ordering of the <code>sizeof</code> values of the arguments.  You should probably define <code>has_sizeof</code> for <code>num</code> in a sensible way (i.e. the nat value).  Check out <code>#eval sizeof (1000:num)</code></p>",
        "id": 127718320,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1528378691
    },
    {
        "content": "<p>Note that <code>#eval sizeof</code> is broken for nested and mutual inductives.  <a href=\"https://github.com/leanprover/lean/issues/1518\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1518\">https://github.com/leanprover/lean/issues/1518</a></p>",
        "id": 127718425,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1528378846
    },
    {
        "content": "<p>That worked. Thank you!</p>",
        "id": 127720042,
        "sender_full_name": "Seul Baek",
        "timestamp": 1528381068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116585\">@Seul Baek</span> The latest mathlib update includes <code>div</code> and <code>gcd</code> for <code>num</code> and <code>znum</code>. It is implemented in binary, rather than by repeated subtraction, so it should be exponentially faster than the transcribed <code>nat</code> definition, which is what it looks like you did. I think <code>gcd</code> should have something like <code>O((log n)^2)</code> performance in the kernel now</p>",
        "id": 127961269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1528819929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thank you for the notice. This is very good news - I was only thinking about faster subtraction using binary representations.</p>",
        "id": 128092239,
        "sender_full_name": "Seul Baek",
        "timestamp": 1529017955
    }
]