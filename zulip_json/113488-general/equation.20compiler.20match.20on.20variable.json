[
    {
        "content": "<p>I don't know how to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">37</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n</code></pre></div>\n<p>The equation compiler complains :-( I can use <code>if then else</code> in my situation but I was hoping for better definitional equalities.</p>",
        "id": 284778524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654191363
    },
    {
        "content": "<p>Note that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n</code></pre></div>\n<p>doesn't work because the equation compiler assumes <code>n</code> is a fresh variable, and thus always matches the first branch.</p>",
        "id": 284778604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654191431
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[pattern]</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">37</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n</code></pre></div>\n<p>hope it works in a non-minimal example <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 284778649,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654191461
    },
    {
        "content": "<p>Is this even possible?</p>",
        "id": 284778747,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654191493
    },
    {
        "content": "<p>(And I know why you need it Kevin, and I really do wish it actually is possible)</p>",
        "id": 284778792,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654191518
    },
    {
        "content": "<p>In my actual example, <code>f n</code> is just <code>n - 1</code>.</p>",
        "id": 284779070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654191651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/equation.20compiler.20match.20on.20variable/near/284779070\">said</a>:</p>\n<blockquote>\n<p>In my actual example, <code>f n</code> is just <code>n - 1</code>.</p>\n</blockquote>\n<p><span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> so looks like the solution doesn't work, do you need the truncating property of <code>-</code> exactly in this way?</p>",
        "id": 284779302,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654191750
    },
    {
        "content": "<p>Scott uses <code>if then else</code> in the definition of <code>homological_complex.single</code> in <code>algebra/homology/single.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">A</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>and then later on defines <code>single₀</code> \"with better definitional equalities\" in the special case j = 0, when he can use the equation compiler.</p>",
        "id": 284779420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654191808
    },
    {
        "content": "<p>Yeah the benefit of <code>single_0</code> is that <code>(single_0.obj B).X 0</code> is defeq to <code>B</code></p>",
        "id": 284779563,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654191870
    },
    {
        "content": "<p>Maybe we can try something approximately like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">i</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284779763,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654191954
    },
    {
        "content": "<p>With that we get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284780320,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654192192
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.homology.homological_complex</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">zero_object</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">single_X</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">single_X</span> <span class=\"n\">n</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">chain_complex</span> <span class=\"n\">A</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">single_X</span> <span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">shape'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">d_comp_d'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 284781332,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654192610
    },
    {
        "content": "<p>In the following code, why is the <code>dsimp</code> needed in the last branch of <code>of_hom_d</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.homology.homological_complex</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">zero_object</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">of_hom_X</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Y</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">of_hom_X</span> <span class=\"n\">n</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">of_hom_d</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">of_hom_X</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">of_hom_X</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">j</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">of_hom_X</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">of_hom_d</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">of_hom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">chain_complex</span> <span class=\"n\">A</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">of_hom_X</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">of_hom_d</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">shape'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">d_comp_d'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 284783077,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654193516
    },
    {
        "content": "<p>Is this just a quirk of the equation compiler?</p>",
        "id": 284783267,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654193601
    },
    {
        "content": "<p>(For those in the know, those <code>d</code>'s define a cochain complex, not a chain complex as indicated, but the issue is of course unrelated)</p>",
        "id": 284790021,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654196648
    },
    {
        "content": "<p>Even if you do it like this, <code>single_X B n n = B</code> won't be <code>rfl</code>, the proof term will have a <code>nat.rec</code> in it.</p>",
        "id": 284796037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654199710
    },
    {
        "content": "<p>Yeah, you can make it <code>rfl</code> using the equation compiler.</p>",
        "id": 284796302,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654199829
    },
    {
        "content": "<p>Well, no, you're right, not <code>rfl</code> because you need induction.</p>",
        "id": 284796380,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654199868
    },
    {
        "content": "<p>For an explicit value of n you can, but not in general right?</p>",
        "id": 284796388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654199870
    },
    {
        "content": "<p>Yeah you're right.</p>",
        "id": 284796460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654199892
    },
    {
        "content": "<p>I am now using the <code>eq_to_iso</code> trick</p>",
        "id": 284796479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654199901
    },
    {
        "content": "<p>Unless you know how to prove that <code>cast (f &gt;&gt; g) = cast f &gt;&gt; cast g</code> and <code>cast 0 = 0</code>...</p>",
        "id": 284796669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654199994
    },
    {
        "content": "<p>No, I think that would be worse!</p>",
        "id": 284796784,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654200023
    },
    {
        "content": "<p>At least <code>eq_to_iso</code> is an iso which you can move around</p>",
        "id": 284796858,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654200060
    },
    {
        "content": "<p>This feels like a bug in the equation compiler to me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n</code></pre></div>\n<p>Lean is happy to accept this, and is clearly not binding a new variable with the <code>.(n)</code> as <code>.(bar)</code> is forbidden; but it doesn't do the right thing.</p>",
        "id": 284812879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654208616
    },
    {
        "content": "<p>Maybe I don't understand <code>.</code> notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_37</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">is_37</span> <span class=\"mi\">1</span>  <span class=\"c1\">-- tt</span>\n</code></pre></div>",
        "id": 284813108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654208791
    },
    {
        "content": "<p>Yeah, Alex' code above doesn't work either, it matches on any <code>n</code> not the one which you want to match on.</p>",
        "id": 284813635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654209200
    }
]