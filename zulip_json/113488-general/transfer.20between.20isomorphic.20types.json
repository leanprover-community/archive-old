[
    {
        "content": "<p>Is there a way to transfer theorems between two isomorphic types (semi-)automatically? For example using <code>transfer</code>? <span class=\"user-mention\" data-user-id=\"110294\">@Johannes HÃ¶lzl</span> ?</p>\n<p>In my case, I have row vectors (1xn matrices) and column vectors (nx1 matrices). Whether this makes sense or not is surely also up for discussion and you can tell me your opinion if you like.</p>\n<p>Anyhow, I'd like to prove lemmas only for one of them and transfer them to the other via a bijection.</p>",
        "id": 162358860,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1554228127
    },
    {
        "content": "<p>Search for <code>transfer</code> in this chat...</p>",
        "id": 162358882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554228170
    },
    {
        "content": "<p>Or <code>transport</code></p>",
        "id": 162358887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554228175
    },
    {
        "content": "<p>You will find lots of requests, headaches, pain, confusion</p>",
        "id": 162358907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554228188
    },
    {
        "content": "<p>Mathematicians think its trivial, computer scientists think not.</p>",
        "id": 162358930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554228208
    },
    {
        "content": "<p>People are trying to build things. Little progress so far.</p>",
        "id": 162358943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554228219
    },
    {
        "content": "<p>The <code>transfer</code> tactic exists. But there is no infrastructure.</p>",
        "id": 162358958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554228239
    },
    {
        "content": "<p>Oh, right, I should have searched in the chat earlier. Thanks :-)</p>",
        "id": 162359136,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1554228352
    },
    {
        "content": "<p>No worries! The more people are interested in this thing, the higher the chances we get a solution soon.</p>",
        "id": 162359214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554228382
    },
    {
        "content": "<p>You are working in the Lean Forward project, right?</p>",
        "id": 162359315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554228454
    },
    {
        "content": "<p>Having a powerful and easy-to-use transfer/transport system is a core feature if mathematicians are to use theorem provers...</p>",
        "id": 162359427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554228511
    },
    {
        "content": "<p>I am actually part of the Matryoshka project, but I am also working in Amsterdam.</p>",
        "id": 162359432,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1554228514
    },
    {
        "content": "<p>yes, that would be definitely good to have</p>",
        "id": 162359463,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1554228539
    },
    {
        "content": "<p>That's a pretty realistic looking hologram that you sent to Pittsburgh!</p>",
        "id": 162359490,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554228551
    },
    {
        "content": "<p>Aah, too bad. I was thinking I could suggest you a topic <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 162359498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554228557
    },
    {
        "content": "<p>But it seems to work pretty well for <code>has_add</code> and <code>has_mul</code>, right?</p>",
        "id": 162361924,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1554230113
    },
    {
        "content": "<p>It's not perfect</p>",
        "id": 162362642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554230678
    },
    {
        "content": "<p>But it's much better than nothing</p>",
        "id": 162362652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554230686
    },
    {
        "content": "<p>It's also used for integers somehow</p>",
        "id": 162362679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554230705
    },
    {
        "content": "<p>Relating them to pairs of naturals</p>",
        "id": 162362704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554230725
    },
    {
        "content": "<p>I think this is no longer true</p>",
        "id": 162362796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554230785
    },
    {
        "content": "<p>since Lean 3.4.2</p>",
        "id": 162362812,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554230792
    },
    {
        "content": "<p>I thought they only moved that construction from core to mathlib</p>",
        "id": 162363028,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554230954
    },
    {
        "content": "<p>No, int is in core</p>",
        "id": 162363039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554230972
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/commit/95fa4cfb0a8774570d67bb231c1ab088a94e12bb\" target=\"_blank\" title=\"https://github.com/leanprover/lean/commit/95fa4cfb0a8774570d67bb231c1ab088a94e12bb\">https://github.com/leanprover/lean/commit/95fa4cfb0a8774570d67bb231c1ab088a94e12bb</a></p>",
        "id": 162363135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554231012
    },
    {
        "content": "<p>So transfer is now in mathlib, and is no longer used to build int</p>",
        "id": 162363213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554231067
    }
]