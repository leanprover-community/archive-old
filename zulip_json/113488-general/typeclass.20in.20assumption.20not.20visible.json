[
    {
        "content": "<p>I'm having trouble with typeclasses when an instance is clearly in assumptions but is still fails to be synthesized. Minimal working example: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n <span class=\"o\">{</span><span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">R</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">is_linear_map</span> <span class=\"n\">R</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p><code>is_linear_map</code> has trouble finding an instance of <code>add_comm_monoid</code> and <code>semimodule</code>. What is going wrong here?</p>\n<p>edit: Previously there was <code> is_linear_map ℝ f</code> instead of <code>is_linear_map R f</code></p>",
        "id": 217683435,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1606165974
    },
    {
        "content": "<p>I don't think this <code>[_]</code> is a real thing, is it?</p>",
        "id": 217683616,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606166080
    },
    {
        "content": "<p>huh, apparently it does something</p>",
        "id": 217683808,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606166191
    },
    {
        "content": "<p>Well, I thought it might help because those instances actually get named as <code>_inst_#</code> if you write <code>[_]</code> instead of <code>_</code>. But it does not work neither with <code>[_]</code> or <code>_</code>.</p>",
        "id": 217683811,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1606166193
    },
    {
        "content": "<p>Anyways, you have no instance involving <code>ℝ</code> so that seems to be the main problem</p>",
        "id": 217683830,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606166205
    },
    {
        "content": "<p>Those are real numbers and there is definitely an instance of <code>semiring R</code>.</p>",
        "id": 217683896,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1606166254
    },
    {
        "content": "<p>My error looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">U</span>\n</code></pre></div>",
        "id": 217683926,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1606166280
    },
    {
        "content": "<p>OK, the other problem is that <code>by exactI</code> is needed here</p>",
        "id": 217684016,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606166321
    },
    {
        "content": "<p>Then you will run into the problem with <code>ℝ</code></p>",
        "id": 217684024,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606166328
    },
    {
        "content": "<p>Ohh sorry, I have messed up, There should be <code>is_linear_map R f</code> instead of <code>is_linear_map ℝ f</code>. And I get an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">semiring</span> <span class=\"n\">R</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">U</span>\n</code></pre></div>",
        "id": 217684175,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1606166412
    },
    {
        "content": "<p>The type class inference system doesn't look at what's in your local context, it only knows about instances if they show up before the colon</p>",
        "id": 217684206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606166430
    },
    {
        "content": "<p>So do I have to spell out all those instances manually in <code>instance inst : C := {prop := λ R U V [_] [_] [_] [_] [_] f, is_linear_map R f }</code> ?</p>",
        "id": 217684418,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1606166547
    },
    {
        "content": "<p>No, you need to insert <code>by exactI</code> after the <code>,</code></p>",
        "id": 217684458,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606166571
    },
    {
        "content": "<p>Ohh thank you! I have no clue what <code>by exactI</code> does but it works.</p>",
        "id": 217684539,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1606166619
    },
    {
        "content": "<p>Ok documentation says <code>Like 'exact', but uses all variables in the context for typeclass inference.</code>  Now it makes sense.</p>",
        "id": 217684637,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1606166666
    },
    {
        "content": "<p>Does the example rely on <code>[_]</code>, or is it fine with regular <code>_</code> too?</p>",
        "id": 217686166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606167618
    },
    {
        "content": "<p>It does not matter if <code>[_]</code> or <code>_</code> is used, the important bit is <code>by exactI</code></p>\n<p>i.e. it works when the last line is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">R</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">is_linear_map</span> <span class=\"n\">R</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217687952,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1606168629
    },
    {
        "content": "<p>That's a relief, because before this thread I'm not sure anyone had ever seen <code>[_]</code> before.</p>",
        "id": 217689397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606169370
    }
]