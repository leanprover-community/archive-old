[
    {
        "content": "<p>Could we get <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category/basic.lean#L19\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/category/basic.lean#L19\">https://github.com/leanprover-community/mathlib/blob/master/src/category/basic.lean#L19</a> out of the root namespace? <code>map_map</code> is a really generic name, so it's real a pain.</p>",
        "id": 162761390,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554653129
    },
    {
        "content": "<p>How about <code>is_lawful_functor</code>?</p>",
        "id": 162761536,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554653319
    },
    {
        "content": "<p>I don't understand your question</p>",
        "id": 162761667,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554653463
    },
    {
        "content": "<p>What does <code>protected</code> even mean for a function in the root namespace?</p>",
        "id": 162761850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554653670
    },
    {
        "content": "<p>I think there was a time when this line was indeed inside a name space</p>",
        "id": 162761890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554653724
    },
    {
        "content": "<p>getting <code>functor.map_id</code> and <code>functor.map_comp</code> out of the root namespace would also be nice; these often get in the way of <code>category_theory.functor.map_id</code> and co.</p>",
        "id": 162773854,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554672878
    },
    {
        "content": "<blockquote>\n<p>getting <code>functor.map_id</code> and <code>functor.map_comp</code> out of the root namespace would also be nice; these often get in the way of <code>category_theory.functor.map_id</code> and co.</p>\n</blockquote>\n<p>Could these just be protected?</p>",
        "id": 162775277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554675159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> , would you mind if we get <code>map_map</code>out of the root namespace? It's a really generic name (and I always want <code>filter.map_map</code> instead, but that's a different topic). TBH, <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/control/basic.lean#L20\">https://github.com/leanprover-community/mathlib/blob/master/src/control/basic.lean#L20</a> looks like it was meant to be name-spaced anyway.</p>",
        "id": 203138852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594145409
    },
    {
        "content": "<p>I'm all for <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 203138957,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594145476
    },
    {
        "content": "<p><code>functor.map_map</code> then?</p>",
        "id": 203139081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594145542
    },
    {
        "content": "<p>Anyone against taking the opportunity to rename <code>filter.comap_comap_comp</code> to <code>filter.comap_comap</code> for consistency?</p>",
        "id": 203139298,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594145670
    },
    {
        "content": "<p>And while Simon is here: any idea why the <code>mono</code> attribute doesn't like <code>filter.map_mono</code> and <code>filter.comap_mono</code>?</p>",
        "id": 203139427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594145750
    },
    {
        "content": "<p>Note that</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">comap_mono&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">comap</span> <span class=\"n\">m</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">comap</span> <span class=\"n\">m</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">comap_mono</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">mono</span><span class=\"o\">]</span> <span class=\"n\">comap_mono&#39;</span>\n</code></pre></div>\n\n\n<p>works.</p>",
        "id": 203139756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594145924
    },
    {
        "content": "<p>Can you show me <code>comap_mono</code>?</p>",
        "id": 203141637,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594146899
    },
    {
        "content": "<p>Also the error message</p>",
        "id": 203141665,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594146913
    },
    {
        "content": "<p><code>comap_mono : ∀ {α : Type u_1} {β : Type u_2} {m : α → β}, monotone (comap m)</code></p>",
        "id": 203145708,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594148695
    },
    {
        "content": "<p>The error message is \"failed\".</p>",
        "id": 203145739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594148711
    },
    {
        "content": "<p>I think it's just that it doesn't unfold <code>monotone</code></p>",
        "id": 203145752,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594148721
    },
    {
        "content": "<p>That's pretty clear isn't it? Why do you need my help? :P</p>",
        "id": 203145789,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594148736
    },
    {
        "content": "<p>I think the reason for not unfolding definitions, is that subset is defined as a forall that <code>mono</code> would mistake for introducing relevant assumptions if we unfolded it. I just decided not to unfold anything. I could unfold specifically <code>monotone</code>. I wonder if there's a less intertwined mechanism that would work as well</p>",
        "id": 203146216,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594148907
    },
    {
        "content": "<p>Having a special case for <code>monotone</code> seems fair for a monotonicity tactic.</p>",
        "id": 203147360,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594149376
    },
    {
        "content": "<p>What I worry about is that there could be ways to have a different formulation (e.g. more adapted to category theory or more general) of <code>monotone</code> and we'd have to list all the variations in the tactic. Alternatively, we can just tag all the definitions with an attribute</p>",
        "id": 203147868,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594149675
    },
    {
        "content": "<p>Simon, do you actually want <code>functor.map_map</code> to be protected?</p>",
        "id": 203147891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594149690
    },
    {
        "content": "<p>I'm not sure. Do you ever use it with <code>filter.map_map</code>?</p>",
        "id": 203148476,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594149955
    },
    {
        "content": "<p>I never use it, period.</p>",
        "id": 203148961,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594150185
    },
    {
        "content": "<p>I don't think it needs to be protected</p>",
        "id": 203149139,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594150251
    },
    {
        "content": "<p>About <code>mono</code>, I'd like to have something simple that unfold <code>monotone</code> and nothing else. Category people can complain later.</p>",
        "id": 203149199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594150282
    },
    {
        "content": "<p>I can see you're not the one they come after with their sharp arrows</p>",
        "id": 203149703,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594150537
    },
    {
        "content": "<p>But seriously, what file is it defined in and does that file import fancy tactics?</p>",
        "id": 203149796,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594150573
    },
    {
        "content": "<p>order/basic</p>",
        "id": 203149976,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594150679
    },
    {
        "content": "<p>which import only data.set.basic</p>",
        "id": 203150155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594150783
    },
    {
        "content": "<p>Cool, so that can be made to work. And it can be left as an exercise to the reader</p>",
        "id": 203150482,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594150948
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/OAR976lOUO8Ok7G6GExwsYU5/gr.pdf\">gr.pdf</a></p>",
        "id": 203150506,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594150962
    },
    {
        "content": "<p>That's <code> leanproject import-graph --to order.basic gr.pdf</code></p>",
        "id": 203150579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594151011
    },
    {
        "content": "<p>That is really a cool idea! I've never used it</p>",
        "id": 203150746,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594151101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/113488-general/topic/map_map/near/203150482\">said</a>:</p>\n<blockquote>\n<p>Cool, so that can be made to work. And it can be left as an exercise to the reader</p>\n</blockquote>\n<p>If this is serious then I'll need hints. For instance a docstring on each def of <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/monotonicity/basic.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/monotonicity/basic.lean</a></p>",
        "id": 203197983,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594153299
    },
    {
        "content": "<p>Ok first step, I believe this is where the error message comes from: </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/monotonicity/basic.lean#L84\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/monotonicity/basic.lean#L84</a></p>\n<p>Let's make a more helpful message</p>",
        "id": 203198801,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594153744
    },
    {
        "content": "<p>I think you could write <code>fail!\"Cannot find relation in {h}\"</code></p>",
        "id": 203199047,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594153888
    },
    {
        "content": "<p>What you care about is mostly <code>monotonicity.attr</code> and <code>monotonicity.check</code>. <code>monotonicity.check</code> finds a relation in the type of the lemma and constructs a key to look it up in an index. That's where I would unfold <code>monotone</code>. Another reasonable approach would be to use an application of <code>monotone</code> as a way of determining what is the monotonic function and the relation it preserves</p>",
        "id": 203199478,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594154141
    },
    {
        "content": "<p>I'm struggling to minimize the map_mono issue</p>",
        "id": 203199992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594154403
    },
    {
        "content": "<p>I get a different error message.</p>",
        "id": 203200009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594154413
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">monotonicity</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">mono</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">id</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">mono</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span>\n</code></pre></div>\n\n\n<p>The first lemma works fine, the second one says:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">oh</span><span class=\"err\">?</span> <span class=\"k\">Pi</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"bp\">_</span><span class=\"n\">mlocal</span><span class=\"bp\">._</span><span class=\"n\">fresh</span><span class=\"bp\">.</span><span class=\"mi\">1264</span><span class=\"bp\">.</span><span class=\"mi\">227</span><span class=\"o\">}}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"bp\">_</span><span class=\"n\">mlocal</span><span class=\"bp\">._</span><span class=\"n\">fresh</span><span class=\"bp\">.</span><span class=\"mi\">1264</span><span class=\"bp\">.</span><span class=\"mi\">227</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"n\">monotone</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"bp\">_</span><span class=\"n\">mlocal</span><span class=\"bp\">._</span><span class=\"n\">fresh</span><span class=\"bp\">.</span><span class=\"mi\">1264</span><span class=\"bp\">.</span><span class=\"mi\">227</span> <span class=\"err\">?</span><span class=\"bp\">_</span><span class=\"n\">mlocal</span><span class=\"bp\">._</span><span class=\"n\">fresh</span><span class=\"bp\">.</span><span class=\"mi\">1264</span><span class=\"bp\">.</span><span class=\"mi\">227</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"err\">?</span><span class=\"bp\">_</span><span class=\"n\">mlocal</span><span class=\"bp\">._</span><span class=\"n\">fresh</span><span class=\"bp\">.</span><span class=\"mi\">1264</span><span class=\"bp\">.</span><span class=\"mi\">227</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 203200103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594154467
    },
    {
        "content": "<p>before line 100, trace <code>xs</code> and <code>h</code></p>",
        "id": 203200472,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594154670
    },
    {
        "content": "<p>Nothing</p>",
        "id": 203200549,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594154725
    },
    {
        "content": "<p>wait</p>",
        "id": 203200591,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594154759
    },
    {
        "content": "<p>I didn't have my cursor right</p>",
        "id": 203200642,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594154770
    },
    {
        "content": "<p>It says <code>([α, _inst_1], monotone id)</code> twice</p>",
        "id": 203200689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594154813
    },
    {
        "content": "<p>I see</p>",
        "id": 203200897,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594154941
    },
    {
        "content": "<p><code>mono_head_candidates 3 xs.reverse h</code> is considering the head of the type (after all the <code>-&gt;</code> and <code>Pi</code>) and at most three variables (in case we're considering the monotonicity of implication)</p>",
        "id": 203201107,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594155043
    },
    {
        "content": "<p>But <code>monotone</code> is not a relation. So before calling <code>mono_head_candidates</code>, you should use <code>dsimp</code> to unfold <code>monotone</code> on the type of the lemma</p>",
        "id": 203201324,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594155139
    },
    {
        "content": "<p><code>dsimp</code> at what?  <code>lm_n</code>?</p>",
        "id": 203201550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594155250
    },
    {
        "content": "<p>you can call it as <code>lm_t &lt;- expr.dsimp lm_t { fail_if_unchanged := ff } tt [] [simp_arg_type.expr ``(monotone)],</code></p>\n<p>(editted)</p>",
        "id": 203201560,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594155257
    },
    {
        "content": "<p>That seems to work!</p>",
        "id": 203201973,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594155467
    },
    {
        "content": "<p>I mean for the identity is monotone lemma.</p>",
        "id": 203201994,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594155481
    },
    {
        "content": "<p>And with the one that does not mention <code>monotone</code>, that works as well?</p>",
        "id": 203202121,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594155537
    },
    {
        "content": "<p>Yes, but it doesn't work with filters <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> It accepts to add the attribute but doesn't use the lemma.</p>",
        "id": 203202434,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594155699
    },
    {
        "content": "<p>The trace for that lemma is <code>([α, β, m, a, b, a], filter.map m a ≤ filter.map m b)</code></p>",
        "id": 203202543,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594155745
    },
    {
        "content": "<p>Ok</p>",
        "id": 203202627,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594155789
    },
    {
        "content": "<p>Go to line 147. This is where we query the monotonicity cache.</p>",
        "id": 203202768,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594155855
    },
    {
        "content": "<p>The function is called <code>get_monotonicity_lemmas</code></p>",
        "id": 203202791,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594155879
    },
    {
        "content": "<p>yes, I see it</p>",
        "id": 203202821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594155892
    },
    {
        "content": "<p>A little lower, we search it and assign to <code>ns</code> a list of candidates. Print it</p>",
        "id": 203202868,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594155917
    },
    {
        "content": "<p>We're going to make sure that the lemma makes it to the list of candidates. After, we're going to see how it gets removed (if it does)</p>",
        "id": 203202984,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594155964
    },
    {
        "content": "<p>It's in the list</p>",
        "id": 203203007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594155980
    },
    {
        "content": "<p>but <code>no good match</code></p>",
        "id": 203203034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594155991
    },
    {
        "content": "<p>What about the contents of <code>ns'</code>?</p>",
        "id": 203203053,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594156004
    },
    {
        "content": "<p>same list with only one element</p>",
        "id": 203203132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594156056
    },
    {
        "content": "<p>In a different file <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/monotonicity/interactive.lean#L470\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/monotonicity/interactive.lean#L470</a> we have <code>mono_aux</code> that does more filtering and then makes several attempts at applying candidates</p>",
        "id": 203203356,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594156174
    },
    {
        "content": "<p>First, print <code>rs</code></p>",
        "id": 203203824,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594156427
    },
    {
        "content": "<p>It's thinking about it</p>",
        "id": 203203886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594156446
    },
    {
        "content": "<p>Time to make some tea</p>",
        "id": 203203907,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594156463
    },
    {
        "content": "<p>It's in ns but not rs</p>",
        "id": 203203920,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594156473
    },
    {
        "content": "<p>Ok so it probably happens in <code>find_lemma</code></p>",
        "id": 203204291,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594156700
    },
    {
        "content": "<p>And looking at <code>find_lemma</code>, <code>match_rule</code> and <code>match_rule_head</code> are probably relevant</p>",
        "id": 203204331,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594156741
    },
    {
        "content": "<p>Yes, this I was able to tell</p>",
        "id": 203204357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594156766
    },
    {
        "content": "<p>What I would try is put the same <code>dsimp</code> line here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/monotonicity/interactive.lean#L355\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/monotonicity/interactive.lean#L355</a></p>",
        "id": 203204449,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594156805
    },
    {
        "content": "<p>And clearly whatever unfolding was done when putting the attribute is now lost</p>",
        "id": 203204457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594156807
    },
    {
        "content": "<p>with a small adjustment</p>",
        "id": 203204484,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594156813
    },
    {
        "content": "<p>Exactly because only the name of the lemma is put in the cache</p>",
        "id": 203204565,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594156832
    },
    {
        "content": "<p>Yes</p>",
        "id": 203204588,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594156838
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3310\">https://github.com/leanprover-community/mathlib/pull/3310</a></p>",
        "id": 203207822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594158639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Could you review the above PR? I think Scott, Rob and I sufficiently messed up with your work to ensure you can go from author to reviewer.</p>",
        "id": 203321318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594241446
    },
    {
        "content": "<p>I approve. Should I post <code>bors r+</code> to get it merged?</p>",
        "id": 203321805,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594241706
    },
    {
        "content": "<p>Yes, please.</p>",
        "id": 203321943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594241769
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3310/files#diff-46d8fb7fe470316c30396976c88b30a9R99\">This</a> is the only actual change, right? The rest is tracing or removing unused arguments. I think it should be uncontroversial!</p>",
        "id": 203321953,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594241774
    },
    {
        "content": "<p>Simon, do you understand how we ended up with all those unused argument?</p>",
        "id": 203321979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594241789
    },
    {
        "content": "<p>Rob, you missed <a href=\"https://github.com/leanprover-community/mathlib/pull/3310/files#diff-54c5eab6d816f396b485233519d628acR356\">https://github.com/leanprover-community/mathlib/pull/3310/files#diff-54c5eab6d816f396b485233519d628acR356</a></p>",
        "id": 203322014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594241812
    },
    {
        "content": "<p>I think I did some refactoring lazily and didn't bother making sure that the arguments were needed</p>",
        "id": 203322040,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594241830
    },
    {
        "content": "<p>Btw, what's the difference between <code>bors r+</code> and <code>bors r-</code>?</p>",
        "id": 203322099,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594241864
    },
    {
        "content": "<p>I think they are opposite moves.</p>",
        "id": 203322136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594241878
    }
]