[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I just discovered by reading the source code that lean doesn't consider an inductive suitable for K-like reduction unless it has 0 arguments in the constructor, rather than having all arguments in the output type like I thought (and wrote in my paper). Do you know why this is?</p>\n<div class=\"codehilite\"><pre><span></span>inductive  eq&#39; {α} : α → α →  Prop\n| refl : ∀ a, eq&#39; a a\nvariables {α : Sort*} {C : α → α → Sort*}\n(e : ∀ (a : α), C a a) (a : α) (h : eq&#39; a a)\n#reduce  @eq&#39;.rec α C e a a h --expected: e a\n</pre></div>",
        "id": 124204821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522023703
    },
    {
        "content": "<p>The purpose of K-like reduction is that <code>eq</code> and <code>heq</code> reduce better.  And \"single constructor with no arguments\" is the easiest criterion for that.  IIRC, the code even constructs an explicit <code>eq.refl</code>/<code>heq.refl</code>/etc. term and checks whether it is def-eq with the major premise during reduction.</p>",
        "id": 124214212,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522046209
    }
]