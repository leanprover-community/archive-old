[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Can you explain to me how I should invoke <code>wlog</code> in this problem that is <em>clearly</em> (lol) symmetric:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">forty_two</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 177397136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570249194
    },
    {
        "content": "<p>Note that <code>wlog : a ≤ b</code> succeeds after thinking for a long time.</p>",
        "id": 177397183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570249213
    },
    {
        "content": "<p>I wouldn't mind if it dumps some proof obligations in my face. I can then manually select a hammer to kill them off.</p>",
        "id": 177397189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570249235
    },
    {
        "content": "<p>What if you specified the variables on which the symmetry hinges? <code>wlog : a ≤ b ∧ b ≤ c using a b c,</code>?</p>",
        "id": 177397833,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570250662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> </p>\n<div class=\"codehilite\"><pre><span></span>To generate cases at least two permutations are required, i.e. `using [x y, y x]` or exactly 0 or 2 variables\n</pre></div>",
        "id": 177397904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570250859
    },
    {
        "content": "<p>You could do <code>wlog : a ≤ b ∧ b ≤ c using [a b c,b c a],</code></p>",
        "id": 177398067,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570251195
    },
    {
        "content": "<p>You need 6 permutations, right?</p>",
        "id": 177398306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570251693
    },
    {
        "content": "<p>And then it times out... <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span></p>",
        "id": 177398309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570251708
    },
    {
        "content": "<p>Huh... it works</p>",
        "id": 177398358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570251775
    },
    {
        "content": "<p>You can file an issue. I'll have a closer look later</p>",
        "id": 177398371,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570251825
    },
    {
        "content": "<p>Ooh, no, it doesn't. It generates a side goal that is false.</p>",
        "id": 177398372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570251828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/1509\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1509\">#1509</a></p>",
        "id": 177398478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570252054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Do you have any thoughts on this issue?</p>",
        "id": 180487476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573541946
    },
    {
        "content": "<p>I just found out that there is another parameter of this tactic: <code>discharger : tactic unit</code>. Its default value is <code>tactic.solve_by_elim &lt;|&gt; tactic.tautology tt &lt;|&gt; using_smt (smt_tactic.intros &gt;&gt; smt_tactic.solve_goals)</code>, which is the reason <code>wlog</code> takes so long. If you use <code>skip</code> instead, <code>wlog</code> is very fast. Of course, the disadvantage is that you get a lot of stupid goals afterwards.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">forty_two</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 180672354,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1573679004
    },
    {
        "content": "<p>Thanks, that looks very helpful!</p>",
        "id": 180674862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573680563
    },
    {
        "content": "<p>But I guess you could use a more sensible tactic.</p>",
        "id": 180675082,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573680671
    },
    {
        "content": "<p>I thought that had been changed in mathlib already</p>",
        "id": 180675286,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1573680809
    },
    {
        "content": "<p>Let us know if you find a nice way to discharge these goals. Maybe there could be a different default value for <code>discharger</code>?</p>",
        "id": 180677043,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1573681997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  With an auxiliary lemma for wlog with three variables, we can speed this up a lot.  Maybe this lemma <code>wlog3</code> should be in mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">wlog3</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">wlog</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">hc₁</span><span class=\"bp\">;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"k\">with</span> <span class=\"n\">hc₂</span><span class=\"bp\">;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"k\">with</span> <span class=\"n\">hc₃</span><span class=\"bp\">;</span>\n    <span class=\"n\">cc</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">forty_two</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">wlog3</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">implies</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"n\">ac_refl</span><span class=\"o\">,</span>\n    <span class=\"n\">ac_refl</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">implies</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"n\">ac_refl</span><span class=\"o\">,</span>\n    <span class=\"n\">ac_refl</span><span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The trick is that we actually do not need to consider all 5 non-identity permutations. Just 2 permutations are enough to express all others.</p>\n<p>Unfortunately, I don't see a fast way to discharge the resulting goals in a way that is both fast and generally applicable.</p>",
        "id": 180854359,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1573839629
    },
    {
        "content": "<p>We could tag <code>wlog3</code> with a <code>wlog</code> attribute and get the tactic <code>wlog</code> to try those before trying the <code>discharger</code></p>",
        "id": 180858722,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1573842690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> Thanks a lot for looking at this!</p>",
        "id": 180862932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573845523
    },
    {
        "content": "<p>It's already a lot better than the mess that I initially had <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 180862951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573845541
    },
    {
        "content": "<p>I'm still hoping that tactics could crunch away more of the administrative parts of the proof.</p>",
        "id": 180862983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573845571
    },
    {
        "content": "<p>It would be nice if one could drill down to the heart of the matter in &lt;5 lines</p>",
        "id": 180863020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573845601
    },
    {
        "content": "<p>You can replace </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">implies</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"n\">ac_refl</span><span class=\"o\">,</span>\n    <span class=\"n\">ac_refl</span><span class=\"o\">},</span>\n</pre></div>\n\n\n<p>by <code>cc</code>. But unfortunately, that's very slow. I am not sure why.</p>",
        "id": 180863093,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1573845640
    }
]