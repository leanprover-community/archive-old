[
    {
        "content": "<p>Why does the first example below work and the second does not?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">zmod</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">χ₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">→*₀</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)),</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">χ₄</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dec_trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">χ₄</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dec_trivial</span>\n<span class=\"c1\">-- failed to synthesize type class instance for</span>\n<span class=\"c1\">-- ⊢ decidable (∀ (m : ℤ), 0 ≤ m → m &lt; 4 → ⇑χ₄ ↑m = ite (m % 2 = 0) 0 (ite (m = 1) 1 (-1)))</span>\n</code></pre></div>",
        "id": 281336613,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651773838
    },
    {
        "content": "<p>there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.decidable_lo_hi\">docs#nat.decidable_lo_hi</a>, but not an int version (as far as I can tell)</p>",
        "id": 281337324,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651774169
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.decidable_le_lt\">docs#int.decidable_le_lt</a> ?</p>",
        "id": 281337572,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651774276
    },
    {
        "content": "<p>You probably don't have it imported</p>",
        "id": 281337944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651774456
    },
    {
        "content": "<p>I don't think it is obvious that one needs to import precisely that...</p>",
        "id": 281338049,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651774517
    },
    {
        "content": "<p>Certainly not!</p>",
        "id": 281338073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651774532
    },
    {
        "content": "<p>This is an issue that Lean/mathlib doesn't really attempt to solve, beyond \"well statistically you're likely to import most things transitively anyways\"</p>",
        "id": 281338293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651774640
    },
    {
        "content": "<p>... and <code>import all</code> more or less immediately gives a timeout...</p>",
        "id": 281338415,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651774686
    },
    {
        "content": "<p>it shouldn't, if you have mathlib compiled</p>",
        "id": 281338775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651774863
    },
    {
        "content": "<p>unless the file you are working on is in mathlib</p>",
        "id": 281338802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651774878
    },
    {
        "content": "<p>OK; I'll try <code>import all</code> again in the future (when not working on a mathlib file).</p>",
        "id": 281338969,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651774944
    },
    {
        "content": "<p>a more realistic approach is when you want to find something, grep the sources for files that talk about the constants you are working with and import them</p>",
        "id": 281339129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651775011
    },
    {
        "content": "<p>and also be aware that the behavior of <code>dec_trivial</code> and <code>by simp</code> depends on your imports</p>",
        "id": 281339299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651775099
    },
    {
        "content": "<p>In the case at hand, I'd first have to know that I'm looking for <code>int.decidable_le_lt</code> (and not <code>lo_hi</code> as for <code>nat</code>) ...<br>\nYou have to know something about how the whole decidability business works behind the scenes.</p>",
        "id": 281339389,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651775143
    },
    {
        "content": "<p>and to find that, I had to <code>#print</code> the proof, turn on <code>pp.implicit</code>, and dig...</p>",
        "id": 281339465,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651775168
    },
    {
        "content": "<p>it'd be nice to be able to tell what instances <code>dec_trivial</code> uses sometimes</p>",
        "id": 281339482,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651775181
    },
    {
        "content": "<p>like <code>squeeze_dec_trivial</code></p>",
        "id": 281339487,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651775186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113488-general/topic/dec_trivial.20on.20.60nat.60.20vs.20.60int.60/near/281339389\">said</a>:</p>\n<blockquote>\n<p>In the case at hand, I'd first have to know that I'm looking for <code>int.decidable_le_lt</code> (and not <code>lo_hi</code> as for <code>nat</code>) ...<br>\nYou have to know something about how the whole decidability business works behind the scenes.</p>\n</blockquote>\n<p>No, you don't need to know or reference the names of instances in the vast majority of cases, you only need to know the statements and a vague idea of what files to find them in</p>",
        "id": 281339703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651775294
    },
    {
        "content": "<p>you do need to know something about how decidability instances work to expect that <code>∀ (m : ℤ), 0 ≤ m → m &lt; 4 → ...</code> is going to be solved in the first place (decidability instances generally don't exist for statements with quantifiers except in specific cases), and the fact that it's a bounded quantifier over int suggests to look in int files</p>",
        "id": 281340033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651775455
    },
    {
        "content": "<p>or just import them indiscriminately and see if it fixes the issue</p>",
        "id": 281340075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651775491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113488-general/topic/dec_trivial.20on.20.60nat.60.20vs.20.60int.60/near/281339389\">said</a>:</p>\n<blockquote>\n<p>In the case at hand, I'd first have to know that I'm looking for <code>int.decidable_le_lt</code> (and not <code>lo_hi</code> as for <code>nat</code>) ...<br>\nYou have to know something about how the whole decidability business works behind the scenes.</p>\n</blockquote>\n<p>I think a PR to rename the nat one to <code>le_lt</code> would probably be accepted; generally consistent names are good to have, it's just hard to notice when we introduce inconsistent ones.</p>",
        "id": 281340384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651775638
    },
    {
        "content": "<p>especially for instances because they are rarely referred to by name</p>",
        "id": 281340692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651775769
    },
    {
        "content": "<p>(bounded quantifier instances have to be named because the default name would be something like <code>decidable.forall</code> and there would be lots of name clashes for that)</p>",
        "id": 281340825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651775844
    },
    {
        "content": "<p>(does the instance naming actually know about <code>forall</code>?)</p>",
        "id": 281340870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651775864
    },
    {
        "content": "<p>true, it would probably be <code>decidable.Pi</code> or something even more vague</p>",
        "id": 281340958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651775893
    },
    {
        "content": "<p>as a matter of fact it is <code>pi.decidable</code></p>",
        "id": 281341112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651775967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113488-general/topic/dec_trivial.20on.20.60nat.60.20vs.20.60int.60/near/281338969\">said</a>:</p>\n<blockquote>\n<p>OK; I'll try <code>import all</code> again in the future (when not working on a mathlib file).</p>\n</blockquote>\n<p>I tell my undergraduates to start every file with <code>import tactic</code> and this empirically seems to import all the tactics they'll ever use, plus enough of mathlib to make basic stuff work, whilst not importing enough to make <code>library_search</code> unusable -- however I guess you just gave a counterexample to the claim that this should be enough :-/</p>",
        "id": 281343243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651776995
    }
]