[
    {
        "content": "<p>I saw this snippet in the tutorial in the \"inductive types\" section:</p>\n<div class=\"codehilite\"><pre><span></span>notation `[` l:(foldr `,` (h t, cons h t) nil) `]` := l\n</pre></div>\n\n\n<p>I'm used to functional programming (but still very new to lean) so I think I understand what the above is morally doing, but I'm really struggling to parse it and make sense of it beyond a high-level understanding. Is there a reference for understanding <code>notation</code>? Or even a one-off explanation of this case.</p>\n<p>Some example questions I have: How does <code>notation</code> bring things into scope? What does <code>:</code> mean in the above context? The backticks appear where I would expect an argument to <code>foldr</code> to go, so I guess <code>notation</code> supports mixing of syntactic elements and the expression you're defining?</p>",
        "id": 132651314,
        "sender_full_name": "Jason Dagit",
        "timestamp": 1535046386
    },
    {
        "content": "<p>I don't believe such a reference exists. I should probably write one. </p>\n<p>The back ticks are only for delimiting tokens. <code>foldl</code> and <code>foldr</code> are special keywords in the <code>notation</code> syntax. You can look at it as: <code>v:(foldr _ (v v, e) e)</code>. I used <code>v</code> to denote bound variables and <code>e</code> as expressions. <code>_</code> stands for tokens that you use to separate expressions in the list.</p>",
        "id": 132651483,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535046557
    },
    {
        "content": "<p>In <code>(v0 v1, e)</code>, you can see it as a lambda abstraction that you are forced to use (you don't have a choice to use different functions). In this case <code>v0</code> stands for the expression most recently parsed <code>v1</code> is an accumulator. <code>e</code> should be the next value of the accumulator and, eventually, the final value of that accumulator will be bound to <code>l</code> (in your example)</p>",
        "id": 132651948,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535047010
    },
    {
        "content": "<p>Ah. Interesting. It didn't occur to me that it might be a special <code>foldr</code>.</p>",
        "id": 132652176,
        "sender_full_name": "Jason Dagit",
        "timestamp": 1535047301
    },
    {
        "content": "<p>Thanks for the explanation, I think that makes sense and answers all the questions I have right now.</p>",
        "id": 132652251,
        "sender_full_name": "Jason Dagit",
        "timestamp": 1535047380
    },
    {
        "content": "<p>Let me know if you need more. It might be useful if you find other information I could include in the documentation.</p>",
        "id": 132652449,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535047655
    }
]