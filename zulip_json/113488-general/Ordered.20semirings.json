[
    {
        "content": "<p>Isn't a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_semiring\">docs#canonically_ordered_semiring</a> an <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_semiring\">docs#ordered_semiring</a>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.ring</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">canonically_ordered_comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 268002863,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642160544
    },
    {
        "content": "<p>I assume you mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_comm_semiring\">docs#canonically_ordered_comm_semiring</a></p>",
        "id": 268003404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642160896
    },
    {
        "content": "<p>There was the thread <a href=\"#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology/near/225129909\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology/near/225129909</a> but I don't know what the conclusion was or if its still relevant, perhaps <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> can say more</p>",
        "id": 268003523,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642160988
    },
    {
        "content": "<p>Oh, that's related to this old beast...</p>",
        "id": 268005256,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642162089
    },
    {
        "content": "<p>I just want an ordered semiring where all elements are nonnegative.</p>",
        "id": 268005285,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642162123
    },
    {
        "content": "<p>take <code>nat</code> ;b for now, why can't you just say <code>forall x, 0 &lt; x</code>?</p>",
        "id": 268007931,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642163959
    },
    {
        "content": "<p>It's an instance.</p>",
        "id": 268008108,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642164066
    },
    {
        "content": "<p>Write it as a lemma and leave a todo?</p>",
        "id": 268008467,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642164337
    },
    {
        "content": "<p>Eh, maybe. It's in <a href=\"https://github.com/leanprover-community/mathlib/pull/11329\">#11329</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/11414\">#11414</a>.</p>",
        "id": 268008553,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642164378
    },
    {
        "content": "<p>I don't see the relevance to 11329?</p>",
        "id": 268008974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642164644
    },
    {
        "content": "<p>Or even to <a href=\"https://github.com/leanprover-community/mathlib/pull/11414\">#11414</a></p>",
        "id": 268009031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642164700
    },
    {
        "content": "<p>Have you seen the <code>has_scalar</code> instance I proposed?</p>",
        "id": 268011681,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642166200
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> to <a class=\"stream-topic\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews/topic/.2311414.20seminorm.20has_scalar.20instance\">#PR reviews &gt; #11414 seminorm has_scalar instance</a></p>",
        "id": 268017529,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642169158
    },
    {
        "content": "<p>In case you are still wondering, I do not think that a <code>canonically_ordered_comm_semiring</code> is automatically an <code>ordered_comm_semiring</code>.</p>\n<p>For instance, <code>{0, 1}</code> is a canonically ordered commutative semiring, where addition has <code>1</code> as an absorbing element: <code>1 + 1 = 1</code> (all remaining operations are forced by the notation and <code>0 &lt; 1</code>).  However, this same equation, or rather <code>1 + 1 = 1 + 0</code>, shows that this ring does not satifsy </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_le_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>which is one of the fields of an ordered commutative semiring.</p>",
        "id": 268030153,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1642174836
    },
    {
        "content": "<p>Semirings are just silly objects. I'd never heard of them until I started all this lean thing. I don't care that the natural numbers are a semiring, they're a subset of a ring. Nat gets too much love here. Long live int.</p>",
        "id": 268036480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642177349
    },
    {
        "content": "<p>Kevin, we already had this conversation many times. Don't you sometimes use ideals in a commutative ring?</p>",
        "id": 268037229,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642177683
    },
    {
        "content": "<p>Maybe you sometimes multiply ideals or even add them. I've heard arithmetic people do that sometimes.</p>",
        "id": 268037307,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642177721
    },
    {
        "content": "<p>How do you call this algebraic structure on <code>ideal R</code>?</p>",
        "id": 268037391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642177761
    },
    {
        "content": "<p>I agree, Damiano, the current <code>canonically_ordered_comm_semiring</code> is not a <code>ordered_comm_semiring</code>. But should it be?</p>",
        "id": 268037401,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642177766
    },
    {
        "content": "<p>And now what about having <code>ideal R</code> acting on <code>submodule R M</code>? Don't you ever write <code>M/IM</code>?</p>",
        "id": 268037541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642177819
    },
    {
        "content": "<p>How lucky we are to have a name for the algebraic structure that allows you to add submodules. It feels so good to talk about this semi-module over the semi-ring <code>ideal R</code>!</p>",
        "id": 268037730,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642177900
    },
    {
        "content": "<p>If we want to take semirings seriously, shouldn't we get rid of cancellation axioms like <code>a * b = 0 → a = 0 ∨ b = 0</code> (from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_comm_semiring\">docs#canonically_ordered_comm_semiring</a>) and <code>a &lt; b → 0 &lt; c → c * a &lt; c * b</code>, <code>a + b ≤ a + c → b ≤ c</code> (from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_semiring\">docs#ordered_semiring</a>)? I think <code>ideal R</code> (for <code>[comm_semiring R]</code>) satisifes everything except these axioms, and it seems reasonable to call it a (canonically) ordered semiring</p>",
        "id": 268048377,
        "sender_full_name": "David Wärn",
        "timestamp": 1642182712
    },
    {
        "content": "<p>In what stronger structure would you land those properties? We can't just let <code>a &lt; b → 0 &lt; c → c * a &lt; c * b</code> go.</p>",
        "id": 268048782,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642182887
    },
    {
        "content": "<p>Right, I'm suggesting that it be moved to some other class, but I don't know the hierarchy well enough to say where. The example I have in mind is monoids and groups, with cancel monoids in between. Monoids are of course a lot more general than cancel monoids, and are often the right level of generality to work with. Semirings are supposed to be to rings what monoids are to groups, but the cancellation axioms make <code>ordered_semiring</code> more like <code>cancel_monoid</code> than  <code>monoid</code></p>",
        "id": 268050895,
        "sender_full_name": "David Wärn",
        "timestamp": 1642183835
    },
    {
        "content": "<p>So you're suggesting <code>ordered_cancel_semiring</code>? That could do!</p>",
        "id": 268051348,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642184050
    },
    {
        "content": "<p>Can you provide it as a Prop mixin as some generalization of covariant_class?</p>",
        "id": 268059031,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642187701
    },
    {
        "content": "<p>I expect so</p>",
        "id": 268059046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642187713
    },
    {
        "content": "<p>#YakovWillMixInAllYourTypeclasses</p>",
        "id": 268059072,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642187730
    },
    {
        "content": "<p>It might not be the right thing to do, but it's more composable/works with the pieces we already have</p>",
        "id": 268059164,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642187778
    },
    {
        "content": "<p>Rather than trying to insert another data-holding class somewhere in the hierarchy.</p>",
        "id": 268059204,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642187808
    },
    {
        "content": "<p>I'm only suggesting it here because we have the intersection of the order hierarchy and the algebraic hierarchy. In contrast, I've never suggested making commutativity of multiplication, or even worse, addition, a prop mixin.</p>",
        "id": 268059289,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642187871
    },
    {
        "content": "<p>In this case, we already have<br>\n<code>ordered_add_comm_monoid</code>, <code>ordered_add_cancel_comm_monoid</code><br>\n..., <code>ordered_semiring</code><br>\nSo the simplest thing now would be to complete the square<br>\n<code>ordered_add_comm_monoid</code>, <code>ordered_add_cancel_comm_monoid</code><br>\n<code>ordered_semiring</code>, <code>ordered_cancel_semiring</code></p>",
        "id": 268059641,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642188061
    },
    {
        "content": "<p>But I'm not against switching to mixins.</p>",
        "id": 268059683,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642188082
    },
    {
        "content": "<p>Reorganizing the ordered hierarchy was what started me with the order refactor, but, honestly, I got overwhelmed part of the way through.  I plan to pick it up again slowly, though.</p>",
        "id": 268071243,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1642193605
    },
    {
        "content": "<p>My impression is that ordered semiring should refer to a semiring where addition and multiplication-by-positive elements should be monotone.</p>\n<p>The somewhat circular implications between linear order, cancellative and strict monotonicity play some role, but secondary to the class design, in my opinion.</p>",
        "id": 268071508,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1642193753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Ordered.20semirings/near/268071243\">said</a>:</p>\n<blockquote>\n<p>I plan to pick it up again slowly, though.</p>\n</blockquote>\n<p>That's great to hear! I feared you were not to be counted on anymore.</p>",
        "id": 268071650,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642193814
    },
    {
        "content": "<p>Thank you for the support!  The refactor was a little overwhelming but I am glad that someone noticed that it had stopped!</p>",
        "id": 268073842,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1642195014
    },
    {
        "content": "<p>Bhavik can attest how sad I was you stopped!</p>",
        "id": 268074047,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642195116
    },
    {
        "content": "<p>Ok, sorry to have let you down!  I will start PRing order stuff soon, then!</p>",
        "id": 268074149,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1642195177
    },
    {
        "content": "<p>I wasn't worried about the order refactor but I noticed you weren't there anymore and it certainly make me sad.</p>",
        "id": 268077620,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642197142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Ordered.20semirings/near/268074149\">said</a>:</p>\n<blockquote>\n<p>Ok, sorry to have let you down!  I will start PRing order stuff soon, then!</p>\n</blockquote>\n<p>No pressure! But your work was certainly noticed and appreciated :)</p>",
        "id": 268087480,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1642202680
    },
    {
        "content": "<p>Thank you all for your kind words: this community is really wonderful!</p>",
        "id": 268163176,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1642305635
    },
    {
        "content": "<p>On a partially related note, is the partial order given by set-inclusion available on <code>set_semiring</code>?  (See example below.)</p>\n<p>This would lead to defining a <code>canonically_ordered_comm_semiring</code> on the <code>set_semiring</code> for any <code>comm_monoid</code>.</p>\n<p>Since additions are absorbing, these are further examples of non <code>ordered_comm_semiring</code>s that are canonically ordered.  However, my reason for thinking about this is to simplify some argument with polynomials.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.pointwise</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">set_semiring</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"k\">let</span> <span class=\"n\">y1</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">x1</span> <span class=\"bp\">⊆</span> <span class=\"n\">y1</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">set_semiring</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">),</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"n\">subset.refl</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">subset.trans</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">subset.antisymm</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 268163194,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1642305676
    },
    {
        "content": "<p>You can do <code>attribute [derive partial_order] set_semiring</code>. This should probably be added to mathlib.</p>",
        "id": 268249253,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642413289
    },
    {
        "content": "<p>Great, I'll look into this and make a PR soon, then!</p>",
        "id": 268264589,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1642422921
    },
    {
        "content": "<p>I finally got around to this, after receiving help on fixing permission issues!</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11567\">#11567</a></p>\n<p>Since this is the first time that I really use <code>derive</code>, I would be very happy if someone could confirm that this is what I was supposed to do!</p>\n<p>Thanks!</p>",
        "id": 268686192,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1642682959
    }
]