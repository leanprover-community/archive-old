[
    {
        "content": "<p>erm, I seem to have added every person who has pushed code in the past week to <a href=\"https://github.com/leanprover-community/mathlib/issues/9779\">#9779</a> by a bad merge commit. should I just nuke it from the sky or is there a better way to fix it?</p>",
        "id": 260834679,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636480673
    },
    {
        "content": "<p><code>git reset --hard HEAD@{1}</code> should take you back to where you were before the merge commit, where you can try again</p>",
        "id": 260847546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636485706
    },
    {
        "content": "<p>(but will discard all your changes you made during the merge)</p>",
        "id": 260847564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636485715
    },
    {
        "content": "<p>that's a really nice tip, thanks</p>",
        "id": 260850925,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636487367
    },
    {
        "content": "<p>I did <code>reset --hard HEAD~423</code> and accidentally had to redo the commit... oh well</p>",
        "id": 260850964,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636487389
    },
    {
        "content": "<p>Note that <code>@{n}</code> means \"where I was <code>n</code> operations ago\" as opposed to <code>~n</code> which means \"<code>n</code> commits ago\"</p>",
        "id": 260851135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636487461
    },
    {
        "content": "<p><code>git reflog</code> shows you what those operations were</p>",
        "id": 260851180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636487479
    },
    {
        "content": "<p>Or you can run <code>git log</code> and manually copy the commit hash (say <code>abc123</code>) then do a <code>git reset abc123 --hard</code>. It's useful if you want to double check the commit message before doing the hard reset</p>",
        "id": 260851431,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636487600
    },
    {
        "content": "<p><code>reflog</code> shows the commit messages too</p>",
        "id": 260853253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636488408
    },
    {
        "content": "<p>True! And the abbreviated commit hashes shown by <code>reflog</code> work as inputs for <code>git reset</code> too</p>",
        "id": 260872526,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636497417
    },
    {
        "content": "<p>One of my \"favorite\" git tricks is that <code>@</code> is a shorthand for <code>HEAD</code>, so you can also use <code>@@{1}</code> to go back one operation</p>",
        "id": 260873443,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636497910
    },
    {
        "content": "<p>Only slightly related comment: this thread for some reason made me realize that the \"reflog\" of \"git reflog\" is suppose to be read as  <strong>ref</strong>-log instead of re-<strong>flog</strong>, the latter being how I had read it forever. I had always thought it strange that git had chose \"flogging\" for part of its jargon. <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 260952669,
        "sender_full_name": "Mac",
        "timestamp": 1636527951
    }
]