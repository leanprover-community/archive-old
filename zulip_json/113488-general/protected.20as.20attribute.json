[
    {
        "content": "<p>I think it has been discussed, but before the community fork: can we make <code>protected</code> an attribute? And if so, how hard would it be? (Maybe we can still support the current syntax of <code>protected lemma ...</code>?)</p>",
        "id": 197396756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589368043
    },
    {
        "content": "<p>Can you elaborate on what the advantages of <code>@[protected]</code> would be?</p>",
        "id": 197397400,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589368475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> One example would be: copy <code>init.algebra.ring</code>, replace all alphas by <code>int</code>, and mark all the proven lemmas as <code>protected</code> at the end. This way you don't have to replace every occurence of <code>add_comm</code> by <code>int.add_comm</code>, etc...</p>",
        "id": 197398105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589368939
    },
    {
        "content": "<p>Better example: we have <code>topological_space.is_open</code> and <code>_root_.is_open</code>. Currently, if you <code>open topological_space</code>, this leads to conflicts.</p>",
        "id": 197398149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589368975
    },
    {
        "content": "<p>Really, we would want to mark <code>topological_space.is_open</code> as protected after creating the class.</p>",
        "id": 197398185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589369000
    },
    {
        "content": "<p>Oh, and also <code>local attribute [protected]</code> I guess.</p>",
        "id": 197398326,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589369072
    },
    {
        "content": "<p>It's not an attribute, but there's <code>environment.mk_protected</code> right now, so you can do this with a command. Can't remove it though.</p>",
        "id": 197398471,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589369166
    },
    {
        "content": "<p>Aha, maybe that's good enough for now.</p>",
        "id": 197399156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589369627
    },
    {
        "content": "<p>I don't think you can remove an attribute either. (Would you really want to make something <code>protected</code> locally? There's also <code>open hiding</code>.)</p>",
        "id": 197401826,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589371257
    },
    {
        "content": "<p>What does <code>open hiding</code> do? Does it locally unprotect things?</p>",
        "id": 197402634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589371734
    },
    {
        "content": "<p>Because I might want to locally unprotect things</p>",
        "id": 197402660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589371746
    },
    {
        "content": "<p>Hmm, the doc string for <code>user_attribute</code> says something about attributes being unremovable if you give an <code>after_set</code> without a <code>before_unset</code>. I thought this had to do with when you could use <code>local attribute</code>, but apparently not.</p>",
        "id": 197402698,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589371765
    },
    {
        "content": "<p>No, it locally protects things (I think?)</p>",
        "id": 197402813,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589371804
    },
    {
        "content": "<p>Locally unprotecting would be more like <code>open showing</code> (which doesn't exist)</p>",
        "id": 197402851,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589371829
    },
    {
        "content": "<p>\"Even though the person who wrote the library says I don't want to automatically import these names to top-level, I want to do it anyways\"</p>",
        "id": 197402900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589371854
    },
    {
        "content": "<p>With an attribute you couldn't locally unprotect things anyways, could you?</p>",
        "id": 197402935,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589371871
    },
    {
        "content": "<p>Yeah, I see now</p>",
        "id": 197403550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589372195
    },
    {
        "content": "<p>Why, would <code>local attribute [-protected]</code> not work?</p>",
        "id": 197404427,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589372722
    },
    {
        "content": "<p>Oh, I was under the impression that syntax doesn't exist or doesn't actually do anything or something like that.</p>",
        "id": 197404568,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589372809
    },
    {
        "content": "<p>It doesn't work for all attributes, but there's no reason it shouldn't for a <code>[protected]</code> attribute</p>",
        "id": 197408234,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589374812
    },
    {
        "content": "<p>What should I do to make lean happy?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">run_cmd</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_mul_eq_mul_neg</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">basic.lean:47:0: error</span>\n<span class=\"cm\">don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">⊢ Type</span>\n<span class=\"cm\">basic.lean:47:8: error</span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  environment.mk_protected int.neg_mul_eq_mul_neg</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  int.neg_mul_eq_mul_neg</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ∀ (a b : ℤ), -(a * b) = a * -b : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  environment : Type</span>\n<span class=\"cm\">Additional information:</span>\n<span class=\"cm\">/home/jmc/data/math/mathlib/src/init_/data/int/basic.lean:47:8: context: switched to simple application elaboration procedure because failed to use expected type to elaborate it, error message</span>\n<span class=\"cm\">  type mismatch, term</span>\n<span class=\"cm\">    ?m_1.mk_protected</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    name → environment</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    tactic ?m_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 197786072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589620474
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">set_env</span> <span class=\"err\">$</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_mul_eq_mul_neg</span>\n</code></pre></div>",
        "id": 197786154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589620581
    },
    {
        "content": "<p>Thanks! And when I want to do this for a whole list of names?</p>",
        "id": 197786174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589620632
    },
    {
        "content": "<p>I'll need some <code>fold</code>, I guess?</p>",
        "id": 197786181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589620640
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">set_env</span> <span class=\"err\">$</span> <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">int</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"n\">env</span>\n</code></pre></div>",
        "id": 197786232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589620692
    },
    {
        "content": "<p>Thanks again!</p>",
        "id": 197786294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589620804
    }
]