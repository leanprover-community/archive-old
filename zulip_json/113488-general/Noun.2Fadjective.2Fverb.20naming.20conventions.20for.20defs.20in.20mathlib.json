[
    {
        "content": "<p>Brought up by <a href=\"https://github.com/leanprover-community/mathlib/pull/3729#discussion_r469345718\">https://github.com/leanprover-community/mathlib/pull/3729#discussion_r469345718</a>, the <a href=\"https://leanprover-community.github.io/contribute/naming.html\">mathlib naming conventions</a> page doesn't seems to discuss naming of defs</p>\n<p>Taking the example there, what is the right name for a def of type <code>list α → Prop</code> that determines if a list is a palindrome?</p>\n<ul>\n<li><code>palindrome l</code></li>\n<li><code>palindromic l</code></li>\n<li><code>is_palindrome l</code></li>\n<li><code>is_palindromic l</code></li>\n</ul>\n<p>I find the first of these rather odd, as it suggests to me that the term is some type that holds palindromes</p>\n<p>It seems like there should be some distinct guidelines for defs <code>T  → Prop</code> (adjective-ish?), <code>T → U</code> (verb-ish?), and <code>T → Type</code> (noun-ish?)</p>",
        "id": 206742747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597262196
    },
    {
        "content": "<p>I would say <code>is_palindrome l</code> and <code>palindrome A</code> for the subtype</p>",
        "id": 206742962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597262283
    },
    {
        "content": "<p>So (aside from breaking a lot of code) would it make sense to rename <code>function.left_inverse</code> to <code>function.is_left_inverse</code>?</p>",
        "id": 206744701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597263087
    },
    {
        "content": "<p>I would say drop the <code>is</code> unless the subtype is actually defined and there's reason for confusion. I prefer <code>palindrome</code> over <code>palindromic</code> just for familiarity.</p>",
        "id": 206749123,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1597265142
    },
    {
        "content": "<p>Isn't having both <code>set X</code> and <code>subgroup X</code> inconsistent? Surely if we're describing the terms it should be <code>subset X</code>?</p>",
        "id": 206751376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597266185
    },
    {
        "content": "<p>In math you can say either \"a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>\" or \"a set of natural numbers\"</p>",
        "id": 206751922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597266423
    },
    {
        "content": "<p>But I agree <code>subset</code> would be a lot easier for new users</p>",
        "id": 206751987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597266457
    },
    {
        "content": "<p>When you're defining the type rather than the terms you want to call it <code>powerset X</code>. In topology we consider a set of subsets of <code>X</code> and its type is <code>set (set X)</code></p>",
        "id": 206752145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597266534
    },
    {
        "content": "<p><code>subset (subset X)</code> would be pretty bad I guess.</p>",
        "id": 206752212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597266567
    },
    {
        "content": "<p>It can't be a subset because <code>X</code> is a type not a set I suppose. People still say \"a set of reals\", but nobody says \"a group of integers\".</p>",
        "id": 206753196,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1597266995
    },
    {
        "content": "<p>Might people say \"a group over the integers\"?</p>",
        "id": 206758604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597270019
    },
    {
        "content": "<p>Regarding Kevin's point, I would expect a hypothetical <code>subset</code> to be a subtype like <code>\\Pi (u: set T), Type := {v : set T // v \\sub u}</code>. Subset is an operation on sets not types, and <code>nat</code> is not a set.</p>",
        "id": 206758924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597270305
    },
    {
        "content": "<p>You can say \"a group structure on the integers\"</p>",
        "id": 206759210,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597270523
    },
    {
        "content": "<p>I suppose <code>group_structure int</code> is rather too verbose, and would impact most type classes</p>",
        "id": 206759357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597270644
    },
    {
        "content": "<p>In the context of ordinary mathematical parlance, <code>nat</code> is the natural numbers and the natural numbers form a set.</p>",
        "id": 206759370,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597270655
    },
    {
        "content": "<p>In general <code>Type</code> corresponds to what mathematicians call a set (with the possible exception of set theorists) and this makes <code>set</code> a confusing name</p>",
        "id": 206759451,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597270707
    },
    {
        "content": "<p>Indeed, that comment was regarding lean</p>",
        "id": 206759452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597270707
    },
    {
        "content": "<p>Perhaps it is worth emphasing somdwhere in the docs for mathematicians coming from set theory that the set corresponding to a type <code>T</code> is <code>set.univ T</code></p>",
        "id": 206759549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597270789
    },
    {
        "content": "<p>But this sounds like something for another thread, I've seen this exact conversation derail threads over and over.</p>",
        "id": 206759647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597270852
    },
    {
        "content": "<p>Going back to the original topic, what's the consensus on the name? (Personally I haven't found use for a subtype yet, so out of <a href=\"https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it\">YAGNI</a> I'd support sticking with the original name.)</p>",
        "id": 206775538,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597286336
    },
    {
        "content": "<p>Using \"is\" (or \"has\", or whatever) to make a function that implements a predicate <em>sound</em> like it implements a predicate is a common standard, and reasonably so, to the point that I think if you're going to depart from it you should probably have a decent reason.</p>",
        "id": 206801055,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597315730
    },
    {
        "content": "<p>Speaking for myself, I don't like the idea of having to know whether or not someone wanted a typeclass for a thing, to know whether I need to prefix the function I want with \"is_\" - I'd rather just have a consistent global standard.</p>",
        "id": 206801134,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597315809
    },
    {
        "content": "<p>At the software company where I used to work, Trolltech (now the Qt Company), we at one point had a mixture of <code>is-</code> and no <code>is-</code>. It was a mess (we like to be able to guess APIs without having to look them up), and often the <code>is-</code>less name would obscure a useful concept, as in Mario's example. So we standardized on <code>is-</code> (within reason) and never looked back.</p>",
        "id": 206802038,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1597316666
    },
    {
        "content": "<p>The English language, which often overloads words to be nouns, adjectives, verbs, etc., seems to make this necessary in general.</p>",
        "id": 206802072,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1597316701
    },
    {
        "content": "<p>FYI, I merged the PR in question, but if we converge on <code>is_palindrome</code> instead of <code>palindrome</code> it's an easy change to make.</p>",
        "id": 206804031,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597318405
    },
    {
        "content": "<p>I opened this thread primarily to ask about deciding on a convention, not enforcing it in that particular PR. From what I've seen so far, <code>mathlib</code> doesn't (yet) care much about people being broken by definitions changing name, so merging that PR first was fine.</p>",
        "id": 206835884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597335182
    }
]