[
    {
        "content": "<p>Hi, is there any good way to reuse facts about <code>finset.prod</code> for lists? E.g., I'd like to have something like <code>∀ l : list α, (fin_range (length l)).prod (λ i, l.nth_le i.1 i.2) = l.prod</code>.</p>",
        "id": 183934979,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1576848373
    },
    {
        "content": "<p>My problem is that it's not easy to apply general facts about products/sums over <code>finset</code>s (e.g., AM-GM inequality) to get a similar inequality for products/sums over lists.</p>",
        "id": 183935029,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1576848447
    },
    {
        "content": "<p>With lists it's much easier to apply it to specific numbers (e.g., to deduce AM-GM for 2, 3, 4 numbers out of the general case).</p>",
        "id": 183935119,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1576848528
    },
    {
        "content": "<p>I guess that theorem is possible (assuming the multiplication is commutative and associative), but the LHS looks pretty hard to work with</p>",
        "id": 183944815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576855532
    },
    {
        "content": "<p>You can always coerce a list to a finset and apply the prod operation there</p>",
        "id": 183944884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576855569
    },
    {
        "content": "<p>Does coercion remove duplicates?</p>",
        "id": 183948835,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1576858131
    },
    {
        "content": "<p>I guess it does.</p>",
        "id": 183948915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576858185
    },
    {
        "content": "<p>You could coerce to a multiset and apply the prod operation there.</p>",
        "id": 183951638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576860132
    },
    {
        "content": "<p>For every <code>list A</code> there's a function <code>fin n - &gt; A</code>, so you can <code>finset.sum univ</code> over this function.</p>",
        "id": 183954911,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1576862429
    },
    {
        "content": "<p>...and that's the reason why nobody bothers to build any more infrastructure for sums over lists and multisets ;-)</p>",
        "id": 183956353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576863567
    },
    {
        "content": "<p>That's true for multisets. You still need lists for non commutative products.</p>",
        "id": 183963235,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1576868762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I wrote one such function above. However I'd like to have a theorem like <code>∀ l : list α, (fin_range (length l)).prod (λ i, l.nth_le i.1 i.2) = l.prod</code> or <code>∀ (l : list α) (f : α → β), (fin_range (length l)).prod (λ i, f(l.nth_le) i.1 i.2) = (l.map f).prod</code> to be able to transfer facts from sums/prods over a finset to sums/prods of <code>list.map</code>.</p>",
        "id": 183985762,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1576886790
    },
    {
        "content": "<p>Another way to deduce <code>∀ a b c wa wb wc : nnreal, wa + wb + wc = 1 → a^wa * b^wb * c^wc ≤ wa * a + wb * b + wc * c</code> from <code>∀ {α : Type*} (s : finset α) (w z : α → ℝ≥0) (hw' : s.sum w = 1) : (s.prod (λ i, (z i) ^ (w i))) ≤ s.sum (λ i, w i * z i)</code> is welcome. Here I assume <code>has_pow nnreal nnreal := ⟨λ x r, nnreal.of_real (x:ℝ)^(r:ℝ)⟩</code>.</p>",
        "id": 183986178,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1576887333
    },
    {
        "content": "<p>With lists I can do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">nnreal</span><span class=\"bp\">.</span><span class=\"n\">has_pow_nnreal</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">nnreal</span><span class=\"bp\">.</span><span class=\"n\">of_real</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">am_gm_weighted</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">≤</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">*</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">am_gm3</span> <span class=\"o\">(</span><span class=\"n\">w₁</span> <span class=\"n\">w₂</span> <span class=\"n\">w₃</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w₁</span> <span class=\"bp\">+</span> <span class=\"n\">w₂</span> <span class=\"bp\">+</span> <span class=\"n\">w₃</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">x₃</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x₁</span> <span class=\"err\">^</span> <span class=\"n\">w₁</span> <span class=\"bp\">*</span> <span class=\"n\">x₂</span> <span class=\"err\">^</span> <span class=\"n\">w₂</span> <span class=\"bp\">*</span> <span class=\"n\">x₃</span> <span class=\"err\">^</span> <span class=\"n\">w₃</span> <span class=\"bp\">≤</span> <span class=\"n\">w₁</span> <span class=\"bp\">*</span> <span class=\"n\">x₁</span> <span class=\"bp\">+</span> <span class=\"n\">w₂</span> <span class=\"bp\">*</span> <span class=\"n\">x₂</span> <span class=\"bp\">+</span> <span class=\"n\">w₃</span> <span class=\"bp\">*</span> <span class=\"n\">x₃</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">am_gm_weighted</span> <span class=\"o\">[(</span><span class=\"n\">w₁</span><span class=\"o\">,</span> <span class=\"n\">x₁</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">w₂</span><span class=\"o\">,</span> <span class=\"n\">x₂</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">w₃</span><span class=\"o\">,</span> <span class=\"n\">x₃</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">hw</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>However I can't quickly deduce <code>am_gm3</code> from</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">am_gm_weighted</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 183988075,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1576889946
    },
    {
        "content": "<p><code>∀ l : list α, (fin_range (length l)).prod (λ i, l.nth_le i.1 i.2) = l.prod</code> doesn't compile -- Lean can't find <code>⊢ has_one (fin (length l))</code>. These things should surely be easy to prove by induction on <code>l</code> right?</p>",
        "id": 183988196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576890105
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nx r : ℝ≥0\n⊢ has_pow ℝ ℝ\n</pre></div>\n\n\n<p>I can't get anything to work</p>",
        "id": 183988511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576890483
    },
    {
        "content": "<p>But I see your point. A finset is not enough here because of duplicates. You need to use this <code>finset.sum univ</code> trick of Chris I guess.</p>",
        "id": 183988625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576890637
    },
    {
        "content": "<p>I think we need an ergonomic way to form \"fin n -&gt; A\" vectors from concrete lists of values, i.e. vector.cons</p>",
        "id": 183988868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576891052
    },
    {
        "content": "<p>that would solve this problem</p>",
        "id": 183988871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576891061
    },
    {
        "content": "<p>I also can't find an instance of <code>has_pow nnreal nnreal</code>. Was this added at some point?</p>",
        "id": 183989159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576891506
    },
    {
        "content": "<p>No, that's why I define it in my code.</p>",
        "id": 183989173,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1576891534
    },
    {
        "content": "<p>that's not very MWE</p>",
        "id": 183989175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576891545
    },
    {
        "content": "<p>For an MWE, let's one can try to deduce</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">prod_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">*</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>from the corresponding fact about <code>finset</code>s</p>",
        "id": 183989384,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1576891825
    },
    {
        "content": "<p>Or, say, deduce <code>∀ a b c x y z, (a * b * c) * (x * y * z) = ((a * x) * (b * y) * (c * z))</code> from <code>finset.prod_mul_distrib</code>.</p>",
        "id": 183989422,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1576891917
    },
    {
        "content": "<p>actually, I was going to show how to prove your original theorem, the am_gm for 3 things from the general am_gm on finsets</p>",
        "id": 183990732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576893969
    },
    {
        "content": "<p>Here is what I have for a <code>real</code> - <code>finset</code> version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">am_gm_weighted</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw&#39;</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 183990920,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1576894308
    },
    {
        "content": "<p>This seems to work well:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">nnreal</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n\n<span class=\"kn\">section</span> <span class=\"kn\">end</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">constant</span> <span class=\"n\">nnreal</span><span class=\"bp\">.</span><span class=\"n\">has_pow_nnreal</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">am_gm_weighted</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_fin_succ</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_fin_succ</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">am_gm3</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">wa</span> <span class=\"n\">wb</span> <span class=\"n\">wc</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">wa</span> <span class=\"bp\">+</span> <span class=\"n\">wb</span> <span class=\"bp\">+</span> <span class=\"n\">wc</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">wa</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"n\">wb</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"err\">^</span><span class=\"n\">wc</span> <span class=\"bp\">≤</span> <span class=\"n\">wa</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">wb</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">wc</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">am_gm_weighted</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">wa</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">wb</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">wc</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">))),</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_fin_succ</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_fin_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 183991185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576894697
    }
]