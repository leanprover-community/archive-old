[
    {
        "content": "<p>I'm considering include a couple of small logic puzzles in my Lean exercises. But I realize I don't know how to do that. Probably I should have paid more attention to some of Kevin's messages. Say I want to formalize the solution to the first question in <a href=\"http://www.johnpratt.com/items/puzzles/logic_puzzles.html\" target=\"_blank\" title=\"http://www.johnpratt.com/items/puzzles/logic_puzzles.html\">http://www.johnpratt.com/items/puzzles/logic_puzzles.html</a> Say I define <code>inductive people : Type | Brown | Jones | Smith</code>. I'd like to do case disjunctions according to whether some term of type people is Brown, Jones or Smith. But <code>cases</code> is very disappointing. It replaces only in the current goal. What is the workflow here?</p>",
        "id": 156635984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548188445
    },
    {
        "content": "<p>Answer to second one: <a href=\"https://xkcd.com/1134/\" target=\"_blank\" title=\"https://xkcd.com/1134/\">https://xkcd.com/1134/</a> . For the first one, Chris would prove it using <code>dec_trivial</code> somehow.</p>",
        "id": 156638799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548190614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> you should <code>derive decidable_eq</code> (can we derive fintype?) and then just <code>dec_trivial</code> everything</p>",
        "id": 156638953,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548190722
    },
    {
        "content": "<p>I don't want a nice hi-tech proof. The question is whether I could do a logic exercise using those questions, not a <code>dec_trivial</code> exercise.</p>",
        "id": 156640009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548191558
    },
    {
        "content": "<p>I'm not sure exactly what you're trying to do, could you post some code where <code>cases</code> doesn't do quite what you want?</p>",
        "id": 156641666,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548192809
    },
    {
        "content": "<p>Rob, say I start with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">people</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">Brown</span> <span class=\"bp\">|</span> <span class=\"n\">Jones</span> <span class=\"bp\">|</span> <span class=\"n\">Smith</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">only_child</span> <span class=\"o\">:</span> <span class=\"n\">people</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">salary</span> <span class=\"o\">:</span> <span class=\"n\">people</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">job</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">doctor</span> <span class=\"bp\">|</span> <span class=\"n\">lawyer</span> <span class=\"bp\">|</span> <span class=\"n\">teacher</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">job</span> <span class=\"bp\">→</span> <span class=\"n\">people</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">people</span> <span class=\"bp\">→</span> <span class=\"n\">job</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">PJ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">JP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">PJ</span> <span class=\"n\">JP</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">people</span> <span class=\"n\">job</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">only_child</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">teacher</span><span class=\"o\">))</span>\n <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">salary</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">teacher</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">salary</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">lawyer</span><span class=\"o\">))</span>\n <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">salary</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">teacher</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">salary</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">doctor</span><span class=\"o\">))</span>\n <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">only_child</span> <span class=\"n\">Brown</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"n\">salary</span> <span class=\"n\">Smith</span> <span class=\"bp\">&gt;</span> <span class=\"n\">salary</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">lawyer</span><span class=\"o\">))</span>\n<span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"n\">Smith</span> <span class=\"bp\">=</span> <span class=\"n\">doctor</span> <span class=\"bp\">∧</span> <span class=\"n\">J</span> <span class=\"n\">Brown</span> <span class=\"bp\">=</span> <span class=\"n\">lawyer</span> <span class=\"bp\">∧</span> <span class=\"n\">J</span> <span class=\"n\">Jones</span> <span class=\"bp\">=</span> <span class=\"n\">teacher</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n   <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I'd like to say: let's examine in turn all three possibilities for <code>J Smith</code>, derive contradictions in two cases, deduce the value of <code>J Smith</code> and move on. But <code>cases J Smith</code> does not do that. It does spawn 3 cases, but with no extra assumption, simply replacing <code>J Smith</code> in the goal.</p>",
        "id": 156644035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548194556
    },
    {
        "content": "<p>Of course I can use <code>by_cases H : J Smith = doctor,</code> but this gives me two goals, not three, and only the first goal has the shape I'd like to see</p>",
        "id": 156644203,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548194719
    },
    {
        "content": "<p><code>cases h : J Smith</code>?</p>",
        "id": 156644220,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548194745
    },
    {
        "content": "<p>That will give you the three goals, each with an additional hypothesis <code>h : J Smith = ...</code></p>",
        "id": 156644278,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548194768
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 156644299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548194791
    },
    {
        "content": "<p>btw</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">people</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">Brown</span> <span class=\"bp\">|</span> <span class=\"n\">Jones</span> <span class=\"bp\">|</span> <span class=\"n\">Smith</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">job</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">doctor</span> <span class=\"bp\">|</span> <span class=\"n\">lawyer</span> <span class=\"bp\">|</span> <span class=\"n\">teacher</span>\n</pre></div>",
        "id": 156644327,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548194820
    },
    {
        "content": "<p>I think I manage to turn that logic puzzle into something that could be an exercise in my \"proof by case analysis\" lecture. Remember the context: I'm trying to get a usable exercise from the first item in <a href=\"http://www.johnpratt.com/items/puzzles/logic_puzzles.html\" target=\"_blank\" title=\"http://www.johnpratt.com/items/puzzles/logic_puzzles.html\">http://www.johnpratt.com/items/puzzles/logic_puzzles.html</a>. My attempt lives at <a href=\"https://gist.github.com/PatrickMassot/232210a83f193ea4a2caafb9b0e4245c\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/232210a83f193ea4a2caafb9b0e4245c\">https://gist.github.com/PatrickMassot/232210a83f193ea4a2caafb9b0e4245c</a> you should scroll down to line 38 before reading the beginning if curious</p>",
        "id": 156840630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548409355
    },
    {
        "content": "<p>+1 for use of <code>linarith</code>. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> can mention this application in his next grant proposal.</p>",
        "id": 156840949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548409725
    },
    {
        "content": "<p>By the way, <span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span> you should have a look at the tactic I created in this gist, in case you are still stuck on yesterday's question.</p>",
        "id": 156841631,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548410567
    },
    {
        "content": "<p>Thanks -- I'm guessing the <code>%%</code> is the key? I'll try it out.</p>",
        "id": 156843274,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1548412087
    },
    {
        "content": "<p>Yes, this is explained in the tactic tutorial I referred to</p>",
        "id": 156844439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548413349
    },
    {
        "content": "<p>Using <code>%%</code> is called \"antiquotation.\" AFAIK you can't antiquote identifiers, so you won't be able to write something like `[simp at %%a].</p>",
        "id": 156846816,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548416425
    }
]