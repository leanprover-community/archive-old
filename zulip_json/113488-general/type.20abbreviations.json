[
    {
        "content": "<p>It's quite useful to have type abbreviations in a large PL model, are there any?</p>",
        "id": 220645971,
        "sender_full_name": "Brian Milnes",
        "timestamp": 1608595990
    },
    {
        "content": "<p><code>â„•</code> is an abbreviation for <code>nat</code>, at least if you measure by number of unicode characters rather than general annoyance of typing</p>",
        "id": 220646444,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608596437
    },
    {
        "content": "<p>There are lots of kinds of \"abbreviation\", with different use cases:</p>\n<ol>\n<li><code>def type := other_type</code></li>\n<li><code>@[reducible] def type := other_type</code></li>\n<li>\n<p><code>notation `type` := other_type</code></p>\n<ul>\n<li><code>local notation `type` := other_type</code></li>\n</ul>\n</li>\n<li>\n<p><code>abbreviation type := other_type</code></p>\n</li>\n</ol>\n<p>I usually recommend 1 or 3, rarely 2</p>",
        "id": 220646510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608596520
    },
    {
        "content": "<p>The one Kevin mentions is (3)</p>",
        "id": 220646563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608596554
    },
    {
        "content": "<p>What's the downside of 4?</p>",
        "id": 220647186,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608597213
    },
    {
        "content": "<p>4 is 2 + <code>@[inline]</code>, right? Does <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#inline\">attr#inline</a> have docs?</p>",
        "id": 220648202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608598207
    },
    {
        "content": "<p>Seemingly not</p>",
        "id": 220648219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608598237
    },
    {
        "content": "<p>I don't think <code>inline</code> is related to any of these. That has to do with code evaluation, and types aren't evaluated in that sense anyway</p>",
        "id": 220648469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608598470
    },
    {
        "content": "<p>I just checked the code: <code>abbreviation</code> is indeed a synonym for <code>@[inline, reducible] def</code></p>",
        "id": 220648577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608598568
    },
    {
        "content": "<p>I had thought it also included a kernel reducibility setting, but it doesn't look like it</p>",
        "id": 220648602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608598620
    },
    {
        "content": "<p><code>inline</code> means what it does in most programming languages: the code for the definition is inlined into wherever it is used</p>",
        "id": 220648726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608598757
    },
    {
        "content": "<p>So to update my recommendations, I would suggest 4 in the same situations as 2 (<code>@[inline]</code> usually doesn't matter unless you are writing monad combinators)</p>",
        "id": 220648916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608598937
    },
    {
        "content": "<p>But I think that it's best not to use <code>reducible</code> defs when possible, because they can cause invisible blowups behind the scenes. If you make a definition, you should opt in to any type classes you want to inherit</p>",
        "id": 220649067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608599087
    }
]