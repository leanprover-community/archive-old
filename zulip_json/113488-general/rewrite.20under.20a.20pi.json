[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">quadroots</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">quadroots</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I thought this would work. I have to <code>intro x</code> before it does. I know that <code>rw</code> can fail to rewrite under a lambda, but this is not a lambda, right? Can Lean also not rewrite under a pi?</p>",
        "id": 134751362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538061172
    },
    {
        "content": "<p>it cannot rewrite under a binder, because it needs to produce a substitution instance in the outer context</p>",
        "id": 134751519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538061354
    },
    {
        "content": "<p>To be clear, you can rewrite expressions that don't make use of the binder, like rewriting <code>y</code> to <code>z</code> in <code>\\lam x, x = y</code></p>",
        "id": 134751597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538061386
    },
    {
        "content": "<p>but since <code>rw</code> constructs an <code>eq.rec</code> term in the outer context it doesn't make sense to refer to <code>x</code></p>",
        "id": 134751631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538061420
    },
    {
        "content": "<p>Think of it this way: <code>rw quadroots</code> is really <code>rw [quadroots _]</code>. What should go in for <code>_</code>?</p>",
        "id": 134751697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538061474
    },
    {
        "content": "<p>Interesting. I also encountered this exact question the other day--I expected <code>rw</code> to work in a similar situation, rewriting under a Pi, because it wasn't rewriting under a lambda. But I don't remember what ended up happening. It's possible I was in the \"doesn't depend on x\" situation.</p>",
        "id": 134751779,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538061534
    },
    {
        "content": "<p>Can I think about it this way? I expect <code>rw</code> to apply something like \"<code>Pi.congr</code>\". But what is the argument to <code>Pi.congr</code>. It should just be an equality I intend to rewrite along, not something of the form <code>\\all x, f x = g x</code></p>",
        "id": 134751917,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538061660
    },
    {
        "content": "<p><code>rw</code> does not use <code>Pi.congr</code> or anything like it</p>",
        "id": 134751955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538061698
    },
    {
        "content": "<p>that's how <code>simp</code> works</p>",
        "id": 134751965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538061705
    },
    {
        "content": "<p><code>rw</code> only uses <code>eq.rec</code>, i.e. the substitution property of equality</p>",
        "id": 134752021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538061724
    },
    {
        "content": "<p>Right, okay. But <code>eq.rec</code> still has that argument we have to provide</p>",
        "id": 134752051,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538061762
    },
    {
        "content": "<p>so your goal has to have the form <code>|- P a</code> in the current context, and it is given an equality <code>|- a = b</code>, again in the current context (it may have metavariables but they have to be resolved in the current context), to produce <code>|- P b</code></p>",
        "id": 134752086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538061797
    },
    {
        "content": "<p>In particular, it must be possible to write your goal as some function applied to the thing you want to rewrite, and this implies that it can't be a term that exists under a binder</p>",
        "id": 134752175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538061855
    },
    {
        "content": "<p>It's like you only know equality at one point and want to generalize to equality at all points - it doesn't work</p>",
        "id": 134752251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538061931
    },
    {
        "content": "<p>If you use a quantified equality as input to <code>rw</code>, it <em>first</em> applies some metavariables with the hope of matching them in the term, but before it has entered any binders. So that means you can always specify them yourself and give straight equations to <code>rw</code> with no loss of generality, unlike with <code>simp</code> where quantified equations are really more powerful</p>",
        "id": 134752519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538062108
    },
    {
        "content": "<p>In my example, it's clear what I mean -- I want to rewrite \"forall x, q(x)=0 -&gt; ...\" as \"forall x, (x=1 or x=2) -&gt; ..\"</p>",
        "id": 134752964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538062458
    },
    {
        "content": "<p>There doesn't seem to be anything stopping that rewrite in theory</p>",
        "id": 134752988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538062477
    },
    {
        "content": "<p>I can do it with intro, rw, revert. I'm not sure my users can though.</p>",
        "id": 134753029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538062516
    },
    {
        "content": "<p>I guess they'll have to ;-)</p>",
        "id": 134753060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538062543
    },
    {
        "content": "<p>Of course, I follow. I'm just saying that's not how <code>rw</code> works</p>",
        "id": 134753132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538062566
    },
    {
        "content": "<p>the closest approximation to <code>rw</code> + binders is <code>conv {rw}</code></p>",
        "id": 134753150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538062580
    },
    {
        "content": "<p>Thank you Mario for your explanation. I find now I'm a more mature Lean user that when things like this happen I am now interested in understanding why they're failing (rather than banging my head against a table)</p>",
        "id": 134753184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538062614
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">quadroots</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">quadroots</span><span class=\"o\">],</span> <span class=\"c1\">-- WORKS!</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134753303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538062720
    },
    {
        "content": "<p>right. <code>simp</code> uses a different algorithm, based on congruence lemmas, which has the advantage that you can rewrite under binders</p>",
        "id": 134753343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538062759
    },
    {
        "content": "<p>Rather than trying to match the goal all in one go like <code>rw</code>, it recurses into the term with things like <code>funext</code> that actually give you the opportunity to bubble those equalities into the inner context</p>",
        "id": 134753465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538062848
    },
    {
        "content": "<p>rofl just noticed example is mathematically wrong ;-) [forall needs to go inside the brackets]</p>",
        "id": 134753580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538062964
    }
]