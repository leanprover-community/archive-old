[
    {
        "content": "<p>Do we have something equivalent to</p>\n<div class=\"codehilite\"><pre><span></span>def patch_nth {α : Type} (f : α → α) : ℕ → list α → list α\n| _ []           := []\n| 0 (h :: t)     := f h :: t\n| (n+1) (h :: t) := h :: patch_nth n t\n</pre></div>\n\n\n<p>in mathlib?</p>",
        "id": 148832961,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543540285
    },
    {
        "content": "<p>I've found a few times that it's really painful for update the nth element, because you have to deal with <code>nth</code> returning an option, even when you know it's there.</p>",
        "id": 148832974,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543540320
    },
    {
        "content": "<p>A slight variation that is even more useful:</p>\n<div class=\"codehilite\"><pre><span></span>def opatch_nth {α : Type} (f : α → option α) : ℕ → list α → list α\n| _ []           := []\n| 0 (h :: t)     := match f h with\n                    | (some e) := e :: t\n                    | none     := t\n                    end\n| (n+1) (h :: t) := h :: opatch_nth n t\n</pre></div>",
        "id": 148833022,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543540352
    },
    {
        "content": "<blockquote>\n<p>I've found a few times that it's really painful for update the nth element, because you have to deal with <code>nth</code> returning an option, even when you know it's there.</p>\n</blockquote>\n<p>... did you say it's painful to <strong><em>update</em></strong> the <strong><em>nth</em></strong> element?</p>",
        "id": 148833045,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543540406
    },
    {
        "content": "<p>Of course there is <code>update_nth</code></p>",
        "id": 148833052,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543540432
    },
    {
        "content": "<p>also what is it with your <code>meta</code>?</p>",
        "id": 148833091,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543540444
    },
    {
        "content": "<p>Oh, yeah, those <code>meta</code>s are completely unnecessary :-) Just habit, as I was in a whole file where most things were meta.</p>",
        "id": 148833099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543540478
    },
    {
        "content": "<p>But  to use <code>update_nth</code>, you need to use <code>nth</code> earlier to get out the existing element to modify.</p>",
        "id": 148833150,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543540514
    },
    {
        "content": "<p>The typical example here is that I have a list of some structure, and I want to modify a single field of the nth element.</p>",
        "id": 148833154,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543540538
    },
    {
        "content": "<p>In this case the function <code>f</code> can be <code>λ s, { f := x, .. s}</code>.</p>",
        "id": 148833205,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543540572
    },
    {
        "content": "<p>did you say you want to <strong><em>modify</em></strong> the <strong><em>nth</em></strong> element?</p>",
        "id": 148837711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543547724
    },
    {
        "content": "<p>Did somebody say \"lens\"?</p>",
        "id": 148838352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543548598
    },
    {
        "content": "<p>Thanks. And yes, let's have more lens. :-)</p>",
        "id": 148844167,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543558970
    },
    {
        "content": "<p>Wait, isn't the syntax to declare functions in lean <code>meta def ....</code>? ;)</p>",
        "id": 150230501,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543642193
    }
]