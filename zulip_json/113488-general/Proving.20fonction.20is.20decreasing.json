[
    {
        "content": "<p>Lets say i have defined a function that's not trivially decreasing. For the sake of argument, the 3n + 1 function.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">collatz</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">flight_time</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">flight_time</span>\n<span class=\"bp\">|</span> <span class=\"n\">flight_time</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n                   <span class=\"k\">then</span> <span class=\"n\">collatz</span> <span class=\"o\">(</span><span class=\"n\">flight_time</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n                   <span class=\"k\">else</span> <span class=\"n\">collatz</span> <span class=\"o\">(</span><span class=\"n\">flight_time</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Lean will obviously say it failed to prove the function is decreasing. How can i give such a proof ?</p>",
        "id": 263378042,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1638404983
    },
    {
        "content": "<p>If you can come up with a well founded relation for your function then you can do it with the <code>using_well_founded</code> keyword.<br>\nYou can find many examples in mathlib, but here is a made up one, saying how this would look for collatz is of course way harder than the question here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">def</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">flight_time</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">flight_time</span>\n<span class=\"bp\">|</span> <span class=\"n\">flight_time</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n  <span class=\"k\">have</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- showing that the function defined below is decreasing</span>\n  <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">flight_time</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"k\">else</span>\n  <span class=\"k\">have</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">flight_time</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">⟩,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">)⟩],</span><span class=\"c1\">-- specifying that given i the flight time and n the second argument, that 2 * n - n % 2 is decreasing</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"c1\">-- this is the default I believe, it says to try and fill in proofs that the relationg is decreasing using the assumption tactic, this means that we can just add the have's above to provide proofs, a tactic that can prove your goals above automatically is also possible here if there is one</span>\n</code></pre></div>\n<p>this is the simplest possibility for a well founded relation, we give a map to the naturals and show it decreases with every recursive call, more complicated things are also possible.</p>\n<p>P.s. I have no idea if the goals here are provable, but hopefully the structure is clear</p>",
        "id": 263379948,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638406566
    },
    {
        "content": "<p>Is there a way to use a mapping to transfinite ? I can easily define a function like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">size'</span> <span class=\"o\">:</span> <span class=\"n\">my_type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">size''</span> <span class=\"o\">:</span> <span class=\"n\">my_type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">my_type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">transfinite</span>\n<span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">size'</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">ω</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">size''</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Were size always decrease, but i don't think i can if i limit myself to naturals</p>",
        "id": 263380911,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1638407382
    },
    {
        "content": "<p>You could use <code>ordinal</code>, but in this case it should be enough to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.lex_wf\">docs#prod.lex_wf</a></p>",
        "id": 263388791,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638415431
    },
    {
        "content": "<p>Note that the <code>collatz</code> function as written is definitely not well founded, as it diverges at 0</p>",
        "id": 263390445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638417596
    },
    {
        "content": "<p>If you special case 0 to make it terminate, then it becomes an open problem. In either case you aren't going to convince lean that this function terminates. But as long as there is a proof that the function terminates, even if it has a very high transfinite order type, it should be possible to construct the function in lean, either by induction on a suitable inductive type, or using the <code>using_well_founded</code> mechanism to supply an inductive with even higher order type (like <code>ordinal</code>).</p>",
        "id": 263390666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638417771
    },
    {
        "content": "<p>The collatz function was just an exemple, I don't plan to solve it huhu</p>",
        "id": 263401482,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1638430325
    },
    {
        "content": "<p>The problem might even be undecidable -- Conway's FRACTRAN is a generalisation of collatz and deciding whether a FRACTRAN program terminates is undecidable</p>",
        "id": 263402372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638431333
    }
]