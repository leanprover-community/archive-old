[
    {
        "content": "<p>I wrote a new tactic, with a corresponding attribute <code>measurability</code>, and I would like that attribute to be transported by to_additive when creating the additive version of a lemma. How would I do that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.arithmetic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[measurability, to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">measurable.const_mul'</span> <span class=\"o\">[</span><span class=\"n\">has_measurable_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">measurable_const_mul</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">hf</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">measurable.const_mul'</span>  <span class=\"c1\">-- shows measurability attribute</span>\n<span class=\"k\">#print</span> <span class=\"n\">measurable.const_add'</span>  <span class=\"c1\">-- does not have the measurability attribute. How do I fix that?</span>\n</code></pre></div>\n<p>The continuity tactic also could be improved to have its attribute transported by to_additive.</p>",
        "id": 240910691,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1622536698
    },
    {
        "content": "<p>I think <code>to_additive</code> already does this for <code>simp</code>. So maybe you can find out how it does that (I have no idea).</p>",
        "id": 240910779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622536753
    },
    {
        "content": "<p>I have been looking at the to_additive files, searching exactly for that, but I have difficulties finding out how it is done.</p>",
        "id": 240910852,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1622536800
    },
    {
        "content": "<p>Also I realize that my code is not a mwe, since the attribute measurability is not defined for anybody else.</p>",
        "id": 240911025,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1622536897
    },
    {
        "content": "<p>Here is the same example, but with the continuity attribute (which should not be used on that lemma, but it's just an example):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.arithmetic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[continuity, to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">measurable.const_mul'</span> <span class=\"o\">[</span><span class=\"n\">has_measurable_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">measurable_const_mul</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">hf</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">measurable.const_mul'</span>  <span class=\"c1\">-- shows continuity attribute</span>\n<span class=\"k\">#print</span> <span class=\"n\">measurable.const_add'</span>  <span class=\"c1\">-- does not</span>\n</code></pre></div>",
        "id": 240911291,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1622537033
    },
    {
        "content": "<p>Ah, that's a pity, I was going to suggest to see how it works for <code>continuity</code>. :-)</p>",
        "id": 240918347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622540983
    },
    {
        "content": "<p>Have you tried adding <code>measurability</code> to lines 311-312 of <code>algebra.group.to_additive</code>?</p>",
        "id": 240918544,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622541083
    },
    {
        "content": "<p>If that works please do continuity too!</p>",
        "id": 240918569,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622541104
    },
    {
        "content": "<p>Yes, I added it in that list. That did not work</p>",
        "id": 240918699,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1622541168
    },
    {
        "content": "<p>This from <code>monoid_localization</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive, ext]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">localization_map</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f.to_map</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g.to_map</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">funext</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">add_submonoid.localization_map.ext</span>\n</code></pre></div>\n<p>suggests that <code>ext</code> also doesn't work.</p>",
        "id": 240918710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622541178
    },
    {
        "content": "<p>This from the <code>simps</code> docstring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">*</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"kd\">@[to_additive, simps]</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">apply</span> <span class=\"n\">both</span> <span class=\"bp\">`</span><span class=\"n\">to_additive</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">simps</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"kd\">definition</span><span class=\"o\">,</span> <span class=\"n\">making</span> <span class=\"n\">sure</span>\n  <span class=\"n\">that</span> <span class=\"bp\">`</span><span class=\"n\">simps</span><span class=\"bp\">`</span> <span class=\"n\">comes</span> <span class=\"n\">after</span> <span class=\"bp\">`</span><span class=\"n\">to_additive</span><span class=\"bp\">`.</span> <span class=\"n\">This</span> <span class=\"n\">will</span> <span class=\"n\">also</span> <span class=\"n\">generate</span> <span class=\"n\">the</span> <span class=\"n\">additive</span> <span class=\"n\">versions</span> <span class=\"n\">of</span> <span class=\"n\">all</span>\n  <span class=\"bp\">`</span><span class=\"n\">simp</span><span class=\"bp\">`</span> <span class=\"n\">lemmas.</span>\n</code></pre></div>\n<p>Counterintuitive!</p>",
        "id": 240918831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622541254
    },
    {
        "content": "<p>From <code>topology.algebra.monoid</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive, continuity]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_multiset_prod</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">⟩,</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">continuous_list_prod</span> <span class=\"n\">l</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">continuity</span><span class=\"o\">]</span> <span class=\"n\">continuous_multiset_sum</span>\n\n<span class=\"kd\">@[continuity, to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_finset_prod</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_multiset_prod</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- should `to_additive` be doing this?</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">continuity</span><span class=\"o\">]</span> <span class=\"n\">continuous_finset_sum</span>\n</code></pre></div>\n<p>Both orders tried, neither works :-)</p>",
        "id": 240918927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622541331
    },
    {
        "content": "<p>The example from <code>monoid_localization</code> shouldn't work: <code>to_additive</code> needs to come last.</p>",
        "id": 240919300,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622541560
    },
    {
        "content": "<p>Random thought: does the tag order change anything? In Rémy's example, <code>to_additive</code> comes second while it comes first in the <code>simps</code> docstring.</p>",
        "id": 240919546,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622541722
    },
    {
        "content": "<p>Yes. Right now the rule is \"to_additive always last, except when <code>simps</code> are involved\"</p>",
        "id": 240919576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622541727
    },
    {
        "content": "<p>Essentially \"cleverest last\" :-)</p>",
        "id": 240919642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622541785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Make.20to_additive.20copy.20attribute/near/240919546\">said</a>:</p>\n<blockquote>\n<p>Random thought: does the tag order change anything? In Rémy's example, <code>to_additive</code> comes second while it comes first in the <code>simps</code> docstring.</p>\n</blockquote>\n<p>Yes, the tag order changes things. Stuff tagged before <code>to_additive</code> has a chance of being transferred.</p>",
        "id": 240919671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622541821
    },
    {
        "content": "<p>Oh okay. That's good to know! Is that referenced anywhere or is just folklore for now?</p>",
        "id": 240919750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622541855
    },
    {
        "content": "<p>I think it's folklore</p>",
        "id": 240919864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622541928
    },
    {
        "content": "<p><code>reassoc</code> and <code>simp</code> also interact. I think <code>reassoc</code> is the \"smart\" kid in that case.</p>",
        "id": 240919892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622541950
    },
    {
        "content": "<p>The list of lines 312-313 in to_additive goes through two lemmas, apparently unaltered, and then gets fed into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">attrs.mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">copy_attribute</span> <span class=\"n\">n</span> <span class=\"n\">src</span> <span class=\"n\">tgt</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so I thought that any attribute in the list would be copied. I don't understand why adding measurability to the list does not work.</p>",
        "id": 240920679,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1622542457
    },
    {
        "content": "<p>Perhaps it works only for attributes defined before to_additive?</p>",
        "id": 240921188,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1622542833
    },
    {
        "content": "<p>Nor me. :-( I'm trying this out myself at the moment, but touching <code>to_additive</code> kills all the oleans.</p>",
        "id": 240921197,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622542848
    },
    {
        "content": "<p>We (I) need to revive <a href=\"https://github.com/leanprover-community/mathlib/issues/5487\">#5487</a> I think. Rob and  Floris left some good comments that I didn't have time to address back then but shouldn't take too long now, assuming the bitrot isn't too bad. I'll try and do so this week.</p>",
        "id": 240924337,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1622544872
    },
    {
        "content": "<p>Some attributes have data attached iirc and the copy_attribute used by to_additive currently won't copy those is the problem.</p>",
        "id": 240924620,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1622545066
    }
]