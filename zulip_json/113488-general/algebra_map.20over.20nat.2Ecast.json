[
    {
        "content": "<p>I don't have a MWE, but it should be easy to reproduce by having big enough imports (<code>topology.metric_space.isometry</code> I suspect?). The coercion from <code>ℕ → ℝ</code> now goes through <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra_map.has_lift_t\">docs#algebra_map.has_lift_t</a> since <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s PR. I <em>think</em> they are defeq, but we should certainly monitor the situation and maybe tweak the priorities so that <code>nat.cast</code> stays over.</p>",
        "id": 304211222,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665845744
    },
    {
        "content": "<p>I'm mostly worried about positivity extensions, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.positivity_coe\">docs#tactic.positivity_coe</a> breaking. <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, is your \"unification workaround\" able to fix the potential breakage?</p>",
        "id": 304211913,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665846033
    },
    {
        "content": "<p>OMG did that get merged? I've been quite busy this month...</p>",
        "id": 304247720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665871521
    },
    {
        "content": "<p>Unification sounds like the right solution in the first place, not a workaround</p>",
        "id": 304253447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665877355
    },
    {
        "content": "<p>Tactics should never syntactically match on instances</p>",
        "id": 304253456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665877370
    }
]