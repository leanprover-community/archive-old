[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simp_lemmas</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>I think the consensus is that this example should not be proven by <code>simp</code>. Can Lean tell me what the <em>morally correct</em> proof is?</p>",
        "id": 130640952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533041173
    },
    {
        "content": "<p><code>simp</code> does not prove it in the online version</p>",
        "id": 130640973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533041222
    },
    {
        "content": "<p>The trace option spits out a lot of noise, but I didn't find the lemma that prove this.</p>",
        "id": 130640979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533041227
    },
    {
        "content": "<p>neither does it in my local copy</p>",
        "id": 130640991,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533041250
    },
    {
        "content": "<p>but you can use <code>set_option trace.simplify.rewrite true</code></p>",
        "id": 130640993,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533041258
    },
    {
        "content": "<p>My <code>simp</code> is stronger than yours!</p>\n<div class=\"codehilite\"><pre><span></span>0. [simplify.rewrite] [le_add_iff_nonneg_right]: i ≤ i + 1 ==&gt; 0 ≤ 1\n</pre></div>",
        "id": 130641048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533041313
    },
    {
        "content": "<p>you imported stuff</p>",
        "id": 130641052,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533041326
    },
    {
        "content": "<p>Cheater!</p>",
        "id": 130641056,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533041339
    },
    {
        "content": "<p>O.o.... <span class=\"emoji emoji-1f629\" title=\"distraught\">:distraught:</span></p>",
        "id": 130641165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533041454
    },
    {
        "content": "<p>Apparently the category libs by Scott import stuff that give <code>simp</code> superpowers when dealing with integers.</p>",
        "id": 130641187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533041512
    },
    {
        "content": "<p>I didn't expect that that import would affect the proof.</p>",
        "id": 130641248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533041535
    },
    {
        "content": "<p>Don't forget that one import can hide thousands imports</p>",
        "id": 130641265,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533041573
    },
    {
        "content": "<p>Yes, that is true. I think that means I should always import Scott's category libs.</p>",
        "id": 130641352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533041690
    },
    {
        "content": "<p>Eek, I have no idea how or why I could be responsible. :-)</p>",
        "id": 130641543,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533041967
    },
    {
        "content": "<p>/me mumbles something about synergy...</p>",
        "id": 130641639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533042087
    },
    {
        "content": "<p>interesting<br>\n<code>example : (0 : ℤ) ≤ 1 = true := rfl</code></p>",
        "id": 130641738,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533042239
    },
    {
        "content": "<p>because <code>(0 : ℤ) ≤ 1</code> can be lifted to <code>bool</code>, because it is decidable</p>",
        "id": 130641790,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533042263
    },
    {
        "content": "<p>but you already know this</p>",
        "id": 130641797,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533042273
    },
    {
        "content": "<p>There is no bool in this example, the proposition is indeed definitionally equal to true.</p>",
        "id": 130641839,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1533042361
    },
    {
        "content": "<p><code>bool</code> isn't involved here. <code>true</code> is <code>true : Prop</code><br>\n<code>example : (0 : ℕ) ≤ 1 = true := rfl --doesn't work</code></p>",
        "id": 130641857,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533042362
    },
    {
        "content": "<p>oops, I misread</p>",
        "id": 130641891,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533042387
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/int/order.lean#L13-L17\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/int/order.lean#L13-L17\">https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/int/order.lean#L13-L17</a></p>",
        "id": 130641897,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1533042396
    }
]