[
    {
        "content": "<p>In the following lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.relation</span>\n<span class=\"kn\">open</span> <span class=\"n\">relation</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₁</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₂</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n₁</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">n₁</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">n₁</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">T₁</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">refl_trans_gen</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">T_eq_T₁</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">T₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">T₁</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">triv</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">refl_trans_gen.head</span> <span class=\"n\">h₁</span> <span class=\"n\">h₃</span> <span class=\"o\">}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h.head_induction_on</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">T.mk₁</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">T.mk₂</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h₃</span> <span class=\"o\">}}},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>if I replace <code>apply h.head_induction_on</code> with <code>induction h</code>, then I get a dead-end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">T_eq_T₁</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">T₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">T₁</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">triv</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">refl_trans_gen.head</span> <span class=\"n\">h₁</span> <span class=\"n\">h₃</span> <span class=\"o\">}},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The first subgoal after the induction cannot be proved, because the induction tactic did not replace <code>n</code> with <code>0</code>. Is this the expected behavior?</p>",
        "id": 266415052,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1640856658
    },
    {
        "content": "<p>Have you tried <code>induction h with ... generalizing ...</code>?</p>",
        "id": 266415081,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640856717
    },
    {
        "content": "<p>There is nothing to be generalized. The goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">T</span> <span class=\"n\">F</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>After <code>induction h</code>, the first subgoal becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">T</span> <span class=\"n\">F</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>but the goal statement should be <code>T F 0</code>, because it's the <code>refl</code> case, so <code>n</code> must be unified with <code>0</code>. What am I missing?</p>",
        "id": 266415727,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1640857329
    },
    {
        "content": "<p>If you look at the definition of <code>refl_trans_gen</code>, you see that it's <code>0</code> that gets replaced by <code>n</code>, not the other way around.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">refl_trans_gen</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>which makes sense, but is rather unexpected indeed.</p>",
        "id": 266416015,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640857645
    }
]