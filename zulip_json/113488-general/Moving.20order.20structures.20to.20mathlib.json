[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/preparing.20for.20lean-3.2E13.2E0/near/197866838\">said</a>:</p>\n<blockquote>\n<p>Oh, I just realized that one of the areas I was most looking forward to refactoring as a result of the move, the stuff on order structures, was not included as part of the big move. Have we looked at giving the same treatment to the <code>preorder</code>, <code>partial_order</code>, <code>linear_order</code> classes in core?</p>\n</blockquote>\n<p>What's the plan now? Is it still in the realm of possibilities to move <code>preorder</code>, <code>partial_order</code>, <code>linear_order</code> to mathlib?</p>",
        "id": 294464657,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661015345
    },
    {
        "content": "<p>What are the cons and pros in your eyes?</p>",
        "id": 294464804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661015454
    },
    {
        "content": "<p>Pros:</p>\n<ul>\n<li>Better flexibility for the very beginning of the order hierarchy</li>\n<li>No need to have weird lists of \"lemmas missing in core\"</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Unknown amount to be pulled out of core/duplicated before that happens. I was tricked by docgen into thinking we were close, so I opened <a href=\"https://github.com/leanprover-community/lean/pull/629\">lean#629</a> a while back.</li>\n</ul>",
        "id": 294465291,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661015786
    }
]