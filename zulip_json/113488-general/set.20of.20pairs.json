[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span>  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">}</span> <span class=\"c1\">-- ERROR</span>\n</code></pre></div>\n<p>Why I can't construct a set of pairs of numbers? The first command works, why the second fails?</p>",
        "id": 228867610,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1614899632
    },
    {
        "content": "<p>The set builder notation is very basic. You can't write patterns in the left slot.</p>",
        "id": 228867763,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614899708
    },
    {
        "content": "<p><code>#check { p : ℕ × ℕ | p.1 &lt; 2 ∧ p.2 &lt; 5 } </code></p>",
        "id": 228867819,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614899738
    },
    {
        "content": "<p>I would guess that Lean4 is going to let us do things the way you want, however.</p>",
        "id": 228867906,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614899778
    },
    {
        "content": "<p>Hum, thinking in an alternative for defining </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">r_interp</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">AtomicConcept</span> <span class=\"n\">AtomicRole</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Role</span> <span class=\"n\">AtomicRole</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">I.δ</span> <span class=\"bp\">×</span> <span class=\"n\">I.δ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Role.Atomic</span> <span class=\"n\">R</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">I.atom_R</span> <span class=\"n\">R</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Role.Compose</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">I.δ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">I.atom_R</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">I.atom_R</span> <span class=\"n\">S</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Role.Inverse</span> <span class=\"n\">R</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">I.δ</span> <span class=\"bp\">×</span> <span class=\"n\">I.δ</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">I.δ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">I.atom_R</span> <span class=\"n\">R</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>that is, an interpretation of a Compose R S where both R and S has (by induction) the interpretation as pairs...</p>",
        "id": 228868834,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1614900291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/set.20of.20pairs/near/228867906\">said</a>:</p>\n<blockquote>\n<p>I would guess that Lean4 is going to let us do things the way you want, however.</p>\n</blockquote>\n<p>You guessed right :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">def</span> <span class=\"n\">Set.in</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">a</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Set.in</span> <span class=\"n\">s</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">a</span> <span class=\"s2\">\"|\"</span> <span class=\"n\">p</span> <span class=\"s2\">\"}\"</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Set.in</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 228888175,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1614912121
    },
    {
        "content": "<p>That is shockingly straightforward. :-)</p>",
        "id": 228891340,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614914389
    },
    {
        "content": "<p>Indeed</p>",
        "id": 228891472,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1614914473
    },
    {
        "content": "<p>I remember asking Sebastian over a year ago whether this exact thing would be possible in Lean 4 and him being optimistic, but it's great to see that it's also easy :-)</p>",
        "id": 228904950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614926333
    }
]