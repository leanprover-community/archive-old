[
    {
        "content": "<p>I would like to be able to change the tactic specified via <code>auto_param</code> to fill in a structure field automatically.</p>",
        "id": 131101629,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533727222
    },
    {
        "content": "<p>I know I can't actually do it, so I would like a nice workaround.</p>",
        "id": 131101631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533727231
    },
    {
        "content": "<p>Somehow I want to write</p>\n<div class=\"codehilite\"><pre><span></span>structure F :=\n(t : Type . sneaky)\n</pre></div>\n\n\n<p>and then for a while during the development have <code>sneaky</code> do one thing, and then be able to utter a secret incantation, after which <code>sneaky</code> does something else.</p>",
        "id": 131101653,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533727297
    },
    {
        "content": "<p>For example, the <code>sneaky</code> tactic could in some way inspect the environment, and delegate its actual work to a different tactic based on what it sees.</p>",
        "id": 131101699,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533727323
    },
    {
        "content": "<p>Does anyone know what I'm looking for?</p>",
        "id": 131101703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533727329
    },
    {
        "content": "<p>I already do a little bit of this: my <code>tidy</code> tactic looks for definitions tagged with the <code>@[tidy]</code> attribute, and if they are of type <code>tactic unit</code> it also invokes them during it's attempt to solve a goal.</p>",
        "id": 131101717,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533727380
    },
    {
        "content": "<p>But now I want something slight different: e.g. have <code>sneaky</code> call the last-to-be-defined tactic tagged with @[sneaky_implementation], or something like that.</p>",
        "id": 131101773,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533727445
    },
    {
        "content": "<p>Here's a way to do it if you want to have only one implementation at a given time:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">user_attribute</span><span class=\"o\">]</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">sneaky_attr</span> <span class=\"o\">:</span> <span class=\"n\">user_attribute</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">sneaky_impl</span><span class=\"o\">,</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;implementation for sneaky&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">before_unset</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n  <span class=\"n\">after_set</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n    <span class=\"n\">ns</span> <span class=\"err\">←</span> <span class=\"n\">attribute</span><span class=\"bp\">.</span><span class=\"n\">get_instances</span> <span class=\"n\">sneaky_attr</span><span class=\"bp\">.</span><span class=\"n\">name</span><span class=\"o\">,</span>\n    <span class=\"n\">ns</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">unset_attribute</span> <span class=\"n\">sneaky_attr</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"n\">n&#39;</span><span class=\"o\">),</span>\n    <span class=\"n\">attribute</span><span class=\"bp\">.</span><span class=\"n\">get_instances</span> <span class=\"n\">sneaky_attr</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span> <span class=\"o\">}</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">sneaky</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"err\">←</span> <span class=\"n\">attribute</span><span class=\"bp\">.</span><span class=\"n\">get_instances</span> <span class=\"n\">sneaky_attr</span><span class=\"bp\">.</span><span class=\"n\">name</span><span class=\"o\">,</span>\n  <span class=\"n\">monad</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"o\">(</span><span class=\"n\">mk_const</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">eval_expr</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">))</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">.</span> <span class=\"n\">sneaky</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">sneaky_impl</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">mk_nat</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">trace</span> <span class=\"s2\">&quot;running mk_nat&quot;</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span> <span class=\"c1\">-- running mk_nat</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">sneaky_impl</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">mk_sorry</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">trace</span> <span class=\"s2\">&quot;running mk_sorry&quot;</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">sorry</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span> <span class=\"c1\">-- running mk_sorry</span>\n</pre></div>",
        "id": 131103723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533729894
    },
    {
        "content": "<p>Each time you define a tactic with <code>@[sneaky_impl]</code>, the last one to have it has it unset, and <code>sneaky</code> calls which ever definition has the attribute right now</p>",
        "id": 131103757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533729943
    },
    {
        "content": "<p>Alternatively, you could have the attributes remain permanently, but you just check which was the last to be written</p>",
        "id": 131103813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533729981
    },
    {
        "content": "<p>awesome! I didn't know about those hooks on attributes.</p>",
        "id": 131103847,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730031
    },
    {
        "content": "<p>okay, so next I want approval to use this in mathlib. :-) Later in my category theory work, I really rely on most of the <code>functoriality</code> (oops, <code>map_comp</code> <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span>) and <code>naturality</code> fields being filled in automatically by <code>tidy</code> or <code>obviously</code>. Of course, it's going to be a little while before <code>tidy</code> is mathlib ready, and maybe much longer before <code>obviously</code> is. I'd really like to be able to keep using them in my work, however... (in particular, I'm going to need to leave in \"in action\" everywhere in my later category theory stuff while I try and get them ready mathlib ready).</p>",
        "id": 131104078,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730321
    },
    {
        "content": "<p>So... the hope is that I can have the <code>id_comp</code>, <code>comp_id</code>, <code>assoc</code>, <code>map_id</code>, <code>map_comp</code> and <code>naturality</code> fields all invoke a tactic defined like <code>sneaky</code> above.</p>",
        "id": 131104131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730369
    },
    {
        "content": "<p>In mathlib for now they will do nothing. In my development they will hook into whatever I want them to. Eventually, hopefully, they will start doing something in mathlib too.</p>",
        "id": 131104151,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730418
    },
    {
        "content": "<p>But what would the first mathlib version of <code>sneaky</code> do?</p>",
        "id": 131104206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533730466
    },
    {
        "content": "<p>`[skip]</p>",
        "id": 131104211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730474
    },
    {
        "content": "<p>So if you don't provide the field explicitly, you just get the usual error message about an unsolved goal.</p>",
        "id": 131104221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730499
    },
    {
        "content": "<p>Hmmm. Sorry, I don't get what your strategy is.</p>",
        "id": 131104236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533730532
    },
    {
        "content": "<p>Does that mean that you still have to prove this stuff by hand in mathlib?</p>",
        "id": 131104241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533730547
    },
    {
        "content": "<p>If so, why would you want a <code>sneaky</code>?</p>",
        "id": 131104264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533730562
    },
    {
        "content": "<p>If you look at <a href=\"https://github.com/leanprover/mathlib/blob/master/category_theory/category.lean#L43\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/category_theory/category.lean#L43\">https://github.com/leanprover/mathlib/blob/master/category_theory/category.lean#L43</a></p>",
        "id": 131104289,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730583
    },
    {
        "content": "<p>because he wants the auto param for a structure defined in mathlib to call his tactic</p>",
        "id": 131104290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533730590
    },
    {
        "content": "<p>you'll see that <code>category.assoc</code> is already marked with the auto_param <code>obviously</code>.</p>",
        "id": 131104296,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730597
    },
    {
        "content": "<p>it's just that <code>obviously</code> in mathlib is just defined to be <code>skip</code>. ( a few lines above!)</p>",
        "id": 131104301,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730612
    },
    {
        "content": "<p>I want to leave it like that in mathlib (for now), but still be able to use it outside while I'm getting it ready.</p>",
        "id": 131104311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730630
    },
    {
        "content": "<p>I'm okay with this in principle. I always thought that the static nature of auto params made them a bit limited, but this is a nice way to forward reference</p>",
        "id": 131104324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533730638
    },
    {
        "content": "<p>I just need to figure out how to structure it nicely</p>",
        "id": 131104334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533730657
    },
    {
        "content": "<p>obviously it would make sense to write something slightly more general than sneaky above :-)</p>",
        "id": 131104336,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730661
    },
    {
        "content": "<p>One thing which bothers me about this proposal is that you probably want to have just one <code>sneaky</code> which then goes everywhere</p>",
        "id": 131104404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533730712
    },
    {
        "content": "<p>I'm not sure what you mean?</p>",
        "id": 131104410,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730725
    },
    {
        "content": "<p>I'm imagining we could set up an attribute that you use like <code>@[replace tidy] meta def foo : tactic unit := ...</code></p>",
        "id": 131104447,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730763
    },
    {
        "content": "<p>and then as an auto_param you put in <code>(field : Type . invoke_tidy)</code></p>",
        "id": 131104458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730786
    },
    {
        "content": "<p>and <code>invoke_tidy</code> goes and finds the latest declaration tagged with @[replace tidy].</p>",
        "id": 131104513,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730814
    },
    {
        "content": "<p>is <code>tidy</code> parametric here? what else can you <code>replace</code></p>",
        "id": 131104524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533730831
    },
    {
        "content": "<p>well, I was imagining that other people might want to replace other things</p>",
        "id": 131104665,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533730994
    },
    {
        "content": "<p>but maybe that's not helpful...</p>",
        "id": 131104677,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533731005
    },
    {
        "content": "<p>I agree. But how would that work?</p>",
        "id": 131104681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533731007
    },
    {
        "content": "<p>I don't really know about parameters to attributes, so I was just dreaming there.</p>",
        "id": 131104762,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533731087
    },
    {
        "content": "<p>I was imagining that you'd only define an attribute once, just like <code>sneaky</code> but taking a parameter.</p>",
        "id": 131104790,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533731118
    },
    {
        "content": "<p>For each value of that parameter you'd have to make a definition of an <code>invoke_XXX</code> tactic</p>",
        "id": 131104806,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533731143
    },
    {
        "content": "<p>that would then invoke the last thing tagged with <code>@[replace XXX]</code></p>",
        "id": 131104888,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533731213
    },
    {
        "content": "<p>For me, I'm happy to have a single tactic for all of those fields (and many others later)</p>",
        "id": 131104918,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533731250
    },
    {
        "content": "<p>as long as I can still hook into it post mathlib</p>",
        "id": 131104924,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533731258
    },
    {
        "content": "<p>Oh wow, I tried using <code>sneaky_impl</code> with local attributes and it actually went back to the old definition after the section closed</p>",
        "id": 131104925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533731259
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@[sneaky_impl] meta def mk_nat : tactic unit :=\ntrace &quot;running mk_nat&quot; &gt;&gt; `[exact nat]\n\nexample : F := {} -- running mk_nat\n\nsection\nmeta def mk_sorry : tactic unit :=\ntrace &quot;running mk_sorry&quot; &gt;&gt; `[sorry]\nlocal attribute [sneaky_impl] mk_sorry\n\nexample : F := {} -- running mk_sorry\nend\n\nexample : F := {} -- running mk_nat\n</pre></div>",
        "id": 131104983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533731294
    },
    {
        "content": "<p>Nice! (I think?)</p>",
        "id": 131105029,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533731356
    },
    {
        "content": "<p>I guess that's the power of functional data structures, you get \"time travel\" for free</p>",
        "id": 131105046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533731389
    },
    {
        "content": "<p>That means that you could add particular superpowers, but not others, to <code>tidy</code>, depending on the file you are working in?</p>",
        "id": 131105102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533731409
    },
    {
        "content": "<p>Yes</p>",
        "id": 131105180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533731505
    },
    {
        "content": "<p>I already do this all the time, actually, just at a whole file level.</p>",
        "id": 131105231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533731530
    },
    {
        "content": "<p>For me so far the definition of <code>tidy</code> has been invariant, except that it looks up everything marked with @[tidy] and tries those tactics too.</p>",
        "id": 131105243,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533731565
    },
    {
        "content": "<p>Mario's observation means you can do it at section level too, which I hadn't really appreciated.</p>",
        "id": 131105253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533731583
    },
    {
        "content": "<p>Check out <a href=\"https://github.com/leanprover/mathlib/blob/master/tactic/replacer.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/tactic/replacer.lean\">https://github.com/leanprover/mathlib/blob/master/tactic/replacer.lean</a> for my attempt at a general framework</p>",
        "id": 131113251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533740095
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def_replacer tidy\nstructure T := (t : Type . tidy)\n\n@[tidy] meta def tac1 := tactic.trace &quot;tac1&quot;\nexample : T := {} -- tac1\n\n@[tidy] meta def tac2 (prev : tactic unit) := prev &gt;&gt; tactic.trace &quot;tac2&quot;\nexample : T := {} -- tac1 tac2\n\n@[tidy] meta def tac3 := tactic.trace &quot;tac3&quot;\nexample : T := {} -- tac3\n</pre></div>",
        "id": 131113386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533740263
    }
]