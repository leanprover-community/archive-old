[
    {
        "content": "<p>Hi there, it's me again. I am trying to prove an equivalence about fields. One of these says \"if R is a field, all morphisms to nonzero rings S are injective\".</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">p2</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">exists_pair_ne</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">is_field</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>However, Lean does not compile the <code>(f: R →+* S)</code> part with an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">exists_pair_ne</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_field</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">S</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">semiring</span> <span class=\"n\">SLean</span>\n</code></pre></div>\n<p>How should I fix this?</p>\n<p>Note that the forall is part of a tfae, so I won't be able to get <code>S</code> and <code>[comm_ring S]</code> out of the forall.</p>",
        "id": 236045313,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1619335081
    },
    {
        "content": "<p>You need <code>by exactI</code> to pick up typeclass instances in binders</p>",
        "id": 236045382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619335140
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">p2</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">exists_pair_ne</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">is_field</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 236045401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619335174
    },
    {
        "content": "<p>That works. Thank you!</p>",
        "id": 236045495,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1619335234
    },
    {
        "content": "<p><code>exists_pair_ne</code> already exists in Lean, it's called something like <code>nontrivial</code>, but here you don't need it at all because it's implied by <code>is_field</code>.</p>",
        "id": 236047716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619337826
    },
    {
        "content": "<p>Ah, right. In this case it was a remnant of the bigger tfae that I forgot to remove when writing my minimal example.<br>\nI'll have a look at <code>nontrivial</code>. I just copied <code>is_field.exists_pair_ne</code>.</p>",
        "id": 236053953,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1619345124
    },
    {
        "content": "<p><code>nontriviality</code> may be helpful - great tactic :)</p>",
        "id": 236054838,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619346088
    },
    {
        "content": "<p>(Beware that most of the library is designed assuming your parameters look like <code>{R : Type u} [field R]</code> rather than <code>{R : Type u} [comm_ring R] (h : is_field R)</code>, so you might save yourself some trouble by switching if that is possible.)</p>",
        "id": 236060732,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619352516
    }
]