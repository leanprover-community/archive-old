[
    {
        "content": "<p>How do I get something like this to work?</p>\n<div class=\"codehilite\"><pre><span></span>class AA (α : Type):=\n(some_op : α → α → ℕ )\n\nclass BB (α : Type) extends AA α :=\n(other_op : α → α → ℕ)\nnamespace BB\ndef caabb {α : Type} (bb : BB α) := λ x y : α, (bb.some_op y x) + (bb.other_op x y)\nend BB\n</pre></div>\n\n\n<p>I'm trying to build this so that you can write</p>\n<div class=\"codehilite\"><pre><span></span>def asd {α : Type} (bb1 bb2 : BB α) := λ x y, (bb1.caabb x y) + (bb2.caabb x y)\n</pre></div>\n\n\n<p>It works if I replace the class keyword with a structure keyword.</p>",
        "id": 181128005,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1574180474
    },
    {
        "content": "<p>You probably want <code>structure</code> everywhere, not <code>class</code>?</p>",
        "id": 181128373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574180649
    },
    {
        "content": "<p>But then I can't say some_op a1 a2</p>",
        "id": 181128618,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1574180792
    },
    {
        "content": "<p>Oh... you said that. But what you wrote for <code>bb.other_op</code> is wrong already, so I don't understand what you actually want</p>",
        "id": 181128634,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574180801
    },
    {
        "content": "<p>Ask a better question <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 181128650,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574180817
    },
    {
        "content": "<p>Right. Say AA also extends the monoid class.</p>",
        "id": 181128686,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1574180845
    },
    {
        "content": "<p>If you want to keep using classes, this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">AA</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">):=</span>\n<span class=\"o\">(</span><span class=\"n\">some_op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">BB</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">AA</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">other_op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">AA</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">BB</span>\n<span class=\"n\">def</span> <span class=\"n\">caabb</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bb</span> <span class=\"o\">:</span> <span class=\"n\">BB</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">some_op</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">other_op</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kn\">end</span> <span class=\"n\">BB</span>\n</pre></div>",
        "id": 181128714,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1574180861
    },
    {
        "content": "<p>You need to <code>open AA</code> (so that <code>AA.some_op</code> is abbreviated to <code>some_op</code>) or alternatively define the projecction <code>some_op</code> in another namespace.</p>",
        "id": 181128805,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1574180901
    },
    {
        "content": "<p>If you're using classes, then you probably don't want to be using the field projection notation at all</p>",
        "id": 181128821,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574180911
    },
    {
        "content": "<p>At least in a simple example like this</p>",
        "id": 181128828,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574180917
    },
    {
        "content": "<p>You can also remove the name <code>bb : </code></p>",
        "id": 181128878,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574180959
    },
    {
        "content": "<p>But if you want <em>multiple</em> <code>BB</code> instances on the same type, classes might not be the thing you want to use.<br>\nThis example</p>\n<div class=\"codehilite\"><pre><span></span>def asd {α : Type} (bb1 bb2 : BB α) := λ x y, (bb1.caabb x y) + (bb2.caabb x y)\n</pre></div>\n\n\n<p>will be a pain with classes.</p>",
        "id": 181129047,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1574181043
    },
    {
        "content": "<p>When using structures, the user specifies which structure to use (so you often use projection notation), and with classes you ask Lean to find the instance (like how Lean will find <code>add_group</code> on the integers). If you have two <code>group</code> or <code>BB</code> instances on the same type, Lean will just pick one for you, and it's  a little ugly to specify it yourself (you can do it, with something like <code>@ccaabb _ bb2 x y</code>)</p>",
        "id": 181129280,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1574181153
    }
]