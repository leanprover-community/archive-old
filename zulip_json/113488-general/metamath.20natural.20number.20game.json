[
    {
        "content": "<p><a href=\"https://github.com/pbrosnan/ntg\">https://github.com/pbrosnan/ntg</a></p>\n<p>With added proof that 0 = 1?? I never managed to do that level in Lean...</p>",
        "id": 243584279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624399292
    },
    {
        "content": "<p>Ah yes the \"invulnerability\" upgrade</p>",
        "id": 243585306,
        "sender_full_name": "Reid Barton",
        "timestamp": 1624399924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/metamath.20natural.20number.20game/near/243585306\">said</a>:</p>\n<blockquote>\n<p>Ah yes the \"invulnerability\" upgrade</p>\n</blockquote>\n<p>is that like god-mode in doom?</p>",
        "id": 243585384,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624400001
    },
    {
        "content": "<p><code>pa_ax7</code> is OP</p>",
        "id": 243585398,
        "sender_full_name": "Jason Rute",
        "timestamp": 1624400015
    },
    {
        "content": "<p>New ZF patch dropped! Adds new game-mode \"choice\"</p>",
        "id": 243585598,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624400133
    },
    {
        "content": "<p>For some context: The metamath <a href=\"http://peano.mm\">peano.mm</a> file has never been used, it is an axiomatization written in a very obtuse form for theoretical analysis purposes. The typo has already been fixed, although the PR hasn't landed yet. It won't cause any breakage because there are no proofs in the system (except for this ntg repo, apparently)</p>",
        "id": 243590136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624403528
    },
    {
        "content": "<p>Is my understanding correct that this typo was made by the famous set-theorist Bob Solovay?</p>",
        "id": 243618478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624435422
    },
    {
        "content": "<p>The very same</p>",
        "id": 243622118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624437669
    },
    {
        "content": "<p>It's understandable, because the way in which the statement was wrong has to do with the difference between FOL and metamath: specifically, you have to say that a binder variable is fresh with respect to the variables occurring in the formula, which is true by default in FOL and false by default in metamath</p>",
        "id": 243622353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624437829
    },
    {
        "content": "<p>We actually have a tool which runs on <a href=\"http://set.mm\">set.mm</a> that would have caught this bug, but it is adapted specifically to <a href=\"http://set.mm\">set.mm</a> and other databases that look vaguely like it, while <a href=\"http://peano.mm\">peano.mm</a> has a very different design</p>",
        "id": 243622512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624437924
    },
    {
        "content": "<p>In short, bob thought he wrote this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">lt_def</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">nat.succ</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>but he actually wrote this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">lt_def'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">nat.succ</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>which is false:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lt_def'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 243623289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624438415
    },
    {
        "content": "<p>It should be noted that Bob Solovay also found one of the two inconsistencies in the HOL Light theorem prover kernel (the other being found by Tom Hales).  These were fixed of course and John Harrison later gave a HOL Light proof of the consistency of the HOL Light kernel. So I think in the end, Solovay’s impact on the consistency of theorem provers is probably a net positive.  (Note, this story comes from my memory of what <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> told me.  I can’t find it documented.)</p>",
        "id": 243632530,
        "sender_full_name": "Jason Rute",
        "timestamp": 1624444180
    },
    {
        "content": "<p>I have a huge amount of respect for Solovay as a mathematician, and this is in no way lessened by a typo. Every mathematician has a typo in their papers.</p>",
        "id": 243635001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624446018
    },
    {
        "content": "<p>It would be good to document this. I think I first heard the story from Tom Hales, and my memory is that the bug had to do with variable renaming. (The companion story is that when I was a graduate student at Berkeley, my advisor, Jack Silver, decided to teach a course on proof theory, and Bob Solovay decided to sit in. In the first lecture, Jack said something about renaming variables, and Bob pushed him on the details. Jack got flummoxed, came back the next lecture, and offered a correction. Bob challenged that and found another bug in the presentation. Jack gave up, moved on, and Bob did not come back for the third lecture.)</p>\n<p>Bob and Tom and I all attended a meeting at Dagstuhl in the early days of Flyspeck. Between the talks Bob tried to sort out the set-theoretic strength of Coq's axiomatic foundation, which is essentially the same as Lean. (It has long been folklore that these have the same strength as set theory with omega-many inaccessibles; the most rigorous proof I know of the lower bound is Mario's formalization of set theory in Lean, and the most rigorous proof I know of the upper bound is Mario's MS thesis.) Tobias Nipkow was at the meeting; it is when he got involved with Flyspeck. Freek Wiedijk was also there, and if I recall correctly it was the first time I met Assia Mahboubi.</p>\n<p>Oh! And now I remember that it was this meeting of the MAP group: <a href=\"https://www.dagstuhl.de/de/programm/kalender/semhp/?semnr=05021\">https://www.dagstuhl.de/de/programm/kalender/semhp/?semnr=05021</a>. I had recently completed the formalization of the prime number theorem, Georges had just announced the formalization of the four-color theorem (he was not at the meeting), and Tom had not quite finished the formalization of the Jordan curve theorem. Harold Edwards was also there, talking about the Edwards curve. Edwards has done excellent work on the history of 19th century number theory (he is a big fan of Kronecker), and I gave him a draft of a paper I had written on Dedekind for comments. When the lectures got too technical, sitting in the back of the lecture room, I watched him pull out the paper, scowl at my comparisons between Dedekind and Kronecker, and fill the margins with notes (which we later discussed).</p>\n<p>Thanks for the trip down memory lane! Anyhow, someone should document the story of the bugs in HOL light. Tom and John Harrison are  more reliable sources than I am.</p>",
        "id": 243657526,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1624457610
    }
]