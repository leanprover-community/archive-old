[
    {
        "content": "<p>Any ideas for notation for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multilinear_map\">docs#multilinear_map</a>? To make things confusing, we already have <code>(⨂ i, M i) →ₗ[R] N</code> for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map\">docs#linear_map</a> over <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_tensor_product\">docs#pi_tensor_product</a>, which is almost isomorphic; meanwhile, <code>(Π i, M i) →ₗ[R] N</code> is a linear map over a pi type, which has different properties.</p>\n<p>I came up with <code>Πₗ i, M i →ₗ[R] N</code> but I think it's not a good idea. Here's a mwe for someone else to try similar ideas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.multilinear</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`Πₗ</span> <span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">m</span><span class=\"o\">:(</span><span class=\"n\">scoped</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">multilinear_map</span> <span class=\"n\">R</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">`→ₗ</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">R</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"n\">R</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Πₗ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225694500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612879818
    },
    {
        "content": "<p>In case of <code>continuous_multilinear_map</code>s we only have notation for <code>continuous_multilinear_map (λ i : fin n, E) F</code></p>",
        "id": 225733186,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612894691
    },
    {
        "content": "<p>What is that notation? I don't remember seeing it when I last looked at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_multilinear_map\">docs#continuous_multilinear_map</a></p>",
        "id": 225736325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612895923
    },
    {
        "content": "<p>Ah, <code>M [×n]→L[R] N</code></p>",
        "id": 225736464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612895978
    },
    {
        "content": "<p>How about something like <code>(Π i, M i) →ₘₗ[R] N</code>?</p>",
        "id": 225739829,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1612897255
    },
    {
        "content": "<p>Notation can't start with <code>(</code> unfortunately -  so that would require some clever trickery to convert <code>Π i, M i</code> into <code>λ  i, M i</code></p>",
        "id": 225765436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612908564
    },
    {
        "content": "<p>I can basically get that working with:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>import linear_algebra.multilinear\n\nabbreviation type_of.codomain {α : Type*} {β : α → Type*} (a : Π (i : α), β i) (i : α) : Type* :=\nβ i\n\nnotation A ` →ₗₘ[` R `] ` N := multilinear_map R (type_of.codomain (sorry : A)) N\n\nvariables {ι R M N : Type*} {Mᵢ : ι → Type*}\n  [decidable_eq ι]\n  [semiring R] [∀ i, add_comm_monoid (Mᵢ i)] [∀ i, semimodule R (Mᵢ i)]\n  [add_comm_monoid M] [semimodule R M]\n  [add_comm_monoid N] [semimodule R N]\n\nexample : (Π i, Mᵢ i) →ₗₘ[R] N :=\nbegin\n  dunfold type_of.codomain, dsimp only,\n  exact 0,\nend\n\nexample : (ι → M) →ₗₘ[R] N :=\nbegin\n  dunfold type_of.codomain, dsimp only,\n  exact 0,\nend\n</code></pre></div>\n</div></div>",
        "id": 225768811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612910539
    },
    {
        "content": "<p>But I don't know how to eliminate the <code>sorry</code> in the notation</p>",
        "id": 225768867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612910568
    },
    {
        "content": "<p>The <code>typeof</code> strategy doesn't work, because it requires me to construct a term of <code>A</code> to use even if one doesn't exist</p>",
        "id": 225768961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612910625
    },
    {
        "content": "<p>Solved!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.multilinear</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">type_info</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">type_info</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">type_info.codomain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">type_info</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`</span> <span class=\"bp\">→ₗₘ</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">R</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">multilinear_map</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">type_info.codomain</span> <span class=\"o\">(</span><span class=\"n\">type_info.unit</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"bp\">ᵢ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">ᵢ</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">ᵢ</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">ᵢ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→ₗₘ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">type_info.codomain</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→ₗₘ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">type_info.codomain</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225769771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612911136
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6152\">#6152</a></p>",
        "id": 225807716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612946955
    }
]