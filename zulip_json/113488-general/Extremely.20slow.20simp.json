[
    {
        "content": "<p>The following example takes more than one minute on my machine:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">all</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>The simplifier rewrites once.  However it seems to spend a huge time trying to match <code>add_con.coe_add</code> (20s), <code>con.coe_mul</code> (19s), <code>filter.filter_product.of_one</code> (9s), <code>filter.filter_product.of_neg</code> (4s), and <code>filter.filter_product.of_zero</code> (15s).  Does anybody have any idea what's going on here?</p>",
        "id": 189266974,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582844528
    },
    {
        "content": "<p>What are the imports?</p>",
        "id": 189267136,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582844665
    },
    {
        "content": "<p><code>import all</code></p>",
        "id": 189267186,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582844707
    },
    {
        "content": "<p>You should have used <code>squeeze_simp</code>, then you would only have to do it once</p>",
        "id": 189267844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582845299
    },
    {
        "content": "<p>Past my bedtime now, but the (or a) culprit seems to be an instance search for <code>example : has_mul {r : ℝ // 0 ≤ r} := by apply_instance</code>. <code>nnreal</code> gets unfolded somewhere it shouldn't.</p>",
        "id": 189269664,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582846930
    },
    {
        "content": "<p>Ah, <code>(⟨a, ha⟩ : ℝ≥0)</code> doesn't actually have type <code>nnreal</code>, it has type <code>{r : real // 0 &lt;= r}</code>. Nothing's getting unfolded, it isn't even folded to start with.</p>",
        "id": 189270031,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582847329
    },
    {
        "content": "<p>The following proof takes around 2 min 30 to compile. Any idea why it is so slow and how to speed it up? (it requires adding <code>@[simps]</code> to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monoidal_category.full_monoidal_subcategory\">docs#category_theory.monoidal_category.full_monoidal_subcategory</a> to work).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">representation_theory.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">representation_theory.fdRep</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">representation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ρV</span> <span class=\"o\">:</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ρW</span> <span class=\"o\">:</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"n\">tensor_product.ext</span>\n\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">linear_equiv.to_FinVect_iso</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">FinVect.of</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"bp\">≅</span> <span class=\"n\">FinVect.of</span> <span class=\"n\">k</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">e.to_linear_map</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">e.symm.to_linear_map</span><span class=\"o\">,</span>\n  <span class=\"n\">hom_inv_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">e.left_inv</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">inv_hom_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">e.right_inv</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">dual_tensor_iso_lin_hom</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fdRep.of</span> <span class=\"n\">ρV.dual</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">fdRep.of</span> <span class=\"n\">ρW</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">fdRep.of</span> <span class=\"o\">(</span><span class=\"n\">lin_hom</span> <span class=\"n\">ρV</span> <span class=\"n\">ρW</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Action.mk_iso</span> <span class=\"o\">(</span><span class=\"n\">dual_tensor_hom_equiv</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_FinVect_iso</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">module.dual.transpose_apply</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284240009,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653759671
    },
    {
        "content": "<p>I get an unknown <code>lin_hom</code>. Is this <code>representation.lin_hom</code>?</p>",
        "id": 284240668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653760485
    },
    {
        "content": "<p>Then I get a type mismatch. I'm on today's <code>master</code>.</p>",
        "id": 284240684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653760517
    },
    {
        "content": "<p>Where do you get a type mismatch?</p>",
        "id": 284240705,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653760559
    },
    {
        "content": "<p>Why not add the <code>simps</code> attribute in the mwe?</p>",
        "id": 284240748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653760566
    },
    {
        "content": "<p>If you're on today's master and you cut and paste, you'll be able to see exactly what I'm seeing :-)</p>",
        "id": 284240765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653760591
    },
    {
        "content": "<p>Am I supposed to be adding <code>attribute [simps] category_theory.monoidal_category.full_monoidal_subcategory</code> to this mwe? I get it on <code>Action.mk_iso</code>, a type mismatch.</p>",
        "id": 284240864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653760716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Extremely.20slow.20simp/near/284240748\">said</a>:</p>\n<blockquote>\n<p>Why not add the <code>simps</code> attribute in the mwe?</p>\n</blockquote>\n<p>Oh I forgot that you can add the simps attribute locally and not just before the definition. So yes I think the mwe requires <code>attribute [simps] category_theory.monoidal_category.full_monoidal_subcategory</code>.</p>",
        "id": 284241011,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653760861
    },
    {
        "content": "<p>Let me try to figure out why there's a type mismatch.</p>",
        "id": 284241173,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653761106
    },
    {
        "content": "<p>Ok, I haven't been able to figure out why the MWE didn't work (if someone understands why let me know!)  but I PR'd the branch in which the proof works : <a href=\"https://github.com/leanprover-community/mathlib/pull/14453\">#14453</a></p>",
        "id": 284297719,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653847383
    },
    {
        "content": "<p>(The proof in question is at the end of <code>representation_theory/basic</code>).</p>",
        "id": 284297797,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653847461
    },
    {
        "content": "<p>Hmm, so the proof is so slow that CI gives a deterministic timeout even though it works locally for me. I tried <code>squeeze_simp</code> but my computer start lagging before <code>squeeze_simp</code> succeed... Does <code>squeeze_simp</code> work for anyone else?</p>",
        "id": 284301525,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653852540
    },
    {
        "content": "<p><code>squeeze_simp</code> can be quite slow as it basically just tries simp over and over again to do the squeezing, you might be able to adjust the timeout locally (see <a href=\"https://leanprover-community.github.io/tips_and_tricks.html#memory-and-deterministic-timeout\">https://leanprover-community.github.io/tips_and_tricks.html#memory-and-deterministic-timeout</a>) then wait a few minutes for squeeze simp and get a version that works on CI</p>",
        "id": 284301681,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653852829
    },
    {
        "content": "<p>Or try <code>simp?</code> rather than <code>squeeze_simp</code> - it's a little less reliable, but tends to be faster</p>",
        "id": 284301942,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653853232
    },
    {
        "content": "<p><code>simp?</code> worked but even after changing to <code>simp_only</code> it takes almost 2 minutes to compile and CI fails with deterministic timeout.</p>",
        "id": 284302813,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653854550
    },
    {
        "content": "<p>What did <code>simp?</code> suggest? Is there anything you can pull out of the <code>simp_only</code> to use directly in, for example, a <code>rw</code> or <code>refine</code>?</p>",
        "id": 284308513,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1653862948
    },
    {
        "content": "<p>Even this is very slow (with or without <code>noncomputable!</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dual_tensor_iso_lin_hom</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fdRep.of</span> <span class=\"n\">ρV.dual</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">fdRep.of</span> <span class=\"n\">ρW</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">fdRep.of</span> <span class=\"o\">(</span><span class=\"n\">lin_hom</span> <span class=\"n\">ρV</span> <span class=\"n\">ρW</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284308728,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653863342
    },
    {
        "content": "<p>It takes a bit more than 11 seconds for me.</p>",
        "id": 284308740,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653863378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Extremely.20slow.20simp/near/284308728\">said</a>:</p>\n<blockquote>\n<p>Even this is very slow (with or without <code>noncomputable!</code>):</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dual_tensor_iso_lin_hom</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fdRep.of</span> <span class=\"n\">ρV.dual</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">fdRep.of</span> <span class=\"n\">ρW</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">fdRep.of</span> <span class=\"o\">(</span><span class=\"n\">lin_hom</span> <span class=\"n\">ρV</span> <span class=\"n\">ρW</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Indeed that's pretty weird. I wonder what takes so much time.</p>",
        "id": 284308946,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653863707
    },
    {
        "content": "<p>And changing the <code>simp only</code> to a bunch of rewrites won't be enough for CI, since just the following gives a deterministic timeout with a time limit of 100 000.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dual_tensor_iso_lin_hom</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fdRep.of</span> <span class=\"n\">ρV.dual</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">fdRep.of</span> <span class=\"n\">ρW</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">fdRep.of</span> <span class=\"o\">(</span><span class=\"n\">lin_hom</span> <span class=\"n\">ρV</span> <span class=\"n\">ρW</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Action.mk_iso</span> <span class=\"o\">(</span><span class=\"n\">dual_tensor_hom_equiv</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_FinVect_iso</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284312893,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653870143
    },
    {
        "content": "<p>On my (admittedly rather old) computer this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">representation_theory.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">representation_theory.fdRep</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">representation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ρV</span> <span class=\"o\">:</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ρW</span> <span class=\"o\">:</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">fdRep.of</span> <span class=\"n\">ρV.dual</span> <span class=\"bp\">=</span> <span class=\"n\">fdRep.of</span> <span class=\"n\">ρV.dual</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>takes 33 seconds, but then the profiler can't account for that time:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">parsing</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">341</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">of</span> <span class=\"n\">test1</span> <span class=\"n\">took</span> <span class=\"mi\">26</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n<span class=\"n\">decl</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">processing</span> <span class=\"n\">of</span> <span class=\"n\">test1</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0402</span><span class=\"n\">ms</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">of</span> <span class=\"n\">test1</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">587</span><span class=\"n\">ms</span>\n</code></pre></div>",
        "id": 284346106,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1653904345
    },
    {
        "content": "<p>For comparison, this takes 20 seconds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">fdRep.of</span> <span class=\"n\">ρV.dual</span> <span class=\"bp\">=</span> <span class=\"n\">fdRep.of</span> <span class=\"n\">ρV</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>while this is immediate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test3</span> <span class=\"o\">:</span> <span class=\"n\">ρV.dual</span> <span class=\"bp\">=</span> <span class=\"n\">ρV.dual</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and this takes 7 seconds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test4</span> <span class=\"o\">:</span> <span class=\"n\">fdRep.of</span> <span class=\"n\">ρV</span> <span class=\"bp\">=</span> <span class=\"n\">fdRep.of</span> <span class=\"n\">ρV</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 284347704,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1653905256
    },
    {
        "content": "<p>and just this takes 15 seconds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">fdRep.of</span> <span class=\"n\">ρV.dual</span>\n</code></pre></div>",
        "id": 284348585,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1653905794
    },
    {
        "content": "<p>Something to do with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fdRep.of\">docs#fdRep.of</a>, then?</p>",
        "id": 284348661,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653905850
    },
    {
        "content": "<p>What happens if you put <code>noncomputable!</code> in front of the lemmas?</p>",
        "id": 284348789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653905944
    },
    {
        "content": "<p><code>#check fdRep.of ρV</code> takes 3 seconds</p>",
        "id": 284348817,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1653905971
    },
    {
        "content": "<p>Adding <code>noncomputable!</code> hasn't changed the timings</p>",
        "id": 284349285,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1653906277
    },
    {
        "content": "<p>These are all wall-clock timings, by the way.  If I add <code>set_option profiler true</code> then the output of the profiler only adds up to a few milliseconds.</p>",
        "id": 284349610,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1653906505
    },
    {
        "content": "<p>You can probably assume that the time missing from the profiler is spent on type checking: see <a href=\"https://github.com/leanprover-community/lean/issues/58\">https://github.com/leanprover-community/lean/issues/58</a></p>",
        "id": 284350513,
        "sender_full_name": "Ben Toner",
        "timestamp": 1653907155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/113488-general/topic/Extremely.20slow.20simp/near/284346106\">said</a>:</p>\n<blockquote>\n<p>On my (admittedly rather old) computer this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">representation_theory.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">representation_theory.fdRep</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">representation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ρV</span> <span class=\"o\">:</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ρW</span> <span class=\"o\">:</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">fdRep.of</span> <span class=\"n\">ρV.dual</span> <span class=\"bp\">=</span> <span class=\"n\">fdRep.of</span> <span class=\"n\">ρV.dual</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>takes 33 seconds, but then the profiler can't account for that time:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">parsing</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">341</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">of</span> <span class=\"n\">test1</span> <span class=\"n\">took</span> <span class=\"mi\">26</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n<span class=\"n\">decl</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">processing</span> <span class=\"n\">of</span> <span class=\"n\">test1</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0402</span><span class=\"n\">ms</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">of</span> <span class=\"n\">test1</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">587</span><span class=\"n\">ms</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Note that we get equally slow results with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Rep.of\">docs#Rep.of</a> instead of <code>fdRep.of</code>, so it's not a problem with the finite dimensionality instance. So the thing that takes a lot of time must be the conversion of <code>ρ : G →* (V →ₗ[k] V)</code> to <code>ρ :  G ⟶ Mon.of (category_theory.End (Module.of V))</code> in the definition of <code>Rep.of</code>, especially when <code>ρ</code> is defined as <code>representation.dual</code>. Is there a modification of the definition of <code>Rep.of</code> that would make this faster?</p>",
        "id": 284643304,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1654104398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329754\">Antoine Labelle</span> <a href=\"#narrow/stream/113488-general/topic/Extremely.20slow.20simp/near/284643304\">said</a>:</p>\n<blockquote>\n<p>Note that we get equally slow results with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Rep.of\">docs#Rep.of</a> instead of <code>fdRep.of</code></p>\n</blockquote>\n<p>As another data point, this takes 13 seconds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Rep.of</span> <span class=\"n\">ρV.dual</span>\n</code></pre></div>",
        "id": 284646997,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1654106157
    },
    {
        "content": "<p>It took some time, but I think I finally found the culprit here: it seems to be the coercion from <code>representation k G</code> to <code>G →* (V →ₗ[k] V)</code>. Indeed, the following is immediate</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">representation.to_monoid_hom</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ρV</span>\n<span class=\"k\">#check</span> <span class=\"n\">Rep.of</span> <span class=\"n\">ρV.dual.to_monoid_hom</span>\n</code></pre></div>\n<p>whereas without <code>to_monoid_hom</code> it takes 13 seconds as mentioned by Stuart.</p>",
        "id": 285041667,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1654443234
    },
    {
        "content": "<p>This makes me wonder if the definition of <code>representation</code> is ok. It is currently defined as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">representation</span> <span class=\"o\">:=</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I don't know much about how <code>abbreviation</code> works, is it the same as <code>def</code> or does it have a different behavior?</p>",
        "id": 285041914,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1654443512
    },
    {
        "content": "<p>If we keep <code>representation</code> as it is, we have two options. Either we change the argument of <code>Rep.of</code> to be of type <code>representation k G</code> instead of <code>G →* (V →ₗ[k] V)</code>, or we don't touch <code>Rep.of</code> but we put <code>to_monoid_hom</code> everytime we want use <code>Rep.of</code> on something of type <code>representation k G</code>. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> maybe you have an opinion on that since you're the author of <code>Rep</code>?</p>",
        "id": 285042257,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1654443945
    },
    {
        "content": "<p>(One issue with the first option is that it requires <code>representation_theory.Rep</code> to import <code>representation_theory.basic</code> whereas in <a href=\"https://github.com/leanprover-community/mathlib/pull/14453\">#14453</a> I have the opposite import.)</p>",
        "id": 285042332,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1654444055
    },
    {
        "content": "<p><code>abbreviation</code> is pretty much <code>@[reducible, inline] def</code> (though unlike <code>def</code> it doesn't generate equation lemmas, which impacts how you unfold it.)</p>",
        "id": 285042601,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654444370
    },
    {
        "content": "<p>The presence of <code>V</code> twice in that abbreviation is worrisome to me. There's a chance it's causing exponential behavior since <code>reducible</code> means Lean is happy to unfold it when doing typeclass inference.</p>",
        "id": 285042689,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654444485
    },
    {
        "content": "<p><code>inline</code> only has an effect on VM compilation and the noncomputability checker, but still it doesn't strike me as being a good idea to inline code that refers to variables more than once.</p>",
        "id": 285042756,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654444562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Do you think that <code>representation</code> should be a <code>def</code> and not an <code>abbreviation</code> in this case? <br>\nAlso the problem is really due to presence of <code>V</code> twice, wouldn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End\">docs#module.End</a> have the same problems? Has anyone noticed any issue with <code>module.End</code>?</p>",
        "id": 285325050,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1654642864
    },
    {
        "content": "<p>Surely <code>V</code> appearing twice is not quite the criterion, else we would have had troubles ages ago with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm\">docs#equiv.perm</a>.</p>",
        "id": 285349680,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654669209
    },
    {
        "content": "<p>I've had problems with module.End and <code>@[simps]</code> before</p>",
        "id": 285381158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654690299
    }
]