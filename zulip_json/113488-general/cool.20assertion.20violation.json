[
    {
        "content": "<p>My favourite assertion violation -- the only bug I ever really see in Lean nowadays in fact -- is the <code>'unreachable' code was reached</code> bug which we occasionally get when making structures. A typical situation is this: I want to make an instance of some fancy algebraic structure, put <code>def foo (G V R) : perfectoid_algebra := {! !}</code>, click on the lightbulb and then \"generate a skeleton for the structure under construction\", fill in the first field and <em>bam</em>, unreachable code was reached.</p>\n<p>My usual workaround: switch VS Code from \"checking visible files\" to \"checking nothing\", fill in all the remaining underscores as best I can (e.g. <code>sorry</code> is fine, but the more fields I can fill in the better), and then turn Lean back on and we're usually back up and running, the violation has gone and I can fill in the remaining fields and muddle on.</p>\n<p>I found it hard to reproduce these errors at first. Often restarting Lean would fix the problem. But I managed to catch a reliable one and opened an issue <a href=\"https://github.com/leanprover-community/lean/issues/123\" title=\"https://github.com/leanprover-community/lean/issues/123\">lean#123</a>, just so we had a record of this.</p>\n<p>A few days ago, Scott found another one  -- in some non-master branch of mathlib -- and added it to the issue. But this one was worse than mine. Scott had filled in all the underscores of the structure with <code>sorry</code> and the assertion violation was still there. This is now a more serious problem, because filling in those sorrys is going to be nigh-on impossible. Thanks to <code>leanproject</code> and the azure oleans <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> it was easy for me to reproduce Scott's error. I decided to make the effort to minimise, and now I have a version with no mathlib imports at all (below).</p>\n<p>It is pretty weird. The innocent-looking change from <code>x • y • b</code> to <code>y • b</code> in <code>distrib_mul_action'</code> changes the error completely and stops the violation. </p>\n<p>I have no idea how easy it is to continue from here, I feel like I've gone as far as I can go. The key ingredients seem to be the structure, the coercion to sort, and the fact that the instance foo seems to need to produce a term of type <code>Ring</code> from nowhere. Changing <code>x • y • b</code> to <code>y • b</code> gives a more expected error.</p>\n<p>Can I tempt anyone to look further?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- notation typeclass not in core.  -/</span>\n<span class=\"n\">class</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"err\">•</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar</span><span class=\"bp\">.</span><span class=\"n\">smul</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">Ring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">Ring</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">unit</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">}</span>\n\n<span class=\"n\">class</span> <span class=\"n\">distrib_mul_action&#39;</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_scalar</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">y</span> <span class=\"err\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- note that changing x • y • b to y • b fixes the violation</span>\n                                               <span class=\"c1\">-- and instead we get a different error.</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">finsupp&#39;</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>             <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mas</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finsupp&#39;</span> <span class=\"err\">↥</span><span class=\"n\">R</span>  <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">distrib_mul_action&#39;</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mas</span> <span class=\"o\">())</span> <span class=\"err\">•</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"c1\">-- note that changing () to 37 also causes an assertion violation</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">g&#39;</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>[edit: remove superfluous has_mul G]</p>",
        "id": 194431048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587126121
    },
    {
        "content": "<p>PS <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> this minimisation revealed how to fix the assertion violation you found in <a href=\"https://github.com/leanprover-community/lean/issues/123\" title=\"https://github.com/leanprover-community/lean/issues/123\">lean#123</a>: you have a <code>mas g 1</code> which needs to be <code>mas g (1 : R)</code> -- Lean cannot figure out that the CommRing you want is R otherwise. One would expect an error about being unable to synthesize a <code>CommRing</code> but you get the assertion violation instead.</p>",
        "id": 194432452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587126888
    },
    {
        "content": "<p><code>smul</code> isn't a field of <code>distrib_mul_action'</code></p>",
        "id": 194432753,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587127050
    },
    {
        "content": "<p>It extends has_scalar. Did I screw up?</p>",
        "id": 194432803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587127082
    },
    {
        "content": "<p>new structure command</p>",
        "id": 194432904,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587127112
    },
    {
        "content": "<p>So, <code>to_has_scalar</code> is a field</p>",
        "id": 194432924,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587127122
    },
    {
        "content": "<p>After removing the assertion I get the following error, is this what you expected:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">kevinbug</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">34</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"err\">⊢</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Ring</span>\n</pre></div>",
        "id": 194432932,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1587127127
    },
    {
        "content": "<p>Right -- Lean is supposed to be magically coming up with a term of type <code>Ring</code> so <code>mas ()</code> makes sense.</p>",
        "id": 194433061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587127191
    },
    {
        "content": "<p>If I am not even supposed to be supplying a <code>smul</code> field -- perhaps Lean is trying to interpret <code>λ g v, (mas ()) • v</code> before it even decides what to do with it.</p>",
        "id": 194433239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587127279
    },
    {
        "content": "<p>Actually I think this notation works with the new structure command as well. If I type <code>begin end</code> it expects the right type.</p>",
        "id": 194433436,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587127352
    },
    {
        "content": "<p>The code I posted above does not really typecheck at all. I think Scott was in a situation where more has_scalar instances were defined. As I mentioned, you can change () to 37 and you still get the violation, and the type of mas forces 37 : unit which isn't OK because unit doesn't have a 1.</p>",
        "id": 194434719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587127987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> what's the error after the assertion is removed in the other code in the issue:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">def</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">B</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Or do you need me to remove the mathlib import? Here is looks like everything is specified. If I could understand a bit better what is causing the violation, it might make it easier to work around.</p>",
        "id": 194437900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587129371
    },
    {
        "content": "<p>Please try to remove the mathlib imports.</p>",
        "id": 194440141,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1587130285
    },
    {
        "content": "<p>Now you see it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">def</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">alg_hom</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>...now you don't:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">def</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">alg_hom</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Change is <code>{B : Type*}</code> -&gt; <code>{B : Type}</code></p>",
        "id": 194441174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587130753
    },
    {
        "content": "<p>yeah there's some issue with <code>Type*</code> so one is recommended to use <code>Type u</code></p>",
        "id": 194441250,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587130797
    },
    {
        "content": "<p><code>Type u</code> you don't see it either. This one is caused by <code>Type*</code>. You see assertion violations with <code>Type*</code> Kenny?</p>",
        "id": 194441464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587130870
    },
    {
        "content": "<p>rofl, <code>set_option old_structure_cmd true</code> makes it go away, even though no structures are being defined</p>",
        "id": 194441788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587131027
    },
    {
        "content": "<p>no, I see over-elaboration with <code>Type*</code></p>",
        "id": 194441791,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587131031
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_scalar&#39;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"err\">•</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar&#39;</span><span class=\"bp\">.</span><span class=\"n\">smul</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">ring_hom&#39;</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_one&#39;</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_zero&#39;</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_add&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">ring_hom&#39;</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ring_hom&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">class</span> <span class=\"n\">algebra&#39;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">has_scalar&#39;</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">ring_hom&#39;</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">commutes&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul_def&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">algebra_map&#39;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra&#39;</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom&#39;</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">algebra&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_ring_hom&#39;</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">alg_hom&#39;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra&#39;</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra&#39;</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">ring_hom&#39;</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">commutes&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">algebra_map&#39;</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">algebra_map&#39;</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">algebra&#39;</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra&#39;</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">alg_hom&#39;</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra&#39;</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra&#39;</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra&#39;</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom&#39;</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom&#39;</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">alg_hom&#39;</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 194446176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587132906
    },
    {
        "content": "<p>Mathlib-free.</p>",
        "id": 194448102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587133672
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> for the <a href=\"https://github.com/leanprover-community/lean/commit/8e8f519145d100247bfb712611ceb3fcb93cb7c9\" title=\"https://github.com/leanprover-community/lean/commit/8e8f519145d100247bfb712611ceb3fcb93cb7c9\">hack</a> removing line 3174 completely! We can now see that Scott's problem was caused by Lean failing to synthesize a ring (which is correct behaviour -- Scott should explicitly say which ring he's using) and mine was caused by the Lean authors apparently incorrectly assuming that two types should be synthetically equal at some point, whereas there is still an <code>{ a := x, b := y}.a</code> which hasn't become <code>x</code> yet (this would explain why we only ever saw the assertion violation when defining structures).</p>",
        "id": 194545113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587217134
    }
]