[
    {
        "content": "<p>What's the policy on using <code>tidy</code> in proofs in mathlib?  Several people have indicated that it's intended as a \"get the job done\" tactic that you should then replace before PRing.  But a quick search turns up 637 instances of <code>tidy</code> in 165 files in mathlib (excluding the folders <code>archive</code>, <code>scripts</code>, <code>tactic</code>, and <code>test</code>). So would it be worthwhile to start working through these and replacing them with more explicit proofs, as I've been doing with <code>finish</code>?  Or is there a plan to automate them away in the port to Lean 4?</p>",
        "id": 266414378,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640855951
    },
    {
        "content": "<p>There will be plenty more occurrences of <code>tidy</code> because it's invoked as an autoparam via <code>obviously</code> in the category theory part of mathlib</p>",
        "id": 266414704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640856291
    },
    {
        "content": "<p>Ah yes, another 166 results after filtering out some comments</p>",
        "id": 266414928,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640856544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span> there are several things to consider:</p>\n<ol>\n<li>Stability. If the behaviour of a tactic can change due to \"independent\" contributions to mathlib, then it can be a maintenance hazard. Because someone adds a lemma in file <code>X.lean</code> suddenly a proof in <code>Y.lean</code> breaks. And the poor person that modified <code>X.lean</code> has no idea how to fix the broken proof.<br>\nThe main example of this is <code>simp</code>. By changing the set of <code>simp</code>-lemmas (e.g., by adding some) the behaviour of <code>simp</code> can change. For this reason, <code>simp</code> is only allowed as \"finishing\" tactic. And non-terminal <code>simp</code> calls must be of the special shape <code>simp only [lemma1, lemma2]</code>, which explicitly list the lemmas that <code>simp</code> can use. In other words, <code>simp only</code> is again deterministic, and therefore much more stable.</li>\n</ol>\n<p>Since <code>tidy</code> calls <code>simp</code> under the hood, using <code>tidy</code> in a non-finishing manner is dangerous.</p>\n<ol start=\"2\">\n<li>Speed. Since mathlib is large, and used by many people, we want it to be reasonably fast. This is another reason why <code>simp</code>s are often squeezed into <code>simp only</code>s. It often shaves of seconds of a proof, and these seconds add up to shaving many minutes if not hours off the total mathlib compile time.</li>\n</ol>\n<p>For the same reason, <code>tidy</code> is often replaced by the output of <code>tidy?</code>, to speed up proofs by \"caching\" (in this case, inlining) the result that <code>tidy</code> found.</p>",
        "id": 266415241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640856843
    },
    {
        "content": "<p>From a cursory skim through the search results I'm only seeing <code>tidy</code> in terminal position, so I guess the speed issue is the more salient one here.</p>",
        "id": 266415454,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640857078
    },
    {
        "content": "<p>Right, because (1) is a hard rule. We don't want non-terminal <code>simp</code> or <code>tidy</code> in mathlib <em>at all</em>. But (2) is a balancing act. There is no rule against terminal <code>simp</code> or <code>tidy</code>.</p>",
        "id": 266415539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640857147
    },
    {
        "content": "<p>The compile-speed has to be balanced against brevity and \"development speed\".</p>",
        "id": 266415554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640857173
    },
    {
        "content": "<p>After all, I value human-time over computer-time. Which means the factor is &gt; 1. But it isn't infinite (-;</p>",
        "id": 266415625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640857225
    },
    {
        "content": "<p>Right, it wouldn't be worth sinking weeks of work into shaving off a few nanoseconds of compile time.  Are there places where the use of <code>tidy</code> is causing a particular slowdown, where replacing it would be worthwhile?  Is there some kind of profiling tool that could be used to find the slow instances?</p>",
        "id": 266416039,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640857670
    },
    {
        "content": "<p>Do you know about <code>set_option profiler true</code>?</p>",
        "id": 266416207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640857837
    },
    {
        "content": "<p>I don't think we have other tools to find slow proofs.</p>",
        "id": 266416218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640857851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span> ooh, and there are the links posted in the <a class=\"stream\" data-stream-id=\"113538\" href=\"/#narrow/stream/113538-CI\">#CI</a> stream, such as <a href=\"https://mathlib-bench.limperg.de/commit/e003d6e278e4cbb0bf9c0abad75b1d04794bf08a\">https://mathlib-bench.limperg.de/commit/e003d6e278e4cbb0bf9c0abad75b1d04794bf08a</a></p>",
        "id": 266416247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640857904
    },
    {
        "content": "<p>Oh, I didn't, thanks!</p>",
        "id": 266416261,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640857917
    },
    {
        "content": "<p>That contains timing data for full mathlib builds.</p>",
        "id": 266416262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640857918
    },
    {
        "content": "<p>So you might want to mine that. I've never looked at it in a systematic way; there might be some \"gems\" there.</p>",
        "id": 266416316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640857947
    },
    {
        "content": "<p>I'd like to see not just the slowest 10% of files highlighted but the actual order, ie which is the slowest etc</p>",
        "id": 266421872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640863861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/.60tidy.60.20in.20mathlib.20proofs/near/266421872\">said</a>:</p>\n<blockquote>\n<p>I'd like to see not just the slowest 10% of files highlighted but the actual order, ie which is the slowest etc</p>\n</blockquote>\n<p>Here, you can load this up on LibreCalc or something: <a href=\"/user_uploads/3121/S--6zBJW3s6dgUC8Nr1Td2tg/ordered.csv\">ordered.csv</a></p>",
        "id": 266422774,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640864899
    },
    {
        "content": "<p>Would be nice if we had the file size easily on that data so we could order by <code>timings/file_size</code> instead</p>",
        "id": 266423363,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640865609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/.60tidy.60.20in.20mathlib.20proofs/near/266416247\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> ooh, and there are the links posted in the <a class=\"stream\" data-stream-id=\"113538\" href=\"/#narrow/stream/113538-CI\">#CI</a> stream, such as <a href=\"https://mathlib-bench.limperg.de/commit/e003d6e278e4cbb0bf9c0abad75b1d04794bf08a\">https://mathlib-bench.limperg.de/commit/e003d6e278e4cbb0bf9c0abad75b1d04794bf08a</a></p>\n</blockquote>\n<p>How is this data being generated?</p>",
        "id": 269972670,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643595703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> runs the build time bot which generates that data. It looks like the Zulip thread from around when it was set up is <a href=\"#narrow/stream/113488-general/topic/Preview.20of.20new.20build.20time.20benchmark/near/215115739\">here</a>.</p>",
        "id": 269972917,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1643595999
    },
    {
        "content": "<p>I'm wondering if it would be too troublesome to add file sizes on that table</p>",
        "id": 269973097,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643596250
    },
    {
        "content": "<p>Not very. Ping me if I haven't done it until next week.</p>",
        "id": 270017610,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643629178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> is the code on GitHub? I can open a PR (I didn't intend to bother you)</p>",
        "id": 270017928,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643629329
    },
    {
        "content": "<p>Code is here: <a href=\"https://github.com/JLimperg/mathlib-bench\">https://github.com/JLimperg/mathlib-bench</a></p>\n<p>But the change is not entirely trivial (it requires a DB schema change) and the program is a little bit overengineered in general (ahem), so it's probably more efficient if I do it.</p>",
        "id": 270018975,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643629876
    },
    {
        "content": "<p>Ah, okay<br>\nJust to explain the motivation: file A being 5 times slower to build than file B doesn't mean much if it's also 5 times bigger. So I was thinking about adding two extra columns: <code>n_lines</code> and <code>time_by_line</code> and ordering by <code>time_by_line</code> in descending order. So we could flag files that take long to build despite not being so big</p>",
        "id": 270020610,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643630785
    },
    {
        "content": "<p>Maybe number of declarations in the file would be another useful column for that purpose (even a rough guess-timate of count of <code>def</code> <code>theorem</code> and <code>lemma</code> strings (maybe surrounded by regex <code>\\b</code>s))</p>",
        "id": 270021495,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643631329
    },
    {
        "content": "<p>You want to count slocs (without blank lines), not locs then.</p>",
        "id": 270024274,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643632782
    },
    {
        "content": "<p>I didn't want to increase the scope of this task too much. The number of lines can serve as a first proxy and when Jannis make the change in the DB scheme we can jump in and polish it as we like (removing empty lines, docstrings etc)</p>",
        "id": 270025516,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643633421
    },
    {
        "content": "<p>The <code>cloc</code> command already has Lean support, so nothing to do here for Jannis :)</p>",
        "id": 270030221,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643635604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113488-general/topic/.60tidy.60.20in.20mathlib.20proofs/near/270017610\">said</a>:</p>\n<blockquote>\n<p>Not very. Ping me if I haven't done it until next week.</p>\n</blockquote>\n<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> just because you asked me to <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 271367106,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644451607
    },
    {
        "content": "<p>Thanks! I was just looking for this topic to announce that it's done, so the ping was very helpful. ;)</p>\n<p><a href=\"https://mathlib-bench.limperg.de/commit/352e06424adc5b5de32cff69c12e3acddfc192c1\">https://mathlib-bench.limperg.de/commit/352e06424adc5b5de32cff69c12e3acddfc192c1</a></p>\n<p>Leading the list are a bunch of <code>default.lean</code> files which have very few LOC but high startup overhead. I should maybe filter these.</p>",
        "id": 271407135,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1644486210
    },
    {
        "content": "<p>Looks like the real winner is <code>category_theory/linear/yoneda.lean</code>!</p>",
        "id": 271407597,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644486502
    },
    {
        "content": "<p>And for non-category theory, <code>analysis/calculus/extend_deriv.lean</code></p>",
        "id": 271407690,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644486579
    },
    {
        "content": "<p>Thanks!! This is really nice.<br>\nA possibility for those files that just have overhead is to force them to rank bad in the queue. But this is already cool!</p>",
        "id": 271422084,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644494951
    },
    {
        "content": "<p>Could the last column be changed to <code>ms/LOC</code> so it's easier to see the range (currently from ~1ms to ~5000ms)?</p>",
        "id": 271434392,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644501574
    },
    {
        "content": "<p>I'm going to take a look at <a href=\"https://github.com/JLimperg/mathlib-bench\">https://github.com/JLimperg/mathlib-bench</a> later today</p>",
        "id": 271434875,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644501757
    },
    {
        "content": "<p>If you don't mind another (very unimportant) wishlist item: is there an easy way to add a link to the relevant docs page for each file?</p>",
        "id": 271435610,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644502091
    },
    {
        "content": "<p>Linking to the source on github for the specified commit would probably be useful to</p>",
        "id": 271435756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644502160
    },
    {
        "content": "<p>Although the json is all available on the website anyway, so you can always just make your own viewer that consumes it, like Bryan did.</p>",
        "id": 271436156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644502339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/.60tidy.60.20in.20mathlib.20proofs/near/271407597\">said</a>:</p>\n<blockquote>\n<p>Looks like the real winner is <code>category_theory/linear/yoneda.lean</code>!</p>\n</blockquote>\n<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">linear_yoneda</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">Module.of</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n    <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span> <span class=\"n\">Y'</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">linear.left_comp</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">f.unop</span><span class=\"o\">,</span>\n    <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">category.assoc</span><span class=\"o\">]</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">category.id_comp</span><span class=\"o\">]</span> <span class=\"kd\">end</span> <span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">X'</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">linear.right_comp</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>cuts down compile time from 7 seconds to 3.5 on my computer (supplying proofs of the last <code>map_id'</code> and <code>map_comp'</code> instead of getting <code>tidy</code> to prove them). It will make Scott sad though (he once coherently argued to me that the whole point was to get the computer to do the boring parts)</p>",
        "id": 271474418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644518032
    },
    {
        "content": "<p>But it also gets boring to wait for the computer to do the same boring work over and over <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 271474865,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644518237
    },
    {
        "content": "<p>What the heck? <code>tidy</code> just made a 10 line proof of a lemma I had no idea how to prove. How did I miss this awesome tactic for the past year?</p>",
        "id": 271511325,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1644536683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/.60tidy.60.20in.20mathlib.20proofs/near/271474865\">said</a>:</p>\n<blockquote>\n<p>But it also gets boring to wait for the computer to do the same boring work over and over <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>Seems like you can do <code>tidy?</code> to see what tidy finds and substitute it so you don't have to wait.</p>",
        "id": 271511389,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1644536748
    },
    {
        "content": "<p>Yeah, that's what I did on a PR. But some proofs got longer (even after some golfing)</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11746\">#11746</a> (not merged)</p>",
        "id": 271511554,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644536864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/.60tidy.60.20in.20mathlib.20proofs/near/271474418\">said</a>:</p>\n<blockquote>\n<p>This [...] cuts down compile time from 7 seconds to 3.5 on my computer (supplying proofs of the last <code>map_id'</code> and <code>map_comp'</code> instead of getting <code>tidy</code> to prove them).</p>\n</blockquote>\n<p>I've just PRed this (with credit to you, of course) in <a href=\"https://github.com/leanprover-community/mathlib/pull/11979\">#11979</a>, and similarly removed some uses of <code>obvious</code> in <code>category_theory/monad/equiv_mon</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/11980\">#11980</a>.  It'll be interesting to see how much difference this makes to the stats.</p>",
        "id": 271599226,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644596185
    },
    {
        "content": "<p>I don't think the difference will be noticeable given the variance of the build time</p>",
        "id": 271599884,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644596490
    },
    {
        "content": "<p>What's the point in removing <code>tidy</code> exactly?</p>",
        "id": 271599914,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644596505
    },
    {
        "content": "<p>I understand that it can be slow, but unless something breaks with timeouts (like what happened with the Cech nerve a little while ago), I'm inclined to keep the automatic proofs in place.</p>",
        "id": 271600032,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644596558
    },
    {
        "content": "<p>In either case it's good to record that tidy generated or can generate the proof as a comment. So if the proof breaks it's easy to fix by re-tidying and to remind people that some of these proofs aren't really intended to be hand written</p>",
        "id": 271600360,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644596720
    },
    {
        "content": "<p>If the goal is to eventually move to lean 4, where tactics like this should be much faster, then why would we do this? Will you replace the non-automatic proofs with the automatic ones once the port to lean4 happens?</p>",
        "id": 271600389,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644596733
    },
    {
        "content": "<p><del>Just something to chew, but keeping automatic proofs in code may make their development harder because one can't reason on trade-offs of the kind \"this PR makes &lt;auto-tactic&gt; prove 5 times the number of proofs it was able to in half of the time it used to, but some few cases are no longer provable by it\"</del> (Unless the improvement PR also replaces the proofs it wasn't able to prove with something that works)</p>",
        "id": 271600759,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644596903
    },
    {
        "content": "<p>I feel like most <code>tidy</code>able goals can be done with <code>ext, dsimp, simp</code>. Should we replace <code>obviously</code> with <code>by { ext, dsimp, simp } &lt;|&gt; old_obviously</code>?</p>",
        "id": 271600765,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644596907
    },
    {
        "content": "<p>The aim here was just to try to speed up two of the slowest files (in ms/LOC) and to see how much time can be shaved off.  Searching for <code>obviously</code> throughout mathlib turns up lots of comments like \"Relying on <code>obviously</code> to fill out these proofs is very slow :(\", so it seemed worth trying.</p>\n<p>The explicit proofs are generally of the form <code>ext, simp</code> or <code>intros, refl</code>, so nothing particularly clever or fragile.</p>",
        "id": 271601877,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644597421
    },
    {
        "content": "<p>What I'm saying is that the solution should not be to remove the automation, but rather to <em>improve</em> the automation.</p>",
        "id": 271602055,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644597486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/.60tidy.60.20in.20mathlib.20proofs/near/271600765\">said</a>:</p>\n<blockquote>\n<p>I feel like most <code>tidy</code>able goals can be done with <code>ext, dsimp, simp</code>. Should we replace <code>obviously</code> with <code>by { ext, dsimp, simp } &lt;|&gt; old_obviously</code>?</p>\n</blockquote>\n<p>Implementation detail: the last <code>simp</code> might fail if <code>dsimp</code> closes the goal, forcing it to try <code>old_obviously</code> unnecessarily</p>",
        "id": 271602382,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644597629
    },
    {
        "content": "<p>Certainly, much nicer to have obvious things proved without even having to mention them.</p>",
        "id": 271602407,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644597638
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">hacky_obviously</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">},</span> <span class=\"n\">done</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">dsimp</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span> <span class=\"n\">done</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">dsimp</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span> <span class=\"n\">done</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">dsimp</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span> <span class=\"n\">done</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">dsimp</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span> <span class=\"n\">done</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">obviously'</span>\n</code></pre></div>",
        "id": 271602577,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644597715
    },
    {
        "content": "<p>Maybe with a few additional <code>refl</code>s?</p>",
        "id": 271603070,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644597923
    },
    {
        "content": "<p>Do we understand what is going on in examples where <code>tidy</code> is slow but these other suggestions are fast?</p>",
        "id": 271603576,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644598144
    },
    {
        "content": "<p>(e.g. trying <code>refl</code> that fails might be slow?)</p>",
        "id": 271603634,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644598174
    },
    {
        "content": "<p>A simple idea is just to run <code>tidy</code> itself but at reducible transparency level</p>",
        "id": 271603674,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644598191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/.60tidy.60.20in.20mathlib.20proofs/near/271422084\">said</a>:</p>\n<blockquote>\n<p>Thanks!! This is really nice.<br>\nA possibility for those files that just have overhead is to force them to rank bad in the queue. But this is already cool!</p>\n<p>Another possibility is to subtract some empirical overhead (apparently ~3s) from the numerator, capping at zero, before dividing by <code>LOC</code> (this is probably easier to implement)</p>\n</blockquote>\n<p>I did a simple linear regression on that data</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">model</span> <span class=\"bp\">=</span> <span class=\"n\">LinearRegression</span><span class=\"o\">()</span><span class=\"bp\">.</span><span class=\"n\">fit</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">[[</span><span class=\"s2\">\"loc\"</span><span class=\"o\">]],</span> <span class=\"n\">data</span><span class=\"o\">[</span><span class=\"s2\">\"time\"</span><span class=\"o\">])</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">model.coef_</span>\n<span class=\"n\">array</span><span class=\"o\">([</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">03309283</span><span class=\"o\">])</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">model.intercept_</span>\n<span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">108744359416694</span>\n</code></pre></div>\n<p>After subtracting the timings by 4.11, redoing the ratio and reordering, these are the new top 30 files:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">data</span><span class=\"o\">[[</span><span class=\"s2\">\"time\"</span><span class=\"o\">,</span> <span class=\"s2\">\"loc\"</span><span class=\"o\">,</span> <span class=\"s2\">\"time_fixed\"</span><span class=\"o\">,</span> <span class=\"s2\">\"ratio\"</span><span class=\"o\">]]</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">(</span><span class=\"mi\">30</span><span class=\"o\">)</span>\n                                                          <span class=\"n\">time</span>  <span class=\"n\">loc</span>  <span class=\"n\">time_fixed</span>     <span class=\"n\">ratio</span>\n<span class=\"n\">number_theory</span><span class=\"bp\">/</span><span class=\"n\">padics</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>                     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">039645</span>    <span class=\"mi\">1</span>    <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">929645</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">929645</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">continuous_function</span><span class=\"bp\">/</span><span class=\"n\">locally_constant.lean</span>   <span class=\"mi\">19</span><span class=\"bp\">.</span><span class=\"mi\">322954</span>   <span class=\"mi\">28</span>   <span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">212954</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">543320</span>\n<span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">triangulated</span><span class=\"bp\">/</span><span class=\"n\">rotate.lean</span>             <span class=\"mi\">77</span><span class=\"bp\">.</span><span class=\"mi\">534261</span>  <span class=\"mi\">138</span>   <span class=\"mi\">73</span><span class=\"bp\">.</span><span class=\"mi\">424261</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">532060</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">homology</span><span class=\"bp\">/</span><span class=\"n\">flip.lean</span>                           <span class=\"mi\">35</span><span class=\"bp\">.</span><span class=\"mi\">378277</span>   <span class=\"mi\">60</span>   <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"mi\">268277</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">521138</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">extend_deriv.lean</span>                  <span class=\"mi\">83</span><span class=\"bp\">.</span><span class=\"mi\">843026</span>  <span class=\"mi\">158</span>   <span class=\"mi\">79</span><span class=\"bp\">.</span><span class=\"mi\">733026</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">504639</span>\n<span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">linear</span><span class=\"bp\">/</span><span class=\"n\">yoneda.lean</span>                   <span class=\"mi\">29</span><span class=\"bp\">.</span><span class=\"mi\">376513</span>   <span class=\"mi\">53</span>   <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">266513</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">476727</span>\n<span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">monoidal</span><span class=\"bp\">/</span><span class=\"n\">internal</span><span class=\"bp\">/</span><span class=\"n\">functor_categ...</span>   <span class=\"mi\">65</span><span class=\"bp\">.</span><span class=\"mi\">362993</span>  <span class=\"mi\">135</span>   <span class=\"mi\">61</span><span class=\"bp\">.</span><span class=\"mi\">252993</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">453726</span>\n<span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">monoidal</span><span class=\"bp\">/</span><span class=\"n\">internal</span><span class=\"bp\">/</span><span class=\"n\">types.lean</span>         <span class=\"mi\">34</span><span class=\"bp\">.</span><span class=\"mi\">909689</span>   <span class=\"mi\">71</span>   <span class=\"mi\">30</span><span class=\"bp\">.</span><span class=\"mi\">799689</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">433798</span>\n<span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">clifford_algebra</span><span class=\"bp\">/</span><span class=\"n\">conjugation.lean</span>     <span class=\"mi\">36</span><span class=\"bp\">.</span><span class=\"mi\">738326</span>   <span class=\"mi\">76</span>   <span class=\"mi\">32</span><span class=\"bp\">.</span><span class=\"mi\">628326</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">429320</span>\n<span class=\"n\">geometry</span><span class=\"bp\">/</span><span class=\"n\">euclidean</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>                       <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">771453</span>    <span class=\"mi\">4</span>    <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">661453</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">415363</span>\n<span class=\"n\">algebraic_geometry</span><span class=\"bp\">/</span><span class=\"n\">pullbacks.lean</span>                   <span class=\"mi\">187</span><span class=\"bp\">.</span><span class=\"mi\">383844</span>  <span class=\"mi\">455</span>  <span class=\"mi\">183</span><span class=\"bp\">.</span><span class=\"mi\">273844</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">402800</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">homology</span><span class=\"bp\">/</span><span class=\"n\">differential_object.lean</span>            <span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">252757</span>   <span class=\"mi\">99</span>   <span class=\"mi\">37</span><span class=\"bp\">.</span><span class=\"mi\">142757</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">375179</span>\n<span class=\"n\">control</span><span class=\"bp\">/</span><span class=\"n\">equiv_functor</span><span class=\"bp\">/</span><span class=\"n\">instances.lean</span>                  <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">051191</span>   <span class=\"mi\">11</span>    <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">941191</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">358290</span>\n<span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">monoidal</span><span class=\"bp\">/</span><span class=\"n\">CommMon_.lean</span>               <span class=\"mi\">40</span><span class=\"bp\">.</span><span class=\"mi\">622094</span>  <span class=\"mi\">102</span>   <span class=\"mi\">36</span><span class=\"bp\">.</span><span class=\"mi\">512094</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">357962</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">inner_product_space</span><span class=\"bp\">/</span><span class=\"n\">lax_milgram.lean</span>        <span class=\"mi\">32</span><span class=\"bp\">.</span><span class=\"mi\">601701</span>   <span class=\"mi\">81</span>   <span class=\"mi\">28</span><span class=\"bp\">.</span><span class=\"mi\">491701</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">351749</span>\n<span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">free_module</span><span class=\"bp\">/</span><span class=\"n\">strong_rank_conditio...</span>   <span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">949288</span>   <span class=\"mi\">26</span>    <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">839288</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">339973</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">lie</span><span class=\"bp\">/</span><span class=\"n\">universal_enveloping.lean</span>                <span class=\"mi\">22</span><span class=\"bp\">.</span><span class=\"mi\">128558</span>   <span class=\"mi\">54</span>   <span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">018558</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">333677</span>\n<span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">monad</span><span class=\"bp\">/</span><span class=\"n\">equiv_mon.lean</span>                 <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"mi\">273470</span>   <span class=\"mi\">82</span>   <span class=\"mi\">27</span><span class=\"bp\">.</span><span class=\"mi\">163470</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">331262</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">sheaves</span><span class=\"bp\">/</span><span class=\"n\">presheaf_of_functions.lean</span>          <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">039205</span>   <span class=\"mi\">65</span>   <span class=\"mi\">20</span><span class=\"bp\">.</span><span class=\"mi\">929205</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">321988</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">fourier.lean</span>                                <span class=\"mi\">52</span><span class=\"bp\">.</span><span class=\"mi\">368428</span>  <span class=\"mi\">150</span>   <span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">258428</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">321723</span>\n<span class=\"n\">geometry</span><span class=\"bp\">/</span><span class=\"n\">manifold</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">left_invariant_deriva...</span>   <span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">657494</span>  <span class=\"mi\">120</span>   <span class=\"mi\">37</span><span class=\"bp\">.</span><span class=\"mi\">547494</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">312896</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">inner_product_space</span><span class=\"bp\">/</span><span class=\"n\">spectrum.lean</span>           <span class=\"mi\">47</span><span class=\"bp\">.</span><span class=\"mi\">181419</span>  <span class=\"mi\">138</span>   <span class=\"mi\">43</span><span class=\"bp\">.</span><span class=\"mi\">071419</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">312112</span>\n<span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">adjunction</span><span class=\"bp\">/</span><span class=\"n\">whiskering.lean</span>           <span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">568603</span>   <span class=\"mi\">37</span>   <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">458603</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">309692</span>\n<span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">fin_category.lean</span>                    <span class=\"mi\">20</span><span class=\"bp\">.</span><span class=\"mi\">668713</span>   <span class=\"mi\">54</span>   <span class=\"mi\">16</span><span class=\"bp\">.</span><span class=\"mi\">558713</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">306643</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">lie</span><span class=\"bp\">/</span><span class=\"n\">matrix.lean</span>                              <span class=\"mi\">16</span><span class=\"bp\">.</span><span class=\"mi\">942918</span>   <span class=\"mi\">43</span>   <span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">832918</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">298440</span>\n<span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">weak_dual.lean</span>                 <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">537664</span>   <span class=\"mi\">73</span>   <span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">427664</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">293530</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">category</span><span class=\"bp\">/</span><span class=\"n\">Module</span><span class=\"bp\">/</span><span class=\"n\">abelian.lean</span>                 <span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">242939</span>   <span class=\"mi\">48</span>   <span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">132939</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">273603</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">homology</span><span class=\"bp\">/</span><span class=\"n\">additive.lean</span>                       <span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">411229</span>  <span class=\"mi\">162</span>   <span class=\"mi\">44</span><span class=\"bp\">.</span><span class=\"mi\">301229</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">273464</span>\n<span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">probability_mass_function</span><span class=\"bp\">/</span><span class=\"n\">monad....</span>   <span class=\"mi\">69</span><span class=\"bp\">.</span><span class=\"mi\">939399</span>  <span class=\"mi\">244</span>   <span class=\"mi\">65</span><span class=\"bp\">.</span><span class=\"mi\">829399</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">269793</span>\n<span class=\"n\">algebraic_topology</span><span class=\"bp\">/</span><span class=\"n\">Moore_complex.lean</span>                <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">858943</span>   <span class=\"mi\">81</span>   <span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">748943</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">268505</span>\n</code></pre></div>",
        "id": 271775225,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644799623
    },
    {
        "content": "<p><code>category_theory/monad/equiv_mon.lean                 31.273470</code><br>\nJust as a data point, the temporary changes I made to this file in <a href=\"https://github.com/leanprover-community/mathlib/pull/11980\">#11980</a> have cut its compile time down from 45s (<a href=\"https://mathlib-bench.limperg.de/commit/352e06424adc5b5de32cff69c12e3acddfc192c1\">https://mathlib-bench.limperg.de/commit/352e06424adc5b5de32cff69c12e3acddfc192c1</a>) to 31s.  So there's plenty of scope to make <code>obviously</code> do its magic more quickly.</p>\n<p>(with the caveat that compile times are quite variable from one run to the next, etc.)</p>",
        "id": 271798708,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644829117
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12031\">#12031</a> targets <code>category_theory/triangulated/rotate.lean</code> (3rd file in the list above). Compilation time dropped from ~100s to ~70s on my machine. It also removes some non-terminal <code>simp</code>s</p>",
        "id": 271826699,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644845992
    }
]