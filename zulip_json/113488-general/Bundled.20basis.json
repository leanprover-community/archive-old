[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/bundled-basis/src/linear_algebra/basis.lean\">I recently did another refactoring experiment</a>: what happens if we turn <code>{b : ι → M} (hb : is_basis R b)</code> into a bundled type <code>(b : basis ι R M)</code>?</p>\n<p>Some observations:</p>\n<ul>\n<li>The code got a bit longer overall because I proved more, smaller, lemmas. I feel that the overall complexity is lower.</li>\n<li>Many parts of the code use the <code>obtain \\&lt;b, hb\\&gt; := exists_is_basis K V</code> idiom. Even if we don't do the bundled basis refactor, we should still turn these <code>b</code> and <code>hb</code> into their own (noncomputable) definitions to save some lines.</li>\n<li>I really need to learn advanced applications of <code>simps</code>, since it should save quite a bit of trivial lemma declaration.</li>\n<li>I didn't encounter any hard-to-fix breakages: basically everything was changing <code>is_basis</code> into <code>basis</code> and some renames.</li>\n<li>With some tricks, both the coercion to a function <code>b : ι → M</code> and the coordinate function <code>b.repr : M → ι →₀ R</code> can be computable, which makes me happy as an intuitionist. (Actually the data stored in an element of <code>basis ι R M</code> is the <code>repr</code> function. This should not change the API, we still have a (now noncomputable) <code>basis.mk</code> which takes a linear independent family spanning the whole space and turns it into a basis.)</li>\n</ul>",
        "id": 233671076,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617894740
    },
    {
        "content": "<p>(This refactor has been on my TODO list ever since <a href=\"#narrow/stream/144837-PR-reviews/topic/.234949\">#4949</a>).</p>",
        "id": 233671703,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617894888
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 233672565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617895070
    },
    {
        "content": "<p>Is there any particular reason not to bundle <code>\\iota</code>?</p>",
        "id": 233674774,
        "sender_full_name": "David Wärn",
        "timestamp": 1617895803
    },
    {
        "content": "<p>Would there be any advantage to doing so?</p>",
        "id": 233674963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617895845
    },
    {
        "content": "<p>Whether to bundle the <code>ι</code> is a good question! I suspect that bundling it may cause universe trouble (what if <code>ι ; Type 2</code> and <code>K V : Type 1</code>?), and it may lead to more awkward definitions for maps \"out of\" bases. But for maps \"into\" bases, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_is_basis\">docs#exists_is_basis</a> currently, it might give cleaner results.</p>",
        "id": 233676365,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617896316
    },
    {
        "content": "<p>If you bundle <code>ι</code>, and give it a third universe level, separate from <code>M</code> and <code>R,</code>, won't that give the same universe behaviour as the unbundled definition? That is, whenever you stipulate <code>variable b : basis M R</code>, you're introducing a new universe variable, just like with <code>variables (ι : Type*) (basis ι R M)</code>. If you put the universe variable of <code>ι</code> first, you'll also be able to pin it down by saying <code>b : basis.{u} M R</code></p>",
        "id": 233709854,
        "sender_full_name": "David Wärn",
        "timestamp": 1617908367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Bundled.20basis/near/233674963\">said</a>:</p>\n<blockquote>\n<p>Would there be any advantage to doing so?</p>\n</blockquote>\n<p>I don't know (I've never done linear algebra in mathlib). But certainly \"let b be a basis\" is more concise than saying \"let <code>ι</code> be a type and let <code>b</code> be an <code>ι</code>-indexed basis\". I would say that it also aligns better with mathematical practice, but when I think about it that's probably false: usually people mention <code>ι</code> (or <code>n</code>) when they stipulate a basis</p>",
        "id": 233710362,
        "sender_full_name": "David Wärn",
        "timestamp": 1617908559
    },
    {
        "content": "<p>When people are doing finite-dimensional spaces they often have an index type but when they're doing infinite-dimensional spaces they often treat them as subsets</p>",
        "id": 233710562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617908639
    },
    {
        "content": "<p>This is because a lot of the finite-dimensional theory relies on computations with matrices but the infinite-dimensional theory is usually just doing stuff like free modules are projective</p>",
        "id": 233710779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617908721
    },
    {
        "content": "<p>But you might still say something like \"let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>e</mi><mi>i</mi></msub><msub><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\{e_i\\}_{i \\in I}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span></span></span></span> be a basis\", right?</p>",
        "id": 233711007,
        "sender_full_name": "David Wärn",
        "timestamp": 1617908808
    },
    {
        "content": "<p>Sure you can say it, but for example in the proof that bases of vector spaces exist you just consider linearly subsets ordered by inclusion and take a maximal element</p>",
        "id": 233711357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617908911
    },
    {
        "content": "<p>The index set gets in the way there</p>",
        "id": 233711382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617908921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130377\">David Wärn</span> <a href=\"#narrow/stream/113488-general/topic/Bundled.20basis/near/233709854\">said</a>:</p>\n<blockquote>\n<p>If you bundle <code>ι</code>, and give it a third universe level, separate from <code>M</code> and <code>R,</code>, won't that give the same universe behaviour as the unbundled definition? That is, whenever you stipulate <code>variable b : basis M R</code>, you're introducing a new universe variable, just like with <code>variables (ι : Type*) (basis ι R M)</code>. If you put the universe variable of <code>ι</code> first, you'll also be able to pin it down by saying <code>b : basis.{u} M R</code></p>\n</blockquote>\n<p>I don't have a good intuition how often you need to specify the universe variable: if this is all the time, then I'd rather have the index variable. Maybe someone with more experience in the category theory areas can comment (<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>?).</p>",
        "id": 233711439,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617908953
    },
    {
        "content": "<p>If you bundle iota, then to talk about bases over the same index you have to start inserting proofs that the indexes are the same</p>",
        "id": 233715305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617910517
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 233715625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617910659
    },
    {
        "content": "<p>I think that this is a good reason not to bundle <code>ι</code>.</p>",
        "id": 233718694,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617912043
    },
    {
        "content": "<p>Yes, it's generally not a good idea to bundle types for the reason <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> mentioned</p>",
        "id": 233757839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617934049
    },
    {
        "content": "<p>This came up recently for <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> and I in the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_free_group\">docs#is_free_group</a>, where the type <code>generators</code> <em>is</em> bundled</p>",
        "id": 233771940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617947862
    },
    {
        "content": "<p>Do you think it shouldn't be, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>?</p>",
        "id": 233771996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617947894
    },
    {
        "content": "<p>I think that it should be bundled</p>",
        "id": 233772017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617947921
    },
    {
        "content": "<p>not the index type, but the basis itself, like Anne implemented</p>",
        "id": 233772026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617947939
    },
    {
        "content": "<p>I'm not sure you're answering the question I asked</p>",
        "id": 233772057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617947976
    },
    {
        "content": "<p>Maybe I don't know what the question is</p>",
        "id": 233772121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617948006
    },
    {
        "content": "<p><code>is_free_group</code> bundles the type, and I don't think this is a good idea for the same reasons</p>",
        "id": 233772216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617948066
    },
    {
        "content": "<p>Ok, that's the question I was asking, thanks!</p>",
        "id": 233772235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617948092
    },
    {
        "content": "<p>Not to mention it's often useful to say that a type is freely generated by n elements, rather than just free on some set</p>",
        "id": 233772284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617948127
    },
    {
        "content": "<p>In fact it might even be useful to pull the generators out of the structure too, have a function <code>f : I -&gt; G</code> as a parameter to <code>is_free_group</code></p>",
        "id": 233772324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617948179
    },
    {
        "content": "<p>It took a lot of spare hours over the course of a couple of weeks, but the bundled basis refactor PR is here! <a href=\"https://github.com/leanprover-community/mathlib/issues/7496\">#7496</a></p>",
        "id": 237355424,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1620145267
    }
]