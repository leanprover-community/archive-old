[
    {
        "content": "<p>Chapter 8 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> has the following definition.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>It is claimed that, by using course-of-values recursion to interpret this definition, exponential blowup is avoided. However, using <code>set_option profiler true</code> to time the evaluation, I get the following results (times in milliseconds)</p>\n<div class=\"codehilite\" data-code-language=\"BBCode\"><pre><span></span><code>fib 29   550\nfib 30   970\nfib 31  1536\nfib 32  2470\n</code></pre></div>\n<p>Am I missing something?</p>\n<p>Additional question: does Lean translate every function defined using <code>nat.brec_on</code> into a function defined using <code>nat.rec_on</code>? If so, how can I view this translation?</p>",
        "id": 221410625,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1609611436
    },
    {
        "content": "<p>This used to be true in an older version of lean. It was later \"fixed\" to have the expected exponential behavior</p>",
        "id": 221412611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609614316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> has been hunting down and removing references to this older behavior in TPIL</p>",
        "id": 221412625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609614354
    },
    {
        "content": "<blockquote>\n<p>Additional question: does Lean translate every function defined using nat.brec_on into a function defined using nat.rec_on? If so, how can I view this translation?</p>\n</blockquote>\n<p>No, <code>nat.brec_on</code> is a function which is defined in terms of <code>nat.rec_on</code>, there is no translation involved, just one function calling another</p>",
        "id": 221412687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609614411
    },
    {
        "content": "<p>you can view the definition with <code>#print nat.brec_on</code></p>",
        "id": 221412693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609614423
    },
    {
        "content": "<p>Is there any discussion about the motivation behind this \"fix\"?</p>",
        "id": 221412767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609614494
    },
    {
        "content": "<p>The reason you get exponential behavior here is that the VM doesn't actually use the <code>brec_on</code> definition, it compiles using \"naive recursion\", i.e. what you would do in a C like language. You called the function twice so that's what you will get</p>",
        "id": 221412798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609614567
    },
    {
        "content": "<p>If you want alternate evaluation behavior you have to write it explicitly</p>",
        "id": 221412840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609614603
    },
    {
        "content": "<p>I think this is a good thing in general, because directly executing a <code>brec_on</code> is time and memory wasteful</p>",
        "id": 221412875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609614669
    },
    {
        "content": "<p>because you have to build up a tuple of all previous values, even though the compilation strategy can only use the first <code>n</code> of them for some fixed n (here 2)</p>",
        "id": 221412941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609614748
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ! Follow up questions: for every inductive type <code>foo</code>, is every recursor on <code>foo</code> defined in terms of <code>foo.rec</code>? Is there a list of the recursors that are created automatically? I know of <code>rec</code>, <code>rec_on</code>, <code>cases_on</code> and  (for inductive types in <code>Prop</code>), <code>foo.dcases_on</code>.</p>",
        "id": 221413786,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1609615973
    },
    {
        "content": "<p><code>#print prefix foo</code> should list them all.</p>",
        "id": 221413813,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609616019
    },
    {
        "content": "<blockquote>\n<p>for every inductive type foo, is every recursor on foo defined in terms of foo.rec?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p>Is there a list of the recursors that are created automatically? I know of rec, rec_on, cases_on and (for inductive types in Prop), foo.dcases_on.</p>\n</blockquote>\n<p>You can use <code>#print prefix foo</code> on a newly declared inductive type to see all the autogenerated functions. The only one that can be called a recursor that is not on your list is <code>brec_on</code>.</p>",
        "id": 221413863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609616064
    },
    {
        "content": "<p>Thanks Bryan and Mario. Silly of me to miss <code>brec_on</code> when I'd been asking about it!</p>",
        "id": 221413892,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1609616133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> when you make a new inductive type lean adds new axioms/constants to its system! One for the type, one for each constructor, and then this <code>rec</code> function, the eliminator. You can #print definitions and see that the rec function has no definition, but all the other useful stuff which is auto-generated does (and a lot of it uses rec).</p>",
        "id": 221423107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609630073
    },
    {
        "content": "<p>For example when you define nat lean adds four new constants to the system -- nat, <a href=\"http://nat.zero\">nat.zero</a>, nat.succ and nat.rec. everything else is made from that. I have a blog post called something like no confusion over no_confusion where Chris and I went through some of the stuff defined by the system and figured out how to define it ourselves</p>",
        "id": 221423183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609630187
    },
    {
        "content": "<p>I'll update TPIL.</p>",
        "id": 221481850,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1609724088
    },
    {
        "content": "<p>TPIL updated: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html</a>. (Also with Johan's correction regarding @@.)</p>",
        "id": 223592454,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1611277625
    },
    {
        "content": "<p>Thank you as ever Jeremy! I'm still avidly recommending this text to all the computationally minded people who show up on the Discord.</p>",
        "id": 223613462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611303368
    },
    {
        "content": "<p>If VM evaluation doesn't have the memoizing behavior of <code>brec_on</code>, is there any point to the equation compiler using it?<br>\nEven in Lean 4, the equation compiler still generates <code>Nat.brecOn</code>.</p>",
        "id": 310264383,
        "sender_full_name": "Reid Barton",
        "timestamp": 1668537376
    }
]