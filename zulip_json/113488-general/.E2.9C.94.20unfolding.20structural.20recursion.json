[
    {
        "content": "<p>Usually these sorts of mysterious failures of <code>rfl</code> come from the fact that the equation compiler produces definitions that might require that more arguments be broken down into constructors than you might think (in other words, you can't assume that the definition follows exactly the same cases as in your given definition). I noticed the <code>ty</code> argument is being cased on in the definition, which suggests that doing cases on that argument will help. Indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Member</span> <span class=\"n\">ty</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term.denote</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Term.var</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">term_var_proj</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">ty</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 313677792,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1670070514
    },
    {
        "content": "<p>For some reason the equation compiler generates needlessly complicated definitons. It works better here to write all the definitions manually with tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.closed.cartesian</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Member</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">},</span> <span class=\"n\">Member</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">bs</span><span class=\"o\">},</span> <span class=\"n\">Member</span> <span class=\"n\">a</span> <span class=\"n\">bs</span> <span class=\"bp\">→</span> <span class=\"n\">Member</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"n\">ctx</span><span class=\"o\">},</span> <span class=\"n\">Member</span> <span class=\"n\">ty</span> <span class=\"n\">ctx</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">ctx</span> <span class=\"n\">ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"n\">dom</span> <span class=\"n\">ran</span><span class=\"o\">},</span> <span class=\"n\">Term</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">Ty.fn</span> <span class=\"n\">dom</span> <span class=\"n\">ran</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">ctx</span> <span class=\"n\">dom</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">ctx</span> <span class=\"n\">ran</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"n\">dom</span> <span class=\"n\">ran</span><span class=\"o\">},</span> <span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">ran</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">Ty.fn</span> <span class=\"n\">dom</span> <span class=\"n\">ran</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.category</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">limits.has_finite_products</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category_theory.cartesian_closed</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Ty.denote</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ty</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ty</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih1</span> <span class=\"bp\">⟹</span> <span class=\"n\">ih2</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">ctx_denote</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">tys</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">tys</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">limits.terminal</span> <span class=\"n\">C</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">limits.prod</span> <span class=\"o\">(</span><span class=\"n\">Ty.denote</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">ih</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">term_var_proj</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">)},</span> <span class=\"n\">Member</span> <span class=\"n\">ty</span> <span class=\"n\">ctx</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ctx_denote</span> <span class=\"n\">a</span> <span class=\"n\">ctx</span> <span class=\"bp\">⟶</span> <span class=\"n\">Ty.denote</span> <span class=\"n\">a</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">Member.head</span> <span class=\"o\">:=</span> <span class=\"n\">limits.prod.fst</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Member.tail</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">ctx_denote</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">limits.prod.snd</span> <span class=\"kd\">end</span> <span class=\"bp\">≫</span> <span class=\"n\">term_var_proj</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Term.denote</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">},</span> <span class=\"n\">Term</span> <span class=\"n\">ctx</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ctx_denote</span> <span class=\"n\">a</span> <span class=\"n\">ctx</span> <span class=\"bp\">⟶</span> <span class=\"n\">Ty.denote</span> <span class=\"n\">a</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ctx</span> <span class=\"n\">ty</span> <span class=\"n\">tm</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">tm</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">term_var_proj</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">limits.prod.lift</span> <span class=\"n\">ih2</span> <span class=\"n\">ih1</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">exp.ev</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">cartesian_closed.curry</span> <span class=\"n\">ih</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Term.denote</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Member</span> <span class=\"n\">ty</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term.denote</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Term.var</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">term_var_proj</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 313678161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670070694
    },
    {
        "content": "<p>Note that I didn't need any <code>dsimp</code> in <code>Term.denote</code> any more.</p>",
        "id": 313678616,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670070882
    },
    {
        "content": "<p>Unfortunately, the definitions are a lot uglier at the source level now.</p>",
        "id": 313678687,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670070910
    },
    {
        "content": "<p>I see. Thank you very much!</p>",
        "id": 313680421,
        "sender_full_name": "Satoshi Kura",
        "timestamp": 1670071688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569603\">Satoshi Kura</span> has marked this topic as resolved.</p>",
        "id": 313680450,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670071703
    }
]