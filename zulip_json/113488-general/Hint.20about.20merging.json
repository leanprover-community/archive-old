[
    {
        "content": "<p>I often find myself in the following situation:</p>\n<ul>\n<li>I start branch A.</li>\n<li>I decide that A is too large for 1 PR, so I cherry-pick some changes to another branch B, and start a separate PR.</li>\n<li>Then I make changes to branch B (e.g., because of reviewers' comments).</li>\n<li>Then branch B is merged into master, and I have conflicts in branch A.</li>\n</ul>\n<p>I guess other people may have the same problem, so let me share my way of dealing with it without need to manually resolve conflicts.</p>\n<ul>\n<li>Once I cherry-pick changes from A to B, I merge the new branch B to A (you can do it later with <code>git merge sha1hash</code>).</li>\n<li>When B is merged to master, I do <code>git checkout master &amp;&amp; git pull &amp;&amp; git checkout B &amp;&amp; git merge master &amp;&amp; git checkout A &amp;&amp; git merge B</code>. Often all merges happen without conflicts.</li>\n</ul>",
        "id": 232659524,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617222405
    },
    {
        "content": "<p>You can abbreviate that last command to </p>\n<p><code>git fetch origin &amp;&amp; git checkout B &amp;&amp; git merge origin/master &amp;&amp; git checkout A &amp;&amp; git merge B</code></p>\n<p>Which saves moving your working tree to master and back</p>",
        "id": 232660832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617222902
    },
    {
        "content": "<p>But yes, the key trick is to merge bors' copy of your PR back into the branch it came from before merging that branch into follow-up PRs. The other trick is to run <code>leanproject get-cache --rev origin/master</code> immediately after that process, to start your cache rebuild somewhere reasonable.</p>",
        "id": 232661164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617223047
    },
    {
        "content": "<p>Can we put these tips in the docs or somewhere less transient/easier to find than zulip?</p>",
        "id": 232666874,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1617225565
    },
    {
        "content": "<p>Feel free to pr!</p>",
        "id": 232668241,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617226227
    },
    {
        "content": "<p>An addition to this trick: I'm sometimes faced by the fact that I worked on branch B on a different machine, and so my current machine doesn't have the latest commit on branch B. This is annoying, since bors has deleted branch B in the meantime, so <code>git fetch --all</code> won't even fetch the commit you need to do this merge trick. <br>\nIn this case, what you can do is first find the full commit hash of the last (non-bors) commit of PR B and then run<br>\n<code>git fetch origin &lt;full-commit-hash&gt; &amp;&amp; git checkout &lt;full-commit-hash&gt; &amp;&amp; git checkout -b temp &amp;&amp; git merge origin/master &amp;&amp; git checkout A &amp;&amp; git merge temp &amp;&amp; git branch -D temp</code></p>",
        "id": 303510479,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665518451
    },
    {
        "content": "<p>(btw: if someone wants to add this to <a href=\"https://leanprover-community.github.io/tips_and_tricks.html\">https://leanprover-community.github.io/tips_and_tricks.html</a>, that would be great!)</p>",
        "id": 303510782,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665518563
    }
]