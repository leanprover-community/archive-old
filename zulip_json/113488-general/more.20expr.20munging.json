[
    {
        "content": "<p>Say I have an <code>expr</code> representing an iterated <code>pi</code> type, which is finally an equation, something like <code>Π (a : ℕ) (b : ℕ), f a b = g (a + b)</code>. From that, I want to produce <code>f ?m_1 ?m_2</code>, where <code>?m_1</code> and <code>?m_2</code> are newly created metavariables of the appropriate types.</p>",
        "id": 133605425,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536492496
    },
    {
        "content": "<p>Any suggestions?</p>",
        "id": 133605426,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536492506
    },
    {
        "content": "<p>Are you guaranteed that the left hand side will be literally <code>&lt;something&gt; a b</code>, where <code>a</code> and <code>b</code> are the variables introduced by the Pis in order? Or could it be some arbitrary expression involving <code>a</code> and <code>b</code>?</p>",
        "id": 133605484,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536492674
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">get_lhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_local&#39;</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n      <span class=\"n\">b&#39;</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">whnf</span> <span class=\"err\">$</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">instantiate_var</span> <span class=\"n\">v</span>\n      <span class=\"n\">get_lhs</span> <span class=\"n\">b&#39;</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n</pre></div>",
        "id": 133605574,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536492874
    },
    {
        "content": "<p>Yes this strategy is what I was about to suggest. Peel off one outer Pi at a type, leaving a formula with a free variable, and then substitute a fresh metavariable or whatever else you want for that free variable</p>",
        "id": 133605626,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536492971
    },
    {
        "content": "<p>Actually, we can be more direct:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">get_lhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_meta_var</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n   <span class=\"n\">b&#39;</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">whnf</span> <span class=\"err\">$</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">instantiate_var</span> <span class=\"n\">v</span>\n   <span class=\"n\">get_lhs</span> <span class=\"n\">b&#39;</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n</pre></div>",
        "id": 133605631,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536493056
    },
    {
        "content": "<p>(I'm doubly impressed, Simon, that your code often doesn't quite compile: there's a comma missing in that first one. :-)</p>",
        "id": 133605633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536493074
    },
    {
        "content": "<p>Where would be the fun if you didn't have to fix my mistakes?</p>",
        "id": 133605674,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536493114
    },
    {
        "content": "<p>So I'm trying to do something a bit fancier here, and while <code>get_lhs</code> work as requested, really I want something more. :-)</p>",
        "id": 133605935,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536493716
    },
    {
        "content": "<p>I'm listening (sort of)</p>",
        "id": 133605958,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536493764
    },
    {
        "content": "<p>I had written:</p>\n<div class=\"codehilite\"><pre><span></span>meta def substitutions&#39; : expr → bool → list expr →\n  tactic (tactic (expr × expr × list expr))\n| (expr.pi n bi d b) symm types :=\n  do substitutions&#39; b symm (d :: types)\n| `(%%lhs = %%rhs) symm types :=\n  do let (lhs, rhs) := if symm then (rhs, lhs) else (lhs, rhs),\n     let tac := (do mvars ← types.mmap mk_meta_var,\n        let pattern := lhs.instantiate_vars mvars,\n        ty ← infer_type pattern,\n        return (pattern, ty, mvars)),\n     return tac\n| _ _ _ := failed\n</pre></div>",
        "id": 133606018,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536493824
    },
    {
        "content": "<p>The idea being to return a tactic, which could be invoked multiple times, each time producing the pattern with \"fresh\" mvars.</p>",
        "id": 133606035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536493877
    },
    {
        "content": "<p>However it's ... still somewhat mysteriously ... not working in all cases. (Sorry this is far from a MWE.)</p>",
        "id": 133606043,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536493907
    },
    {
        "content": "<p>Is this supposed to be more efficient than just invoking something like <code>get_lhs</code> repeatedly?</p>",
        "id": 133606101,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536493982
    },
    {
        "content": "<p>Yeah, I guess so.</p>",
        "id": 133606180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536494076
    },
    {
        "content": "<p>But maybe I am needlessly complicating things. :-(</p>",
        "id": 133606184,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536494087
    },
    {
        "content": "<p>I think you need to <code>reverse</code> <code>mvars</code></p>",
        "id": 133606203,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536494138
    },
    {
        "content": "<p>It's probably about equally or less efficient because the representation of that <code>tactic</code> object in the VM is going to be basically the same as or a more complicated structure than the outer Pis of the original type.</p>",
        "id": 133606250,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536494178
    },
    {
        "content": "<p>Hmm. I had tried (on a purely voodoo basis) reversing <code>mvars</code>, without apparent success. Let me go away on de-complicate for a bit. :-)</p>",
        "id": 133606328,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536494353
    },
    {
        "content": "<p>Thanks for the help!</p>",
        "id": 133606329,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536494358
    },
    {
        "content": "<p>After squinting at it for a while, I agree with <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 133606330,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536494384
    },
    {
        "content": "<p>(Or at least, that would be true in the GHC runtime system, which is probably a terrible mental model for the Lean VM but the best one I have available.)</p>",
        "id": 133606428,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536494542
    },
    {
        "content": "<p>My reasoning is that, for each bound variable, the expensive thing is <code>instantiate_var</code>, the number of which does not decrease in this approach</p>",
        "id": 133606476,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536494684
    },
    {
        "content": "<p>Right, you only save the decomposition of the Pis.</p>",
        "id": 133606495,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536494747
    },
    {
        "content": "<p>Which is cheap anyways, but to make things worse, you replace it by having to do an equal number of applications-of-variable-functions (the inner <code>tactic</code>which you build up).</p>",
        "id": 133606593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536494917
    },
    {
        "content": "<p>Oh wait, you implemented it in a way so that there is only one closure being built (<code>tac</code>), but still each invocation of <code>tac</code> has to process the list <code>types</code>, which has the same information as the outer Pis of the original expression.</p>",
        "id": 133606693,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536495087
    },
    {
        "content": "<p>and, happily it all seems to work now!</p>",
        "id": 133606774,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536495195
    },
    {
        "content": "<p>(or at least the \"all\" that I hoped to have done tonight!)</p>",
        "id": 133606776,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536495208
    }
]