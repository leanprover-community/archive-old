[
    {
        "content": "<p>Can someone explain to me the benefit of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Eliminate out of a type that `is_empty` (without using projection notation). -/</span>\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_empty_elim</span> <span class=\"o\">[</span><span class=\"n\">is_empty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_empty.false</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>\n<p>over something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Eliminate out of a type that `is_empty` (without using projection notation). -/</span>\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_empty_elim'</span> <span class=\"o\">[</span><span class=\"n\">is_empty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_empty.false</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>",
        "id": 262566231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637747374
    },
    {
        "content": "<p>It seems to me that <code>is_empty_elim'</code> is much easier to use, also for unification.</p>",
        "id": 262566321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637747409
    },
    {
        "content": "<p>Does anything break if you replace <code>is_empty_elim</code> by the second one?</p>",
        "id": 262567004,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637747817
    },
    {
        "content": "<p>Let me try</p>",
        "id": 262567051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637747850
    },
    {
        "content": "<p>Aah, there is already</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Non-dependent version of `is_empty.elim`. Helpful if the elaborator cannot elaborate `h.elim a`</span>\n<span class=\"sd\">  correctly. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">elim'</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.elim</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 262567835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637748273
    },
    {
        "content": "<p>I don't really understand why this can't replace the dependent version everywhere. But if I try, then stuff indeed does break.</p>",
        "id": 262567881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637748306
    },
    {
        "content": "<p>This is surprising.  Can you post an example of the breakage?</p>",
        "id": 262568294,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637748555
    },
    {
        "content": "<p>Changing to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Eliminate out of a type that `is_empty` (without using projection notation). -/</span>\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_empty_elim</span> <span class=\"o\">[</span><span class=\"n\">is_empty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_empty.false</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>\n<p>causes the following errors</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  iff_true_intro is_empty_elim</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  is_empty_elim</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m_1 → ?m_2 : Sort (imax ? ?)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ∀ (a : α), p a : Prop</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">forall_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff_true_intro</span> <span class=\"n\">is_empty_elim</span>\n<span class=\"c1\">---</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  subsingleton.intro is_empty_elim</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  is_empty_elim</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m_1 → ?m_2 : Sort (imax ? ?)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ∀ (a b : α), a = b : Prop</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">@[priority 100]</span> <span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">is_empty_elim</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 262570066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637749667
    },
    {
        "content": "<p><code>is_empty_elim'</code> is a special case of <code>is_empty_elim</code>: the latter is only for functions/implications out of an empty type, the former is (also) for dependent functions and universal quantifications over an empty type. Both the errors in the last post are examples of universal quantifications over an empty type.</p>",
        "id": 262570371,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637749843
    },
    {
        "content": "<p>That said, adding <code>is_empty_elim'</code> to the library seems like a good idea to me.</p>",
        "id": 262570430,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637749883
    },
    {
        "content": "<p><code>is_empty.elim'</code> is already doing this, as I just discovered.</p>",
        "id": 262571147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637750302
    },
    {
        "content": "<p>I see.  IMHO it would also be perfectly reasonable to make <code>is_empty_elim'</code> the default and just write <code>iff_true_intro (λ a, is_empty_elim a)</code> in <code>forall_iff</code>.</p>",
        "id": 262571552,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637750595
    }
]