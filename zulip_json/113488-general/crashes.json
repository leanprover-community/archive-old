[
    {
        "content": "<p>It seems to me that Lean is crashing a lot since a couple of weeks, whereas this never happened before. I see stuff like: <a href=\"/user_uploads/3121/iyjbg3SrbHieMl35xMigIab6/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/iyjbg3SrbHieMl35xMigIab6/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/iyjbg3SrbHieMl35xMigIab6/image.png\"></a></div>",
        "id": 201856564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593009878
    },
    {
        "content": "<p>I've also noticed this. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>  It would be extremely helpful if you could somewhat reliably reproduce it.</p>",
        "id": 201859546,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593011109
    },
    {
        "content": "<p>Of course I understand that, but it's hard to predict and reproduce.</p>",
        "id": 201860997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593011747
    },
    {
        "content": "<p>Also noticed this</p>",
        "id": 201862546,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593012382
    },
    {
        "content": "<p>I don't think I've seen Lean crash out before, but I've just upgraded from 3.7.2 to 3.16.5 and now this example will do it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">v_nonneg</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">v_nonneg</span>\n</code></pre></div>\n\n\n<p>That's probably not quite minimal yet, but I've made it much shorter than it was originally!</p>",
        "id": 202508601,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1593560567
    },
    {
        "content": "<p>Yup this gives a crash for me too</p>",
        "id": 202508803,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593560776
    },
    {
        "content": "<p>Same here. Big thanks to Alistair for managing to get a reproducible crash that nobody else could forge! Hopefully this will allow some expert (ie. Gabriel) to fix it.</p>",
        "id": 202517102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593562408
    },
    {
        "content": "<p>It seems using</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">v_nonneg</span> <span class=\"n\">T</span>\n</code></pre></div>\n\n\n<p>instead doesn't crash lean.</p>",
        "id": 202518023,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593563170
    },
    {
        "content": "<p>It seems Alistair's code doesn't crash in Lean 3.10.0c (and older) and does crash starting with <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/changes.md#v3110c-8-may-2020\">3.11.0c</a>.</p>",
        "id": 202518223,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593563368
    },
    {
        "content": "<p>So <a href=\"https://github.com/leanprover-community/lean/issues/211\">lean#211</a> is looking pretty suspicious right now.</p>",
        "id": 202518297,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593563413
    },
    {
        "content": "<p>Uh oh, it was one of my PRs. <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 202518335,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593563457
    },
    {
        "content": "<p>And it was one of the speedup PRs</p>",
        "id": 202518350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593563472
    },
    {
        "content": "<p>I think</p>",
        "id": 202518354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593563477
    },
    {
        "content": "<p>Here's the first part of the <code>lldb</code> backtrace for the crash from Alistair's file (in 3.16.5c):</p>\n<div class=\"codehilite\"><pre><span></span><code>* thread #3, stop reason = EXC_BAD_ACCESS (code=1, address=0x267df1db)\n  * frame #0: 0x00000001000814da lean`lean::instantiate(lean::expr const&amp;, unsigned int, unsigned int, lean::expr const*) + 42\n    frame #1: 0x0000000100081898 lean`lean::instantiate(lean::expr const&amp;, lean::expr const&amp;) + 24\n    frame #2: 0x000000010026e87b lean`lean::apply(lean::type_context_old&amp;, lean::expr, lean::apply_cfg const&amp;, lean::tactic_state const&amp;, lean::vm_obj*, lean::vm_obj*) + 1355\n    frame #3: 0x000000010026fa2b lean`lean::tactic_apply_core(lean::vm_obj const&amp;, lean::vm_obj const&amp;, lean::vm_obj const&amp;) + 283\n    frame #4: 0x000000010049a5dd lean`lean::vm_state::invoke_fn(void*, unsigned int) + 2317\n    frame #5: 0x000000010049df8e lean`lean::vm_state::invoke_cfun(lean::vm_decl const&amp;) + 254\n    frame #6: 0x000000010049cb01 lean`lean::vm_state::run() + 4561\n</code></pre></div>",
        "id": 202519069,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593564082
    },
    {
        "content": "<p>So I guess Lean is crashing somewhere in <a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/src/kernel/instantiate.cpp#L80\">here</a>.</p>",
        "id": 202519188,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593564172
    },
    {
        "content": "<p>Reverting the change from the commit <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> mentioned to lean/src/library/type_context.h (but only that file), fixes this for me.</p>",
        "id": 202519445,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593564387
    },
    {
        "content": "<p>Actually strictly speaking I didn't revert the change, I changed the Semireducible on line 787 to All</p>",
        "id": 202519521,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593564477
    },
    {
        "content": "<p>Is <code>tests/lean/run/mario_type_context.lean</code> slow or fast with your change?</p>",
        "id": 202519694,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593564615
    },
    {
        "content": "<p>Oh, I guess it will fail if it's going to be slow.</p>",
        "id": 202519710,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593564644
    },
    {
        "content": "<p>I didn't run the testsuite yet ;)</p>",
        "id": 202519720,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593564660
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">🐌</span> <span class=\"n\">elan</span> <span class=\"n\">run</span> <span class=\"n\">my_link</span> <span class=\"n\">lean</span> <span class=\"n\">run</span><span class=\"bp\">/</span><span class=\"n\">mario_type_context</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"n\">parsing</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0398</span><span class=\"n\">ms</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">of</span> <span class=\"n\">bar</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0157</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">of</span> <span class=\"n\">bar</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0161</span><span class=\"n\">ms</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">tests</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">run</span><span class=\"bp\">/</span><span class=\"n\">mario_type_context</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"err\">&#39;</span><span class=\"n\">bar&#39;</span> <span class=\"n\">uses</span> <span class=\"n\">sorry</span>\n<span class=\"n\">compilation</span> <span class=\"n\">of</span> <span class=\"n\">bar</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">266</span><span class=\"n\">ms</span>\n<span class=\"n\">decl</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">processing</span> <span class=\"n\">of</span> <span class=\"n\">bar</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">323</span><span class=\"n\">ms</span>\n<span class=\"n\">parsing</span> <span class=\"n\">took</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">59</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">of</span> <span class=\"n\">foo</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0562</span><span class=\"n\">ms</span>\n<span class=\"n\">compilation</span> <span class=\"n\">of</span> <span class=\"n\">foo</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">002</span><span class=\"n\">ms</span>\n<span class=\"n\">decl</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">processing</span> <span class=\"n\">of</span> <span class=\"n\">foo</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00186</span><span class=\"n\">ms</span>\n<span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">compilation</span> <span class=\"n\">took</span> <span class=\"mi\">40</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">ms</span>\n<span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"n\">ms</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">objects</span><span class=\"o\">:</span>  <span class=\"mi\">67</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">closures</span><span class=\"o\">:</span> <span class=\"mi\">190</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">trace_fmt</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"bp\">_</span><span class=\"n\">interaction</span><span class=\"bp\">._</span><span class=\"n\">lambda_3</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">scope_trace</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"bp\">_</span><span class=\"n\">interaction</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">step</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"bp\">_</span><span class=\"n\">interaction</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">of</span> <span class=\"n\">foo</span> <span class=\"n\">took</span> <span class=\"mi\">74</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">ms</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">tests</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">run</span><span class=\"bp\">/</span><span class=\"n\">mario_type_context</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"err\">&#39;</span><span class=\"n\">foo&#39;</span> <span class=\"n\">uses</span> <span class=\"n\">sorry</span>\n<span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n    <span class=\"n\">compilation</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">267</span><span class=\"n\">ms</span>\n    <span class=\"n\">decl</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">processing</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">321</span><span class=\"n\">ms</span>\n    <span class=\"n\">elaboration</span> <span class=\"mi\">74</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">ms</span>\n    <span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">compilation</span> <span class=\"mi\">40</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">ms</span>\n    <span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"mi\">1</span><span class=\"n\">ms</span>\n    <span class=\"n\">parsing</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">62</span><span class=\"n\">ms</span>\n    <span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0711</span><span class=\"n\">ms</span>\n</code></pre></div>",
        "id": 202519750,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593564719
    },
    {
        "content": "<p>Seems pretty quick to me?</p>",
        "id": 202519795,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593564729
    },
    {
        "content": "<p>Which version should mario be slow under?</p>",
        "id": 202519852,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593564812
    },
    {
        "content": "<p>It should be slow / fail in 3.10.0c and before.</p>",
        "id": 202519901,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593564849
    },
    {
        "content": "<p>Hmm doesn't seem to fail under 3.9.0 to me.</p>",
        "id": 202519911,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593564870
    },
    {
        "content": "<p>Weird, I see this in 3.9.0c:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">try_for</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">timeout</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 202520033,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593565004
    },
    {
        "content": "<p>At the <code>do</code>.</p>",
        "id": 202520050,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593565029
    },
    {
        "content": "<p>Looks like mine is picking up mathlib defs, maybe thats a problem</p>",
        "id": 202520065,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593565057
    },
    {
        "content": "<p>That's really weird. There aren't any imports in that file.</p>",
        "id": 202520078,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593565081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/crashes/near/201856564\">said</a>:</p>\n<blockquote>\n<p>It seems to me that Lean is crashing a lot since a couple of weeks, whereas this never happened before. I see stuff like: <a href=\"/user_uploads/3121/iyjbg3SrbHieMl35xMigIab6/image.png\">image.png</a></p>\n</blockquote>\n<p>I've been running into this error as well. I assumed it was my old computer running out of RAM, but clearer more space didn't fix it. I'll see if I can reproduce it with my own code. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"111433\">Alistair Tucker</span> <a href=\"#narrow/stream/113488-general/topic/crashes/near/202508601\">said</a>:</p>\n<blockquote>\n<p>I don't think I've seen Lean crash out before, but I've just upgraded from 3.7.2 to 3.16.5 and now this example will do it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">v_nonneg</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">v_nonneg</span>\n</code></pre></div>\n\n\n<p>That's probably not quite minimal yet, but I've made it much shorter than it was originally!</p>\n</blockquote>\n<p>This also crashed for me.</p>",
        "id": 202520300,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1593565252
    },
    {
        "content": "<p>I've created an issue at <a href=\"https://github.com/leanprover-community/lean/issues/372\">lean#372</a>.</p>",
        "id": 202521245,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593566294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Ah, I get what you mean about the test now. I forgot that it got modified when Johan removed most of algebra from core.</p>",
        "id": 202522247,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593567517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> yeah I figured that was most likely what had happened but didn't check the commit history, thanks for confirming!</p>",
        "id": 202522279,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593567600
    },
    {
        "content": "<p>Thanks for finding a reproducible testcase!  If one of you could make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (i.e., not referencing mathlib), then I could also include it in the test suite.</p>",
        "id": 202536704,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593587066
    },
    {
        "content": "<p>Guys, I'll fix the segfault for you.  But please define your instances correctly.  The fix is to add a single letter:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 202539465,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593589298
    },
    {
        "content": "<p><code>delta</code> instead of <code>dunfold</code> would/should also work, right?</p>",
        "id": 202539578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593589384
    },
    {
        "content": "<p>Fun fact: with semireducible transparency, Lean can reduce <code>@β.partial_order x</code> but not <code>@β.partial_order ?m_1</code>.  The second reduces to <code>eq.mpr ...</code>, but no further.</p>",
        "id": 202539582,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593589389
    },
    {
        "content": "<p>The no <code>id</code> or <code>eq.mpr</code> rule in instances almost requires a linter.</p>",
        "id": 202539657,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593589443
    },
    {
        "content": "<p>In data fields of instances.</p>",
        "id": 202539810,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593589585
    },
    {
        "content": "<p>Also not directly at the top, like here.</p>",
        "id": 202539987,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593589771
    },
    {
        "content": "<p>Minimized:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span>\n<span class=\"n\">def</span> <span class=\"n\">beta</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">foo</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">beta</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">baz</span>\n</code></pre></div>",
        "id": 202540651,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593590373
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/373\">lean#373</a></p>",
        "id": 202541126,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593590646
    },
    {
        "content": "<p>Thanks Gabriel! I really hope this is the sources of the crashes we've been seeing for a couple of weeks.</p>",
        "id": 202542608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593591902
    },
    {
        "content": "<p>Has the recent instability always involved <code>apply</code>? This crash now seems like a specific bug in that tactic.</p>",
        "id": 202543265,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593592396
    },
    {
        "content": "<p>This makes Lean segfault on Windows (both Lean itself and the language server)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">convex_hull</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">intrv</span> <span class=\"o\">(</span><span class=\"n\">v₁</span> <span class=\"err\">∈</span> <span class=\"n\">convex_hull</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">convex_hull</span> <span class=\"n\">v₁</span>\n</code></pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> got <code>unreachable code was reached</code> but Lean kept working for them apparently</p>",
        "id": 206764102,
        "sender_full_name": "Grayson Burton",
        "timestamp": 1597273926
    },
    {
        "content": "<p>Oh - this version gives me a SIGSEGV error!</p>",
        "id": 206764131,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1597273961
    },
    {
        "content": "<p>The slightly older version you had gave me the <code>unreachable code</code> error and lean didn't crash</p>",
        "id": 206764159,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1597273998
    },
    {
        "content": "<p>the older version, for reference:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">convex_hull</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_set</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">convex_hull</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">intrv</span> <span class=\"o\">(</span><span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"err\">∈</span> <span class=\"n\">convex_hull</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">convex_hull</span> <span class=\"n\">v₁</span>\n</code></pre></div>",
        "id": 206764255,
        "sender_full_name": "Grayson Burton",
        "timestamp": 1597274056
    },
    {
        "content": "<p>did you put <code>variables {α : Type*}</code> at the top when you tried it? I did in both cases</p>",
        "id": 206764289,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1597274103
    },
    {
        "content": "<p>Nope. The entire file was each respective snippet every time I tested.</p>",
        "id": 206764352,
        "sender_full_name": "Grayson Burton",
        "timestamp": 1597274153
    },
    {
        "content": "<p>I get random segfaults with and without defining alpha, and a lot of unreachable codes</p>",
        "id": 206764422,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597274183
    },
    {
        "content": "<p>Please open an issue at leanprover-community/lean!</p>",
        "id": 206788451,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597304707
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/438\">https://github.com/leanprover-community/lean/issues/438</a> Got distracted, finally made it :)</p>",
        "id": 206792740,
        "sender_full_name": "Grayson Burton",
        "timestamp": 1597308512
    }
]