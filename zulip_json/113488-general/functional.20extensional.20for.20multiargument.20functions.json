[
    {
        "content": "<p>I'm looking for multiple-argument generalizations of funext. Do these exists? Or do I have to resort to uncurrying?</p>",
        "id": 264640687,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639339088
    },
    {
        "content": "<p>Term mode or tactic mode? You should be able to just use the <code>ext</code> tactic.</p>",
        "id": 264641038,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639339453
    },
    {
        "content": "<p>Let me try...</p>",
        "id": 264641098,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639339557
    },
    {
        "content": "<p>Hmm... I'm not sure how to apply this tactic. How would it work with this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">h''</span> <span class=\"o\">:=</span> <span class=\"n\">iff.intro</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iff_iff_eq.mp</span> <span class=\"n\">h''</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264641638,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639340322
    },
    {
        "content": "<p>Your example is wrong. You are asking for <code>p</code> and <code>q</code> to coincide at a specific <code>x</code> and <code>y</code>.</p>",
        "id": 264641734,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639340460
    },
    {
        "content": "<p>The pattern should be something like <code>apply funext, intro x, apply funext, intro y, apply propext</code>, but also the <code>ext</code> tactic should do this all in one shot</p>",
        "id": 264641739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639340464
    },
    {
        "content": "<p>Here's probably what you meant</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ext</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">hpq</span> <span class=\"n\">hqp</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hpq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hqp</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264641803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639340546
    },
    {
        "content": "<p>Ah, I see. You're right.</p>",
        "id": 264641881,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639340645
    },
    {
        "content": "<p>Thanks a lot.</p>",
        "id": 264641917,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639340744
    }
]