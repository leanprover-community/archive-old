[
    {
        "content": "<p>I am trying to define terms in a first-order language but am encountering a <strong>nested inductive type</strong> error.<br>\n<strong>MWE:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">lang</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">funcs</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">consts</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> We define terms in a language to be constants, variables or</span>\n<span class=\"cm\">   functions acting on terms.-/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">lang</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">const_term</span> <span class=\"o\">:</span> <span class=\"n\">L.consts</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_term</span>   <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func_term</span>  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">L.funcs</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">term</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n\n<p><strong>Full error message</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nested</span> <span class=\"kd\">inductive</span> <span class=\"n\">type</span> <span class=\"n\">compiled</span> <span class=\"n\">to</span> <span class=\"n\">invalid</span> <span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">nested</span> <span class=\"n\">occurrence</span> <span class=\"bp\">'</span><span class=\"n\">subtype.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_nest_1_1.list.term</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">_nest_1_1.list.term</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">list.length.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_nest_1_1.term</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">'</span> <span class=\"n\">contains</span> <span class=\"kd\">variables</span> <span class=\"n\">that</span> <span class=\"n\">are</span> <span class=\"n\">not</span> <span class=\"kd\">parameters</span>\n</code></pre></div>",
        "id": 211029651,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1600879314
    },
    {
        "content": "<p>I think if you replace <code>vector term n</code> with <code>fin n -&gt; term</code> it should work.</p>",
        "id": 211029745,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600879342
    },
    {
        "content": "<p>I don't know if that's what you would want to do though.</p>",
        "id": 211029761,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600879357
    },
    {
        "content": "<p>Thanks. That does work. I was using <code>vector _ n</code> as replacement of <code>fin n -&gt; term</code> anyway. Should I always use <code>fin n</code> instead?</p>",
        "id": 211029951,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1600879460
    },
    {
        "content": "<p>It's up to you, of course, but I think the <code>fin n</code> api is more developed.</p>",
        "id": 211029987,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600879488
    },
    {
        "content": "<p>Thanks. Also, do you know why it accepts <code>fin n</code> but not <code>vector</code>. What's the cause behind the nested inductive type error. Understanding that might help me debug this issue in the future.</p>",
        "id": 211030094,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1600879559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> ?</p>",
        "id": 211030162,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600879577
    },
    {
        "content": "<p>Because it's a nested inductive type</p>",
        "id": 211030231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600879613
    },
    {
        "content": "<p>Ah, so the problem is that <code>vector</code> is inductive?</p>",
        "id": 211030264,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600879633
    },
    {
        "content": "<p>The problem is that a plain inductive <em>only</em> allows recursive occurrences of the type being defined, possibly behind some pis, in arguments to the constructor</p>",
        "id": 211030307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600879678
    },
    {
        "content": "<p>anything else and it will go through the hacky nested inductive compiler</p>",
        "id": 211030369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600879695
    },
    {
        "content": "<p>Gotcha.</p>",
        "id": 211030406,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600879714
    },
    {
        "content": "<p>so <code>mk : (A -&gt; T) -&gt; T</code> is okay but <code>mk : set T -&gt; T</code> is not (it's inconsistent) and neither is <code>mk : vector T n -&gt; T</code> (because lean isn't smart enough to distinguish it from the second case)</p>",
        "id": 211030502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600879777
    },
    {
        "content": "<p>I also noticed that this issue is not encountered if using <code>list term</code></p>",
        "id": 211030597,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1600879817
    },
    {
        "content": "<p>the nested inductive compiler can handle that, at least, although I don't recommend it because the induction principle is wrong</p>",
        "id": 211030677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600879861
    },
    {
        "content": "<p>but no one considered dependent nested inductive types when writing the compiler</p>",
        "id": 211030756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600879898
    },
    {
        "content": "<p>The QPF framework being developed primarily by <span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span>  can handle these to some extent</p>",
        "id": 211030879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600879945
    },
    {
        "content": "<p>Thanks</p>",
        "id": 211031105,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1600880064
    },
    {
        "content": "<p>Unrelated to foundational issues, <span class=\"user-mention\" data-user-id=\"241485\">@Vaibhav Karve</span> you might be interested in the first order logic developed in the flypitch project<br>\n<a href=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean\">https://github.com/flypitch/flypitch/blob/master/src/fol.lean</a></p>",
        "id": 211031126,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600880073
    },
    {
        "content": "<p>Thanks for the link Adam. That is indeed very useful.</p>",
        "id": 211031218,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1600880125
    },
    {
        "content": "<p>(Also note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>-ary functions are constants :) )</p>",
        "id": 211031228,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600880128
    },
    {
        "content": "<p>There is some nice API in <code>vector</code> that isn't in <code>fin</code>, however. You can get back to <code>fin n -&gt; R</code> from <code>my_vector.nth</code>.</p>",
        "id": 211034724,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600881701
    },
    {
        "content": "<p>And from <code>fin n \\to R</code> to <code>vector n R</code> using <code>vector.of_fn</code></p>",
        "id": 211034821,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600881728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/nested.20inductive.20type.20error/near/211030756\">said</a>:</p>\n<blockquote>\n<p>but no one considered dependent nested inductive types when writing the compiler</p>\n</blockquote>\n<p>I don't think that is quite true, the following \"works\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"kd\">variable</span> <span class=\"n\">u</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">dvector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">dvector</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">dvector</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">dvector</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">func_term</span>  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">dvector</span> <span class=\"n\">term</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n\n<p>The problem is that <code>vector</code> is a subtype, which are not supported, and not an inductive family. <br>\nOf course I don't disagree with your point that one should avoid nested inductive types, including the one above.</p>",
        "id": 211051901,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600889642
    }
]