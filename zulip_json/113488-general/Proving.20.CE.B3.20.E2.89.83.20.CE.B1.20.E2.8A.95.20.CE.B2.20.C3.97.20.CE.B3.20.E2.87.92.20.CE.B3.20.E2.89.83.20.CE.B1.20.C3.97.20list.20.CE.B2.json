[
    {
        "content": "<p>I'm trying to formalize[1] some ideas from analytic combinatorics[2] and got stuck on trying to prove the following isomorphism:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">iso</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gf</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fg</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">linear</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">iso</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">iso</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">[]))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">::</span> <span class=\"n\">sorry</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">ys</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">)))</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>This is how I would do it in Haskell:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">data</span> <span class=\"n\">Iso</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">Iso</span> <span class=\"o\">{</span> <span class=\"n\">to</span> <span class=\"bp\">::</span> <span class=\"n\">a</span><span class=\"bp\">-&gt;</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">::</span> <span class=\"n\">b</span><span class=\"bp\">-&gt;</span><span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"n\">lin_iso_to</span> <span class=\"bp\">::</span> <span class=\"n\">Iso</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">])</span>\n<span class=\"n\">lin_iso_to</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">case</span> <span class=\"n\">to</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"n\">of</span>\n  <span class=\"n\">Left</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">[])</span>\n  <span class=\"n\">Right</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">lin_iso_to</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n\n<span class=\"n\">lin_iso_from</span> <span class=\"bp\">::</span> <span class=\"n\">Iso</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">])</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">c</span>\n<span class=\"n\">lin_iso_from</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">=</span> <span class=\"k\">from</span> <span class=\"n\">i</span> <span class=\"err\">$</span> <span class=\"n\">Left</span> <span class=\"n\">a</span>\n<span class=\"n\">lin_iso_from</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">from</span> <span class=\"n\">i</span> <span class=\"err\">$</span> <span class=\"n\">Right</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">lin_iso_from</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- c = a + b c   =&gt;   c = a (list b)</span>\n<span class=\"n\">lin_iso</span> <span class=\"bp\">::</span> <span class=\"n\">Iso</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Iso</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">])</span>\n<span class=\"n\">lin_iso</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">Iso</span> <span class=\"o\">{</span><span class=\"n\">to</span> <span class=\"bp\">=</span> <span class=\"n\">lin_iso_to</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">=</span> <span class=\"n\">lin_iso_from</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>but I can't figure out how to do the recursive call in <code>lin_iso_to</code>.</p>\n<p>I haven't used the well-founded machinery in Lean so far and I guess that's the missing piece for the above definition.</p>\n<p>[1] <a href=\"https://github.com/skaslev/papers/blob/master/analytic_functor.lean\">https://github.com/skaslev/papers/blob/master/analytic_functor.lean</a><br>\n[2] <a href=\"http://algo.inria.fr/flajolet/Publications/book.pdf\">http://algo.inria.fr/flajolet/Publications/book.pdf</a></p>",
        "id": 199651879,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1591206142
    },
    {
        "content": "<p>This doesn't look true, since lists are finite</p>",
        "id": 199652205,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591206299
    },
    {
        "content": "<p>or actually it just doesn't look true period</p>",
        "id": 199652269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591206327
    },
    {
        "content": "<p>Aren't potentially infinite streams another solution to <code>γ ≃ α ⊕ β × γ</code>?</p>",
        "id": 199652427,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591206392
    },
    {
        "content": "<p>Lists are potentially infinite in Haskell but always finite in Lean, if I understand correctly.</p>",
        "id": 199652444,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1591206400
    },
    {
        "content": "<p>In Lean <code>α × list β</code> is the initial algebra for <code>α ⊕ β × -</code> so you could build a map from <code>α × list β</code> to <code>γ</code>, but you can't necessarily go back</p>",
        "id": 199652584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591206471
    },
    {
        "content": "<p>The Haskell version works correctly though. What's missing imo is given <code>iso γ (α ⊕ β × γ)</code> to be able to do a recursive call over the γ on the rhs (since it should be \"smaller\" than the γ on the lhs and thus should terminate) but my well-founded-fu is nonexistent.</p>",
        "id": 199655768,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1591207863
    },
    {
        "content": "<p>It's not missing, though, because it's not true!</p>",
        "id": 199655990,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591208013
    },
    {
        "content": "<p>Lean's semantics correspond to ordinary math, and the statement you are trying to prove is false in ordinary math.</p>",
        "id": 199656005,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591208026
    },
    {
        "content": "<p>Haskell's semantics don't correspond to ordinary math so it's not surprising that you can \"prove\" it there.</p>",
        "id": 199656071,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591208048
    },
    {
        "content": "<p>Here is a counterexample, take <code>γ = α × list β ⊕ ℕ → β</code>. Then there is still an isomorphism <code>γ ≃ α ⊕ β × γ</code>, but there isn't an isomorphism <code>γ ≃ α × list β</code> (in general; for example, take <code>α</code> empty).</p>",
        "id": 199656180,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591208126
    },
    {
        "content": "<p>Can it be formally proved false in Lean then?</p>\n<p>I've been using this isomorphism for a while and I haven't be able to come up with contradiction or any surprises so far.</p>",
        "id": 199656233,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1591208157
    },
    {
        "content": "<p>Yes, just use this example above.</p>",
        "id": 199657127,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591208568
    },
    {
        "content": "<p>It's tempting to think that there should be some extra structure one can impose on top of bare sets to rule out examples like this one, but I don't know what it is.</p>",
        "id": 199657233,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591208628
    },
    {
        "content": "<p>But in Set, it's just false.</p>",
        "id": 199657242,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591208635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Proving.20.CE.B3.20.E2.89.83.20.CE.B1.20.E2.8A.95.20.CE.B2.20.C3.97.20.CE.B3.20.E2.87.92.20.CE.B3.20.E2.89.83.20.CE.B1.20.C3.97.20list.20.CE.B2/near/199657233\">said</a>:</p>\n<blockquote>\n<p>It's tempting to think that there should be some extra structure one can impose on top of bare sets to rule out examples like this one, but I don't know what it is.</p>\n</blockquote>\n<p>Maybe that initial algebras and final coalgebras coincide?</p>",
        "id": 199657364,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591208691
    },
    {
        "content": "<p>Right, but where does that actually happen.</p>",
        "id": 199657442,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591208738
    },
    {
        "content": "<p>Maybe in compact Hausdorff spaces for example.</p>",
        "id": 199657453,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591208744
    },
    {
        "content": "<p>In 'Hask' :P</p>",
        "id": 199657460,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591208751
    },
    {
        "content": "<p>Obligatory <code>Hask</code> is not a category link...</p>",
        "id": 199657547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591208773
    },
    {
        "content": "<p>I vaguely remember something about that happening in the category of CPOs with bottom, but might be misremembering</p>",
        "id": 199657557,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591208778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Proving.20.CE.B3.20.E2.89.83.20.CE.B1.20.E2.8A.95.20.CE.B2.20.C3.97.20.CE.B3.20.E2.87.92.20.CE.B3.20.E2.89.83.20.CE.B1.20.C3.97.20list.20.CE.B2/near/199657547\">said</a>:</p>\n<blockquote>\n<p>Obligator <code>Hask</code> is not a cateogry link...</p>\n</blockquote>\n<p>Hence the quotes around it!</p>",
        "id": 199657570,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591208788
    },
    {
        "content": "<p>right, and this is one place where you can say Haskell has its semantics I think</p>",
        "id": 199657620,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591208823
    },
    {
        "content": "<p>but it's rather far from Set</p>",
        "id": 199657626,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591208826
    },
    {
        "content": "<p>Here's a disproof</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">γ</span> <span class=\"err\">≃</span> <span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"err\">≃</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">unit</span> <span class=\"err\">≃</span> <span class=\"n\">empty</span> <span class=\"err\">⊕</span> <span class=\"n\">unit</span> <span class=\"bp\">×</span> <span class=\"n\">unit</span><span class=\"o\">,</span>\n<span class=\"k\">from</span> <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">((),()),</span>\n        <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">(),</span>\n        <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n        <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x_fst</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x_snd</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"kn\">end</span> <span class=\"o\">},</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">empty</span> <span class=\"n\">unit</span> <span class=\"n\">unit</span> <span class=\"n\">this</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>",
        "id": 199657866,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591208930
    },
    {
        "content": "<p>The same idea lets you construct a term of type <code>Void</code> in Haskell</p>",
        "id": 199658828,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591209383
    },
    {
        "content": "<p>What's the actual bit of maths you wanted  this result for?</p>",
        "id": 199659285,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591209626
    },
    {
        "content": "<p>For constructing other isomorphisms (<code>iso.linear</code> is the offending  proposition<code>γ ≃ α ⊕ β × γ ⇒ γ ≃ α × list β</code>) such as<br>\n<a href=\"https://github.com/skaslev/papers/blob/3d42174fa43cd71680a89c5cc14924b21d0b57de/analytic_functor.lean#L596-L607\">https://github.com/skaslev/papers/blob/3d42174fa43cd71680a89c5cc14924b21d0b57de/analytic_functor.lean#L596-L607</a><br>\n<a href=\"https://github.com/skaslev/papers/blob/3d42174fa43cd71680a89c5cc14924b21d0b57de/analytic_functor.lean#L701-L716\">https://github.com/skaslev/papers/blob/3d42174fa43cd71680a89c5cc14924b21d0b57de/analytic_functor.lean#L701-L716</a></p>",
        "id": 199661362,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1591210717
    },
    {
        "content": "<p>Well, those are all fine; you could construct the isomorphisms directly.</p>",
        "id": 199661910,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591211017
    },
    {
        "content": "<p>This last use was giving me grief last time I tried to prove it directly <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span></p>\n<p><a href=\"https://github.com/skaslev/papers/blob/3d42174fa43cd71680a89c5cc14924b21d0b57de/analytic_functor.lean#L774-L776\">https://github.com/skaslev/papers/blob/3d42174fa43cd71680a89c5cc14924b21d0b57de/analytic_functor.lean#L774-L776</a></p>",
        "id": 199667374,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1591213546
    }
]