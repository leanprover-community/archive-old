[
    {
        "content": "<p>In order to avoid continued hijacking <a href=\"#narrow/stream/144837-PR-reviews/topic/.233403\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.233403</a> (sorry <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>), I'm starting this thread.</p>",
        "id": 204457511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595269485
    },
    {
        "content": "<p>Probably lots of people have thought about this before.</p>",
        "id": 204457530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595269502
    },
    {
        "content": "<p>How hard would it be to have a more formal approach to \"specification\" and \"implementation\"?</p>",
        "id": 204457574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595269528
    },
    {
        "content": "<p>If I could write:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">specification</span> <span class=\"n\">natural_number_object</span> <span class=\"o\">:=</span> <span class=\"n\">initial</span> <span class=\"n\">semiring</span> <span class=\"n\">blabla</span>\n\n<span class=\"c1\">-- and then</span>\n\n<span class=\"n\">implementation</span> <span class=\"n\">natural_number_object</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"k\">proof</span>\n\n<span class=\"n\">implementation</span> <span class=\"n\">natural_number_object</span> <span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"k\">proof</span>\n</code></pre></div>\n\n\n<p>would that help?</p>",
        "id": 204457762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595269621
    },
    {
        "content": "<p>Of course we <em>can</em> do that with typeclasses.</p>",
        "id": 204457788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595269630
    },
    {
        "content": "<p>But maybe that abusing a system for something it isn't <em>really</em> designed for/ meant to be used for.</p>",
        "id": 204457832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595269654
    },
    {
        "content": "<p>I'm not sure if we want to prove lemmas about polynomials by starting</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">RX</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">RX</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">polynomial_like_type</span> <span class=\"n\">R</span> <span class=\"n\">RX</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 204458003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595269719
    },
    {
        "content": "<p>In particular, what typeclasses currently don't allow, but what I <em>would want</em> to have from this \"spec/impl\" business, is that if I need to prove that some polynomial of degree 3 is irreducible over <code>zmod 5</code>, then I can just say <code>exact dec_trivial</code> and Lean should automatically figure out that it can translate the question to one of the computational implementations, and run the computation itself.</p>",
        "id": 204458343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595269894
    },
    {
        "content": "<p>But then, nevertheless, the theorem should be a theorem about <em>all</em> implementations, in other words a theorem that follows from the \"spec\".</p>",
        "id": 204458461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595269939
    },
    {
        "content": "<p>Does that even make sense?</p>",
        "id": 204458470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595269944
    },
    {
        "content": "<p>this is the <code>equiv_rw</code> problem, right?</p>",
        "id": 204458545,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595270000
    },
    {
        "content": "<p>you have two types and you know they satisfy the same sentences in the theory of rings</p>",
        "id": 204458566,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595270024
    },
    {
        "content": "<p>in order to prove some particular thing about theorem-rings, you equiv to a theorem about compute-rings, run the computation, and then come back</p>",
        "id": 204458671,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595270079
    },
    {
        "content": "<p>but we already don't have great machinery for doing this between two proof-y types</p>",
        "id": 204458689,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595270097
    },
    {
        "content": "<p>I guess we need automation for proving that a particular lemma is part of the theory of rings</p>",
        "id": 204458759,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595270161
    },
    {
        "content": "<p>In the special case of computations, maybe it's not so much of an issue</p>",
        "id": 204458841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595270198
    },
    {
        "content": "<p>why? is it because you want the theory of the computational type to be exactly the theory of the proving type?</p>",
        "id": 204458872,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595270235
    },
    {
        "content": "<p>You could just apply <code>computational_polynomial_equiv.injective</code>, and then simp the equiv through the expression.</p>",
        "id": 204458875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595270238
    },
    {
        "content": "<p>Whereas for a generic lemma, it is not obvious that you are only multiplying and adding some variables.</p>",
        "id": 204458908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595270271
    },
    {
        "content": "<p>Otoh, I guess if there is an <code>ite</code> in there, then we might already need some specialized simp-lemmas. And maybe there is a <code>polynomial.map</code>, etc...</p>",
        "id": 204458995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595270307
    },
    {
        "content": "<p>So already, there will be quite some headache.</p>",
        "id": 204459010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595270317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/computation.20vs.20proving/near/204458343\">said</a>:</p>\n<blockquote>\n<p>In particular, what typeclasses currently don't allow, but what I <em>would want</em> to have from this \"spec/impl\" business, is that if I need to prove that some polynomial of degree 3 is irreducible over <code>zmod 5</code>, then I can just say <code>exact dec_trivial</code> and Lean should automatically figure out that it can translate the question to one of the computational implementations, and run the computation itself.</p>\n</blockquote>\n<p>But this <em>is</em> exactly what <code>dec_trivial</code> does</p>",
        "id": 204508131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595299947
    },
    {
        "content": "<p>(The point being you just need to provide the <code>decidable</code> instances that show how to do the translation.)</p>",
        "id": 204508149,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595300025
    },
    {
        "content": "<p>The main issue is that we usually use \"least common denominator\" algorithms with relatively poor asymptotic complexity because we don't assume any extra structure on the classes</p>",
        "id": 204508153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595300030
    },
    {
        "content": "<p>but you could easily have multiple <code>decidable</code> instances for the same predicate with different priorities and additional typeclass assumptions for specialized procedures that aren't always applicable</p>",
        "id": 204508199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595300092
    },
    {
        "content": "<p>A nice warmup problem for this is to implement a decidable instance for <code>a &lt; b</code> on <code>nat</code> that is O(log n)</p>",
        "id": 204508267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595300181
    },
    {
        "content": "<p>Somehow, it's not good enough... because the <code>decidable_*</code> instances <em>infect</em> our definitions, and make it hard to prove generic stuff about the definitions.</p>",
        "id": 204511473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595305643
    },
    {
        "content": "<p>Why are polynomials currently noncomputable? We didn't change any definitions, apart from ripping out <code>decidable_*</code> assumptions. But that's complete nonsense. If <code>decidable_eq R</code> is present, it should manage to compute even though that wasn't an assumption on the definition.</p>",
        "id": 204511530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595305731
    },
    {
        "content": "<p>I think using typeclasses for this is perfectly fine. To me it seems  analogous to <code>decidable</code>:</p>\n<ul>\n<li>With a proposition, we cannot construct data depending on whether it is true or false (without choice), so we tag it with a class <code>decidable</code> for the propositions for which we can</li>\n<li>With a noncomputable def, I cannot compute. So I tag it with a class <code>computable</code> which contains an implementation and a proof that the implementation is equal to the noncomputable def. Now I can compute with the implementation.</li>\n</ul>\n<p>I think you can do something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">computes</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">certificate</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">compute</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">computes</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"err\">‹</span><span class=\"n\">computes</span> <span class=\"n\">x</span><span class=\"err\">›</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n\n<span class=\"n\">def</span> <span class=\"n\">computable_fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">computes</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204512199,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595306934
    },
    {
        "content": "<p>This only supports \"heavy <code>rfl</code>\"-style computation though, right?</p>",
        "id": 204602102,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595365114
    },
    {
        "content": "<p>For me <code>norm_num</code> is the model here--<code>norm_str</code> was a joke but there's no reason not to have a <code>norm_poly</code> that can compute things like degrees and whether polynomials are irreducible, regardless of whether <code>polynomial</code> is itself computable or not.</p>",
        "id": 204602839,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595365538
    },
    {
        "content": "<p>The question in my mind is how to design this in a coherent way where <code>norm_poly</code> knows to invoke <code>norm_num</code> to decide whether a coefficient is zero if that makes sense, but maybe to invoke <code>norm_poly</code> if the coefficient is actually another polynomial, etc.</p>",
        "id": 204603128,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595365700
    },
    {
        "content": "<p>This is not the same as <code>decidable_eq</code>--that one is an internal notion of decidability (which is classically trivial) but here we want an algorithm to (attempt to) decide whether two <em>terms</em> are provably equal.</p>",
        "id": 204603295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595365809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/computation.20vs.20proving/near/204603128\">said</a>:</p>\n<blockquote>\n<p>The question in my mind is how to design this in a coherent way where <code>norm_poly</code> knows to invoke <code>norm_num</code> to decide whether a coefficient is zero if that makes sense, but maybe to invoke <code>norm_poly</code> if the coefficient is actually another polynomial, etc.</p>\n</blockquote>\n<p>The way I would like this to be implemented is as plugins for <code>norm_num</code>, so that it can handle things other than simple numeric computations but can also do basic beta reduction and definition expansion for unknown functions, as well as decision procedures for things like matrix and polynomial computation. At that point it becomes more of a general purpose evaluator so the name <code>norm_num</code> will not fit anymore, but that's how I imagine it evolving.</p>",
        "id": 204643256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595408097
    },
    {
        "content": "<p>By the way, I sort of hinted at this above but it's actually possible to compute on <em>terms</em> using well crafted typeclass instances</p>",
        "id": 204643386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595408171
    },
    {
        "content": "<p>Since no one solved the puzzle, here's the solution:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"bp\">.</span><span class=\"n\">lemmas</span>\n\n<span class=\"n\">class</span> <span class=\"n\">to_num</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">to_num</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">to_num</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">bit0</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">to_num</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">to_num</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">bit1</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">to_num</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">to_num</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">decidable_lt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">to_num</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">to_num</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">1000</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">345813045810345183</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2351384051340513405</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>\n\n\n<p>This is pretty fast even though it does only kernel computation</p>",
        "id": 204643859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595408541
    },
    {
        "content": "<p>The instance max depth only needs to be raised because the depth is proportional to the size of the numbers, and those numbers are not 32 bit</p>",
        "id": 204643914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595408592
    },
    {
        "content": "<p>With a simple extension we can get fast kernel addition and multiplication on <code>nat</code> as well:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">to_num</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">to_num</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">to_num</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">to_num</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">to_num</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">to_num</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">1000</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">500</span> <span class=\"bp\">*</span> <span class=\"mi\">500</span> <span class=\"bp\">*</span> <span class=\"mi\">500</span> <span class=\"bp\">*</span> <span class=\"mi\">39</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">235138405</span> <span class=\"bp\">*</span> <span class=\"mi\">134051340</span> <span class=\"bp\">+</span> <span class=\"mi\">12</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 204644249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595408852
    },
    {
        "content": "<p>Also notice that this can also easily be adapted to prove things like <code>(3 * 4 : real) &lt; 17</code></p>",
        "id": 204644813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595409302
    },
    {
        "content": "<p>Mario that is_really_ cool :D</p>",
        "id": 204648134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595412020
    },
    {
        "content": "<p>Can it prove 617 is prime?</p>",
        "id": 204648160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595412042
    },
    {
        "content": "<p>The limitation of this technique is that it can't do \"nondeterministic\" computation like tactics can, so you don't get short certificate proofs (for example to prove non-primality). Also the best environment for this uses the <code>semidecidable</code> class instead of <code>decidable</code> (which I think still has yet to be defined because of bikeshedding over the name, but is basically <code>option p</code>), because many kinds of proof methods aren't actually decision procedures, for example proving that numerals are equal in a possibly nonzero characteristic ring</p>",
        "id": 204753914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595469795
    },
    {
        "content": "<p>But for proving primality, you aren't really doing any short circuiting anyway for a proof by trial division, so you could do something similar there. I would have to write the <code>num.prime</code> decision procedure first though</p>",
        "id": 204753978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595469871
    },
    {
        "content": "<p>Using <a href=\"https://github.com/leanprover-community/mathlib/issues/3525\">#3525</a>, this method also extends to primality proofs:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">decidable_prime</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">to_num</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">num</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">to_num</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"mi\">617</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- takes about 200 ms</span>\n</code></pre></div>",
        "id": 204761241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595481061
    },
    {
        "content": "<p>Everything is trivial</p>",
        "id": 204765429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595487304
    },
    {
        "content": "<p>Relevant link: <a href=\"https://aphyr.com/posts/342-typing-the-technical-interview\">https://aphyr.com/posts/342-typing-the-technical-interview</a></p>",
        "id": 204775372,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595495721
    }
]