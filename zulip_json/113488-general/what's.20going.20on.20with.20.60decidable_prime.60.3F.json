[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.nat.prime\n\nopen nat\n\nexample : prime 11 := dec_trivial\n</pre></div>\n\n\n<p>fails, with </p>\n<div class=\"codehilite\"><pre><span></span>exact tactic failed, type mismatch, given expression has type\n  true\nbut is expected to have type\n  as_true (prime 11)\n</pre></div>\n\n\n<p>but </p>\n<div class=\"codehilite\"><pre><span></span>import data.nat.prime\n\nopen nat\n\ninstance (n : â„•) : decidable (prime n) := nat.decidable_prime_1 n\nexample : prime 11 := dec_trivial\n</pre></div>\n\n\n<p>works. What's going with with <code>nat.decidable_prime</code>? It seems to be failing.</p>",
        "id": 159270864,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551004143
    },
    {
        "content": "<p>There are two decidable instances. One works in the VM and the other works in the kernel</p>",
        "id": 159270917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551004203
    },
    {
        "content": "<p>You should use <code>by norm_num</code> to prove this though</p>",
        "id": 159270932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551004245
    },
    {
        "content": "<p>I see. Maybe we should put some comments on those instances explaining this.</p>",
        "id": 159270945,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551004287
    },
    {
        "content": "<p>I think that would a good idea as <a href=\"#narrow/stream/113489-new-members/topic/Why.20doesn't.20dec_trivial.20solve.20.60prime.203.60.3F/near/136417706\" title=\"#narrow/stream/113489-new-members/topic/Why.20doesn't.20dec_trivial.20solve.20.60prime.203.60.3F/near/136417706\">this has come up before</a>.</p>",
        "id": 159280019,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1551022244
    },
    {
        "content": "<p>Ok, I've made <a href=\"https://github.com/leanprover-community/mathlib/pull/757\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/757\">https://github.com/leanprover-community/mathlib/pull/757</a>. If someone could check that I actually wrote the right things, that would be great. :-)</p>",
        "id": 159290324,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551040335
    },
    {
        "content": "<p>I still don't understand why <code>example : prime 11 := dec_trivial</code> with the default instances actually fails. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> have explained at <a href=\"https://github.com/leanprover-community/mathlib/pull/757\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/757\">https://github.com/leanprover-community/mathlib/pull/757</a> that the problem is the kernel having to unfold proofs in the well-founded recursion used by the first instance. But why failure, rather than just being slow?!</p>",
        "id": 159291196,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551041652
    },
    {
        "content": "<p>because proofs are irreducible</p>",
        "id": 159291201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551041686
    },
    {
        "content": "<p>So, why do we provide that default <code>decidable_prime</code> instance at all? It's apparently faster in the VM, but who is actually taking advantage of that?</p>",
        "id": 159292165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551042059
    },
    {
        "content": "<p>It means that <code>#eval</code> and tactics can use it</p>",
        "id": 159293214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551042388
    },
    {
        "content": "<p>I think <code>norm_num</code> uses it</p>",
        "id": 159293247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551042403
    },
    {
        "content": "<p>I think it is actually a timeout problem. I traced the evaluation of <code>nat.prime 7</code> back to evaluation of <code>nat.size 7</code>, which times out when you <code>#reduce</code></p>",
        "id": 159293375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551042461
    },
    {
        "content": "<p>I think it might be the <code>rw</code> inside <code>binary_rec</code></p>",
        "id": 159293529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551042513
    },
    {
        "content": "<p>let's make a PR to core!</p>",
        "id": 159297204,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551043810
    }
]