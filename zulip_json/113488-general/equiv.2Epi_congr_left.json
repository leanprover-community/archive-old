[
    {
        "content": "<p>Is this even provable?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">u₃</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">pi_congr_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 191329752,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584768685
    },
    {
        "content": "<p>or perhaps since it's not even true in topological spaces, I shouldn't expect to prove it in dependent type theory??</p>",
        "id": 191329879,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584768854
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">forall_congr_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">mpr</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">convert</span> <span class=\"n\">g</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>is perfectly okay.</p>",
        "id": 191329952,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584768994
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 191330205,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584769544
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">pi_congr_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_apply</span> <span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">apply</span> <span class=\"n\">eq_of_heq</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">eq_rec_heq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_apply</span><span class=\"o\">]</span>  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"n\">apply</span> <span class=\"n\">eq_of_heq</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">eq_rec_heq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply_symm_apply</span> <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 191330260,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584769627
    },
    {
        "content": "<p>(probably needs style tweaks before submitting a PR)</p>",
        "id": 191330304,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584769688
    },
    {
        "content": "<p>Slightly golfed:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">pi_congr_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_apply</span> <span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eq_of_heq</span> <span class=\"o\">(</span><span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">eq_rec_heq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_apply</span><span class=\"o\">]</span> <span class=\"o\">})),</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eq_of_heq</span> <span class=\"o\">(</span><span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">eq_rec_heq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply_symm_apply</span> <span class=\"o\">}))</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 191330579,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584770266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, do you know how to turn <code>eq.mpr</code> into <code>eq.rec_on</code>?</p>",
        "id": 191331044,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584771133
    },
    {
        "content": "<p>Usually my instinct is that this is the bad direction, but to follow your proof in another situation I now want it!</p>",
        "id": 191331045,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584771154
    },
    {
        "content": "<p>Think I've got it.</p>",
        "id": 191331304,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584771680
    },
    {
        "content": "<p>And here's the \"full\" version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">u₃</span> <span class=\"n\">u₄</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">pi_congr</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u₄</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"n\">a</span> <span class=\"err\">≃</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">W</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Z</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">apply_symm_apply</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">b</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">eq_of_heq</span> <span class=\"o\">((</span><span class=\"n\">eq_rec_heq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_apply</span><span class=\"o\">))),</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">eq_of_heq</span> <span class=\"o\">((</span><span class=\"n\">eq_rec_heq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">apply_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">})),</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 191331794,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584772723
    },
    {
        "content": "<p>here's a <code>heq</code>-less proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">pi_congr_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply_symm_apply</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_apply</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply_symm_apply</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 191333691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584776994
    },
    {
        "content": "<p>or with match:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">pi_congr_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply_symm_apply</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_apply</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply_symm_apply</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 191333858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584777342
    },
    {
        "content": "<p>However, <code>pi_congr</code> is easy given these two lemmas:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">pi_congr</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">W</span> <span class=\"n\">a</span> <span class=\"err\">≃</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">W</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Z</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">Pi_congr_right</span> <span class=\"n\">e₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">pi_congr_left</span> <span class=\"bp\">_</span> <span class=\"n\">e₁</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 191334146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584777781
    },
    {
        "content": "<p>If it's any consolation, it was already trivial in maths ;-)</p>",
        "id": 191334194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584777892
    },
    {
        "content": "<p>the reason I didn't prove this in the first place is because the statement looks too difficult to use well</p>",
        "id": 191334206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584777931
    },
    {
        "content": "<p>The capitalization on <code>Pi</code> is inconsistent here</p>",
        "id": 191334251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584777985
    },
    {
        "content": "<p>cool!</p>",
        "id": 191334434,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584778333
    },
    {
        "content": "<p>oh, actually... I don't like the statement of <code>pi_congr_left</code> as much as the previous ones. That is, I think  <code>(Π a, P a) ≃ (Π b, P (e.symm b))</code> is the more natural conclusion.</p>",
        "id": 191334686,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584778789
    },
    {
        "content": "<p>do you have a strong opinion about what should be in the library?</p>",
        "id": 191334732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584778809
    },
    {
        "content": "<p>I just want to think of it as: given an equivalence that turns α into β, what does <code>Π a, P a</code> turn into? And so I want the equivalence showing up only on the right hand side.</p>",
        "id": 191334757,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584778922
    },
    {
        "content": "<p>It is very important that the statement of the theorem use <code>e</code> and not <code>e.symm</code></p>",
        "id": 191335374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584780068
    },
    {
        "content": "<p>why is that?</p>",
        "id": 191335383,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584780093
    },
    {
        "content": "<p>because an arbitrary equivalence is not always defeq to some <code>e.symm</code></p>",
        "id": 191335387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584780114
    },
    {
        "content": "<p>this is why you can prove <code>pi_congr</code> using my version of <code>pi_congr_left</code> but not yours</p>",
        "id": 191335434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584780146
    },
    {
        "content": "<p>Really? Is e.symm.symm not defeq to e?</p>",
        "id": 191335440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584780153
    },
    {
        "content": "<p>no, that is impossible to arrange</p>",
        "id": 191335442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584780164
    },
    {
        "content": "<p>it is possible to make it defeq up to eta expanding <code>e</code>, meaning that it will be defeq for any concrete function, but not given a variable</p>",
        "id": 191335459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584780213
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Pi_congr_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Pi_congr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">W</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Z</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">Pi_congr_right</span> <span class=\"n\">h₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">Pi_congr_left</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</pre></div>\n\n\n<p>seems to work fine.</p>",
        "id": 191335460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584780228
    },
    {
        "content": "<p>Then again, <code>e.symm.symm.to_fun</code> is defeq to <code>e.to_fun</code></p>",
        "id": 191335505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584780256
    },
    {
        "content": "<p>oh, eta expansion. I never understand why this is not <code>rfl</code></p>",
        "id": 191335506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584780263
    },
    {
        "content": "<p>which I think is why the proof scott just gave works</p>",
        "id": 191335507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584780275
    },
    {
        "content": "<p>still, it's a tricky reduction that I don't want to have to rely on in a more involved context</p>",
        "id": 191335512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584780320
    },
    {
        "content": "<p>so... can I have primed versions of <code>Pi_congr_left</code> and <code>sigma_congr_left</code> that go the direction I want? :-)</p>",
        "id": 191335513,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584780328
    },
    {
        "content": "<p>I also think that order is appropriate given the way we usually write simp rules</p>",
        "id": 191335553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584780365
    },
    {
        "content": "<p>I really can't get by with your ones, it seems...</p>",
        "id": 191335556,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584780373
    },
    {
        "content": "<p>?</p>",
        "id": 191335559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584780389
    },
    {
        "content": "<p>it's a bit complicated... see the <code>equiv_rw</code> branch?</p>",
        "id": 191335567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584780429
    },
    {
        "content": "<p>I really really need to sleep now</p>",
        "id": 191335569,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584780436
    },
    {
        "content": "<p>If you need that particular form, a primed version is fine</p>",
        "id": 191335572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584780456
    },
    {
        "content": "<p>so maybe we can work this out later</p>",
        "id": 191335573,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584780456
    },
    {
        "content": "<p>okay <a href=\"https://github.com/leanprover-community/mathlib/issues/2204\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2204\">#2204</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/2205\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2205\">#2205</a> hopefully do the right things</p>",
        "id": 191335703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584780709
    },
    {
        "content": "<p>You can always rewrite right to left.</p>",
        "id": 191335957,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584781149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/equiv.2Epi_congr_left/near/191335506\" title=\"#narrow/stream/113488-general/topic/equiv.2Epi_congr_left/near/191335506\">said</a>:</p>\n<blockquote>\n<p>oh, eta expansion. I never understand why this is not <code>rfl</code></p>\n</blockquote>\n<p>It isn't because it's one of the rules of the game called Lean. In principle, you can change this rule. But that would cause other headaches.</p>",
        "id": 191337601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584783990
    },
    {
        "content": "<p>Do we know it would? It would make Lean equality closer to what equality actually means...</p>",
        "id": 191338906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584786259
    },
    {
        "content": "<p><code>ext</code> is an axiom, right?</p>",
        "id": 191338908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584786267
    },
    {
        "content": "<p><code>funext</code> is a theorem proved in stdlib using existence of quotients.</p>",
        "id": 191339435,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584787113
    },
    {
        "content": "<p>Right. But it \"feels\" to me like a lot of the <code>ext</code>theorems should be true by definition. A whole is nothing more than the sum of its parts.</p>",
        "id": 191352113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584806097
    }
]