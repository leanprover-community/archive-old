[
    {
        "content": "<p>Is it possible to have some sort of tool where large pp.all terms can be folded up in manageable ways -- I am looking at a term that starts <code>@eq alpha (XXXXXXXXXXXXXXXX...) (YYYYYYYYYYYYYYYYYYY.....)</code> and I would like to see the head term of  <code>YYYYY...</code> but it's hard to find in the <code>pp.all</code> output.</p>",
        "id": 163834514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555821386
    },
    {
        "content": "<p>Have you tried other <code>pp</code> options?</p>",
        "id": 163834593,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555821568
    },
    {
        "content": "<p>I would get the expr out with tactics</p>",
        "id": 163834597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555821597
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">fooooooo</span> <span class=\"n\">barrrrrrrrr</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fooooooo</span> <span class=\"bp\">=</span> <span class=\"n\">barrrrrrrrr</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">pp</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n</pre></div>",
        "id": 163834656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555821697
    },
    {
        "content": "<p><code>convert rfl</code> is not safe to use! You don't want to try proving <code>mul_comm</code> with it. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span>  <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"n\">convert</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ b = a</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I would like to be able to do some more delicate analysis</p>",
        "id": 163834704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555821775
    },
    {
        "content": "<p>there is a :1 argument for <code>convert</code> I think</p>",
        "id": 163834717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555821832
    },
    {
        "content": "<p><code>convert rfl using 0</code></p>",
        "id": 163834764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555821862
    },
    {
        "content": "<p>hm, <code>congr' 0</code> fails because it makes no progress. I think <code>convert</code> needs to be fixed to reflect that</p>",
        "id": 163834834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555822043
    },
    {
        "content": "<p>oh but in your case it's fine because you want <code>congr' 1</code> anyway</p>",
        "id": 163834887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555822124
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span>  <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">rfl</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ b * a = a * b</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163834897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555822148
    },
    {
        "content": "<p>that said, <code>convert rfl</code> looks pretty useless</p>",
        "id": 163834898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555822168
    },
    {
        "content": "<p><code>convert </code>rfl` is really good when you have two terms which are defeq up to subsingleton typeclass inference equality issues</p>",
        "id": 163834964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555822281
    },
    {
        "content": "<p>isn't that just <code>congr'</code>?</p>",
        "id": 163834969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555822298
    },
    {
        "content": "<p>This happened to me a fair bit when I was doing sheaves.</p>",
        "id": 163834970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555822299
    },
    {
        "content": "<p>Maybe; I don't know the difference between <code>congr</code> and <code>congr'</code>, I don't really understand them properly.</p>",
        "id": 163835016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555822341
    },
    {
        "content": "<p><code>congr'</code> is <code>congr</code> with bugfixes</p>",
        "id": 163835019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555822357
    },
    {
        "content": "<p>and a depth limiter</p>",
        "id": 163835020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555822365
    },
    {
        "content": "<p>I've never used it without <code>1</code></p>",
        "id": 163835343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555822971
    },
    {
        "content": "<p>i also thought <code>convert rfl using k</code> is equivalent to <code>congr' k</code></p>",
        "id": 163857516,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1555863298
    }
]