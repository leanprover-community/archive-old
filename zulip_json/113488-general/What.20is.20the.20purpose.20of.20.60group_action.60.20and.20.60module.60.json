[
    {
        "content": "<p>There are certain classes which are defined to be exactly some other class, with the only difference that they make more assumptions on the carrier types. Examples: a <code>group_action</code> is exactly a <code>monoid_action</code> where the acting monoid is a group; a <code>module</code> is exactly a <code>semimodule</code> where the scalar semiring is a ring.<br>\nWhat is the purpose of such classes. Do they only exist for reasons of terminology, or are there also other benefits?</p>",
        "id": 161530549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553355513
    },
    {
        "content": "<p>I did it like that because somebody complained about not having <code>vector_space</code>, and I thought they might complain about this as well.</p>",
        "id": 161531551,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553357095
    },
    {
        "content": "<p>I understand. But maybe it does complicate the type class graph. Leading to more complicated instance searches, etc... So we might also just have a class called <code>action</code>.</p>",
        "id": 161535503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553362869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> What do you think? Are these issues, or is this irrelevant?</p>",
        "id": 161536453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553364318
    },
    {
        "content": "<p>Creating the extra class does mean restating lots of lemmas etc...</p>",
        "id": 161536477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553364353
    },
    {
        "content": "<p>What if an undergraduate asks \"where are vector spaces?\" and you reply \"oh, just use modules\" and they say \"what is a module\"?</p>",
        "id": 161538224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553367271
    },
    {
        "content": "<p>What if an undergrad uses vector spaces, and he has to prove <code>0 \\in V</code>, and you say, oh that's <code>module.zero_mem</code>.</p>",
        "id": 161538308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553367443
    },
    {
        "content": "<p>Or whatever...</p>",
        "id": 161538311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553367453
    },
    {
        "content": "<p>The hierarchy is leaking through everywhere. I don't think we can really avoid that.</p>",
        "id": 161538312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553367471
    },
    {
        "content": "<p>We can't just define vector_space.zero_mem? What's the problem with this approach?</p>",
        "id": 161538357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553367496
    },
    {
        "content": "<p>That it is a duplication of effort, and harder to maintain</p>",
        "id": 161538362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553367523
    },
    {
        "content": "<p>Because it will go out of sync</p>",
        "id": 161538364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553367534
    },
    {
        "content": "<p>Maybe a tactic?</p>",
        "id": 161538379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553367552
    },
    {
        "content": "<p>Maybe...</p>",
        "id": 161538380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553367559
    },
    {
        "content": "<p>Anyway, I'm fine with making an exception for <code>vector_space</code> for pedagogical reasons. Note that I didn't mention <code>vector_space</code> in my first post. I purposefully chose <code>group_action</code> and <code>module</code>.</p>",
        "id": 161538447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553367615
    },
    {
        "content": "<p>Modules are different to vector spaces, I think it's inevitable that one should expect submodule.zero_mem and subspace.zero_mem and subring.zero_mem and subgroup.zero_mem and all sorts of other zero_mems</p>",
        "id": 161538530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553367773
    },
    {
        "content": "<p>I don't how often I've written <code>apply is_add_subgroup.add_mem</code>. Lean still doesn't know what I mean...</p>",
        "id": 161539290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553369132
    },
    {
        "content": "<p>you could fix it ;-)</p>",
        "id": 161539348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553369183
    },
    {
        "content": "<p>I don't know if it should be fixed...</p>",
        "id": 161539444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553369390
    },
    {
        "content": "<p>I'd be very happy to get rid of group actions. I'd also be happy to rename the <code>is_monoid_action</code> theorems to whatever they're called for vector spaces, <code>one_smul</code> or whatever. <code>module</code> should probably extend <code>monoid_action</code>, or at least there should be an instance saying every module is a monoid action.</p>",
        "id": 161581392,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553437233
    },
    {
        "content": "<p>In group cohomology one has groups acting on abelian groups (with group law +). The definition is that the group acts on the underlying type by morphisms which preserve addition. This definition extends to monoid actions on abelian groups (although I don't think I've ever seen it being used for monoids which are not either groups or rings).</p>",
        "id": 161581708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553437776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I suggest merging the current PR first, and then changing those names etc... in a follow-up PR.</p>",
        "id": 161616042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553492080
    },
    {
        "content": "<p>That keeps the PR's nice and small</p>",
        "id": 161616060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553492111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Are there CS reasons for having these type classes? Do they help type class search, or do they hamper it?</p>",
        "id": 161620544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553499077
    },
    {
        "content": "<p>The usual downside of such trivial classes is that implicit coercion only works in one direction: If you have an <code>is_monoid_action</code> on a group, it's not automatically an <code>is_group_action</code>. You have to explicitly declare an instance for that. That may not be an issue, but if it is, <code>is_group_action</code> could be defined as an <code>abbreviation</code> (i.e. reducible) so that type class search treats it as equivalent to <code>is_monoid_action</code>.</p>",
        "id": 161623207,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1553502496
    },
    {
        "content": "<p>I don't see any upsides other than terminology</p>",
        "id": 161623213,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1553502514
    },
    {
        "content": "<p>Ok, I could imagine that you would shortcut some type class searches this way...</p>",
        "id": 161623445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553502792
    },
    {
        "content": "<p>But I think that the downside you mention is enough reason to do away with this class.</p>",
        "id": 161623460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553502822
    },
    {
        "content": "<p>Should we also generalise <code>is_ring_hom</code> to only assume <code>semiring</code> instances? (I would vote for not changing the name... even if it is not exactly accurate.)</p>",
        "id": 161741001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553589063
    },
    {
        "content": "<p>Nevermind... the difference is of course that you need to make <code>map_zero</code> explicit for semirings</p>",
        "id": 161753463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553601199
    }
]