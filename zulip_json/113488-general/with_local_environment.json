[
    {
        "content": "<p>Is there a combinator like <code>with_local_goals</code> which lets me scope modifications to the environment? (In my case, I am interested in setting attributes for the scope of a single tactic.)</p>",
        "id": 198324747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590070145
    },
    {
        "content": "<p>I found a relatively painless way to reimplement my continuity tactic: use <code>apply_rules</code>, but locally make <code>continuous</code> irreducible, to work around the apply bug.<br>\n<a href=\"https://github.com/rwbarton/lean-homotopy-theory/commit/ce83a76df05505f53101d420cc08b0597ceea552\">https://github.com/rwbarton/lean-homotopy-theory/commit/ce83a76df05505f53101d420cc08b0597ceea552</a></p>",
        "id": 198332944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590074046
    },
    {
        "content": "<p>Do we know if Gabriel has a slot in next week's release of Lean to fix the apply bug?</p>",
        "id": 198333113,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590074125
    },
    {
        "content": "<p>(Gabriel, you've been very dangerously raising our expectations recently)</p>",
        "id": 198333297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590074189
    },
    {
        "content": "<p>I don't believe it is fixable</p>",
        "id": 198333369,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590074226
    },
    {
        "content": "<p>But Gabriel is welcome to prove me wrong</p>",
        "id": 198333386,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590074233
    },
    {
        "content": "<p>But on the subject of this topic, my implementation is a bit crude because (1) in principle, <code>continuous</code> might not be <code>semireducible</code> in the first place, in which case restoring it is wrong; (2) I'm not sure what happens if the inner tactic (<code>tidy cfg'</code>) fails with an exception which is caught somewhere outside--can I end up in a state where <code>continuous</code> is <code>irreducible</code>?</p>",
        "id": 198334445,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590074735
    },
    {
        "content": "<p>I guess you could do the <code>bracket</code> thing:</p>\n<ul>\n<li>Check if <code>continuous</code> is <code>semireducible</code>.</li>\n<li>Set <code>continuous</code> to <code>semireducible</code>.</li>\n<li>Try to run the inner tactic; capture its result or the thrown exception. (The combinator for this might not exist yet, but should be implementable.)</li>\n<li>Restore the previous 'semireducibility' of <code>continuous</code>.</li>\n<li>Return the result of the inner tactic or rethrow the exception.</li>\n</ul>",
        "id": 198335092,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590075040
    },
    {
        "content": "<p>I'm not sure what the apply bug is, is this the one fixed in <code>apply'</code>?</p>",
        "id": 198339919,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590077288
    },
    {
        "content": "<p>The bug where <code>apply</code> guesses wrong how many <code>_</code>s to insert, which I described <a href=\"#narrow/stream/113488-general/topic/apply.20bug/near/195345344\">here</a>. <code>apply'</code> fixes it in a rather heavy-handed way, which I'm not sure is suitable for general use.</p>",
        "id": 198352714,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590083085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113488-general/topic/with_local_environment/near/198335092\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Try to run the inner tactic; capture its result or the thrown exception. (The combinator for this might not exist yet, but should be implementable.)</li>\n</ul>\n</blockquote>\n<p>Looks like there is <code>interaction_monad.bracket</code> for this.</p>",
        "id": 198353223,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590083345
    },
    {
        "content": "<p>and also <a href=\"https://github.com/leanprover-community/mathlib/blob/93b41e565767ee0d471b0211b4cdd825ace27ae0/src/tactic/core.lean#L1632\"><code>finally</code></a>--do we really need both?</p>",
        "id": 198699037,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590437279
    },
    {
        "content": "<p><code>finally</code> seems to be a special case of <code>bracket</code>, so the implementation could be simplified. It's used only once in mathlib, so 'need' is a strong word. However, <code>finally</code> seems like the more fundamental combinator; <code>bracket x y z = x &gt;&gt; finally y z</code>.</p>",
        "id": 198743264,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590488806
    }
]