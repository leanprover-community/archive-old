[
    {
        "content": "<p>is there some way to show which instance (of a class) is actually used in a definition? If I use <code>set_option trace.class_instances true</code>, it lists lots of possible instances, but I only want the actual instance used</p>",
        "id": 147922878,
        "sender_full_name": "petercommand",
        "timestamp": 1542559902
    },
    {
        "content": "<p>I sometimes grep the output to remove lines immediately followed with <code>failed defeq</code></p>",
        "id": 147922929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542559969
    },
    {
        "content": "<p>but of course you can always just look at the term</p>",
        "id": 147922937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542559991
    },
    {
        "content": "<p>just look at the term?</p>",
        "id": 147922940,
        "sender_full_name": "petercommand",
        "timestamp": 1542560006
    },
    {
        "content": "<p>yeah, I can grep the output</p>",
        "id": 147922941,
        "sender_full_name": "petercommand",
        "timestamp": 1542560021
    },
    {
        "content": "<p>Just trigger the instance search manually. For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n<span class=\"c1\">-- @partial_order.to_preorder ℤ</span>\n<span class=\"c1\">--   (@ordered_comm_group.to_partial_order ℤ</span>\n<span class=\"c1\">--      (@ordered_ring.to_ordered_comm_group ℤ</span>\n<span class=\"c1\">--         (@linear_ordered_ring.to_ordered_ring ℤ</span>\n<span class=\"c1\">--            (@linear_ordered_comm_ring.to_linear_ordered_ring ℤ</span>\n<span class=\"c1\">--               (@decidable_linear_ordered_comm_ring.to_linear_ordered_comm_ring ℤ</span>\n<span class=\"c1\">--                  int.decidable_linear_ordered_comm_ring))))) :</span>\n<span class=\"c1\">--   preorder ℤ</span>\n</pre></div>",
        "id": 147922984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542560057
    },
    {
        "content": "<p>Ah..that works great! Thanks!</p>",
        "id": 147922996,
        "sender_full_name": "petercommand",
        "timestamp": 1542560159
    },
    {
        "content": "<p>alternatively:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@infer_instance (preorder ℤ)</span>\n<span class=\"cm\">  (@partial_order.to_preorder ℤ</span>\n<span class=\"cm\">     (@ordered_comm_group.to_partial_order ℤ</span>\n<span class=\"cm\">        (@ordered_ring.to_ordered_comm_group ℤ</span>\n<span class=\"cm\">           (@linear_ordered_ring.to_ordered_ring ℤ</span>\n<span class=\"cm\">              (@linear_ordered_comm_ring.to_linear_ordered_ring ℤ</span>\n<span class=\"cm\">                 (@decidable_linear_ordered_comm_ring.to_linear_ordered_comm_ring ℤ</span>\n<span class=\"cm\">                    int.decidable_linear_ordered_comm_ring)))))) :</span>\n<span class=\"cm\">  preorder ℤ</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 147923628,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542561329
    }
]