[
    {
        "content": "<p>I’m a bit stuck with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_free_group.of_mul_equiv\">docs#is_free_group.of_mul_equiv</a> restricting the two groups to the same universe. How would I go about generalizing that?<br>\nIs it important that <code>is_free_group.generators</code> is a type, and not just a <code>set G</code>?<br>\nOr is it important that this index type lives in the same universe as <code>G</code>? (Can we bundle universes? Probably not)</p>",
        "id": 276129633,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647907589
    },
    {
        "content": "<p>Don't we have the lemma that lifts the universe?</p>",
        "id": 276129699,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647907654
    },
    {
        "content": "<p>I guess that doesn't help you much here</p>",
        "id": 276129817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647907768
    },
    {
        "content": "<p>Maybe I’ll work around it by constructing the instance directly, instead of going via <code>≃* multiplicative ℤ</code>. Might be easier.</p>",
        "id": 276129902,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647907832
    },
    {
        "content": "<p>Is something like <code>h ⁻¹' set.range (generators G)</code> in the right universe to use as the generators?</p>",
        "id": 276129937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647907884
    },
    {
        "content": "<p>Certainly that lemma should be universe polymorphic</p>",
        "id": 276129956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647907912
    },
    {
        "content": "<p>I tried, but <code>h</code> doesn’t apply to <code>generators G</code>, as it is its own type; the only thing I can do with the generators is use <code>of</code>. well, more tomorrow I guess …</p>",
        "id": 276130480,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647908424
    },
    {
        "content": "<p>Ah sorry, I meant to say <code>set.range of</code></p>",
        "id": 276130746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647908678
    },
    {
        "content": "<p>Shouldn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_free_group.of_mul_equiv\">docs#is_free_group.of_mul_equiv</a> generalize to injective homomorphisms?</p>",
        "id": 276143307,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1647924303
    },
    {
        "content": "<p>Ah, but the mathlib proof of this just talks about subgroups, and sticks to the same universe.</p>",
        "id": 276143697,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1647924912
    },
    {
        "content": "<p>There's a number of small things to prove:</p>\n<ul>\n<li>we need to now that <code>of : generators G -&gt; G</code> is injective (there's an abstract proof of this, as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_product.of_injective\">docs#free_product.of_injective</a>)</li>\n<li>from this you can deduce that if <code>G ≃* H</code> with <code>H : Type u</code> then <code>generators G</code> is <code>u</code>-small (it is equivalent to <code>set.range (h ∘ of)</code>).</li>\n<li>now one should be able to prove the universe-polymorphic version of <code>of_mul_equiv</code>: <code>H</code> is freely generated by the <code>u</code>-small resizing of <code>generators G</code> (we have already the universe-polymorphic <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_free_group.unique_lift\">docs#is_free_group.unique_lift</a>)</li>\n<li>finally one can prove a universe-polymorphic <code>of_injective</code> by combining <code>of_equiv</code> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup_is_free_of_is_free\">docs#subgroup_is_free_of_is_free</a></li>\n</ul>",
        "id": 276153501,
        "sender_full_name": "David Wärn",
        "timestamp": 1647936137
    },
    {
        "content": "<p>It might be easier to do all of this if we first introduce some predicate like <code>is_freely_generated_by</code> where <code>generators</code> is unbundled and can have a different universe level from <code>G</code>. Then you can state (and prove!) that <code>is_freely_generated_by</code> transports across equivs in <code>generators</code> across different universe levels, and that <code>generators</code> is <code>u</code>-small iff <code>G</code> is.</p>",
        "id": 276154029,
        "sender_full_name": "David Wärn",
        "timestamp": 1647936477
    },
    {
        "content": "<p>I think unbundling the generators is a good idea</p>",
        "id": 276154655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647936925
    },
    {
        "content": "<p>Yay, even more ways to state that a group is freely generates (<code>is_free_group</code>, <code>free_group X</code>, and, a bit remote, <code>free_product</code>) :-)</p>",
        "id": 276161623,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647941465
    },
    {
        "content": "<p>Or having _only_ the unbundled one? Seems very reasonable to me, and I believe what I am working on right now would be much more natural that way. Should I give it a shot?</p>",
        "id": 276162375,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647941994
    },
    {
        "content": "<p>If nothing breaks when unbundling, go for it</p>",
        "id": 276162446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647942025
    },
    {
        "content": "<p>should the <code>of</code> be still bundled in <code>is_freely_generated_by</code>? Or not (in which case it becomes simply a name for the universal property)?</p>",
        "id": 276163007,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647942394
    },
    {
        "content": "<p>The only reason the generators are bundled at the moment is that saying \"G is freely generated by (some complicated type of generators)\" is less elegant than saying \"G is free\" (in particular the Nielsen-Schreier file will look less pretty in the unbundled way). But it's not a very strong reason, and there are good reasons to unbundle the generators</p>",
        "id": 276163165,
        "sender_full_name": "David Wärn",
        "timestamp": 1647942496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/universe.20levels.20for.20is_free_group/near/276163007\">said</a>:</p>\n<blockquote>\n<p>should the <code>of</code> be still bundled in <code>is_freely_generated_by</code>? Or not (in which case it becomes simply a name for the universal property)?</p>\n</blockquote>\n<p>I would say we can still bundle <code>of</code>, in line with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis\">docs#basis</a>. It may also be a good idea to change the definition to match up with <code>basis</code>, i.e. to say a group is free when it is isomorphic to a <code>free_group</code> (and have a lemma saying a group is free when it has the right universal property). This would certainly alleviate universe polymorphism headache</p>",
        "id": 276163510,
        "sender_full_name": "David Wärn",
        "timestamp": 1647942720
    },
    {
        "content": "<p>Ah, I think I understand now: using the universal property as or in the definition is appealing from a mathematical point of view, but the quantifier over the “other” type only quantities over types of the same universe level as the definition itself, so it's not really the full universal property, and that's why the existing API has to jump through hoops to get the more general one. If the definition is just the equivalence to “the” free group, and the universal property a separate lemma, this issue is avoided. Is that roughly correct?</p>",
        "id": 276179527,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647951560
    },
    {
        "content": "<p>In that light I'm in favor of <code>is_freely_generated_by</code> like <code>basis</code> to replace our <code>is_free_group</code>, as suggested above. Can probably easily live in <code>free_group.lean</code> then. Maybe I'll give it a shot. Or maybe after I finish the ping pong lemma (phrased using equivalence to <code>free_group</code> to be compatible with that then)</p>",
        "id": 276184631,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647954143
    },
    {
        "content": "<p>I experimented with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_freely_generated_by</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span> <span class=\"n\">mul_equiv</span> <span class=\"o\">:</span> <span class=\"n\">free_group</span> <span class=\"n\">X</span> <span class=\"bp\">≃*</span> <span class=\"n\">G</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>but it has its downsides over <code>is_free_group</code>, which has the generators bundled. In particular, the ext-lemma doesn't apply automatically when equating monoid-homs from <code>G</code> (because the lemma search wouldn’t know which <code>X</code>s to use).</p>\n<p>Maybe I’ll first refactor <code>is_free_group</code> to use <code>free_group X ≃* G</code> internally, instead of the universal property, to avoid the universe level issues, but otherwise keeping that API.</p>",
        "id": 279369339,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1650350648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> You could try to make <code>X</code> an <code>out_param</code>.</p>",
        "id": 279369529,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650350784
    },
    {
        "content": "<p>That might solve those issues.</p>",
        "id": 279369556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650350811
    },
    {
        "content": "<p>And I think it is unlikely that we'll often want <code>is_freely_generated_by G X</code> for two different values of <code>X</code>.</p>",
        "id": 279369589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650350847
    },
    {
        "content": "<p>I can try. Will this just guide the lemma/instance search? Or does it actually forbid instances with different generators?</p>",
        "id": 279369905,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1650351122
    },
    {
        "content": "<p>It only guides.</p>",
        "id": 279370023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650351247
    },
    {
        "content": "<p>Lean never forbids multiple instances of the same class. But in the case of <code>out_param</code>s this can certainly cause Lean to be mightily confused.</p>",
        "id": 279370129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650351383
    },
    {
        "content": "<p>Hmm, it seems that regresses instance search in one case that went through without <code>out_param</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">is_freely_generated_by</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">i</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">is_freely_generated_by</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>\n<p>Note that <code>hG</code> should provide that instance here easily.</p>",
        "id": 279370873,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1650352024
    },
    {
        "content": "<p>Hmm, no idea why that fails <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 279372201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650353024
    },
    {
        "content": "<p>This is what <code>trace.class_instance</code> says about this instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span>  <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_freely_generated_by</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_3</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:=</span> <span class=\"n\">hG</span> <span class=\"bp\">?</span><span class=\"n\">x_2</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n</code></pre></div>\n<p>I have no idea why it tries to put <code>_inst_3</code> here, which is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>Maybe an <code>out_param</code> of type <code>Type*</code> is too unrestricted, and the solver sees <code>_inst_3</code> and thinks “oh, let’s try that for <code>X</code>”?</p>",
        "id": 279373026,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1650353543
    },
    {
        "content": "<p>Is this on a branch somewhere I can play with?</p>",
        "id": 279375760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650355353
    },
    {
        "content": "<p>sorry for the delay; it is now: <code>joachim/is_freely_generated_by</code>, commit <code>881f96934a</code>, failure in <code>src/group_theory/free_product.lean</code>. Note how code fails that worked before that commit.</p>",
        "id": 279514718,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1650444574
    },
    {
        "content": "<p><code>@is_freely_generated_by.of _ _ _ _ x.2</code> works fine there even though <code>is_freely_generated_by.of x.2</code> doesn't</p>",
        "id": 279529955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650454391
    },
    {
        "content": "<p><code>attribute [elab_simple] is_freely_generated_by.of</code> also seems to work</p>",
        "id": 279530041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650454444
    },
    {
        "content": "<p>Thanks, indeed! What does that tell us? I guess I can proceed with this API design and use <code>[elab_simple]</code> on <code>of</code> and see how far that gets us?</p>",
        "id": 279553317,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1650466210
    },
    {
        "content": "<p>There's probably something to lean about how <code>out_param</code>s work there, but ultimately lean is just elaborating things in a bad order</p>",
        "id": 279564799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650470802
    },
    {
        "content": "<p>Here's the relevant part of the trace with <code>type_context.is_def_eq_detail</code> and <code>pp.all</code> on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span>  <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_freely_generated_by.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u_0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sigma.fst.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l__fresh.172.284190</span> <span class=\"bp\">?</span><span class=\"n\">l__fresh.172.284191</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">_inst_3</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sigma.fst.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l__fresh.172.284190</span> <span class=\"bp\">?</span><span class=\"n\">l__fresh.172.284191</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:=</span> <span class=\"n\">hG</span> <span class=\"bp\">?</span><span class=\"n\">x_2</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"bp\">@</span><span class=\"n\">is_freely_generated_by.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u_0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sigma.fst.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l__fresh.172.284190</span> <span class=\"bp\">?</span><span class=\"n\">l__fresh.172.284191</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">_inst_3</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sigma.fst.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l__fresh.172.284190</span> <span class=\"bp\">?</span><span class=\"n\">l__fresh.172.284191</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">is_freely_generated_by.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l__fresh.172.3587</span> <span class=\"bp\">?</span><span class=\"n\">l__fresh.172.3588</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">?</span><span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_3</span> <span class=\"bp\">?</span><span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">?</span><span class=\"n\">x_2</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">is_freely_generated_by.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u_0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">is_freely_generated_by.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l__fresh.172.3587</span> <span class=\"bp\">?</span><span class=\"n\">l__fresh.172.3588</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_freely_generated_by.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u_0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sigma.fst.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l__fresh.172.284190</span> <span class=\"bp\">?</span><span class=\"n\">l__fresh.172.284191</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">_inst_3</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sigma.fst.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l__fresh.172.284190</span> <span class=\"bp\">?</span><span class=\"n\">l__fresh.172.284191</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">is_freely_generated_by.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l__fresh.172.3587</span> <span class=\"bp\">?</span><span class=\"n\">l__fresh.172.3588</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">?</span><span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_3</span> <span class=\"bp\">?</span><span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">?</span><span class=\"n\">x_2</span><span class=\"o\">)</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n</code></pre></div>",
        "id": 279657441,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1650534397
    },
    {
        "content": "<p>As I understand it, to produce the <code>on failure:</code> message, either the universe levels in <code>is_freely_generated_by.{?u_0 0} =?= is_freely_generated_by.{?l__fresh.172.3587 ?l__fresh.172.3588}</code> could not be unified, or one of the arguments failed the <code>quick_is_def_eq</code> check.</p>",
        "id": 279658195,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1650534916
    },
    {
        "content": "<p>Yup, <code>set_option trace.type_context.univ_is_def_eq true</code> gives the answer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">type_context.univ_is_def_eq</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">_mlocal._fresh.297.3563</span> <span class=\"bp\">...</span> <span class=\"n\">failed</span>\n</code></pre></div>",
        "id": 279658503,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1650535127
    },
    {
        "content": "<p>Since the non-temporary metavariable <code>?u_0</code> can be assigned, the conclusion seems to be something like: there are some temporary universe metavariables on the right hand side that Lean tries to unify in a non-temporary context, so they are unable to be assigned and unification fails.</p>",
        "id": 279659076,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1650535485
    },
    {
        "content": "<p>Why we got to this place is unclear to me, though.</p>",
        "id": 279659091,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1650535498
    },
    {
        "content": "<p>Ah I noticed I had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_freely_generated_by</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_freely_generated_by</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>in scope when defining <code>of</code>. And with that fixed I don’t <code>[elab_simple]</code> it seem.</p>",
        "id": 279853825,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1650648002
    },
    {
        "content": "<p>Hmm, looking at how <code>is_free_group</code> is used in <code>nielson-schreier.lean</code>, in particular</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">subgroup_is_free_of_is_free</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_free_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_free_group</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>I doubt that an unbundled  <code>is_freely_generated_by G X</code> will look nice here, given that this theorem doesn't tell us what the generators of <code>H</code> are.<br>\nI could write  <code>Σ Y. is_freely_generated_by H Y</code>.<br>\nOr I could  keep <code>is_free_group</code> with bundled <code>generators</code> (but defined via an equivalence to the <code>free_group</code>, not the universal property, to avoid universe issues), in which case we have three APIs to maintain – <code>free_group X</code>, <code>is_freely_generated_by G X</code> and <code>is_free_group G</code>.<br>\nWDYT?</p>",
        "id": 279855161,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1650648677
    },
    {
        "content": "<p>Hmm, probably the latter  - <code>is_free_group</code> is a class, and type class inference just works better without the type of generator being around explicitly.</p>",
        "id": 279858251,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1650650263
    },
    {
        "content": "<p>I think the sigma type is ok</p>",
        "id": 279861841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650652064
    },
    {
        "content": "<p>Or more specifically, use the sigma as an auxiliary construction, then create the instance on its first entry</p>",
        "id": 279861951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650652104
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup_is_free_of_is_free\">docs#subgroup_is_free_of_is_free</a>)</p>",
        "id": 279862182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650652202
    },
    {
        "content": "<p>“create the instance on its first entry” – for that we still need a <code>is_free_group G</code> class, and can’t get rid of it, correct?</p>",
        "id": 279863619,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1650652917
    },
    {
        "content": "<p>I was thinking of something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">is_freely_generated_by</span> <span class=\"n\">H</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">generators</span> <span class=\"o\">:=</span> <span class=\"n\">aux.1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_freely_generated_by</span> <span class=\"n\">H</span> <span class=\"n\">generators</span> <span class=\"o\">:=</span> <span class=\"n\">aux.2</span>\n</code></pre></div>",
        "id": 279868646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650655828
    },
    {
        "content": "<p>For now, I did the change where <code>is_free_group</code> is now defined via isomorphism to the free group, but other the API is mostly left alone: &lt;<a href=\"https://github.com/leanprover-community/mathlib/pull/13633\">https://github.com/leanprover-community/mathlib/pull/13633</a>&gt;</p>",
        "id": 279878474,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1650661634
    }
]