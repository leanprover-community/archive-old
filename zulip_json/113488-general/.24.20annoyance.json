[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">subtype_is_partial_order</span> <span class=\"o\">:</span>\n<span class=\"n\">partial_order</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Us</span> <span class=\"n\">Vs</span><span class=\"o\">,</span><span class=\"n\">Us</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">⊆</span> <span class=\"n\">Vs</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Us</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">Us</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Us</span> <span class=\"n\">Vs</span> <span class=\"n\">Ws</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Us</span> <span class=\"n\">Vs</span> <span class=\"n\">HUV</span> <span class=\"n\">HVU</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"n\">HUV</span> <span class=\"n\">HVU</span>\n<span class=\"c1\">--  le_antisymm := λ Us Vs, subtype.eq $ set.subset.antisymm -- doesn&#39;t work, annoyingly</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 126710552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526580298
    },
    {
        "content": "<p>I wanted to write a beautiful partial order on some subsets of a type.</p>",
        "id": 126710573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526580332
    },
    {
        "content": "<p><code>le_refl</code> is a bit meh because I had to write <code>Us.1</code>, but I do understand that <code>set.subset.refl</code> needs to be told what it's refling in general</p>",
        "id": 126710640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526580371
    },
    {
        "content": "<p><code>le_trans</code> is perfect and I could probably even have written <code>\\lam _ _ _</code></p>",
        "id": 126710677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526580428
    },
    {
        "content": "<p><code>le_antisymm</code> is a bit annoying though because in functional programming if you write <code>\\lam x y, blah y</code> then you can normally remove the <code>y</code>s. But I can't remove <code>HUV</code> and <code>HVU</code> here because of my <code>$</code> trickery. Is this just some annoyance in functional programming that I have to put up with or is there some other idiom which means I can get rid of <code>HUV</code> and <code>HVU</code> somehow?</p>",
        "id": 126710770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526580544
    },
    {
        "content": "<p><code>le_antisymm := λ Us Vs, subtype.eq ∘ set.subset.antisymm</code> doesn't work either</p>",
        "id": 126710780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526580559
    },
    {
        "content": "<p>I can see why these things don't work, I just want something which looks a bit cooler if possible. Not for any particularly good reason, I'm just trying to write tidy code</p>",
        "id": 126710801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526580595
    },
    {
        "content": "<p>Here's a succinct way of asking my question:</p>",
        "id": 126710885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526580716
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">HUV</span> <span class=\"n\">HVU</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"n\">HUV</span> <span class=\"n\">HVU</span>\n</pre></div>",
        "id": 126710887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526580720
    },
    {
        "content": "<p>Can I get rid of those last two variables?</p>",
        "id": 126710927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526580728
    },
    {
        "content": "<p><code>le_antisymm := λ Us Vs, subtype.eq ∘ set.subset.antisymm</code> doesn't work because there are two arguments, and <code>f ∘ g</code> is <code>λ x, f (g x)</code>not <code>λ x y, f (g x y)</code>The eta reduction doesn't work because the arguments are inside brackets.</p>",
        "id": 126711207,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526581136
    },
    {
        "content": "<p>I think you just have to put up with it, but it doesn't look that annoying.</p>",
        "id": 126711306,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526581258
    },
    {
        "content": "<p>This works <code>le_antisymm := λ Us Vs HUV, subtype.eq ∘ set.subset.antisymm HUV</code></p>",
        "id": 126711333,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526581318
    },
    {
        "content": "<p>If you want to be extra confusing.</p>",
        "id": 126711384,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526581376
    },
    {
        "content": "<blockquote>\n<p>I can see why these things don't work, I just want something which looks a bit cooler if possible. Not for any particularly good reason, I'm just trying to write tidy code</p>\n</blockquote>\n<p>I should have read the question</p>",
        "id": 126716170,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526587816
    },
    {
        "content": "<p><code>λ Us Vs, ((∘) ∘ (∘)) subtype.eq set.subset.antisymm</code></p>",
        "id": 126718633,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1526591191
    },
    {
        "content": "<p>At least you can't write the awful <code>(f .) . g</code> in lean.</p>",
        "id": 126718805,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526591432
    },
    {
        "content": "<p>I had to work out on paper whether that does what I remember it doing.</p>",
        "id": 126718821,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526591476
    },
    {
        "content": "<p>what would that mean?</p>",
        "id": 126718822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526591476
    },
    {
        "content": "<p>Yes, I'll definitely fix that for Lean 4</p>",
        "id": 126718828,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1526591496
    },
    {
        "content": "<p>Haskell <code>.</code> is Lean's <code>∘</code>, and <code>(f .)</code> means <code>λ h, f ∘ h</code></p>",
        "id": 126718896,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526591570
    },
    {
        "content": "<p>Aaaarg, I did that rookie mistake again! I called some variable <code>a</code></p>",
        "id": 126718929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526591641
    },
    {
        "content": "<p>Sebastian, will this mistake be forgiven in Lean 4?</p>",
        "id": 126718983,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526591692
    },
    {
        "content": "<p>absolutely</p>",
        "id": 126719304,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1526592287
    },
    {
        "content": "<p><code>#eval (+) 2 2 -- 4</code></p>",
        "id": 126720531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526594396
    },
    {
        "content": "<p>I remember reading that one could do this in Haskell but I didn't know it was a Lean thing</p>",
        "id": 126720580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526594408
    },
    {
        "content": "<p><code>#check ((∘) ∘ (∘)) -- (?M_1 → ?M_2) → (?M_4 → ?M_3 → ?M_1) → ?M_4 → ?M_3 → ?M_2</code></p>",
        "id": 126720690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526594625
    },
    {
        "content": "<p>I love Lean</p>",
        "id": 126720691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526594629
    },
    {
        "content": "<p>who needs pencil and paper</p>",
        "id": 126720732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526594650
    },
    {
        "content": "<p>Ok so I used pencil and paper</p>",
        "id": 126722090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526597206
    },
    {
        "content": "<p>Recall that <code>(∘) f g x = (f ∘ g) x = f (g x)</code>. So</p>\n<div class=\"codehilite\"><pre><span></span>   ((∘) ∘ (∘)) a b c d\n=  (∘) ((∘) a) b c d\n=  ((∘) a) (b c) d\n=  (∘) a (b c) d\n=  a (b c d)\n</pre></div>",
        "id": 126722151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526597289
    },
    {
        "content": "<p>which is indeed what we wanted to do</p>",
        "id": 126722157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526597326
    },
    {
        "content": "<p>At the back of my mind I always feel like computer scientists learn this sort of stuff in their first year of undergrad whereas this is never taught to mathematicians at all</p>",
        "id": 126722175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526597358
    },
    {
        "content": "<p>Depends on the computer science course <span class=\"emoji emoji-1f629\" title=\"weary\">:weary:</span></p>",
        "id": 126729532,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1526612995
    },
    {
        "content": "<p>I don't think this is actually accurate, but I admit it as Kevin's warped view of what computer science is. I think it is accurate to say that you become comfortable with this when learning Haskell and not before</p>",
        "id": 126729645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526613233
    },
    {
        "content": "<p>I think that the demographics of this chat are disproportionately skewed towards functional programmers (for good reason), so it's easy to get that impression</p>",
        "id": 126729702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526613319
    },
    {
        "content": "<p>Correct. I'm one who had to learn FP and type theory/programming language stuff in my own time. But might be getting off topic here.</p>",
        "id": 126729800,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1526613549
    }
]