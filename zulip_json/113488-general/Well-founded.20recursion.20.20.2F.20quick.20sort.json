[
    {
        "content": "<p>I've spent the past few days trying (hopefully successfully) to understand well-founded recursion and have written an <a href=\"https://exlean.org/well-founded-recursion/\">exlean blog post</a> on it, with exercises. In the post, I:</p>\n<ol>\n<li>Discuss the (informal) notion of a well-founded relation.</li>\n<li>\n<p>Show how to use well-founded relations (initially just with the &lt; relation on â„•) to define recursive functions and prove theorems</p>\n<ul>\n<li>using the equation compiler and</li>\n<li>by writing proof terms.</li>\n</ul>\n</li>\n<li>\n<p>Explain why <code>rfl</code> proofs donâ€™t work for functions defined by well-founded recursion.</p>\n</li>\n<li>Employ sneaky equation compiler tricks to simplify function writing.</li>\n<li>\n<p>Explain how to use the <code>using_well_founded</code> command</p>\n<ul>\n<li>to work with custom relations via <code>rel_tac</code> and</li>\n<li>to create decreasing proofs via <code>dec_tac</code>.</li>\n</ul>\n</li>\n</ol>\n<p>While writing the post, I wrote a proof (not in the post) that quicksort sorts a list (ableit with different definitions of <code>qsort</code> and <code>sorted</code> to those in mathlib). If it's worth having these in mathlib (I note <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> did similar proofs for <code>merge_sort</code> and <code>insertion_sort</code>), let me know!</p>",
        "id": 244153539,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1624890761
    },
    {
        "content": "<p>thanks for the article! this is something I struggled to understand for a long time! many thanks ðŸ¥°ðŸ¥°ðŸ˜Š</p>",
        "id": 244155455,
        "sender_full_name": "Huá»³nh Tráº§n Khanh",
        "timestamp": 1624891495
    },
    {
        "content": "<p>That's a great material! I always wished for something like this</p>",
        "id": 244157990,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624892493
    },
    {
        "content": "<p>I wonder if you'd also like to provide a version of lg using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.binary_rec\">docs#nat.binary_rec</a></p>",
        "id": 244159472,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624893113
    },
    {
        "content": "<p>Does anyone know how well founded recursion will be done in lean4? Sure, the fundamentals will most likely be the same, but will the <code>dec_tac</code>, <code>rel_tac</code> structure be preserved?</p>",
        "id": 244159721,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624893212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> oh neat, I hadn't seen that before. Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lg_bin</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">â„•</span> <span class=\"o\">:=</span> <span class=\"n\">nat.binary_rec</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">Î»</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>?</p>",
        "id": 244165748,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1624895615
    },
    {
        "content": "<p>Yes, and there are helper lemmas <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.binary_rec_zero\">docs#nat.binary_rec_zero</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.binary_rec_eq\">docs#nat.binary_rec_eq</a>. An example of using it can be found in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.bin_cast_eq/src\">src#nat.bin_cast_eq</a></p>",
        "id": 244166283,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624895832
    },
    {
        "content": "<p>Glad to know there's another blog about learning Lean besides the Xena blog</p>",
        "id": 244190119,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1624906641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> , the exposition is really great. I wrote <code>merge_sort</code> and <code>insertion_sort</code> a long time ago, before the equation compiler could handle well-founded recursion (in Lean 2, I think?). I recently had to write two well-founded recursions by hand in Lean 4. It's a little scary at first but not so bad in the end, and even when we can get Lean to fill in the details automatically, it is nice to understand what is going on under the hood.</p>",
        "id": 244190409,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1624906799
    },
    {
        "content": "<p>Thanks. I haven't even tried wf recursion in Lean 4. Does the Lean 4 equation compiler handle wf recursion? That isn't clear from the manual.</p>",
        "id": 244196231,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1624910068
    },
    {
        "content": "<p>Well-founded recursion isn't implemented in Lean4 yet, and it says so in the error message anytime a function is unable to be verified as structurally terminating by the termination checker</p>",
        "id": 244197715,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1624910817
    }
]