[
    {
        "content": "<p>Can someone explain to me how I should convince Lean that <code>f</code> and <code>g</code> can be coerced to a function in the assumption <code>h</code> on this line: <a href=\"https://github.com/leanprover-community/mathlib/pull/1064/files#diff-694e7969af05a14241540bb2e6204a01R1132\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1064/files#diff-694e7969af05a14241540bb2e6204a01R1132\">https://github.com/leanprover-community/mathlib/pull/1064/files#diff-694e7969af05a14241540bb2e6204a01R1132</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">extensionality</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">to_equiv_injective</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">eq_of_to_fun_eq</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 166147146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558421759
    },
    {
        "content": "<p>I can't write <code>(h : (f : β → γ) = g)</code>. I also can't write <code>(h : ∀ x:β, f x = g x)</code>.</p>",
        "id": 166147228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558421861
    },
    {
        "content": "<p>Put it later in the file, so it's after the <code>has_coe</code> instance.</p>",
        "id": 166149892,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558425029
    },
    {
        "content": "<p>Oooh, that was silly.</p>",
        "id": 166150490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558425681
    }
]