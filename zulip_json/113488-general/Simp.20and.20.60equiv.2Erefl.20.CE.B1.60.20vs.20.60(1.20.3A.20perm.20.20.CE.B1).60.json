[
    {
        "content": "<p>Is there any way to tell <code>simp</code> that it is allowed to reduce <code>(1 : perm  α)</code> to <code>equiv.refl α</code> when looking for lemmas (and vice versa)? Or do we have to copy every simp lemma about <code>refl</code> for <code>1</code> too?</p>",
        "id": 221563291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609785849
    },
    {
        "content": "<p>You can simplify <code>1</code> to <code>refl</code>.</p>",
        "id": 221594426,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609802324
    },
    {
        "content": "<p>I'm aware of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.one_def\">docs#equiv.perm.one_def</a></p>",
        "id": 221595228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609803002
    },
    {
        "content": "<p>But it's not a simp lemma, and if I made it one then it would prevent lemmas like <code>mul_one</code> firing</p>",
        "id": 221595297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609803034
    },
    {
        "content": "<p>Conversely, if I made its reverse a simp lemma, then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.trans_refl\">docs#equiv.trans_refl</a> would not fire on <code>(e : equiv A B).trans (refl B)</code></p>",
        "id": 221595441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609803146
    },
    {
        "content": "<p>As far as I know, you have two choices:</p>\n<ul>\n<li>duplicate lemmas;</li>\n<li>simplify <code>*</code> to <code>trans</code> and <code>1</code> to <code>refl</code>.</li>\n</ul>",
        "id": 221595482,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609803197
    },
    {
        "content": "<p>I suppose there's a third choice, which is make equiv and perm no longer defeq, so that a cast has to be inserted</p>",
        "id": 221595596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609803310
    },
    {
        "content": "<p>And then there's only ever one spelling for each</p>",
        "id": 221595628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609803343
    },
    {
        "content": "<p>I think I'll probably just go with the duplication for now...</p>",
        "id": 221595709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609803414
    },
    {
        "content": "<p>Simplifying to trans and refl loses the ability to use lemmas about monoids, unfortunately. Is it better to simplify in the context of the monoid, and then simplify, or first simplify all to equivs?</p>",
        "id": 221596733,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609804019
    },
    {
        "content": "<p>Are there any useful lemmas about monoids that don't also exist for <code>equiv</code>?</p>",
        "id": 221597133,
        "sender_full_name": "Reid Barton",
        "timestamp": 1609804427
    },
    {
        "content": "<p>monoid_hom?</p>",
        "id": 221597230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609804531
    },
    {
        "content": "<p>Showing <code>f (a.trans b) = (f a).trans (f b)</code> would feel like an uphill battle if simp rewrote * into trans</p>",
        "id": 221597372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609804633
    },
    {
        "content": "<p>(also to be clear, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.perm_group\">docs#equiv.perm.perm_group</a> is not just a monoid but a group)</p>",
        "id": 221597634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609804805
    },
    {
        "content": "<p>There's also a fourth choice, simplifying <code>trans</code> to <code>*</code>.</p>",
        "id": 221624872,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1609837299
    },
    {
        "content": "<p>That's not always possible, for instance in the <code>(e : equiv A B).trans 1</code> case I mention above`</p>",
        "id": 221625061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609837443
    },
    {
        "content": "<p>I was hoping there was some way to make <code>equiv.perm.perm_group.one</code> reducible, but perhaps that doesn't make sense</p>",
        "id": 221625923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609838163
    },
    {
        "content": "<p>I'm surprised that <code>trans_refl</code> doesn't fire on <code>e.trans 1</code>.  1 should reducibly reduce to equiv.refl, AFAICT.</p>",
        "id": 221626682,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1609838788
    },
    {
        "content": "<p>Based on the fact the linter does not complain about the lemmas in <a href=\"https://github.com/leanprover-community/mathlib/issues/5614\">#5614</a>, I'm pretty sure it doesn't</p>",
        "id": 221627081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609839090
    },
    {
        "content": "<p>That's maybe a bit misleading: you're allowed to specialize simp lemmas, and the linter won't complain.</p>",
        "id": 221629120,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1609840693
    }
]