[
    {
        "content": "<p>In the code below, provided in <a href=\"#narrow/stream/113488-general/topic/Desarguean.20projective.20plane/near/319321610\">this answer</a>, by <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>, the explicit/implicit status of <code>P</code> and <code>L</code> changes a few times. I think I understand why <code>P</code> is (made) implicit for <code>collinear</code> but <code>L</code> is  (kept) explicit, and vice-versa for <code>concurrent</code>. But I don't understand why they're both implicit for the two perspective definitions and then both explicit for <code>is_desarguesian</code>. Here's the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.projective_plane</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">triangle</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">l₀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₀₁</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₀₂</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₁₀</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₁₂</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₂₀</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₂₁</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">concurrent</span> <span class=\"o\">(</span><span class=\"n\">l₀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">centrally_perspective</span> <span class=\"o\">(</span><span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"n\">T₁.p₀</span> <span class=\"n\">T₂.p₀</span> <span class=\"bp\">∧</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"n\">T₁.p₁</span> <span class=\"n\">T₂.p₁</span> <span class=\"bp\">∧</span> <span class=\"n\">collinear</span> <span class=\"n\">L</span> <span class=\"n\">p</span> <span class=\"n\">T₁.p₂</span> <span class=\"n\">T₂.p₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">axially_perspective</span> <span class=\"o\">(</span><span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">concurrent</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">T₁.l₀</span> <span class=\"n\">T₂.l₀</span> <span class=\"bp\">∧</span> <span class=\"n\">concurrent</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">T₁.l₁</span> <span class=\"n\">T₂.l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">concurrent</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">T₁.l₂</span> <span class=\"n\">T₂.l₂</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_desarguesian</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">centrally_perspective</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"bp\">↔</span> <span class=\"n\">axially_perspective</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span>\n</code></pre></div>",
        "id": 323322000,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1674584335
    },
    {
        "content": "<p>Because <code>P</code> and <code>L</code> can be inferred from the type of <code>T₁</code> or <code>T₂</code> (which is <code>triangle P L</code>) in the two perspective definitions, you just write <code>axially_perspective T₁ T₂</code> and Lean will fill in the <code>P</code> <code>L</code> arguments. But Lean can neither infer <code>P</code> from <code>L</code> or vice versa (that's why it may be preferable to make a structure that bundles <code>P</code> and <code>L</code>), and there are no other arguments in <code>is_desarguesian</code>, so you need both explicit.</p>",
        "id": 323328412,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1674586114
    }
]