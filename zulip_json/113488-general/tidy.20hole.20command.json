[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> The tidy hole command is really marvellous. Here are some trivialities that might give epsilon improvement:<br>\n(1) If <code>tidy</code> generates the proof <code>begin refl end</code>, generate <code>rfl</code> instead.<br>\n(2) If <code>tidy</code> generates the proof <code>begin exact foo end</code>, generate <code>foo</code> instead.</p>",
        "id": 133272160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535997003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, the first is impossible, or rather useless: Lean actually decides _in the parser_ whether you not you proved by <code>rfl</code>, rather than inspecting the proof term!</p>",
        "id": 133276810,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536005098
    },
    {
        "content": "<p>But (2) will go on my todo list. (i.e. I'll leave your message starred :-)</p>",
        "id": 133276820,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536005113
    },
    {
        "content": "<p>No, I mean that you inspect the string you are about to return.</p>",
        "id": 133276825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536005159
    },
    {
        "content": "<p>The hole command returns some string, and VScode substitutes that for the hole. Is that right?</p>",
        "id": 133276866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536005182
    },
    {
        "content": "<p>Ah, okay. Absolutely, I can do that.</p>",
        "id": 133276869,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536005199
    },
    {
        "content": "<p>If that string is exactly <code>begin refl end</code>, then you might as well output <code>rfl</code> instead.</p>",
        "id": 133276870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536005203
    },
    {
        "content": "<p>by induction convert tactic proofs to term proofs</p>",
        "id": 133276875,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536005225
    },
    {
        "content": "<p>I can also have \"begin just_one_tactic end\" into \"by just_one_tactic\".</p>",
        "id": 133276879,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536005242
    },
    {
        "content": "<p>I think <code>refl</code> tries slightly harder than <code>rfl</code></p>",
        "id": 133276880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536005245
    },
    {
        "content": "<p>That's somewhere on the VScode extension wishlist</p>",
        "id": 133276882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536005255
    },
    {
        "content": "<blockquote>\n<p>I think <code>refl</code> tries slightly harder than <code>rfl</code></p>\n</blockquote>\n<p>Hmmm... that might be true. So maybe we need to slightly patch tidy, to first try <code>exact rfl</code>. Then (1) will be a special case of (2).</p>",
        "id": 133276940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536005331
    },
    {
        "content": "<p>Anyway, this is not high priority stuff.</p>",
        "id": 133276948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536005359
    },
    {
        "content": "<p><code>refl</code> works for any reflexive relation I think. <code>rfl</code> is just equality.</p>",
        "id": 133277149,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536005680
    },
    {
        "content": "<p>I think it also does more definitional reduction</p>",
        "id": 133277163,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536005742
    },
    {
        "content": "<p>Can you give an example? If I prove something with <code>by refl</code>, the proof term is just <code>eq.refl _</code> which is <code>rfl</code></p>",
        "id": 133277646,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536006561
    }
]