[
    {
        "content": "<p>Are superscripts not supported in identifiers? I just tried <code>def aᵉ : ℕ := 1</code> and it does not work.</p>",
        "id": 272446793,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645212844
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/util/name.cpp#L28-L56\">https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/util/name.cpp#L28-L56</a> is the source code, as you can see it's not entirely simple to say what is and isn't valid. But not every unicode character is for sure.</p>",
        "id": 272448609,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645213872
    },
    {
        "content": "<p>Numeric subscripts work.</p>",
        "id": 272448799,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645213978
    },
    {
        "content": "<p>Interesting. There was a time when I thought that Lean's unicode support was as good as Agda's, but I guess not. If I make a PR with a <code>is_sup_script_alnum_unicode</code>, do you think it would get merged?</p>",
        "id": 272449218,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645214182
    },
    {
        "content": "<p>You can always use french quotes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"n\">a</span><span class=\"bp\">ᵉ»</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#check</span> <span class=\"bp\">«</span><span class=\"n\">a</span><span class=\"bp\">ᵉ»</span>\n</code></pre></div>",
        "id": 272449553,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645214278
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"n\">my</span> <span class=\"n\">little</span> <span class=\"n\">nat</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#check</span> <span class=\"bp\">«</span><span class=\"n\">my</span> <span class=\"n\">little</span> <span class=\"n\">nat</span><span class=\"bp\">»</span>\n</code></pre></div>",
        "id": 272449675,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645214295
    },
    {
        "content": "<p>Via <code>\\f&lt;&lt;&gt;&gt;</code></p>",
        "id": 272449724,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645214305
    },
    {
        "content": "<p>Oh, I didn't know about the french quotes. Nice.</p>",
        "id": 272449770,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645214314
    },
    {
        "content": "<p>I guess, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> knows exactly what parts of Unicode are supported without french quotes and where to add more in the lean source.</p>",
        "id": 272450966,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645214770
    },
    {
        "content": "<p>You can also make notations for things you want to look a specific way rather than have them be identifiers</p>",
        "id": 272450972,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645214771
    },
    {
        "content": "<p>The reason this is not supported is because <code>ᵉ</code> should be notation.  The official list of supported Unicode classes is here: <a href=\"https://github.com/leanprover-community/lean/blob/402f41cdedbd46a368fb7807bebe83550d887631/src/util/name.cpp#L27-L56\">https://github.com/leanprover-community/lean/blob/402f41cdedbd46a368fb7807bebe83550d887631/src/util/name.cpp#L27-L56</a></p>",
        "id": 272452398,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645215648
    },
    {
        "content": "<p>I'm happy to merge additions to the Lean 3 list iff they are added to Lean 4.  (Please just stick to the current set of allowed identifiers.)</p>",
        "id": 272452520,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645215719
    },
    {
        "content": "<p>There is indeed a cost in supporting lot of unicode in identifier names. It makes things unusable as notations without putting spaces everywhere.</p>",
        "id": 272452605,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645215749
    },
    {
        "content": "<p>I didn't realize that you end up with problems regarding notation if you also allowed them as identifiers. I don't seem to have this problem when I define notation using normal ascii characters.</p>",
        "id": 272453622,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645216252
    },
    {
        "content": "<p>Are you sure?</p>",
        "id": 272454082,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645216516
    },
    {
        "content": "<p>Try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">postfix</span> <span class=\"bp\">`</span><span class=\"n\">aaa</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ</span>\n<span class=\"kd\">postfix</span> <span class=\"bp\">`ᵉ`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">baaa</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">naaa</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">booo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">ᵉ</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 272454205,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645216605
    },
    {
        "content": "<p>Yeah, maybe it fails with <code>postfix</code>, but I can do this without problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"n\">foobar</span><span class=\"bp\">`</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">thefoobar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"n\">foobar</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 272454659,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645216883
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nfoobarm</span>\n</code></pre></div>\n<p>Probably fails</p>",
        "id": 272461888,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645220842
    },
    {
        "content": "<p>Without spaces</p>",
        "id": 272461907,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645220852
    }
]