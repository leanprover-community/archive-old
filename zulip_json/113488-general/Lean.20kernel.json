[
    {
        "content": "<p>Hi everyone, where can I read up on the exact details of the Lean kernel?</p>",
        "id": 202983412,
        "sender_full_name": "Albert ten Napel",
        "timestamp": 1594039547
    },
    {
        "content": "<p>Mario's master thesis is a good read. After that: the source code.</p>",
        "id": 202983974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594039865
    },
    {
        "content": "<p><a href=\"https://github.com/digama0/lean-type-theory/tags\">https://github.com/digama0/lean-type-theory/tags</a></p>",
        "id": 202984013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594039894
    },
    {
        "content": "<p>Note that Mario's thesis is really about the type theory, not about nitty gritty implementation details. Not sure what you're after.</p>",
        "id": 202984088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594039925
    },
    {
        "content": "<p>Thanks! This thesis is exactly what I was looking for :)</p>",
        "id": 202984216,
        "sender_full_name": "Albert ten Napel",
        "timestamp": 1594040028
    },
    {
        "content": "<p>Out of curiosity, <em>is</em> there something about the nitty gritty implementation details?</p>",
        "id": 202989396,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594042723
    },
    {
        "content": "<p>If you look at the code, there are comments and references to papers that different parts are based on but that's pretty much it</p>",
        "id": 202991356,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594043063
    },
    {
        "content": "<p>Thanks</p>",
        "id": 202991610,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594043193
    },
    {
        "content": "<p>I suppose I should just start reading the C++ code</p>",
        "id": 202991651,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594043214
    },
    {
        "content": "<p>Are you looking for any particular information?</p>",
        "id": 202991870,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594043307
    },
    {
        "content": "<p>No, mostly curious (I've worked on various more traditional VMs)</p>",
        "id": 202991972,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594043360
    },
    {
        "content": "<p>But the kernel and the VM are not the same things</p>",
        "id": 202993018,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594043919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306293\">@Carl Friedrich Bolz-Tereick</span> <br>\nThere are also implementations of the kernel in Haskell, Scala, and Rust in the form of reference type checkers if you're more familiar with any of those. The Scala one is the most concise, but AFAIK the Rust one is the only one that's been updated to match the kernel changes from Lean 3 to Lean 4. I'm almost done with a specification of the kernel that was written in Lean just for the sake of convenience; I'll post it in the program verification channel probably at the end of the week. IIRC the only thing that isn't in the Rust one yet from Lean 4 is the new reduction procedure for mutual inductives.</p>",
        "id": 203094401,
        "sender_full_name": "Chris B",
        "timestamp": 1594124187
    },
    {
        "content": "<p>If this is useful information for people interested in what the Lean kernel actually does then I don't understand why you want to post it to an obscure stream instead of here.</p>",
        "id": 203094633,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594124401
    },
    {
        "content": "<p>I didn't know that nanoda already supports the mutual inductives.  (Are there other relevant changes?  At some point there was talk about number literals in the kernel.)  Is there an export tool for Lean 4?</p>",
        "id": 203094907,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594124584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  I dunno man it just seemed to fit. I'll put it in general if that's more agreeable.</p>",
        "id": 203094959,
        "sender_full_name": "Chris B",
        "timestamp": 1594124635
    },
    {
        "content": "<p>There's no export tool yet no, but the changes are backwards compatible with a couple of small adjustments like keeping the distinction between dependent/non-dependent recursors and adding the new reduction procedure for recursors and quotients. The C++ one has support for number literals and I think now string literals last time I checked, there are two new declaration types (Theorem and Opaque), a couple of other changes. I can put a summary of the changes in a gist or something if you'd like.</p>",
        "id": 203095399,
        "sender_full_name": "Chris B",
        "timestamp": 1594124952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20kernel/near/203094401\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306293\">Carl Friedrich Bolz-Tereick</span> <br>\nThere are also implementations of the kernel in Haskell, Scala, and Rust in the form of reference type checkers if you're more familiar with any of those. The Scala one is the most concise, but AFAIK the Rust one is the only one that's been updated to match the kernel changes from Lean 3 to Lean 4. I'm almost done with a specification of the kernel that was written in Lean just for the sake of convenience; I'll post it in the program verification channel probably at the end of the week. IIRC the only thing that isn't in the Rust one yet from Lean 4 is the new reduction procedure for mutual inductives.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span> Could you give me some reference to the source code of the rust implementation of Lean 4?</p>\n<p>Sorry for digging the old post. But I start to curious about the kernel of Lean 4, in particular, using Rust instead of C++ to implement the kernel. I try not to duplicate any topic by searching old topics then found out that you said there is indeed a Rust version of Lean4.</p>",
        "id": 233923454,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1618027375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"144193\">@Gun Pinyo</span> <a href=\"https://github.com/ammkrn/nanoda_lib\">https://github.com/ammkrn/nanoda_lib</a></p>",
        "id": 233929883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618034767
    },
    {
        "content": "<p>I don't know that you could call it a \"Rust version of lean 4\" so much as an external typechecker for lean 4 kernel terms, similar to the external typecheckers trepplein, tc, and leanchecker for lean 3. These programs don't read lean source files, they read the \"export format\" which consists of pre-digested proof terms</p>",
        "id": 233930022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618034918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"144193\">@Gun Pinyo</span>  <br>\nIt's sort of in limbo right now since I'd like it to be able to work with Lean 3 export files and Lean 4 is still rapidly evolving. </p>\n<p>The changes from 3 to 4 that I can think of off the top of my head are as follows; the items that have been realized in the one Mario linked are starred:</p>\n<ul>\n<li>\n<p>support for mutual inductives<br>\nsupport for nested inductive reduction</p>\n</li>\n<li>\n<p>support for mutual definitions</p>\n</li>\n<li>removal of reduction rules</li>\n<li>direct inductive reduction</li>\n<li>direct quotient reduction</li>\n<li>theorem/opaque declaration types</li>\n<li>abbrev/opaque transparency levels<br>\nProj exprs<br>\nconvert local to fvar (I may or may not end up doing this one)</li>\n</ul>\n<p>There's also the native bool/nat/string reduction which I is a more nuanced issue but isn't breaking with respect to basic functionality. The Rust one that uses arenas isn't the most pleasant to read, but feel free to reach out if you have any questions. The spec I mentioned in that post exists in the <code>trace</code> branch, but it models the Rust executable with inductive relations so isn't much better to read. For what it's worth I am very serious about doing a Lean in Lean executable as soon as well-founded recursion lands in Lean 4. If the experts in the community help refine it I think we'll end up with a really nice learning resource.</p>",
        "id": 233941252,
        "sender_full_name": "Chris B",
        "timestamp": 1618046664
    },
    {
        "content": "<p>As far as the Lean in Lean executable, I'm curious how realistic it would be to write a verified Lean kernel checker in Lean.  And by verified, I guess I mean there is a theorem which says that this Lean kernel checker is sound and complete for Lean's logic.  (Although, I guess it depends how we encode \"Lean's logic\" here.  If we just encode it as the implementation of our kernel checker, then the proof is trivial. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)  (Of course for an added bonus, one could prove that Lean's logic, as we encode it, is consistent so that our checker never accepts a proof of false.  For this I assume one would need to assume a certain number of inaccessible cardinals or some such construct to get around GÃ¶del's 2nd incompleteness theorem.)</p>",
        "id": 233955871,
        "sender_full_name": "Jason Rute",
        "timestamp": 1618061830
    },
    {
        "content": "<p>Oh, if we want to prove something about the implementation it must be implemented with total functions which probably means at least for definitional equality that we need some proof of normalization (or whatever the correct term is).  I wonder how hard that is to prove (and if it requires a proof that Lean is consistent or not).</p>",
        "id": 233955996,
        "sender_full_name": "Jason Rute",
        "timestamp": 1618061989
    },
    {
        "content": "<p>I probably should have clarified (and I'm not suggesting you read this in what I wrote, only that your comment made me think of it) that the idea would just be to have an interesting thing people can play around with rather than trying to do any verification or demonstrate any particular result.</p>",
        "id": 233957806,
        "sender_full_name": "Chris B",
        "timestamp": 1618063654
    }
]