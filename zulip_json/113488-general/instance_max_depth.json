[
    {
        "content": "<p>I am really proud of me :) Just encountered the famous message <code>maximum class-instance resolution depth has been reached</code>. And indeed it worked by increasing it to 38. I can't really figure out why, however, since this looks like a trivial instance to me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">38</span>\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">β</span><span class=\"o\">]:</span>\n  <span class=\"n\">compact_space</span> <span class=\"o\">((</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>I have already registered the instances that the product and disjoint union of compact spaces are compact spaces.</p>",
        "id": 147440040,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1541869161
    },
    {
        "content": "<p>Even better: if I replace the metric spaces with topological spaces, I have to increase the depth even more, but in the end there is a failure, with the message</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">kernel</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">type</span> <span class=\"kn\">check</span> <span class=\"n\">declaration</span> <span class=\"err\">&#39;</span><span class=\"n\">foo&#39;</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"n\">usually</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">buggy</span> <span class=\"n\">tactic</span> <span class=\"n\">or</span> <span class=\"n\">a</span> <span class=\"n\">bug</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">builtin</span> <span class=\"n\">elaborator</span>\n<span class=\"n\">elaborated</span> <span class=\"n\">type</span><span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_8</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_9</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_10</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"n\">β</span><span class=\"o\">],</span>\n    <span class=\"n\">compact_space</span> <span class=\"o\">((</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n<span class=\"n\">elaborated</span> <span class=\"n\">value</span><span class=\"o\">:</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_8</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_9</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_10</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">compact_space</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">compact_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniform_space</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">glouglou</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniform_space</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">glouglou</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">compact_space</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"bp\">_</span><span class=\"n\">inst_9</span> <span class=\"bp\">_</span><span class=\"n\">inst_8</span> <span class=\"bp\">_</span><span class=\"n\">inst_10</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">@</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">compact_space</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"bp\">_</span><span class=\"n\">inst_9</span> <span class=\"bp\">_</span><span class=\"n\">inst_8</span> <span class=\"bp\">_</span><span class=\"n\">inst_10</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">compact_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"bp\">_</span><span class=\"n\">inst_9</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">compact_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniform_space</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">glouglou</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 147440126,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1541869245
    },
    {
        "content": "<p>I had something like 100 in the tensor product</p>",
        "id": 147440192,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541869358
    },
    {
        "content": "<p>yeah, thirty eight shmirty eight. I've seen over 100 too. </p>\n<p>What I would really like to know is <em>why</em>. I had this vague idea that somehow short cutting type class inference by defining some intermediate instances explicitly was a way to perhaps solve this (indeed I had sort-of suspected that stuff like <a href=\"https://github.com/leanprover/mathlib/blob/891dfbbebba8a0269072460785172c294935af22/data/real/basic.lean#L26\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/891dfbbebba8a0269072460785172c294935af22/data/real/basic.lean#L26\">this</a> was to stop that sort of thing from happening) but you have what looks like a fairly MWE...wait though, I can't reproduce. What do you have that I don't?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">38</span>\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">compact_space</span> <span class=\"o\">((</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- tactic.mk_instance failed to generate instance</span>\n</pre></div>",
        "id": 147442624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541873606
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/subject/maximum.20class-instance.20resolution.20depth.20has.20been.20reached/near/125643888\" title=\"#narrow/stream/113488-general/subject/maximum.20class-instance.20resolution.20depth.20has.20been.20reached/near/125643888\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/maximum.20class-instance.20resolution.20depth.20has.20been.20reached/near/125643888</a> ;-)</p>",
        "id": 147442679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541873662
    },
    {
        "content": "<p>This is not a MWE as the facts that a sum and a product of compact spaces are compact is not in mathlib (yet). I tried to cook up a MWE with just these instances, but then the instance_max_depth is not reached when I deal with the above example of <code>(α ⊕ β) × (α ⊕ β)</code> . I guess the problem comes from more clutter in my files...</p>",
        "id": 147469609,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1541926204
    }
]