[
    {
        "content": "<p>The following code is copied from the tutorial page at <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a>. It works perfectly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic.interactive</span> <span class=\"o\">(</span><span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">get_local</span> <span class=\"n\">infer_type</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">parse</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean.parser</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.add_eq</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">e1</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_local</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n   <span class=\"n\">e2</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_local</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n   <span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">_root_.congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_add.add</span> <span class=\"bp\">%%</span><span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"bp\">%%</span><span class=\"n\">e2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">add_eq</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But now, let's add some namespace around the meta definition and the example, then suddenly it doesn't work anymore:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic.interactive</span> <span class=\"o\">(</span><span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">get_local</span> <span class=\"n\">infer_type</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">parse</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean.parser</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.add_eq</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">e1</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_local</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n   <span class=\"n\">e2</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_local</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n   <span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">_root_.congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_add.add</span> <span class=\"bp\">%%</span><span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"bp\">%%</span><span class=\"n\">e2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">add_eq</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>outputs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">add_eq'</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">h₁'</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">h₂'</span>\n</code></pre></div>\n<p>I tried adding <code>open tactic.interactive</code> inside the namespace, but that doesn't work too.</p>\n<p>Lastly, I tried renaming <code>tactic.interactive.add_eq</code> to <code>add_eq</code>. Now, <code>add_eq</code> is bound, but <code>h₁</code> and <code>h₂</code> remain unbound.</p>\n<p>What's going on? Thanks!</p>",
        "id": 215291842,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604306940
    },
    {
        "content": "<p>You're in the <code>foo</code> namespace so are defining <code>foo.tactic.interactive.add_eq</code>, which tactic mode will not pick up.</p>",
        "id": 215294041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604308219
    },
    {
        "content": "<p>What makes the <code>tactic.interactive</code> namespace special? Is it the C++ language implementation, or something bootstrapped in some lean code?</p>",
        "id": 215294313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604308402
    },
    {
        "content": "<p>Ah, that makes sense. The question then is how to workaround the problem? My tactic mentions a lemma defined in the very same namespace, so I can't simply lift the tactic outside of the namespace.</p>\n<p>Well, one possibility that works is to split the namespace into two parts, with the tactic defined at the middle. It works but I'm not sure if it's the best solution.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kd\">lemma</span> <span class=\"bp\">...</span>\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive...</span> <span class=\"n\">use</span> <span class=\"n\">the</span> <span class=\"kd\">lemma</span> <span class=\"n\">here</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"n\">use</span> <span class=\"n\">the</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 215295468,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604309182
    },
    {
        "content": "<p>I think the <code>@[interactive]</code> attribute exists for precisely this reason</p>",
        "id": 215297713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604310612
    },
    {
        "content": "<p>Which IIRC, just renames the lemma after its declared so that it behaves as if you'd done the namespace reopening</p>",
        "id": 215297753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604310642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Can't.20follow.20.22Tutorial.3A.20tactic.20writing.20in.20Lean.22/near/215294313\">said</a>:</p>\n<blockquote>\n<p>What makes the <code>tactic.interactive</code> namespace special? Is it the C++ language implementation, or something bootstrapped in some lean code?</p>\n</blockquote>\n<p>The <code>tactic.interactive</code> namespace is special. Anything in it is declared as a top level tactic in <code>begin ... end</code> blocks. More generally, you can define alternate tactic modes in the <code>foo.interactive</code> namespace if you use <code>begin [foo] ... end</code></p>",
        "id": 215299040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604311462
    },
    {
        "content": "<p>the name binding is hard coded in the c++</p>",
        "id": 215299070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604311491
    },
    {
        "content": "<p>Does this work for <code>begin [foo.bar]</code> and <code>foo.bar.interactive</code> too?</p>",
        "id": 215309135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604318562
    },
    {
        "content": "<p>Yes</p>",
        "id": 215309485,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604318805
    }
]