[
    {
        "content": "<p>Good morning, everyone!  I am pleased to announce the latest release of the community fork, Lean 3.6.0!<br>\nThere is an associated PR to mathlib, <a href=\"https://github.com/leanprover-community/mathlib/issues/2064\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2064\">#2064</a>, but unfortunately it's not finished yet and I have some higher priority stuff to do right now.</p>",
        "id": 189200317,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582797743
    },
    {
        "content": "<p>Patrick already has a suggestion for <code>lean-3.6.1</code></p>",
        "id": 189200392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582797832
    },
    {
        "content": "<p>Yes, I know that there are outstanding feature requests.  This is not the last release.  Please keep the PRs coming.</p>",
        "id": 189200592,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582797975
    },
    {
        "content": "<p>My suggestion is not a feature request, it's a bug fix.</p>",
        "id": 189204741,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582802310
    },
    {
        "content": "<p>Ah, I missed <a href=\"https://github.com/leanprover-community/lean/issues/126\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/126\">https://github.com/leanprover-community/lean/issues/126</a>.  If somebody PRs a fix, then we can release 3.6.1 if this is a big issue.</p>",
        "id": 189207624,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582805233
    },
    {
        "content": "<p>It should be fixed now in 3.6.1.  Thanks <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> for the PR!  Please complain if the PR didn't actually fix the issue.</p>",
        "id": 189483275,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583149471
    },
    {
        "content": "<p>I merged <code>master</code> into <code>lean36</code>, and built it.</p>",
        "id": 189536627,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583183207
    },
    {
        "content": "<p><code>real_inner_product</code> fails to find some class instance; everything else builds fine.</p>",
        "id": 189536696,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583183255
    },
    {
        "content": "<p>I spent some time trying to sort that out. It times out looking for <code>add_comm_monoid alpha</code>. I don't know why it's even looking for that instance.</p>",
        "id": 189538850,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1583184457
    },
    {
        "content": "<p>Definition compiles if I make it take <code>[add_comm_group]</code> as an argument.</p>",
        "id": 189547266,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583190417
    },
    {
        "content": "<p>I guess something has changed in the class instance resolution procedure between 3.5.1 and 3.6.0</p>",
        "id": 189548455,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583191464
    },
    {
        "content": "<p>(after fixing a couple of <code>simp</code>s) now <code>normed_space</code> instance fails</p>",
        "id": 189548980,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583192005
    },
    {
        "content": "<p>BTW, <code>abel</code> doesn't work with <code>(a - b) - (a - c) = c - b</code> in Lean 3.6.0.</p>",
        "id": 189550906,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583193751
    },
    {
        "content": "<p>And this leads to more build failures in <code>real_inner_product</code>.</p>",
        "id": 189551147,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583194043
    },
    {
        "content": "<p>I've just merged master and updated to 3.6.1.  I'll look into the <code>real_inner_product</code> and <code>abel</code> issues.</p>",
        "id": 189597503,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583246027
    },
    {
        "content": "<p>Okay, I've stumbled into an ugly type-class instance cycle when synthesizing an instance for <code>decidable (a ≤ b)</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">decidable</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">decidable_linear_ordered_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_decidable_linear_order</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_decidable_linear_ordered_comm_group</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">linear_nonneg_ring</span><span class=\"bp\">.</span><span class=\"n\">to_decidable_linear_ordered_comm_ring</span>\n</pre></div>\n\n\n<p>Opinions on which instance to remove?  I'll try removing <code>linear_nonneg_ring.to_decidable_linear_ordered_comm_ring</code> for now.  Is there anything that actually uses <code>linear_nonneg_ring</code>?</p>",
        "id": 189611710,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583254545
    },
    {
        "content": "<p>It's not really a cycle, right? We start with <code>decidable (a ≤ b)</code> and end with <code>decidable (nonneg x)</code>.</p>\n<p>If any of them should be removed, definitely the last one.</p>",
        "id": 189624767,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1583263223
    },
    {
        "content": "<p>I think <code>nonneg</code> reduces to <code>\\le</code> in this case.  But maybe I got that wrong.</p>",
        "id": 189627906,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583265282
    },
    {
        "content": "<p>The <code>real_inner_product.lean</code> file is now fixed.  Behold the horrible hack: <a href=\"https://github.com/leanprover-community/mathlib/pull/2064/commits/38d32c8b8aad86701d0018daf7a8a1d22759cc65\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/2064/commits/38d32c8b8aad86701d0018daf7a8a1d22759cc65\">https://github.com/leanprover-community/mathlib/pull/2064/commits/38d32c8b8aad86701d0018daf7a8a1d22759cc65</a><br>\nI have no idea why these type class issues pop up <em>now</em>.<br>\nAt least for me, <code>abel</code> works just fine on <code>-</code>.<br>\nThat's it for today.</p>",
        "id": 189627987,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583265342
    },
    {
        "content": "<p>Oh, <code>nonneg</code> is a field of a structure, so yes, in some cases it can be defined to be <code>fun x, 0 &lt;= x</code>. I agree that we should remove the instance attribute from <code>linear_nonneg_ring.to_decidable_linear_ordered_comm_ring</code>.</p>",
        "id": 189628111,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1583265401
    },
    {
        "content": "<p>I think that <code>nonneg_ring</code> and friends should be removed from the typeclass instance search entirely. That was an experimental smart constructor for building an ordered group or ring from a \"nonneg\" class, but the <code>structure</code> is only to make the smart constructor more palatable, so it need not participate in the typeclass hierarchy</p>",
        "id": 189632353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583268327
    },
    {
        "content": "<p>I don't have enough time to read Zulip those days and I'm pretty confused. I see a lot of difficulties and I don't understand how they relate to Lean 3.6.0. Maybe they don't. Was there some change in the simplfier or type class search in Lean 3.6.0?</p>",
        "id": 189731429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583353476
    },
    {
        "content": "<p>I don't think it's clear why all of these problems come out <em>now</em>.  Most of them are also on master, see <a href=\"https://github.com/leanprover-community/lean/issues/137\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/137\">https://github.com/leanprover-community/lean/issues/137</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/2084\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2084\">#2084</a>.  My best guess is that removing <code>decidable_eq</code> from <code>field</code> has slightly changed type class resolution in some places (or made it slightly slower), and stuff that was barely working before is now completely broken.</p>",
        "id": 189731685,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583353669
    },
    {
        "content": "<p>Ok, so I'm not the only one to be confused.</p>",
        "id": 189731800,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583353738
    },
    {
        "content": "<p>Major kudos to <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> !</p>",
        "id": 189775653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583402608
    },
    {
        "content": "<p>The bump PR now builds!</p>",
        "id": 189775659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583402617
    },
    {
        "content": "<p>I guess we should merge this sooner rather than later.</p>",
        "id": 189775975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583402885
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>, <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, and <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> how did lots of the work.</p>",
        "id": 189776069,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583402959
    },
    {
        "content": "<p>Is someone on top of updating CI so that <code>lean-3.6.1</code> always has oleans?</p>",
        "id": 189822713,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583433492
    }
]