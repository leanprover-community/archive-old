[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- rolling our own left action</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- A left action of some group `G` on some `S` is a function with type</span>\n<span class=\"cm\">  `to_fun : G → S → S` such that for all `s : S`, `to_fun 1 s = 1` and for all</span>\n<span class=\"cm\">  `g, h : G`, `s : S`, `to_fun g (to_fun h s) = to_fun (g * h) s` -/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">laction</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>    <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_one&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"mi\">1</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_assoc&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">h</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">laction</span> <span class=\"n\">G</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- note the below line appears in mathlib</span>\n\n<span class=\"c1\">-- notation M ` →ₗ[`:25 R:25 `] `:0 M₂:0 := linear_map R M M₂</span>\n\n<span class=\"c1\">-- and this surely is pretty much the same, right?</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">g</span> <span class=\"bp\">`</span> <span class=\"err\">★</span><span class=\"o\">[</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"n\">μ</span> <span class=\"bp\">`</span> <span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">μ</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">g</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- now uncomment the below line for a timeout</span>\n\n<span class=\"c1\">-- variable [group H]</span>\n</code></pre></div>",
        "id": 207146679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597672580
    },
    {
        "content": "<p>o_O I can just fix it by changing the binding power numbers to match the mathlib notation. I don't know what's going on but at least I can now proceed.</p>",
        "id": 207146890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597672723
    },
    {
        "content": "<p>I think the <code>0</code> at the end matters right</p>",
        "id": 207147029,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597672798
    },
    {
        "content": "<p>apparently</p>",
        "id": 207148924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597673760
    }
]