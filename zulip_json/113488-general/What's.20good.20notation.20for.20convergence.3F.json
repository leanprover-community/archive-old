[
    {
        "content": "<p>To avoid introducing constants, <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> asked me to change</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The notion of convergence of sequences in topological spaces. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">converges_to</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">limit</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">limit</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">U</span>\n</pre></div>\n\n\n<p>(and a similar definition for convergence in metric spaces) into notation.</p>\n<p>I'm struggling to find good notation. My first try was</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"err\">⟶</span><span class=\"n\">t</span><span class=\"bp\">`</span> <span class=\"n\">limit</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">limit</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">U</span>\n</pre></div>\n\n\n<p>but this only works for a fixed topological space X. Is there a way to determine the domain for (the sequence) x without using meta programming? Or is the price for using notation that you always have to specify sequence, limit, and domain?</p>",
        "id": 155162064,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1547551458
    },
    {
        "content": "<p>Uh, no, more like: <code>notation x </code>⟶t<code> limit := tendsto x at_top (nhds limit)</code></p>",
        "id": 155162103,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547551519
    },
    {
        "content": "<p>never put a big term on the right of a <code>notation</code></p>",
        "id": 155162107,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547551541
    },
    {
        "content": "<p>also the term we want to operate on should be using <code>tendsto</code> and then we have different views on <code>tendsto</code> telling us how to unfold tendsto into a concrete representation.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">tendsto</span> <span class=\"n\">x</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">limit</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">limit</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">U</span>\n</pre></div>",
        "id": 155162167,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547551607
    },
    {
        "content": "<p>I see, that's better :)</p>",
        "id": 155168674,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1547558865
    },
    {
        "content": "<p>The difference between equality and iff is a propext, why is it better to state it as an equality?</p>",
        "id": 155168742,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1547558911
    },
    {
        "content": "<p>usually it's stated as an iff</p>",
        "id": 155170227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547560304
    },
    {
        "content": "<p>its an iff now ;-)</p>",
        "id": 155173772,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547563357
    }
]