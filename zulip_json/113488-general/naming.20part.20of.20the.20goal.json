[
    {
        "content": "<p>I discovered a trick for referring to parts of the goal without having to write them out. For example, suppose your goal is to prove that some really complicated expression equals 0. You can give that expression a name <code>lhs</code> by writing</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 154143914,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546378279
    },
    {
        "content": "<p>Oh, that's sneaky</p>",
        "id": 154143960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546378360
    },
    {
        "content": "<p>It could be nice to wrap this trick in a small tactic</p>",
        "id": 154143970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546378394
    },
    {
        "content": "<p>omg</p>",
        "id": 154144846,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546380125
    },
    {
        "content": "<p>I can feel this trick won't be allowed in Lean 4...</p>",
        "id": 154145021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546380551
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 154146061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546382740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I don't see anything wrong with any specific part here, it's more like a surprising combination of features</p>",
        "id": 154146598,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546383822
    },
    {
        "content": "<p>you can also use <code>let lhs, swap,</code> which is what I usually use for this trick</p>",
        "id": 154159623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546410011
    },
    {
        "content": "<p>since there is no <code>let_suffices</code> tactic</p>",
        "id": 154159626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546410035
    },
    {
        "content": "<p>I think having a tactic for this wouldn't be a bad idea though. Possibly using conv patterns to find the expression to name</p>",
        "id": 154159654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546410123
    },
    {
        "content": "<p>How about this: <code>name foo + 1 + bar</code> will treat any undefined names in the expression like <code>foo</code> and <code>bar</code> as holes to be filled. It searches for the first unifying subterm of the goal (or hyps) and let binds them and replaces them in the target (not just in the pattern, in the whole goal). So if the goal is <code>(x - 3) + 1 + (y - 3) = x - 3</code> then the resulting goal is <code>foo := x - 3, bar := y - 3 |- foo + 1 + bar = foo</code></p>",
        "id": 154159836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546410369
    },
    {
        "content": "<p>It doesn't work in the presence of binders; or more specifically it won't match any open terms. I don't see what other option is available</p>",
        "id": 154159916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546410576
    },
    {
        "content": "<p>so if the goal was <code>\\exists y, (x - 3) + 1 + y = x - 3</code> then the inner match <code>(x - 3) + 1 + #0</code> would be ignored</p>",
        "id": 154159984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546410668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> That's brilliant!</p>",
        "id": 154163289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546416549
    }
]