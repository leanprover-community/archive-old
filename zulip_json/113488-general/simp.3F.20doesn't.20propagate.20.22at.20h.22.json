[
    {
        "content": "<p>Try <code>simp? at h</code> in the proof below -- the \"Try this\" doesn't keep the \"at h\" part.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.cast</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">div2_add_two_of_not_bodd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n.bodd</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">div2</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- simp? at h, -- does not say \"Try this\"</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bnot_eq_ff_eq_eq_tt</span><span class=\"o\">,</span> <span class=\"n\">nat.bodd_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224682391,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612150282
    },
    {
        "content": "<p>I know that this isn't the best tactic proof to prove this, just an example.</p>",
        "id": 224682464,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612150351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Yes, this is a known issue. I hacked on <code>simp</code> to get <code>simp?</code> working. But I am horrible at C++ and <code>meta</code> code. So I hope that someone else can port all the <code>squeeze_simp</code> goodies to <code>simp?</code>.</p>",
        "id": 224687871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612158369
    }
]