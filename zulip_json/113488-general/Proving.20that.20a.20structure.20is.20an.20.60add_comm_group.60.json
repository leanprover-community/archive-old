[
    {
        "content": "<p>Suppose I have a structure</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">mystruct</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there an easy way to prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">mystruct</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I know that there is a <code>prod.add_comm_group</code> in mathlib, but I don't know how to apply this to <code>mystruct</code>.<br>\nMaybe I should use <code>prod ℝ ℝ</code> instead of <code>mystruct</code>, but I would like to <code>extends mystruct</code> later, so I prefer using <code>structure</code>.</p>",
        "id": 301145320,
        "sender_full_name": "Youjack",
        "timestamp": 1664329225
    },
    {
        "content": "<p>For what it's worth, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod\">docs#prod</a> is a structure that you can extend.</p>",
        "id": 301163629,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664345154
    },
    {
        "content": "<p>Regarding defining an <code>add_comm_group</code> structure on <code>mystruct</code> using an equivalence <code>mystruct ≃ prod ℝ ℝ</code>, I thought that mathlib had a way to transfer such a structure over an equivalence but I can't find it at the moment.</p>",
        "id": 301163883,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664345305
    },
    {
        "content": "<p>Write the obvious function <code>mystruct → ℝ × ℝ</code> then show it's injective and finally use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.add_comm_group\">docs#function.injective.add_comm_group</a>.</p>",
        "id": 301167397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664347670
    },
    {
        "content": "<p>Note: you have to define all the data fields first.</p>",
        "id": 301167677,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664347825
    },
    {
        "content": "<p>Alternatively, use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#equiv_rw\">tactic#equiv_rw</a>.</p>",
        "id": 301167885,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664347941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"516628\">Youjack</span> has marked this topic as resolved.</p>",
        "id": 301169801,
        "sender_full_name": "Notification Bot",
        "timestamp": 1664348893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"516628\">Youjack</span> has marked this topic as unresolved.</p>",
        "id": 301169818,
        "sender_full_name": "Notification Bot",
        "timestamp": 1664348904
    },
    {
        "content": "<p>I make it with <code>equiv.add_comm_group</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.equiv.transfer_instance</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mystruct</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mystruct_equiv_prod</span> <span class=\"o\">:</span> <span class=\"n\">mystruct</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s.a</span><span class=\"o\">,</span> <span class=\"n\">s.b</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">prod.mk.eta</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">mystruct</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">equiv.add_comm_group</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">mystruct_equiv_prod</span> <span class=\"n\">prod.add_comm_group</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">mystruct</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">s1.a</span> <span class=\"bp\">+</span> <span class=\"n\">s2.a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Thank you all!</p>",
        "id": 301175308,
        "sender_full_name": "Youjack",
        "timestamp": 1664351410
    }
]