[
    {
        "content": "<p>Hi, in order to get familiar with writing tactics, I am trying to write a simple tactic to count the number of occurrences of <code>∅</code> in a goal. Here is what I have so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">is_empty&#39;</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">has_emptyc</span><span class=\"bp\">.</span><span class=\"n\">emptyc</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">list_emptys&#39;</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">es</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">is_empty&#39;</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">insert</span> <span class=\"n\">e&#39;</span> <span class=\"n\">es</span> <span class=\"k\">else</span> <span class=\"n\">es</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">find_empty</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">,</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">list_emptys&#39;</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>But if I run this tactic</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∅</span> <span class=\"err\">∩</span> <span class=\"err\">∅</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">find_empty</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I only get <code>[∅]</code>. Can someone help me figure out what I am doing wrong? I'm guessing it's me not understanding how <code>fold</code> works for <code>expr</code>...</p>",
        "id": 154186308,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1546448091
    },
    {
        "content": "<p>you used <code>insert</code> to accumulate the list, this removes duplicates</p>",
        "id": 154187855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546449795
    },
    {
        "content": "<p>and the only thing you ever put in the list is <code>∅</code> (twice)</p>",
        "id": 154187873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546449826
    },
    {
        "content": "<p>use <code>::</code> instead</p>",
        "id": 154187929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546449863
    },
    {
        "content": "<p>Aha! that worked. Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 154187975,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1546449917
    },
    {
        "content": "<p>anticlimax...</p>",
        "id": 154188502,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546450419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> Have you seen <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/tactic_writing.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/tactic_writing.md\">https://github.com/leanprover/mathlib/blob/master/docs/extras/tactic_writing.md</a>? I have no idea about your level of experience with Lean or other programming languages. But for mathematicians who have never written anything in a functional programming language before, I think this is a very good introduction.</p>",
        "id": 154191437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546453529
    }
]