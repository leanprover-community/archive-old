[
    {
        "content": "<p>What's going on here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.dfinsupp</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">dfinsupp.add_comm_monoid</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n<span class=\"kd\">def</span> <span class=\"n\">fail1</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">dfinsupp.add_comm_monoid</span> <span class=\"n\">ι</span> <span class=\"n\">_</span>\n<span class=\"kd\">def</span> <span class=\"n\">fail2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dfinsupp.add_comm_monoid</span>\n<span class=\"kd\">def</span> <span class=\"n\">fail2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 226019081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613061427
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.add_comm_monoid\">docs#dfinsupp.add_comm_monoid</a> isn't found without way too much help</p>",
        "id": 226019136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613061458
    },
    {
        "content": "<p>This reveals some of the pain:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ok_but_scary</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">dfinsupp.add_comm_monoid</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226019843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613061722
    },
    {
        "content": "<p>Possibly related to <a href=\"#narrow/stream/113488-general/topic/class.20instance.20resolution.20failure/near/225688941\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/class.20instance.20resolution.20failure/near/225688941</a>, since both use typeclasses with quantifiers</p>",
        "id": 226020067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613061795
    },
    {
        "content": "<p>I found a workaround for this in <a href=\"https://github.com/leanprover-community/mathlib/issues/6185\">#6185</a>, but it's a monster</p>",
        "id": 226026276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613064128
    }
]