[
    {
        "content": "<p>How is that lemma known in real life?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">church_rosser</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">refl_gen</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">join</span> <span class=\"o\">(</span><span class=\"n\">refl_trans_gen</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I looked around and, up to my humble knowledge, it's not the Church-Rosser theorem, because it doesn't talk about β-reduction. Is it a generalization of the fact that weak Church-Rosser implies strong Church-Rosser? Also, can it not be generalized to the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">stronger_church_rosser</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">join</span> <span class=\"o\">(</span><span class=\"n\">refl_trans_gen</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">join</span> <span class=\"o\">(</span><span class=\"n\">refl_trans_gen</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 249686428,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629185071
    },
    {
        "content": "<p>It has something to do with the Church-Rosser property for <a href=\"https://en.wikipedia.org/wiki/Abstract_rewriting_system\">abstract rewrite systems</a>, though the particular form of it is puzzling.  Your stronger version is that \"locally confluent implies confluent\" I think.</p>",
        "id": 249686700,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629185349
    },
    {
        "content": "<p>Yeah that's what I thought. Should I generalize it and then call that \"locally confluent implies confluent\"?</p>",
        "id": 249688232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629186638
    },
    {
        "content": "<p>Well, I won't change the lemma name, but I will add a docstring.</p>",
        "id": 249688261,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629186676
    },
    {
        "content": "<p>Is the stronger form true? I think <a href=\"https://en.wikipedia.org/wiki/Confluence_(abstract_rewriting)\">https://en.wikipedia.org/wiki/Confluence_(abstract_rewriting)</a> has a counterexample</p>",
        "id": 249688344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629186740
    },
    {
        "content": "<p>Ahah! Interesting. And there's no way to get to Newman's lemma? How do we formalise this \"no infinite reduction path\" condition?</p>",
        "id": 249688403,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629186818
    },
    {
        "content": "<p>that sounds like some inductive condition, for example an element is strongly normalizing if all elements it reduces to are strongly normalizing</p>",
        "id": 249688514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629186917
    },
    {
        "content": "<p>where strongly normalizing means that it's not related to anything on the right (normalizing) and that every it's transitivitely related to on the left is only transitively related to things it's transitively related to on the right (strongly)?</p>",
        "id": 249688666,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629187041
    },
    {
        "content": "<p>My idea to define this condition is to have a \"quantified\" reflexive transitive closure which takes in a natural as one more argument.</p>",
        "id": 249688783,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629187128
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">quantified_refl_trans_gen</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">no_infinite_reduction_path</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">refl_trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">quantified_refl_trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span>\n</code></pre></div>",
        "id": 249689120,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629187366
    },
    {
        "content": "<p>This natural is concretely measuring the length of the path so far.</p>",
        "id": 249689149,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629187406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Your relation is satisfied by the b = a + 1 relation on nat, so it's not right. I mean exactly what I said above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">strongly_normalizing</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">strongly_normalizing</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">strongly_normalizing</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>The term \"strongly normalizing\" is usually used to mean there are no infinite reduction paths starting at this element. It's basically the same as <code>acc (flip r)</code> as you can see, and the definition you have (with no element, just talking about the relation as a whole) is equivalent to <code>well_founded (flip r)</code>.</p>",
        "id": 249743699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629217762
    },
    {
        "content": "<p>Oh yeah, what's <code>acc</code> actually?</p>",
        "id": 249743895,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629217841
    },
    {
        "content": "<p>it stands for \"accessible\", and it's literally the definition I wrote with r flipped</p>",
        "id": 249743965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629217877
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/acc\">docs#acc</a></p>",
        "id": 249743975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629217881
    },
    {
        "content": "<p>it's the basic building block for defining well foundedness</p>",
        "id": 249744050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629217920
    },
    {
        "content": "<p>in maths we would read <code>acc (&lt;) a</code> as \"there is no infinite sequence <code>a &gt; a1 &gt; a2 &gt; ...</code>\"</p>",
        "id": 249744205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629217972
    },
    {
        "content": "<p>see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rel_embedding.well_founded_iff_no_descending_seq\">docs#rel_embedding.well_founded_iff_no_descending_seq</a> for the proof of equivalence of these two statements</p>",
        "id": 249744519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629218110
    },
    {
        "content": "<p>Ahah! So <code>relation.church_rosser</code> is the proof that semi-confluent implies the Church Rosser property.</p>",
        "id": 250095702,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629451181
    },
    {
        "content": "<p>Wait, no. It's not semi-confluence... The <code>refl_gen</code> <code>refl_trans_gen</code> is on the wrong side of the implication.</p>",
        "id": 250096530,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629451723
    }
]