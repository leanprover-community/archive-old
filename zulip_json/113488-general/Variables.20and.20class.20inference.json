[
    {
        "content": "<p>Can variables or parameters inside a section be used in class inference? For example, the following code will report an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">sec1</span>\n<span class=\"kd\">class</span> <span class=\"n\">cl1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">cl1</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">cl1</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">end</span> <span class=\"n\">sec1</span>\n</code></pre></div>",
        "id": 320901533,
        "sender_full_name": "Meow",
        "timestamp": 1673519249
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">sec1</span>\n<span class=\"kd\">class</span> <span class=\"n\">cl1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">cl1</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">cl1</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x.s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">end</span> <span class=\"n\">sec1</span>\n</code></pre></div>\n<p>do what you want?</p>",
        "id": 320902364,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673519434
    },
    {
        "content": "<p>I'm not sure why <code>parameter</code> doesn't work, but if you do <code>variable</code> instead and make sure to <code>include</code> it (which ensures it always is included in an argument list) then it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">sec1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">cl1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">cl1</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">cl1</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">end</span> <span class=\"n\">sec1</span>\n</code></pre></div>",
        "id": 320902942,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673519611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Variables.20and.20class.20inference/near/320902364\">said</a>:</p>\n<blockquote>\n<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">sec1</span>\n<span class=\"kd\">class</span> <span class=\"n\">cl1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">cl1</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">cl1</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x.s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">end</span> <span class=\"n\">sec1</span>\n</code></pre></div>\n<p>do what you want?</p>\n</blockquote>\n<p>Yes, it really does. But in real situation, the class will have many (about 10) records, not just only <code>s</code>. So adding all <code>x.</code> will make the code mode complex.</p>",
        "id": 320903043,
        "sender_full_name": "Meow",
        "timestamp": 1673519639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Variables.20and.20class.20inference/near/320902942\">said</a>:</p>\n<blockquote>\n<p>I'm not sure why <code>parameter</code> doesn't work, but if you do <code>variable</code> instead and make sure to <code>include</code> it (which ensures it always is included in an argument list) then it works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">sec1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">cl1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">cl1</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">cl1</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">end</span> <span class=\"n\">sec1</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 320903111,
        "sender_full_name": "Meow",
        "timestamp": 1673519651
    },
    {
        "content": "<p>And <code>parameter</code> also works.</p>",
        "id": 320903355,
        "sender_full_name": "Meow",
        "timestamp": 1673519759
    },
    {
        "content": "<p>In Lean 3, <code>parameter</code> is buggy and you should avoid it. Unnamed typeclass arguments are automatically added to the context, so<code>variable [cli]</code> will do the same as <code>variable [x : cl1] include x</code></p>",
        "id": 320903990,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673520001
    },
    {
        "content": "<p>Thanks! By the way, what is the bugs of <code>parameter</code>?</p>",
        "id": 320908251,
        "sender_full_name": "Meow",
        "timestamp": 1673521188
    },
    {
        "content": "<p>A trick for avoid <code>parameter</code> is, for example when you need <code>parameter n : nat</code>, you can write a class enclosing <code>n</code> as a record, such as <code>class cl1 := (n : nat)</code>, and use <code>variable [cl1]</code> then <code>open cl1</code> in a section.</p>",
        "id": 320908597,
        "sender_full_name": "Meow",
        "timestamp": 1673521284
    },
    {
        "content": "<p>Then every term in the section that uses <code>n</code> will be considered as using <code>cl1.n _inst_1</code>, and every function you defined will adds <code>Π [_inst_1 : cl1]</code>. When a function that defined later in the section uses it, the class inference will give the correct result.</p>",
        "id": 320910000,
        "sender_full_name": "Meow",
        "timestamp": 1673521668
    },
    {
        "content": "<p>I don't understand the bug in <code>parameter</code>, but the result is that it's hardly usable.</p>",
        "id": 320975082,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673539570
    },
    {
        "content": "<p>This is precisely the conclusion I reached a few months ago as well.</p>",
        "id": 321010116,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1673549376
    }
]