[
    {
        "content": "<p>Someone might have asked this before but I couldn't quite find it, so here it goes.<br>\nConsider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A.next</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x.n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_B</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">B_has_coe</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">B.to_A</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">my_B.to_A.next</span>   <span class=\"c1\">-- works regardless of coe</span>\n<span class=\"k\">#check</span> <span class=\"n\">A.next</span> <span class=\"n\">my_B</span>          <span class=\"c1\">-- works because of coe</span>\n<span class=\"k\">#check</span> <span class=\"n\">my_B.next</span>              <span class=\"c1\">-- doesn't work at all</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">lean.version</span> <span class=\"c1\">-- (3, 21, 0)</span>\n</code></pre></div>\n<p>Couldn't the last #check be made to work so we could have dot notation polymorphism?</p>",
        "id": 220587983,
        "sender_full_name": "Luiz Carlos Rumbelsperger Viana",
        "timestamp": 1608560327
    },
    {
        "content": "<p>the <code>to_A</code> insertion when you use a sub-structure is actually completely separate from coercion. It would actually be pretty hard to use coercion because elaboration of dot notation happens really early, during name resolution, before we have all the typing information and certainly before we have solved any typeclass problems like <code>has_coe B ?</code></p>",
        "id": 220619490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608578273
    }
]