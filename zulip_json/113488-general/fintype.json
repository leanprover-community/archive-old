[
    {
        "content": "<p>What's the reason fintype isn't marked as Prop?</p>",
        "id": 123059884,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1519766611
    },
    {
        "content": "<p>I think it can't be <code>Prop</code> because its accessor <code>elems</code> has a non-<code>Prop</code> type</p>",
        "id": 123060084,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519766927
    },
    {
        "content": "<p>Exists is a Prop, so presumably it's possible to define it in a way such that it is a Prop. I thought that since it's a subsingleton, it may as well be a Prop, but there's probably a good reason why not.</p>",
        "id": 123060323,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1519767348
    },
    {
        "content": "<p>That's true. The difference is that <code>Exists</code> is defined using <code>inductive</code> not <code>structure</code>. Inductive doesn't come with accessors (in the case of <code>Exists</code>, the accessors could also be called the axiom of choice).</p>",
        "id": 123060387,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519767423
    },
    {
        "content": "<p>I think allowing <code>fintype</code> to be <code>Prop</code> would render every constructivist paranoid</p>",
        "id": 123060434,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519767484
    },
    {
        "content": "<p>(because merely declaring a structure could quietly add the axiom of choice into your development)</p>",
        "id": 123060441,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519767531
    },
    {
        "content": "<blockquote>\n<p>I think allowing <code>fintype</code> to be <code>Prop</code> would render every constructivist paranoid</p>\n</blockquote>\n<p>I think they're already pretty paranoid if they're constructivists...</p>",
        "id": 123060454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519767575
    },
    {
        "content": "<p>Should I say \"paranoider\"?</p>",
        "id": 123060505,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519767610
    },
    {
        "content": "<p>Mario mentioned that he wanted his proofs of <code>[fintype \\a] \\r [fintype \\b] \\r [fintype (\\a \\r \\b)]</code> to be computable. Not sure why, especially since choice is everywhere in mathlib</p>",
        "id": 123060543,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1519767696
    },
    {
        "content": "<p>Even when you assume the axiom of choice, constructive functions are great. They allow you to build programs without efforts</p>",
        "id": 123060674,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519767848
    },
    {
        "content": "<p>Try calculations with integers</p>",
        "id": 123061184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519768558
    },
    {
        "content": "<p>What do you mean by \"forever\"?</p>",
        "id": 123061227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519768564
    },
    {
        "content": "<p>wrong topic</p>",
        "id": 123061255,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519768593
    },
    {
        "content": "<p>damn topics</p>",
        "id": 123061261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519768606
    },
    {
        "content": "<p><code>fintype</code> and <code>finite</code> exist exactly so that you can decide whether or not you want to work in Prop</p>",
        "id": 123067712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519779339
    },
    {
        "content": "<p>Didn't know about finite. I'll have to look at it.</p>",
        "id": 123067953,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1519779675
    },
    {
        "content": "<p>Prompted by Scott's PR <a href=\"https://github.com/leanprover-community/mathlib/issues/1427\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1427\">#1427</a>, I just realized that <code>fintype</code> is not the same as the usual constructive notion of <a href=\"https://ncatlab.org/nlab/show/finite+set#Constructivist\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/finite+set#Constructivist\">finite</a>. I'm not really sure how to think about this though. What is an example of a <code>fintype</code> which is not finite?</p>",
        "id": 175342573,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568126175
    },
    {
        "content": "<p>(Here, finite means there is a bijection to <code>fin n</code> for some <code>n</code> and so in particular it implies that the type has decidable equality)</p>",
        "id": 175342616,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568126204
    },
    {
        "content": "<p>Maybe another question is: is <code>fintype</code> \"correct\"?</p>",
        "id": 175342712,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568126270
    },
    {
        "content": "<p>Good point. Maybe we can prove that every <code>fintype</code> has decidable equality. <br>\nYou can definitely prove <code>nonempty (decidable_eq \\a)</code>, and maybe you can do some trickery to get decidable equality, since that is a subsingleton?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dec</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfreezeI</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h2s</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hs</span> <span class=\"n\">h2s</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">rec_on_subsingleton</span> <span class=\"n\">s</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">l</span> <span class=\"n\">hl</span> <span class=\"n\">h2l</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">h2l</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:=</span> <span class=\"n\">h2l</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem_iff_nth_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hy</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">mt</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nodup_iff_nth_le_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 175350392,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1568130546
    },
    {
        "content": "<p>So to answer your question, Our notion of <code>fintype</code> is (at least) very close to the correct one.<br>\nI have a very bad intuition of the failure to eliminate from propositions to subsingletons: in HoTT that is provable.<br>\nIf we replace <code>(complete : ∀ x : α, x ∈ elems)</code> by something which is type-valued and says the same thing, then we can definitely prove decidable equality.</p>",
        "id": 175351695,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1568131485
    },
    {
        "content": "<p>I'm pretty sure you can't obtain <code>decidable_eq</code> constructively, because <code>fintype</code> just gives you a bunch of elements of the type and some useless props.</p>",
        "id": 175351746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568131530
    },
    {
        "content": "<p>It doesn't give you any way to consume an element of the type</p>",
        "id": 175351765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568131555
    },
    {
        "content": "<p>Simon has a PR doing <code>enumerable</code> as a bijection with <code>fin n</code>. I'd rather <code>fintype</code> remained a subsingleton.</p>",
        "id": 175354058,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568133154
    },
    {
        "content": "<p>Or a <code>Prop</code></p>",
        "id": 175354460,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568133455
    },
    {
        "content": "<p>I agree it should be a subsingleton. For example one \"fix\" (if it is a fix) would be to just add a field with a <code>decidable_eq</code> instance.</p>",
        "id": 175358741,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568136215
    },
    {
        "content": "<p>As far as I can tell, this is ehat ssreflect does</p>",
        "id": 175358769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568136233
    },
    {
        "content": "<p>When I say something type-valued, it will remain a subsingleton. But probably the easiest is to just add a <code>decidable_eq</code> instance, which I think would be very helpful.</p>",
        "id": 175360309,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1568137110
    },
    {
        "content": "<p>I gave an example to Simon recently about this. Consider the quotient <code>Q</code> of nat (treated as enumerating programs) that identifies programs that both halt or both do not halt. Classically, this is a two element set, and we can computably construct a <code>fintype Q</code> with two elements (the proof that this enumeration is complete requires LEM, but it is still lean-computable). But deciding equality on this type is equivalent to the halting problem.</p>",
        "id": 175402056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568178947
    },
    {
        "content": "<p>I also argued that putting a decidable_eq argument in the definition would mean an instance <code>fintype A -&gt; decidable_eq A</code> and I'm not sure we want to make the <code>decidable</code> typeclass search any larger than it already is</p>",
        "id": 175402172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568179104
    },
    {
        "content": "<p>By the way, it's not actually clear if we follow the letter of that definition of finite. <code>fintype</code> is equivalent to a <code>bijection</code> from <code>fin n</code> for some <code>n</code> (not an <code>equiv</code>)</p>",
        "id": 175402344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568179387
    },
    {
        "content": "<p>Nice example. It also gives me a better appreciation for Floris's <code>dec</code>. We need LEM to hold for equality on our type, just not computably. (Contrast with examples of subfinite sets which are not finite, which can be constructed from failures of LEM.)</p>",
        "id": 175421291,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568200810
    },
    {
        "content": "<p>I'm pretty sure that in this context, \"bijection\" is supposed to be interpreted as <code>equiv</code>. (I'm not as sure how \"there exists\" is meant to be interpreted...) At any rate, that nlab page claims further down that finite sets have decidable equality (but maybe one can quibble over the meaning of \"have\"?)</p>",
        "id": 175421433,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568200951
    },
    {
        "content": "<p>The joys of constructive math... all of a sudden not only your nouns have multiple interpretations, but also your adjectives, your verbs, and everything...</p>",
        "id": 175421790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568201303
    }
]