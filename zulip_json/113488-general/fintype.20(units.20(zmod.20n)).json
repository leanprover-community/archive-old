[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">fintype_units</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">infer_instance</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>Can this be an instance? Why is this noncomputable? Both branches are computable.<br>\nShould we finally have a <code>[is_finite X]</code> typeclass that lives in <code>Prop</code>?</p>",
        "id": 252776463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631275938
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/8820/files#diff-7f686f5382f35c1cb9194c1e08521752e0518a07416ab32c400b4ad49e0372b6R39\">https://github.com/leanprover-community/mathlib/pull/8820/files#diff-7f686f5382f35c1cb9194c1e08521752e0518a07416ab32c400b4ad49e0372b6R39</a><br>\nApparently <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> knows how to make this computable.</p>",
        "id": 252776856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631276142
    },
    {
        "content": "<p>it causes some annoying diamonds, but maybe it's okay reducible. not too sure about the noncomputability</p>",
        "id": 252777077,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631276228
    },
    {
        "content": "<p>It's noncomputable because being a unit is not decidable in general. Is there a clever way to enumerate the units of <code>fin n</code>?</p>",
        "id": 252777133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631276271
    },
    {
        "content": "<p>I suppose you can decide being a unit in a finite ring by brute force but surely we can do better than that</p>",
        "id": 252777225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631276304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/fintype.20.28units.20.28zmod.20n.29.29/near/252777133\">said</a>:</p>\n<blockquote>\n<p>It's noncomputable because being a unit is not decidable in general. Is there a clever way to enumerate the units of <code>fin n</code>?</p>\n</blockquote>\n<p>Euclid's algorithm?</p>",
        "id": 252777302,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631276345
    },
    {
        "content": "<p>Once you've found one unit, you can take its powers to gain some time.</p>",
        "id": 252777368,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631276389
    },
    {
        "content": "<p>(if you want to compute all of them at once)</p>",
        "id": 252777414,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631276402
    },
    {
        "content": "<p>Hm, that makes sense. Does anyone want to try writing a function <code>fin n -&gt; option (units (fin n))</code> which computes the inverse and proves it is inverse?</p>",
        "id": 252777605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631276503
    },
    {
        "content": "<p>it sounds like you can get it from the extended euclidean algorithm</p>",
        "id": 252777727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631276552
    },
    {
        "content": "<p>Sure! I already have <code>xgcd</code> in front of me :)</p>",
        "id": 252777761,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631276565
    },
    {
        "content": "<p>Although <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.unit_of_coprime\">docs#zmod.unit_of_coprime</a> is already computable</p>",
        "id": 252778077,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631276716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> but what about diamonds? Does such an instance-by-cases introduce a risk there?</p>",
        "id": 252778080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631276717
    },
    {
        "content": "<p>All instances on <code>zmod n</code> are written like this, because it is a type defined by cases</p>",
        "id": 252778150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631276754
    },
    {
        "content": "<p>Hmmm, we shouldn't have an instance for just <code>zmod n</code> (<code>n &gt; 0</code>) that does computable units, right? Because it would clash with the existing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.fintype\">docs#units.fintype</a></p>",
        "id": 252778321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631276811
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.of_equiv</span> <span class=\"n\">_</span> <span class=\"n\">units_equiv_coprime.symm</span>\n</code></pre></div>",
        "id": 252778681,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631276952
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.units_equiv_coprime\">docs#zmod.units_equiv_coprime</a> already existed :P</p>",
        "id": 252778714,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631276966
    },
    {
        "content": "<p>Shouldn't we rather make <code>units.fintype</code> computable?</p>",
        "id": 252778785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631276998
    },
    {
        "content": "<p>Or even better, create a <code>Prop</code>-valued alternative?</p>",
        "id": 252778850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631277010
    },
    {
        "content": "<p>I mean, I want a computable <code>zmod n</code>, don't get me wrong. But many arguments with finite monoids could be done with just a Prop-valued finiteness certificate.</p>",
        "id": 252778977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631277076
    },
    {
        "content": "<p>So assuming <code>fintype R</code> all the time is overly restrictive.</p>",
        "id": 252779010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631277095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/fintype.20.28units.20.28zmod.20n.29.29/near/252778785\">said</a>:</p>\n<blockquote>\n<p>Shouldn't we rather make <code>units.fintype</code> computable?</p>\n</blockquote>\n<p>Is that possible? It is not obvious to me how to compute the set of units without decidable_eq at least</p>",
        "id": 252779140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631277158
    },
    {
        "content": "<p>Also, none of this is any barrier to also adding an <code>is_finite (units (zmod n))</code> or what have you</p>",
        "id": 252779238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631277204
    },
    {
        "content": "<p>You don't need to use <code>fintype</code>if you don't want to</p>",
        "id": 252779306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631277235
    },
    {
        "content": "<p>Also, it isn't a non-instance because it is noncomputable; in fact I don't know why it's not an instance, the page you linked to says <code>noncomputable instance</code></p>",
        "id": 252779559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631277355
    },
    {
        "content": "<p>hmm, then we should make this an instance (-;<br>\nBut we should use the <code>noncomputable</code> version. The one by <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> causes a clash with <code>units.fintype</code>.</p>",
        "id": 252780334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631277717
    },
    {
        "content": "<p>nooo, my computability <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 252780419,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631277739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/fintype.20.28units.20.28zmod.20n.29.29/near/252779140\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/fintype.20.28units.20.28zmod.20n.29.29/near/252778785\">said</a>:</p>\n<blockquote>\n<p>Shouldn't we rather make <code>units.fintype</code> computable?</p>\n</blockquote>\n<p>Is that possible? It is not obvious to me how to compute the set of units without decidable_eq at least</p>\n</blockquote>\n<p>Why doesn't <code>fintype</code> include <code>decidable_eq</code>? I would guess that you would almost always want that if you care about computability, right?</p>",
        "id": 252780459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631277765
    },
    {
        "content": "<p>More seriously, why don't we make a computable <code>def</code> version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.fintype\">docs#units.fintype</a>, even keeping the instance classical if we're so inclined?</p>",
        "id": 252780576,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631277829
    },
    {
        "content": "<p>Fintype doesn't include decidable_eq because nodup on lists is definable without decidable_eq. That's because it relies on the inductive pairwise ne. I can for sure know that my list of reals [0, 1, 2] is nodup by checking the first digit. Checking that it is not nodup is what's hard.</p>",
        "id": 252780980,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631278015
    },
    {
        "content": "<p>Similarly, nothing in the quotienting by list.perm to generate a multiset requires decidable_eq, because list.perm is also inductively defined.</p>",
        "id": 252781075,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631278074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/fintype.20.28units.20.28zmod.20n.29.29/near/252780334\">said</a>:</p>\n<blockquote>\n<p>hmm, then we should make this an instance (-;<br>\nBut we should use the <code>noncomputable</code> version. The one by <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> causes a clash with <code>units.fintype</code>.</p>\n</blockquote>\n<p>I don't think it does, because there is no instance of <code>fintype (zmod n)</code></p>",
        "id": 252798132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631285244
    },
    {
        "content": "<p>Sure, but what happens after <code>cases n</code> in the <code>succ</code> branch?</p>",
        "id": 252801279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631286480
    },
    {
        "content": "<p>I don't follow, you were talking about conflicting instances</p>",
        "id": 252806345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631288575
    },
    {
        "content": "<p>The way that this instance is proved doesn't matter, since it's not competing with anything</p>",
        "id": 252806379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631288591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> There is an instance of <code>fintype (zmod (n+1))</code></p>",
        "id": 252817520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631293303
    },
    {
        "content": "<p>So then we can get competing instances for <code>fintype (units (zmod (n+1)))</code></p>",
        "id": 252817613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631293333
    },
    {
        "content": "<p>ah, I was hoping there wasn't</p>",
        "id": 252817618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631293335
    },
    {
        "content": "<p>It seems like a pretty useful instance to me.</p>",
        "id": 252817666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631293356
    },
    {
        "content": "<p>Is it possible to just use <code>fin (n+1)</code> instead?</p>",
        "id": 252817675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631293360
    },
    {
        "content": "<p>they are defeq after all</p>",
        "id": 252817709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631293376
    },
    {
        "content": "<p>Lemmas about finite fields should apply to <code>zmod p</code>, shouldn't they?</p>",
        "id": 252817717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631293383
    },
    {
        "content": "<p>that's not of the form <code>zmod (n+1)</code></p>",
        "id": 252817746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631293397
    },
    {
        "content": "<p>so it wouldn't apply anyway</p>",
        "id": 252817761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631293404
    },
    {
        "content": "<p>I'm inclined to just live with the diamond if all these instances are used</p>",
        "id": 252817904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631293461
    },
    {
        "content": "<p>Well... there is <code>[fact (0 &lt; n)] -&gt; fintype (zmod n)</code></p>",
        "id": 252817917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631293467
    },
    {
        "content": "<p>and <code>[fact p.prime] -&gt; [fact (0 &lt; p)]</code></p>",
        "id": 252817951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631293480
    },
    {
        "content": "<p>oof, what are all these fact instances</p>",
        "id": 252817994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631293497
    },
    {
        "content": "<p>Well, we want <code>[fact p.prime] -&gt; field (zmod p)</code>. Don't we?</p>",
        "id": 252818294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631293615
    },
    {
        "content": "<p>So that's the origin of all the facts.</p>",
        "id": 252818343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631293645
    },
    {
        "content": "<p>As long as there aren't any fact instances, it should be okay to have instances with fact hypotheses since they won't be satisfied</p>",
        "id": 252818491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631293700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm afraid there's also a <code>fact (0 &lt; (n+1))</code> instance. It's quite a useful one, in fact.<br>\nIt's one of the 2 or 3 global fact instances.</p>",
        "id": 252821331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631295016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/fintype.20.28units.20.28zmod.20n.29.29/near/252817904\">said</a>:</p>\n<blockquote>\n<p>I'm inclined to just live with the diamond if all these instances are used</p>\n</blockquote>",
        "id": 252821396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631295047
    },
    {
        "content": "<p>Fintype instances are subsingleton</p>",
        "id": 252862120,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631314933
    }
]