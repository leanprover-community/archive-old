[
    {
        "content": "<p>Has anyone looked into using Blockly for Lean? I tried searching for it here but couldn't find anything. It's for building visual program editors, similar to Scratch: <a href=\"https://developers.google.com/blockly\">https://developers.google.com/blockly</a></p>",
        "id": 199285629,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590890961
    },
    {
        "content": "<p>nope</p>",
        "id": 199285801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590891256
    },
    {
        "content": "<p>Why?  It looks like the type of programming you do with really little children.  I'm not sure lean is at the right level for that?</p>",
        "id": 199285803,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590891262
    },
    {
        "content": "<p>It's also a programming interface, and most of the interesting parts of lean are not about programming</p>",
        "id": 199285808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590891288
    },
    {
        "content": "<p>I think this may be good for getting people that are very-not-technically inclined to get their feet wet, but most of the development energy here is in trying to get research mathematicians to become power users</p>",
        "id": 199285809,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590891300
    },
    {
        "content": "<p>If you're interested in combing picture-based software with Lean, I think it would be cool to have graphical proof assistants like <a href=\"http://globular.science\">globular.science</a> compile into lean code</p>",
        "id": 199285820,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590891339
    },
    {
        "content": "<p>I think a graphical proof assistant would be an outstanding idea. I don't know that blockly is the right tool for getting started with that, though.</p>",
        "id": 199285871,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1590891429
    },
    {
        "content": "<p>I was thinking of it as an intro thing, like maybe at the high school level</p>",
        "id": 199285878,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590891477
    },
    {
        "content": "<p>I've heard from friends who don't know Lean that it seems like a \"write-only language,\" which I find amusing. Perhaps if developed, it could be used for high school geometry? They tend to like to tell high schoolers to do those two-column proofs using properties of Euclidean geometry</p>",
        "id": 199285920,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1590891552
    },
    {
        "content": "<p>I mean a lot of math-inclined high school students learn to program in really code (Python, Java, C, BASIC) in high school.</p>",
        "id": 199285924,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590891571
    },
    {
        "content": "<p>I think something like the NNG is a better use of effort in attracting high school level students.</p>",
        "id": 199285998,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590891624
    },
    {
        "content": "<p>Sure, but I wouldn't compare Lean to those languages. It's not as easy to pick up as some of the languages you listed, but it theoretically could be with a graphical interface. I'm just skeptical as to whether Blockly would be good for that purpose</p>",
        "id": 199286006,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1590891664
    },
    {
        "content": "<p>I had the unfortunate experience of going to a high school that used Scratch in their intro to CS course</p>",
        "id": 199286007,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590891667
    },
    {
        "content": "<p>Oh no...</p>",
        "id": 199286008,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1590891675
    },
    {
        "content": "<p>So I'm approaching this from that perspective</p>",
        "id": 199286010,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590891687
    },
    {
        "content": "<p>I feel like Lean isn't the best thing to hand high-schoolers interested in CS, if that's where you're going with this</p>",
        "id": 199286053,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1590891736
    },
    {
        "content": "<p>I feel like people that are more familiar with math and/or CS at that age are, in my experience, lucky to be introduced to it in a friendly way early on in life</p>",
        "id": 199286057,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590891753
    },
    {
        "content": "<p>No sorry, I was approaching it from the perspective of teaching math</p>",
        "id": 199286060,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590891766
    },
    {
        "content": "<p>I absolutely agree. My high school had no CS courses, and I definitely had to go out of my way to get an enriching education in way of math and CS</p>",
        "id": 199286069,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1590891819
    },
    {
        "content": "<p>I'm not in education at all so I may just not know what I'm talking about at all though</p>",
        "id": 199286070,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590891820
    },
    {
        "content": "<p>I definitely romanticize the idea that we could one day have a beautiful graphical interface for Lean, where math proofs would be visual and intuitive for someone at the high school level, but we're admittedly a long ways away from something like that</p>",
        "id": 199286143,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1590891891
    },
    {
        "content": "<p>Yeah high school was rough, I have a whole sob story about how bad my high school math education was</p>",
        "id": 199286148,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590891898
    },
    {
        "content": "<p>That's fair, I guess it's something to look into later, for me at least</p>",
        "id": 199286158,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590891936
    },
    {
        "content": "<p>I think if you want to teach proofs graphically, you could make a graphical block gluing tool with a pretty interface.  You could use Lean as a backend or really write your own back end.  I don't think there is something special about Lean here. <span class=\"user-mention\" data-user-id=\"284844\">@Michael Beeson</span> a long time ago wrote a GUI Calculus theorem prover for students which didn't let them make mistakes. <a href=\"http://www.helpwithmath.com\">http://www.helpwithmath.com</a></p>",
        "id": 199286163,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590891960
    },
    {
        "content": "<p>Well that's impressive. How does the system for creating problems work?</p>",
        "id": 199286321,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1590892233
    },
    {
        "content": "<p>We could have <a href=\"http://incredible.pm/\">http://incredible.pm/</a>, with edges carrying local hypotheses, and blocks for <code>have</code> and <code>apply</code>.</p>",
        "id": 199286542,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590892768
    },
    {
        "content": "<p>As soon as you plug in a block, under the hood we'd use <code>refine</code> to generate the labels on the input strings.</p>",
        "id": 199286584,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590892805
    },
    {
        "content": "<p><code>unify</code> would determine whether you can join two strings.</p>",
        "id": 199286586,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590892832
    },
    {
        "content": "<p>A globular/lean interface would be amazing. You'd get a math-aware programming language to write tactics for globular, and a graphical editor for (higher dimensional) commutative diagrams / rewrite proofs.</p>",
        "id": 199286629,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590892940
    },
    {
        "content": "<p>I talked to Jamie Vicary about this a while ago.</p>",
        "id": 199286631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590892959
    },
    {
        "content": "<p>It would be a lot of work.</p>",
        "id": 199286633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590892965
    },
    {
        "content": "<p>There is a <code>zigzag</code> branch that begins formalising their essential data structures.</p>",
        "id": 199286636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590893009
    },
    {
        "content": "<p>Yeah, I really think a lot of the \"boring logic lemmas\" in lean would have a really wide appeal if there was no notation at all, just puzzles fitting jigsaw pieces together to complete a circuit. incredible seems quite close</p>",
        "id": 199286741,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590893193
    },
    {
        "content": "<p>Yeah! I could totally see a high school propositional logic class being taught using a tool like this</p>",
        "id": 199286751,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1590893247
    },
    {
        "content": "<p>That also reminds me,  <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> once used some graphical propositional logic tool to teach an intro to proofs class.</p>",
        "id": 199287352,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590894400
    },
    {
        "content": "<p>I wonder if <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> widgets could be leveraged to make a basic version of one of these games in vscode. There was also that cabbage goat wolf thread a long time ago, let me find it.<br>\n<a href=\"#narrow/stream/116395-maths/topic/wolf.20goat.20cabbage\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/wolf.20goat.20cabbage</a></p>",
        "id": 199287422,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590894528
    },
    {
        "content": "<p>I think if you are implementing basic stuff in Lean, you could do that with the lean server which wouldn't be hard.  The hard part would be the graphical stuff.  (See <a href=\"#narrow/stream/113488-general/topic/Examples.20of.20communicating.20with.20Lean\">this thread from today</a> for how to interact with Lean programmatically.)</p>",
        "id": 199287495,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590894696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113488-general/topic/Blockly.20for.20Lean/near/199285998\">said</a>:</p>\n<blockquote>\n<p>I think something like the NNG is a better use of effort in attracting high school level students.</p>\n</blockquote>\n<p>I have given many high school talks about the natural numbers and Lean, but induction is not something taught until very late on, so I give the proof of 2+2=4 instead. In fact I had a massive gig in March where I was going to prove 2+2=4 to 250 high schoolers but it got cancelled because of lockdown :-( . I just have it in my head that only the brightest schoolkids would understand induction. I think Euclidean geometry might be a nicer way to introduce Lean to schoolkids, but I have never really thought about it because it would require some graphical UI to be good, and I strongly suspect that there are other systems which can already do this.</p>",
        "id": 199300043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590920272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> this is absolutely a use case of widgets. you could write the whole thing in lean without changing any C++. There are still some features for widgets that are missing like drag and drop though but this was the kind of thing I had in mind.</p>",
        "id": 199300221,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1590920602
    },
    {
        "content": "<p>The main problem is saving state. At the moment widgets let you 'save state' by returning a string which is put in to the proof document.<br>\nBut doing this with some graphical structure would look bloaty.</p>",
        "id": 199300384,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1590920892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> I think you have in mind <em>Tarski's World</em> (<a href=\"https://www.gradegrinder.net/Products/tw-index.html\">https://www.gradegrinder.net/Products/tw-index.html</a>), which is a great tool for teaching students how to read and write expressions in first-order logic. The exercises are fun. For example, you can give students a list of sentences describing a blocks world (\"there is a large tetrahedron to the left of a small cube\"), and they have build the world graphically and click a button to see if they got it right. They also have software called <em>Turing's World</em>, which lets students build and run Turing machines.</p>\n<p>But these are not about teaching proof. They also have a system for that: <a href=\"https://www.gradegrinder.net/Products/lpl-index.html\">https://www.gradegrinder.net/Products/lpl-index.html</a>. I have never used it, but I would be interested in hearing if anyone has had experience with it. It is probably subject to Kevin's objections to e.g. <em>TPIL</em> and <em>Logic and Proof</em> that there is too much emphasis on the logical manipulations, which good mathematics students tend to pick up intuitively, rather than the mathematical content. He has a point: we don't want to convey the impression that proof is only about messing around with ands and ors, it is about drawing substantive conclusions about what follows from what. </p>\n<p>Teaching proof with software is hard: a proof is an argument, so you want a fun way for students to construct arguments and get feedback. NNG and friends are probably close to optimal for that. Or something like the <em>Naproche</em> examples, where you pick a restricted domain with a manageable number of definitions and assumptions, write proofs as sequences of statements, and have a first-order theorem prover fill in the rest.</p>\n<p>A number of years ago, John Mumma, Ed Dean, and I specified a formal system that allows you to write proofs in elementary geometry much the way you find them in Euclid's <em>Elements</em>. (<a href=\"http://www.andrew.cmu.edu/user/avigad/Papers/formal_system_for_euclids_elements.pdf\">http://www.andrew.cmu.edu/user/avigad/Papers/formal_system_for_euclids_elements.pdf</a>) I think it should be possible to implement it, so that students could write proofs in geometry (\"Let D be the point bisecting AB. Then AD ~ DB. ..\") and have them checked automatically, which a little green check whenever a line is sufficiently justified. In a recent paper, Michael Beeson and co-authors gave us flak for the fact that it hasn't been implemented (they were formalizing geometry in Coq), but I still have hopes of doing it in Lean 4 one day, with nice syntax for writing geometric proofs and interpreting them (in the background) as statements about the Euclidean plane.</p>",
        "id": 199308438,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1590935789
    },
    {
        "content": "<p>I know nothing about this but for the sake of connecting threads I'll point out that someone has just connected Blockly and Lean: <a href=\"#narrow/stream/113488-general/topic/Blockly.20with.20Lean/near/250457875\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Blockly.20with.20Lean/near/250457875</a></p>",
        "id": 250461942,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629797993
    }
]