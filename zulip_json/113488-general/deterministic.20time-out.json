[
    {
        "content": "<p>What can cause a deterministic time-out? Can I read anything into the red squiggles to help me find out where it is?</p>\n<p><a href=\"/user_uploads/3121/IiAb6ol1iNIwuVkJGfY_DRNc/timeout.png\" target=\"_blank\" title=\"timeout.png\">timeout.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/IiAb6ol1iNIwuVkJGfY_DRNc/timeout.png\" target=\"_blank\" title=\"timeout.png\"><img src=\"/user_uploads/3121/IiAb6ol1iNIwuVkJGfY_DRNc/timeout.png\"></a></div>",
        "id": 164151911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180476
    },
    {
        "content": "<p>That code has three errors. They are all \"deterministic time-out\". I am trying to define a term of a given type. I have begun to fully elaborate everything in an attempt to find out where the problem is.</p>",
        "id": 164151978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180539
    },
    {
        "content": "<p>But I don't know what is causing the time-out. How can I debug this?</p>",
        "id": 164151992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180572
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/lpI2nJTjukKhGLOSt6c_aQ1W/timeout2.png\" target=\"_blank\" title=\"timeout2.png\">timeout2.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lpI2nJTjukKhGLOSt6c_aQ1W/timeout2.png\" target=\"_blank\" title=\"timeout2.png\"><img src=\"/user_uploads/3121/lpI2nJTjukKhGLOSt6c_aQ1W/timeout2.png\"></a></div>",
        "id": 164152059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180643
    },
    {
        "content": "<p>I have now fully elaborated all of the terms with red underlines and I don't know what to do next.</p>",
        "id": 164152071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180660
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/BXFHmzE5HWUo3RFkv89lD4Z4/timeout3.png\" target=\"_blank\" title=\"timeout3.png\">timeout3.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BXFHmzE5HWUo3RFkv89lD4Z4/timeout3.png\" target=\"_blank\" title=\"timeout3.png\"><img src=\"/user_uploads/3121/BXFHmzE5HWUo3RFkv89lD4Z4/timeout3.png\"></a></div>",
        "id": 164152089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180697
    },
    {
        "content": "<p>What causes timeouts in Lean?</p>",
        "id": 164152113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> help!</p>",
        "id": 164152142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180749
    },
    {
        "content": "<p>You can use <code>by try_for 1000 {exact bla}</code> in place of <code>bla</code></p>",
        "id": 164152148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556180759
    },
    {
        "content": "<p>Thanks</p>",
        "id": 164152199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180766
    },
    {
        "content": "<p>I'm visiting Johan in Freiburg at the minute and today is my last day</p>",
        "id": 164152201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180775
    },
    {
        "content": "<p>so we're in a bit of a rush ;-)</p>",
        "id": 164152205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180783
    },
    {
        "content": "<p>that will allow you to control where the timeout happens, play with surrounding bits of your code with it</p>",
        "id": 164152211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556180798
    },
    {
        "content": "<p>also you can incrementally build the term using <code>refine</code></p>",
        "id": 164152236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556180824
    },
    {
        "content": "<p><code>unknown identifier exact</code></p>",
        "id": 164152271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180863
    },
    {
        "content": "<p>What is a thunk?</p>",
        "id": 164152276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180869
    },
    {
        "content": "<p>do you have mathlib tactics?</p>",
        "id": 164152288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556180880
    },
    {
        "content": "<p><code>try_for</code> is also a pure function, that's not what you want</p>",
        "id": 164152340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556180896
    },
    {
        "content": "<p>there is a try_for tactic in mathlib</p>",
        "id": 164152343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556180906
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/s70LBf_qf52TKSSXfG8GYDWc/timeout4.png\" target=\"_blank\" title=\"timeout4.png\">timeout4.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/s70LBf_qf52TKSSXfG8GYDWc/timeout4.png\" target=\"_blank\" title=\"timeout4.png\"><img src=\"/user_uploads/3121/s70LBf_qf52TKSSXfG8GYDWc/timeout4.png\"></a></div>",
        "id": 164152356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180935
    },
    {
        "content": "<p>a <code>thunk A</code> is the same as <code>unit -&gt; A</code>, as you can see from the definition, but the lambda unit can be omitted by parser magic</p>",
        "id": 164152374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556180949
    },
    {
        "content": "<p><code>by</code></p>",
        "id": 164152389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556180970
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>try_for timeout, using sorry\n</pre></div>",
        "id": 164152404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556180992
    },
    {
        "content": "<p>increase the number if it's too timeout happy</p>",
        "id": 164152457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556181009
    },
    {
        "content": "<p>That's using the tactic</p>",
        "id": 164152462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556181012
    },
    {
        "content": "<p>I tried 10000</p>",
        "id": 164152469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556181015
    },
    {
        "content": "<p>right, that's the expected result</p>",
        "id": 164152479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556181024
    },
    {
        "content": "<p>Fails on 100000</p>",
        "id": 164152488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556181042
    },
    {
        "content": "<p>but now you can break up your term into bits, and elaborate it all separately to find the hotspot</p>",
        "id": 164152491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556181054
    },
    {
        "content": "<p>I thought I already did this with the @ stuff</p>",
        "id": 164152509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556181084
    },
    {
        "content": "<p>I just get \"timeout\". Can you look at the red squiggles? Are they any indication of where the problem is?</p>",
        "id": 164152513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556181100
    },
    {
        "content": "<p>i.e. instead of </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">try_for</span> <span class=\"mi\">1000</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>try</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">try_for</span> <span class=\"mi\">1000</span> <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">foo</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">try_for</span> <span class=\"mi\">1000</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">bar</span> <span class=\"o\">},</span>\n  <span class=\"n\">try_for</span> <span class=\"mi\">1000</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">baz</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 164152563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556181129
    },
    {
        "content": "<p>try to figure out what part of the elaboration is taking all the time</p>",
        "id": 164152569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556181154
    },
    {
        "content": "<p>I don't know how trustworthy the red squiggle locations are for timeouts</p>",
        "id": 164152593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556181204
    },
    {
        "content": "<p>OK many thanks for these tips. I'll try to take it from here.</p>",
        "id": 164152702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556181337
    },
    {
        "content": "<p>Mario -- many thanks indeed. These ideas are exactly the tool I need to debug this very frustrating issue.</p>",
        "id": 164153090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556181791
    },
    {
        "content": "<p>OK wonderful -- I have got to the heart of things!</p>\n<p>I have <code>X : Type</code> and then <code>def Y (v : random_parameter) := X</code>, so <code>X</code> and <code>Y v</code> are defeq. I now have uniform space structures on X and Y, and I think of them as defeq too, but Lean does not even understand what that assertion means because they are terms of different types.</p>\n<p>OK so the actual thing I want is the following: I have a multiplication defined on <code>ring_completion X</code> and a multiplication defined on <code>ring_completion (Y v)</code> and the multiplications are defined using some continuous extension of a topology coming from the uniform space structures which I think of as defeq but which are not because this doesn't make sense. I think of these multiplications as defeq. But they are not. And Lean is struggling to prove that the map which I would call the identity map is a monoid homomorphism, because to identify the multiplications it needs to identify the structures all the way down.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> this is another instance of missing transfer functionality, isn't it? I can give you an <code>equiv f:X -&gt; Y</code> and now I want an equiv <code>u(f): uniform_space X -&gt; uniform_space Y</code>and <code>t(f): topological_ring X -&gt; topological_ring Y </code> and then I want an equiv <code>topological_ring (@ring_completion uX tX X) -&gt; topological_ring (@ring_completion (u(f) uX) (t(f) tX) Y)</code>. Am I making sense here? In our case <code>X -&gt; Y</code> is <code>id</code> but even in this case we're having problems. Should we be? Perhaps we have made an actual maths error under the hood somewhere and our ring structures are really \"what I would call defeq\".</p>\n<p>equal are multiplications defined using the topological structures coming from the ring completions which use these uniform structures</p>",
        "id": 164154954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556183868
    },
    {
        "content": "<p>From your description of <code>X</code> and <code>Y v</code>, they should actually be defeq, and you can take typeclass arguments from one and use it for the other. But because <code>Y</code> is not a reducible def, it will affect typeclass inference, i.e. it will probably find different instances, and those instances might not be defeq to the ones you get with <code>X</code></p>",
        "id": 164155164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556184096
    },
    {
        "content": "<p>Yes, I think my underlying problem must be a mathematical one</p>",
        "id": 164155327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556184254
    }
]