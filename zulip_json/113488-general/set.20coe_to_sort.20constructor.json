[
    {
        "content": "<p>What is the official name of <code>def mk_it {α : Type*} {s : set α} {x : α} (h : x ∈ s) : s := ⟨x, h⟩</code>? Surprisingly I need it in <code>let</code> statement, Lean simply doesn't let me define something of type <code>s</code> without this function.</p>",
        "id": 201243190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592470792
    },
    {
        "content": "<p>And now I see <code>cases tactic failed, unexpected failure when introducing auxiliary equatilies</code>. I really need to learn stuff about that coercion from sets to types.</p>",
        "id": 201243325,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592470873
    },
    {
        "content": "<p><code>subtype.mk</code>?</p>",
        "id": 201243449,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592470942
    },
    {
        "content": "<p>The question is: how to you make <code>let</code> believing that obvious answer?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- error!</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201244449,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592471663
    },
    {
        "content": "<p><code>let X : ↥s := subtype.mk x h</code>? :(</p>",
        "id": 201245204,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592472238
    },
    {
        "content": "<p>Indeed that works, but doesn't make me feel super happy.</p>",
        "id": 201245799,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592472619
    },
    {
        "content": "<p>We could fix it by using <code>  t ← i_to_expr ``(%%e : Sort*)</code> or the like in <code>let</code>, but I think that will produce a <code>coe</code> rather than a <code>coe_sort</code></p>",
        "id": 201246145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592472888
    },
    {
        "content": "<p>I don't know if there is a function exposed that will allow us to trigger the coe-to-sort parser transform</p>",
        "id": 201246241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592472955
    },
    {
        "content": "<p>I suppose a hack would be to elaborate <code>\\lam (x : e), x</code> and then extract <code>e</code></p>",
        "id": 201246309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592472993
    },
    {
        "content": "<p>Oh I see -- the issue is that lean will automatically insert a coe, but not a coe to sort?</p>",
        "id": 201250942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592476294
    },
    {
        "content": "<p>It will still typecheck, but it will be an observable difference and that could lead to downstream breakage</p>",
        "id": 201251119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592476434
    },
    {
        "content": "<p>for example if one has a simp lemma and the other doesn't</p>",
        "id": 201251163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592476446
    },
    {
        "content": "<p>As is it's not inserting any coe because the \"type\" is parsed first and then the value is parsed and asserted to have the type (which is okay because the type is coerced here) and then the type and the value are passed to <code>definev</code> which complains because the \"type\" isn't a type</p>",
        "id": 201251273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592476539
    },
    {
        "content": "<p>(This bug is in the code of <code>tactic.interactive.let</code> btw)</p>",
        "id": 201251348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592476583
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 201259100,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592482484
    }
]