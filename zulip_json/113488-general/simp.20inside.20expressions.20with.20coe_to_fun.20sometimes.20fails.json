[
    {
        "content": "<p>I've been trying to implement <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> request that in my baby PR for category theory I use coercions to allow applying a functor to an object, as <code>F X</code>, rather than having to either write explicitly <code>F.onObjects X</code>, or introduce some awkward notation, such as <code>F +&gt; X</code>.</p>",
        "id": 130948850,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533513427
    },
    {
        "content": "<p>I would very much like to do this, but I also want to be confident that this doesn't mess up the nice and easy automation I have throughout my category theory library.</p>",
        "id": 130948858,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533513459
    },
    {
        "content": "<p>Unfortunately, I seem to have run into a problem, which is a strange interaction between coercions and the simplifier.</p>",
        "id": 130948897,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533513488
    },
    {
        "content": "<p>Hopefully someone here will explain how to get around this! I fear that the fix would require tweaking the simplifier, which is out of bounds at the moment.</p>",
        "id": 130948901,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533513518
    },
    {
        "content": "<p>In any case, here is a self-contained piece of code, containing some very cut down definitions from the category theory library, that demonstrates the problem.</p>",
        "id": 130948911,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533513553
    },
    {
        "content": "<p>Essentially, it is that <code>simp</code> sometimes can't rewrite under a coercion, because it can't build the proof terms (in particular, it can't build some <code>congr_arg</code> terms, because of a type checking subtlety).</p>",
        "id": 130948964,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533513607
    },
    {
        "content": "<p>This has the result that in order to be able to use <code>simp</code> successfully, I'll have to provide two versions of many lemmas: one for use by humans, that refer to the coercions, and one for use by <code>simp</code> (after applying <code>unfold_coes</code> to unfold all the coercions), that don't refer to the coercions.</p>",
        "id": 130948985,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533513690
    },
    {
        "content": "<p>In my mind, that's worse than not having the coercions available in the first place.</p>",
        "id": 130948986,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533513703
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import tactic.interactive\n\nuniverse u\n\nclass category (Obj : Type u) : Type (u+1) :=\n(Hom : Obj → Obj → Type u)\n(identity : Π X : Obj, Hom X X)\n\nnotation `𝟙` := category.identity     -- type as \\b1\ninfixr ` ⟶ `:10  := category.Hom     -- type as \\h\n\nvariable (C : Type u)\nvariable [𝒞 : category C]\nvariable (D : Type u)\nvariable [𝒟 : category D]\ninclude 𝒞 𝒟\n\ninstance ProductCategory : category (C × D) :=\n{ Hom            := λ X Y, ((X.1) ⟶ (Y.1)) × ((X.2) ⟶ (Y.2)),\n  identity       := λ X, ⟨ 𝟙 (X.1), 𝟙 (X.2) ⟩ }\n\n@[simp] lemma ProductCategory.identity (X : C) (Y : D) : 𝟙 (X, Y) = (𝟙 X, 𝟙 Y) := by refl\n\nstructure Functor  :=\n(onObjects     : C → D)\n(onMorphisms   : Π {X Y : C}, (X ⟶ Y) → ((onObjects X) ⟶ (onObjects Y)))\n(identities    : ∀ (X : C), onMorphisms (𝟙 X) = 𝟙 (onObjects X))\n\nattribute [simp] Functor.identities\n\ninfixr ` +&gt; `:70 := Functor.onObjects\ninfixr ` &amp;&gt; `:70 := Functor.onMorphisms\ninfixr ` ↝ `:70 := Functor -- type as \\lea\n\nvariables {C} {D}\n\nstructure NaturalTransformation (F G : C ↝ D) : Type u :=\n(components: Π X : C, (F +&gt; X) ⟶ (G +&gt; X))\n\ninfixr ` ⟹ `:50  := NaturalTransformation\n\ninstance {F G : C ↝ D} : has_coe_to_fun (F ⟹ G) :=\n{ F   := λ α, Π X : C, (F +&gt; X) ⟶ (G +&gt; X),\n  coe := λ α, α.components }\n\ndefinition IdentityNaturalTransformation (F : C ↝ D) : F ⟹ F :=\n{ components := λ X, 𝟙 (F +&gt; X) }\n\ninstance FunctorCategory : category (C ↝ D) :=\n{ Hom            := λ F G, F ⟹ G,\n  identity       := λ F, IdentityNaturalTransformation F }\n\n@[simp] lemma FunctorCategory.identity.components (F : C ↝ D) (X : C) : (𝟙 F : F ⟹ F) X = 𝟙 (F +&gt; X) := by refl\n\nlemma test (E : Type u) [ℰ : category E] (X : C) (Y : D) (F : C ↝ (D ↝ E)) : (F &amp;&gt; (prod.fst (𝟙 (X, Y)))) Y = 𝟙 ((F +&gt; X) +&gt; Y) :=\nbegin\n  -- Really, `simp` should just work, finishing the goal.\n  -- However this doesn&#39;t work:\n  success_if_fail {simp},\n  -- Notice that rewriting with that simp lemma succeeds:\n  rw ProductCategory.identity,\n  dsimp,\n  -- Again, this `simp` fails:\n  success_if_fail {simp},\n  rw Functor.identities,\n  -- Finally, at this stage `simp` manages to apply FunctorCategory.identity.components\n  simp,\nend\n\nlemma test&#39; (E : Type u) [ℰ : category E] (X : C) (Y : D) (F : C ↝ (D ↝ E)) : (F &amp;&gt; (prod.fst (𝟙 (X, Y)))) Y = 𝟙 ((F +&gt; X) +&gt; Y) :=\nbegin\n  -- If we unfold all the coercions first, at least `simp` gets started\n  unfold_coes,\n  simp,\n  -- But doesn&#39;t finish, because with the coercions gone, FunctorCategory.identity.components doesn&#39;t apply anymore!\n  admit\nend\n\n-- We can define an alternative version of that @[simp] lemma, with the coercion removed.\n@[simp] lemma FunctorCategory.identity.components&#39; (F : C ↝ D) (X : C) : (𝟙 F : F ⟹ F).components X = 𝟙 (F +&gt; X) := by refl\n\nlemma test&#39;&#39; (E : Type u) [ℰ : category E] (X : C) (Y : D) (F : C ↝ (D ↝ E)) : (F &amp;&gt; (prod.fst (𝟙 (X, Y)))) Y = 𝟙 ((F +&gt; X) +&gt; Y) :=\nbegin\n  unfold_coes,\n  simp,\n  -- At this stage, we&#39;ve recovered reasonable automation, at the expense of having to\n  -- state lemmas twice, once with the coercions (for the humans) and once without (for the simplifier).\nend\n</pre></div>",
        "id": 130949027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533513724
    },
    {
        "content": "<p>I've seen this issue before. Unfortunately <code>simp</code> does not rewrite inside coercions because they are apparently dependent functions (the nondependency is only visible after you unfold the definition)</p>",
        "id": 130949286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533514244
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 130949293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533514263
    },
    {
        "content": "<p>This is related to why I was writing a <code>mk_congr_arg_using_dsimp</code> tactic <a href=\"#narrow/stream/113488-general/subject/congr_arg.20and.20superficially.20dependent.20functions/near/130827909\" title=\"#narrow/stream/113488-general/subject/congr_arg.20and.20superficially.20dependent.20functions/near/130827909\">above</a>. (The idea being that if you <code>dsimp</code> the function first, sometimes you see that it's not actually a dependent function.)</p>",
        "id": 130949304,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533514313
    },
    {
        "content": "<p>I would look into fixing the congr lemma generation to use this</p>",
        "id": 130949367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533514424
    },
    {
        "content": "<p>Is that something which is fixable? Or is it frozen waiting for Lean 4?</p>",
        "id": 130949411,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533514456
    },
    {
        "content": "<p>there is always the option of making <code>simp'</code></p>",
        "id": 130949414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533514472
    },
    {
        "content": "<p>I see. But isn't much of <code>simp</code> written in C++?</p>",
        "id": 130949419,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533514497
    },
    {
        "content": "<p>Could we make a patched <code>simp'</code> that had similar performance?</p>",
        "id": 130949428,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533514513
    },
    {
        "content": "<p>probably not, but if you use it only when necessary it should be palatable</p>",
        "id": 130949435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533514546
    },
    {
        "content": "<p>I think you can use <code>ext_simplify_core</code> to hook into the traversal part without messing with the core of <code>simp</code></p>",
        "id": 130949483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533514589
    },
    {
        "content": "<p>eek... but my automation really relies on <code>simp</code> just doing its thing. As things are, I don't think there's any way to distinguish between the situations \"simp failed to do anything\" and \"simp would have worked, but broke trying to construct a <code>congr_arg</code>\"</p>",
        "id": 130949485,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533514609
    },
    {
        "content": "<p>So it's not like I could just write a tactic that says \"do <code>simp</code>, unless that breaks, in which case retry with <code>simp'</code>\".</p>",
        "id": 130949493,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533514636
    },
    {
        "content": "<p>Okay, I will investigate <code>ext_simplify_core</code> again. I once knew how that worked, but have forgotten.</p>",
        "id": 130949495,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533514658
    },
    {
        "content": "<p>By the way, <code>dsimp</code> works under dependent functions</p>",
        "id": 130949551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533514735
    },
    {
        "content": "<p>so in particular it works in <code>test</code></p>",
        "id": 130949557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533514751
    },
    {
        "content": "<p>Without having thought about it too hard, could a custom congr lemma for non-dependent coercions work?</p>",
        "id": 130949606,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1533514816
    },
    {
        "content": "<p>Does <code>simp</code> use <code>@[congr]</code> lemmas?</p>",
        "id": 130949607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533514824
    },
    {
        "content": "<p>While I've got your attention on this, would you mind having a look at my <a href=\"#narrow/stream/113488-general/subject/congr_arg.20and.20superficially.20dependent.20functions/near/130827909\" title=\"#narrow/stream/113488-general/subject/congr_arg.20and.20superficially.20dependent.20functions/near/130827909\"><code>mk_congr_arg_using_dsimp</code></a> and see if there is a way to avoid polluting the goal with extra hypotheses as a side effect? I'm pretty unhappy about that hack.</p>",
        "id": 130949628,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533514894
    },
    {
        "content": "<p>Yes; I know <code>dsimp</code> works fine, and indeed in my automation I always attempt <code>dsimp</code> before <code>simp</code>; sorry if this minimised example is too minimised, but I certainly have cases where <code>simp</code> is failing because of this effect.</p>",
        "id": 130949672,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533514950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, sorry, I don't know what you mean by \"Does <code>simp</code> use <code>@[congr]</code> lemmas?\".</p>",
        "id": 130949675,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533514982
    },
    {
        "content": "<p>Simp works by using congruence lemmas generated by <code>mk_congr_lemma</code> for traversal. If it also accepts user lemmas marked <code>@{congr]</code>, then this would solve all our problems, because we could craft congr lemmas for looking through apparently dependent functions</p>",
        "id": 130949740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533515105
    },
    {
        "content": "<p>Ah, I see!</p>",
        "id": 130949748,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533515139
    },
    {
        "content": "<p>Also, looking at the coercion in your example, it is in fact a dependent function:</p>\n<div class=\"codehilite\"><pre><span></span>instance {F G : C ↝ D} : has_coe_to_fun (F ⟹ G) :=\n{ F   := λ α, Π X : C, (F +&gt; X) ⟶ (G +&gt; X),\n  coe := λ α, α.components }\n</pre></div>\n\n\n<p>so why is this legitimate in this case?</p>",
        "id": 130949806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533515211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think so? <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/library/tactic/simplify.cpp#L739-L740\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/library/tactic/simplify.cpp#L739-L740\">https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/library/tactic/simplify.cpp#L739-L740</a> <code>simp</code> is the reason <code>[congr]</code> was introduced, afaik</p>",
        "id": 130949818,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1533515262
    },
    {
        "content": "<p>The problem is that for particular values of <code>α</code>, that dependent function might <code>dsimp</code> to a non-dependent function.</p>",
        "id": 130949820,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533515266
    },
    {
        "content": "<p>I thought <code>[congr]</code> was used for <code>calc</code></p>",
        "id": 130949862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533515293
    },
    {
        "content": "<p>I'm not aware of <code>calc</code> using anything other than <code>[trans]</code></p>",
        "id": 130950017,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1533515582
    },
    {
        "content": "<p>Are there any places I can look to find <code>@[congr]</code> used in conjunction with <code>simp</code>? I'm finding the C++ code pretty hard going.</p>",
        "id": 130950538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533516517
    },
    {
        "content": "<p>I guess I just found <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s example at <a href=\"https://github.com/leanprover/lean/commit/6bd3fe24493c1748c8cfd778f63a3b832c6e6ba7#diff-db6c06d0649a66f8bbfc76e59b15cef2\" target=\"_blank\" title=\"https://github.com/leanprover/lean/commit/6bd3fe24493c1748c8cfd778f63a3b832c6e6ba7#diff-db6c06d0649a66f8bbfc76e59b15cef2\">https://github.com/leanprover/lean/commit/6bd3fe24493c1748c8cfd778f63a3b832c6e6ba7#diff-db6c06d0649a66f8bbfc76e59b15cef2</a>, but I'm still not sure what's going on. :-)</p>",
        "id": 130950675,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533516785
    },
    {
        "content": "<p>Okay, I am for now failing to work out how to use @[congr] to help <code>simp</code> work better, or to write my own <code>simp'</code> that uses <code>ext_simplify_core</code>. I'm happy to continue investigating both options, and very happy if someone else does this. :-)</p>",
        "id": 130951668,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533518876
    },
    {
        "content": "<p>In the meantime, could I propose, <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, that in my category theory PR we defer the issue of adding coercions for functors acting on objects, and not consider that an obstacle for merging this PR?</p>\n<p>If we can solve the issue here, of course I would love to add these coercions. In the meantime, it is not very expensive to write out the coercions, or have notations for them. I would really like to get this PR done, without breaking the possibility of good automation.</p>",
        "id": 130951718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533519001
    },
    {
        "content": "<p>Damn! I figured out what congr lemma to use, but lean doesn't accept it :/</p>\n<div class=\"codehilite\"><pre><span></span>@[congr] theorem NaturalTransformation.components_congr\n  {F G : C ↝ D} {α β : F ⟹ G} (h : α = β) (X) : α.components X = β.components X :=\ncongr_fun (congr_arg coe_fn h) _\n-- ok, generated automatically\n\n@[congr] theorem NaturalTransformation.coe_congr\n  {F G : C ↝ D} {α β : F ⟹ G} (h : α = β) (X) : α X = β X :=\ncongr_fun (congr_arg coe_fn h) _\n-- invalid congruence lemma, &#39;NaturalTransformation.coe_congr&#39; the left-hand-side of the congruence\n-- resulting type must be of the form (coe_fn x_1 ... x_n), where each x_i is a distinct variable or a sort\n</pre></div>",
        "id": 130951764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533519019
    },
    {
        "content": "<p>even worse, the error is garbage because it didn't parse the statement correctly</p>",
        "id": 130951827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533519181
    },
    {
        "content": "<p>notice that <code>congr</code> fails on this proof for completely the wrong reason:</p>\n<div class=\"codehilite\"><pre><span></span>theorem NaturalTransformation.coe_congr\n  {F G : C ↝ D} {α β : F ⟹ G} (h : α = β) (X) : α X = β X :=\nby do {\n  tgt ← target,\n  (lhs, rhs) ← match_eq tgt,\n  guard lhs.is_app,\n  clemma ← mk_specialized_congr_lemma lhs,\n  trace clemma.type,\n  apply_eq_congr_core tgt }\n-- invalid apply tactic, failed to unify\n--   ⇑α X = ⇑β X\n-- with\n--   ⇑?m_2 = ⇑?m_2\n</pre></div>",
        "id": 130951879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533519281
    },
    {
        "content": "<p>For the purpose of this PR, how about adding the coercions, but add a simp lemma that unfolds the coercions and make simp lemmas that don't use the coercions. That way users can use the coercions but they won't interfere with <code>simp</code></p>",
        "id": 130952264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533520133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I think the coe_fn typeclass needs to be fixed so that lean knows it's a pi type:</p>\n<div class=\"codehilite\"><pre><span></span>class has_coe_to_fun (a : Sort u) : Sort (max u (v+1) (w+1)) :=\n(dom : a → Sort v) (F : ∀ a, dom a → Sort w) (coe : Π x y, F x y)\n</pre></div>\n\n\n<p>I tried this modification in my local copy and it seems to work fine, but of course this requires a modification to core. Also related is an issue brought up by Floris a long time ago - <code>has_coe_to_sort</code> doesn't actually require that the target type is a sort. It should read:</p>\n<div class=\"codehilite\"><pre><span></span>class has_coe_to_sort (a : Sort u) : Type (max u v) :=\n(coe : a → Sort v)\n</pre></div>\n\n\n<p>Any chance of at least getting these into lean 4?</p>",
        "id": 130952475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533520473
    },
    {
        "content": "<p>Okay, I will try out that approach. You're right that it will probably work. The only downside is that <code>simp</code> will produce 'ugly' output that looks different from what the humans are used to.</p>",
        "id": 130952782,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533521050
    },
    {
        "content": "<p>of course it already does this enough that we have techniques like \"use <code>simp</code> terminally\" and \"use <code>simpa</code>\" to mitigate this problem</p>",
        "id": 130952921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533521360
    },
    {
        "content": "<p>Okay. So now I'm left with the question of how much _I_ should use the coercion in the library development.</p>",
        "id": 130953261,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533521919
    },
    {
        "content": "<p>I'm inclined to barely use it! That is, provide the coercion, and a simp lemma that unfolds it, but otherwise ignore it.</p>",
        "id": 130953269,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533521941
    },
    {
        "content": "<p>Is that okay? Or is that making life unpleasant for a user?</p>",
        "id": 130953275,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533521966
    },
    {
        "content": "<p>The alternative is to carefully go through, introducing use of the coercion everywhere except in simp lemmas, I guess.</p>",
        "id": 130953318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533522015
    },
    {
        "content": "<p>I think you should handle it like <code>sub</code>. Write lemmas using it, but also add simp lemma versions of the theorems when applicable</p>",
        "id": 130953809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533523183
    },
    {
        "content": "<p>these should be one liners or restatements</p>",
        "id": 130953855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533523216
    },
    {
        "content": "<p>the user will want to use coercions whenever possible, so there should be lemmas supporting this</p>",
        "id": 130953858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533523253
    },
    {
        "content": "<p>besides, I haven't lost hope of an automation solution to this, we're talking about a workaround here</p>",
        "id": 130953864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533523291
    }
]