[
    {
        "content": "<p>Dear All,</p>\n<p>now that <code>compute_degree_le</code> is in mathlib, I have taken back looking at <code>compute_degree</code>.  I have found a bug though that I am not able to remove.  In the code below, if you add and then remove a zero, <code>compute_degree_le</code> works, but fails otherwise.</p>\n<p>Does anyone have any idea of what might be going on?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.compute_degree</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">repl</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">repl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zero_add</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>  <span class=\"c1\">-- if you remove this line, then next one fails.</span>\n  <span class=\"n\">compute_degree_le</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>As far as I can see, without adding and removing the zero, Lean does not realize that <code>-1</code> is a negative.  But this is where I can make no further progress.</p>\n<p>Any help is greatly appreciated!</p>\n<p>Thanks!</p>",
        "id": 290603006,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658566904
    },
    {
        "content": "<p>In order to \"fix\" <code>compute_degree_le</code>, you can also use <code>apply repl &lt;no_underscore&gt;</code> or use <code>refine repl _</code>.  This does not help me much in understanding how to make <code>compute_degree_le</code> oblivious to the issue, though.</p>",
        "id": 290603284,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658567329
    },
    {
        "content": "<p>Without looking into it much, maybe <code>compute_degree_le</code> is not instantiating metavariables properly?</p>",
        "id": 290607077,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1658572916
    },
    {
        "content": "<p>It is possible: where can I learn about what I should instantiate?  I feel that I am running into this issue more and more as I get myself stuck deeper in meta-programs and never really understand how the instantiation works.</p>",
        "id": 290607205,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658573050
    },
    {
        "content": "<p>to give some context: I narrowed it down to here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"bp\">%%</span><span class=\"n\">tl</span> <span class=\"bp\">≤</span> <span class=\"bp\">%%</span><span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span> <span class=\"bp\">|</span> <span class=\"n\">fail</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"s2\">\"Goal is not of the form `f.nat_degree ≤ d`\"</span><span class=\"o\">),</span>\n<span class=\"k\">match</span> <span class=\"n\">tl</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">tl1</span> <span class=\"bp\">+</span> <span class=\"bp\">%%</span><span class=\"n\">tl2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"n\">nat_degree_add_le_iff_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">tl1</span> <span class=\"bp\">-</span> <span class=\"bp\">%%</span><span class=\"n\">tl2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"n\">nat_degree_sub_le_iff_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">tl1</span> <span class=\"bp\">*</span> <span class=\"bp\">%%</span><span class=\"n\">tl2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"o\">[</span><span class=\"n\">d1</span><span class=\"o\">,</span> <span class=\"n\">d2</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"n\">tl1</span><span class=\"o\">,</span> <span class=\"n\">tl2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"n\">guess_degree</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">nat_degree_mul_le.trans</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">d1</span> <span class=\"bp\">+</span> <span class=\"bp\">%%</span><span class=\"n\">d2</span> <span class=\"bp\">≤</span> <span class=\"bp\">%%</span><span class=\"n\">tr</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"bp\">%%</span><span class=\"n\">f</span><span class=\"o\">)</span>         <span class=\"o\">:=</span> <span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"n\">nat_degree_neg</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le.trans</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"c1\">--  more similar lines</span>\n</code></pre></div>\n<p>and Lean just ignores the last <code>neg</code> match.</p>",
        "id": 290607252,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658573149
    },
    {
        "content": "<p>Floris, your suggestion is spot on!  What is below fixes this issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"bp\">%%</span><span class=\"n\">tl1</span> <span class=\"bp\">≤</span> <span class=\"bp\">%%</span><span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span> <span class=\"bp\">|</span> <span class=\"n\">fail</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"s2\">\"Goal is not of the form `f.nat_degree ≤ d`\"</span><span class=\"o\">),</span>\n<span class=\"n\">tl</span> <span class=\"bp\">←</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">tl1</span><span class=\"o\">,</span>\n<span class=\"c1\">-- continue as before</span>\n</code></pre></div>",
        "id": 290607331,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658573267
    },
    {
        "content": "<p>How can I know if I should instantiate mvars or not?</p>",
        "id": 290607378,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658573296
    },
    {
        "content": "<p>If you have an unknown expression (like <code>target</code>), and you want to check whether it has a particular shape, you want to instantiate the metavariables first. You might also want to call <code>whnf</code> in case you need to do some beta-reductions (but without unfolding the <code>≤</code>). Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">instantiate_mvars</span><span class=\"o\">,</span>\n  <span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"bp\">%%</span><span class=\"n\">tl</span> <span class=\"bp\">≤</span> <span class=\"bp\">%%</span><span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">t</span> <span class=\"n\">reducible</span> <span class=\"bp\">|</span> <span class=\"n\">fail</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"s2\">\"Goal is not of the form `f.nat_degree ≤ d`\"</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 290607680,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1658573798
    },
    {
        "content": "<p>In your example you can also double check that instantiating meta-variables is the problem, since this also succeeds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">repl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">instantiate_mvars_in_target</span><span class=\"o\">,</span>\n  <span class=\"n\">compute_degree_le</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290607696,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1658573821
    },
    {
        "content": "<p>So, whenever I do a match, Lean will infer nothing more than the bare minimum, unless I explicitly tell it to.  Is this a good first approximation?</p>",
        "id": 290607784,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658573983
    },
    {
        "content": "<p>Yeah basically. Lean is very lazy with instantiating metavariables (which is crucial for performance reasons), so it is possible your goal is something like <code>nat_degree ?m  ≤ 0</code> and Lean already knows exactly what <code>?m</code> is, but hasn't assigned <code>?m</code> yet in your goal.</p>",
        "id": 290607866,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1658574103
    },
    {
        "content": "<p>I see.  Is it reasonable to file this as \"like the difference between apply and refine, except at a more fundamental level\"?</p>",
        "id": 290607906,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658574173
    },
    {
        "content": "<p>I don't understand your analogy, so maybe not :-)</p>",
        "id": 290607915,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1658574209
    },
    {
        "content": "<p><em>This</em> refers to simply matching (giving something like apply) or doing the mvars and whnf stuff (something like refine).</p>",
        "id": 290607961,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658574244
    },
    {
        "content": "<p>I'm saying this because I often find that <code>apply</code> leaves goals that can be solved by <code>apply_instance</code> whereas using <code>refine</code> never seems to.</p>",
        "id": 290607987,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658574302
    },
    {
        "content": "<p>So, in my head, this is some unification that has not happened yet, but could have.</p>",
        "id": 290608003,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658574332
    },
    {
        "content": "<p>Anyway, this is more philosophical now: I will keep in mind that, whenever I match, I may want to give hints to Lean that it instantiate something.</p>\n<p>Thanks a lot!</p>",
        "id": 290608056,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658574384
    },
    {
        "content": "<p>I see what you mean. <code>apply</code> indeed fails to do some post-processing (which it probably really should do), like doing some <code>apply_instance</code> at the end and instantiating metavariables in the new goals.</p>",
        "id": 290608065,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1658574411
    },
    {
        "content": "<p>Ok, I am happy that there is some analogy, even if vague.  It helps to classify what is going on, by relating to something that I already know!</p>",
        "id": 290608088,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658574470
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/pull/15649\">#15649</a> implements <code>instantiate_mvars/whnf</code>, as well as using <code>focus1</code> to avoid spillage of the tactic to neighboring goals.</p>",
        "id": 290628748,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658603519
    }
]