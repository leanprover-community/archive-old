[
    {
        "content": "<p>I am surprised about the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_norm</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">∥</span><span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- doesn't compile :-(</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch at application\n  ∥x + y∥ ≤ max\nterm\n  max\nhas type\n  ?m_1 → ?m_1 → ?m_1 : Type ?\nbut is expected to have type\n  ℝ : Type\n-/\n</code></pre></div>\n<p>In <code>analysis.normed_space.basic</code> we have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_norm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">has_norm</span> <span class=\"o\">(</span><span class=\"n\">norm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>but yet if I <code>#print notation \\||</code> I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">_</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">has_norm.norm</span> <span class=\"bp\">#</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>In fact even the following file doesn't make the binding power go above 1:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">∥</span> <span class=\"c1\">-- `∥`:1 _:1 `∥`:1 := norm #0</span>\n</code></pre></div>\n<p>What have I misunderstood here?</p>",
        "id": 226744899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613605245
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">512</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">37</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">999</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">∥</span> <span class=\"c1\">-- `∥`:999 _:37 `∥`:999 := norm #0</span>\n</code></pre></div>\n<p>Is this to be expected? I can't have the first and second <code>\\||</code> with different binding power? This is clearly not what the authors of <code>analysis.normed_space.basic</code> were expecting.</p>",
        "id": 226745123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613605377
    },
    {
        "content": "<p>I think binding power is global per-token?</p>",
        "id": 226745491,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613605605
    },
    {
        "content": "<p>But <code> ∥x + y∥ ≤ max ∥x∥ ∥y∥</code> is a set phrase in nonarchimedean geometry! Can we not get it to parse? <code>∥x + y∥ ≤ (max ∥x∥ ∥y∥)</code> is the current workaround.</p>",
        "id": 226745556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613605646
    },
    {
        "content": "<p>How does parsing fail if you use 1024 for both priorities?</p>",
        "id": 226745808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613605802
    },
    {
        "content": "<p><code> `⌊`:1024 _:1 `⌋`:1 := floor #0</code> is the correct choice, so it seems; it's just that we are bitten by both sides being the same token.</p>",
        "id": 226745894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613605837
    },
    {
        "content": "<p>with 1024 on both I get two <code>invalid expression</code> errors, it's hard to tell what's going wrong.</p>",
        "id": 226745939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613605880
    },
    {
        "content": "<p>one red squiggle under \\le, the other under ||y||</p>",
        "id": 226746009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613605924
    },
    {
        "content": "<p>Yeah, bracketing operators that are the same on both sides are nasty to parse, for example <code>|x+|+f|y|+z|+z|</code></p>",
        "id": 226746871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613606498
    },
    {
        "content": "<p>I think there are vertical bar tokens in unicode with little left/right ticks on them that are an okay compromise IMO</p>",
        "id": 226747194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613606623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20question.20about.20.60.E2.88.A5x.E2.88.A5.60/near/226746871\">said</a>:</p>\n<blockquote>\n<p>Yeah, bracketing operators that are the same on both sides are nasty to parse, for example <code>|x+|+f|y|+z|+z|</code></p>\n</blockquote>\n<p>You just need good spacing :-)</p>",
        "id": 226747759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613606961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>   did you never have problems with parsing and <code>\\||</code>? If not then you are presumably not too interested in the idea of replacing it with some variant of lfloor and rfloor (or any other two different tokens). What you have <a href=\"https://github.com/leanprover-community/mathlib/blob/75f33464960a64eb391710b79b3902373d94da64/src/analysis/normed_space/basic.lean#L26\">here</a> in <code>analysis.normed_space.basic</code> is being ignored by the parser -- the 1024 is apparently overruled by the 1, which is quite a big difference! I'm surprised this issue didn't show up sooner. Or maybe it did and you know about it...</p>",
        "id": 226748079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613607154
    },
    {
        "content": "<p>How about the \"new\" tokens <code>(∥x + y∥)</code> - I hear parts of mathlib already use those /s</p>",
        "id": 226749326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613607998
    },
    {
        "content": "<p>that also works here, if you write <code>∥x + y∥ ≤ max (∥x∥) (∥y∥)</code></p>",
        "id": 226749676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613608276
    },
    {
        "content": "<p>Suggestion: <code>⸡x⸠</code></p>",
        "id": 226750012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613608519
    },
    {
        "content": "<p>Note that unicode calls <code>⸠</code> the left and <code>⸡</code> the right, but I think it makes more sense with the quills pointing out rather than in</p>",
        "id": 226750085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613608565
    },
    {
        "content": "<p>That's \"⸡x⸠\" for android users</p>",
        "id": 226751122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613609451
    },
    {
        "content": "<p>You've pasted the same symbol, so we see the same symbol.</p>",
        "id": 226751262,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1613609561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Sometimes I see parsing errors and add parentheses.</p>",
        "id": 226751298,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1613609597
    },
    {
        "content": "<p>How about a subscript?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_norm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">has_norm</span> <span class=\"o\">(</span><span class=\"n\">norm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`∥ₙ`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_norm</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">∥ₙ</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥ₙ</span> <span class=\"bp\">∥</span><span class=\"n\">y</span><span class=\"bp\">∥ₙ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>seems to work fine and looks way more mathematically reasonable than <code>⸡x⸠</code></p>",
        "id": 226753753,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613611659
    },
    {
        "content": "<p>(<code>ₙ</code> for norm <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 226753809,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613611690
    },
    {
        "content": "<p>What's mathematically unreasonable about it? I think the quills are almost invisible, just barely big enough that you can tell which is which. Just look at them as vertical bars with an orientation</p>",
        "id": 226754069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613611927
    },
    {
        "content": "<p>FYI I got the idea from mathematica, which uses characters that look essentially like this when you use the absolute value notation</p>",
        "id": 226754097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613611967
    },
    {
        "content": "<p><a href=\"https://reference.wolfram.com/language/ref/character/LeftBracketingBar.html\">https://reference.wolfram.com/language/ref/character/LeftBracketingBar.html</a></p>",
        "id": 226754144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613612032
    },
    {
        "content": "<blockquote>\n<p>Drawn in monospaced fonts with a small left‐pointing tee to indicate direction. </p>\n</blockquote>\n<p>I guess they draw it as a plain vertical bar in \"presentation mode\"</p>",
        "id": 226754206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613612064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20question.20about.20.60.E2.88.A5x.E2.88.A5.60/near/226754069\">said</a>:</p>\n<blockquote>\n<p>What's mathematically unreasonable about it? I think the quills are almost invisible, just barely big enough that you can tell which is which. Just look at them as vertical bars with an orientation</p>\n</blockquote>\n<p>Well I've never seen that character used in a math paper and if  I saw it out of context I would have less idea what it meant than <code>∥y∥ₙ</code>, and I assume most mathematicians would feel the same. A big strength of lean for me is that I can show mathematicians who don't know lean formalized statements and quite often they can understand them, I think using less \"weird\" symbols helps with this psychologically.</p>",
        "id": 226754795,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613612647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20question.20about.20.60.E2.88.A5x.E2.88.A5.60/near/226753809\">said</a>:</p>\n<blockquote>\n<p>(<code>ₙ</code> for norm <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>\n</blockquote>\n<p>Actually I guess one issue with n is that it might be interpreted as \"some natural number\"</p>",
        "id": 226754930,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613612784
    },
    {
        "content": "<p>I would hope that the context makes it clear:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_norm</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⸡</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">⸠</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"bp\">⸡</span><span class=\"n\">x</span><span class=\"bp\">⸠</span> <span class=\"bp\">⸡</span><span class=\"n\">y</span><span class=\"bp\">⸠</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Frankly I think there are much worse offenders when it comes to the set of unicode characters we use, like all the arrow variations. This is a vertical bar variation, and it's maybe not obvious what the variation means but that's going to be true for any notation - at some point you have to actually look it up or guess based on the names of theorems about it. I don't like a subscript n because then it looks parameterized, like a p-norm or something</p>",
        "id": 226759112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613617381
    },
    {
        "content": "<p>I think being able to visually see the difference between the left and right delimiters is also useful for human consumers. I think the mathematica design is telling: they use the plain bars for presentation but make the left/right thing visible in the monospace font so that authors don't confuse the two</p>",
        "id": 226759245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613617532
    },
    {
        "content": "<p>Personally, I'd rather keep the current notation, and just add parentheses when Lean can't figure it out . . .  I really value that Lean code is semi-readable to outsiders, I think any step away from standard math notation should be very carefully weighed.</p>",
        "id": 226759798,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1613618144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>'s suggestion just shows up to me as blank boxes ... maybe I don't have the right fonts installed, but again, half our newcomer readers also won't?</p>",
        "id": 226759979,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1613618313
    },
    {
        "content": "<p>That's very strange, they show as boxes for me too on Android (as does Mario's suggestion) but apart from the subscript I just copy pasted the usual norm bars from Kevin's post which do show on my phone. So I have no idea how those characters could have ended up different</p>",
        "id": 226760139,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1613618510
    },
    {
        "content": "<p>will Lean4's parser be able to deal with the problem better? I got the impression that it's quite a bit more powerful. If so, I wouldn't refactor the notation just to switch back in half a year.</p>",
        "id": 226763223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613622211
    },
    {
        "content": "<p>I'm on the same line as Heather and Yury here. We know that the current notation works fine if we are ready to add parentheses when it doesn't :-) And it has the very valuable advantage of being self-explanatory. So I wouldn't change it.</p>",
        "id": 226772632,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1613632323
    },
    {
        "content": "<p>As less offensive notation, could a subscript go on the closing <code>||</code>?</p>",
        "id": 226774847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613634461
    },
    {
        "content": "<p>Yes I also very much value the fact that right now it's readable and any change will make it less so. This is very much an area where the CS people don't seem to understand the value of this, I had some Twitter spat recently with a few people who argued that all unicode notation was bad because it just added an extra layer of unnecessary noise. Ok if it doesn't cause too many problems I think we should leave it. I'm still very much interested in the question about whether this issue can be fixed in lean 4</p>",
        "id": 226774920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613634503
    },
    {
        "content": "<p>Like, perhaps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><mi>x</mi><msub><mi mathvariant=\"normal\">∥</mi><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\|x\\|_r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord\">∥</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with r standing for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span></p>",
        "id": 226774948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613634542
    },
    {
        "content": "<p>This is the other option but we've just heard from the people who use this notation a lot that it doesn't seem to be a problem in practice</p>",
        "id": 226775064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613634633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20question.20about.20.60.E2.88.A5x.E2.88.A5.60/near/226763223\">said</a>:</p>\n<blockquote>\n<p>will Lean4's parser be able to deal with the problem better? I got the impression that it's quite a bit more powerful. If so, I wouldn't refactor the notation just to switch back in half a year.</p>\n</blockquote>\n<p>It turns out that this works out of the box in Lean 4.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">max</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">norm</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"∥\"</span> <span class=\"n\">e</span> <span class=\"s2\">\"∥\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">∥</span><span class=\"n\">y</span><span class=\"bp\">∥</span>\n</code></pre></div>\n<p>I was a bit surprised by that, but the secret is that function application in Lean 4 <em>has</em> to include whitespace. So <code>y∥</code> is not confused as an incomplete application.</p>",
        "id": 226796541,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1613647558
    },
    {
        "content": "<p>This is somehow an accident though. It doesn't answer the question: could we assign different binding power to the opening and closing <code>∥</code>? Or is it no longer a meaningful question?</p>",
        "id": 226797179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1613647931
    },
    {
        "content": "<p>Correct, it is no longer meaningful because precedences are now associated with parsers, i.e. <code>e</code> and the whole notation. Nor would an extended Lean 3 model help: You have to tell the parser that <code>y∥</code> is not a valid start point of the notation, but <code>max ∥</code> is. That cannot be solved with precedences alone. The parser (or any such parser) is not even thinking about the precedence of the closing <code>∥</code> at this point.</p>",
        "id": 226798177,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1613648664
    },
    {
        "content": "<p>This is good news, presumably? Are you saying that this whole <code>\"|\":a e:b \"|\":c</code> thing with three numbers was a hack all along? Does Lean 4 use a Pratt parser? My understanding of binding is based on this.</p>",
        "id": 226798433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613648855
    },
    {
        "content": "<p>It does, I've written a bit about it at <a href=\"https://leanprover.github.io/lean4/doc/syntax.html\">https://leanprover.github.io/lean4/doc/syntax.html</a>. Do tell me if that's intelligible for non-CS audiences :) .</p>",
        "id": 226798833,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1613649083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20question.20about.20.60.E2.88.A5x.E2.88.A5.60/near/226798433\">said</a>:</p>\n<blockquote>\n<p>This is good news, presumably? Are you saying that this whole <code>\"|\":a e:b \"|\":c</code> thing with three numbers was a hack all along?</p>\n</blockquote>\n<p>Well, now it's two numbers (the expanded form is <code>notation:max \"∥\" e:0 \"∥\" =&gt; norm e</code>), but at least they're now local to the notation. I'm not sure right now if the third number ever mattered in Lean 3 either.</p>",
        "id": 226799012,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1613649206
    },
    {
        "content": "<blockquote>\n<p>While introducing new notations is a relatively rare feature in programming languages and sometimes even frowned upon because of its potential to obscure code, it is an invaluable tool in formalization for expressing established conventions and notations of the respective field succinctly in code. </p>\n</blockquote>\n<p>Did you see the Twitter conversation I had about this? Andrej Bauer asked a maths question in Coq and my initial reaction was \"that is so ugly to read, here is how it looks in Lean, mathematicians can read my version\" and then several people popped up saying \"unicode is just a stupid gimmick, it makes people's lives worse\" and I was just dumbfouded. I will say it again -- on several occasions mathematicians have said to me that they are attracted to Lean because it looks more readable to them than the other languages. I think it is marvellous that we are going in this direction. The CS people were arguing that it adds an extra layer of obfuscation. What they don't seem to realise is that for mathematicians it is serious unobfuscation. It is a translation which is bridging the gap between our two worlds.</p>",
        "id": 226800088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613649804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20question.20about.20.60.E2.88.A5x.E2.88.A5.60/near/226759979\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span>'s suggestion just shows up to me as blank boxes ... maybe I don't have the right fonts installed, but again, half our newcomer readers also won't?</p>\n</blockquote>\n<p>Mathlib is full of notation that <a href=\"#narrow/stream/236604-Zulip-meta/topic/font.20issue.20on.20Android/near/224727825\">doesn't render properly in zulip on android</a> - even linear maps often don't. I don't think we should consider <del>zulip</del> <em>android monospace font</em> bugs in mathlibs design. Discounting the blank box complaint, do you still prefer <code>(∥x + y∥)</code> over <code>∥x + y∥ₙ</code>?</p>",
        "id": 226800285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613649901
    },
    {
        "content": "<p>Is that a <em>zulip</em> bug though?  It seems to be limited to certain android versions.  (IIRC you mentioned that you couldn't see the characters on github either.)</p>",
        "id": 226800484,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1613649999
    },
    {
        "content": "<p>This is fixed in Lean 4 so for me the matter of whether we should change notation is now closed.</p>",
        "id": 226800681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613650143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20question.20about.20.60.E2.88.A5x.E2.88.A5.60/near/226800088\">said</a>:</p>\n<blockquote>\n<p>Did you see the Twitter conversation I had about this?</p>\n</blockquote>\n<p>I did, and I agree with you (modulo choice of words :) ). I'm pretty sure though that this wasn't \"CS people\" but (mostly) \"Coq people\". No-one coming from Agda would challenge use of Unicode, while in Isabelle they're not even content with Unicode but use their own extended markup, font, and text rendering (so if you want an ITP that actually allows you to put \\N in the subscript...).</p>",
        "id": 226803415,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1613651826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20question.20about.20.60.E2.88.A5x.E2.88.A5.60/near/226796541\">said</a>:</p>\n<blockquote>\n<p>the secret is that function application in Lean 4 <em>has</em> to include whitespace. So <code>y∥</code> is not confused as an incomplete application.</p>\n</blockquote>\n<p>Does this mean that folks can't pretend lean has C style function call syntax anymore, e.g. <code>f(x, y, z)</code> (which works as long as <code>f : A x B x C -&gt; D</code>)?</p>",
        "id": 226878228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613681475
    },
    {
        "content": "<p>I'm not sure how common this is, but I routinely see people posting lean 3 proofs using things like <code>P(sin(x))</code></p>",
        "id": 226878529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613681595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20question.20about.20.60.E2.88.A5x.E2.88.A5.60/near/226878228\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20question.20about.20.60.E2.88.A5x.E2.88.A5.60/near/226796541\">said</a>:</p>\n<blockquote>\n<p>the secret is that function application in Lean 4 <em>has</em> to include whitespace. So <code>y∥</code> is not confused as an incomplete application.</p>\n</blockquote>\n<p>Does this mean that folks can't pretend lean has C style function call syntax anymore, e.g. <code>f(x, y, z)</code> (which works as long as <code>f : A x B x C -&gt; D</code>)?</p>\n</blockquote>\n<p>Even better, they can now implement that syntax properly without clashing with the internal application syntax, and then reevaluate their life choices.</p>",
        "id": 226881395,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1613682675
    }
]