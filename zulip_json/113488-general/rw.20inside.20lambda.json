[
    {
        "content": "<p>from my experience, <code>simp</code> can change things inside lambda, but <code>rw</code> cannot. Is there a way to bypass this and let <code>rw</code> change inside lambda?</p>",
        "id": 133624964,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536527498
    },
    {
        "content": "<p><code>conv</code> + <code>rw</code></p>",
        "id": 133624971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536527515
    },
    {
        "content": "<p>Also see topic <a href=\"#narrow/stream/113488-general/subject/rw.20under.20lambda/near/126107890\" title=\"#narrow/stream/113488-general/subject/rw.20under.20lambda/near/126107890\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/rw.20under.20lambda/near/126107890</a> and the more verbose topic <a href=\"#narrow/stream/113488-general/subject/Why.20can't.20.60rw.60.20look.20inside.20lambda.20expressions.3F/near/130212033\" title=\"#narrow/stream/113488-general/subject/Why.20can't.20.60rw.60.20look.20inside.20lambda.20expressions.3F/near/130212033\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/Why.20can't.20.60rw.60.20look.20inside.20lambda.20expressions.3F/near/130212033</a></p>",
        "id": 133625661,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536528609
    },
    {
        "content": "<p>so exactly which tactics are avaiblale inside <code>conv</code>?</p>",
        "id": 133640326,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536559273
    },
    {
        "content": "<p>rw</p>",
        "id": 133641348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536561047
    },
    {
        "content": "<p>I mean, a complete list of tactics available inside <code>conv</code></p>",
        "id": 133641426,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536561177
    },
    {
        "content": "<p>There's probably a file in core which lists them. There's to_lhs, something called something like whnf and you might want to skim Patrick's docs</p>",
        "id": 133641504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536561259
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/blob/master/library/init/meta/converter/interactive.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/meta/converter/interactive.lean\">https://github.com/leanprover/lean/blob/master/library/init/meta/converter/interactive.lean</a></p>",
        "id": 133641835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536561914
    },
    {
        "content": "<p>Maybe that's the definitive answer</p>",
        "id": 133641838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536561922
    },
    {
        "content": "<p>Funext, change, simp and dsimp</p>",
        "id": 133641952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536562120
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md\">https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md</a></p>",
        "id": 133642024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536562263
    },
    {
        "content": "<p>Has a couple of nice tricks</p>",
        "id": 133642027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536562275
    },
    {
        "content": "<p>well I would like to be able to use <code>apply/exact/refine</code> inside <code>conv</code></p>",
        "id": 133642625,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536563427
    },
    {
        "content": "<p><code>conv</code> inside <code>conv</code> would also be useful</p>",
        "id": 133642672,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536563539
    },
    {
        "content": "<p>I feel like <code>conv</code> has a lot of potential to be the most powerful tactic ever</p>",
        "id": 133642676,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536563549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I don't understand why there's no basic tactics (i.e. <code>exact</code>) inside conv</p>",
        "id": 133644854,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536566342
    },
    {
        "content": "<p><code>conv</code> is a different monad from <code>tactic</code></p>",
        "id": 133645090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536566623
    },
    {
        "content": "<p><code>exact</code> doesn't even make sense</p>",
        "id": 133645145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536566650
    },
    {
        "content": "<p>I mean, why didn't we implement exact inside conv</p>",
        "id": 133645146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536566650
    },
    {
        "content": "<p>conv is just a bunch of congr_arg and funext right</p>",
        "id": 133645150,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536566660
    },
    {
        "content": "<p>the tactic state in the conv monad is basically <code>?p : X = ?m</code> where <code>?p</code> and <code>?m</code> are to be determined</p>",
        "id": 133645172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536566705
    },
    {
        "content": "<p>if we have <code>a + b = c + d</code>, and I do <code>conv { to_lhs, congr, skip, }</code> then the current state is <code>a + b = a + ?m</code> right</p>",
        "id": 133645178,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536566711
    },
    {
        "content": "<p>if I do <code>exact (sorry : b = foo b)</code> then I can tell Lean exactly that <code>?m</code> should be <code>foo b</code> right</p>",
        "id": 133645187,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536566731
    },
    {
        "content": "<p>by comparison to the regular tactic state which is just <code>?m : t</code></p>",
        "id": 133645201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536566749
    },
    {
        "content": "<p>I think <code>update_lhs</code> does that</p>",
        "id": 133645300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536566841
    },
    {
        "content": "<p>I've never heard about that one. Sounds good!</p>",
        "id": 133645375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536566917
    },
    {
        "content": "<p>Can you also <em>zoom out</em> in <code>conv</code>?</p>",
        "id": 133645390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536566943
    },
    {
        "content": "<p>You zoom in with <code>congr</code> and <code>funext</code>. But I sometimes also want to zoom out again.</p>",
        "id": 133645411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536566971
    },
    {
        "content": "<p>No, zoom out doesn't make sense</p>",
        "id": 133645430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536566997
    },
    {
        "content": "<p>what is possible instead is a split lhs/rhs that produces multiple subgoals</p>",
        "id": 133645496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536567024
    },
    {
        "content": "<p>also, lhs/rhs is so passe. We need rcases patterns in conv!</p>",
        "id": 133645527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536567058
    },
    {
        "content": "<p>what is update_lhs?</p>",
        "id": 133645626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536567143
    },
    {
        "content": "<p>I guess it is not an interactive command, but it is available as a conv tactic</p>",
        "id": 133645646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536567172
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">update_lhs</span> <span class=\"o\">(</span><span class=\"n\">new_lhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">transitivity</span><span class=\"o\">,</span>\n   <span class=\"n\">rhs</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">unify</span> <span class=\"n\">new_lhs</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">t</span> <span class=\"err\">‚Üê</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">instantiate_mvars</span><span class=\"o\">,</span>\n   <span class=\"n\">change</span> <span class=\"n\">t</span>\n</pre></div>",
        "id": 133645670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536567195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Why would zoom out not make sense? If I drill down into a nested sum, do some <code>rw</code> there, then I would want to zoom out again and play with the sum that is 1 level up.</p>",
        "id": 133645872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536567346
    },
    {
        "content": "<p>As I said, the conv monad has a state which is <code>?p : X = ?m</code>. If you zoom in then <code>?m</code> is assigned, so you can't return to it any more than you can rewind in a proof</p>",
        "id": 133645979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536567413
    },
    {
        "content": "<p>I think that <code>to_lhs</code> would make more sense as a tactic combinator, i.e. <code>to_lhs { &lt;conv&gt; }, &lt;conv&gt;</code></p>",
        "id": 133646109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536567567
    },
    {
        "content": "<p>that would allow you to return to the outer context in the second part</p>",
        "id": 133646119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536567587
    },
    {
        "content": "<p>also if I go deep inside using <code>conv</code> then all the variables have the same name and I can't even <code>dedup</code></p>",
        "id": 133646183,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536567648
    },
    {
        "content": "<p>note that <code>find</code> is actually a combinator like this inside conv, so you can use it to temporarily zoom in</p>",
        "id": 133646218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536567715
    },
    {
        "content": "<p>however, find patterns never work the way I want them to</p>",
        "id": 133646274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536567749
    }
]