[
    {
        "content": "<p>In the following example, <code>abel</code> fails, and I'm guessing it's a symptom that two things which look equal in the goal state are different at some lower level.  I'm having trouble minimizing it, though.  Can anyone diagnose it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">s</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.orthogonal_projection</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">V</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">s.subtype</span> <span class=\"o\">(</span><span class=\"n\">_root_.orthogonal_projection</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">],</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">],</span>\n    <span class=\"n\">abel</span><span class=\"o\">,</span> <span class=\"c1\">-- left with a goal which looks like it should be in the scope of `abel`</span>\n\n    <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.orthogonal_projection</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">V</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">s.subtype</span> <span class=\"o\">(</span><span class=\"n\">_root_.orthogonal_projection</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">],</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">],</span>\n    <span class=\"n\">abel</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249280468,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1628796033
    },
    {
        "content": "<p>The difference between the working and non-working examples is that in the working one, the type of <code>w</code> is specified:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.orthogonal_projection</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 249280563,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1628796073
    },
    {
        "content": "<p>This is fixed by <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> 's <a href=\"https://github.com/leanprover-community/mathlib/issues/8628\">#8628</a> so I think your guess is correct</p>",
        "id": 249281784,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1628796716
    },
    {
        "content": "<p>Heh, perfect timing! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 249288043,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628799758
    }
]