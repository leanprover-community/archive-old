[
    {
        "content": "<p>I don't see the point of <a href=\"https://github.com/leanprover-community/mathlib/issues/2496\" title=\"https://github.com/leanprover-community/mathlib/issues/2496\">#2496</a>; what is supposed to be the gain?</p>",
        "id": 195077370,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587655432
    },
    {
        "content": "<p>Perhaps Reid is worried by the fact that there could be plenty of instances where we import X but it's an \"over-import\", where in fact we only need to import some Y&lt;X; this might now be harder to spot.</p>",
        "id": 195077533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587655491
    },
    {
        "content": "<p>I thought there was a lint for that</p>",
        "id": 195077637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587655544
    },
    {
        "content": "<p>I recall <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> working on that exact problem</p>",
        "id": 195077670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587655556
    },
    {
        "content": "<p>There are two kinds of redundant imports:</p>\n<ul>\n<li>\"syntactically unnecessary\" imports: B imports A, and C imports both A and B. Then the import of A in C is syntactically unnecessary. These are the ones removed by <a href=\"https://github.com/leanprover-community/mathlib/issues/2496\" title=\"https://github.com/leanprover-community/mathlib/issues/2496\">#2496</a>; they are easy to detect lexically. For much the same reason, removing them doesn't accomplish anything obvious, since for example changing A means rebuilding C anyways, because of the transitive import.</li>\n<li>\"semantically unnecessary\" imports: B imports A, but B would work just as well if it didn't. These are harder to detect (especially given simp and other forms of introspection).</li>\n</ul>",
        "id": 195077824,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587655613
    },
    {
        "content": "<p>Now imagine A defines <code>a</code>, B defines <code>b</code> and imports A even though it doesn't use it, and someone wanting to write a module C wants to use both <code>a</code> and <code>b</code>. The natural thing to do in general is to import both A and B (otherwise you might have to carefully track down transitive imports to see that actually one is redundant).</p>",
        "id": 195078021,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587655701
    },
    {
        "content": "<p>This creates a syntactically unnecessary import of A in C.</p>",
        "id": 195078050,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587655714
    },
    {
        "content": "<p>Now suppose someone later notices that B doesn't actually <em>use</em> A at all, so B may as well not import A.</p>",
        "id": 195078114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587655745
    },
    {
        "content": "<p>If you still have the import of A in C, then C will continue to work. If you removed it, however, because it was syntactically unnecessary, now you broke C by changing B, and you have to figure out what module C was supposed to be importing that provided <code>a</code>.</p>",
        "id": 195078216,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587655788
    },
    {
        "content": "<p>Of course you could argue that <code>simp</code> means that changing any import anywhere can break anything anywhere else, but less breakage is still better than more breakage.</p>",
        "id": 195078328,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587655831
    },
    {
        "content": "<p>Actually, Lean's design where importing B (which imports A) also gives you A is quite unusual among programming languages, I think.</p>",
        "id": 195078381,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587655855
    },
    {
        "content": "<p>I agree it's not great, but for a theorem prover it's unclear what other options there are</p>",
        "id": 195078451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587655892
    },
    {
        "content": "<p>Anyways I don't want to advocate for any particular course of action, I just want to say that I think this removal of \"unnecessary\" imports is misguided: it doesn't achieve anything, and potentially costs.</p>",
        "id": 195078655,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587655979
    },
    {
        "content": "<p>I think we can let it slide if this is Scott's way of testing his import-modifying scripts.  As long as the promised import-reducing PRs are coming soon, I'm happy with this first step.</p>",
        "id": 195079033,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1587656137
    },
    {
        "content": "<p>I can imagine a build tool that fixes the semantically unnecessary imports as follows: Suppose C imports (directly) files A and B, and assume that neither one imports the other. (If not, do the transitive reduction first.) For each file in the list, try replacing it with the list of all files that it imports; that is, supposing that A imports A1 and A2, try compiling C using A1 A2 B. If it succeeds, go back to the start, otherwise put A back and try replacing B with all of its imports. Eventually, you get to the stage where removing any single import from the list causes the file to break; C is now minimized. Continue (in forward dependency order) until all files are minimized.</p>",
        "id": 195079220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587656221
    },
    {
        "content": "<p>will it change compile time?</p>",
        "id": 195079283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587656255
    },
    {
        "content": "<p>My guess is that this is about 10 times as expensive as a regular build</p>",
        "id": 195079392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587656286
    },
    {
        "content": "<p>so maybe once a week is tolerable</p>",
        "id": 195079414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587656298
    },
    {
        "content": "<p>Maybe one advantage is that if someone is editing a file half way up the import tree, then recompiling all of mathlib afterwards might not hurt quite as much.</p>",
        "id": 195079495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587656344
    },
    {
        "content": "<p>You can short circuit the check if you notice that a proof in the current file uses a theorem declared in a direct import, since that means the file must have been used</p>",
        "id": 195079502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587656346
    },
    {
        "content": "<p>Lean automatically ignores transitive imports, so it doesn't make a difference to lean</p>",
        "id": 195079604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587656402
    },
    {
        "content": "<p>I think this really should not be part of CI.  This takes way too much time and should be executed manually or as a cron job.  Note: if you remove an import in <code>data.nat.basic</code> you need to recompile <em>all</em> of mathlib to check whether that's allowed, no heuristic helps you here.</p>",
        "id": 195079699,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1587656433
    },
    {
        "content": "<p>no, you only need to recompile <code>data.nat.basic</code> itself</p>",
        "id": 195079774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587656470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>: that sounds excessive. I think the best approach would be to add a flag to Lean</p>",
        "id": 195079779,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1587656473
    },
    {
        "content": "<p>I forgot to mention that when you remove an import, for example replacing A with A1 A2 in file C, you add A to every file that imports C to make sure that they don't break due to transitive imports being lost</p>",
        "id": 195079913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587656527
    },
    {
        "content": "<p>and analyze the dependency between declaration (including what the proof scripts call)</p>",
        "id": 195079914,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1587656527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/unnecessary.20imports/near/195079495\" title=\"#narrow/stream/113488-general/topic/unnecessary.20imports/near/195079495\">said</a>:</p>\n<blockquote>\n<p>Maybe one advantage is that if someone is editing a file half way up the import tree, then recompiling all of mathlib afterwards might not hurt quite as much.</p>\n</blockquote>\n<p>Removing <em>semantically</em> unnecessary imports can indeed accomplish this, as well as increasing build parallelism (but not the total amount of work).</p>",
        "id": 195079950,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587656548
    },
    {
        "content": "<p>Although in practice, it probably wouldn't help much, I guess.</p>",
        "id": 195079987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587656569
    },
    {
        "content": "<p>The process I described has you build C without A, and without B, so two compiles of one file (and none of its dependencies). All of C's dependencies are already minimized, so they don't have to be touched. So I do think that this is only as expensive as mathlib compile * average number of imports in a file (weighted by file cost)</p>",
        "id": 195080414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587656754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/unnecessary.20imports/near/195079913\" title=\"#narrow/stream/113488-general/topic/unnecessary.20imports/near/195079913\">said</a>:</p>\n<blockquote>\n<p>I forgot to mention that when you remove an import, for example replacing A with A1 A2 in file C, you add A to every file that imports C to make sure that they don't break due to transitive imports being lost</p>\n</blockquote>\n<p>It would be an interesting experiment to see how this procedure works out in practice--I can imagine a change near the root of the dependency tree causing many imports to be added/removed near the leaves, but maybe it doesn't ever happen in reality.</p>",
        "id": 195080492,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587656768
    },
    {
        "content": "<p>This is just the initial fixup pass, mind you - those files have not yet been processed, and when you get to D that imported C and now imports A and C, you might find that you can remove A again</p>",
        "id": 195080645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587656846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> This is obviously a rather expensive analysis pass, but it's the only thing I think is likely to be 100% reliable (modulo quirks where import order matters). A lean flag or other mechanism for discovering that a file is needed is, like I said, a good way to speed up the process in the majority of cases, but lean files can set attributes, declare def_replacers, and all sorts of other funny things, and I don't think lean can keep track of it all reliably</p>",
        "id": 195081354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587657167
    },
    {
        "content": "<p>the best way to find out if an import is necessary is just to delete it and see if it breaks</p>",
        "id": 195081466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587657238
    },
    {
        "content": "<p>That's fair. It might be accurate often enough that you'd want to run it first to select candidate redundant imports and try commenting those out only in the process of using your approach. An analysis of the declaration won't tell you that an import is needed when it's not so the analysis is complete but not sound (it will identify all redundant imports and then some)</p>",
        "id": 195083026,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1587657837
    },
    {
        "content": "<p>Assuming that this works from an already built mathlib, you can look at the olean files and immediately pick out all the directly used files based on theorems declared in file A and used in C</p>",
        "id": 195083530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587658034
    },
    {
        "content": "<p>and I think this covers 90% or more of imports (not counting those that will be removed)</p>",
        "id": 195083690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587658101
    },
    {
        "content": "<p>the hard case is <code>import tactic</code>, which I think is not uncommon</p>",
        "id": 195083746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587658134
    },
    {
        "content": "<p>although if you do some C++ magic to flag this in lean that will help</p>",
        "id": 195083806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587658175
    },
    {
        "content": "<p>even just the earlier idea of saving all the tactic expressions before <code>by</code> would solve this problem since if they get saved in oleans then you can link def to use</p>",
        "id": 195084038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587658274
    },
    {
        "content": "<p>That's one idea. We could also just work on the C++ data structures so that we don't change the <code>olean</code> files that are produced</p>",
        "id": 195084832,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1587658634
    },
    {
        "content": "<p>Sorry about this. I was experimenting last night with actually reducing the imports in a meaninful way. It's easy to build the graph whose vertices are files, and edges are \"a declaration in X uses a declaration in Y\". However there are many other reasons you might want to import a file. An obvious one is to use tactics or attributes, so I've added the simple mechanism of adding an edge to my graph for every \"file X currently imports file Y, and file Y is under <code>tactics/</code>, or a short list of other tactics files\".</p>",
        "id": 195140763,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587695149
    },
    {
        "content": "<p>After this, the error messages and failures are ... harder to diagnose.</p>",
        "id": 195140803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587695163
    },
    {
        "content": "<p>I haven't had time yet to look at these failures in detail.</p>",
        "id": 195140809,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587695173
    },
    {
        "content": "<p>For now I'm just doing testing by replacing the entire import block with a new list (hence my desire for one import per line, to make it easy to decided what the import block even is), where that new list contains every import that appears to be needed.</p>",
        "id": 195140838,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587695249
    },
    {
        "content": "<p>If I can get that to compile, then I will run the same script that removed transitive imports to get back to a manageable list.</p>",
        "id": 195140853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587695275
    },
    {
        "content": "<p>So yes, even though I didn't explain it well,  the PR <a href=\"https://github.com/leanprover-community/mathlib/issues/2496\" title=\"https://github.com/leanprover-community/mathlib/issues/2496\">#2496</a> serves very little purpose except to verify that I know how to remove transitive imports, so I can use that step reliably now.</p>",
        "id": 195140908,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587695315
    },
    {
        "content": "<p>Sorry for the noise.</p>",
        "id": 195140914,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587695325
    },
    {
        "content": "<p>Ahhhh, I'm trying to rearrange some imports between category theory and I think this is causing me headaches.</p>",
        "id": 197841266,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589710074
    },
    {
        "content": "<p>All I wanted to do was write a lemma in one file and use it in another file...</p>",
        "id": 197841614,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589710558
    },
    {
        "content": "<p>I think category theory might be due for a topology-style reorganization</p>",
        "id": 197841739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589710753
    },
    {
        "content": "<p>Out of curiosity which bits are causing problems?</p>",
        "id": 197851701,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589725418
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/pull/2712/files#diff-f4371a7996ae088583250e08511b5045R149-R152\">https://github.com/leanprover-community/mathlib/pull/2712/files#diff-f4371a7996ae088583250e08511b5045R149-R152</a> for the start of the story. I wanted to shuffle some imports around, but it broke several files that just imported <code>category_theory.eq_to_hom</code> because now they also needed to import the things it used to import.</p>",
        "id": 197851778,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589725496
    },
    {
        "content": "<p>So, in the end, I gave up on the reorganization for now, which might be a good thing, I suppose.</p>",
        "id": 197851783,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589725515
    }
]