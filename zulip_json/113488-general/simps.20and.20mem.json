[
    {
        "content": "<p>Can I convince <code>simps</code> to generate lemmas with name <code>mem_</code>? For example, here: <a href=\"https://github.com/leanprover-community/mathlib/blob/d3897413bcab8250914ea34e97c369ea4e74b0cf/src/category_theory/sites/pretopology.lean#L154\">https://github.com/leanprover-community/mathlib/blob/d3897413bcab8250914ea34e97c369ea4e74b0cf/src/category_theory/sites/pretopology.lean#L154</a> the <code>simps</code> on the structure before that makes the right simp lemma but calls it <code>to_grothendieck_mem</code> instead of <code>mem_to_grothendieck</code> (like the manually generated one below). Is there a way to make <code>simps</code> always give the name <code>mem_</code> when used on these structures?</p>",
        "id": 219724557,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607802329
    },
    {
        "content": "<p>(the simps projections are made here: <a href=\"https://github.com/leanprover-community/mathlib/blob/d3897413bcab8250914ea34e97c369ea4e74b0cf/src/category_theory/sites/grothendieck.lean#L86\">https://github.com/leanprover-community/mathlib/blob/d3897413bcab8250914ea34e97c369ea4e74b0cf/src/category_theory/sites/grothendieck.lean#L86</a>)</p>",
        "id": 219724565,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607802358
    },
    {
        "content": "<p>It would be cool if <code>simps</code> could take <code>{}_apply</code> as the custom name instead of just <code>apply</code>, then the use case above would be <code>mem_{}</code></p>",
        "id": 219725160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607803142
    },
    {
        "content": "<p>There is currently no way to do this, but I could add that ability.</p>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>: do you expect any use cases other than adding a prefix or postfix?</p>",
        "id": 219726432,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1607805102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Does the <code>def simps.sieves</code> trick indeed let <code>@[simps]</code> generate the correct lemma (using <code>âˆˆ</code>)? <br>\nThat's pretty neat, I didn't realize that would work.</p>",
        "id": 220906646,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608875063
    },
    {
        "content": "<p>Yeah! I was a bit surprised by that too, the generated lemma is syntactically the same as the one I put below</p>",
        "id": 220921063,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1608901961
    }
]