[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> How can I recover the old behavior of <code>obviously</code> which did not trace the steps it took?<br>\nPerhaps the replaceable thing ought to be called <code>cat_tactic</code> or something, and <code>obviously</code> should return to its old behavior?</p>",
        "id": 132615425,
        "sender_full_name": "Reid Barton",
        "timestamp": 1534994495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, I've silenced the trace messages from obviously.</p>",
        "id": 132685421,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535101427
    },
    {
        "content": "<p>Moreover, yesterday Mario and I overhauled tidy from top to bottom. The code is much shorter and saner now. :-)</p>",
        "id": 132752117,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535209712
    },
    {
        "content": "<p>OK so there is something annoying about <code>obviously</code>. I've now used the category theory library a fair bit so I can say it's (a) good at closing the goals it should be closing and (b) slow. I've seen it <a href=\"#narrow/stream/116395-maths/topic/Ideal.20lemma/near/192137438\" title=\"#narrow/stream/116395-maths/topic/Ideal.20lemma/near/192137438\">take a minute to construct a tactic proof which runs in a second</a>. Is it possible to somehow completely \"factor out\" <code>obviously</code> in a safe way? I want to be able to import a compiled file <code>obviously.lean</code> whose data changes if I change a file containing <code>obviously</code> or something, and which contains certificates for all the goals that <code>obviously</code> closes (maybe as axioms or something). And then you can occasionally <code>obviously_check</code> your file where it actually uses the tactic to generate all the proofs. If I want to restart Lean for some reason when working on a file with lots of <code>obviously</code>s it's going to take some time, but Scott really doesn't want them visible to mathematicians because these goals really are obvious to mathematicians -- these are things a mathematician would not bother to justify in a blackboard lecture.</p>",
        "id": 192377820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585655417
    },
    {
        "content": "<p>Can <code>obviously</code> say \"Oh, you gave me this once before -- here's the answer I came up with last time and it worked fine. Do you want me to run it again? (y/N)\"</p>",
        "id": 192377926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585655519
    },
    {
        "content": "<p>This was all dreamed of before, but it requires deep changes to Lean. Maybe in Lean 4?</p>",
        "id": 192378269,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585655738
    },
    {
        "content": "<p>Keeley actually got exactly this to work in a (hacked) version of Lean 3... It's not that deep. He just needed fast io to a file.</p>",
        "id": 192384816,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585659365
    },
    {
        "content": "<p>in that case, we may be in luck since we're rebranding \"hacking lean\" as \"lean development\"</p>",
        "id": 192386013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585659984
    },
    {
        "content": "<p>Oh.. Keeley has already merged his hacks. They're officially not hacks anymore. :-)</p>",
        "id": 192390670,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585662045
    },
    {
        "content": "<p>Let me see if I can run his tactic block caching trickery now.</p>",
        "id": 192390697,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585662058
    },
    {
        "content": "<p>Okay, it's shockingly easy to use. Checkout <a href=\"https://github.com/leanprover-community/mathlib/issues/2300\" title=\"https://github.com/leanprover-community/mathlib/issues/2300\">#2300</a>, and add <code>import tactic.tcache.enable</code> at the top of one of your files, and magically everything appears to compile faster.</p>",
        "id": 192395713,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585664346
    },
    {
        "content": "<p>(There's a bug: <code>by X; Y</code> blocks seem to make it choke.)</p>",
        "id": 192395759,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585664373
    }
]