[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.rat\nopen classical\n\nstructure Dedekind_real :=\n(carrier : set ℚ)\n(nonemp : ∃ a, a ∈ carrier)\n(nonrat : ∃ a, a ∉ carrier)\n(down : ∀ p ∈ carrier, ∀ q, q ≤ p → q ∈ carrier)\n(nomax : ∀ p ∈ carrier, ∃ q, q ∈ carrier ∧ p ≤ q ∧ p ≠ q)\n\nnotation `ℝ` := Dedekind_real\n\ninstance : has_coe ℝ (set ℚ) := ⟨λ r, r.carrier⟩\n\nnamespace Dedekind_real\n\nprotected def le (α β : ℝ) : Prop := (α : set ℚ) ⊆ β\ninstance : has_le ℝ := ⟨Dedekind_real.le⟩\n\nend Dedekind_real\n\nopen Dedekind_real\n\nlemma le_total_r : ∀ a b : ℝ, a ≤ b ∨ b ≤ a := λ a b, (em (∃ x, x ∈ a.carrier ∧ x ∉ b.carrier)).elim\nsorry (λ h, or.inl (λ x hxa, classical.not_not.1 (not_and.1 ( (@not_exists ℚ _).1 h x) hxa) ) )\n\n/-\nlemma le_total_r&#39; : ∀ a b : ℝ, a ≤ b ∨ b ≤ a := λ a b, (em (∃ x, x ∈ a.carrier ∧ x ∉ b.carrier)).elim\nsorry (λ h, or.inl (λ x hxa, classical.not_not.1 (not_and.1 ( not_exists.1 h x) hxa) ) )\n-/\n</pre></div>\n\n\n<p>I am really confused about why the first proof works (for <code>le_total_r</code>), but the second one (commented) doesn't. The second proof gives 2 weird errors, one of which states that Lean is guessing the first thing <code>_</code> in <code>( (@not_exists _ _).1 h x)</code> to be a <code>Prop</code>, and then it wants <code>x</code> to be a <code>Prop</code>, but shouldn't it infer the first thing to be <code>ℚ</code> because the type of the provided <code>x</code> is <code>ℚ</code>?</p>",
        "id": 148130635,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1542826633
    },
    {
        "content": "<p>I'm not sure why there's a difference but interestingly enough, if you write <code>iff.mp not_exists h x</code> instead <code>not_exists.1 h x</code>, the proof works. It suggests that the type inference issue might be related to the <code>.</code> notation.</p>",
        "id": 148134227,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542830719
    },
    {
        "content": "<p>So this is not the usual \"higher order unification is hard blah blah blah\" story?</p>",
        "id": 148142652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542841494
    },
    {
        "content": "<p>I wouldn't think so but maybe <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> can enlighten us</p>",
        "id": 148145849,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542846601
    },
    {
        "content": "<p>Some other variations work: e.g. if you write <code>(not_exists.1 h x : _)</code> to suppress propagation of the expected type, or if you avoid field notation with <code>iff.mp not_exists h x</code>.  A good way to debug these kinds of issues is to 1) minimize the problem a bit and 2) turn various trace options on and stare at the output:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">elaborator_detail</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">elaborator</span> <span class=\"n\">true</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxa</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- (@not_exists ℚ _).1 h x</span>\n<span class=\"c1\">-- (not_exists.1 h _ : _)</span>\n<span class=\"c1\">-- (not_exists.mp h _ : _)</span>\n<span class=\"c1\">-- (iff.mp not_exists h x)</span>\n<span class=\"o\">(</span><span class=\"n\">not_exists</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>The offending unfication is here:</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq] (¬∃ (x : ?m_1), ?m_2 x) ↔ ∀ (x : ?m_1), ¬?m_2 x =?= ?m_3 ↔ ?m_4 ... success  (approximate mode)\n[type_context.is_def_eq] ¬(x ∈ a.carrier ∧ x ∉ b.carrier) =?= ¬?m_1 ?m_2 ... success  (approximate mode)\n</pre></div>",
        "id": 148165703,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1542881151
    },
    {
        "content": "<p>The problem here is that we unify the return type of the field notation application with the expected type before checking the arguments.  (In general it's a good idea to first unify the return type with the expected type---this propagates type information from the expected type to the argument types.  Consider e.g. <code>id ⟨a,b⟩</code>: in order to elaborate <code>⟨a,b⟩</code>, we need the type, but we only get that type if we propagate the expected type of <code>id ⟨a,b⟩</code> to the argument.)  The resulting second-order unification problem then does not get the solution we want.</p>",
        "id": 148165924,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1542881375
    },
    {
        "content": "<p>The reason this only happens for the field notation case is that field notations are elaborated in two steps.  Essentially <code>not_exists.mp h x</code> is elaborated as <code>(iff.mp not_exists : _) h x</code> (which also fails).<br>\nIf you write e.g. <code>iff.mp not_exists h x</code> then the return type of <code>iff.mp</code> is <code>?m_1 ↔ ?m_2</code> which does not induce a problematic second-order unification problem.</p>",
        "id": 148166020,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1542881477
    }
]