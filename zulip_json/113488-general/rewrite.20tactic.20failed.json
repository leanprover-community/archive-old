[
    {
        "content": "<p>In the following example the rewrite tactic fails, and I do not understand why. Note that if we insert an <code>intro x</code> before calling to <code>rw</code>, then it works fine. Is there a deep reason why <code>rw</code> is not able to \"see\" beyond <code> ∀ x : X</code> here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"kn\">definition</span><span class=\"bp\">.</span><span class=\"n\">complement</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">finish</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span>  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"kn\">definition</span><span class=\"bp\">.</span><span class=\"n\">complement</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Lean's response is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"err\">?</span><span class=\"n\">m_3</span>\n</code></pre></div>",
        "id": 205334608,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1596015024
    },
    {
        "content": "<p><code>rw</code> doesn't work under binder. <code>simp</code> and <code>simp_rw</code> do.</p>",
        "id": 205334834,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596015205
    },
    {
        "content": "<p>Should <code>simp_rw</code> be renamed to <code>rw!</code>?</p>",
        "id": 205334946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596015259
    },
    {
        "content": "<p><code>rw!</code> should be <code>simp_rw</code> except that each expression is only applied once</p>",
        "id": 205334976,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596015291
    },
    {
        "content": "<p>And what about (the nonexistent) <code>simp_erw</code>? Should that be named <code>rw!#@$@!!</code>?</p>",
        "id": 205335012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596015336
    },
    {
        "content": "<p>Even better: someone should simply fix <code>rw</code> so that is works under binders. But it's probably more complicated than it sounds...</p>",
        "id": 205335022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596015345
    },
    {
        "content": "<p>The downside is probably speed</p>",
        "id": 205335035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596015356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/rewrite.20tactic.20failed/near/205335022\">said</a>:</p>\n<blockquote>\n<p>Even better: someone should simply fix <code>rw</code> so that is works under binders. But it's probably more complicated than it sounds...</p>\n</blockquote>\n<p>It's a completely different kind of rewriting. <code>rw</code> builds an <code>eq.rec</code> term to do the substitution. This can't be done under a binder from the \"outside,\" because the thing you want to substitute doesn't exist.</p>",
        "id": 205335173,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1596015431
    },
    {
        "content": "<p>The alternative is to walk into the term using congruence lemmas, which is what <code>simp</code> and <code>simp_rw</code> do.</p>",
        "id": 205335216,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1596015457
    },
    {
        "content": "<p>These are all implementation details, we were discussing the user point of view.</p>",
        "id": 205335588,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596015705
    },
    {
        "content": "<p>Yes, users expect a rewrite tactic not an eq.rec tactic, and we have a stream of people asking the same question</p>",
        "id": 205352000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596027505
    },
    {
        "content": "<p>Otoh, if one method is a lot slower than the other, than it makes sense to provide both. And it's nice if fast tactics have short names</p>",
        "id": 205352086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596027547
    },
    {
        "content": "<p>(Kenny will complain that <code>rw</code> is slow anyway.)</p>",
        "id": 205352116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596027559
    },
    {
        "content": "<p>I think he already did that earlier ;-)</p>",
        "id": 205352601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596027777
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 205358330,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1596030513
    }
]