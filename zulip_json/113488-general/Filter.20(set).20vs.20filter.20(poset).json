[
    {
        "content": "<p>I'm running into a naming problem, where should definitions and lemmas about filters (on a partially ordered set) go in mathlib? The natural place seemed like <code>src/order/filter/</code>, but that's already taken up by the notationally conflicting notion of filters (on a set). The notion I want is dual to order ideals, which live in <code>src/order/ideal.lean</code>.</p>\n<p>(What mathlib calls <code>filter α</code>, some others would call <code>filter (set α)</code>, an unfortunate clash <a href=\"https://en.wikipedia.org/wiki/Ultrafilter#cite_note-notation_warning-1\">as noted on Wikipedia</a>.)</p>\n<p>I just noticed that the code in <code>src/order/ideal.lean</code> lives in a <code>namespace order</code>, whereas the code in <code>src/order/filter/</code> is outside of <code>namespace order</code>. Is this discrepancy between the directory structure and the namespaces normal? Maybe <code>src/order/filter/</code> should move up to <code>src/filter/</code>?</p>\n<p>For now I can just be gross and put stuff in a new file <code>src/order/filter.lean</code> and have its contents in <code>namespace order</code>, so it won't technically clash with the existing filter stuff.</p>",
        "id": 223946624,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611602531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> has an almost finished refactor of filters from <code>set</code> to ordered structures...<br>\n...</p>",
        "id": 223947127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611602749
    },
    {
        "content": "<p>Filters are used <em>everywhere</em> so even if it's a fairly straightforward change it's a really big refactoring project</p>",
        "id": 223947364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611602856
    },
    {
        "content": "<p>Is that almost-finished-refactor available anywhere? Searching the github issues and pull requests for 'filter' didn't turn up anything</p>",
        "id": 223957762,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611607716
    },
    {
        "content": "<p>Ah, looks like it's in the <code>pfilter</code> branch, maybe</p>",
        "id": 223958189,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611607934
    },
    {
        "content": "<p>For the record, I wasn't proposing _changing_ mathlib's notion of filter, just _adding_ a new notion in parallel (with later refactors for synergy, if applicable). But if it's better to wait until the refactor is done that's what I'll do.</p>",
        "id": 223960073,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611608756
    },
    {
        "content": "<p>Oh, the <code>pfilter</code> branch is marked as stale because it's 2 years old, maybe you're talking about a different refactor.</p>",
        "id": 223960171,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611608800
    },
    {
        "content": "<p>For the lazy (like me): <a href=\"https://github.com/leanprover-community/mathlib/tree/pfilter\">branch#pfilter</a></p>",
        "id": 223960331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611608878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252278\">Mathieu Guay-Paquet</span> <a href=\"#narrow/stream/113488-general/topic/Filter.20(set).20vs.20filter.20(poset)/near/223960171\">said</a>:</p>\n<blockquote>\n<p>Oh, the <code>pfilter</code> branch is marked as stale because it's 2 years old, maybe you're talking about a different refactor.</p>\n</blockquote>\n<p>Unfortunately, I don't think I'm talking about a different one...</p>",
        "id": 223960846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611609106
    },
    {
        "content": "<p>Is there some sort of statute of limitations? I don't think 3000 lines of change in a 2 year old commit is likely to be finished/reviewed/merged any time soon</p>",
        "id": 223961293,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611609314
    },
    {
        "content": "<p>Unless Mario finishes it, I would consider it dead code.</p>",
        "id": 223961658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611609493
    },
    {
        "content": "<p>Mario is probably the only one from whom we would accept a 3000 lines patch, without worrying about it (-;</p>",
        "id": 223961722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611609529
    },
    {
        "content": "<p>But I'm not sure if usability of current <code>filter</code> will get worse if it is refactored into <code>filter (set X)</code>. If so, then there will probably be a lot of pushback.<br>\nIn that case, just adding a new def'n is probably better.</p>",
        "id": 223961911,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611609614
    },
    {
        "content": "<p>It will need to be redone by hand, probably using the original as inspiration but not much more. An actual merge is far too likely to accidentally delete theorems</p>",
        "id": 223964977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611611108
    },
    {
        "content": "<p>IIRC in the refactor <code>filter A</code> was defined as <code>pfilter (set A)</code>, but the filter theorems were still there basically as is</p>",
        "id": 223965182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611611207
    },
    {
        "content": "<p>I was going to say, shouldn't it be possible to redefine <code>filter = pfilter (set A)</code> with a relatively small blast radius?</p>",
        "id": 223965333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611611283
    },
    {
        "content": "<p>It looks like the current <code>filter</code> (for sets) is in the global namespace, whereas preorder ideals (which are dual to the preorder filters) currently live at<code>order.ideal</code>. Which naming option do you prefer:</p>\n<ol>\n<li>Keep <code>filter</code> for sets, add <code>order.filter</code> dual to <code>order.ideal</code> for preorders, for the nice name;</li>\n<li>Keep <code>filter</code> for sets, add <code>order.pfilter</code> dual to <code>order.ideal</code> for preorders, for less confusion;</li>\n<li>Something else (please specify).</li>\n</ol>",
        "id": 223965918,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611611597
    },
    {
        "content": "<p>I guess <code>pfilter</code> in the root namespace would also be fine</p>",
        "id": 223966051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611611647
    },
    {
        "content": "<p>With <code>ideal</code> you want to distinguish from ideals of rings. But with <code>pfilter</code> there is no such risk.</p>",
        "id": 223966092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611611677
    },
    {
        "content": "<p>There is also <code>finset.filter</code>, but presumably we’ve already found ways of avoiding that naming confusion</p>",
        "id": 223971441,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1611613427
    },
    {
        "content": "<p>Ah, if <code>finset.filter</code> already exists along with the global <code>filter</code>, I'm tempted to go for <code>order.filter</code></p>",
        "id": 223971863,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611613669
    },
    {
        "content": "<p>Oh wait no, that's the computer science filter, which keeps or discards elements from a container-like object</p>",
        "id": 223972065,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611613793
    },
    {
        "content": "<p>As per the contribution guidelines, could I get write access to non-master branches of the mathlib repository? My github username is <code>mguaypaq</code>. I'd like to start a first PR towards adding preorder filters</p>",
        "id": 223973153,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611614414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252278\">Mathieu Guay-Paquet</span> <a href=\"#narrow/stream/113488-general/topic/Filter.20(set).20vs.20filter.20(poset)/near/223973153\">said</a>:</p>\n<blockquote>\n<p>As per the contribution guidelines, could I get write access to non-master branches of the mathlib repository? My github username is <code>mguaypaq</code>. I'd like to start a first PR towards adding preorder filters</p>\n</blockquote>\n<p>Sent!</p>",
        "id": 223973668,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1611614721
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 223973825,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611614807
    },
    {
        "content": "<p>Johan already wrote it but I think we should emphasize: before embarking for this adventure, you need to know that if a refactor makes actual filters even very very slightly less convenient to use then it simply won't be merged.</p>",
        "id": 223974772,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611615390
    },
    {
        "content": "<p>Thanks for the emphasis. I am totally on board with that approach</p>",
        "id": 223977396,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611617106
    },
    {
        "content": "<p>Should we rename <code>finset.filter</code> to <code>finset.sep</code> in keeping with the set-like name?</p>",
        "id": 223979824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611618820
    },
    {
        "content": "<p>Alright, just moving the <code>order/filter/*</code> files and fixing the imports is now a pull request, <a href=\"https://github.com/leanprover-community/mathlib/issues/5900\">#5900</a>. However, I'm getting a CI failure about lint style, with no details (just: <code>Error: </code>), where would I get more information about that?</p>",
        "id": 224073550,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611682212
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">filter</span><span class=\"bp\">/</span><span class=\"n\">filter_product.lean</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">14</span> <span class=\"o\">:</span> <span class=\"n\">ERR_LIN</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"n\">has</span> <span class=\"n\">more</span> <span class=\"n\">than</span> <span class=\"mi\">100</span> <span class=\"n\">characters</span>\n</code></pre></div>",
        "id": 224073679,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611682267
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/runs/1771058560\">https://github.com/leanprover-community/mathlib/runs/1771058560</a></p>",
        "id": 224073703,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611682276
    },
    {
        "content": "<p>Ah, the error message appeared empty because of my adblocker, thanks</p>",
        "id": 224073914,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611682355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252278\">@Mathieu Guay-Paquet</span> I think it would be good to first settle on the name <code>pfilter</code>  vs <code>order.filter</code>.<br>\nBecause if we choose <code>pfilter</code>, then stuff can just go in <code>order/pfilter/*</code>.</p>",
        "id": 224187218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611757395
    },
    {
        "content": "<p>I'm leaning towards <code>pfilter</code>, because there's already more than one thing called <code>filter</code>, and we might want to relate both notions sometimes. For example, relating <code>filter α</code> and <code>pfilter (set α)</code>; or talking about <code>pfilter (finset α)</code>, where <code>finset.filter</code> already exists (and is the computer science filter-a-list operation)</p>",
        "id": 224188644,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611757946
    },
    {
        "content": "<p>I'm fine closing the PR, it's almost just a proof of concept that moving the files wouldn't be hard in practice</p>",
        "id": 224188823,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611758008
    },
    {
        "content": "<p>In that case I would suggest just putting new things in <code>order/pfilter/*</code>.</p>",
        "id": 224188843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611758015
    },
    {
        "content": "<p>Right, but I think it's better to keep them where they are. We don't care too much about backwards compatibility, or completely breaking api's and putting them up in new places. But usually there will be some specific problem leading to such a refactor. In the case of <a href=\"https://github.com/leanprover-community/mathlib/issues/5900\">#5900</a>, I don't think there is an urgent need of moving the files to a different place.</p>",
        "id": 224189111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611758114
    },
    {
        "content": "<p>I'll note that a more contentful PR is currently at <a href=\"https://github.com/leanprover-community/mathlib/issues/5909\">#5909</a>, currently just awaiting bors merge. I plan on defining pfilters as ideals on the dual preorder, so it makes sense to prove more things about ideals, to get facts about pfilters almost for free</p>",
        "id": 224189950,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1611758439
    }
]