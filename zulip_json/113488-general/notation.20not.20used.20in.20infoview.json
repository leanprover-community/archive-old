[
    {
        "content": "<p>In the following, does anyone understand why Lean uses the notation in the second example but not in the first one?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`∑`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"bp\">`</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>  <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">n : ℕ</span>\n<span class=\"cm\">⊢ (range n).sum (λ (i : ℕ), i) = n * (n - 1) / 2</span>\n<span class=\"cm\">-/</span>\n<span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`∑`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"bp\">`</span> <span class=\"n\">s</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset.sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">n : ℕ</span>\n<span class=\"cm\">⊢ ∑ (i : ℕ) in range n, i = n * (n - 1) / 2</span>\n<span class=\"cm\">-/</span>\n<span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223806747,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611483431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> maybe?</p>",
        "id": 223806755,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611483469
    },
    {
        "content": "<p>I think the notation has to be associated to a single definition in order to be used by the pretty printer? Does it work if you introduce a <code>sum_range</code> definition?</p>",
        "id": 223807086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611483986
    },
    {
        "content": "<p>It's fine if you use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∑`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"bp\">`</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset.sum</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>If I remember correctly, using dot notation in a notation has problems.</p>",
        "id": 223807252,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1611484291
    },
    {
        "content": "<p>Thanks a lot Sébastien!</p>",
        "id": 223808045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611485680
    }
]