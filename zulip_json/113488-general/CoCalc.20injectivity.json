[
    {
        "content": "<p>I made the exercise about injectivity of compositions in CoCalc, first I tried:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>But got the error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"k\">with</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n<span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>Could someone tell why a=b cannot unify with ?m_1 = ?m_2.<br>\nI know this is wrong and the correct answer is first apply hf, but I just want to know why it doesn't unify.</p>",
        "id": 194562448,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1587242268
    },
    {
        "content": "<p><code> ``` </code> not <code>  ´´´ </code> (the one at the top)</p>",
        "id": 194562494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587242316
    },
    {
        "content": "<p>It can't unify it because the conclusion of <code>hg</code> is that two terms of type <code>Y</code> are equal, but <code>a</code> and <code>b</code> have type <code>X</code>.</p>",
        "id": 194562571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587242404
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 194562575,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587242408
    },
    {
        "content": "<p>Ah, ok, thanks, I hadn't thought that far. Thanks a lot.</p>",
        "id": 194562601,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1587242507
    }
]