[
    {
        "content": "<p>So I'm playing around with proof recording of sorts.  I've written my own hacked versions of the <code>rw</code>, <code>rwa</code>, <code>erw</code>  tactics that trace certain information.  I'd like to try it out on the whole lean and mathlib libraries, but I am not sure how to do two things:</p>\n<ol>\n<li>How do I safely modify the lean library code (in this case  <code>interactive.lean</code>) without breaking my stable lean distribution?  (I also assume I need to recompile the .lean files, but I assume I do that with <code>lean --make</code>.)</li>\n<li>Is there a convenient way to have Lean run all files in the lean library and mathlib (so that I can get the trace information from my proof recording hack)?</li>\n</ol>",
        "id": 194522009,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587177946
    },
    {
        "content": "<p>By \"the Lean library\", I mean the files in <code>~/.elan/toolchains/3.4.2/lib/lean/library/init</code>.</p>",
        "id": 194522122,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587178129
    },
    {
        "content": "<p>For point 2., there is a script <code>scripts/mk_all.sh</code> (and a corresponding script <code>scripts/rm_all.sh</code>) that will create <code>src/all.lean</code>, which imports all of mathlib.</p>",
        "id": 194523744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587180820
    },
    {
        "content": "<p>I'd be happy to hear the answer to 1. as well. I used to know how to hack core Lean comfortably, but seem to have lost that skill, and my current process involves deleting my <code>~/.elan</code> directory and reinstalling when I'm done. :-(</p>",
        "id": 194523810,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587180896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Does this help? (Quote from a PM)<br>\n<span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/pm-with/110043,112680-pm/near/193894802\" title=\"#narrow/pm-with/110043,112680-pm/near/193894802\">said</a>:</p>\n<blockquote>\n<p>If you build lean locally, then you can just set the <code>lean.executable</code> configuration option in vscode to use the freshly built lean.<br>\nAnother option for such a small change is to <code>elan default nightly &amp;&amp; elan update</code> and then open the <code>lean/library</code> directory in vscode.</p>\n</blockquote>",
        "id": 194526621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587186477
    },
    {
        "content": "<p>For 1, here's how I'd do it. It might be more complicated than necessary, so I'd also appreciate hearing about better ways. First, I'd clone the community Lean repo and then make your modifications there. Build Lean following the directions <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/make/index.md#generic-build-instructions\" title=\"https://github.com/leanprover-community/lean/blob/master/doc/make/index.md#generic-build-instructions\">here</a> and it will create some binaries in <code>bin/</code> which use your modified library in <code>library/</code>.</p>\n<p>You can then create a local toolchain from your copy of the lean repo with <code>elan</code>: see <code>elan toolchain help link</code>. </p>\n<p>Then you can set it as an override in a copy of mathlib using <code>elan override</code>.</p>",
        "id": 194530469,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587193857
    },
    {
        "content": "<p>The <code>elan override</code> is how I do it as well.  You should also set the elan override in the lean directory as well.</p>",
        "id": 194531722,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1587196136
    },
    {
        "content": "<p>So I have to recompile the C++ code to make this work?</p>",
        "id": 194566455,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587248301
    },
    {
        "content": "<p>Yeah, unfortunately I don't know another way, though to be honest I haven't tried very hard to find alternatives yet. It seems like there ought to be a way to specify a path to the core library...</p>",
        "id": 194567745,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587250419
    },
    {
        "content": "<p>Ok.  I found one way to do this without compiling C++ binaries.  <del>(Note:  I may have even found a better way, but let's record this way first since I know it works.) (<strong>Edit: See below for cleaner solution.</strong>)</del></p>\n<ol>\n<li>Go to <code>~/.elan/toolchains/</code> and find the lean toolchain you want to modify.</li>\n<li>\n<p>Copy it to another location: <code>cp ~/.elan/toolchains/&lt;toolchain&gt;  &lt;path/to/where/lean/copy/will/be/stored&gt;</code>.<br>\n2a.  If you want version control, you can set up git for that new directory, just the <code>library</code> directory, or replace the <code>library</code> directory with a symbolic link to another library directory.</p>\n</li>\n<li>\n<p>Link this new location as a new toolchain in <code>elan</code>: <code>elan toolchain link &lt;my_new_toolchain_name&gt; &lt;path/to/lean/copy&gt;</code>.</p>\n</li>\n<li>\n<p>Go to the project directory and override which lean to use: <code>elan override set &lt;my_new_toolchain_name&gt;</code>.<br>\n4b. (I don't know if it matters, but if using <code>leanpkg</code>, <em>maybe</em> you need/want to change the lean version in <code>leanpkg.toml</code>.)</p>\n</li>\n<li>\n<p>In vs-code preferences for the lean plugin, change the lean executable path to <code>~/.elan/toolchains/&lt;my_new_toolchain_name&gt;/bin/lean</code> <strong>but only for the workspace, not the user</strong>.</p>\n</li>\n<li>Modify the core library files in your copied lean directory without fear of breaking anything outside of that directory.  (You will have to do <code>lean --make</code>, etc, but I think you folks know more about that than I do.)</li>\n<li>Test on the command line by doing <code>lean --path</code> (and checking that your path is to the copy of the lean library).  (Not sure how to test the vs code directly, but you can tell when a change you made to a core file is being used when another file imports it that core file.)</li>\n</ol>",
        "id": 194571633,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587256999
    },
    {
        "content": "<p>Step 4 should already cover step 5</p>",
        "id": 194600783,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1587307130
    },
    {
        "content": "<p>Yes, if you're using elan there's very rarely any reason to change the executable path setting in vscode-lean (hence the discussion <a href=\"#narrow/stream/113489-new-members/topic/Installing.20mathlib/near/194570418\" title=\"#narrow/stream/113489-new-members/topic/Installing.20mathlib/near/194570418\">here</a>).</p>",
        "id": 194600945,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587307351
    },
    {
        "content": "<p>Good to know.</p>",
        "id": 194601911,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587308584
    },
    {
        "content": "<p>Ok, <strong>I have a <del>much cleaner and easier</del> hacky solution.</strong>  Assuming your project was created with <code>leanpkg</code> (or probably the newer <code>leanproject</code>) and has a <code>leanpkg.path</code> file, then modify that file replacing <code>builtin_path</code> with <code>path &lt;path/of/replacement/lean/core/library&gt;</code>.  Then do <code>lean --path</code> to make sure that new path has taken hold.  It works great!</p>",
        "id": 194602928,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587309923
    },
    {
        "content": "<p>(When I upgrade to <code>leanproject</code>, I'll double check that this solution still works.)</p>",
        "id": 194603009,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587310008
    },
    {
        "content": "<p>You still have to do some variation of steps 1 and 2 above to make a copy of the core library.</p>",
        "id": 194603093,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587310183
    },
    {
        "content": "<p>Ah, of course. That makes sense. I'm not 100% sure, but I believe <code>leanpkg.path</code> may get overwritten when using leanpkg and leanproject to upgrade dependencies, so you may have to watch out there.</p>",
        "id": 194610729,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587319898
    },
    {
        "content": "<p>Good point.</p>",
        "id": 194610869,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587320067
    },
    {
        "content": "<p>Currently leanproject still uses leanpkg under the hood (because I don't have enough time/motivation to get rid of it). In particular it calls leanpkg configure that creates leanpkg.path. So yes, it will be overwritten if you try to update mathlib.</p>",
        "id": 194658664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587379649
    },
    {
        "content": "<p>But there is no problem \"fixing\" this. It only costs time. So, if you really need this, you need to either tell me you really really need it, or open a PR.</p>",
        "id": 194658755,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587379709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113488-general/topic/modifying.20lean.20core.20library.20code/near/194602928\" title=\"#narrow/stream/113488-general/topic/modifying.20lean.20core.20library.20code/near/194602928\">said</a>:</p>\n<blockquote>\n<p>Ok, <strong>I have a much cleaner and easier solution.</strong>  Assuming your project was created with <code>leanpkg</code> (or probably the newer <code>leanproject</code>) and has a <code>leanpkg.path</code> file, then modify that file replacing <code>builtin_path</code> with <code>path &lt;path/of/replacement/lean/core/library&gt;</code>.  Then do <code>lean --path</code> to make sure that new path has taken hold.  It works great!</p>\n</blockquote>\n<p>So your <code>elan toolchain + elan override</code> commands are replaced with editing <code>leanpkg.path</code>? That does sound marginally easier, but as pointed out it's definitely less clean. I would still recommend an override. It's the highest-priority source of the desired Lean version for elan.</p>",
        "id": 194663909,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1587383501
    },
    {
        "content": "<p>Good to know.  What I'm doing now isn't really core Lean development, but core Lean hacking.  <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>  So I'm comfortable with the consequences.  Either way, I've found two ways to modify the core lean code without breaking Lean for other projects and without having to recompile the C++ code.  If anyone asks, you all recommend the former approach, which makes sense.</p>",
        "id": 194666375,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587385155
    }
]