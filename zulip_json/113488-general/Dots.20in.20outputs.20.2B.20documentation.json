[
    {
        "content": "<p>I've upgraded to Lean 3.16.5 and suddenly I get lots of <code>n.succ</code> in the output. This is terrible for teaching, and there are very good reasons to dislike this overloaded notation (<code>n</code> could be a namespace or an object, two very different entities). I've heard rumors there's an option to disable this, but I can't find a comprehensive list of options anywhere.</p>\n<p>Concerning documentation. Searching on the community web site was fruitless (I tried the search of <code>mathlib</code> on the community web set). It's a common issue with proof assistants that even when there is documentation, it's hard to figure out where. Lean has bits of documentation that appear when you hover over things, other bits in <code>mathlib</code> and now increasingly the community site. But I just don't know, as a user, how to find the list of options, a list of tactics, etc., even if some of them do exist. Isabelle is just like that too, because the documentation is organized by ownership (Makarius's domain, Alex Krauss's domain, etc.), not logically.</p>\n<p>Back at Trolltech, we had systematic documentation. From</p>\n<div class=\"codehilite\"><pre><span></span><code>https://doc.qt.io/archives/4.3/\n</code></pre></div>\n\n\n<p>you could find all classes, all functions, all overviews, all modules, etc., all auto-generated by my qdoc (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≈</mo></mrow><annotation encoding=\"application/x-tex\">\\approx</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.48312em;vertical-align:0em;\"></span><span class=\"mrel\">≈</span></span></span></span> doxygen). With Lean, one can sense that this goal is within reach. I unfortunately don't have any time to help you guys make it happen (if you agree this is a desirable goal), but I can continue complaining if you feel this is useful.</p>",
        "id": 203238639,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594193184
    },
    {
        "content": "<p>The option you're looking for is called <code>@[pp_nodot]</code>.  The documentation you're looking for is maybe Rob's baby here: <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 203239361,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594193876
    },
    {
        "content": "<p>And yes, <code>pp_nodot</code> is so undocumented that google only finds it on some shady mirrors.</p>",
        "id": 203239435,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594193951
    },
    {
        "content": "<p>Rob's documentation is the closest, and when I wrote that I tried the search of <code>mathlib</code>, that's what I meant. It doesn't help me with some core Lean things like <code>pp.beta</code>, not to mention <code>@[pp_nodot]</code>.</p>",
        "id": 203239668,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594194199
    },
    {
        "content": "<p>I also don't see a list of tactic, with <code>simp</code>, <code>dsimp</code>, etc., in there. That's what I'm complaining about. There is no single entry point to all documentation to all Lean.</p>",
        "id": 203239747,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594194245
    },
    {
        "content": "<p>And please tell me how to use <code>@[pp_nodot]</code>. <code>set_option @[pp_nodot] true</code> certainly doesn't work. :S</p>",
        "id": 203239783,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594194298
    },
    {
        "content": "<p>Robs docs have got a link for tactics in the top right I think</p>",
        "id": 203239851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594194373
    },
    {
        "content": "<p>You're right. That's good. :)</p>",
        "id": 203239874,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594194405
    },
    {
        "content": "<p>Oh, and now Lean is being \"helpful\" again. I mistyped <code>set_option pp.gamma true</code> and it says</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">option</span> <span class=\"err\">&#39;</span><span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">gamma&#39;</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"err\">&#39;</span><span class=\"kn\">help</span> <span class=\"kn\">options</span><span class=\"bp\">.</span><span class=\"err\">&#39;</span> <span class=\"n\">for</span> <span class=\"n\">list</span> <span class=\"n\">of</span> <span class=\"n\">available</span> <span class=\"kn\">options</span>\n</code></pre></div>\n\n\n<p>but it can't seem to be able to parse <code>help options.</code>. This seems to be outdated or something. :S</p>",
        "id": 203239983,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594194503
    },
    {
        "content": "<p>Kevin, do your mathematician friends like the dot notation? I see it can shoten notations.</p>",
        "id": 203240025,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594194580
    },
    {
        "content": "<p>But it also works backwards w.r.t. the rest of the lambda-calculus and requires a bidirectional parser in one's head.</p>",
        "id": 203240087,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594194625
    },
    {
        "content": "<p>I think a lot of people weren't too keen on it for mathematical functions like <code>ker</code>. And nodot is enabled for thins like <code>sin</code>  etc in  mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">norm_sq</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">norm_sq</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">exp&#39;</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">lim</span> <span class=\"o\">(</span><span class=\"n\">exp&#39;</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">tan</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">sin</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"n\">cos</span> <span class=\"n\">z</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">sinh</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">cosh</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">tanh</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">sinh</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"n\">cosh</span> <span class=\"n\">z</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">tan</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tan</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">sinh</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">sinh</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">cosh</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cosh</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">exponential</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">tanh</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tanh</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span>\n</code></pre></div>",
        "id": 203240140,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594194711
    },
    {
        "content": "<p>It looks to be definition by definition so each definition  you don't want dot notation for is marked nodot, either at declaration time or later with <code>local attribute [pp_nodot] foo.x</code></p>",
        "id": 203240216,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594194779
    },
    {
        "content": "<p>So I have to set this manually for every single symbol? This is absolutely awful.</p>",
        "id": 203240320,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594194856
    },
    {
        "content": "<p>In general, most of us find that dot notation is absolutely great, except for a few particular cases like <code>sin</code> and friends. That's why it is the default behavior. I don't know if there is a pretty printer option that disables it completely.</p>",
        "id": 203240429,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594194963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> I think it also automatically kicks in if you open the namespace. So <code>open nat</code> should solve your issue.</p>",
        "id": 203240439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594194976
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">generalized_field_notation</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 203240445,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594194983
    },
    {
        "content": "<p>I agree with Jasmin that we should have an auto-generated <code>set_option</code> help page.</p>",
        "id": 203240475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594195011
    },
    {
        "content": "<p>Thanks Johan for the hint, but I don't want to <code>open nat</code>. When I teach, I open nothing. Opening stuff is just another way to confuse students. (Some are still confused by the <code>f x y</code> syntax five lectures into the course, so I have to keep things syntactically simple if I want to actually teach something of value.)</p>",
        "id": 203240529,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594195065
    },
    {
        "content": "<p>Gabriel, you're my hero. :)</p>",
        "id": 203240541,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594195077
    },
    {
        "content": "<p>Not only your hero...</p>",
        "id": 203240602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594195116
    },
    {
        "content": "<p>Right. He's also my idol. :)</p>",
        "id": 203240627,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594195160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Dots.20in.20outputs.20.2B.20documentation/near/203240445\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">generalized_field_notation</span> <span class=\"n\">false</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I just found where in the source the effect of this is applied.  It's <code>bool pretty_fn&lt;T&gt;::is_field_notation_candidate(expr const &amp; e)</code> in <code>src/frontends/lean/pp.cpp</code>.  (The <code>pp_nodot</code> check is there, too.)</p>",
        "id": 203240650,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594195178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> I meant, not only <em>your</em> hero... as in he's also my hero (-;</p>",
        "id": 203240764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594195244
    },
    {
        "content": "<p>It seems like field notation in the pretty printer should be opt-in rather than opt-out.  Maybe with <code>structure</code> fields automatically marked to pretty print.</p>",
        "id": 203240862,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594195310
    },
    {
        "content": "<p>I certainly wouldn't be against Kyle's proposal. But Sébastien pointed out that mathematicians seem to generally like the dot notation, so I don't know. Maybe I'm just a dinosaur.</p>",
        "id": 203241900,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594196080
    },
    {
        "content": "<p>I guess it can be confusing for students that have heard of the concepts \"namespace\" and \"object\" before... but for uneducated mathematicians... we just dive in and take whatever the system feeds us.</p>",
        "id": 203242201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594196312
    },
    {
        "content": "<p>I don't know how confusing it is or not, because we don't go that route. All I know is that despite my best attempt to refresh my MSc-level, mostly C.S. students' memory of the lambda calculus, parsing <code>f a (g b c)</code> isn't automatic and takes some time. Then I keep the cognitive load low by avoiding avoidable variants (and the dot notation, which doesn't exist AFAIK in any other proof assistant, is the first victim of my Occam's razor).</p>",
        "id": 203242395,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594196499
    },
    {
        "content": "<p>Moreover, in Isabelle/ML, we have a <code>|&gt;</code> operator which can be used like this to apply functions: <code>x |&gt; f |&gt; g |&gt; h</code> means <code>h (g (f x))</code>. It's reminiscent of <code>.</code> in terms of directionality. It's very addictive, and I've written tens of thousands of lines of code using it, but in the end I'm not so pleased with the result. There's an unhealthy mixture of <code>f x</code> and <code>x |&gt; f</code>, often in the same file and with no rhyme or reason, and if I could go back I'd use <code>|&gt;</code> only where there's a clear benefit (like applying several functions in sequence, my first example). I would <strong>definitely</strong> not make <code>|&gt;</code> the default in the output. The fact that it's so addictive should have been a red flag.</p>",
        "id": 203242760,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594196829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> I find the dot notation everywhere quite disorientating. Chris Hughes suggested that it could be disabled for open namespaces, which I thought was an interesting idea.</p>",
        "id": 203243035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594197038
    },
    {
        "content": "<p>Yes, that would be a good start, since in that case, it brings no real benefit.</p>",
        "id": 203243121,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594197122
    },
    {
        "content": "<p>The massive benefit is of course with things like <code>de : dense_embedding f</code>, and write <code>de.continuous</code> instead of <code>dense_embedding.continuous de</code> to obtain a proof of <code>continuous f</code>.</p>",
        "id": 203243364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594197307
    },
    {
        "content": "<p>Or <code>hf : continuous f</code> and <code>hg : continuous g</code>, and then write <code>hf.add hg</code> for a proof of <code>continuous (f + g)</code>, instead of writing <code>continuous.add hf hg</code>.</p>",
        "id": 203243420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594197358
    },
    {
        "content": "<p>Sure, it's just unfortunate that that substantial benefit was obtained at the cost of an operator that swings the wrong way and that doesn't mesh well generally with functional programming notations.</p>",
        "id": 203243672,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594197507
    },
    {
        "content": "<p>The dot notation is absolutely great in general. It makes Lean look more like a real programming language. But we should have more <code>[pp_nodot]</code>. I don't mind <code>n.succ</code> (in the sense that it's not worse than <code>nat.succ n</code> but both of them should be avoided as soon as the basic nat API is in place), but <code>f.ker</code> or <code>x.sin</code> are of course absurd.</p>",
        "id": 203244061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594197807
    },
    {
        "content": "<p>And of course the documentation improvement is an endless mission that we must always keep in mind.</p>",
        "id": 203244087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594197837
    },
    {
        "content": "<p>But the way, Rob do you have any news from your student who was meant to work on this? Is it happening in the end?</p>",
        "id": 203244141,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594197858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121058\">Jasmin Blanchette</span> <a href=\"#narrow/stream/113488-general/topic/Dots.20in.20outputs.20.2B.20documentation/near/203239983\">said</a>:</p>\n<blockquote>\n<p>Oh, and now Lean is being \"helpful\" again. I mistyped <code>set_option pp.gamma true</code> and it says</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">option</span> <span class=\"err\">&#39;</span><span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">gamma&#39;</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"err\">&#39;</span><span class=\"kn\">help</span> <span class=\"kn\">options</span><span class=\"bp\">.</span><span class=\"err\">&#39;</span> <span class=\"n\">for</span> <span class=\"n\">list</span> <span class=\"n\">of</span> <span class=\"n\">available</span> <span class=\"kn\">options</span>\n</code></pre></div>\n\n\n<p>but it can't seem to be able to parse <code>help options.</code>. This seems to be outdated or something. :S</p>\n</blockquote>\n<p>Indeed, this is probably Lean 2 leftovers and should be <code>#help options</code>.</p>",
        "id": 203244179,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594197893
    },
    {
        "content": "<p>The options do come with descriptions, so we just need a hook to access them from meta-Lean, and generating a doc page will be easy.</p>",
        "id": 203244244,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594197953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Dots.20in.20outputs.20.2B.20documentation/near/203244141\">said</a>:</p>\n<blockquote>\n<p>But the way, Rob do you have any news from your student who was meant to work on this? Is it happening in the end?</p>\n</blockquote>\n<p>It's still in progress.</p>",
        "id": 203244304,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594197983
    },
    {
        "content": "<p>What is in progress? Work on doc or work on figuring out whether work on doc will happen?</p>",
        "id": 203244530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594198167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121058\">Jasmin Blanchette</span> <a href=\"#narrow/stream/113488-general/topic/Dots.20in.20outputs.20.2B.20documentation/near/203239747\">said</a>:</p>\n<blockquote>\n<p>I also don't see a list of tactic, with <code>simp</code>, <code>dsimp</code>, etc., in there. That's what I'm complaining about. There is no single entry point to all documentation to all Lean.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> Regarding the tactic documentation at <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a>, note that there's also issue <a href=\"https://github.com/leanprover-community/mathlib/issues/3088\">#3088</a> which deserves attention. I guess you have descriptions of tactics in the Hitchhiker's Guide that may be more helpful or complete than the official ones in some cases. If you're interested in PRing updates to mathlib I'd be very happy to review and accept.</p>",
        "id": 203251944,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594204230
    },
    {
        "content": "<p>My longer-term goal there is to go the other way, to be able to embed tactic descriptions in other texts. Right now each description is a single blob of markdown. I'd like to split them more (\"description\", \"syntax\", \"options\", etc) so that e.g. the Hitchhiker's Guide could describe <code>linarith</code> in its own way and then import the official syntax documentation.</p>",
        "id": 203252115,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594204336
    },
    {
        "content": "<p>I agree with everything Rob wrote, but we also still need a tactic cheat-sheet which fits on one A4 page with only the essential ones.</p>",
        "id": 203252598,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594204683
    },
    {
        "content": "<p>Yes, I resisted ranting about some of the less informative tactic descriptions. Short is better than nothing. ;) I can PR them. That much (little) I can do. Hopefully the people reviewing the PRs will have more of a clue than me and will spot any inaccuracies.</p>",
        "id": 203253038,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594205042
    },
    {
        "content": "<p>Thanks! The docs for core tactics are mostly (all?) found here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/lean_core_docs.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/lean_core_docs.lean</a><br>\nMathlib tactics are documented right after they're defined. This arrangement is a little less convenient for mass updates, but it helps a lot to keep the docs from becoming outdated.</p>",
        "id": 203253319,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594205261
    },
    {
        "content": "<p>Of course, putting the docs near to the code is a good idea. I remember the discussion. That's how qdoc/oxygen/javadoc etc. work. I'll find them.</p>",
        "id": 203253395,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594205313
    },
    {
        "content": "<p>An <code>add_tactic_doc</code> that has no description means its inheriting its body from the doc string of the relevant tactic. You can override this by just adding the description in the <code>add_tactic_doc</code>.</p>",
        "id": 203253404,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594205318
    },
    {
        "content": "<p>I see.</p>",
        "id": 203253429,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594205345
    },
    {
        "content": "<p>Or you can update the tactic doc string, of course, if it seems appropriate!</p>",
        "id": 203253439,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594205361
    },
    {
        "content": "<p>(We also had a manual for qdoc. But Lean has a chat. ;))</p>",
        "id": 203253448,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594205372
    },
    {
        "content": "<p>I'll be in the office the next two weeks, so perhaps you can even look over my shoulder as I try to do it.</p>",
        "id": 203253524,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594205411
    },
    {
        "content": "<p>I'll be in if/when it stops raining :)</p>",
        "id": 203253587,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594205474
    },
    {
        "content": "<p>That certainly is an <code>if</code> in NL</p>",
        "id": 203253733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594205591
    },
    {
        "content": "<p>I'll be there if I don't get kidnapped and tortured. Another <a href=\"https://edition.cnn.com/2020/07/07/europe/dutch-police-belgium-torture-shipping-containers/index.html\"><code>if</code> in NL</a>.</p>",
        "id": 203253996,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594205793
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 203254118,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594205885
    },
    {
        "content": "<p>Good luck! That was pretty horrible news.</p>",
        "id": 203254148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594205923
    },
    {
        "content": "<p>Concerning Rob's last suggestion regarding \"embed[ding] tactic descriptions in other texts\": It could be useful for others, but I wouldn't import that. I want to show an idealized fragment of the syntax, not the whole thing. And I want to stick to my own naming conventions anyway. At the end of the day, although most of my readers are using it as a Lean tutorial, it was never my ambition to write one. At most, I would consider adding links to the official documentation, on a \"for more information\" basis. I'll add that to my TODO.</p>",
        "id": 203278928,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594220888
    }
]