[
    {
        "content": "<p>Hi, currently <code>α × β ≃ γ</code> is parsed as <code>α × (β ≃ γ)</code> while it seems more natural to interpret it as <code>(α × β) ≃ γ</code>.</p>",
        "id": 169733829,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562358225
    },
    {
        "content": "<p>I realize this looks odd, but type constructors deliberately have low precedence. The <code>×</code> symbol has approximately the same precedence as <code>∧</code>, because they are used to put together basic types. This is below <code>=</code>, which is near <code>≃</code>, and <code>*</code> lies above that</p>",
        "id": 169734371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562358820
    },
    {
        "content": "<p>Consider also <code>α → β ≃ γ</code></p>",
        "id": 169734446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562358878
    },
    {
        "content": "<p>That one is just clearly ambiguous and needs parentheses.</p>",
        "id": 169734461,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562358906
    },
    {
        "content": "<p>(because neither interpretation would be \"dumb\")</p>",
        "id": 169734472,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562358925
    },
    {
        "content": "<p>For <code>→</code> this order makes sense because it is often used in the sense \"implies\".</p>",
        "id": 169734483,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562358937
    },
    {
        "content": "<p><code>α × (β ≃ γ)</code> also makes sense if you want to produce two things</p>",
        "id": 169734500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562358961
    },
    {
        "content": "<p>then you should have defined a structure with named fields, so people didn't need to listen to <code>.1</code> and <code>.2</code> :-)</p>",
        "id": 169734553,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562359003
    },
    {
        "content": "<p>/me wonders if it's possible to require explicit parentheses in some cases.</p>",
        "id": 169734557,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562359015
    },
    {
        "content": "<p>Sadly no</p>",
        "id": 169734558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562359020
    },
    {
        "content": "<p>although we can certainly try to impose a convention</p>",
        "id": 169734569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562359039
    },
    {
        "content": "<p>Conventions don't help newbies.</p>",
        "id": 169735140,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562359749
    },
    {
        "content": "<p>There is no reason that <code>≃</code> has a precedence near <code>=</code>. <br>\n<code>≃</code> only acts on types, so it makes sense for it to have lower precedence than (some) type formers. This is not the case for <code>=</code>, which should (almost) never be used on types, so it should have a precedence higher than all type formers.</p>",
        "id": 169895387,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1562612329
    },
    {
        "content": "<p>In the Lean 2 HoTT library the precedence of <code>≃</code> was 25, compared to <code>×</code> having 35 and <code>=</code> having 50.<br>\n<a href=\"https://github.com/leanprover/lean2/blob/master/hott/init/equiv.hlean#L304\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/master/hott/init/equiv.hlean#L304\">https://github.com/leanprover/lean2/blob/master/hott/init/equiv.hlean#L304</a><br>\n<a href=\"https://github.com/leanprover/lean2/blob/master/hott/init/reserved_notation.hlean#L145-L208\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/master/hott/init/reserved_notation.hlean#L145-L208\">https://github.com/leanprover/lean2/blob/master/hott/init/reserved_notation.hlean#L145-L208</a></p>\n<p>This results in some nice statements, like</p>\n<div class=\"codehilite\"><pre><span></span>definition prod_equiv_prod [constructor] (f : A ≃ A&#39;) (g : B ≃ B&#39;) : A × B ≃ A&#39; × B&#39;\n</pre></div>\n\n\n<p><a href=\"https://github.com/leanprover/lean2/blob/master/hott/types/prod.hlean#L215\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/master/hott/types/prod.hlean#L215\">https://github.com/leanprover/lean2/blob/master/hott/types/prod.hlean#L215</a></p>\n<p>I do not recall ever running into issues/confusion because of these conventions.</p>",
        "id": 169895567,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1562612485
    },
    {
        "content": "<p>Note: <code>→</code> did (and should) have a lower precedence than <code>≃</code>, and you still require parentheses for them. This can cause confusion, but that's no reason to have the (in my opinion) wrong order for <code>×</code> and <code>≃</code>. Example :</p>\n<div class=\"codehilite\"><pre><span></span>definition arrow_equiv_arrow_right&#39; [constructor] (f1 : A → (B ≃ B&#39;)) : (A → B) ≃ (A → B&#39;)\n</pre></div>\n\n\n<p>(the parentheses in the type of <code>f1</code> are only for readability)<br>\n<a href=\"https://github.com/leanprover/lean2/blob/master/hott/types/arrow.hlean#L51\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/master/hott/types/arrow.hlean#L51\">https://github.com/leanprover/lean2/blob/master/hott/types/arrow.hlean#L51</a></p>",
        "id": 169895829,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1562612723
    },
    {
        "content": "<p>I think we should change the precedence of <code>≃</code> to 25. I have also run against this issue before (maybe with two different tokens). This is only a mathlib change, not a core change.</p>",
        "id": 169896076,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1562612974
    },
    {
        "content": "<p>Oh, if it's a mathlib-only change then go ahead. I agree that the precedence in equiv.lean feels consistently the wrong way around</p>",
        "id": 169897230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562613946
    }
]