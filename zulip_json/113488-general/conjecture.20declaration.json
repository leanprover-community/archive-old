[
    {
        "content": "<p>What do people think of introducing a declaration type (not sure this is the technical term) <code>conjecture</code> which can be named, would need no proof, and can't be called (or can be called but throws a <code>sorry</code>-like warning)?<br>\nFor example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"n\">conjecture</span> <span class=\"n\">goldbach</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p.prime</span> <span class=\"bp\">∧</span> <span class=\"n\">q.prime</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Of course, that's cosmetic, but maybe the kind of cosmetics we want?</p>",
        "id": 264642243,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639341278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, would it be any use for your outreach?</p>",
        "id": 264642447,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639341577
    },
    {
        "content": "<p>Might also be interesting for this to support proving corollaries of conjectures</p>",
        "id": 264643605,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639343139
    },
    {
        "content": "<p>You can define conjectures as Props. This doesn't require any special features, and it lets you formulate corollaries of conjectures fairly easily:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">goldbach_conjecture</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p.prime</span> <span class=\"bp\">∧</span> <span class=\"n\">q.prime</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">goldbach_conjecture</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hp.pos</span><span class=\"o\">,</span> <span class=\"n\">hq.pos</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264644086,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639343846
    },
    {
        "content": "<p>I wonder if being able to put named arguments before the colon would be useful.  If you do that here with <code>goldbach_conjecture</code>, you get a predicate on <code>n</code> rather than a universally quantified statement.</p>",
        "id": 264644260,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639344091
    },
    {
        "content": "<p>I think pre-colon arguments would be the main motivation for a special command</p>",
        "id": 264644495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639344366
    },
    {
        "content": "<p>Yeah I think that mathlib would be enhanced with statements of eg the Birch and Swinnerton-Dyer conjecture and more generally famous conjectures in mathematics such as the millennium problems. One thing about BSD is that in its most general form it assumes other conjectures, as well as assuming theorems which are too hard to prove in Lean</p>",
        "id": 264644532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639344447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113488-general/topic/conjecture.20declaration/near/264643605\">said</a>:</p>\n<blockquote>\n<p>Might also be interesting for this to support proving corollaries of conjectures</p>\n</blockquote>\n<p>Yes, that's one thing I had in mind.</p>",
        "id": 264645298,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639345655
    },
    {
        "content": "<p>My point is mostly to make things look nice and clearly say \"Hey, this is a conjecture\".</p>",
        "id": 264645513,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639345934
    },
    {
        "content": "<p>What's the argument against a separate project for conjectures?</p>",
        "id": 264645771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639346329
    },
    {
        "content": "<p>You can prove corollaries of conjectures without special syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">conjecture.goldbach</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p.prime</span> <span class=\"bp\">∧</span> <span class=\"n\">q.prime</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">conjecture.goldbach.c1</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">conjecture.goldbach</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 264648377,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639349727
    },
    {
        "content": "<p>If we put conjectures in <code>namespace conjecture</code>, then <code>#print prefix conjecture</code> will give us a list of all formalized conjectures.</p>",
        "id": 264648427,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639349793
    },
    {
        "content": "<p>I think it's important to have strong separation when it comes to conjectures being in mathlib, particularly if the intention is to build results depending on the validity of certain conjectures. The statements of conjectures changes over time, even famous conjectures. E.g. <a href=\"https://core.ac.uk/download/pdf/82815264.pdf\">https://core.ac.uk/download/pdf/82815264.pdf</a> (see the footnote on page 1)</p>",
        "id": 264648774,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639350228
    },
    {
        "content": "<p>If conjectures are written as in Yury's or Kyle's post, then I don't think there is any possibility of confusion between conjectures and axioms, because the reader is reminded of the dependence on the conjecture in every theorem</p>",
        "id": 264649017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639350525
    },
    {
        "content": "<p>So what would one do when a counterexample is found for a given conjecture? Delete the 37571 lines in mathlib that depend on it?</p>",
        "id": 264649097,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639350610
    },
    {
        "content": "<p>sure</p>",
        "id": 264649102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639350622
    },
    {
        "content": "<p>Ok fair enough.</p>",
        "id": 264649105,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639350636
    },
    {
        "content": "<p>only after the counterexample is actually formalized though</p>",
        "id": 264649107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639350648
    },
    {
        "content": "<p>since then the counterexample theorem strictly dominates all 37571 lines</p>",
        "id": 264649119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639350669
    },
    {
        "content": "<p>some of those lines might actually be part of the counterexample proof though, in which case they aren't junk</p>",
        "id": 264649133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639350719
    },
    {
        "content": "<p>If it's \"false for trivial reasons\" like in Grothendieck's paper, then the conjecture can probably just be edited and the proofs modified to accomodate the change</p>",
        "id": 264649189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639350779
    },
    {
        "content": "<p>since presumably nothing was depending on the error</p>",
        "id": 264649199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639350800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/conjecture.20declaration/near/264649097\">said</a>:</p>\n<blockquote>\n<p>So what would one do when a counterexample is found for a given conjecture? Delete the 37571 lines in mathlib that depend on it?</p>\n</blockquote>\n<p>One can ask the same question about all the lemmas in papers that assume GRH right? Its not so uncommon in some areas</p>",
        "id": 264649619,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639351454
    },
    {
        "content": "<p>They're still interesting results that are maybe worthless if GRH turns out to be wrong</p>",
        "id": 264649632,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639351492
    },
    {
        "content": "<p>But also maybe salvageable under a weaker assumption. At least many false conjectures aren't just outright wrong, rather true under some extra hypotheses, deletion seems a bit extreme</p>",
        "id": 264649658,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639351543
    },
    {
        "content": "<p>Especially if the 37571 lines constitute a proof of false from the conjecture and thus the disproof</p>",
        "id": 264657083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639361998
    },
    {
        "content": "<p>I'm convinced. But I still think it's better to, say, name a proposition <code>conjecture.the_Riemann_hypothesis</code> as opposed to having <code>sorry</code>s and/or axioms around in the <code>conjecture</code> namespace.</p>",
        "id": 264657630,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639362652
    },
    {
        "content": "<p>I guess it wasn't made clear above how the conjecture idea would be implemented.</p>",
        "id": 264657646,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639362695
    },
    {
        "content": "<p>This is a reasonable use for type classes</p>",
        "id": 264661502,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639367857
    },
    {
        "content": "<p>I suggest the following:</p>\n<ul>\n<li>We declare facts with no proofs as typeclasses in one of 2 namespaces <code>todo</code> (there is a proof on paper, not yet formalized in mathlib) and <code>conjecture</code> (there is no proof accepted by math community). E.g.,</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">todo.fermat_last_theorem</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">flt</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<ul>\n<li>For each typeclass, we define a theorem that works as a public interface for this class. E.g.,</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pow_add_pow_ne_pow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">todo.fermat_last_theorem</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">todo.fermat_last_theorem.flt</span> <span class=\"n\">hn</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n</code></pre></div>\n<ul>\n<li>If we formalize a fact that depends on FLT, then we assume <code>[todo.fermat_last_theorem n]</code> or <code>[∀ n, todo.fermat_last_theorem n]</code> and call <code>pow_add_pow_ne_pow</code> here and there.</li>\n<li><code>doc-gen</code> highlights assumptions in the <code>conjecture</code> and <code>todo</code> namespaces (e.g., makes them bold red). This rule takes precedence over the current \"semi-hidden typeclass assumption\".</li>\n<li>If some day the theorem is formalized (it's not a realistic assumption for FLT in the next few years but we can use the same trick for simpler results), then we just drop the typeclass assumption and all proofs still work.</li>\n</ul>",
        "id": 265198246,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639679196
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 265199901,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1639679948
    },
    {
        "content": "<p>Is there a way we can get the bold red highlight without having to teach doc-gen about special namespaces?</p>",
        "id": 265201187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639680556
    },
    {
        "content": "<p>Say for instance: typeclasses with no instances are always shown in red</p>",
        "id": 265201242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639680583
    },
    {
        "content": "<p>We'll have instance <code>todo.fermat_last_theorem 3</code></p>",
        "id": 265204350,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639681827
    },
    {
        "content": "<p>We need either a special namespace, or a special attribute.</p>",
        "id": 265204394,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639681847
    },
    {
        "content": "<p>Okay, I really like this idea.</p>",
        "id": 265223758,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639691093
    },
    {
        "content": "<p>This approach only works for conjectures we can state, but I assume this is doomed to be.</p>",
        "id": 265223889,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639691150
    },
    {
        "content": "<p>The main use case I thought about is formalizing some results that depend either on a conjecture, or on a very complicated theorem.</p>",
        "id": 265226116,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639692237
    },
    {
        "content": "<p>How would this work with conjectures which are known in some cases but not others</p>",
        "id": 265235938,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639698136
    },
    {
        "content": "<p>E.g. for elliptic curves in 1990 it was known that modular elliptic curves had many nice properties and several individual elliptic curves were proven to be modular, then wiles proved flt by showing semistable elliptic curves are modular. Only later were all elliptic curves over the rationals shown to be modular.</p>\n<p>I don't really see with this system how you get useful results out of knowing the conjecture in some cases, compared to just stating theorems with regular hypotheses for the conjecture</p>",
        "id": 265236144,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639698310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> you can have instances for the known cases. That looks nice to me...</p>",
        "id": 265251270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639713356
    },
    {
        "content": "<p>But you would then need whatever conditions the partial result is known under to also be a class right? If I prove FLT for Mersenne primes I'd have to make <code>is_mersenne_prime</code> a  class to fit into this system?<br>\nIts nice that one wouldn't have to change any lines sure, but some parts of mathematics just don't feel like typeclasses to me</p>",
        "id": 265251666,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639713717
    },
    {
        "content": "<p>I don't think that'd be the case; you could just state the signature originally as <code>lemma flt {p : nat} (hp : is_mersenne_prime p) [todo.goldbach_or_some_nonsense p] {a b c : nat} : a ^ p + b ^ p != c ^ p</code>, and when we actually have a proof just remove the <code>todo</code>. (apologies for the ascii art, haven't set up xcompose on this computer yet)</p>",
        "id": 265252674,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639714888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> maybe using <code>fact</code> for that would be ok?</p>",
        "id": 265253189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639715581
    },
    {
        "content": "<p>or just make the proof of the special case into a <code>def</code>/<code>lemma</code> and then if you ever actually use it somewhere, use <code>letI</code></p>",
        "id": 265254187,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639716964
    },
    {
        "content": "<p>Did anyone make any progress on this?</p>",
        "id": 282416258,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1652631489
    },
    {
        "content": "<p>I didn't.</p>",
        "id": 282420536,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652637348
    },
    {
        "content": "<p>Speaking of <code>conjecture</code> as a keyword, we could also add <code>corollary</code> next to <code>theorem</code> and <code>lemma</code>. But adding <code>conjecture</code> is certainly more important.</p>",
        "id": 282532969,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1652722763
    },
    {
        "content": "<p>It would be useful to be able to formalise the statement of a <code>conjecture</code>, leaving it for someone else to provide the proof (since mathlib doesn’t allow <code>sorry</code>). This could also be used in proving that different formulations of a statement are equivalent — for example, the various statements of the Four Colour Theorem in graph theory.</p>",
        "id": 282538098,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1652724627
    },
    {
        "content": "<p>AFAIR, the plan was to create typeclasses for conjectures.</p>",
        "id": 282540809,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652725773
    },
    {
        "content": "<p>To refine <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>'s idea a little, the typeclass could be fully parameterized as if it were the actual theorem statement.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">todo.fermat_last_theorem</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">proof</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pow_add_pow_ne_pow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">todo.fermat_last_theorem</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">todo.fermat_last_theorem.proof</span> <span class=\"n\">hn</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n</code></pre></div>\n<p>That way you have the ability to fill in very specific special cases.</p>",
        "id": 282551414,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652730755
    },
    {
        "content": "<p>Potentially that framework could be automated using an attribute (for Lean 3), maybe something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[conjecture \"pow_add_pow_ne_pow\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">fermat_last_theorem</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>In Lean 4, I think it's possible to define a <code>conjecture</code> keyword that would generate the typeclass and the typeclass-dependent theorem statement from something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conjecture</span> <span class=\"n\">pow_add_pow_ne_pow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 282551927,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652731010
    },
    {
        "content": "<p>IMHO, typeclasses should only depend on typeclasses. So, I think that this should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">conjecture.FLT</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">flt</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then you can prove lemmas assuming <code>[FLT n]</code> or <code>[∀ n, FLT n]</code>.</p>",
        "id": 282552343,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652731206
    },
    {
        "content": "<p>What do you mean by \"only depend on typeclasses\"?</p>",
        "id": 282552632,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652731310
    },
    {
        "content": "<p>I really want the <code>conjecture</code> keyword, personally.</p>",
        "id": 282552864,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652731432
    },
    {
        "content": "<p>Maybe it doesn't make sense having these propositions in the arguments for the class (though I'm not sure it hurts), and this would be fine too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">todo.fermat_last_theorem</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">proof</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282553002,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652731485
    },
    {
        "content": "<p>The point I was trying to make is that it would be good to have these classes be fully parameterized so that you can prove special cases and add them as instances -- it might be too hard proving it for all a, b, and c for a specific n.</p>",
        "id": 282553104,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652731526
    },
    {
        "content": "<p>I think it's fine if these instances can't always be found through typeclass search, which might happen if the conditions require additional proofs or data. Having them be instances lets them show up in the \"instances\" list in the documentation.</p>",
        "id": 282553387,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652731654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/conjecture.20declaration/near/282553387\">said</a>:</p>\n<blockquote>\n<p>I think it's fine if these instances can't always be found through typeclass search, which might happen if the conditions require additional proofs or data. Having them be instances lets them show up in the \"instances\" list in the documentation.</p>\n</blockquote>\n<p>I think that we should list non-instance definitions/lemmas in the documentation too.</p>",
        "id": 282557342,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652733555
    }
]