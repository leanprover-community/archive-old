[
    {
        "content": "<p>Let's define a set of all constant functions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_constant</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">→</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">const_fun</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">is_constant</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n</code></pre></div>\n\n<p>I want to work with <code>f : const_fun</code> as with a function, thus I define coercion to fun</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible, inline]</span> <span class=\"kd\">instance</span> <span class=\"n\">const_fun.has_coe_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">const_fun</span> <span class=\"o\">:=</span> <span class=\"n\">has_coe_to_fun.mk</span> <span class=\"n\">_</span> <span class=\"n\">subtype.val</span>\n</code></pre></div>\n\n<p>Just a simple lemma testing that the coercion works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lemma1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">const_fun</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f.val</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Now, here is the bizarre thing, if you import <code>import data.set</code> then the proof by <code>simp</code> does not work anymore. </p>\n<p>In the proof, <code>simp</code> changes goal from <code>⇑f n = f.val n</code> to <code>⇑f n = ↑f n</code>. What is going on here?</p>",
        "id": 214129151,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603324471
    },
    {
        "content": "<p>You can add <code>set_option trace.simplify.rewrite true</code> before your code to see what <code>simp</code> is doing in each case.</p>",
        "id": 214129530,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603324749
    },
    {
        "content": "<p>In this case, without the import, <code>simp</code> is using <code>eq_self_iff_true</code>, and with the import <code>simp</code> uses <code>subtype.val_eq_coe</code>.</p>",
        "id": 214129659,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603324810
    },
    {
        "content": "<p>You could write <code>simp only [eq_self_iff_true]</code> to get the proof to work with the import.</p>",
        "id": 214129688,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603324832
    },
    {
        "content": "<p>I'm too lazy to write <code>simp only [eq_self_iff_true]</code>, I just want <code>simp</code> to work as expected. </p>\n<p>The solution I have found is to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible, inline]</span> <span class=\"kd\">def</span> <span class=\"n\">get_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">x</span>\n<span class=\"kd\">@[reducible, inline]</span> <span class=\"kd\">instance</span> <span class=\"n\">const_fun.has_coe_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">const_fun</span> <span class=\"o\">:=</span> <span class=\"n\">has_coe_to_fun.mk</span> <span class=\"n\">_</span> <span class=\"n\">get_coe</span>\n</code></pre></div>\n\n<p>For some reason I have to define the auxiliary function <code>get_coe</code>, because simply writing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible, inline]</span> <span class=\"kd\">instance</span> <span class=\"n\">const_fun.has_coe_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">const_fun</span> <span class=\"o\">:=</span> <span class=\"n\">has_coe_to_fun.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"bp\">→</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>I get an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">const_fun</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_lift_t</span> <span class=\"n\">const_fun</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214133821,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603328966
    },
    {
        "content": "<p>This is all rather unidiomatic</p>",
        "id": 214133994,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603329142
    },
    {
        "content": "<p>You can prove <code>lemma1</code> by <code>refl</code>, and I wouldn't recommend putting <code>@[reducible, inline]</code> on everything (I don't even know what <code>@[inline]</code> does). If you want <code>simp</code> to do specific things, then add <code>simp</code> lemmas.</p>",
        "id": 214134247,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603329483
    },
    {
        "content": "<p>The main problem is when I state some lemma, like <code>⇑f (⇑f n) = ⇑f 0</code> and then I'm proving another lemma by using <code>simp</code>. I can end up with a goal <code>F ↑f (⇑f n) = F ⇑f 0</code> for some <code>F : ℕ →  ℕ</code> . Now I'm in a trouble, if <code>⇑f</code> and <code>↑f</code> are not equal by definition then <code>rewrite</code> tactic has problem using my original lemma  <code>⇑f (⇑f n) = ⇑f 0</code>.</p>",
        "id": 214134500,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603329808
    },
    {
        "content": "<p>It looks to me like they are defeq, they are just not syneq.</p>",
        "id": 214140046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603337041
    },
    {
        "content": "<p>mathlib has a simp lemma that <code>subtype.val</code> is reduced to the coercion. That's why you get the <code>↑f</code>. Add your own simp lemma stating that <code>↑f</code> reduces to <code>⇑f</code>, and you should be good. (You might have to state the lemma explicitly with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_subtype\">docs#coe_subtype</a>)</p>",
        "id": 214250419,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603402082
    }
]