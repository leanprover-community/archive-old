[
    {
        "content": "<p>Hi,<br>\nCurrently, <code>analysis.convex.star</code> imports <code>analysis.convex.basic</code>. The main definitions are related by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_iff_forall_star_convex\">docs#convex_iff_forall_star_convex</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">convex_iff_forall_star_convex</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"bp\">𝕜</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">star_convex</span> <span class=\"bp\">𝕜</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>so many properties of <code>convex</code> can be deduced from properties of <code>star_convex</code>. I suggest that we (<span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> ? or I can do some of this) do the following (:</p>\n<ul>\n<li>[PR 1] split <code>basic</code> into <code>segment</code> and <code>basic</code>, import <code>segment</code> in <code>basic</code>;</li>\n<li>[PR 2] swap <code>basic</code> and <code>star</code> in the hierarchy, move the <code>iff</code> lemma to <code>basic</code>;</li>\n<li>[PR 3] redefine <code>convex</code> as <code>∀ x ∈ s, star_convex k x s</code>, use facts about <code>star_convex</code> to golf the proofs about <code>convex</code>.</li>\n</ul>",
        "id": 267184229,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641559208
    },
    {
        "content": "<p>This is what I put in the PR description of <code>star_convex</code> (except that I don't think we need <code>convex</code> to be <em>defined</em> in terms of <code>star_convex</code>. An iff lemma should be enough).</p>",
        "id": 267184279,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641559281
    },
    {
        "content": "<p>So yes, agreed!</p>",
        "id": 267184311,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641559318
    },
    {
        "content": "<p>I think, it's nice to have <code>hs hx = star_convex k x s</code> because this way we'll be able to use dot notation on <code>hs hx</code> without writing it as <code>hs.star_convex hx</code>.</p>",
        "id": 267184406,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641559379
    },
    {
        "content": "<p>And <code>hs hx hy</code> is still the same.</p>",
        "id": 267184418,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641559392
    },
    {
        "content": "<p>Okay, sure</p>",
        "id": 267184433,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641559402
    },
    {
        "content": "<p>But it's a matter of taste, of course.</p>",
        "id": 267184436,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641559405
    },
    {
        "content": "<p>Luckily, I already reduced the amount of explicit arguments to <code>set.pairwise</code>, so we shouldn't need much changes.</p>",
        "id": 267184516,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641559444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, are you working on it? If not, I'll start now.</p>",
        "id": 267213539,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641574851
    },
    {
        "content": "<p>I'm not</p>",
        "id": 267222289,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641579198
    },
    {
        "content": "<p>With some(!) delay: <a href=\"https://github.com/leanprover-community/mathlib/pull/16112\">#16112</a></p>",
        "id": 293992469,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660777447
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16173\">#16173</a></p>",
        "id": 294478106,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661025703
    }
]