[
    {
        "content": "<p>How hard is it to write a tactic that works like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- goal is ⇑v ↑(x.snd) * ⇑v (y.fst) * ((⇑v ((y.snd).val))⁻¹ * (⇑v ((x.snd).val))⁻¹) ≤⇑v (y.fst) * (⇑v ((y.snd).val))⁻¹</span>\n<span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span>\n<span class=\"c1\">-- goal is ⇑v ↑(x.snd) * ⇑v (y.fst) * ((⇑v ((y.snd).val))⁻¹ * (⇑v ((x.snd).val))⁻¹)</span>\n  <span class=\"n\">perm</span> <span class=\"s2\">&quot;(1 * 4) * (2 * 3)&quot;</span><span class=\"o\">,</span>\n<span class=\"c1\">-- goal is (⇑v ↑(x.snd) * (⇑v ((x.snd).val))⁻¹)) * (⇑v (y.fst) * (⇑v ((y.snd).val))⁻¹)</span>\n<span class=\"o\">},</span>\n<span class=\"c1\">-- goal is (⇑v ↑(x.snd) * (⇑v ((x.snd).val))⁻¹)) * (⇑v (y.fst) * (⇑v ((y.snd).val))⁻¹) ≤⇑v (y.fst) * (⇑v ((y.snd).val))⁻¹</span>\n<span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_left</span><span class=\"o\">,</span>\n<span class=\"c1\">-- etc</span>\n</pre></div>",
        "id": 158597507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550217711
    },
    {
        "content": "<p>Some sort of permutation tactic would be very helpful, I feel.</p>",
        "id": 158597563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550217731
    },
    {
        "content": "<p>The problem with <code>rw show what_I_have = what_I_want</code> is that you run into type class issues with writing that down. In the <code>rw show</code> doesn't have all the typing context that the <code>perm</code> tactic would have.</p>",
        "id": 158597682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550217820
    },
    {
        "content": "<p>I think the given syntax is underdetermined, if you say there's only three things what if there are multiple ways to split it up into three parts? Also I think we can do without the quotes</p>",
        "id": 158597910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550218105
    },
    {
        "content": "<p>I haven't thought hard about the syntax...</p>",
        "id": 158597934,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550218172
    },
    {
        "content": "<p>what about something more like <code>perm a * b * (c * d) =&gt; (a * d) * (b * c)</code>?</p>",
        "id": 158597995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550218236
    },
    {
        "content": "<p>where the thing on the left is a pattern that binds the names on the right</p>",
        "id": 158598004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550218258
    },
    {
        "content": "<p>It would be more verbose, but I why it's needed</p>",
        "id": 158598275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550218661
    },
    {
        "content": "<p>we could do it your way but I'm worried about lack of transparency. Indexes are generally bad at explaining what is being referred to</p>",
        "id": 158598781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550219377
    },
    {
        "content": "<p>Also there are more complicated examples like <code>perm a * b + c * d =&gt; d * c + a * b</code> where it's less obvious what the atoms of the permutation are</p>",
        "id": 158598838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550219424
    },
    {
        "content": "<p>Yes, so yours is better!</p>",
        "id": 158598855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550219464
    },
    {
        "content": "<p>How hard is it to actually write such a tactic?</p>",
        "id": 158598862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550219476
    },
    {
        "content": "<p>good question. Would it match subterms or just the whole target?</p>",
        "id": 158598867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550219497
    },
    {
        "content": "<p>Hmmm, matching subterms is probably better in the long run, right?</p>",
        "id": 158598960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550219598
    },
    {
        "content": "<p>It would also avoid the <code>conv</code> part.</p>",
        "id": 158598967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550219614
    },
    {
        "content": "<p>it will be easier to use but possibly also harder to control, like <code>rw</code></p>",
        "id": 158599119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550219789
    },
    {
        "content": "<p>I see. But maybe we can use <code>_</code>s to guide Lean to the right subterm?</p>",
        "id": 158599213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550219912
    },
    {
        "content": "<p>That goes into my plans for more elaborate conv patterns</p>",
        "id": 158599309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550220045
    },
    {
        "content": "<p>Stuff like <code>conv x in (foo (x + _))</code> to focus on the first summand of the argument to foo</p>",
        "id": 158599335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550220082
    },
    {
        "content": "<p>assuming <code>foo ...</code> is a subterm of the goal</p>",
        "id": 158599351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550220111
    },
    {
        "content": "<p>If <code>conv</code> becomes more powerful, that'd be great! And then there is no problem with <code>perm</code> matching on the whole goal.</p>",
        "id": 158599427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550220187
    },
    {
        "content": "<p>Seperation of concerns, I guess?</p>",
        "id": 158599430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550220197
    }
]