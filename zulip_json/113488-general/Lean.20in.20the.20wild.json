[
    {
        "content": "<p>Its always interesting to find unexpected Lean theories: <a href=\"https://github.com/levjj/esverify-theory/\" target=\"_blank\" title=\"https://github.com/levjj/esverify-theory/\">https://github.com/levjj/esverify-theory/</a><br>\nFrom a first glance, <code>esverify</code> is a Javascript/ECMAScript verifier, and these are some semantics with soundness...</p>",
        "id": 148772776,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1543480647
    },
    {
        "content": "<p>I enjoy looking at different people's coding style; this is nicely written</p>",
        "id": 148773018,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543480959
    },
    {
        "content": "<p>and another one: <a href=\"https://twitter.com/scottfleischman/status/1069965177641160707\" target=\"_blank\" title=\"https://twitter.com/scottfleischman/status/1069965177641160707\">https://twitter.com/scottfleischman/status/1069965177641160707</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/scottfleischman/status/1069965177641160707\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/626135784106491904/6sdJuWCU_normal.jpg\"></a><p>\"Our choice of Lean as the language for the formalisation of this paper has been a consequence of a failed attempt at embedding two-level type theory in the Agda proof assistant.\" \nAdventures in Formalisation <a href=\"https://t.co/UWscHLXJHK\" target=\"_blank\" title=\"https://t.co/UWscHLXJHK\">https://arxiv.org/pdf/1811.11317.pdf</a> p.124</p><span>- Scott Fleischman (@scottfleischman)</span></div></div>",
        "id": 150862445,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1543943781
    },
    {
        "content": "<p><a href=\"https://www.reddit.com/r/math/comments/a3zujc/the_xena_project_i_would_like_to_see_the_main/\" target=\"_blank\" title=\"https://www.reddit.com/r/math/comments/a3zujc/the_xena_project_i_would_like_to_see_the_main/\">https://www.reddit.com/r/math/comments/a3zujc/the_xena_project_i_would_like_to_see_the_main/</a></p>",
        "id": 151166355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544253441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Did you just confess <em>on Reddit</em> that you don't know much about Reddit?</p>",
        "id": 151172376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544265709
    },
    {
        "content": "<p>Anyway, congrats with the visibility!</p>",
        "id": 151172416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544265726
    },
    {
        "content": "<p>yes... visibility... is a bad thing in my opinion</p>",
        "id": 151172723,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544266479
    },
    {
        "content": "<p>Here's a cool writeup of the thesis that includes the <code>esverify</code> project mentioned up above by <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> <a href=\"https://chris-schuster.net/thesis#esverify\" target=\"_blank\" title=\"https://chris-schuster.net/thesis#esverify\">https://chris-schuster.net/thesis#esverify</a></p>",
        "id": 156943113,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1548540120
    },
    {
        "content": "<p>More Lean in the wild, if you're willing to read some Portuguese: someone was working on cryptography last summer. <a href=\"https://www.maxwell.vrac.puc-rio.br/35851/35851.PDF\" target=\"_blank\" title=\"https://www.maxwell.vrac.puc-rio.br/35851/35851.PDF\">https://www.maxwell.vrac.puc-rio.br/35851/35851.PDF</a></p>",
        "id": 157681100,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549450552
    },
    {
        "content": "<p>is <code>premise</code> still a keyword? Looks like it means <code>axiom</code> from context</p>",
        "id": 157681437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549450987
    },
    {
        "content": "<p>I thought it was a Prop-valued <code>variable</code>, but I'm not sure.</p>",
        "id": 157681581,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549451176
    },
    {
        "content": "<p>actually I think you're right</p>",
        "id": 157681985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549451659
    },
    {
        "content": "<p>\"When describing a proof of a theorem, one must be cautious to ensure said proof<br>\ndoes not contain errors or inconsistencies.\". This guy obviously has no idea about how mathematics works in practice. We're in a post-caution world now.</p>",
        "id": 157683022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549453059
    },
    {
        "content": "<p>A slightly unusual \"Lean in the wild\" story:</p>\n<p>My partner was out at an aerials (circus stuff) class this evening, talking to someone, who at some point in the conversation asked \"Coq or Lean\"? (Context: they worked in CS at a research institute here in Canberra, my partner mentioned to them I was interested in automated theorem proving.)</p>",
        "id": 158107947,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549968090
    },
    {
        "content": "<p>Now I'm disappointed they didn't ask about Isabelle. For me Australia is Isabelle territory.</p>",
        "id": 158113071,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1549974322
    },
    {
        "content": "<p>Everyone knows that mathematicians can't use Isabelle because it doesn't have dependent types?</p>",
        "id": 158113155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974397
    },
    {
        "content": "<p>I gave a talk in Cambridge two weeks ago and at the end of it Larry Paulson told one of his post-docs to go away and define a scheme in Isabelle, to prove it could be done. When he'd left I told the post-doc that I'd met people who were skeptical.</p>",
        "id": 158113182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974444
    },
    {
        "content": "<p>Or, at least, skeptical that you could do it whilst remaining sane.</p>",
        "id": 158113208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974478
    },
    {
        "content": "<p>set theory doesn't have dependent types either...</p>",
        "id": 158113213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974482
    },
    {
        "content": "<p>yeah but look at the set theorists.</p>",
        "id": 158113256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974491
    },
    {
        "content": "<p>Set theory probably doesn't have schemes either <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 158113264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549974508
    },
    {
        "content": "<p>Wait -- you can basically make dependent types in set theory, right?</p>",
        "id": 158113270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974518
    },
    {
        "content": "<p>being a de facto foundation for pen-and-paper maths?</p>",
        "id": 158113272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974521
    },
    {
        "content": "<p>you can, that's kind of the point</p>",
        "id": 158113294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974543
    },
    {
        "content": "<p>Most of analysis works in HOL.</p>",
        "id": 158113306,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1549974553
    },
    {
        "content": "<p>set theory doesn't really have types at all, but you can reconstruct it all</p>",
        "id": 158113318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974564
    },
    {
        "content": "<p>An example of a dependent type is a function which Johan will have seen, which takes a topological space and presheaf on it, and defines a function from the space sending a point to an element of the stalk of the presheaf at that point.</p>",
        "id": 158113327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974579
    },
    {
        "content": "<p>as long as you can make a big enough type you can do most of the same things in HOL</p>",
        "id": 158113335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974592
    },
    {
        "content": "<p>This is manifestly a dependent type, because the target depends on the source.</p>",
        "id": 158113339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974593
    },
    {
        "content": "<p>you just can't call it a dependent type</p>",
        "id": 158113395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974605
    },
    {
        "content": "<p>However in Hartshorne he just says \"now let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> be the disjoint union of all the stalks, and define a function from X to Y...\"</p>",
        "id": 158113410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974615
    },
    {
        "content": "<p>in set theory a function from X to Y is just a set</p>",
        "id": 158113424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974641
    },
    {
        "content": "<p>no dependent types here</p>",
        "id": 158113429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974648
    },
    {
        "content": "<p>doesn't matter how fancy X and Y are</p>",
        "id": 158113436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974657
    },
    {
        "content": "<p>Can you do that in Isabelle? <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I've noticed that people do non-trivial analysis in this Isabelle thing. So what about schemes? Everyone seems to think it will be hell, apart from Larry.</p>",
        "id": 158113464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549974687
    },
    {
        "content": "<p>it's not pleasant to encode a function as a set when the foundation supports functions directly, but it can be done</p>",
        "id": 158113482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974720
    },
    {
        "content": "<p>and it has to be done this way when you can't find a suitable hack to make your dependent type less dependent</p>",
        "id": 158113532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549974744
    },
    {
        "content": "<p>I'm not sure I know enough about schemes to know how to write them down in HOL. You essentially need to relativize everything, i.e. make every definition relative to a set. As far as I understand it, for schemes the biggest advantage of dependent types is that we can ad hoc use the subtype of a open set. This is not possible in HOL.</p>",
        "id": 158116980,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1549978132
    },
    {
        "content": "<p><a href=\"https://plus.maths.org/content/pure-maths-crisis\" target=\"_blank\" title=\"https://plus.maths.org/content/pure-maths-crisis\">https://plus.maths.org/content/pure-maths-crisis</a></p>",
        "id": 161286814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553112854
    },
    {
        "content": "<p>Pretty cool, Kevin! I hope people read this.</p>",
        "id": 161292290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553116774
    },
    {
        "content": "<p>I understand from the \"pitch to journalists\" standpoint the 'crisis' story is great, and I fully appreciate that the mathematics literature is crap. Nevertheless, I think when talking to other mathematicians, I'd prefer to emphasise more the \"this is fun\" / \"this isn't quite helpful yet, but if you pitch in someday soon this is going to be an awesome tool\" / \"if you don't pay attention now you're going to be a dinosaur\" arguments.</p>",
        "id": 161292455,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553116871
    },
    {
        "content": "<p>We should rename this thread \"Kevin in the wild\" <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 161292658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553117022
    },
    {
        "content": "<p>I also think we should be careful with this \"crisis\" story. Insisting on this will probably only result in regular mathematicians thinking we are crackpots. And the general audience may also get the wrong message</p>",
        "id": 161292780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553117107
    },
    {
        "content": "<p>I did not write that article, someone who came to my talk wrote that article. But I did say the word \"crisis\".</p>",
        "id": 161296468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553119997
    },
    {
        "content": "<p>Semi-related: \"Death of Proof\", from 1993 Scientific American</p>",
        "id": 161297423,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1553120690
    },
    {
        "content": "<p><a href=\"https://blogs.scientificamerican.com/cross-check/the-horgan-surface-and-the-death-of-proof/\" target=\"_blank\" title=\"https://blogs.scientificamerican.com/cross-check/the-horgan-surface-and-the-death-of-proof/\">https://blogs.scientificamerican.com/cross-check/the-horgan-surface-and-the-death-of-proof/</a></p>",
        "id": 161297425,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1553120691
    },
    {
        "content": "<p>It is a decades-long crisis <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 161297485,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1553120743
    },
    {
        "content": "<p>\"A case in point was Andrew Wiles’s proof of Fermat’s last theorem. Only a handful of experts were qualified to evaluate the dense, 200-page proof when it first appeared. \"</p>\n<p>This is extremely misleading. I'm not even sure that it is true, but even if it is true, within a year or two of the proof appearing there was a very detailed survey article by Darmon, Diamond and Taylor explaining the proof which needed only the kind of background which a graduate student working in this area in algebraic number theory would have, so hundreds and maybe even thousands of people were able to verify the proof within a couple of years of it appearing.</p>",
        "id": 161298381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553121529
    },
    {
        "content": "<blockquote>\n<p>I also think we should be careful with this \"crisis\" story. Insisting on this will probably only result in regular mathematicians thinking we are crackpots. And the general audience may also get the wrong message</p>\n</blockquote>\n<p>I could give a far harsher talk where I point out various serious mistakes by prestigious people and then point to various recent extremely technical papers by these same people which I know because of insider information did not go through as rigorous a refereeing process as they should have done and then flat out accuse the mathematical community of not having done its job correctly. I am not sure who is the crackpot but recent events in number theory have made me start to firmly believe that it's not me but them. I have thus far refrained from telling such stories in public, but believe you me this is why I am here in the formal proof verification community.</p>",
        "id": 161301248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553124289
    },
    {
        "content": "<p>There is also a follow-up to the blog post that <span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> linked: <a href=\"https://blogs.scientificamerican.com/cross-check/okay-maybe-proofs-arent-dying-after-all/\" target=\"_blank\" title=\"https://blogs.scientificamerican.com/cross-check/okay-maybe-proofs-arent-dying-after-all/\">https://blogs.scientificamerican.com/cross-check/okay-maybe-proofs-arent-dying-after-all/</a>. It seems to give a slightly different perspective...</p>",
        "id": 161391937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553199353
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/55417159/lean-define-product-of-r-ideal-and-r-module\" target=\"_blank\" title=\"https://stackoverflow.com/questions/55417159/lean-define-product-of-r-ideal-and-r-module\">https://stackoverflow.com/questions/55417159/lean-define-product-of-r-ideal-and-r-module</a></p>",
        "id": 162045390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553865622
    },
    {
        "content": "<p>This sort of thing has come up before</p>",
        "id": 162045402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553865634
    },
    {
        "content": "<p>There are people in our community who believe that because stackexchange is the goto place for programming questions, people should not be being redirected here for answers</p>",
        "id": 162045467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553865685
    },
    {
        "content": "<p>Is there an archive-related reason to keeping all the discussions here?</p>",
        "id": 162045722,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553865861
    },
    {
        "content": "<p>hey I wrote that code :P maybe I should answer</p>",
        "id": 162046006,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553866108
    },
    {
        "content": "<p>You are taking a break from Lean (-;</p>",
        "id": 162046021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553866127
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/55014276/how-to-remove-a-universal-quantifier-in-lean\" target=\"_blank\" title=\"https://stackoverflow.com/questions/55014276/how-to-remove-a-universal-quantifier-in-lean\">https://stackoverflow.com/questions/55014276/how-to-remove-a-universal-quantifier-in-lean</a> one two weeks ago</p>",
        "id": 162047748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553867448
    },
    {
        "content": "<p>I think it was <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> who was arguing that SO was a place where we should be building a fanbase and I trust his judgement on these matters</p>",
        "id": 162051222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553870215
    },
    {
        "content": "<p>... so the opposite of redirecting people here</p>",
        "id": 162051569,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553870425
    },
    {
        "content": "<p>Exactly. There was some discussion about this a while back. The point is that however well we attempt to archive this site, you can't just email the man at Google to say \"whenever someone googles for Lean questions, point them here and not at Stack Exchange please\". Have you noticed more and more people coming out of the woodwork recently asking random questions? This guy today is asking about modules over a ring -- they have a mathematical background and they are going to SO not here. It's something we need to think about.</p>",
        "id": 162055465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553872994
    },
    {
        "content": "<p><a href=\"https://twitter.com/JSEllenberg/status/1111248659063205899\" target=\"_blank\" title=\"https://twitter.com/JSEllenberg/status/1111248659063205899\">https://twitter.com/JSEllenberg/status/1111248659063205899</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/JSEllenberg/status/1111248659063205899\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/732745695644385285/4UEuEOYV_normal.jpg\"></a><p>Sweet, I’ve been replaced! <a href=\"https://t.co/RIYB2bCSd2\" target=\"_blank\" title=\"https://t.co/RIYB2bCSd2\">https://twitter.com/johannes2007/status/1111213919895539712</a></p><span>- Jordan Ellenberg (@JSEllenberg)</span></div></div>",
        "id": 162056898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553874031
    },
    {
        "content": "<p>Jordan tweeted to his 11.7K followers :D</p>",
        "id": 162056969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553874085
    },
    {
        "content": "<p>Did he just misunderstand what happened?</p>",
        "id": 162057017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553874117
    },
    {
        "content": "<p>I am pretty sure that he did not :-)</p>",
        "id": 162057156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553874203
    },
    {
        "content": "<p>he's just being a wag</p>",
        "id": 162057159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553874208
    },
    {
        "content": "<p>Following links brings <a href=\"https://t.co/qFMmlbCj9d\" target=\"_blank\" title=\"https://t.co/qFMmlbCj9d\">https://t.co/qFMmlbCj9d</a> which reminds us very much how little math is done in Lean compared to Isabelle...</p>",
        "id": 162060016,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553876293
    },
    {
        "content": "<p>They have apostol, we have Atiyah MacDonald, and I know which one I'd rather have</p>",
        "id": 162062540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553877972
    },
    {
        "content": "<p>Except we don't \"have  Atiyah-MacDonald\", right? We have part of chapter one if I followed correctly</p>",
        "id": 162075245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553886332
    },
    {
        "content": "<p>Well, by now we have Nakayama, Hilbert basis, tensor products.</p>",
        "id": 162075825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553886774
    },
    {
        "content": "<p>So that's also quite some stuff from other chapters</p>",
        "id": 162075839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553886784
    },
    {
        "content": "<p>We just had a wonderful installation of Kevin's talk here in Freiburg. With CS and maths in the audience (and a bunch of undergrads!). People kept Kevin busy for &gt;30 minutes after the talk.</p>",
        "id": 164213374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556229112
    },
    {
        "content": "<p><a href=\"https://twitter.com/johncarlosbaez/status/1127616867391066113\" target=\"_blank\" title=\"https://twitter.com/johncarlosbaez/status/1127616867391066113\">https://twitter.com/johncarlosbaez/status/1127616867391066113</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/johncarlosbaez/status/1127616867391066113\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/771587319119814656/n-P1G66L_normal.jpg\"></a><p>For more on Kevin Buzzard, Johan Commelin, and Patrick Massot's project to put the definition of perfectoid space into Lean, go here:\n\n<a href=\"https://t.co/MRvoXiWUcS\" target=\"_blank\" title=\"https://t.co/MRvoXiWUcS\">https://leanprover-community.github.io/lean-perfectoid-spaces/</a>\n\nThanks to <a href=\"https://twitter.com/HigherGeometer\" target=\"_blank\" title=\"https://twitter.com/HigherGeometer\">@HigherGeometer</a> for bringing this to my attention.  Follow him (David Roberts) for news on advanced math!</p><span>- John Carlos Baez (@johncarlosbaez)</span></div></div>",
        "id": 165472854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557681135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> there is some chat after Baez' tweet about your graph: <a href=\"https://twitter.com/JadeMasterMath/status/1127615276151783424\" target=\"_blank\" title=\"https://twitter.com/JadeMasterMath/status/1127615276151783424\">https://twitter.com/JadeMasterMath/status/1127615276151783424</a> . Do you do Twitter?</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/JadeMasterMath/status/1127615276151783424\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/996131821296406528/2YN-v8rf_normal.jpg\"></a><p><a href=\"https://twitter.com/johncarlosbaez\" target=\"_blank\" title=\"https://twitter.com/johncarlosbaez\">@johncarlosbaez</a> Do you know what the closeness of different definitions represents here?</p><span>- Jade Master (@JadeMasterMath)</span></div></div>",
        "id": 165483310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557698170
    },
    {
        "content": "<p><a href=\"https://twitter.com/XenaProject\" target=\"_blank\" title=\"https://twitter.com/XenaProject\">https://twitter.com/XenaProject</a> After several people in one day told me I needed to get on Twitter, I have got on Twitter. Apparently now I am just supposed to follow shedloads of people and retweet the things they tweet. This is what the world has become?? Patrick I stole your graph because it looks cool.</p>",
        "id": 166222517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558480968
    },
    {
        "content": "<p>Oh now there's a surprise: <a href=\"https://twitter.com/leanprover\" target=\"_blank\" title=\"https://twitter.com/leanprover\">https://twitter.com/leanprover</a></p>",
        "id": 166223077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558481546
    },
    {
        "content": "<p>not a single tweet. sounds about right</p>",
        "id": 166223406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558481886
    },
    {
        "content": "<p>lots of followers though, haha</p>",
        "id": 166223525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558482047
    },
    {
        "content": "<p><a href=\"http://www.math.columbia.edu/~woit/wordpress/?p=11053\" target=\"_blank\" title=\"http://www.math.columbia.edu/~woit/wordpress/?p=11053\">http://www.math.columbia.edu/~woit/wordpress/?p=11053</a></p>",
        "id": 167330034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559677693
    },
    {
        "content": "<p>I commented, including inviting people here ...</p>",
        "id": 167331386,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559678855
    },
    {
        "content": "<p><a href=\"https://itp19.cecs.pdx.edu/accepted-papers/\" target=\"_blank\" title=\"https://itp19.cecs.pdx.edu/accepted-papers/\">https://itp19.cecs.pdx.edu/accepted-papers/</a>  <strong>5</strong> Lean papers at ITP, not bad</p>",
        "id": 167506016,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1559844309
    },
    {
        "content": "<p>Nice! How do you know which one is about Lean?</p>",
        "id": 167506715,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559844749
    },
    {
        "content": "<p>Guessing by Name. I was counting 4, but then Rob pointed out that Minchao's paper is also a Lean implementation.<br>\nThe concrete list:</p>\n<ul>\n<li><strong>Jeremy Avigad, Mario Carneiro and Simon Hudon.</strong> Data types as quotients of polynomial functors</li>\n<li><strong>Mario Carneiro.</strong> Formalizing computability theory via partial recursive functions</li>\n<li><strong>Minchao Wu and Rajeev Goré.</strong> Verified Decision Procedures for Modal Logics</li>\n<li><strong>Robert Y. Lewis, Johannes Hölzl and Sander Dahmen.</strong> Formalizing the Solution to the Cap Set Problem</li>\n<li><strong>Jesse Han and Floris van Doorn.</strong> A formalization of forcing and the consistency of the failure of the continuum hypothesis</li>\n</ul>",
        "id": 167507502,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1559845226
    },
    {
        "content": "<p>All papers have authors who are or have been at CMU</p>",
        "id": 167508502,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559845879
    },
    {
        "content": "<p>I see Cody Roux has a paper too. Wasn't he also working with Lean?</p>",
        "id": 167509155,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559846290
    },
    {
        "content": "<p>The paper seams to refering to this Coq project: <a href=\"https://github.com/slasser/vermillion\" target=\"_blank\" title=\"https://github.com/slasser/vermillion\">https://github.com/slasser/vermillion</a></p>",
        "id": 167509266,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1559846380
    },
    {
        "content": "<p>That answers my question</p>",
        "id": 167509407,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559846438
    },
    {
        "content": "<p>Did you see <a href=\"https://www21.in.tum.de/~wimmers/proofground/\" target=\"_blank\" title=\"https://www21.in.tum.de/~wimmers/proofground/\">https://www21.in.tum.de/~wimmers/proofground/</a>? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> we need you!</p>",
        "id": 167512442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559848071
    },
    {
        "content": "<p>You want me to write a proof problem or play the game?</p>",
        "id": 167512669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559848198
    },
    {
        "content": "<p>I once managed to get a problem onto the IMO!</p>",
        "id": 167513238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559848536
    },
    {
        "content": "<p>I quite like the idea of coming up with some problems.</p>",
        "id": 167513259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559848557
    },
    {
        "content": "<p>We need you to get Lean to win the contest!</p>",
        "id": 167513921,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559848954
    },
    {
        "content": "<p>Now you know Kevin will submit problems, you can train on sample Langlands program riddles.</p>",
        "id": 167513960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559848990
    },
    {
        "content": "<p>is kevin going to trick me into solving langlands conjecture or something?</p>",
        "id": 167514300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559849195
    },
    {
        "content": "<p>that would be good</p>",
        "id": 167514309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559849205
    },
    {
        "content": "<p>Maybe tricking you to solving 3x+1 would be easier</p>",
        "id": 167514315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559849212
    },
    {
        "content": "<p>I need to suggest defining Lebesgue integral</p>",
        "id": 167514398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559849266
    },
    {
        "content": "<p>defining the real lebesgue integral (by breaking into positive and negative parts) would probably be a half hour project given the ennreal integral</p>",
        "id": 167514794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559849522
    },
    {
        "content": "<p>Do we really need this contest to get it done then?</p>",
        "id": 167514886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559849590
    },
    {
        "content": "<p>It's not in mathlib because it's overcomplicated and worthless</p>",
        "id": 167514903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559849608
    },
    {
        "content": "<p>but it's not hard to do</p>",
        "id": 167514914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559849617
    },
    {
        "content": "<p>How can it be half an hour and overcomplicated?</p>",
        "id": 167515176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559849802
    },
    {
        "content": "<p>The only question <a href=\"https://en.wikipedia.org/wiki/Martin_Hairer\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Martin_Hairer\">Martin Hairer</a> ever asks me about Lean is \"have you guys got the <a href=\"https://en.wikipedia.org/wiki/Gaussian_measure\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Gaussian_measure\">Gaussian measure</a> yet?\"</p>",
        "id": 167515271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559849883
    },
    {
        "content": "<p>So someone who knows what it is could do that at some point, so I could finally tell him yes and we could find out what Q2 is</p>",
        "id": 167515334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559849965
    },
    {
        "content": "<p>I think at this point it just needs typing in</p>",
        "id": 167515557,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559850128
    },
    {
        "content": "<p>Let me return to the main topic of this thread today (Lean papers in ITP). It's probably obvious to computer scientists, but I prefer to write it just in case. As was pointed out to the perfectoid team, forgetting to write that Lean is developed at Microsoft research is not helping to keep Lean funded. So everybody should make sure their papers and slides mention Microsoft research.</p>",
        "id": 167515955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559850454
    },
    {
        "content": "<p>I think that's one of the things <span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> is working on (gaussian measure)</p>",
        "id": 167515956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559850455
    },
    {
        "content": "<p>Is there any effort to collect and catalog copies of all Lean papers? I would be willing to maintain a bibtex bibliography of papers. One of the key problems of doing \"independent research\" (as I am) is that papers get locked behind paywalls or lost due to authors leaving the field.</p>",
        "id": 167531761,
        "sender_full_name": "Tim Daly",
        "timestamp": 1559863241
    },
    {
        "content": "<p>We have the website at <a href=\"https://leanprover-community.github.io/\" target=\"_blank\" title=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a> that isn't doing anything beyond hosting the Zulip archive right now. This would be a good place to collect mathlib-based papers.</p>",
        "id": 167533831,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559865751
    },
    {
        "content": "<p>A 0-th level try is here: <a href=\"http://axiom-developer.org/leanbib.tex\" target=\"_blank\" title=\"http://axiom-developer.org/leanbib.tex\">http://axiom-developer.org/leanbib.tex</a> </p>\n<p>I don't have write access to the leanprover github. It would be nice to host copies of the papers there also.</p>",
        "id": 167533949,
        "sender_full_name": "Tim Daly",
        "timestamp": 1559865907
    },
    {
        "content": "<p>Who controls this website?</p>",
        "id": 167536260,
        "sender_full_name": "Tim Daly",
        "timestamp": 1559869071
    },
    {
        "content": "<p>I think the leanprover-community maintainers all have access, but Rob set it up</p>",
        "id": 167536517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559869407
    },
    {
        "content": "<p>Would you like write access to mathlib? We give it out to whoever wants it</p>",
        "id": 167536597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559869480
    },
    {
        "content": "<p>I'd like write access to someplace where people would expect to find a lean bibliography (e.g. a link on the leanprover-community page. Anybody with write access could then add bibliographic entries to their (or other's) papers. A central resource for finding biblio links would make it easier to cite papers. A central repository of copies of the papers would mean that your bibliography could also include a hyperlink.</p>",
        "id": 167536948,
        "sender_full_name": "Tim Daly",
        "timestamp": 1559869886
    },
    {
        "content": "<p>You can make a pull request to the leanprover-community repo. (<a href=\"https://github.com/leanprover-community/leanprover-community.github.io\" target=\"_blank\" title=\"https://github.com/leanprover-community/leanprover-community.github.io\">https://github.com/leanprover-community/leanprover-community.github.io</a>)</p>",
        "id": 167537662,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559870813
    },
    {
        "content": "<p>I'm a little hesitant to hand out write access, because accidental changes to the archive part of the site might break the auto-updates.</p>",
        "id": 167537681,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559870862
    },
    {
        "content": "<p>In theory I've created a correct pull request.</p>",
        "id": 167540065,
        "sender_full_name": "Tim Daly",
        "timestamp": 1559873914
    },
    {
        "content": "<blockquote>\n<p>I commented, including inviting people here ...</p>\n</blockquote>\n<p>I note that a discussion began in the comments at <a href=\"http://www.math.columbia.edu/~woit/wordpress/?p=11053\" target=\"_blank\" title=\"http://www.math.columbia.edu/~woit/wordpress/?p=11053\">Woit's blog</a> .</p>\n<p>I regard this sort of thing (online chat) as not unimportant. I have had over 1000 blog views in the last thee days, just from the fact that he mentioned my blog (the wordpress software tells me that people are clicking on his link) so I think we can assume (if we didn't know already) that Woit's blog is very widely read. If people feel that they have something to say about the issues being discussed there and want to contribute, I can pretty much guarantee that there is an audience reading it.</p>\n<p>The reason they're not unimportant is that I am still convinced that the mathematical community is still overwhelmingly completely ignorant of software like Lean, and the more \"chat\" about it, the better.</p>",
        "id": 167554238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559892180
    },
    {
        "content": "<p>(note: I think mathlib has a lemma to simplify this <code>not_unimportant : ¬ unimportant ↔ important</code>)</p>",
        "id": 167572492,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559911089
    },
    {
        "content": "<p>I think this argument assumes the law of the excluded middle.</p>",
        "id": 167573758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559912146
    },
    {
        "content": "<p>I usually do assume the excluded middle. Have you been spending a lot of time with Kenny?</p>",
        "id": 167587409,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1559922000
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">unimportant</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">important</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"n\">def</span> <span class=\"n\">not_unimportant</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">unimportant</span> <span class=\"bp\">↔</span> <span class=\"n\">important</span>\n<span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">unimportant</span><span class=\"o\">,</span>\n                        <span class=\"k\">have</span>  <span class=\"bp\">¬</span><span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">trivial</span><span class=\"o\">),</span>\n                        <span class=\"k\">have</span> <span class=\"n\">unimportant</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n                        <span class=\"k\">have</span> <span class=\"bp\">¬</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">substr</span> <span class=\"err\">‹</span><span class=\"n\">unimportant</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"err\">›</span> <span class=\"o\">)</span> <span class=\"err\">‹</span><span class=\"bp\">¬</span> <span class=\"n\">unimportant</span><span class=\"err\">›</span><span class=\"o\">,</span>\n                        <span class=\"k\">show</span> <span class=\"n\">important</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"err\">‹</span><span class=\"bp\">¬</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"err\">›</span> <span class=\"err\">‹</span><span class=\"bp\">¬</span> <span class=\"n\">true</span><span class=\"err\">›</span> <span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">important</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">‹</span><span class=\"n\">important</span><span class=\"err\">›</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">not_unimportant</span>\n</pre></div>\n\n\n<p>i'm still not convinced nihilism is all that constructive though</p>",
        "id": 167589932,
        "sender_full_name": "matt rice",
        "timestamp": 1559923655
    },
    {
        "content": "<p>Leonardo de Moura at PLSE 2016: The Lean Theorem Prover <a href=\"https://www.youtube.com/watch?v=69ytTKfSSgc\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=69ytTKfSSgc\">https://www.youtube.com/watch?v=69ytTKfSSgc</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"69ytTKfSSgc\" href=\"https://www.youtube.com/watch?v=69ytTKfSSgc\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=69ytTKfSSgc\"><img src=\"https://i.ytimg.com/vi/69ytTKfSSgc/default.jpg\"></a></div>",
        "id": 167639172,
        "sender_full_name": "Tim Daly",
        "timestamp": 1559978565
    },
    {
        "content": "<p><a href=\"https://galoisrepresentations.wordpress.com/2019/06/12/harris-versus-buzzard/\" target=\"_blank\" title=\"https://galoisrepresentations.wordpress.com/2019/06/12/harris-versus-buzzard/\">https://galoisrepresentations.wordpress.com/2019/06/12/harris-versus-buzzard/</a></p>",
        "id": 168024921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560414553
    },
    {
        "content": "<p>Is that face-off on the 20th of June in Paris recorded by any chance?</p>",
        "id": 168028664,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1560418251
    },
    {
        "content": "<p>I don't know, but if it's in France it will probably be dubbed in French</p>",
        "id": 168028785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560418350
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=aZHbnQlFOn4\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=aZHbnQlFOn4\">https://www.youtube.com/watch?v=aZHbnQlFOn4</a> My general audience talk with a bunch of Lean in.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"aZHbnQlFOn4\" href=\"https://www.youtube.com/watch?v=aZHbnQlFOn4\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=aZHbnQlFOn4\"><img src=\"https://i.ytimg.com/vi/aZHbnQlFOn4/default.jpg\"></a></div>",
        "id": 168144927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560526150
    },
    {
        "content": "<p>re; Squares Tessellate  Tait, \"Truth and Proof: The Platonism of Mathematics\" <a href=\"http://logic.harvard.edu/EFI_Tait_PlatonismInMathematics.pdf\" target=\"_blank\" title=\"http://logic.harvard.edu/EFI_Tait_PlatonismInMathematics.pdf\">http://logic.harvard.edu/EFI_Tait_PlatonismInMathematics.pdf</a></p>",
        "id": 168149782,
        "sender_full_name": "Tim Daly",
        "timestamp": 1560529399
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://itp19.cecs.pdx.edu/accepted-papers/\" target=\"_blank\" title=\"https://itp19.cecs.pdx.edu/accepted-papers/\">https://itp19.cecs.pdx.edu/accepted-papers/</a>  <strong>5</strong> Lean papers at ITP, not bad</p>\n</blockquote>\n<p><a href=\"https://itp19.cecs.pdx.edu/invited-speakers/\" target=\"_blank\" title=\"https://itp19.cecs.pdx.edu/invited-speakers/\">https://itp19.cecs.pdx.edu/invited-speakers/</a></p>\n<p>So now 6 Lean talks ;-)</p>",
        "id": 169026015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561553671
    },
    {
        "content": "<p>Do you know what you'll talk about, or will you decide at 3 AM the night before?</p>",
        "id": 169027915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561554968
    },
    {
        "content": "<p>I was thinking of talking about what makes a mathematician tick.</p>",
        "id": 169029058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561555723
    },
    {
        "content": "<p><a href=\"https://twitter.com/derKha/status/1145412656632930304\" target=\"_blank\" title=\"https://twitter.com/derKha/status/1145412656632930304\">https://twitter.com/derKha/status/1145412656632930304</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/derKha/status/1145412656632930304\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1112971062399074305/jRGHUc-f_normal.png\"></a><p>the ideal lambda syntax is</p><span>- Sebastian Ullrich (@derKha)</span></div></div>",
        "id": 169356464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561933341
    },
    {
        "content": "<p>I use \\mapsto inside an expression.</p>",
        "id": 169356856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561934250
    },
    {
        "content": "<p>I don't like the idea that there would be significant notational differences between  for all and lambda. I think we shouldn't have a completely different syntax for each binder. If we pick <code>.</code>, we should use it for <code>forall</code>, <code>exists</code>, etc</p>",
        "id": 169356947,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1561934424
    },
    {
        "content": "<blockquote>\n<p>One of Lean's syntactic idiosyncrasies is the use of a comma separator in lambdas and other binders.</p>\n</blockquote>\n<p>one of my reviewers complained about this exact thing:</p>\n<div class=\"codehilite\"><pre><span></span>How is this tuple parsed?  For me it looks like a 5-uple!\n  Apparently, Lean has some magic binding rules where the comma gets a\n  different binding strength if it was preceded by a λ!? ...\n  [What were the designers of Lean thinking here??]\n</pre></div>\n\n\n<p>in retrospect, it is indeed hilarious:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"kn\">check</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pSet</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">bSet</span> <span class=\"err\">𝔹</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span><span class=\"n\">A</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"err\">⊤</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 169356998,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1561934542
    },
    {
        "content": "<p>Yeah, I also noticed how crazy/ambiguous-looking the <code>, , ,</code> syntax is when trying to explain some Lean code to a non-Lean user</p>",
        "id": 169357257,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561935218
    },
    {
        "content": "<p>But I don't have a Twitter account so I don't get a vote <span aria-label=\"not allowed\" class=\"emoji emoji-1f6ab\" role=\"img\" title=\"not allowed\">:not_allowed:</span> <span aria-label=\"bird\" class=\"emoji emoji-1f426\" role=\"img\" title=\"bird\">:bird:</span></p>",
        "id": 169357297,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561935286
    },
    {
        "content": "<p>Yeah, I can't vote either. But the traditional separator is the period, so I'd vote for that. And it should also be used for all the other logical quantifiers, like Simon mentioned.</p>",
        "id": 169359102,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1561938830
    },
    {
        "content": "<p>if we're thinking outside the box syntaxwise, a lot of people wouldn't mind having the Greek letter λ available as a variable name</p>",
        "id": 169359506,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561939405
    },
    {
        "content": "<p>from the perspective, <code>\\mapsto</code> doesn't use a letter so that frees up lambda but it does use an arrow which we always seem to run out of. Plus, my aforementioned point about homogeneity</p>",
        "id": 169359822,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1561940046
    },
    {
        "content": "<p>there are also some alternative Unicode lambdas (see under \"Mathematical Lambda\" at <a href=\"https://en.wikipedia.org/wiki/Lambda\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Lambda\">https://en.wikipedia.org/wiki/Lambda</a>) but I don't know how well supported they are</p>",
        "id": 169360011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561940505
    },
    {
        "content": "<p>We could keep the same lambda for functional abstractions and let people find other unicode lambdas for their local purposes</p>",
        "id": 169360746,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1561942125
    },
    {
        "content": "<p>I would actually prefer to use backslash than unicode lambda (but with lambda available as alternate notation). It would be nice if the core syntax didn't use so much unicode, since this makes it difficult for those that don't want to use a lean-approved editor</p>",
        "id": 169363277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561947133
    },
    {
        "content": "<p>Does that issue arise often?</p>",
        "id": 169363333,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1561947252
    },
    {
        "content": "<p>Well, maybe we don't hear those users, because they don't even consider Lean atm...</p>",
        "id": 169363339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561947282
    },
    {
        "content": "<p>Is <code>.\\</code> a faithful ASCII rendition of lambda?</p>",
        "id": 169363341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561947295
    },
    {
        "content": "<p><code>.\\ x. e</code> <span aria-label=\"scream cat\" class=\"emoji emoji-1f640\" role=\"img\" title=\"scream cat\">:scream_cat:</span></p>",
        "id": 169363351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561947318
    },
    {
        "content": "<p>Btw, I would be a fan of having infix <code>\\mapsto</code> available. It's used all over the place in maths, so it doesn't feel like \"sacrificing\" an arrow.</p>",
        "id": 169363399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561947377
    },
    {
        "content": "<p>Yeah --- I'd be pretty upset seeing someone use \\mapsto to mean anything else, so arguably it's already taken.</p>",
        "id": 169363414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561947439
    },
    {
        "content": "<p>I would be happy to see \\mapsto, although it might be tricky to parse</p>",
        "id": 169363728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561948036
    },
    {
        "content": "<p>ATTACK OF ZE SEMICOLONS</p>",
        "id": 169363972,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1561948554
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/commit/5c4ec3082099a7e1b008ced0db162c7cac16663a\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/commit/5c4ec3082099a7e1b008ced0db162c7cac16663a\">https://github.com/leanprover/lean4/commit/5c4ec3082099a7e1b008ced0db162c7cac16663a</a></p>",
        "id": 169363973,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1561948555
    },
    {
        "content": "<p>Sigh. I wish there weren't so many meaningless syntax changes. I don't really care what the syntax is, but I like consistency and these changes should be considered in the light of all the people that will have to learn the new syntax. I hope there is at least a rationale posted for all these things at some point</p>",
        "id": 169364165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561948951
    },
    {
        "content": "<p>Guy Steele on logic notation: <a href=\"https://www.youtube.com/watch?v=dCuZkaaou0Q\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=dCuZkaaou0Q\">https://www.youtube.com/watch?v=dCuZkaaou0Q</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"dCuZkaaou0Q\" href=\"https://www.youtube.com/watch?v=dCuZkaaou0Q\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=dCuZkaaou0Q\"><img src=\"https://i.ytimg.com/vi/dCuZkaaou0Q/default.jpg\"></a></div>",
        "id": 169364832,
        "sender_full_name": "Tim Daly",
        "timestamp": 1561950360
    },
    {
        "content": "<p>For example, does [x/y]e mean substitute x for y in e or substitute y for x in e? Guy did a survey.</p>",
        "id": 169365029,
        "sender_full_name": "Tim Daly",
        "timestamp": 1561950726
    },
    {
        "content": "<blockquote>\n<p>I would actually prefer to use backslash than unicode lambda (but with lambda available as alternate notation). It would be nice if the core syntax didn't use so much unicode, since this makes it difficult for those that don't want to use a lean-approved editor</p>\n</blockquote>\n<p>there are non-unicode alternatives for lambda, though? Just like coq, I think you can type <code>fun</code> or <code>assume</code> for lambda, and so forth. The implication arrow is the very awesome <code>-&gt;</code>. I mean, you probably know this, so I'm not quite following.</p>",
        "id": 169367614,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1561955906
    },
    {
        "content": "<blockquote>\n<p>For example, does [x/y]e mean substitute x for y in e or substitute y for x in e? Guy did a survey.</p>\n</blockquote>\n<p>This issue is what confused me every single time I read or watched explanations about lambda-calculus.</p>",
        "id": 169379398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561972234
    },
    {
        "content": "<p>I'm very close to creating a Twitter account only for the purpose of voting here. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> wouldn't it make more sense to have a GitHub vote? You could created and issue with one message per proposition, and we can use the emoji reactions to vote. I think the period option is really awful. I don't know any language (I mean real language, not programming language) where period is used for anything else than ending a sentence. In what sense does <code>λ x. e</code>ends after <code>x</code>?!? Of course every mathematician would vote for <code>x ↦ e</code> but I'd be happy to keep <code>λ x, e</code> if it is important for CS people.</p>",
        "id": 169379751,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561972604
    },
    {
        "content": "<p>(x : nat, y : int) ↦ x + y</p>",
        "id": 169381079,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1561973934
    },
    {
        "content": "<p>The java compiler can parse that</p>",
        "id": 169381102,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1561973962
    },
    {
        "content": "<p>(I mean an isomorphic expression)</p>",
        "id": 169381111,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1561973977
    },
    {
        "content": "<p>Period is used in Isabelle. It took me a lot of time to get used to the comma in Lean, and in the end I think I prefer the period because the comma is already used to separate expressions in anonymous constructors. My point is rather that I would like to have two different symbols here, be it <code>. ,</code> or <code>, ;</code> say.</p>",
        "id": 169382876,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1561975738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The wording of the poll should imply that it isn't meant to be taken very seriously, nor will its outcome influence our decision</p>",
        "id": 169383259,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1561976270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I'm not convinced we should unnecessarily include syntax variations (ASCII alternatives are quite useful, OTOH). In practice, whatever syntax TPIL uses will be used by 95% of all users. But you're welcome to override the builtin notation in Lean 4 if you want to.</p>",
        "id": 169383799,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1561976843
    },
    {
        "content": "<p>What about using python's <code>λ x: e</code>? At least it's not a period</p>",
        "id": 169386807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561980275
    },
    {
        "content": "<p>we can make everybody unhappy and do <code>λx ↦ e</code></p>",
        "id": 169387109,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1561980645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> That looks dicey. To be sure everyone is unhappy, let's put the lambda at the end</p>",
        "id": 169423858,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562009194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'm not too wild about this possibility because <code>:</code> is also used for type annotations. <code>λ v : e : e</code> would be valid and possibly ambiguous. You could require brackets around <code>v : e</code> but I prefer those brackets to be optional</p>",
        "id": 169423987,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562009304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I think Sebastien didn't mean two syntaxes at the same time, but to have a syntax where the tuple \"comma\" is different from the binder \"dot\".</p>",
        "id": 169426428,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1562011346
    },
    {
        "content": "<p>While I would also prefer the \" fun x. t\" instead of \"fun x, t\" I think this would be another unnecessary syntax change.</p>",
        "id": 169426481,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1562011417
    },
    {
        "content": "<blockquote>\n<p>I think Sebastien didn't mean two syntaxes at the same time, but to have a syntax where the tuple \"comma\" is different from the binder \"dot\".</p>\n</blockquote>\n<p>Ah, I see.</p>",
        "id": 169426656,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1562011538
    },
    {
        "content": "<p>would it really be that difficult to (possibly automatically) convert the old syntax to a new syntax in all important lean resources? <br>\nare there many existing lean resources that cannot be easily converted?</p>",
        "id": 169427172,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1562011920
    },
    {
        "content": "<p>I like the period, but probably because it is common in the CS literature and I have gotten used to it. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> here in the US we write 3.1415... I guess you Europeans sometimes write 1.000.000 for one million.</p>",
        "id": 169427292,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1562011990
    },
    {
        "content": "<p>It is possible to get used to anything.</p>",
        "id": 169427399,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1562012053
    },
    {
        "content": "<p>The problem is that this isn't fully \"a free choice\", since some of these will eventually be published in papers and books. Hopefully the syntax can be understood by non-lean readers.</p>",
        "id": 169429271,
        "sender_full_name": "Tim Daly",
        "timestamp": 1562013505
    },
    {
        "content": "<p>No, we use <code>1 000 000</code>.</p>",
        "id": 169429286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562013527
    },
    {
        "content": "<p>This might not count as \"in the wild\" since it's from MSR, but: <a href=\"https://sf.snu.ac.kr/aliveinlean/\" target=\"_blank\" title=\"https://sf.snu.ac.kr/aliveinlean/\">https://sf.snu.ac.kr/aliveinlean/</a> <a href=\"https://sf.snu.ac.kr/publications/aliveinlean.pdf\" target=\"_blank\" title=\"https://sf.snu.ac.kr/publications/aliveinlean.pdf\">https://sf.snu.ac.kr/publications/aliveinlean.pdf</a></p>",
        "id": 171069447,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1563363271
    },
    {
        "content": "<p>ooh, if I have time, I want to check this out</p>",
        "id": 171123895,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1563403699
    },
    {
        "content": "<p>right now I'm researching how much work it would be to write a program that traverses Clang ASTs and feeds floating point expressions to Herbie, and then spit out the analysis. So maybe not directly related, but somewhat...</p>",
        "id": 171124083,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1563404004
    },
    {
        "content": "<p><a href=\"https://arxiv.org/abs/1907.07801\" target=\"_blank\" title=\"https://arxiv.org/abs/1907.07801\">https://arxiv.org/abs/1907.07801</a></p>",
        "id": 171238612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563524179
    },
    {
        "content": "<p>The relevant code seems to be here: <a href=\"https://github.com/NeilStrickland/itloc\" target=\"_blank\" title=\"https://github.com/NeilStrickland/itloc\">https://github.com/NeilStrickland/itloc</a></p>",
        "id": 171251977,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1563538544
    },
    {
        "content": "<blockquote>\n<p>In particular, we have implemented interaction with the lean theorem prover, whereby the export format of lean is used (via trepplein) to generate code in our implementation of HoTT. This allows us to start with a library for learning as well as a target for natural lannguage processing.</p>\n</blockquote>\n<p><a href=\"http://siddhartha-gadgil.github.io/ProvingGround/\" target=\"_blank\" title=\"http://siddhartha-gadgil.github.io/ProvingGround/\">http://siddhartha-gadgil.github.io/ProvingGround/</a></p>",
        "id": 171326712,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1563627820
    },
    {
        "content": "<p>I'd be interested in thoughts about the arrangement of code for this sort of thing.  I think it's desirable to have a static snapshot on the arxiv and a maintained repository on github.  Certainly some of the code on my github repository could move into mathlib.  We could have a policy and/or aspiration that all code supporting a published paper should move into mathlib.  Or we could have a separate repository for that purpose, but still under leanprover-community and set up with travis so we can maintain compatibility with mathlib.</p>",
        "id": 171419381,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1563791366
    },
    {
        "content": "<p>It's a little ambitious to expect everybody to keep their code up to date. An arxiv submission should contain git hashes of any dependent packages. Probably also a specific Lean version number too, in order to ensure reproducibility, maybe using Elan? Then even if the paper is read years later the code should still work without squiggly lines.</p>",
        "id": 171420435,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1563792509
    },
    {
        "content": "<p>It would be best if ArXiv would host everything needed to make a reproducible paper, but I can imagine the storage costs would be immense, especially for papers in physical science with large datasets... :/</p>",
        "id": 171420864,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1563793066
    },
    {
        "content": "<p>On The FOM (foundations of mathematics) mailing list there is a <a href=\"https://cs.nyu.edu/pipermail/fom/2019-July/021617.html\" target=\"_blank\" title=\"https://cs.nyu.edu/pipermail/fom/2019-July/021617.html\">short thread</a> about the NP = PSPACE problem. People are trying to formalize their claimed proof that NP = PSPACE in Lean:</p>\n<blockquote>\n<p>In order to avoid incomplete versions, I and my students,<br>\nare formalizing  our version in LEAN. Only after each relevant part is<br>\nformalized and checked there will be an article published it in arxiv</p>\n</blockquote>\n<p>According to Wikipedia, this claim is \"<a href=\"https://en.wikipedia.org/wiki/PSPACE#Relation_among_other_classes\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/PSPACE#Relation_among_other_classes\">widely suspected</a>\" to be false.</p>",
        "id": 172536503,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565037793
    },
    {
        "content": "<p>I wrote a short piece about Lean for the London Mathematical Society newsletter, and it has just appeared: <a href=\"https://www.lms.ac.uk/sites/lms.ac.uk/files/files/NLMS_484_for-web_0.pdf\" target=\"_blank\" title=\"https://www.lms.ac.uk/sites/lms.ac.uk/files/files/NLMS_484_for-web_0.pdf\">https://www.lms.ac.uk/sites/lms.ac.uk/files/files/NLMS_484_for-web_0.pdf</a>  (pages 32 to 36).</p>",
        "id": 174729173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567440838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Gijswijt's name is missing on p33</p>",
        "id": 174730222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567442095
    },
    {
        "content": "<p>Noo!</p>",
        "id": 174732526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567444987
    },
    {
        "content": "<p>:-(</p>",
        "id": 174732535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567444995
    },
    {
        "content": "<p>Well it's only missing once, it is there the second time, and it's also clearly a typo rather than me claiming that it's Ellenberg only because of the dangling \"and\".</p>",
        "id": 174732748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567445211
    },
    {
        "content": "<p>Oh! Gijswijt's name is in the version I sent them! So they have removed it for some reason -- as well as making the Lean code on p32 look a bit horrible (this is some png rescaling issue perhaps).</p>",
        "id": 174732788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567445280
    },
    {
        "content": "<p>Wow, that's some really good editing!</p>",
        "id": 174732948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567445428
    },
    {
        "content": "<p>The London Mathematical Society runs on a shoestring.</p>",
        "id": 174732996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567445522
    },
    {
        "content": "<p>Can they still fix it? Or is it already printed?</p>",
        "id": 174733059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567445579
    },
    {
        "content": "<p>I have no idea. I'll ask.</p>",
        "id": 174733081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567445615
    },
    {
        "content": "<p>It will be fixed online when people are back from holidays</p>",
        "id": 174849121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567569019
    },
    {
        "content": "<p>If minor edits are still relevant: \"It is just is a\" near the end of the first page</p>",
        "id": 174974997,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567691258
    },
    {
        "content": "<p>Thanks. The person who's making the changes is away until Monday so I believe I might still be able to get this fixed.</p>",
        "id": 174977912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567693182
    },
    {
        "content": "<p><a href=\"https://www.vice.com/en_us/article/8xwm54/number-theorist-fears-all-published-math-is-wrong-actually\" target=\"_blank\" title=\"https://www.vice.com/en_us/article/8xwm54/number-theorist-fears-all-published-math-is-wrong-actually\">https://www.vice.com/en_us/article/8xwm54/number-theorist-fears-all-published-math-is-wrong-actually</a></p>",
        "id": 176671369,
        "sender_full_name": "Olli",
        "timestamp": 1569513972
    },
    {
        "content": "<p>?? How did they get from \"I think there is a non-zero chance that some of our great castles are built on sand\" to \"Number Theorist Fears All Published Math Is Wrong\" ?? <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> this is the guy we were talking about at ITP.</p>",
        "id": 176671429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569514045
    },
    {
        "content": "<p>That's just a completely click-baity title which does not represent my views.</p>",
        "id": 176671458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569514075
    },
    {
        "content": "<p>Yep, I ran into it on Twitter posted by a non-mathematician, clearly it is clickbait and how they get their clicks and their ad revenue</p>",
        "id": 176671683,
        "sender_full_name": "Olli",
        "timestamp": 1569514214
    },
    {
        "content": "<p>“I’m suddenly concerned that all of published math is wrong because mathematicians are not checking the details, and I’ve seen them wrong before,” Buzzard told Motherboard while he was attending the 10th Interactive Theorem Proving conference in Portland, Oregon, where he gave the opening talk.</p>",
        "id": 176672284,
        "sender_full_name": "William Whistler",
        "timestamp": 1569514728
    },
    {
        "content": "<p>Is that a made-up quote?</p>",
        "id": 176672293,
        "sender_full_name": "William Whistler",
        "timestamp": 1569514739
    },
    {
        "content": "<p>How can I check? :-/ I was in a hotel room in Portland talking to him on the phone. It's not very good English, that's for sure.</p>",
        "id": 176672418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569514831
    },
    {
        "content": "<p>Hard at this point, if you don't remember or have a record. They might've rolled their question and your response into the quote, or something like that.</p>",
        "id": 176672639,
        "sender_full_name": "William Whistler",
        "timestamp": 1569514987
    },
    {
        "content": "<p>Well, we live and learn :-/</p>",
        "id": 176672671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569515010
    },
    {
        "content": "<p>Heh, it's not the worst thing Vice has ever published.</p>",
        "id": 176672676,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569515014
    },
    {
        "content": "<p>:-)</p>",
        "id": 176672689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569515021
    },
    {
        "content": "<p>Even \"arguing that we must begin to rely on AI to verify proofs\" is quite clickbaity. Not all software is AI, for heaven's sake.</p>",
        "id": 176672940,
        "sender_full_name": "William Whistler",
        "timestamp": 1569515175
    },
    {
        "content": "<p>But to be fair, Kevin does put a lot of software in the same basket, going so far as to ask \"Why isn't Lean smart enough to figure it out?\" inviting the classification of interactive provers as AI technology</p>",
        "id": 176675494,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569517144
    },
    {
        "content": "<p>I had the foresight to ask him to check back with me over any quotes he wanted to use. So at least I sound sane (if not nearly as exciting).</p>",
        "id": 176706638,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1569541493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Time for a rectification blogpost? <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 176718191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569559458
    },
    {
        "content": "<p>I'm not so much concerned about the general public, or clickbaity titles. More about the mathematical community that doesn't speak with you on a daily basis.</p>",
        "id": 176718516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569560127
    },
    {
        "content": "<p>I'm a bit snowed under at the minute, teaching starts next week, but I'll see what I can do</p>",
        "id": 176723700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569568394
    },
    {
        "content": "<blockquote>\n<p>I'm not so much concerned about the general public, or clickbaity titles. More about the mathematical community that doesn't speak with you on a daily basis.</p>\n</blockquote>\n<p>I think you're probably more concerned than I am :-) I think that when I was younger I would have been running around panicking, but now I understand the internet much better and it seems to me that most Lean stuff on the internet is sane, and then this one piece is a bit more extreme but it will just disappear into the general noise. I think much more interesting is Frank Calegari's claim that some humans completely understand the proof of Fermat's Last Theorem, so I wrote a blog post about that instead. What do you think <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ? I can't quite work out if you're being serious. I mention the Vice article a bit at the beginning.</p>\n<p><a href=\"https://xenaproject.wordpress.com/2019/09/27/does-anyone-know-a-proof-of-fermats-last-theorem/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2019/09/27/does-anyone-know-a-proof-of-fermats-last-theorem/\">https://xenaproject.wordpress.com/2019/09/27/does-anyone-know-a-proof-of-fermats-last-theorem/</a></p>",
        "id": 176737129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569583147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think the first paragraph of your blogpost settles it in a nice and relaxed way (-;</p>",
        "id": 176737924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569584012
    },
    {
        "content": "<p>But Frank hasn't provided a proof of his counterclaim. Not even a \"mathematical\" proof (-;</p>",
        "id": 176738428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569584552
    },
    {
        "content": "<p>I just ran into François Charles in the corridor and stopped me to tell me: \"I saw in newspapers that your collaborator says every maths is wrong\". He was smiling though.</p>",
        "id": 176749195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569593457
    },
    {
        "content": "<p>What can you do :-) Given that you yourself found omissions in Bourbaki, maybe all maths _is_ wrong :-)</p>",
        "id": 176749743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569593772
    },
    {
        "content": "<p>Of course François heard about this on Twitter. Did you put links to your blog post there?</p>",
        "id": 176749827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569593838
    },
    {
        "content": "<p>Yes.</p>",
        "id": 176750354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569594220
    },
    {
        "content": "<p>I think reporters generally run with quotes they think they need to drive views.   Being very measured in responses just means no news.</p>",
        "id": 176771067,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1569607946
    },
    {
        "content": "<p>My phone showed me this today <a href=\"https://www.popularmechanics.com/science/math/a29252622/is-math-wrong/\" target=\"_blank\" title=\"https://www.popularmechanics.com/science/math/a29252622/is-math-wrong/\">https://www.popularmechanics.com/science/math/a29252622/is-math-wrong/</a></p>",
        "id": 176791616,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1569623793
    },
    {
        "content": "<p>Good to see it mentions Lean!</p>",
        "id": 176824712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569674395
    },
    {
        "content": "<p>I guess my interest in proof checking stems from a very different thing, where we have a general proof that something is (unprovable? -- i dont want to say false), but in special cases can be proven true, the general cases tend to throw shade on the special case, and the special case tends to require a lot of setup... It's probably best if I just give an example...</p>\n<p>like the idea that nand has no inverse and loses information, but in the case where nand is the partial application of a reversible universal logic gate like a fredkin gate, or a toffoli gate the complete gate has an inverse.  I like proof checkers for their ability to convey all these special assumptions, when trying to convey a counterintuitive truth ... This is somewhat the dual of Kevin's what if its false when we think it true I guess.</p>",
        "id": 176831013,
        "sender_full_name": "matt rice",
        "timestamp": 1569685943
    },
    {
        "content": "<p>kevin just hit # 1 on hacker news: <a href=\"https://news.ycombinator.com/item?id=21107706\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=21107706\">https://news.ycombinator.com/item?id=21107706</a></p>",
        "id": 176879121,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1569776607
    },
    {
        "content": "<p>Amazing what a clickbait headline can do!</p>",
        "id": 176888300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569791838
    },
    {
        "content": "<p>TPIL is <a href=\"https://github.com/leanprover-community/mathlib/issues/12\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/12\">#12</a>! That's a <em>good thing</em>.</p>",
        "id": 176888309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569791872
    },
    {
        "content": "<p>What I am manifestly relieved about is that most people actually seem to be completely avoiding saying \"this guy is clearly an idiot, clearly all published maths is not wrong\". It's like today's kids are somehow immune to the clickbait, or forget it instantly or something.</p>",
        "id": 176888532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569792238
    },
    {
        "content": "<p>Oh! Because of hacker news rules, apparently they changed the headline from the clickbaity one to \"Number theorist fears many proofs widely considered to be true are wrong \". That's closer to the truth, but perhaps \"some proofs\" would be better.</p>",
        "id": 176888997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569793058
    },
    {
        "content": "<p>The whole thing is great. People are talking about Lean, people are talking about theorem provers, this is just what we need to get young people interested in the area.</p>",
        "id": 176889193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569793432
    },
    {
        "content": "<p>This comment from Hacker News is quite a marvel:</p>\n<blockquote>\n<p>IMO the final paper had too much technical jargon which was convoluting some simple concepts.</p>\n<p>This is symptomatic of IMHO the biggest single problem with the world of mathematics today. This discipline should be about developing ideas based on rigorous foundations and logic, which is a useful and important purpose. Once you have understood those ideas, even \"advanced\" results often seem quite simple and intuitive, and we can take that understanding and apply it to other work if helps us to make useful progress. However, the amount of needlessly obscure terminology, poor notation and just plain bad writing in formal papers make the whole field absurdly inaccessible, even to many who might have no trouble understanding the underlying concepts and important results.</p>\n<p>Just imagine what would happen if we tried to write engineering specs or software the way postgraduate mathematics research is done. We'd be trying to debug source code where every identifier was a single character, taken from one of three or four different alphabets, with several of them looking similar enough to mistake one for another, with a bunch of combining accent modifiers on top that were used to fundamentally change the semantics of the program, interspersed with comments by someone who needs a remedial class in basic writing skills, full of technical terminology that is defined in terms of other technical terminology from other software packages, except that sometimes the meaning is subtly different in this context but that isn't noted anywhere on the screen at the time, resulting in needing to spend half an hour doing a depth-first-search of all the definitions only to find that a function whose only identifier is the name of the developer who wrote the second version (because the first person to work on it already has another function bearing their name) is actually equivalent to what a programmer would write as</p>\n<div class=\"codehilite\"><pre><span></span>const DAYS_IN_WEEK := 7\n</pre></div>\n\n\n<p>I write this as someone who studied mathematics to a high level and has touched on the field many times since in connection with heavily mathematical software development. It's the worst sort of closed-world gate-keeping, and we could do so much better, but sadly inertia and vested interests are not our friends in this matter.</p>\n</blockquote>\n<p><a href=\"https://news.ycombinator.com/item?id=21109440\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=21109440\">https://news.ycombinator.com/item?id=21109440</a></p>",
        "id": 176915006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569834839
    },
    {
        "content": "<p>Mathematica won in the computer algebra field for a simple reason. It had the best documentation. The learning curve for any computer algebra system is quite steep and all of the other systems relied on \"learn by trial\".</p>\n<p>Now look at Lean. Take, for example, group.lean. It is a wall of text. Finding a theorem relies on odd names like mul_eq_of_eq_inv_mul. The whole of the \"communication\" with people, such as it is, is contained in that name. Programmers made the mistake of this \"pile of sane\" (POS) approach, witness the \"src\", \"inc\", \"tst\", and (usually empty) \"doc\" directories with \"semantic naming\" like parser.c, <a href=\"http://SMTFuns.pl\" target=\"_blank\" title=\"http://SMTFuns.pl\">SMTFuns.pl</a>, or <a href=\"http://catsim.ml\" target=\"_blank\" title=\"http://catsim.ml\">catsim.ml</a>.</p>\n<p>Suppose, instead, there was a group theory textbook in latex. The textbook explains the ideas in natural language. It contains all of the lemmas in group.lean, each  one with a paragraph or so of explanation. The lemmas are in named \"chunks\", basically a verbatim block with a name. Lemmas should only be accepted when they contain a paragraph or section in the group theory volume.</p>\n<p>Now you have a book, with a table of contents, a table of equations, chapters, sections, paragraphs, an index, and a bibliography, all hyperlinked and searchable. Since each lemma is in a named verbatim chunk you can extract any or all lemmas automatically, letting the compiler do it. You can find relevant lemmas by looking in the table of contents or the index.</p>\n<p>Code to extract a named chunk is 170 lines of C. Axiom already uses this technology.</p>\n<p>The idea is called \"literate programming\" (Knuth). You write for people, and incidently, write for the machine. And, as a benefit, you get a book to publish, which counts on your resume rather than a file of code that doesn't.</p>",
        "id": 176921499,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841102
    },
    {
        "content": "<p>\"pile of sand\" (POS) ...</p>",
        "id": 176921615,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841217
    },
    {
        "content": "<p>I'm quite happy that 20 pesky little trivial lemmas all fit on one screen. If all of those trivialities came with a paragraph of documentation, I think it would be harder to find something for me.</p>",
        "id": 176921672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841271
    },
    {
        "content": "<p>Mathlib is currently in the process of documenting definitions and major theorems</p>",
        "id": 176921691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841299
    },
    {
        "content": "<p>How long have you been using Lean?</p>",
        "id": 176921699,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841313
    },
    {
        "content": "<p>But I think one can go overboard on the other side</p>",
        "id": 176921701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841315
    },
    {
        "content": "<p>There was a time when I had not yet used Lean for a very long time...</p>",
        "id": 176921749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841335
    },
    {
        "content": "<p>Documentation is important. But it's not the reason why mathematicians aren't jumping on board. It simply isn't</p>",
        "id": 176921777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841380
    },
    {
        "content": "<p>It took me 10 courses and 3 years to be able to read current research papers, many of which contain whole pages of nothing but greek rules.</p>",
        "id": 176921793,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841399
    },
    {
        "content": "<p>And if I ask the mathematician in the office next to me why he doesn't use Lean, he'll ask me... do you have the K-theory of coherent sheaves on a scheme?</p>",
        "id": 176921869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841447
    },
    {
        "content": "<p>If I ask someone on the floor below me, they'll want to know if special holonomy groups are in our library...</p>",
        "id": 176921889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841484
    },
    {
        "content": "<p>Etc...</p>",
        "id": 176921892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841486
    },
    {
        "content": "<p>I'm one of the authors of Axiom. Axiom was a commercial competitor to Mathematca and Maple. It was considered \"one of the big 3\". I got a lot of feedback from professors who taught using computer algebra, including those who contributed to Axiom. Documentation mattered for teaching and students kept using what they knew.</p>",
        "id": 176921925,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841525
    },
    {
        "content": "<p>That's the main obstruction. The fact that we don't have étale cohomology groups, or even just the discriminant of a number field, or whatever.</p>",
        "id": 176921960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841537
    },
    {
        "content": "<p>Take a calc textbook. Shake out all of the equations and paste them on index cards. Throw away the words. Now teach calculus from the index cards. The group.lean file is \"just the equations\", i.e. just the index cards. If all of mathematics were reduced to a wall of 200-character named lemmas I'm not sure it would get much use.</p>",
        "id": 176922131,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841702
    },
    {
        "content": "<p>I don't know who's right. My experience talking to mathematicians is the same as Johan -- they're not interested because the things they do aren't there. However in 5 years' time when they <em>are</em> there, documentation will most definitely be an issue. Whether it contributes now or not is something I don't know. I am trying to write documentation for maths undergraduates, but progress is slow because I have a busy job :-/</p>",
        "id": 176922240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569841837
    },
    {
        "content": "<p>I can read group.lean because I've done group theory for years. I have no idea what the other lemmas mean or how to use them.</p>",
        "id": 176922262,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569841866
    },
    {
        "content": "<p>Take an introductory textbook on group theory. Shake out all the theorems and lemmas and paste them on index cards. Throw away all the words. Now try to find a corresponding entry for each index card in <code>group.lean</code>. For &gt;50% of the index cards, you won't find an entry. On the other hand, for 90% of the lines in <code>group.lean</code>, you won't find an index card...</p>",
        "id": 176922281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569841883
    },
    {
        "content": "<p>I'm suggesting that the \"library\" format for lean is books, not files. Of course the group theory \"book\" would be written to hold the current lemmas surrounded by paragraphs (useful for word searching). New lemmas would update the book. I'm not suggesting \"decorating\" an existing group theory book with the lemmas.</p>",
        "id": 176922399,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842013
    },
    {
        "content": "<p>Latex was written in lterate programming style in the 70s and is still maintained, mostly because you can read and understand it. Almost every program I've written in the last half century is gone, despite being quite useful for current things, such a remotely monitoring data centers.</p>",
        "id": 176922570,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842171
    },
    {
        "content": "<p>If only Knuth were to write an ITP...</p>",
        "id": 176922582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842217
    },
    {
        "content": "<p>Or a text that explains BDDs for solvers :-)</p>",
        "id": 176922613,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842261
    },
    {
        "content": "<p>Tim, how is Lean different from Coq, Isabelle, whatever? Why are there more pure mathematicians in this small and young community than in the others?</p>",
        "id": 176922689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842312
    },
    {
        "content": "<p>The documentation problem isn't a problem now. It shows up as a problem once the origianl authors leave the project. Witness the tens of thousands of dead projects on github, sourceforge, and savannah.</p>",
        "id": 176922740,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842335
    },
    {
        "content": "<p>Well, Benjamin Pierce taught COQ courses in Oregon, which is where I started learning it. And he has a textbook which I can use.</p>",
        "id": 176922804,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842403
    },
    {
        "content": "<p>Many math papers and textbooks are \"dead\" in that sense. Also, it doesn't answer my question.</p>",
        "id": 176922833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842420
    },
    {
        "content": "<p>The average math paper from &lt;1950s is unreadable for us.</p>",
        "id": 176922850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842443
    },
    {
        "content": "<p>Yeah, I struggled with Frege's papers due to notation</p>",
        "id": 176922858,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842465
    },
    {
        "content": "<p>One clear problem is that probably 5% to at most 10% (just a guess, an authority can jump in if they please) of the lemmas in <code>mathlib</code> are actually even stated in a mathematics book. At the very least, in mathlib proofs of important and hard, \"real\", propositions and theorems are often chopped up in order to remain manageable. I think just the act of <em>stating</em> many of the broken-up pieces as they are phrased in lean would be totally unbearable to read in a mathematics book. Imagine, for example, such a direct translation of <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/sylow.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/sylow.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/sylow.lean</a><br>\nSo much is \"obvious\". That's not even to say it's not worth checking---it just stands in the way of understanding.</p>",
        "id": 176922918,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569842542
    },
    {
        "content": "<p>But then I've struggled with recent papers for the same reason (look up Guy Steele's talk on logic notation)</p>",
        "id": 176922926,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842560
    },
    {
        "content": "<p>Keeley, lemmas are where proofs get creative. A few words about why it is needed gives a clue but a few lines of Lean does not.</p>",
        "id": 176923014,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842663
    },
    {
        "content": "<p>Tim, that's simply not true</p>",
        "id": 176923024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842682
    },
    {
        "content": "<p>There are dozens of lemmas in the library that are exactly the opposite of being creative</p>",
        "id": 176923042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842708
    },
    {
        "content": "<p>They are there only to handhold the system</p>",
        "id": 176923047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842719
    },
    {
        "content": "<p>I think you mean \"thousands\"</p>",
        "id": 176923051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842725
    },
    {
        "content": "<p>Usually, page of code after a new definition is just scaffolding. Stuff that mathematicians don't even unconsciously think about when writing a detailed introductory text.</p>",
        "id": 176923134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842799
    },
    {
        "content": "<p>I would say not that they are handholding for the system, rather they are there to bring the system up to a basic level of competence, so that you don't have to worry about extremely piddling details for your <em>next</em> project</p>",
        "id": 176923142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842807
    },
    {
        "content": "<p>Right, that's a better way of putting it</p>",
        "id": 176923146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569842821
    },
    {
        "content": "<p>Well, it will then grow into the millions if Kevin Buzzard's dream comes true.</p>",
        "id": 176923149,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842823
    },
    {
        "content": "<p>\"mathlib does the piddling details so you don't have to\"</p>",
        "id": 176923154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842827
    },
    {
        "content": "<p><code>group.lean</code> is not group theory. It is basic highschool algebra</p>",
        "id": 176923182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842880
    },
    {
        "content": "<p>nothing in that file has a name in math</p>",
        "id": 176923228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842902
    },
    {
        "content": "<p>it is not representative of all of math</p>",
        "id": 176923237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842929
    },
    {
        "content": "<p>Does it have an \"idea\" in math? And is that \"idea\" properly communicated in 16 characters?</p>",
        "id": 176923258,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569842960
    },
    {
        "content": "<p>although coming from a CAS background you might become disproportionately interested in that material</p>",
        "id": 176923270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569842977
    },
    {
        "content": "<p>but mathematicians are looking much further afield</p>",
        "id": 176923302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843002
    },
    {
        "content": "<p>no, it does not have an \"idea\"</p>",
        "id": 176923347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843022
    },
    {
        "content": "<p>its meaning is completely described by the statement of the theorem itself</p>",
        "id": 176923360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843037
    },
    {
        "content": "<p><code>a * (a^-1 * b) = b</code> is just that</p>",
        "id": 176923374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843056
    },
    {
        "content": "<p>you can give the property a name if you want, but it's just a thing that is true</p>",
        "id": 176923392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843077
    },
    {
        "content": "<p>but even if it does grow to millions, most of those lemmas wouldn't benefit much from extensive documentation. <br>\ni suppose the normal workflow is the following: you encounter a technical issue in one of your proofs that is intuitively obvious but would be bothersome to prove. you use library_search or some other lemma search tool to resolve the technicality, and then go on with your proof.<br>\nthere's really not much beyond the lemma type that matters.</p>",
        "id": 176923402,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1569843089
    },
    {
        "content": "<p>I'm just trying to suggest that there might be methods for the Lean project to survive once the original authors leave. 10,000 lemmas in flat files like group.lean is completely unmaintainable.</p>",
        "id": 176923408,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843100
    },
    {
        "content": "<p>again, <code>group.lean</code> is not representative</p>",
        "id": 176923469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843126
    },
    {
        "content": "<p>look around</p>",
        "id": 176923473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843128
    },
    {
        "content": "<p>documentation is much more important in places where it's not bleeding obvious why the theorem is true</p>",
        "id": 176923494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843176
    },
    {
        "content": "<p>Are you suggesting that there ARE books in Lean?</p>",
        "id": 176923501,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843184
    },
    {
        "content": "<p>TPIL?</p>",
        "id": 176923506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843191
    },
    {
        "content": "<p>I'm reading that.</p>",
        "id": 176923532,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843218
    },
    {
        "content": "<p>Ah, well. I'm done.</p>",
        "id": 176923610,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843272
    },
    {
        "content": "<p>I have heard a lot of praise for that book, specifically as it relates to documentation making it easy to get into lean</p>",
        "id": 176923642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843301
    },
    {
        "content": "<p>I think we are all aware of the importance of documentation, and there is a push for more high level documentation in mathlib</p>",
        "id": 176923672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569843347
    },
    {
        "content": "<p>Tim, I am sincerely interested in your thoughts on why there are disproportionately many pure mathematicians in the Lean community compared to other prover-communities. Even though Lean is the youngest of them all.</p>",
        "id": 176923729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569843371
    },
    {
        "content": "<p>I'm in \"the lean community\" because Jeremy Avigad taught a class, so I know how to use it. I want to use it underneath Axiom as my proof engine and Jeremy has been most helpful with that. Without Jeremy's help I probably couldn't even read the group.lean file.</p>",
        "id": 176923909,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843546
    },
    {
        "content": "<p>Axiom has over 10,000 functions and 1100 \"typeclasses\". I fully understand how hard it is to maintain the mathematics, the compiler, and the interpreter. Why when I open-sourced Axiom, it had about 3 useful comments in total. Who would possibly need more?</p>",
        "id": 176924057,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843697
    },
    {
        "content": "<p>Who doesn't understand Risch integration with radical field extensions? Why bother to even include a reference to a paper?</p>",
        "id": 176924169,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843788
    },
    {
        "content": "<p>Lean is following the same path Axiom took. I'm trying to suggest ideas that keep it from becoming an open source project maintained by one person and used by 4 on odd months.</p>",
        "id": 176924259,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569843879
    },
    {
        "content": "<p>Axiom was developed at IBM Research, contains the results of many PhD theses, costs an extimated 42 million dollars to develop, and involved mathematicians worldwide.</p>",
        "id": 176924397,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844064
    },
    {
        "content": "<p>You can have a look at more recent files, where we are precisely trying to enforce more documentation, but at places where it is useful -- i.e., there are nonobvious definitions or design decisions. For instance <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/geometry/manifold/manifold.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/geometry/manifold/manifold.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/geometry/manifold/manifold.lean</a>, that I wrote recently and for which the more than 100 comments in the PRs made me vastly improve the documentation. Does it correspond to what you are looking for, or how would you envision things for better documentation?</p>",
        "id": 176924525,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1569844192
    },
    {
        "content": "<p>The key question is, what discipline is required in development so that when Lean has 100,000 lemmas, 5,000 theorems, and dozens of fields of mathematics, it can still be maintained by people who have no idea what a homology is.</p>",
        "id": 176924594,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844244
    },
    {
        "content": "<p>No. That is not the key question.</p>",
        "id": 176924670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844323
    },
    {
        "content": "<p>The key question is: why are pure mathematicians not using ITPs on a large scale right now?</p>",
        "id": 176924681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844344
    },
    {
        "content": "<p>Sebastien, I'm quite fond of literate programming. We all understand books, how to write them, how to navigate them, how to orgainzie them, and how to index them. It is trivial to extract code from a latex document.</p>",
        "id": 176924685,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844356
    },
    {
        "content": "<p>Johan, that's where we differ. Axiom's motto is \"The 30 Year Horizon\". I'm looking at what Axiom needs to be in 30 years, say as a trusted computational oracle for proof systems. You're looking at enlarging the community this month. So we're talking about different objectives.</p>",
        "id": 176924782,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844479
    },
    {
        "content": "<p>Johan didn't say Lean, he said ITPs</p>",
        "id": 176924816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569844525
    },
    {
        "content": "<p>what is it that the ITP community lacks right now that is preventing world domination?</p>",
        "id": 176924835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569844550
    },
    {
        "content": "<p>If you were given Lean and everyone else left, could you maintain it and extend it? The C++ code is quite clever.</p>",
        "id": 176924836,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844552
    },
    {
        "content": "<p>If I were given all maths textbooks in the world, and everyone left... all I could do was sit on top of them...</p>",
        "id": 176924905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844580
    },
    {
        "content": "<p>Tim, that kind of happened with lean 3</p>",
        "id": 176924916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569844605
    },
    {
        "content": "<p>Tim, I never said \"this month\". But I do know that (i) we are moving towards 30 years later one month at a time, and (ii) it takes more than documentation of trivialities to get mathematicians interested.</p>",
        "id": 176924958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844657
    },
    {
        "content": "<p>Why do you think I started using Lean, and why am I still using it? Because of superb documentation?</p>",
        "id": 176924974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844677
    },
    {
        "content": "<p>Someone working in Cubical Type Theory isn't going to find much support. And since academic promotions never measure code output (withness William Stein) there is no upside to writing Lean theories.</p>",
        "id": 176925039,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844719
    },
    {
        "content": "<p>Books, however, count.</p>",
        "id": 176925184,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569844838
    },
    {
        "content": "<p>It depends...</p>",
        "id": 176925195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844851
    },
    {
        "content": "<p>... on the contents.</p>",
        "id": 176925199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569844858
    },
    {
        "content": "<p>there you've stumbled on one part of our plan for world domination - first fix the financial incentives by making mathematicians care about computers and formal mathematics</p>",
        "id": 176925232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569844896
    },
    {
        "content": "<p>once it becomes sufficiently relevant it won't be career suicide anymore</p>",
        "id": 176925309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569844946
    },
    {
        "content": "<p>I worked with Gilbert Baumslag, the leader of the field of Infinite Group Theory. He wrote 125 papers on the subject. I open-sourced Magnus, which automates Infinite Group Theory calculations. I THINK there were 3 users.</p>",
        "id": 176925416,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569845055
    },
    {
        "content": "<p>Convincing mathematicans to use computers (the source of all frustration) is like convincing cats to use the internet. You can barely get them to do a google search as it takes time away from their next paper.</p>",
        "id": 176925472,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569845155
    },
    {
        "content": "<p>I feel it is like the transition from the 19th to the 20th century. 19th century mathematicians resisted the idea of proofs. 20th century mathematicians resist the idea of ITP. Progress in science is measured one funeral at a time.-- Max Planck. So design your system for the 30 year horizon so it is possible to maintain it by non-authors and non-experts.</p>",
        "id": 176925664,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569845377
    },
    {
        "content": "<p>If you want ITP mathematicians you have to grow them. So you need courses. You need documentation. You need degrees which recognize programs as well as papers and books. Current mathematicians are successfully set in their ways and they know where credit lies.</p>",
        "id": 176925893,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569845629
    },
    {
        "content": "<p>Why do you want to use Lean as backend for Axiom? Wouldn't metamath be a lot better for your use case?</p>",
        "id": 176925898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569845636
    },
    {
        "content": "<p>It is extremely small, fast, and very flexible in its foundations</p>",
        "id": 176925957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569845655
    },
    {
        "content": "<p>The checker is so small that if you write 3000 lines of comments, you will have a paragraph per line of code.</p>",
        "id": 176925993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569845691
    },
    {
        "content": "<p>I'm looking at several systems (COQ, AGDA, IDRIS, HOL, ISABELLE). HOL88 is interesting because it is implemented in Common Lisp and I can embed it in Axiom directly (which is also Common Lisp). Lean is interesting in particular due to Jeremy Avigad. I used it a bit and now I'm trying to communicate between it and the compiler. Axiom is typed everywhere, at every level, and is dependently typed so I need a robust system.</p>",
        "id": 176926151,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569845859
    },
    {
        "content": "<p>As a mathematician, why aren't you using Axiom?</p>",
        "id": 176926221,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569845909
    },
    {
        "content": "<p>FWIW I figure most people don't use ITPs because being formal is a chore. Nobody cares about Bourbaki, and nobody cares about convincing a computer they are correct. In that sense they are a solution in search of a problem. I think they will take off once we true believers formalize enough math and develop enough useful tactics that the software starts being a net gain in productivity as opposed to a 10x reduction.</p>",
        "id": 176926222,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1569845909
    },
    {
        "content": "<p>Andrew, I'm not sure how far tactics can carry you toward that goal. The undecidability issue is an issue. Axiom uses heuristics at runtime to resolve type questions that can't be computed at compile time. I expect to run into the same issue once I try to prove some of Axiom's algorithms correct. Also, tactics have to somehow be related to the specification language of the algorithms and I'm not sure what to think about that connection yet. It is still an \"open research question\" for me.</p>",
        "id": 176926425,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569846106
    },
    {
        "content": "<p>Most Lean work isn't proving algorithms, of course, so I'm out in left field near the corn silo.</p>",
        "id": 176926554,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569846221
    },
    {
        "content": "<p>Also, note that there is almost no person in common in the bibliographic references in ITP and Computer Algebra. James Davenport seems to be the only crossover I can name. There are 2 \"silos\" of computational mathematics and the computer algebra people I know can't read the logic literature.</p>",
        "id": 176926955,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569846602
    },
    {
        "content": "<p>The Axiom Sane project (Sane is a synonum for rational, coherent, judicial, and sound) is trying to build a bridge between these two fields, merging computer algebra and theorem proving machinery.</p>",
        "id": 176927103,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569846699
    },
    {
        "content": "<p>I see that Axiom wants to call Lean under the hood. Is it feasible that I could call Axiom from Lean and get a proof certificate for things that a CAS can do? For example, I would love to call out to a cylindrical alg decomp algorithm, or matrix decomposer alg, or symbolic integrator.</p>",
        "id": 176927403,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1569846903
    },
    {
        "content": "<p>I guess in these cases it's difficult since not only the result needs to be returned, but also the sequence of transformations that lead up to it</p>",
        "id": 176927540,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1569846987
    },
    {
        "content": "<p>Andrew, that's exactly the goal of the Axiom Sane project. Axiom should be a trusted oracle for computing algorithms. Libraries like complex numbers, computing primes, doing CAD, etc. are easy in Axiom but providing a trusted algorithm and a proof certificate is the center of the research question. The oracle response should provide the answer and a proof that the checker can check</p>",
        "id": 176927737,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569847128
    },
    {
        "content": "<p>I can't imagine trying to encode the Risch integration algorithm in Lean. It requires too much algorithmic machinery, most of it at the PhD thesis level. But it already exists in Axiom.</p>",
        "id": 176927881,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569847258
    },
    {
        "content": "<p>The idea of \"encoding all of mathematics\" doesn't seem to mention the computer algebra field. Certain algorithms (e.g. Buchberger's algorithm) seem to have been proven but the whole subject of Infinite Group Theory, which is mostly non-terminating procedures, doesn't seem to fit into the proof systems easily.</p>",
        "id": 176928813,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569848035
    },
    {
        "content": "<p>I think that Andrew's suggestion is the more profitable angle here. Rather than attempt to have lean be a component of axiom, see if you can modify axiom to produce certificates of its results that can then be checked in a theorem prover like lean</p>",
        "id": 176930292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569849165
    },
    {
        "content": "<p>You could also just reimplement selected algorithms in lean</p>",
        "id": 176930339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569849224
    },
    {
        "content": "<p>The problem with treating Axiom as a black box is that you don't trust it, and the very purpose of the project seems to be to make it more trustworthy. The only way you can achieve that is either by whiteboxing the algorithm and proving it correct, or by having the algorithm validate any outputs it gives by producing proofs alongside.</p>",
        "id": 176930497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569849362
    },
    {
        "content": "<p>Indeed, the point is to prove the Axiom algorithms correct with respect to a specification.</p>",
        "id": 176932755,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569850939
    },
    {
        "content": "<blockquote>\n<p>If you want ITP mathematicians you have to grow them. So you need courses. You need documentation. You need degrees which recognize programs as well as papers and books. Current mathematicians are successfully set in their ways and they know where credit lies.</p>\n</blockquote>\n<p>I am taking a risk in my job by not producing the standard research papers which I used to produce. My justification for this is that I am attempting to put courses together. But I won't be able to change our UG maths degree, other than by adding a pure Lean course to it (which I no doubt will try to do at some point). It will still just be one of many.</p>",
        "id": 176948160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569860497
    },
    {
        "content": "<p>But the lean course will exist, Kevin! :D</p>",
        "id": 177008968,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569899475
    },
    {
        "content": "<p>Survey question: What is the biggest concern developers have about open source:</p>\n<p>Result: Perhaps the clearest finding from this question is that 46% of respondents indicated risk about how well packages will be maintained into the future is either a major or a moderate obstacle</p>\n<p><a href=\"https://thenewstack.io/what-is-the-biggest-concern-developers-have-about-open-source/\" target=\"_blank\" title=\"https://thenewstack.io/what-is-the-biggest-concern-developers-have-about-open-source/\">https://thenewstack.io/what-is-the-biggest-concern-developers-have-about-open-source/</a></p>",
        "id": 177068068,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569944733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Speaking about Lean courses, have you finished docs for the incoming freshers / is it viewable by us? I'm a Warwick second year and am fairly interested in this stuff. I've spent the summer trying to learn it but it's all fairly impenetrable. Some docs for maths undergrads would be obviously very helpful. If they're not finished yet I'll just actually concentrate on my degree (for once ;))</p>",
        "id": 177068089,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1569944750
    },
    {
        "content": "<p>Jeremy Avigad used the Lean browser to organize his class. You might consider adding sections to the browser text and organize it by lecture.</p>",
        "id": 177069941,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569945867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221895\">@Luca Seemungal</span>  Hmm, there are many things which are half-finished, including my preparation for my lectures this week, which have to take priority right now. But we're getting there.</p>",
        "id": 177078189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569951071
    },
    {
        "content": "<p>Not about Lean specifically, but this event looks interesting: <a href=\"https://www.helixcenter.org/roundtables/mechanization-of-math/\" target=\"_blank\" title=\"https://www.helixcenter.org/roundtables/mechanization-of-math/\">https://www.helixcenter.org/roundtables/mechanization-of-math/</a></p>",
        "id": 177395576,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1570245753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you should leave a comment pointing to your Fermat blog post there.</p>",
        "id": 177406478,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570267715
    },
    {
        "content": "<p>rofl I just tried, and it was rejected as spam ;-)</p>",
        "id": 177426136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570300850
    },
    {
        "content": "<p>Internet is so wonderful...</p>",
        "id": 177426767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570301823
    },
    {
        "content": "<p>There is an interesting talk by John Seale (of the Chinese Room fame), that is related to the question of \"machine checked proofs\".<br>\nI suggest you take careful notes of the definitions he uses in the first 5 minutes as the whole talk rests on them.<br>\n<a href=\"https://www.youtube.com/watch?v=rHKwIYsPXLg\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=rHKwIYsPXLg\">https://www.youtube.com/watch?v=rHKwIYsPXLg</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"rHKwIYsPXLg\" href=\"https://www.youtube.com/watch?v=rHKwIYsPXLg\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=rHKwIYsPXLg\"><img src=\"https://i.ytimg.com/vi/rHKwIYsPXLg/default.jpg\"></a></div>",
        "id": 177448457,
        "sender_full_name": "Tim Daly",
        "timestamp": 1570345184
    },
    {
        "content": "<p>I watched 23 minutes but I hesitate to continue. Is there any moment when he does something else than repeating: \"let's laugh together at how stupid are people who disagree with me\" and \"the computer is not intelligent because it has zero intelligence\"?</p>",
        "id": 177453914,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570355387
    },
    {
        "content": "<p>I don't say I disagree, but I was hoping for arguments instead of authoritarian assertions and jokes.</p>",
        "id": 177453978,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570355503
    },
    {
        "content": "<p>He gives an argument, although I don't particularly buy it</p>",
        "id": 177454407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570356317
    },
    {
        "content": "<p>Tim is right though - his argument hinges on a linguistic matter between two senses for what is meant by intelligent</p>",
        "id": 177454454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570356398
    },
    {
        "content": "<p>it's not all about the chinese room</p>",
        "id": 177454467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570356454
    },
    {
        "content": "<p>Not sure if this really counts as \"in the wild\", but I just saw <a href=\"https://twitter.com/Jose_A_Alonso/status/1187004186027839490\" target=\"_blank\" title=\"https://twitter.com/Jose_A_Alonso/status/1187004186027839490\">a link on twitter</a> to a nice-looking PDF titled <a href=\"https://github.com/blanchette/logical_verification_2019/raw/master/logical_verification_in_lean.pdf\" target=\"_blank\" title=\"https://github.com/blanchette/logical_verification_2019/raw/master/logical_verification_in_lean.pdf\">\"Logical Verification in Lean\"</a> by <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>, <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>.  It looks like it's for the course <a href=\"https://lean-forward.github.io/logical-verification/2019/\" target=\"_blank\" title=\"https://lean-forward.github.io/logical-verification/2019/\">\"Logical Verification\"</a> by <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> and <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>. I'm looking forward to reading it!</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/Jose_A_Alonso/status/1187004186027839490\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/2609449263/vmq3lkuceoz054nl3u4u_normal.jpeg\"></a><p>Logical verification in Lean. ~ A. Bentkamp, J. Blanchette, J. Hölzl. <a href=\"https://t.co/Fp5UqbQI0m\" target=\"_blank\" title=\"https://t.co/Fp5UqbQI0m\">https://github.com/blanchette/logical_verification_2019/raw/master/logical_verification_in_lean.pdf</a> #eBook #ITP #LeanProver #Logic #FunctionalProgramming</p><span>- José A. Alonso (@Jose_A_Alonso)</span></div></div>",
        "id": 178865474,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571844617
    },
    {
        "content": "<p>It still amuses me that computer scientists are quite happy to have entire chapters on metaprogramming and monads before the section on \"adding two numbers\" :D</p>",
        "id": 178865952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571844941
    },
    {
        "content": "<p><a href=\"http://chalkdustmagazine.com/features/can-computers-prove-theorems/\" target=\"_blank\" title=\"http://chalkdustmagazine.com/features/can-computers-prove-theorems/\">http://chalkdustmagazine.com/features/can-computers-prove-theorems/</a></p>",
        "id": 178930855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571905658
    },
    {
        "content": "<p>\"it's not hard to get Lean running on a computer\" <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 178931607,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1571906371
    },
    {
        "content": "<p>So where is the scorpion section in mathlib? <a href=\"https://i0.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/level.jpg\" target=\"_blank\" title=\"https://i0.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/level.jpg\">https://i0.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/level.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://i0.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/level.jpg\" target=\"_blank\" title=\"https://i0.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/level.jpg\"><img src=\"https://i0.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/level.jpg\"></a></div>",
        "id": 178941779,
        "sender_full_name": "Jason Rute",
        "timestamp": 1571916038
    },
    {
        "content": "<p>Yeah what the heck is that scorpion thing about?? The UCL people did the graphics, I don't know what they were thinking there.</p>",
        "id": 178943690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571917815
    },
    {
        "content": "<p>But addition and multiplication world are here: <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a></p>",
        "id": 178943736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571917855
    },
    {
        "content": "<p>Lol, it's a nice easter egg, right?</p>",
        "id": 178944218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571918312
    },
    {
        "content": "<p>I mean, it really fits in the theme</p>",
        "id": 178944219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571918312
    },
    {
        "content": "<p>Guess who modeled for the second charachter in this pic: <a href=\"https://i2.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/lean-e1571862471361.jpg?resize=670%2C300\" target=\"_blank\" title=\"https://i2.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/lean-e1571862471361.jpg?resize=670%2C300\">https://i2.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/lean-e1571862471361.jpg?resize=670%2C300</a></p>\n<div class=\"message_inline_image\"><a href=\"https://i2.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/lean-e1571862471361.jpg?resize=670%2C300\" target=\"_blank\" title=\"https://i2.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/lean-e1571862471361.jpg?resize=670%2C300\"><img src=\"https://i2.wp.com/chalkdustmagazine.com/wp-content/uploads/2019/10/lean-e1571862471361.jpg?resize=670%2C300\"></a></div>",
        "id": 178944289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571918392
    },
    {
        "content": "<p>It's the launch party of the mag this evening and I'm wearing a pair of trousers which are as close as possible to those depicted</p>",
        "id": 178945499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571919494
    },
    {
        "content": "<p>They never told me they were going to do all this crazy graphics, I only found out a couple of weeks ago and I wrote the article months ago. And I didn't even <em>notice</em> what Johan is pointing out!</p>",
        "id": 178945523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571919534
    },
    {
        "content": "<p>I showed it to my daughter and she said \"oh wow Dad that's you!\" and I'm like \"is it??\"</p>",
        "id": 178945550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571919553
    },
    {
        "content": "<p>Too bad that Zulip doesn't have a \"crazy trousers\" emoji....</p>",
        "id": 178945591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571919577
    },
    {
        "content": "<blockquote>\n<p>Too bad that Zulip doesn't have a \"crazy trousers\" emoji....</p>\n</blockquote>\n<p>... I was about to do so, but I do not have the permissions :( <a href=\"https://zulipchat.com/help/add-custom-emoji\" target=\"_blank\" title=\"https://zulipchat.com/help/add-custom-emoji\">https://zulipchat.com/help/add-custom-emoji</a></p>",
        "id": 178945967,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1571919870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> who's the boss here? Can we make an exception <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"tools\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"tools\">:tools:</span> <img alt=\":zulip:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/zulip.png\" title=\"zulip\"> <span aria-label=\"joy cat\" class=\"emoji emoji-1f639\" role=\"img\" title=\"joy cat\">:joy_cat:</span></p>",
        "id": 178946762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571920509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> The natural number game is looking great! Congrats!</p>",
        "id": 178951912,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571924145
    },
    {
        "content": "<p>Great! So now let's do the complex number game.</p>",
        "id": 178951986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571924175
    },
    {
        "content": "<p>you import the reals, and then have to define everything.</p>",
        "id": 178952000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571924194
    },
    {
        "content": "<p>unfortunately all of the proofs are \"ext;ring\" :-/</p>",
        "id": 178952006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571924204
    },
    {
        "content": "<p>maybe I should think of a better game</p>",
        "id": 178952025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571924222
    },
    {
        "content": "<p>Although others have done it before, and probably they've even done it better (Patrick showed me some impressive stuff I remember), I wonder if we can just get some sort of little suite of games like this, just to get people interested.</p>",
        "id": 178952141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571924292
    },
    {
        "content": "<p>I've been meaning to make stickers based on the Lean logo, but now I know what I really need is that start screen</p>",
        "id": 178952757,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571924762
    },
    {
        "content": "<p>I suppose one could turn a whole undergrad degree into a game...</p>",
        "id": 178952813,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1571924776
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> created a bunch of alternative Lean logos some time ago</p>",
        "id": 178954426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571925693
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Leaked.20Lean.204.20Logos\" title=\"#narrow/stream/113488-general/topic/Leaked.20Lean.204.20Logos\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Leaked.20Lean.204.20Logos</a></p>",
        "id": 178954639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571925802
    },
    {
        "content": "<p>Just saw this on the front page of the internet:</p>\n<p><a href=\"https://www.reddit.com/r/math/comments/dnc0jj/imo_grand_challenge_automated_problem_solving/\" target=\"_blank\" title=\"https://www.reddit.com/r/math/comments/dnc0jj/imo_grand_challenge_automated_problem_solving/\">https://www.reddit.com/r/math/comments/dnc0jj/imo_grand_challenge_automated_problem_solving/</a></p>",
        "id": 179136057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572114566
    },
    {
        "content": "<p>and now this (on Mario's metamath paper): <br>\n<a href=\"https://news.ycombinator.com/item?id=21358674\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=21358674\">https://news.ycombinator.com/item?id=21358674</a></p>",
        "id": 179161793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572165939
    },
    {
        "content": "<p>I was on the front page for a while :D</p>",
        "id": 179161897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572166159
    },
    {
        "content": "<p>I regard these things as small victories for the formal proof verification community</p>",
        "id": 179163024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572168212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Well... they certainly are small victories within the CS community. But how many pure mathematicians read hacker news? Probably about as many as use ITP's...</p>",
        "id": 179205646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572244434
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/AdnVN030Nvzl3p-Q_J3M9T7R/IMG_20191101_144932.jpg\" target=\"_blank\" title=\"IMG_20191101_144932.jpg\">IMG_20191101_144932.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AdnVN030Nvzl3p-Q_J3M9T7R/IMG_20191101_144932.jpg\" target=\"_blank\" title=\"IMG_20191101_144932.jpg\"><img src=\"/user_uploads/3121/AdnVN030Nvzl3p-Q_J3M9T7R/IMG_20191101_144932.jpg\"></a></div>",
        "id": 179660611,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572639001
    },
    {
        "content": "<p>Lean related graffiti in room 342</p>",
        "id": 179660671,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572639017
    },
    {
        "content": "<p>Nice IMO grand challenge!</p>\n<p>Is there a prize?</p>",
        "id": 179686652,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1572671628
    },
    {
        "content": "<p>Sure, see: <a href=\"#narrow/stream/113488-general/topic/IMO.20Grand.20Challenge/near/175143187\" title=\"#narrow/stream/113488-general/topic/IMO.20Grand.20Challenge/near/175143187\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/IMO.20Grand.20Challenge/near/175143187</a></p>",
        "id": 179686765,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572671771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> presented his <a href=\"https://pp.ipd.kit.edu/uploads/publikationen/huisinga19bachelorarbeit.pdf\" target=\"_blank\" title=\"https://pp.ipd.kit.edu/uploads/publikationen/huisinga19bachelorarbeit.pdf\">bachelor's thesis</a> on a partial verification of the compiler in our reference counting paper (done in Lean 3) yesterday. Apart from a much more in-depth description of the IR and compiler than we could have put in the paper, there are some good observation about effective proving in Lean in general in section4, as well as a self-contained section (5) about the list/multiset <code>group</code> function (which he might want to PR to mathlib at some point?).</p>",
        "id": 179911868,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1572943703
    },
    {
        "content": "<p>The formalization mentions <code>obtain</code>?</p>",
        "id": 179914502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572946020
    },
    {
        "content": "<p>but also <code>#check</code></p>",
        "id": 179914527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572946050
    },
    {
        "content": "<p>The lean version that was used exists outside the linear flow of time</p>",
        "id": 179914624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572946106
    },
    {
        "content": "<p>It's the <code>obtain</code> tactic. I guess we never updated lstlean.tex to remove the obsolete keyword.</p>",
        "id": 179915005,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1572946448
    },
    {
        "content": "<p>\"we use Lean 3 to prove that Lean 4 works\". Cunningly avoiding Goedel.</p>",
        "id": 179916336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572947576
    },
    {
        "content": "<p>wait, I don't think that's the direction that avoids Goedel</p>",
        "id": 179916734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572947925
    },
    {
        "content": "<p>yes, it's the obtain tactic. the proof code certainly still needs to be cleaned up, especially before contributing anything to mathlib. many non-terminal simps, lots of duplication and several instances where i miss-use <code>let</code> and should use <code>have</code> instead :)</p>",
        "id": 179919199,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1572950075
    },
    {
        "content": "<p>I'll take that as a vote for \"one tactic instead of two please\"</p>",
        "id": 179925782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572956157
    },
    {
        "content": "<p>Some new \"Lean in the wild\": Sébastien got <a href=\"https://en.wikipedia.org/wiki/Michael_Brin_Prize_in_Dynamical_Systems\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Michael_Brin_Prize_in_Dynamical_Systems\">a prize</a> for theorems he didn't formalize yet, but half of <a href=\"http://www.cnrs.fr/insmi/spip.php?article3371\" target=\"_blank\" title=\"http://www.cnrs.fr/insmi/spip.php?article3371\">the interview</a> he gave to the <a href=\"https://en.wikipedia.org/wiki/Centre_national_de_la_recherche_scientifique\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Centre_national_de_la_recherche_scientifique\">CNRS</a> website is propaganda for proof assistants.</p>",
        "id": 180535885,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1573577097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Congratulations! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"cake\" class=\"emoji emoji-1f370\" role=\"img\" title=\"cake\">:cake:</span></p>",
        "id": 180539496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573579418
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 180540574,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1573580087
    },
    {
        "content": "<p>Slightly more unusual spotting of Lean in the wild: <a href=\"https://en.wikipedia.org/wiki/George_Hotz\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/George_Hotz\">George Hotz</a> has <a href=\"https://www.youtube.com/watch?v=4Or-5OLCNDA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=4Or-5OLCNDA\">livestreamed</a> writing a small <a href=\"https://github.com/geohot/twitchcoq/blob/master/metamath/lean/main.lean\" target=\"_blank\" title=\"https://github.com/geohot/twitchcoq/blob/master/metamath/lean/main.lean\">parser</a> for Metamath files on Twitch back in November.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"4Or-5OLCNDA\" href=\"https://www.youtube.com/watch?v=4Or-5OLCNDA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=4Or-5OLCNDA\"><img src=\"https://i.ytimg.com/vi/4Or-5OLCNDA/default.jpg\"></a></div>",
        "id": 184766189,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1578084221
    },
    {
        "content": "<p>first 40 minutes: why is the hello world example broken</p>",
        "id": 184766712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578084681
    },
    {
        "content": "<p>This person needs to hear about mm0, as a more modern foundation than metamath :p</p>",
        "id": 184767285,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1578085163
    },
    {
        "content": "<p>It's actually pretty funny, during the stream he visits the MM0 page like 5 times when searching for things about metamath or lean (and usually coming up empty). Apparently I've got good SEO</p>",
        "id": 184774881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578092429
    },
    {
        "content": "<p><a href=\"https://agentultra.github.io/lean-for-hackers/\" target=\"_blank\" title=\"https://agentultra.github.io/lean-for-hackers/\">https://agentultra.github.io/lean-for-hackers/</a> -- hello world stuff! It had never occurred to me to get Lean to print anything before.</p>",
        "id": 186626029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580052496
    },
    {
        "content": "<p>Oh SWEET! You've \"cracked the code\". I can build on that.</p>",
        "id": 186626123,
        "sender_full_name": "Tim Daly",
        "timestamp": 1580052706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220270\">@James King</span> made a thread about his guide <a href=\"#narrow/stream/113488-general/topic/guides\" title=\"#narrow/stream/113488-general/topic/guides\">here</a>.</p>",
        "id": 186628144,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580056226
    },
    {
        "content": "<p>oh nice, thanks Bryan. I see now that I starred that post when it appeared but I never went back and \"tidied up recent stars\", my bad.</p>",
        "id": 186628202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580056335
    },
    {
        "content": "<p>Kevin, did you notice that \"The primary focus of Lean is mathematical research and its intended audience are mathematicians.\" We can be proud of what we did. By taking over this forum, we managed to get James completely confused about Lean's origins an intended audience. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 186628770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1580057511
    },
    {
        "content": "<p>I did notice that yes :-)</p>",
        "id": 186632539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580063855
    },
    {
        "content": "<p>I am completely confused and PRs are welcome. I've talked to various people around the community but I haven't met all of you nor had a chance to meet Kevin, Jeremy, or Leo. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 186632962,
        "sender_full_name": "James King",
        "timestamp": 1580064582
    },
    {
        "content": "<p>I made the guide after watching George Hotz try Lean on his \"esoteric language sundays\" twitch channel and being stymied in a similar fashion by the empty sections on the programming language bits of the Lean documentation. I hope to round it out a bit and work with Simon to contribute parts to the official docs.</p>",
        "id": 186633154,
        "sender_full_name": "James King",
        "timestamp": 1580064873
    },
    {
        "content": "<p>Presently wrapping up work on a JSON parsing library for Lean3 to serve as the intro for the next section to the guide. (I'm really humbled that people have actually read it...)</p>",
        "id": 186633265,
        "sender_full_name": "James King",
        "timestamp": 1580065090
    },
    {
        "content": "<p><a href=\"http://aarinc.org/Newsletters/130-2020-02.html#zulip\" target=\"_blank\" title=\"http://aarinc.org/Newsletters/130-2020-02.html#zulip\">http://aarinc.org/Newsletters/130-2020-02.html#zulip</a></p>",
        "id": 188001745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581507249
    },
    {
        "content": "<p>\"The lean zulip server demonstrates that good communication tools can help communities thrive, make it easier for newcomers to ask questions, and lower friction for discussions. \"</p>",
        "id": 188001768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581507286
    },
    {
        "content": "<p>Kevin, since when do you read the AAR newsletter? Next thing you know, you'll be attending IJCAR or CADE.</p>",
        "id": 188148104,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1581626426
    },
    {
        "content": "<p>Next IJCAR is in Paris, it's the right time to attend! <span aria-label=\"croissant\" class=\"emoji emoji-1f950\" role=\"img\" title=\"croissant\">:croissant:</span> <span aria-label=\"baguette\" class=\"emoji emoji-1f956\" role=\"img\" title=\"baguette\">:baguette:</span></p>",
        "id": 188148744,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1581626759
    },
    {
        "content": "<p>I gave a talk in Bath on Tuesday and some computer scientists attended, and one of them emailed me the newsletter afterwards :-)</p>",
        "id": 188150448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581627730
    },
    {
        "content": "<p>I used to be the editor of that beautiful publication. :)</p>\n<p>If you want to get it delivered to your mailbox (4-5 times a year), you can ask Sophie Tourret at <a href=\"mailto:newsletter@aarinc.org\" title=\"mailto:newsletter@aarinc.org\">newsletter@aarinc.org</a> . She's an Isabelle user, though, so you might want to keep a low profile.</p>",
        "id": 188150766,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1581627898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> hits frontpage on HN again: <a href=\"https://news.ycombinator.com/item?id=22390486\" target=\"_blank\" title=\"https://news.ycombinator.com/item?id=22390486\">https://news.ycombinator.com/item?id=22390486</a></p>",
        "id": 188833516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582406150
    },
    {
        "content": "<p>Who did he provoked this time?</p>",
        "id": 188833557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582406171
    },
    {
        "content": "<p>Just his blogpost from over a week ago (-;</p>",
        "id": 188833629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582406334
    },
    {
        "content": "<p><a href=\"https://www.imperial.ac.uk/news/196435/growing-plants-without-soil-amongst-frontier/\" title=\"https://www.imperial.ac.uk/news/196435/growing-plants-without-soil-amongst-frontier/\">https://www.imperial.ac.uk/news/196435/growing-plants-without-soil-amongst-frontier/</a></p>\n<p>Go me, I got money for a Lean post-doc :D</p>",
        "id": 191950111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585257329
    },
    {
        "content": "<p>Job ad should be out by the end of the week :D</p>",
        "id": 191950149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585257345
    },
    {
        "content": "<p>Not sure if this was posted anywhere else, but I saw a presentation go up about Lean at Imperial College London: <a href=\"https://www.researchgate.net/publication/339827943_University_students'_proof_writing_and_LEAN_theorem_prover_the_case_of_the_abundant_number_task\" title=\"https://www.researchgate.net/publication/339827943_University_students'_proof_writing_and_LEAN_theorem_prover_the_case_of_the_abundant_number_task\">https://www.researchgate.net/publication/339827943_University_students'_proof_writing_and_LEAN_theorem_prover_the_case_of_the_abundant_number_task</a></p>",
        "id": 192550165,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585756498
    },
    {
        "content": "<p>Athina Thoma is the education post-doc who watched my students learning Lean, interviewed and surveyed them, and tried to draw rigorous conclusions from an educational perspective.</p>",
        "id": 192554800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585758495
    },
    {
        "content": "<p>I'm not sure if this is \"in the wild\", but here's the new version of our Lecture notes:    <a href=\"https://lean-forward.github.io/logical-verification/2020/index.html#material\" title=\"https://lean-forward.github.io/logical-verification/2020/index.html#material\">https://lean-forward.github.io/logical-verification/2020/index.html#material</a></p>\n<p>Sorry for all the spam. I just want to make sure nobody keeps on reading the old book.</p>",
        "id": 192798565,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1585918421
    },
    {
        "content": "<p>I think prominent links to the new version at the old course site and github repo would help with that.</p>",
        "id": 192799255,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585918704
    },
    {
        "content": "<p>Blogpost about Lean <a href=\"https://ahelwer.ca/post/2020-04-05-lean-assignment/\" title=\"https://ahelwer.ca/post/2020-04-05-lean-assignment/\">https://ahelwer.ca/post/2020-04-05-lean-assignment/</a> (mentions NNG). It's urrently place 14 on HackerNews: <a href=\"https://news.ycombinator.com/item?id=22789953\" title=\"https://news.ycombinator.com/item?id=22789953\">https://news.ycombinator.com/item?id=22789953</a></p>",
        "id": 192996698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586150659
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113488-general/topic/Wrote.20a.20blog.20post.20about.20Lean\" title=\"#narrow/stream/113488-general/topic/Wrote.20a.20blog.20post.20about.20Lean\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Wrote.20a.20blog.20post.20about.20Lean</a> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 192996703,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586150686
    },
    {
        "content": "<p>Hitchhikers Guide Lean book now on front page of hacker news</p>",
        "id": 193077870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586195707
    },
    {
        "content": "<p>Here is the comment section: <a href=\"https://news.ycombinator.com/item?id=22794533\" title=\"https://news.ycombinator.com/item?id=22794533\">https://news.ycombinator.com/item?id=22794533</a></p>",
        "id": 193150870,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1586245764
    },
    {
        "content": "<p>They are saying silly things over there</p>",
        "id": 193150893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586245786
    },
    {
        "content": "<p>Like you can't do epsilon delta proofs in Lean</p>",
        "id": 193150951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586245805
    },
    {
        "content": "<p>Clearly didn't read TFA before commenting</p>",
        "id": 193150977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586245835
    },
    {
        "content": "<p>I'm not sure arguing a lot about this is a good use of our time. Writing better documentation and tutorials seem like a better idea to me.</p>",
        "id": 193150982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586245839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/193150893\" title=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/193150893\">said</a>:</p>\n<blockquote>\n<p>They are saying silly things over there</p>\n</blockquote>\n<p>Doesn't this apply to literally every comments section on the internet? This will keep happening no matter how perfect the documentation and tutorials are :)</p>",
        "id": 193151128,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586245957
    },
    {
        "content": "<p>Natural number game on Reddit: <a href=\"https://www.reddit.com/r/math/comments/fwlgf4/natural_number_game_a_game_where_you_learn_to/\" title=\"https://www.reddit.com/r/math/comments/fwlgf4/natural_number_game_a_game_where_you_learn_to/\">https://www.reddit.com/r/math/comments/fwlgf4/natural_number_game_a_game_where_you_learn_to/</a></p>",
        "id": 193213018,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1586276465
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  -- Patrick encouraged me to give NNG \"some love\" last week, and I accepted all the PRs, made some edits, and pushed a slightly tidied up version live. Just in time!</p>",
        "id": 193223892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586281731
    },
    {
        "content": "<p>My default search engine is <a href=\"https://duckduckgo.com\" title=\"https://duckduckgo.com\">duck duck go</a>, and I usually get to the mathlib github repo by searching for the word mathlib, because it's usually the second or third hit. But as of the last 24 hours or so it's consistently been number 1. Is that true for everyone or just me? I thought the point was that they weren't tracking me.</p>",
        "id": 193340836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586361571
    },
    {
        "content": "<p>third entry for me</p>",
        "id": 193341036,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586361635
    },
    {
        "content": "<p>third for me after pearson and matlab</p>",
        "id": 193341101,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586361659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/193340836\" title=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/193340836\">said</a>:</p>\n<blockquote>\n<p>My default search engine is <a href=\"https://duckduckgo.com\" title=\"https://duckduckgo.com\">duck duck go</a>, and I usually get to the mathlib github repo by searching for the word mathlib, because it's usually the second or third hit. But as of the last 24 hours or so it's consistently been number 1. Is that true for everyone or just me? I thought the point was that they weren't tracking me.</p>\n</blockquote>\n<p>2nd entry for me</p>",
        "id": 193341105,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586361660
    },
    {
        "content": "<p>Its non-deterministic though, simply refreshing changes the order for me.</p>",
        "id": 193341284,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586361732
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=mb-qDG5-05Y\" title=\"https://www.youtube.com/watch?v=mb-qDG5-05Y\">\"The Mechanization of Mathematics\" by Jeremy Avigad</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"mb-qDG5-05Y\" href=\"https://www.youtube.com/watch?v=mb-qDG5-05Y\" title=\"https://www.youtube.com/watch?v=mb-qDG5-05Y\"><img src=\"https://i.ytimg.com/vi/mb-qDG5-05Y/default.jpg\"></a></div>",
        "id": 194380258,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587079777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> presented his <a href=\"https://pp.ipd.kit.edu/uploads/publikationen/himmel20bachelorarbeit.pdf\">bachelor thesis</a> on diagram chasing in Lean 3 last week. It's a very nice read, even for someone who knows as little about category theory as I do.</p>",
        "id": 197114456,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589185673
    },
    {
        "content": "<p>This should be PRed to <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/lean.bib\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/lean.bib</a> right away</p>",
        "id": 197114543,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589185724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> Congratulations! I'm looking forward to seeing the snake lemma in mathlib!</p>",
        "id": 197114996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589186024
    },
    {
        "content": "<p>Is this really the first formal proof of the snake lemma? Doesn't some hott lib have it? Or the spectral sequence library by <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  et al?</p>",
        "id": 197115326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589186202
    },
    {
        "content": "<p>I looked for it, but didn't find anything. Perhaps I'm just very bad at searching. I'm pretty confident that it's the first formal proof that is valid in any abelian category.</p>",
        "id": 197115476,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589186292
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">four</span> <span class=\"o\">[</span><span class=\"n\">epi</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">:</span>  <span class=\"n\">mono</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"n\">mono_of_zero_of_map_zero</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">chase</span> <span class=\"n\">c</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">β</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"err\">′</span><span class=\"o\">,</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">b</span><span class=\"err\">′</span><span class=\"n\">a</span><span class=\"err\">′</span><span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">commutativity</span><span class=\"o\">,</span>\n  <span class=\"n\">commutativity</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197117298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589187279
    },
    {
        "content": "<p>That is so cool!</p>",
        "id": 197117313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589187284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> Can you comment on how fast this is?</p>",
        "id": 197117596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589187435
    },
    {
        "content": "<p>Would we need to cache the result (our maybe use a proof script that <code>commutativity</code> and/or <code>chase</code> output? Or can we just leave these proofs as is, because they will be almost instant?</p>",
        "id": 197117678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589187494
    },
    {
        "content": "<p>How much of all this is in mathlib?</p>",
        "id": 197117855,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589187605
    },
    {
        "content": "<p>Markus has made a couple of PRs in the past, but we don't have abelian categories yet, and neither do we have any of the automation.</p>",
        "id": 197117881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589187637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/197117596\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> Can you comment on how fast this is?</p>\n</blockquote>\n<p>Right now, it is quite slow (think <code>tidy</code> levels of slow). However, I believe that there are a lot of performance improvements accessible to someone who knows more about tactic writing than I do.</p>",
        "id": 197117959,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589187713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/197117881\">said</a>:</p>\n<blockquote>\n<p>Markus has made a couple of PRs in the past, but we don't have abelian categories yet, and neither do we have any of the automation.</p>\n</blockquote>\n<p>Yep. I'm waiting for the <code>enriched</code> branch to be merged so that preadditive categories are available. Once that is ready, I'm planning to start PRing abelian categories</p>",
        "id": 197118194,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589187951
    },
    {
        "content": "<p>This is really important Markus. Otherwise your work will be lost.</p>",
        "id": 197118874,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589188465
    },
    {
        "content": "<p>Yes, very well done on the thesis but now it's really important that it gets into mathlib before it dies</p>",
        "id": 197121090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589189999
    },
    {
        "content": "<p>Do we know what the status of the <code>enriched</code> branch is? If it will take time, would mathlib be happy with a boring pedestrian definition of preadditive categories that can hopefully be replaced seamlessly once enriched categories are ready, so that I can get started PRing? <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, what are your thoughts on this?</p>",
        "id": 197121480,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589190224
    },
    {
        "content": "<p>I think that would probably be a good idea, especially as the <code>enriched</code> branch only works for enrichments where the forgetful functor (like Ab -&gt; Set) is faithful anyways</p>",
        "id": 197134359,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589198257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>, sorry, I haven't had much time to work on this recently. Moreover, it's been a pretty discouraging experience so far. I'll try to look at it again soon.</p>",
        "id": 197167896,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589213264
    },
    {
        "content": "<p>Last I looked at it I was pretty frustrated by another instance of <a href=\"https://github.com/leanprover-community/lean/issues/197\">https://github.com/leanprover-community/lean/issues/197</a>.</p>",
        "id": 197167920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589213278
    },
    {
        "content": "<p>(although this wasn't actually completely blocking progress)</p>",
        "id": 197167981,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589213290
    },
    {
        "content": "<p>I think I should (or someone else should) just write the \"pedestrian\" definition of just preadditive categories, so we can call get on with life. :-) Hopefully for a while at least this won't preclude slotting in a more general framework later.</p>",
        "id": 197168109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589213353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/197168109\">said</a>:</p>\n<blockquote>\n<p>I think I should (or someone else should) just write the \"pedestrian\" definition of just preadditive categories, so we can call get on with life. :-) Hopefully for a while at least this won't preclude slotting in a more general framework later.</p>\n</blockquote>\n<p>How about I clean up and PR the definition of preadditive category I have been using in my project?</p>",
        "id": 197168926,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589213718
    },
    {
        "content": "<p>We didn't prove the snake lemma in the Lean HoTT library. We actually needed very little homological algebra for our project, much less than we initially suspected. I think we proved some other lemmas, like the four and/or five lemma, but never actually used it.<br>\nThis is a very nice project, and the tactics look really useful!</p>",
        "id": 197171030,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1589214612
    },
    {
        "content": "<p>Can anyone comment on how Lean is doing with regard to the questions asked here <a href=\"https://cs.nyu.edu/pipermail/fom/2020-May/022152.html\">https://cs.nyu.edu/pipermail/fom/2020-May/022152.html</a> ?</p>",
        "id": 197357849,
        "sender_full_name": "Noob",
        "timestamp": 1589330892
    },
    {
        "content": "<p>Edit: I think I misunderstood the question, apologies. Here is what i originally wrote which doesn't  answer your questions. If you click on the link you'll see lean is already on that list. Maybe there are a some more things that have more recently appeared in mathlib that we haven't updated Freek about (mean value theorem <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> ?) but more-or-less the answer is we have a fair number of these goals formalized (including at least one which is present in no other system) but less than the more mature systems.</p>",
        "id": 197358382,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589331463
    },
    {
        "content": "<p>such lists don't do a great job at capturing progress</p>",
        "id": 197358522,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589331587
    },
    {
        "content": "<p>if you want to get a feel for which things are easy to formalize, hang out here :)</p>",
        "id": 197358572,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589331604
    },
    {
        "content": "<p>To answer the questions in the post:<br>\n1) which of these can make use of work done in which other ones?<br>\nThere are two ways in which systems can make use of work in others, either via an automated conversion/ or embedding of the logic of one into the other, for this you might be interested in <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's work embedding some metamath0 proofs inside of lean, the other way is that those with similar logic can also draw inspiration / replicate ideas from one in another system more easily. For lean this would likely be coq, where a lot of work (tactics especially) in lean have learned from prior work done in coq, rather than reinvent the wheel.</p>\n<p>2) which of these would be the easiest for mathematicians with some programming experience to learn to use to create machine-verifiable proofs?<br>\nLean of course ;). More seriously that's  a very difficult question to answer as the answer depends on personal preference, how much experience the user has with different types of programming languages. </p>\n<p>3) which of these have a good translator that turns a machine-readable proof into something a human reader might gain insight from?<br>\nNone of them? ISABELLE/NAPROCHE  and forthel are projects that go in that direction, but is more aimed at writing a human readable proof that a machine can read, rather than translation. Peter Koepke and Tom Hales have thought about how this might work in lean but I'm not aware of any publications (yet).</p>",
        "id": 197359355,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589332315
    },
    {
        "content": "<p>Is lean code not human readable?</p>",
        "id": 197360248,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589333294
    },
    {
        "content": "<p>I took this to mean untrained human, but for lean at least it completely depends on the style, level of comments and whether you have an interactive viewer open, if you show me a random term mode proof in mathlib without lean open what I'm going to get from it is what lemmas are used probably, wether induction is used or not, and at the end of the day I'll be reconstructing the proof \"flow\" in my head, I don't know what level of insight that is, compared to say a normal proof in a book or paper. I feel like this question is really getting at a system where I can show the output to a random mathematician and they will not think it looks odd (a la Ganesalingam-Gowers).</p>",
        "id": 197360721,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589333928
    },
    {
        "content": "<p>I've gained plenty of human insight by reading formal proofs from other proof assistants</p>",
        "id": 197360722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589333928
    },
    {
        "content": "<p>for example when I want to port a proof and I look at some isabelle / mizar / coq file that does it</p>",
        "id": 197360744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589333965
    },
    {
        "content": "<p>but it's not for the untrained human probably</p>",
        "id": 197360758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589333983
    },
    {
        "content": "<p>oh i don't know why i haven't looked at the <a href=\"https://arxiv.org/abs/1309.4501\">Ganesalingam-Gowers paper</a></p>",
        "id": 197361017,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589334290
    },
    {
        "content": "<p>Oh it's great fun, you should check out Gowers' original blog posts on the topic too, IIRC he did turing-test style polls to see if people could guess which proofs were auto-generated (and won?)</p>",
        "id": 197361558,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589335009
    },
    {
        "content": "<p>Starts here, few posts in sequence <a href=\"https://gowers.wordpress.com/2013/03/25/an-experiment-concerning-mathematical-writing/\">https://gowers.wordpress.com/2013/03/25/an-experiment-concerning-mathematical-writing/</a></p>",
        "id": 197361651,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589335130
    },
    {
        "content": "<p><code>tidy</code> originated in a (completely unsuccessful) attempt to imitate what they did. Ed Ayers (who is Gowers' student) has been pursuing this properly.</p>",
        "id": 197363529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589337558
    },
    {
        "content": "<p>For the record: the \"completely unsuccessful\" is a very modest description with a lot of irony. <code>tidy</code> is probably one of the best hidden tactics in mathlib. You don't see it, but it get's called a lot. And that's just the way it was meant to be.</p>",
        "id": 197365548,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589340625
    },
    {
        "content": "<p>I think it's fair to say that while it is a useful and powerful tactic, it does not really act like the Ganesalingam-Gowers prover. It's still not clear to me whether this is a failing of <code>tidy</code> or the GG prover</p>",
        "id": 197365618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589340734
    },
    {
        "content": "<p>Lean was mentioned in a tweet today: <a href=\"https://twitter.com/alexkontorovich/status/1261350124883771392\">https://twitter.com/alexkontorovich/status/1261350124883771392</a><br>\nA journal is having a special issue on formalized mathematics and calling for papers.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/alexkontorovich/status/1261350124883771392\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1064730264255946754/FTMCMpTv_normal.jpg\"></a><p>What will math research look like in 20 years? I have no idea, and am pretty sure I'm not alone. Will Interactive Theorem Provers (eg, Lean) be the next phase in math evolution? Maybe, maybe not. (How long did it take for everyone to learn TeX?) Announcing <a href=\"https://t.co/O1bRjx65zg\">http://bit.ly/interactive-theorem</a></p><span>- Alex Kontorovich (@AlexKontorovich)</span></div></div>",
        "id": 197740030,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1589570125
    },
    {
        "content": "<p>lol, I don't trust the linked journal page because the web design is too good</p>",
        "id": 197740430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589570220
    },
    {
        "content": "<p>I have the opposite reaction. I have paid out the nose for various textbooks from Taylor and Francis, and now I see where some of my money is going...</p>",
        "id": 197740669,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1589570285
    },
    {
        "content": "<p>I think Experimental Mathematics is a good journal. Well, at least I've read multiple papers published there that I liked a lot.</p>",
        "id": 197740927,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589570380
    },
    {
        "content": "<p><a href=\"https://twitter.com/littmath/status/1280213422995648513?s=20\">https://twitter.com/littmath/status/1280213422995648513?s=20</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/littmath/status/1280213422995648513?s=20\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/896909521603481607/FUx_nsGR_normal.jpg\"></a><p>The sacred                                 The profane <a href=\"https://t.co/CkdC8U8aJW\">https://twitter.com/littmath/status/1280213422995648513/photo/1</a></p><span>- Daniel Litt (@littmath)</span><div class=\"twitter-image\"><a href=\"https://t.co/CkdC8U8aJW\"><img src=\"https://pbs.twimg.com/media/EcQ7KoDWoAEqp-4.png:thumb\"></a></div><div class=\"twitter-image\"><a href=\"https://t.co/CkdC8U8aJW\"><img src=\"https://pbs.twimg.com/media/EcQ7KoEWkAAolYD.png:large\"></a></div></div></div>",
        "id": 203031271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594064087
    },
    {
        "content": "<p>This reply made me laugh: <a href=\"https://twitter.com/fried_brice/status/1280224147168063488\">https://twitter.com/fried_brice/status/1280224147168063488</a></p>\n<p>More like 6 days, I think...</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/fried_brice/status/1280224147168063488\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/640347834953306112/ed0rymut_normal.jpg\"></a><p><a href=\"https://twitter.com/littmath\">@littmath</a> The nice thing about Bourbaki is that it doesn't stop compiling every six months when there's a compiler update.</p><span>- Daniel Brice (@fried_brice)</span></div></div>",
        "id": 203032483,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594064874
    },
    {
        "content": "<p>This is a bit off-topic, but this title got me thinking about lean in the wild more literally. To what extent do you think theorem provers will be present in everyday life? </p>\n<p>For example, I have type 1 diabetes, and as pumps and sensors get more automated we currently can't do much more than trust that their software won't go wrong and potentially do terrible things to us. Of course there is a lot of testing that is done to prevent that, but being able to prove things about these devices seems nice to me.</p>\n<p>Another thing would be voting systems, of course. And more or the sci-fi side, I wonder what would it be like to have formalized laws and jurisdictions, and lawyers who prove theorems and debate about hypothesis (but of course this kind of thing would certainly come with its own problems)...</p>",
        "id": 203065538,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1594095476
    },
    {
        "content": "<p>They are already present, in the semiconductor industry</p>",
        "id": 203065992,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1594096195
    },
    {
        "content": "<p>after the Pentium floating point bug, IIRC Intel started doing formal verification of their hardware designs</p>",
        "id": 203066040,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1594096216
    },
    {
        "content": "<p>So  I guess the answer is: whenever the cost of business becomes so high that verification is necessary...</p>",
        "id": 203066059,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1594096265
    },
    {
        "content": "<p>One other obstacle is that program extraction code quality isn't quite there yet for Coq/Lean</p>",
        "id": 203066071,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1594096301
    },
    {
        "content": "<p>Verified, safe code is usually embedded code. However your favorite functional programming language doesn't work so well without a garbage collector</p>",
        "id": 203066140,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1594096439
    },
    {
        "content": "<p>Just wait till the end of summer <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 203066211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594096513
    },
    {
        "content": "<p>I don't hold out hope for formal laws. The whole point of the judicial system is to allow some degree of human interpretation and oversight</p>",
        "id": 203066220,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1594096543
    },
    {
        "content": "<p><a href=\"https://www.netjeff.com/humor/item.cgi?file=PentiumJokes\">https://www.netjeff.com/humor/item.cgi?file=PentiumJokes</a></p>",
        "id": 203066908,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594097620
    },
    {
        "content": "<p>One area where formalization of laws could be useful is in hours of service regulations (i.e. how long truck drivers can work). The rules can get quite elaborate, especially in the US, and in fact formalization is already underway with the move to electronic logbooks.</p>",
        "id": 205874704,
        "sender_full_name": "Chris Wong",
        "timestamp": 1596519228
    },
    {
        "content": "<p>Discussion of formalization of laws reminds me of this interesting post: <a href=\"https://blog.merigoux.ovh/en/2019/12/20/taxes-formal-proofs.html\">A mathematical formulation of the tax code?</a></p>",
        "id": 205875272,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1596520189
    },
    {
        "content": "<p>There were some debates on how one should interpret the \"2 terms\" rule in Russian Constitution. Putin interpreted the phrase as \"no 3 terms in a row\" while others did argue that it should be interpreted as \"one may be a President either for 1 term in a lifetime, or for 2 terms in a row\". (Later he just changed the Constitution).</p>\n<p>And there was another debate a few years before Putin. The law says that a president suggest a candidate for the position of the prime minister, and the parliament votes to accept or deny the candidate. If the parliament denies 3 candidates, then elections must be held immediately. The question was: may the president suggest the same person 3 times in a row or he has to suggest 3 different candidates?</p>",
        "id": 205883723,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596530088
    },
    {
        "content": "<p><em>Later he just changed the Constitution</em></p>",
        "id": 205883744,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596530115
    },
    {
        "content": "<p>Disclaimer: these two paragraph were meant to be examples of difficulties with interpreting laws written in natural language. Though I have my opinion about the political situation in Russia, I would prefer to avoid discussing it here because I assume that people should be welcome to contribute to <code>mathlib</code> regardless of their political views (and thus it's better not to discuss these views unless such a discussion is required to resolve something withing the community).</p>",
        "id": 205884364,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596530708
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/questions/369863/online-evolving-collaborative-foundational-text-projects/370105#370105\">https://mathoverflow.net/questions/369863/online-evolving-collaborative-foundational-text-projects/370105#370105</a> seemed to be a reasonable place to plug mathlib</p>",
        "id": 208039356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598400143
    },
    {
        "content": "<p>I guess the fact that there are no comments under <em>your</em> answer means that everyone agrees that all the adjectives are satisfied (-;</p>",
        "id": 208052281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598416632
    },
    {
        "content": "<p><a href=\"https://pbelmans.ncag.info/blog/2020/08/31/fortnightly-links-112/\">https://pbelmans.ncag.info/blog/2020/08/31/fortnightly-links-112/</a><br>\nThis blog is read by a <em>lot</em> of algebraic geometers and number theorists.</p>",
        "id": 208595398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598897825
    },
    {
        "content": "<p>Hmm, the spacing on the doc entry he links to looks kind of funky. Not that it's worse than it was before the recent changes. It's a long line that's hard to get right. <a href=\"/user_uploads/3121/hiq4aHOdjL3Yz8VrygIW0f_T/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hiq4aHOdjL3Yz8VrygIW0f_T/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hiq4aHOdjL3Yz8VrygIW0f_T/image.png\"></a></div>",
        "id": 208597304,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1598898704
    },
    {
        "content": "<p>Ouch... it does look a lot less readable than the actual source code <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 208597473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598898775
    },
    {
        "content": "<p>Yeah, binders are hard to get right because we don't get enough information about them from Lean.</p>",
        "id": 208597508,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598898792
    },
    {
        "content": "<p>Is this really <code>∃ x y z, true</code>?</p>",
        "id": 208597521,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598898801
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">Scheme</span> <span class=\"kn\">extends</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">LocallyRingedSpace</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">local_affine</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">carrier</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">to_SheafedSpace</span><span class=\"bp\">.</span><span class=\"n\">to_PresheafedSpace</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">inclusion_open_embedding</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"err\">≅</span>\n    <span class=\"n\">Spec</span><span class=\"bp\">.</span><span class=\"n\">PresheafedSpace</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 208597552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598898820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/208597521\">said</a>:</p>\n<blockquote>\n<p>Is this really <code>∃ x y z, true</code>?</p>\n</blockquote>\n<p>Heh, I was wondering about that too.</p>",
        "id": 208597583,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1598898832
    },
    {
        "content": "<p>I guess we could have done <code>nonempty (_ \\iso _)</code></p>",
        "id": 208597659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598898847
    },
    {
        "content": "<p>I find the source code equally hard to read.</p>",
        "id": 208597661,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598898848
    },
    {
        "content": "<p>The bit with the <code>carrier</code> and <code>opens</code> is better.</p>",
        "id": 208597717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598898872
    },
    {
        "content": "<p>But I agree that <code>i</code> has a very ugly type.</p>",
        "id": 208597758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598898892
    },
    {
        "content": "<p>The <code>i</code> is fine IMHO.</p>",
        "id": 208597794,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598898906
    },
    {
        "content": "<p>In maths it is written as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>≅</mo><mi>S</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">U \\cong Spec R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span></p>",
        "id": 208597857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598898936
    },
    {
        "content": "<p>Of course there should be a little <code>\\u</code> before that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 208597988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598898971
    },
    {
        "content": "<p>But <code>X.to_SheafedSpace.to_PresheafedSpace.restrict _ (opens.inclusion_open_embedding U)</code> seems quite a mouthful as replacement for that LHS.</p>",
        "id": 208598095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598899003
    },
    {
        "content": "<p>That's a de-Bruijn factor of about 80</p>",
        "id": 208598241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598899070
    },
    {
        "content": "<p>Hey everyone! I'm not sure if this is the right place for this questions, but I'm a graduate student in computer science who does research in verifying program correctness, the correctness of adaptations to program code, requirement satisfaction, etc. I'd like to see what applications Lean has in that space. Is there a specific thread or individual that I should reach out to?</p>",
        "id": 208598612,
        "sender_full_name": "Ian Riley",
        "timestamp": 1598899218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"335850\">@Ian Riley</span> I guess you are looking for this stream: <a href=\"#narrow/stream/236449-Program-verification\">https://leanprover.zulipchat.com/#narrow/stream/236449-Program-verification</a></p>",
        "id": 208598722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598899267
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 208599040,
        "sender_full_name": "Ian Riley",
        "timestamp": 1598899410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/208595398\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://pbelmans.ncag.info/blog/2020/08/31/fortnightly-links-112/\">https://pbelmans.ncag.info/blog/2020/08/31/fortnightly-links-112/</a><br>\nThis blog is read by a <em>lot</em> of algebraic geometers and number theorists.</p>\n</blockquote>\n<p>I knew we needed to update the overview page today.</p>",
        "id": 208611517,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598905922
    },
    {
        "content": "<p>Has the existence of fiber product of schemes ever been proved? How's the general progress towards stacks project?</p>",
        "id": 208617894,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1598909500
    },
    {
        "content": "<p>Students at Imperial, working with preliminary versions of the definition, have proved that Gamma (Spec(R))=R and that Gamma and Spec are adjoint functors between rings and locally ringed spaces. All of this is yet to hit mathlib. We've never done products but we have tensor products so there's a clear path to it.</p>",
        "id": 208619921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598910744
    },
    {
        "content": "<p>Just to be clear -- we got schemes in mathlib <em>today</em> and it will take a while for other things to filter through.</p>",
        "id": 208619983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598910793
    },
    {
        "content": "<p>We should make a roadmap for other things about schemes. I'm working on several things still, but would prefer if other people who actually knew algebraic geometry did it. :-) Proving that sheafification is an adjunction is the most immediate need, I think, so that opens up lots of the basic categorical properties of <code>Scheme</code>.</p>",
        "id": 208622480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598912462
    },
    {
        "content": "<p>In terms of a roadmap for a roadmap, we should do some thorough crosslinking of mathlib and the Stacks project. Ideally we could even produce visualisations of the Stacks tag network, coloured according to what's in mathlib.</p>",
        "id": 208622634,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598912542
    },
    {
        "content": "<p>I am not sure whether this counts as a roadmap, but two results that I use quite frequently are </p>\n<ol>\n<li>the Miracle Flatness Lemma (<a href=\"https://stacks.math.columbia.edu/tag/00R4\">https://stacks.math.columbia.edu/tag/00R4</a>)</li>\n<li>Zariski's Main Theorem (<a href=\"https://stacks.math.columbia.edu/tag/02LQ\">https://stacks.math.columbia.edu/tag/02LQ</a>)</li>\n</ol>\n<p>Anything that would approach either of these results would be incredibly useful for algebraic geometers in the wild!</p>",
        "id": 208646356,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598938359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Please feel free to post those as 2-line issues on the mathlib repo (like I did with <a href=\"https://github.com/leanprover-community/mathlib/issues/4013\">#4013</a>)<br>\nI think those are great theorems to target.</p>",
        "id": 208647045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598939357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/208647045\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> Please feel free to post those as 2-line issues on the mathlib repo (like I did with <a href=\"https://github.com/leanprover-community/mathlib/issues/4013\">#4013</a>)<br>\nI think those are great theorems to target.</p>\n</blockquote>\n<p>I just did: is this (<a href=\"https://github.com/leanprover-community/mathlib/issues/4014#issue-689843280\">https://github.com/leanprover-community/mathlib/issues/4014#issue-689843280</a>) what you had in mind?</p>",
        "id": 208647829,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598940408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Yup, that way it is easier to keep track of them. These Zulip threads are a bit too ephemeral</p>",
        "id": 208647863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598940471
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=gAuvVPw6_CQ\">https://www.youtube.com/watch?v=gAuvVPw6_CQ</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"gAuvVPw6_CQ\" href=\"https://www.youtube.com/watch?v=gAuvVPw6_CQ\"><img src=\"https://i.ytimg.com/vi/gAuvVPw6_CQ/default.jpg\"></a></div>",
        "id": 210388538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600349060
    },
    {
        "content": "<p>student at the university of Exeter talking about Lean to his maths society</p>",
        "id": 210388577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600349086
    },
    {
        "content": "<p>Ineresting quote from an UG mathematician: \"blackboard bold font was the main selling point for me\" (the importance of VS Code <code>\\N</code>)</p>",
        "id": 210391752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600350409
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">N</mi><mo>&gt;</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{N} &gt; \\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72521em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> IMO</p>",
        "id": 210391826,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600350446
    },
    {
        "content": "<p>Henrik Lenstra always preferred bold. He told me that bold was the notation in the books originally when notation began to be standardised, and then blackboard bold was invented for blackboards, so the correct notation when working in a non-blackboard format (e.g. print)  is bold.</p>",
        "id": 210392013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600350531
    },
    {
        "content": "<p>I liked this idea for years but now I've just bowed to the pressure. I've started using blackboard on my problem sheets.</p>",
        "id": 210392070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600350556
    },
    {
        "content": "<p>I want them to look more like Lean</p>",
        "id": 210392088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600350563
    },
    {
        "content": "<p>I always just figured it was called <strong>blackboard</strong>bold for a reason :)</p>",
        "id": 210392141,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600350588
    },
    {
        "content": "<p>So if blackboard bold <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> is the way to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">N</span></span></span></span></span> on a blackboard, then how do you write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> on a blackboard?</p>",
        "id": 210392362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600350672
    },
    {
        "content": "<p>Although I'm writing a paper now where I want to talk about decomposition groups as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">Z</mi><mrow><mi>w</mi><mi mathvariant=\"normal\">∣</mi><mi>v</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Z}_{w|v}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04131em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mtight\">∣</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span></span></span></span> and also the integers as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span></span></span></span>, so yeah....</p>",
        "id": 210392389,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600350689
    },
    {
        "content": "<p>I mean, you wouldn't want to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">N</span></span></span></span></span> confused, would you?</p>",
        "id": 210392411,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600350701
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> is how you write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">N</span></span></span></span></span> on a blackboard.</p>",
        "id": 210392427,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600350709
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mpadded width=\"0px\"><mi mathvariant=\"double-struck\">N</mi></mpadded><mrow><mspace width=\"0.2em\"></mspace><mi mathvariant=\"double-struck\">N</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathrlap{\\mathbb{N}}{\\hspace2pt\\mathbb{N}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span><span class=\"fix\"></span></span></span></span><span class=\"mord\"><span class=\"mspace\" style=\"margin-right:0.2em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span></span>.</p>",
        "id": 210392625,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600350799
    },
    {
        "content": "<p><del>I need to sharpen up my latex skills.</del> There we go.</p>",
        "id": 210392675,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600350826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/210392013\">said</a>:</p>\n<blockquote>\n<p>Henrik Lenstra always preferred bold. He told me that bold was the notation in the books originally when notation began to be standardised, and then blackboard bold was invented for blackboards, so the correct notation when working in a non-blackboard format (e.g. print)  is bold.</p>\n</blockquote>\n<p>I have a very strong opinion on this subject. It is one of the few places where I dare to disagree with Lenstra (and Serre!).</p>\n<p>Typography is the art of making things invisible. If you notice the design of some piece of text, it is distracting you from the content. If something stands out, it better be important. For that reason we <em>emphasize</em> the word that is being defined in a certain definition. For that reason, it is okay to print the word <strong>Theorem 2.1</strong> in bold when you state it (but not when you refer to it, probably).<br>\nIn my thesis I went so far as to not have <em>any</em> bold text anywhere. But I think that judicious use of bold text is fine. If a user is searching for a theorem statement, then it can help if the eye is attracted to <strong>Theorem 2.1</strong>.</p>\n<p>However, the eye need not be attracted to the symbol <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">N</span></span></span></span></span>. Of course it is a very important notion in mathematics. But probably not for the topic/page that I'm writing right now. I therefore think that the blackboard bold letters (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}, \\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.88333em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span>, etc) strike an excellent balance: they are elegant and unintrusive.</p>",
        "id": 210394441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600351557
    },
    {
        "content": "<p>Typography is usually also a very conservative art (Garamond or Baskerville, anyone?). But in this regard I'm a very progressive typographer.</p>",
        "id": 210394896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600351743
    },
    {
        "content": "<p>I agree with you Johan -- I think these historical viewpoint is outdated.</p>",
        "id": 210395403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600351981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/210395403\">said</a>:</p>\n<blockquote>\n<p>I agree with you Johan -- I think these historical viewpoint is outdated.</p>\n</blockquote>\n<p>I also agree with this, but I do think that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8805499999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Q</span></span></span></span></span> look better than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> resp. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span>.</p>",
        "id": 210395546,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600352040
    },
    {
        "content": "<p>Maybe I'm in a very small minority here...</p>",
        "id": 210395698,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600352087
    },
    {
        "content": "<p>As the UG from Exeter. Yes, I love blackboard bold font. It's so pretty and amazing.</p>",
        "id": 210399990,
        "sender_full_name": "James Arthur",
        "timestamp": 1600353897
    },
    {
        "content": "<p><a href=\"https://www.quantamagazine.org/at-the-international-mathematical-olympiad-artificial-intelligence-prepares-to-go-for-the-gold-20200921/\">https://www.quantamagazine.org/at-the-international-mathematical-olympiad-artificial-intelligence-prepares-to-go-for-the-gold-20200921/</a></p>",
        "id": 210768011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600706787
    },
    {
        "content": "<p>Regarding law formalization, new attempt on Singapore <a href=\"http://www.slaw.ca/2020/08/25/digitizing-law/\">http://www.slaw.ca/2020/08/25/digitizing-law/</a></p>",
        "id": 210792919,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1600718985
    },
    {
        "content": "<p>the IMO grand challenge seems pretty neat. are you looking for outside contributors for any part of it?</p>",
        "id": 210801940,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1600723416
    },
    {
        "content": "<p>There is a specific stream <a class=\"stream\" data-stream-id=\"208328\" href=\"/#narrow/stream/208328-IMO-grand-challenge\">#IMO-grand-challenge</a> on this Zulip</p>",
        "id": 210802274,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600723589
    },
    {
        "content": "<p>sorry, i thought I was responding to a message about the imo grand challenge posted in this channel, but it doesnt appear to make any UI difference</p>",
        "id": 210802473,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1600723692
    },
    {
        "content": "<p>No problem, I wasn't intending to redirect you, just let you know about it if you weren't aware, as I dont know the answer to what you asked!</p>",
        "id": 210803587,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600724286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> we're always looking for volunteers to translate Olympiad statements and proofs into Lean</p>",
        "id": 210805054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600725153
    },
    {
        "content": "<p>Lean is on the cover of the CACM: <a href=\"https://mags.acm.org/communications/october_2020/MobilePagedReplica.action?pm=2&amp;folio=Cover#pg1\">https://mags.acm.org/communications/october_2020/MobilePagedReplica.action?pm=2&amp;folio=Cover#pg1</a></p>\n<p>Unfortunately it's the wrong Lean. <span aria-label=\"half frown\" class=\"emoji emoji-1f615\" role=\"img\" title=\"half frown\">:half_frown:</span></p>",
        "id": 211127600,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600952664
    },
    {
        "content": "<p>Lean and mathlib make an appearance toward the end of a <a href=\"https://writings.stephenwolfram.com/2020/09/the-empirical-metamathematics-of-euclid-and-beyond/\">long blog post</a> from Wolfram. Skip to \"Math beyond Euclid\" if you just care about the Lean part!</p>",
        "id": 211516466,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601310901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> may be interested as there's a focus on Euclidean geometry.</p>",
        "id": 211516595,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601310962
    },
    {
        "content": "<p>\" What if one’s axiomatic structure seems great, but implies a few silly results, 1/0 = 0?\"</p>",
        "id": 211517350,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601311325
    },
    {
        "content": "<p>lol, he linked to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_geometry.dist_square_eq_dist_square_add_dist_square_iff_angle_eq_pi_div_two\">docs#euclidean_geometry.dist_square_eq_dist_square_add_dist_square_iff_angle_eq_pi_div_two</a></p>",
        "id": 211523465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601314144
    },
    {
        "content": "<p>I feel like this theorem is making a joke of our naming convention</p>",
        "id": 211523538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601314175
    },
    {
        "content": "<p>yeah but check out the shading</p>",
        "id": 211523756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601314271
    },
    {
        "content": "<p>I think the joke goes the other way with <code>add_pow</code></p>",
        "id": 211523813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601314299
    },
    {
        "content": "<p>There were the discussions of whether we should use <code>sq</code> everywhere in place of <code>square</code>, which would make that name twelve characters shorter.</p>",
        "id": 211539120,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1601321644
    },
    {
        "content": "<p>I don't think we use <code>square</code> elsewhere</p>",
        "id": 211539192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601321688
    },
    {
        "content": "<p>there are a decent number of hits for <code>sq</code>, as well as <code>pow_two</code> and <code>mul_self</code>, which are more specific about the representation</p>",
        "id": 211539358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601321771
    },
    {
        "content": "<p>This discussion of Pythagoras in Euclid vs MetaMath and Lean is so ridiculous. He should read Kevin's blog.</p>",
        "id": 211539440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601321835
    },
    {
        "content": "<p>but actually in this case I would simplify it quite a bit more than that, perhaps <code>euclidean_geometry.pythag_dist_iff_angle</code></p>",
        "id": 211539577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601321905
    },
    {
        "content": "<p>I probably got <code>square</code> from <code>inner_self_eq_norm_square</code> (but there are other uses, e.g. <code>cos_square</code>).</p>",
        "id": 211539620,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1601321929
    },
    {
        "content": "<p>I see a lot of hits for <code>norm_sq</code> but that's actually a separate function from <code>norm * norm</code></p>",
        "id": 211539726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601321986
    },
    {
        "content": "<p>what is the reason that this theorem is presented using <code>x * x</code> instead of <code>x ^ 2</code>? I honestly feel bad for wolfram looking for the pythagorean theorem and finding such an unfamiliar looking statement with a crazy name</p>",
        "id": 211539948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601322114
    },
    {
        "content": "<p>Should we change the name and break the link in the blog post already? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211540090,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601322167
    },
    {
        "content": "<p>Yeah!</p>",
        "id": 211540100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601322174
    },
    {
        "content": "<p>oh wow, <code>inner_product_geometry.norm_sub_square_eq_norm_square_add_norm_square_sub_two_mul_norm_mul_norm_mul_cos_angle</code> is 110 characters</p>",
        "id": 211540266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601322249
    },
    {
        "content": "<p>More seriously, I would be really nice to make sure the docs website uses notations. The <a href=\"https://github.com/leanprover-community/mathlib/blob/50dbce9/src/geometry/euclidean/triangle.lean#L300-L302\">actual source code</a> looks much better.</p>",
        "id": 211540352,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601322302
    },
    {
        "content": "<p>Multiplication seems a bit more convenient to work with. If we wish to say <code>^ 2</code> is the preferred form in mathlib, it probably ought to be used in other places as well, such as <code>inner_self_eq_norm_square</code>. (Some inner product lemmas exist in both forms.)</p>",
        "id": 211540386,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1601322317
    },
    {
        "content": "<p>well I would say to prefer x ^ 2 because it is shorter and nicer looking, and add the x * x version if and when it leads to proof savings due to heavy use in that form</p>",
        "id": 211540540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601322377
    },
    {
        "content": "<p>For certain theorems in algebra.ring it makes sense to have the x * x version but we don't need every variation on every theorem</p>",
        "id": 211540611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601322419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/211540090\">said</a>:</p>\n<blockquote>\n<p>Should we change the name and break the link in the blog post already? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>I think you can edit blog posts</p>",
        "id": 211540777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601322487
    },
    {
        "content": "<p>I wonder how we can capture local notations in docgen; that sounds hard</p>",
        "id": 211540979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601322597
    },
    {
        "content": "<p>The angle notation is local because that was requested in review when I first defined angles, but I'm not sure either angles or pi need to be local notations.</p>",
        "id": 211541207,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1601322692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/211540979\">said</a>:</p>\n<blockquote>\n<p>I wonder how we can capture local notations in docgen; that sounds hard</p>\n</blockquote>\n<p>I doubt it's doable without changes in C++. We have functions to get the environment at the point of a certain decl, but I don't think we can locally change the environment to run a tactic.</p>",
        "id": 211541305,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601322739
    },
    {
        "content": "<p>Maybe pi should be local notation at least: <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/pi_n.lean#L69\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/pi_n.lean#L69</a></p>",
        "id": 211541358,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601322768
    },
    {
        "content": "<p>I think pi = 3.14... should not be global; the symbol is often used for projections in (eg) differential geometry</p>",
        "id": 211541380,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601322781
    },
    {
        "content": "<p>Oh, wait, maybe we can. Don't the simp linters do something like this?</p>",
        "id": 211541386,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601322784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/211541358\">said</a>:</p>\n<blockquote>\n<p>Maybe pi should be local notation at least: <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/pi_n.lean#L69\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/pi_n.lean#L69</a></p>\n</blockquote>\n<p>snap</p>",
        "id": 211541392,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601322788
    },
    {
        "content": "<p>I'm not saying we shouldn't use local notations, in fact almost every notation used in mathlib is either local or localized (which is the same as a local notation to lean). But that means that we have to do something radical to get these notations in docgen</p>",
        "id": 211541644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601322884
    },
    {
        "content": "<p>What ever happened to <code>lean --doc</code>?</p>",
        "id": 211541874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601322986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/211541305\">said</a>:</p>\n<blockquote>\n<p>I doubt it's doable without changes in C++. We have functions to get the environment at the point of a certain decl, but I don't think we can locally change the environment to run a tactic.</p>\n</blockquote>\n<p>You can write a function to open all locales, so that at least you print all localized notation. That should already be a big improvement. And we can even encourage authors to use localized notation even if it's for a single file to display them nicely in the docs.</p>",
        "id": 211541911,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601322999
    },
    {
        "content": "<p>Aha, will lean do that? I haven't tried opening conflicting local notations before</p>",
        "id": 211541997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601323041
    },
    {
        "content": "<p>I think it will be a nightmare to parse anything in that case, but probably printing will go fine.</p>",
        "id": 211542053,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601323064
    },
    {
        "content": "<p>That's probably the easiest option here.</p>",
        "id": 211542135,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601323094
    },
    {
        "content": "<p>Does anyone know what <a href=\"https://leanprover-community.github.io/mathlib_docs/core/init/meta/module_info.html\">https://leanprover-community.github.io/mathlib_docs/core/init/meta/module_info.html</a> was added for?</p>",
        "id": 211542153,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601323103
    },
    {
        "content": "<p>I thought it was the simp linters but I don't see it used.</p>",
        "id": 211542204,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601323131
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blame/master/library/init/meta/module_info.lean\">https://github.com/leanprover-community/lean/blame/master/library/init/meta/module_info.lean</a></p>",
        "id": 211542237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601323150
    },
    {
        "content": "<p>Presumably Gabriel knows.</p>",
        "id": 211542251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601323157
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/88\">https://github.com/leanprover-community/lean/pull/88</a></p>",
        "id": 211542274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601323169
    },
    {
        "content": "<p>Aha</p>",
        "id": 211542573,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601323313
    },
    {
        "content": "<p>If someone would like to figure out what shorter names for everything should be, feel free to rename things (you'll probably want to do some renaming in inner product code alongside that for geometry). Likewise for shorter statements using <code>^ 2</code> (which might indicate a few lemmas elsewhere that could do with <code>^ 2</code> variants, but I expect the geometry lemmas themselves should only be stated with one of <code>^ 2</code> or <code>*</code>, not in both variants).</p>",
        "id": 211543030,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1601323482
    },
    {
        "content": "<p>It would definitely be helpful for the style and naming conventions documentation to discuss these issues, however. (Conventions for choosing between multiple equivalent forms of a statement, and conventions for when you find the normal naming conventions produce a very long name.)</p>",
        "id": 211543537,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1601323694
    },
    {
        "content": "<p>If anyone wants to change name, could you please wait until <a href=\"https://github.com/leanprover-community/mathlib/issues/4057\">#4057</a> is merged (which hopefully shouldn't be long now) to avoid conflicts?</p>",
        "id": 211543649,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1601323750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/211539440\">said</a>:</p>\n<blockquote>\n<p>This discussion of Pythagoras in Euclid vs MetaMath and Lean is so ridiculous. He should read Kevin's blog.</p>\n</blockquote>\n<p>Which Xena post are you referring to?</p>",
        "id": 211551454,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1601327689
    },
    {
        "content": "<p>The latest one</p>",
        "id": 211551545,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601327759
    },
    {
        "content": "<p>It's called \"Thoughts on the Pythagorean theorem\".</p>",
        "id": 211551602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601327774
    },
    {
        "content": "<p>Ah!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/211541874\">said</a>:</p>\n<blockquote>\n<p>What ever happened to <code>lean --doc</code>?</p>\n</blockquote>\n<p>I think it's <a href=\"https://github.com/leanprover-community/lean/issues/465#issuecomment-695979451\">about to go</a>, as metaprogramming turned out to be a better approach.</p>",
        "id": 211551821,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1601327934
    },
    {
        "content": "<p>For the lazy: <a href=\"https://xenaproject.wordpress.com/2020/09/19/thoughts-on-the-pythagorean-theorem/\">https://xenaproject.wordpress.com/2020/09/19/thoughts-on-the-pythagorean-theorem/</a></p>",
        "id": 211552758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601328504
    },
    {
        "content": "<p>There is probably still value in quantifying the differences in complexity between less-or-more synthetic proofs of morally the same theorem, and even more value in comparing them between different low-level formal systems.</p>",
        "id": 211555886,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1601330381
    },
    {
        "content": "<p>Well, if you wanted to make a fair comparison you would do a synthetic proof of the pythagorean theorem in lean</p>",
        "id": 211556108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601330507
    },
    {
        "content": "<p>and then it wouldn't bring the entire library along with it as dependency</p>",
        "id": 211556202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601330544
    },
    {
        "content": "<p>Indeed, if you wanted to compare a synthetic proof in Euclid vs a synthetic proof in Lean. What we can take OP to be, though, is a quantitative comparison of a synthetic proof with a fully unfolded one (modulo <code>tactic</code> modules and so on). Whether that was or wasn't the author's intention is of course another matter.</p>",
        "id": 211557273,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1601331242
    },
    {
        "content": "<p>I am reminded of the <a href=\"http://us.metamath.org/mpeuni/mmset.html#trivia\">2+2=4 page</a> on metamath, which talks about the number of steps needed to prove 2+2=4. Depending on how you count, it's either around 5-10, or a few hundred, or ~30000, or ~10^400</p>",
        "id": 211558110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601331815
    },
    {
        "content": "<p>which is to say, <em>it's really important how you count</em></p>",
        "id": 211558140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601331840
    },
    {
        "content": "<p>I think this example makes it really clear that the measure says far more about your measurement apparatus than the object under study. Those numbers are not specific to the example 2+2=4</p>",
        "id": 211558476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601332070
    },
    {
        "content": "<p>Thanks, that's some fun trivia! Yeah, to measure how much more orange oranges are than apples you need a good notion of colour and perhaps Wolfram's isn't, but I would still think that such comparisons could be made, at least in principle.</p>",
        "id": 211560722,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1601333616
    },
    {
        "content": "<p>It is possible to make such comparisons, but you have to control for a lot of factors. I recommend Freek's paper on the <a href=\"http://www.cs.ru.nl/~freek/factor/\">de Bruijn factor</a></p>",
        "id": 211563949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601335963
    },
    {
        "content": "<p>Here's a funny idea. For people who are expecting things like binomial_theorem or pythagorean_theorem we could capitalise and define the term to mean the <em>statement</em> of the theorem</p>",
        "id": 211615873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601383955
    },
    {
        "content": "<p>Once the theorem is proved in informal pdf land, the name becomes stamped on both the theorem and the proof so mathematicians are already confused about this sort of thing</p>",
        "id": 211615964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601384024
    },
    {
        "content": "<p>I'm tempted! I'm a bit concerned about how we'd get from \"here\" to \"there\". How do we decide which theorems deserve named statements? Do we do that gradually? Do we allow the \"definition of a statement\" without the proof?</p>",
        "id": 211700291,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601424116
    },
    {
        "content": "<p>I think that we can allow \"well-known\"names as aliases</p>",
        "id": 211702981,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601426405
    },
    {
        "content": "<p>I've said this elsewhere, but I think that for \"named\" theorems we should use the names, modified as appropriate to indicate syntactic differences when there are multiple versions of a theorem. The symbol-based name is only useful if that's the main identifying feature of the theorem, which makes it good for things like group lemmas but not so good for advanced maths theorems</p>",
        "id": 211703108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601426557
    },
    {
        "content": "<p>That is, we should ask the question \"what is the most likely way someone is going to attempt to find this theorem\" and name the theorem after the identifying features in the head of that hypothetical someone</p>",
        "id": 211703200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601426650
    },
    {
        "content": "<p><a href=\"https://www.quantamagazine.org/building-the-mathematical-library-of-the-future-20201001/\">https://www.quantamagazine.org/building-the-mathematical-library-of-the-future-20201001/</a></p>",
        "id": 211936760,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601569679
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/qZc-shfqTuyJDyuZ4wbbLrpv/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qZc-shfqTuyJDyuZ4wbbLrpv/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/qZc-shfqTuyJDyuZ4wbbLrpv/image.png\"></a></div>",
        "id": 211936850,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601569705
    },
    {
        "content": "<p>The big image at the top of the article is like one of those \"What I think I do\" memes</p>",
        "id": 211939051,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601570820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/211939051\">said</a>:</p>\n<blockquote>\n<p>The big image at the top of the article is like one of those \"What I think I do\" memes</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/3-QKWaK9S7zZLta8cITF78At/lean-meme-2.jpg\">lean-meme-2.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3-QKWaK9S7zZLta8cITF78At/lean-meme-2.jpg\" title=\"lean-meme-2.jpg\"><img src=\"/user_uploads/3121/3-QKWaK9S7zZLta8cITF78At/lean-meme-2.jpg\"></a></div>",
        "id": 211946917,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1601574060
    },
    {
        "content": "<p>Just reading the \"hacker-proof code\" article and I love the correction at the end:</p>\n<blockquote>\n<p>Correction: This article was revised on September 21 to clarify that in formally verified software, each statement follows logically from the preceding one, not from the next. </p>\n</blockquote>",
        "id": 211949331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601575197
    },
    {
        "content": "<p>Perhaps they took \"backwards reasoning\" too literally?</p>",
        "id": 211993688,
        "sender_full_name": "Chris Wong",
        "timestamp": 1601599928
    },
    {
        "content": "<p>I'm glad they clarified.  I also find it funny the article is called \"Hacker-Proof Code Confirmed\", and has the quote “We are much more clear about what we can and cannot do.”</p>\n<p>Formal methods can show code satisfies specific properties, but it's pretty much impossible to formalize what it means for a complex system to be \"hacker proof\".</p>",
        "id": 212041746,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1601624455
    },
    {
        "content": "<p>Scott Aaronson <a href=\"https://www.scottaaronson.com/blog/?p=4974#comment-1863567\">wrote</a>:</p>\n<blockquote>\n<p>Matt <a href=\"https://github.com/leanprover-community/mathlib/issues/24\">#24</a>:</p>\n<blockquote>\n<p>Are you aware of the Flypitch project? They recently completed a formal proof of the independence of CH using the Lean theorem prover, which I thought was pretty cool.</p>\n</blockquote>\n<p>Yes, I came across that in my reading on the subject, and was duly impressed!</p>\n</blockquote>",
        "id": 215229831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604211256
    },
    {
        "content": "<p>The quanta article is on HN again: <a href=\"https://news.ycombinator.com/item?id=25060613#25066033\">https://news.ycombinator.com/item?id=25060613#25066033</a></p>",
        "id": 216431172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605161087
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/questions/376839/what-makes-dependent-type-theory-more-suitable-than-set-theory-for-proof-assista/\">https://mathoverflow.net/questions/376839/what-makes-dependent-type-theory-more-suitable-than-set-theory-for-proof-assista/</a></p>",
        "id": 217397069,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605877059
    },
    {
        "content": "<p>Wow, Andrej's answer is really good!</p>",
        "id": 217399235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605878324
    },
    {
        "content": "<p>I like the last one as well</p>",
        "id": 217403605,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1605880687
    },
    {
        "content": "<p>so far no one except Kevin just now has tried to answer the actual question being asked</p>",
        "id": 217404446,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605881045
    },
    {
        "content": "<p>Is it really true that metamath doesn't have stuff like <code>ring</code>? I thought some of our tactics were basically ported from metamath by Mario. I know they aren't part of the metamath \"core system\" (whatever that means) but it doesn't mean external automation doesn't exist.</p>",
        "id": 217404703,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605881164
    },
    {
        "content": "<p>Kevin, in the downvoted answer, pretty much every sentence contains a statement which is either false or meaningless</p>",
        "id": 217405846,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605881814
    },
    {
        "content": "<p>It is also comparing Lean to HoTT, instead of to a system that implements HoTT.</p>",
        "id": 217406312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605882031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> It is strictly true that metamath + addons doesn't have the <code>ring</code> tactic, but that's mostly because the lack of it wasn't painful enough for me to get off my butt and write it. It does have <code>norm_num</code> which works on almost exactly the same principle. It wasn't painful enough for me in lean either, but it was for Kevin, so <code>ring</code> was born. There is no metamath kevin</p>",
        "id": 217453496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605903307
    },
    {
        "content": "<p>Speaking of which, I invite anyone to crash the metamath mailing list and chip in on <a href=\"https://groups.google.com/g/metamath/c/6fQ_GxnPAWI\">this proposal</a> for a new metamath proof assistant. If you have considered metamath but found it too difficult to use, what are the things you would like to see in a proof assistant for it?</p>",
        "id": 217453889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605903521
    },
    {
        "content": "<p>FWIW I tried out MMJ2 but gave up after running into various text editing bugs. So I think something fairly minimal that runs in VS Code would get me interested enough to experiment more with metamath. I'm also happy to be a guinea pig if there's something with MM0 / MM1 that's worth trying out now, since I cloned the repo and set it up at one point but wasn't sure what I should do with it.</p>",
        "id": 217455243,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605904304
    },
    {
        "content": "<p>You should be able to view and edit the .mm1 files in the MM0 repo if you install mm0-rs and the vscode extension</p>",
        "id": 217456917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605905308
    },
    {
        "content": "<p>what I learned from MMJ2 development (which I also mention in that post) is to never write your own text editor. It's way too much work and the result will be crap unless that's your only goal</p>",
        "id": 217457056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605905404
    },
    {
        "content": "<p>Wait -- aren't you writing a theorem prover? That's easier?</p>",
        "id": 217462420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605908450
    },
    {
        "content": "<p>A text editor looks simple, but it has really strict performance constraints. Syntax highlighting was my white whale in mmj2. Getting it to work smoothly while being semantically aware is tremendously complex; I totally understand why all the standard syntax highlighters are dumb regexes now</p>",
        "id": 217463012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605908844
    },
    {
        "content": "<p>When you are just a server like lean or mm0-rs, you can let the editor do the UI work while you chug along at whatever pace you need, and then report errors later. If the UI thread got blocked while lean was working, it would be absolutely unusable</p>",
        "id": 217463365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605909068
    },
    {
        "content": "<p>I'm pretty sure lean is smaller than vscode in terms of lines of code</p>",
        "id": 217463548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605909181
    },
    {
        "content": "<p>Maybe we should rewrite VScode in Lean... would certainly save some lines of code <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 217463620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605909237
    },
    {
        "content": "<p>plus even vscode isn't doing the heavy lifting for UI work, it's an electron app, meaning it's leveraging a browser engine</p>",
        "id": 217463673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605909249
    },
    {
        "content": "<p>mmj2 uses a \"collaborative editing\" model, where you type some stuff, press a button and the computer edits the same text you are writing to insert more information. This makes it somewhat synchronous by design; after you press the button you need to wait for the result or else your input will be clobbered. Syntax highlighting works at an even higher frequency; it basically needs to run any time you type a character or even scroll around. Java text boxes weren't really designed to support that, and the result is super janky as Brian observed</p>",
        "id": 217464397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605909676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/217453889\">said</a>:</p>\n<blockquote>\n<p>Speaking of which, I invite anyone to crash the metamath mailing list and chip in on <a href=\"https://groups.google.com/g/metamath/c/6fQ_GxnPAWI\">this proposal</a> for a new metamath proof assistant. If you have considered metamath but found it too difficult to use, what are the things you would like to see in a proof assistant for it?</p>\n</blockquote>\n<p>I haven't forgotten about this... I'm just too busy atm <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>  (I hope it will be better in February <span aria-label=\"worried\" class=\"emoji emoji-1f61f\" role=\"img\" title=\"worried\">:worried:</span>)</p>\n<p>One question: is Metamath Zero sufficiently different from classical Metamath that it can't be pitched as the next great Metamath verifier?</p>\n<p>One of my biggest \"problems\" with metamath is I think readability. Lean is pretty unique, in the sense that you can give a pseudorandom theorem statement to a mathematician who doesn't know Lean, and then they can understand the statement. (The definition of a group is completely understandable, infinitude of primes is very readable.) With metamath, I know that you shouldn't try to read the source code, but even the dedicated website that renders the readable form is not really readable to me.<br>\nSo I guess that my point is: readability (of at least one rendered form of the library) is <em>extremely</em> important. I can now barely read coq, but I don't like their ascii-art syntax either. Lean really hit a sweet spot here, in my opinion.</p>\n<p>Just my two lay cents.</p>",
        "id": 217589752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606107737
    },
    {
        "content": "<blockquote>\n<p>One question: is Metamath Zero sufficiently different from classical Metamath that it can't be pitched as the next great Metamath verifier?</p>\n</blockquote>\n<p>It's a different formal system, which means that none of the accumulated metamath verifiers over the years will verify .mm0 files. So it's a question of whether to migrate to the new system, which is kind of an all or nothing proposition. That thread is concerned with how to integrate with the existing language, so that it can be used to help develop <a href=\"http://set.mm\">set.mm</a>, for example.</p>\n<blockquote>\n<p>One of my biggest \"problems\" with metamath is I think readability. Lean is pretty unique, in the sense that you can give a pseudorandom theorem statement to a mathematician who doesn't know Lean, and then they can understand the statement. (The definition of a group is completely understandable, infinitude of primes is very readable.) With metamath, I know that you shouldn't try to read the source code, but even the dedicated website that renders the readable form is not really readable to me.</p>\n</blockquote>\n<p>The state of the art of metamath rendering right now is the \"structured view\" that you can see in examples like <a href=\"http://metamath.tirix.org/fsumf1o.html\">http://metamath.tirix.org/fsumf1o.html</a> . (There is a \"structured view\" button in the top right of any metamath web page, but note that these files are hosted on an external website so sometimes the pages are missing.) Some of the plans I discuss in the thread have the possibility to improve rendering by associating notation to constructs in a tree-structured way, something that metamath.exe has historically not been able to do, limiting it to sequences of GIF images that you usually see (I think unicode is the new default though).</p>\n<p>The other reason you might find metamath web pages unreadable is the high density of symbols due to the presentation style that puts every step on a separate line. I'm sure if you presented lean proofs like this it would also be quite dense (generally single lean steps take up a whole page for the context, so the full thing would be huge). I can imagine a variety of tool assisted ways to make this more focused. Perhaps we can do something like the lean tactic view, where you see one step at a time and can scroll around; I'm not sure how effective this would be.</p>",
        "id": 217592833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606112813
    },
    {
        "content": "<p>But MM0 can verify all of <code>set.mm</code>, and it's fast. Is the difference between <code>set.mm</code> and <code>set.mm0</code> so big that it would be a big hurdle for the metamath community to jump over? Apparently yes. I'm too much of an outsider to really help here.<br>\nBut mm0 has a couple of major benefits (like mmc, etc) that you would loose if you would start building a new version of mm, right?</p>",
        "id": 217593512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606113818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Here's a more precise question: would it be possible to do lossless bidirectional translation between <code>set.mm</code> and the MM0 version?</p>",
        "id": 217594353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606115023
    },
    {
        "content": "<p>Not without some extra hacks or annotations. Metamath can express some things that MM0 can't</p>",
        "id": 217594417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606115102
    },
    {
        "content": "<p>in particular ambiguously parsable expressions and bound variables that may or may not be distinct</p>",
        "id": 217594432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606115160
    },
    {
        "content": "<p>set.mm0 is not very easy to read right now, as it loses all metamath notations</p>",
        "id": 217594511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606115263
    },
    {
        "content": "<p>also comments but that's not so hard to fix</p>",
        "id": 217594534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606115282
    },
    {
        "content": "<p>Aah, I just see that you answered this in the google groups thread:</p>\n<blockquote>\n<p>One issue is that MM1 is a proof assistant for MM0, it doesn't currently support MM. One way I would like to support this is to be able to \"import \"<a href=\"http://foo.mm\">foo.mm</a>\";\" in an MM1 file, which will convert the MM theorems into MM1 and import them into the current file; this will make it easy to build on <a href=\"http://set.mm\">set.mm</a> from within an MM0 development, but it doesn't \"give back\" to the MM database, it is a one way conversion (at least so far), and even if the reverse conversion were added it would probably not be the inverse map, resulting in ugly proofs after round-tripping.</p>\n</blockquote>",
        "id": 217594536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606115282
    },
    {
        "content": "<p>I will read through that entire thread before opening my mouth again <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 217594580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606115325
    },
    {
        "content": "<p>The plan for now is to instead use mm0-rs the proof assistant, but \"swap out the foundation\" on it so that it works with metamath rules</p>",
        "id": 217594608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606115367
    },
    {
        "content": "<p>this might require some minor syntax changes but I think the majority of the UI can stay the same</p>",
        "id": 217594624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606115401
    },
    {
        "content": "<p>Not really lean, but I'm excited to unveil the new <a href=\"https://digama0.github.io/mm0/peano/thms/addass.html\">MM0 doc-gen</a> HTML pages. I would be happy to take suggestions and modifications from some of the web-savvy folks behind the mathlib docs, because web design isn't my strong suit. Also ideas for more interactivity would be great.</p>",
        "id": 218048959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606439020
    },
    {
        "content": "<p>More Buzzard propaganda: <a href=\"https://www.ams.org/journals/notices/202011/rnoti-p1791.pdf\">https://www.ams.org/journals/notices/202011/rnoti-p1791.pdf</a></p>",
        "id": 218166254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606573443
    },
    {
        "content": "<p>The link to the web editor on the right column of page 1794 (p.4 in the PDF) does not seem to work.</p>",
        "id": 218166683,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1606574155
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 218167302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606575075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <code>We will now see about how Lean understands these concepts.</code> Should that \"about\" be there?</p>",
        "id": 218170334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606579993
    },
    {
        "content": "<p>That sentence does look a bit funny, yes</p>",
        "id": 218170716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606580689
    },
    {
        "content": "<p>Stupid old media. I guess I just have to get in touch with AMS</p>",
        "id": 218170722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606580714
    },
    {
        "content": "<p><code>contains over a quarter of a million lines of code</code> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 218170832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606580913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You might want to update your mathlib (-;</p>",
        "id": 218170836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606580928
    },
    {
        "content": "<p>It's a bit over 270k lines of non-whitespace, non-comment code in the src directory!</p>",
        "id": 218171274,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606581662
    },
    {
        "content": "<p>ok, fair enough</p>",
        "id": 218172504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606583644
    },
    {
        "content": "<p>Nice touch that they used a picture of Martijn Heules work as background image for the \"ad\" next to your article.</p>",
        "id": 218172538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606583721
    },
    {
        "content": "<p>Coming soon to the Stedelijk Museum. ;)</p>",
        "id": 218180886,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1606597562
    },
    {
        "content": "<p>I happened on <a href=\"https://rjlipton.wordpress.com/2020/12/10/the-future-of-mathematics/\">an interesting blog post by Richard Lipton</a> on <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s Notices article. Aside from calling Lean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi mathvariant=\"normal\">∃</mi><mi mathvariant=\"normal\">∀</mi><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">L \\exists \\forall N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">∃</span><span class=\"mord\">∀</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>, he also expresses some skepticism about \"formal verification as the answer to correctness\", though the post ultimately ends on a hopeful note.</p>",
        "id": 220855018,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1608796225
    },
    {
        "content": "<p>I see an opportunity for a new meme: \"Lean is like marmite\"...</p>",
        "id": 220856294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608798147
    },
    {
        "content": "<blockquote>\n<p>How about we insist that claimed proofs of P{=}NP or other famous conjectures must be presented using L\\exists \\forall N.</p>\n</blockquote>\n<p>This sounds great until you realize all these people would be coming here to Zulip and likely complaining why Lean can’t obviously handle their proof. <span aria-label=\"slight frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"slight frown\">:slight_frown:</span></p>",
        "id": 220869485,
        "sender_full_name": "Jason Rute",
        "timestamp": 1608815986
    },
    {
        "content": "<p>Although to his credit, when the Princeton logician Edward Nelson thought he had a proof of the inconsistency of Peano Arithmetic he did plan to formalize it knowing that no one would believe him otherwise.  (Luckily, in that case Terry Tao and others spotted an error in his logic after he stated the proof outline, and he retracted his claim.)</p>",
        "id": 220869733,
        "sender_full_name": "Jason Rute",
        "timestamp": 1608816262
    },
    {
        "content": "<p>I still don't get why we americans are so tickled by slight differences in British English.</p>",
        "id": 220871677,
        "sender_full_name": "Julian Berman",
        "timestamp": 1608818681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/220869733\">said</a>:</p>\n<blockquote>\n<p>Although to his credit, when the Princeton logician Edward Nelson thought he had a proof of the inconsistency of Peano Arithmetic he did plan to formalize it knowing that no one would believe him otherwise.  (Luckily, in that case Terry Tao and others spotted an error in his logic after he stated the proof outline, and he retracted his claim.)</p>\n</blockquote>\n<p>This is exactly why pure mathematicians don't need theorem provers to do research -- the elders can play the game well enough in their heads.</p>",
        "id": 220872349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608819525
    },
    {
        "content": "<p>Doing maths in your head is far more efficient because you don't have to get bogged down in the tedious details which the tactics still can't do but which the human knows will all work out fine (and are 99.99% likely to be correct).</p>",
        "id": 220872448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608819649
    },
    {
        "content": "<p>Ugh, I can barely read this because of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi mathvariant=\"normal\">∃</mi><mi mathvariant=\"normal\">∀</mi><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">L\\exists\\forall N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">∃</span><span class=\"mord\">∀</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> nonsense. He even writes that two words before the official blurb which says \"Lean.\"</p>",
        "id": 220875803,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608823897
    },
    {
        "content": "<p>Since I don't see it mentioned here ... <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you're also at the top of /r/math in Quanta's The Year's Biggest Breakthroughs in Math &amp; Computer Science -- <a href=\"https://www.youtube.com/watch?v=HL7DEkXV_60\">https://www.youtube.com/watch?v=HL7DEkXV_60</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"HL7DEkXV_60\" href=\"https://www.youtube.com/watch?v=HL7DEkXV_60\"><img src=\"https://i.ytimg.com/vi/HL7DEkXV_60/default.jpg\"></a></div>",
        "id": 220876726,
        "sender_full_name": "Julian Berman",
        "timestamp": 1608825096
    },
    {
        "content": "<p>Oh wow!</p>",
        "id": 220878043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608826402
    },
    {
        "content": "<p>Did you know that when you recorded the recording? <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 220878102,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608826471
    },
    {
        "content": "<p>I had not realised that they were going to do that with it. I was told that it would be \"part of an end-of-year round-up\".</p>",
        "id": 220878592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608827095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/220876726\">said</a>:</p>\n<blockquote>\n<p>Since I don't see it mentioned here ... <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> you're also at the top of /r/math in Quanta's The Year's Biggest Breakthroughs in Math &amp; Computer Science -- <a href=\"https://www.youtube.com/watch?v=HL7DEkXV_60\">https://www.youtube.com/watch?v=HL7DEkXV_60</a></p>\n</blockquote>\n<p>I joined this chat after watching that video by quanta magazine. I've always felt a need for something like Library of Mathematics to help me learn and fill the gaps in my knowledge. And watching Kevin in that video got me real excited about Lean, and I went through whatever links related to lean I could find haha</p>",
        "id": 220882452,
        "sender_full_name": "Faez",
        "timestamp": 1608831853
    },
    {
        "content": "<p>As someone's whose gaps in knowledge span most of an undergrad mathematics degree, I've found that using lean to fill those gaps often results in me using names for things that confuse \"real\" mathematicians</p>",
        "id": 220884705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608834877
    },
    {
        "content": "<p>ooh... is that good or bad news? would you mind giving some examples?</p>",
        "id": 220884736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608834937
    },
    {
        "content": "<p>I could probably pull up the zulip thread, but I don't remember the context</p>",
        "id": 220884924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608835231
    },
    {
        "content": "<blockquote>\n<p>As someone's whose gaps in knowledge span most of an undergrad mathematics degree, I've found that using lean to fill those gaps often results in me using names for things that confuse \"real\" mathematicians</p>\n</blockquote>\n<p>To be fair, \"real\" mathematicians also have differing conventions all the time, so I don't really see anything wrong with that</p>",
        "id": 221067928,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1609169316
    },
    {
        "content": "<p>Christian Szegedy just expressed interest in learning Lean.  <a href=\"https://twitter.com/ChrSzegedy/status/1346189173196087296\">https://twitter.com/ChrSzegedy/status/1346189173196087296</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/ChrSzegedy/status/1346189173196087296\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/909267923687968768/g1HLJMp9_normal.jpg\"></a><p>Looking forward to learning Lean. <a href=\"https://t.co/USu1LiTqyO\">https://twitter.com/leanprover/status/1346184109035552769</a></p><span>- Christian Szegedy (@ChrSzegedy)</span></div></div>",
        "id": 221678434,
        "sender_full_name": "Jason Rute",
        "timestamp": 1609869051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306293\">@Carl Friedrich Bolz-Tereick</span> just mentioned (on an unrelated Twitch stream) that Mark Dickinson, who wrote Python 3.8's new <code>math.isqrt</code> function for computing integer-valued square roots, also wrote a Lean proof that it's correct: <a href=\"https://github.com/mdickinson/snippets/blob/master/proofs/isqrt/src/isqrt.lean\">https://github.com/mdickinson/snippets/blob/master/proofs/isqrt/src/isqrt.lean</a></p>",
        "id": 222189597,
        "sender_full_name": "Julian Berman",
        "timestamp": 1610226017
    },
    {
        "content": "<p>This is cool and well-documented! (An updated version would fit nicely into mathlib's <code>archive/</code>. Too bad there's no license.)</p>",
        "id": 222189822,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610226331
    },
    {
        "content": "<p>Mark is my mathematical brother (we share an advisor), and he was hanging out on the zulip a year or two ago asking questions about this.</p>",
        "id": 222189830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610226355
    },
    {
        "content": "<p>/me waves</p>",
        "id": 222189880,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1610226382
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/questions/382239/proof-that-a-cartesian-category-is-monoidal\">https://mathoverflow.net/questions/382239/proof-that-a-cartesian-category-is-monoidal</a><br>\nis this the first time someone has answered an MO question in this way?</p>",
        "id": 224157100,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611739792
    },
    {
        "content": "<p>/me logs in to upvote</p>",
        "id": 224157257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611739872
    },
    {
        "content": "<p>In about 7 hours, at 3pm EST (UTC-5) on Zoom, I'm going to give a talk at the Harvard New Technologies in Mathematics seminar on our machine learned Lean <code>gptf</code> tactic and the PACT method we use to train the current version.  (My understanding is that a number of members of that seminar have been learning Lean.)  There will be a demo of <code>gptf</code>.  Here is <a href=\"https://cmsa.fas.harvard.edu/3-3-2021-new-tech-in-math/\">the abstract and Zoom link</a>. I also think it will be recorded and put on YouTube.  I think the best place to discuss this will be at the <a class=\"stream\" data-stream-id=\"274007\" href=\"/#narrow/stream/274007-lean-gptf\">#lean-gptf</a> stream (but we will be happy to field questions anywhere).</p>",
        "id": 228589279,
        "sender_full_name": "Jason Rute",
        "timestamp": 1614777615
    },
    {
        "content": "<p>Can you share the link of the YouTube video??</p>",
        "id": 228711393,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1614829358
    },
    {
        "content": "<p>I think they usually take a few days to upload them but it should end up on <a href=\"https://youtube.com/playlist?list=PL0NRmB0fnLJQJ3fuIk3yVULtm6_JnQ_zI\">https://youtube.com/playlist?list=PL0NRmB0fnLJQJ3fuIk3yVULtm6_JnQ_zI</a></p>",
        "id": 228716089,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1614832905
    },
    {
        "content": "<p>Looks like its now up <a href=\"https://www.youtube.com/watch?v=EXpmbAfBNnw&amp;ab_channel=HarvardCMSA\">https://www.youtube.com/watch?v=EXpmbAfBNnw&amp;ab_channel=HarvardCMSA</a> <span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"EXpmbAfBNnw\" href=\"https://www.youtube.com/watch?v=EXpmbAfBNnw&amp;ab_channel=HarvardCMSA\"><img src=\"https://i.ytimg.com/vi/EXpmbAfBNnw/default.jpg\"></a></div>",
        "id": 228966051,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1614956067
    },
    {
        "content": "<p>Also there are slides <a href=\"https://cmsa.fas.harvard.edu/wp-content/uploads/2021/03/LeanStep-Talk-New-Technology-in-Mathematics-Seminar.pdf\">here</a>.</p>",
        "id": 229042733,
        "sender_full_name": "Jason Rute",
        "timestamp": 1614987419
    },
    {
        "content": "<p>We'd love for you to try out the tool.  Join the discussion at <a class=\"stream\" data-stream-id=\"274007\" href=\"/#narrow/stream/274007-lean-gptf\">#lean-gptf</a> (or go straight to <a href=\"https://github.com/jesse-michael-han/lean-gptf\">https://github.com/jesse-michael-han/lean-gptf</a> for setup instructions.)</p>",
        "id": 229042744,
        "sender_full_name": "Jason Rute",
        "timestamp": 1614987429
    },
    {
        "content": "<p><a href=\"https://github.com/jesse-michael-han/lean-gptf#importing-lean-gptf-as-a-dependency-for-your-own-project\">https://github.com/jesse-michael-han/lean-gptf#importing-lean-gptf-as-a-dependency-for-your-own-project</a> explains how to set it up as a dependency of a project. However this is not a viable approach for someone working directly in mathlib (e.g. many people here).</p>\n<p>Do you have suggestions for using gptf regularly within mathlib?</p>",
        "id": 229248671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615180309
    },
    {
        "content": "<p>I moved this last discussion to it's own thread <a class=\"stream-topic\" data-stream-id=\"274007\" href=\"/#narrow/stream/274007-lean-gptf/topic/Using.20gptf.20in.20mathlib.20development\">#lean-gptf &gt; Using gptf in mathlib development</a></p>",
        "id": 229296116,
        "sender_full_name": "Jason Rute",
        "timestamp": 1615209516
    },
    {
        "content": "<p><a href=\"https://link.springer.com/article/10.1007/s00283-020-10037-7\">A Replication Crisis in Mathematics?</a>, an article published in The Mathematical Intelligencer that may interest some of you.</p>",
        "id": 229644786,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1615377730
    },
    {
        "content": "<p>Nice :-) When I was having my midlife crisis in 2017-18 I was very worried about mathematics but having talked to a lot of people recently about this, I am now much more assured about the current state of pure maths.</p>",
        "id": 229723811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615403212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/229723811\">said</a>:</p>\n<blockquote>\n<p>Nice :-) When I was having my midlife crisis in 2017-18 I was very worried about mathematics but having talked to a lot of people recently about this, I am now much more assured about the current state of pure maths.</p>\n</blockquote>\n<p>Hello <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , </p>\n<p>thanks. <br>\nThere may be a misunderstanding here, it's not really about the current state of pure maths, but about the current state of peer review. Of course, the problem is that both are intertwined in subtle ways.</p>",
        "id": 230227057,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1615715130
    },
    {
        "content": "<p>Rather than focusing on the benefits of higher assurance from formalized computer mathematics, I wonder if the main benefit will be enabling collaboration on a larger and more rapid scale. <br>\nAs a computer scientist, it is impressive the way the folks in the mathematics community are able to remotely collaborate on the proof process for mathlib and the condensed mathematics work.  Is Lean facilitating that collaboration or is that more common in mathematics than computer science?</p>",
        "id": 230265661,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1615753583
    },
    {
        "content": "<p>In collaborating on research we mostly work on our own or in groups of at most 3. But mathlib and the condensed stuff are of a different nature -- this is not people working together to make new mathematics, this is people translating old mathematics, and so there is a huge group of people who knows the maths well and it's easy to work on your own thing and then find that other people are using it. The condensed stuff is basically being led by Johan Commelin and he constantly makes it clear what needs doing, and people find their own sub-projects (e.g. I messaged him this morning to say \"I have a few hours today, what shall I do?\" and he pointed me to a lean file and a page of a maths pdf and I just got on with it).</p>",
        "id": 230266152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615754118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> That makes sense.  I don't know of corresponding analogs in computer science/software engineering, but I can see how that enables a more distributed and larger effort.   For software, there is no group I know of out to formalize something like Windows 95.</p>\n<p>A slightly different angle on selling this to mathematicians would be if formalization accelerated acceptance of an idea.  e.g., if the condensed mathematics formalization work convinced people the work was good and well-founded faster than traditional peer review.  I suspect proof assistants have a ways to go before that pans out.  That's how I'd eventually like to be able to convince people of the value of formal methods in software -- a client/end-user can trust a new system or software because we have rigorous evidence that it works as intended even though the traditional social processes (e.g, existing system developers) are trying to convince that person to be skeptical.</p>",
        "id": 230278514,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1615764507
    },
    {
        "content": "<p>People are convinced by condensed mathematics because a Fields Medallist who just proved the local Langlands conjectures wrote it down, and preliminary study groups all over the world didn't reveal any problems.</p>",
        "id": 230278695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615764741
    },
    {
        "content": "<p>Seems like a good reason.</p>",
        "id": 230278726,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1615764790
    },
    {
        "content": "<blockquote>\n<p>For software, there is no group I know of out to formalize something like Windows 95.</p>\n</blockquote>\n<p>Maybe something like Jepsen (<a href=\"https://aphyr.com/tags/Jepsen\">https://aphyr.com/tags/Jepsen</a>) is an analog in computer science? Someone (in this case one person really, aphyr), a piece of software, trying to increase the correctness of distributed system software, but each individual software component driven by its own small groups, and generally being pre-existing systems?</p>",
        "id": 230278780,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615764846
    },
    {
        "content": "<p>I hadn't heard of Jepson, but that seems relevant.  It seems like somebody doing a more rigorous analysis than most pen testing or fuzzing.  I think there are a lot of small analogues like that in computer science where a person or group (like Google Project Zero).   I guess the Linux kernel and Debian are also analogues given the huge number of people from different backgrounds collaborating to make a reliable system that gets adoption even though they use tests and other software engineering practices rather than formalization.</p>",
        "id": 230280046,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1615766446
    },
    {
        "content": "<p>It's probably also worth saying that I don't really know of anything  else going on in mathematics which is like this whole mathlib adventure. We have these polymath projects, an idea of collaborative mathematics set up by Gowers which worked very well, and of course we have mathoverflow, but the mathlib project is not really like either of these things.</p>",
        "id": 230280049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615766450
    },
    {
        "content": "<p>What about e.g. The Princeton Companion to Mathematics?</p>",
        "id": 230280444,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615766876
    },
    {
        "content": "<p>If you remove the formalization part it's another case of getting a whole lot of mathematicians to pool together their respective fields into one cohesive \"view\" of math as a whole</p>",
        "id": 230280495,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615766907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> you might like OSS-Fuzz too I guess, if you haven't seen it: <a href=\"https://github.com/google/oss-fuzz/\">https://github.com/google/oss-fuzz/</a> -- I think there's a bunch of pockets of people trying to take some systemic approach to a technique they think improves general software reliability and then trying to run it on a bunch of other peoples' projects</p>",
        "id": 230280555,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615766982
    },
    {
        "content": "<p>(in that case fuzz testing obviously)</p>",
        "id": 230280560,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615766991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/230280444\">said</a>:</p>\n<blockquote>\n<p>What about e.g. The Princeton Companion to Mathematics?</p>\n</blockquote>\n<p>What about it? I wrote the article on modular forms in there :D But I didn't really look at many of the other articles. Isn't it just basically a worse version of Wikipedia?</p>",
        "id": 230280696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615767124
    },
    {
        "content": "<p>Oh! Did you, interesting! I don't know, I guess as opposed to Wikipedia which spreads/expands \"arbitrarily\" based on whatever people are editing it seemed more like the companion was an attempt to \"evenly\" cover the subfields in some systematic way. But yeah I'm not sure where I was going with that relative to mathlib, it was just another example of collaborative mathematics that came to mind.</p>",
        "id": 230280816,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615767308
    },
    {
        "content": "<p>I was super-skeptical about the whole idea even at the time. I wrote 2 articles in the final version I think, but I never looked at the book or bought a copy -- I was just thinking \"why are all these old people fussing about making a massive book when we have Wikipedia?\" Wikipedia was just beginning to catch on at the time.</p>",
        "id": 230280897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615767374
    },
    {
        "content": "<p>Somehow it played a small part in me getting a math degree so I always felt a small bit of debt to it, even though I understood very little of what was in it</p>",
        "id": 230280945,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615767472
    },
    {
        "content": "<p>I was in college when it came out, and it was just at the time I needed to decide on a major, and unlike wikipedia it was easier to leaf through that and get a picture for all of the subject at once or something rather than the more haphazard clicking through links</p>",
        "id": 230280999,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615767518
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> you might like OSS-Fuzz too I guess, if you haven't seen it: <a href=\"https://github.com/google/oss-fuzz/\">https://github.com/google/oss-fuzz/</a> </p>\n</blockquote>\n<p>My main interest is finding good arguments for formal methods adoption.  I'm a big fan of tools such as Lean and think part of it will be just doing interesting work using such tools.  Kevin's point though that condensed mathematics is already accepted by the social processes (including Peter Scholze's involvement) is useful so I <del>don't</del> <em>am less likely</em> to make dumb arguments.</p>",
        "id": 230281582,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1615768286
    },
    {
        "content": "<p>I will be giving a talk on my efforts to formalize matroids in lean at 3PM EDT on Monday March 22. The talk will be mostly aimed at combinatorialists rather than formalizers (it will include a fair amount of evangelizing) , but I thought I'd share the link here. The zoom password is my surname followed by the second-smallest term in <code>nat</code> with the usual ordering. </p>\n<p><a href=\"http://matroidunion.org/\">http://matroidunion.org/</a></p>",
        "id": 230870147,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1616076860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> I won't be able to attend live, will the talk be recorded?</p>",
        "id": 230882400,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616080992
    },
    {
        "content": "<p>It'll be on youtube, yes.</p>",
        "id": 230882427,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1616081004
    },
    {
        "content": "<p>Is the matroid code somewhere accessible to other folks (yet?)? I forget if you mentioned the plans for that in the Lean Together talk</p>",
        "id": 230890148,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616083310
    },
    {
        "content": "<p><a href=\"https://github.com/e45lee/lean-matroids\">https://github.com/e45lee/lean-matroids</a></p>\n<p>Around 10000 loc - a lot of it is basic API stuff I wrote while still learning, so it will be certainly possible to tighten up. The main theorems proved are the matroid intersection theorem (<code>matroid/intersection-union/matroid_inter.lean</code>) and Kung's lemma ( <code>matroid/uniform_minor/kung.lean</code>). Mathematically nothing impressive, but getting to the point where I could reasonably state and prove these results took longer than I imagined...</p>",
        "id": 230908081,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1616089321
    },
    {
        "content": "<p>Hey Kung's Lemma <a href=\"https://github.com/e45lee/lean-matroids/blob/master/src/matroid/uniform_minor/kung.lean#L92-L142\">https://github.com/e45lee/lean-matroids/blob/master/src/matroid/uniform_minor/kung.lean#L92-L142</a> has come out really nicely -- and it's great that you have documented some of these proofs.</p>\n<p>Speaking from experience, it's extremely difficult to keep up with mathlib, it moves too fast. You should PR this work or it will die.</p>",
        "id": 230912121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616090764
    },
    {
        "content": "<p>I would like to PR it - at the moment, I really don't know where to start, though!</p>",
        "id": 230919099,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1616093581
    },
    {
        "content": "<p>I have been updating mathlib regularly and fixing the small issues that arise - is that not a sustainable approach?</p>",
        "id": 230919206,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1616093633
    },
    {
        "content": "<p>it's fine as long as you're happy doing that forever.</p>",
        "id": 230919355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616093688
    },
    {
        "content": "<p>The point is that after you PR it, anyone who breaks it has to fix it themselves, so you don't have to do it.</p>",
        "id": 230919447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616093732
    },
    {
        "content": "<p>Updating mathlib regularly yourself is only sustainable during the period you are actively developing the code. As soon as it's \"finished\", it will likely start to rot.</p>",
        "id": 230943489,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616104476
    },
    {
        "content": "<p>Start with small PRs. e.g. presumably everything in <a href=\"https://github.com/e45lee/lean-matroids/blob/master/src/prelim/set.lean\">https://github.com/e45lee/lean-matroids/blob/master/src/prelim/set.lean</a> can come across without prerequisites (possibly with some fraction already existing under different names).</p>",
        "id": 230944038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616104772
    },
    {
        "content": "<p>Thanks - I will look into cleaning the basic stuff up and making it PR-ready. </p>\n<p>One concern I have is with stuff in the project that is just kinda kooky. For instance, I use a function called <code>size</code> rather than <code>finset.card</code> (or really, <code>fincard</code>, which I'm waiting to find its way in). The difference is that <code>size</code> is <code>int</code>-valued rather than <code>nat</code>-valued, and the reason for this choice is because subtracting sizes from eachother and other <code>int</code>-valued expressions happens all the time, and I never want to worry about <code>nat</code> subtraction. The alternative would involve a bunch of fussy bookkeeping before each invocation of <code>linarith</code>. </p>\n<p>And <code>size</code> gets used from the very beginning to do everything. I'm very comfortable with this decision for my project, but I don't imagine it would suit mathlib very well to have a separate API simply for the coercion of <code>finset.card</code> or <code>fincard</code> to <code>int</code>. Is there a workable solution to this?</p>",
        "id": 231032679,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1616164757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> your talk was nice to watch thanks for sharing the invite.</p>",
        "id": 231381921,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616446012
    },
    {
        "content": "<p>Thanks! I'll post the youtube link when it's uploaded</p>",
        "id": 231382318,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1616446177
    },
    {
        "content": "<blockquote>\n<p>I would like to PR it - at the moment, I really don't know where to start, though!</p>\n</blockquote>\n<p>I can help with PRs! I still have yet to really dive into what you wrote so that would be a good excuse for me to do so</p>",
        "id": 231406632,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1616460170
    },
    {
        "content": "<p><a href=\"https://youtu.be/wMRrSWsZSFM\">https://youtu.be/wMRrSWsZSFM</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"wMRrSWsZSFM\" href=\"https://youtu.be/wMRrSWsZSFM\"><img src=\"https://i.ytimg.com/vi/wMRrSWsZSFM/default.jpg\"></a></div><p>About an hour long - I talk about proof assistants in general, and the lean-matroids project. The highlight is where I give an incorrect definition of prime number in the demo without noticing.</p>",
        "id": 231622515,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1616587802
    },
    {
        "content": "<p><a href=\"https://crismathsblog.blogspot.com/2021/04/is-my-computer-better-than-me-at-math.html?m=1\">https://crismathsblog.blogspot.com/2021/04/is-my-computer-better-than-me-at-math.html?m=1</a></p>",
        "id": 237564438,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620248333
    },
    {
        "content": "<p>Oh nice! I'm involved with that competition.</p>",
        "id": 237567161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620248963
    },
    {
        "content": "<p>I found this problem particularly elegant. My proof went on writing the perpendicular and parallel components, and checking that the LHS and RHS were exactly one term away from each other.</p>",
        "id": 237613500,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620284066
    },
    {
        "content": "<p>As usual with scalar product inequalities, you can get it by expanding the norm of a carefully chosen element.</p>",
        "id": 237624046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620290026
    },
    {
        "content": "<p>Dominic Cummings (former chief adviser to Boris Johnson) has tweeted about the Liquid Tensor Experiment <a href=\"https://twitter.com/Dominic2306/status/1402249206967025664?s=20\">https://twitter.com/Dominic2306/status/1402249206967025664?s=20</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/Dominic2306/status/1402249206967025664?s=20\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/e505ba08b077d0f8a79dcd7f84f935cbfe08bb55/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313336373938373430333231303737363537362f56386c56466d62715f6e6f726d616c2e6a7067\"></a><p>1/ Fascinating report by a world leading mathematician, P Scholze, on an open source project to use 'proof assistants' on an important maths proof. Byproduct = the computer improved human understanding. Seems clear these tools will play ever greater role <a href=\"https://t.co/fmUJrh3Fnt\">https://xenaproject.wordpress.com/2021/06/05/half-a-year-of-the-liquid-tensor-experiment-amazing-developments/</a></p><span>- Dominic Cummings (@Dominic2306)</span></div></div>",
        "id": 241920522,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1623159606
    },
    {
        "content": "<p>Is it like we have our Scott Morrison and the rest of the world have another one? Or is it the same Dominic Cummings?</p>",
        "id": 241923801,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623160858
    },
    {
        "content": "<p>Is this good or bad news <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 241924296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623161049
    },
    {
        "content": "<p>Maybe we can now pretend to the millions of pounds Kevin wanted for internships?</p>",
        "id": 241924424,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623161108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/241923801\">said</a>:</p>\n<blockquote>\n<p>Is it like we have our Scott Morrison and the rest of the world have another one? Or is it the same Dominic Cummings?</p>\n</blockquote>\n<p>(If that question was serious, it's the same one)</p>",
        "id": 241925792,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1623161665
    },
    {
        "content": "<p>It was not serious, Chris's message was very clear.</p>",
        "id": 241925994,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623161736
    },
    {
        "content": "<p>If only this gave some funding to us!</p>",
        "id": 241926819,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623162063
    },
    {
        "content": "<p>In fact Cummings was one of the people behind the £300,000,000 of mathematics funding (some of which is supposed to be for \"out there\" projects) which the UK has been given by government to cover up the gigantic holes left in science funding by Brexit. I am currently in the process of applying for some of this money...</p>",
        "id": 241938243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623166199
    },
    {
        "content": "<p>For those not following the condensed stream: <a href=\"https://www.nature.com/articles/d41586-021-01627-2\">https://www.nature.com/articles/d41586-021-01627-2</a></p>",
        "id": 243200487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624044980
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/WFWNVMdoEDbzJePPWSDctLiV/Capture-décran-du-2021-06-18-21-44-04.png\">Capture-décran-du-2021-06-18-21-44-04.png</a> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WFWNVMdoEDbzJePPWSDctLiV/Capture-décran-du-2021-06-18-21-44-04.png\" title=\"Capture-décran-du-2021-06-18-21-44-04.png\"><img src=\"/user_uploads/3121/WFWNVMdoEDbzJePPWSDctLiV/Capture-décran-du-2021-06-18-21-44-04.png\"></a></div>",
        "id": 243201168,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1624045506
    },
    {
        "content": "<p>Also, the \"Cardinals\" labels ended up pointing to a small island containing Zorns lemma</p>",
        "id": 243201247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624045561
    },
    {
        "content": "<blockquote>\n<p>Lean was originally created by a computer scientist at Microsoft Research in Redmond, Washington</p>\n</blockquote>\n<p>is unfortunately unspecific. :(</p>",
        "id": 243202552,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1624046445
    },
    {
        "content": "<p>Yes, I'm sorry about that. Both Kevin and me stressed a more specific version. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 243202615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624046484
    },
    {
        "content": "<p>I guess this is a preliminary version that they wanted to publish online too fast. Hopefully there will be a printed version with Leo's name and a fixed image (to be 100% clear: the labels were completely rewritten by the journal).</p>",
        "id": 243208749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624050576
    },
    {
        "content": "<blockquote>\n<p>Commelin and Scholze decided to call their Lean project the Liquid Tensor Experiment, in an homage to progressive-rock band Liquid Tension Experiment</p>\n</blockquote>\n<p>Wait, wasn't that a joke?</p>",
        "id": 243208944,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624050725
    },
    {
        "content": "<p>Not many rock bands get their name into Nature!</p>",
        "id": 243208971,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624050761
    },
    {
        "content": "<p>Johan's version of the labels is at <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Actual.20graph/near/242583715\">https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/Actual.20graph/near/242583715</a></p>",
        "id": 243209271,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624051037
    },
    {
        "content": "<p>The last nice touch is they sent me an email asking for permission to use my image, but they used it before I answer the email (and I took less than 12 hours to answer).</p>",
        "id": 243209364,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624051106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/243208944\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Commelin and Scholze decided to call their Lean project the Liquid Tensor Experiment, in an homage to progressive-rock band Liquid Tension Experiment</p>\n</blockquote>\n<p>Wait, wasn't that a joke?</p>\n</blockquote>\n<p>It was a serious joke <span aria-label=\"crazy\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"crazy\">:crazy:</span></p>",
        "id": 243228746,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624077120
    },
    {
        "content": "<p>hn frontpage: <a href=\"https://news.ycombinator.com/item?id=27559917\">https://news.ycombinator.com/item?id=27559917</a><br>\nr/math: <a href=\"https://www.reddit.com/r/math/comments/o3caqq/mathematicians_welcome_computerassisted_proof_in/\">https://www.reddit.com/r/math/comments/o3caqq/mathematicians_welcome_computerassisted_proof_in/</a></p>",
        "id": 243257757,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1624120786
    },
    {
        "content": "<p>I sometimes wonder why the setoid hell github issue still comes up all the time on HN on just about every post related to Lean</p>",
        "id": 243257939,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1624121041
    },
    {
        "content": "<p>It seems to mightily piss off the Coq community</p>",
        "id": 243257982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624121064
    },
    {
        "content": "<p>Yeah, and it's not a particularly great example of communication between the different theorem prover communities, so it would be neat if folks could just let it rest.</p>",
        "id": 243258366,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1624121577
    },
    {
        "content": "<p>It comes up really easily whenever you google Lean, it was one of the first things I saw about it</p>",
        "id": 243260087,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624123816
    },
    {
        "content": "<p>So that's probably why</p>",
        "id": 243260091,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624123828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/243260087\">said</a>:</p>\n<blockquote>\n<p>It comes up really easily whenever you google Lean, it was one of the first things I saw about it</p>\n</blockquote>\n<p>Hm, not for me. That said, the person who posted it this time on HN is also the same person that posted the issue back then on github.</p>",
        "id": 243260332,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1624124178
    },
    {
        "content": "<p>Part of the problem is stupid things I said in 2019 when I had no idea about the CS aspects of things and could not explain properly why lean was a better fit for Scholze mathematics -- at the time it was simply obvious to me and I had no idea why because i never used Coq, I had just seen what they had achieved and felt that lean could easily do something completely different. I really tried to apologise for my actions in my INRIA talk last year. It is not my intent to create enemies of any kind. I am not horrible, I am just quite autistic and occasionally say or do stupid things without thinking about the consequences of my actions. I do not bear a grudge against anyone who said anything about me in the Coq community. I think that what is happening now in Lean now with the Scholze challenge speaks far louder than \"man in stupid trousers says all maths is wrong\" or \"ignorant non-CS person says Lean is better than Coq\". I am much better able to express myself now and my views are far more refined and educated.</p>",
        "id": 243262378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624126742
    },
    {
        "content": "<p>Slashdotted: <a href=\"https://science.slashdot.org/story/21/06/23/1922202/mathematicians-welcome-computer-assisted-proof-in-grand-unification-theory\">https://science.slashdot.org/story/21/06/23/1922202/mathematicians-welcome-computer-assisted-proof-in-grand-unification-theory</a></p>",
        "id": 243708344,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1624480232
    },
    {
        "content": "<p><a href=\"https://www.raiplayradio.it/audio/2021/06/La-prova-del-software-c8c16121-e94c-49ca-bbdc-951e30162f5e.html\">https://www.raiplayradio.it/audio/2021/06/La-prova-del-software-c8c16121-e94c-49ca-bbdc-951e30162f5e.html</a></p>\n<p>This is me speaking (in Italian) about the LTE in a pop science program at the radio. If you understand what I say I apologize for all the people that are not mentioned, and for all the slightly false things I said... I guess if we want to talk to the general public we have to make some compromise.</p>",
        "id": 243910481,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624625240
    },
    {
        "content": "<p>But don't miss the  Liquid Tension Experiment music at the beginning!</p>",
        "id": 243910538,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624625278
    },
    {
        "content": "<p>Did we get any reaction at all from the musicians of LTE?</p>",
        "id": 243911221,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624625639
    },
    {
        "content": "<p>I don't think so, but you should ask <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 243911735,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624625944
    },
    {
        "content": "<p>I don't think so :-(</p>",
        "id": 243916606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624628409
    },
    {
        "content": "<p>Oh wow -- they spoke to Silvia de Toffoli in your interview Riccardo! She has a PhD in knot theory under Sullivan and now works in the philosophy department at Princeton! She definitely knows what she's talking about when it comes to proof assistants :-) Her recent article \"Groundwork for a Fallibilist Account of Mathematics\" (available <a href=\"https://philpeople.org/profiles/silvia-de-toffoli\">here</a>) is a really well-thought-out description of what human mathematics actually is in practice.</p>",
        "id": 243917220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624628716
    },
    {
        "content": "<p>I read the paper yesterday, it is really really nice!<br>\nI just realized that the only people mentioned in the interview are myself (well, just because I was speaking) and Peter. This is of course ridiculous, I am really sorry for that.</p>",
        "id": 243918594,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624629255
    },
    {
        "content": "<p>Ahah! I'm not speaking Italian, but I can basically read everything because it's so close to French! I'm just stumbling on what in the world could a sviluppator be.</p>",
        "id": 243926460,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624632771
    },
    {
        "content": "<p>wiktionary says \"developer\"</p>",
        "id": 243927889,
        "sender_full_name": "Julian Berman",
        "timestamp": 1624633398
    },
    {
        "content": "<p>Yes, I noticed many times \"s-\" has the role of a negation prefix in Italian, like \"de-\" or \"un-\" in English.  With that, it's pretty nice how it matches \"developer\" :)</p>",
        "id": 243930162,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624634443
    },
    {
        "content": "<p>I mean, what is a \"veloper\"?</p>",
        "id": 243931537,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624635040
    },
    {
        "content": "<p>\"velo\" means cycle in French, so my guess is \"cyclist\"</p>",
        "id": 243931918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624635217
    },
    {
        "content": "<p>Maybe it has to do with something along the lines of \"wrapping things\" then, and the developer does the opposite. Better not derail this thread into etymological considerations though. Etymology is not formalized, I think :)</p>",
        "id": 243933143,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624635759
    },
    {
        "content": "<p>Yes, \"sviluppatore = developer\".  I  didn't try to explain the difference between a Lean developer and someone who contributes to mathlib</p>",
        "id": 243933376,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624635848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329243\">Horatiu Cheval</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/243933143\">said</a>:</p>\n<blockquote>\n<p>Maybe it has to do with something along the lines of \"wrapping things\" then, and the developer does the opposite. Better not derail this thread into etymological considerations though. Etymology is not formalized, I think :)</p>\n</blockquote>\n<p>I think you're very much on point! <code>sviluppatore</code> seems to come from Medieval French <code>velopper</code>, which gave <code>envelopper</code> and <code>envelop</code>.</p>",
        "id": 243937089,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624637455
    },
    {
        "content": "<p>I'm not sure this is \"in the wild\", and but the coq zulip has a topic: <a href=\"https://coq.zulipchat.com/#narrow/stream/237977-Coq-users/topic/First.20Theorem.20Prover.20War\">First Theorem Prover War</a> asking for why to choose Coq vs Lean vs Isabelle.  The title looks like it is intended to start a ITP flame war, so beware...</p>",
        "id": 244131218,
        "sender_full_name": "Jason Rute",
        "timestamp": 1624879948
    },
    {
        "content": "<p>bad example, I made that thread <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> and that was more like an honest question than an attempt to start a flame war <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 244147171,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624888300
    },
    {
        "content": "<p>It was clearly an attention-grabbing headline but this chat is usually a bit more formal and maybe the Coq one is too. Feel free to hurl stuff like that around on the Discord all you like :-)</p>",
        "id": 244155672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624891574
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/-_lAEnN9JyyrK68vv4SEpuXV/E535F051-CA90-49FB-AE66-36A68263207B.jpg\">E535F051-CA90-49FB-AE66-36A68263207B.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-_lAEnN9JyyrK68vv4SEpuXV/E535F051-CA90-49FB-AE66-36A68263207B.jpg\" title=\"E535F051-CA90-49FB-AE66-36A68263207B.jpg\"><img src=\"/user_uploads/3121/-_lAEnN9JyyrK68vv4SEpuXV/E535F051-CA90-49FB-AE66-36A68263207B.jpg\"></a></div>",
        "id": 244758746,
        "sender_full_name": "Jason Rute",
        "timestamp": 1625260738
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/xEx2UqM-rsVi-3Lkko7XknGX/9DCEC371-E26B-4872-ACFD-C4A45B3B9A4C.jpg\">9DCEC371-E26B-4872-ACFD-C4A45B3B9A4C.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/xEx2UqM-rsVi-3Lkko7XknGX/9DCEC371-E26B-4872-ACFD-C4A45B3B9A4C.jpg\" title=\"9DCEC371-E26B-4872-ACFD-C4A45B3B9A4C.jpg\"><img src=\"/user_uploads/3121/xEx2UqM-rsVi-3Lkko7XknGX/9DCEC371-E26B-4872-ACFD-C4A45B3B9A4C.jpg\"></a></div>",
        "id": 244758753,
        "sender_full_name": "Jason Rute",
        "timestamp": 1625260745
    },
    {
        "content": "<p><a href=\"https://link.springer.com/chapter/10.1007/978-3-030-79876-5_37\">The Lean 4 Theorem Prover and Programming Language</a></p>",
        "id": 245327483,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1625757054
    },
    {
        "content": "<p>If only there were some way to display monospace text in the browser without resorting to images. I'm sure springer will innovate online publishing in that area soon, with all those subscription fees (/s).</p>\n<p>(Obviously the criticism is aimed entirely at the publishers and not the authors)</p>",
        "id": 245344125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625765028
    },
    {
        "content": "<p>I particularly liked this bit:</p>\n<p><a href=\"/user_uploads/3121/NkoGSFfJtrza-X9KqrEsPhgX/bug.png\">bug.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NkoGSFfJtrza-X9KqrEsPhgX/bug.png\" title=\"bug.png\"><img src=\"/user_uploads/3121/NkoGSFfJtrza-X9KqrEsPhgX/bug.png\"></a></div><p>Presumably the displayed image is not what is supposed to be displayed? I agree that the images are horrible and also agree that there's probably nothing the authors can do about this. I found the constant change of font size particularly jarring.</p>",
        "id": 245345961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625765978
    },
    {
        "content": "<p>The pdf in the e-book is lovely though, and doesn't have that random inputlst29 thing either, so this is just Springer screwing up the paper :-(</p>",
        "id": 245346508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625766267
    },
    {
        "content": "<p>For those of you who like German: <a href=\"https://ondemand-mp3.dradio.de/file/dradio/2021/07/09/mathematiker_peter_scholze_computer_sucht_denkfehler_dlf_20210709_1648_cac56406.mp3\">https://ondemand-mp3.dradio.de/file/dradio/2021/07/09/mathematiker_peter_scholze_computer_sucht_denkfehler_dlf_20210709_1648_cac56406.mp3</a></p>",
        "id": 245655410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626076426
    },
    {
        "content": "<p>Earlier today Leo presented his Lean 4 system description, written with Sebastian Ullrich, at the <a href=\"https://www.cs.cmu.edu/~mheule/CADE28/\">CADE 2021</a> conference.</p>",
        "id": 246102441,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1626359453
    },
    {
        "content": "<p><a href=\"https://link.springer.com/chapter/10.1007/978-3-030-79876-5_37\">Here's the paper</a>. Oh I see it's above. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 246102531,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1626359485
    },
    {
        "content": "<p>I noticed yesterday that the Nature article \"Mathematicians welcome computer-assisted proof in 'grand unification' theory.\" appears to be missing.  I've tried the link above and the DOI link <a href=\"https://doi.org/10.1038/d41586-021-01627-2\">https://doi.org/10.1038/d41586-021-01627-2</a> .  It says \"Server Error\", so hopefully it is just that.  I've also tried to search on the Nature site.  It doesn't show up in all searches (for example searching by the Author), but it show up when searching for the title.  In that case, same server error.  (And to be clear, other articles work fine on nature.). Google can still find the <a href=\"https://media.nature.com/original/magazine-assets/d41586-021-01627-2/d41586-021-01627-2.pdf\">pdf of the original published version</a>.  Anyway, if someone knows the author (or a Nature editor), they might want to point this out.</p>",
        "id": 246208608,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626432701
    },
    {
        "content": "<p>I've just emailed the author of the article. Thanks for pointing this out!</p>",
        "id": 246208964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626432963
    },
    {
        "content": "<p>I also just decided to send an email to the address on the server error page.  Can't hurt.</p>",
        "id": 246209195,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626433123
    },
    {
        "content": "<p>It works now.  I got a pretty quick response from that support email.</p>",
        "id": 246214511,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626437279
    },
    {
        "content": "<p><a href=\"https://twitter.com/3blue1brown/status/1416106848751558658\">https://twitter.com/3blue1brown/status/1416106848751558658</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/3blue1brown/status/1416106848751558658\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/2b798564d8f57835ebba2a733dffa340f79f9f04/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313032343333303932313336373835393230302f6e355f5654347a485f6e6f726d616c2e6a7067\"></a><p>Also, now there's a 3b1b podcast.  The first episode is with <a href=\"https://twitter.com/AlexKontorovich\">@AlexKontorovich</a>.  Here's a sample for when we were talking about theorem proving software like Lean.\n\nYouTube: <a href=\"https://t.co/roAnNn8yp5\">https://youtu.be/C-i4q-Xlnis</a>\nSpotify: <a href=\"https://t.co/qARnvBvuO0\">https://open.spotify.com/episode/1Y6OUdMO6oKNbOBpIqULQZ?si=429c059c084f485a</a> <a href=\"https://t.co/oq1Q1tamPO\">https://twitter.com/3blue1brown/status/1416106848751558658/video/1</a></p><span>- Grant Sanderson (@3blue1brown)</span></div></div>",
        "id": 246274443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626467366
    },
    {
        "content": "<p><a href=\"https://www.quantamagazine.org/lean-computer-program-confirms-peter-scholze-proof-20210728/\">https://www.quantamagazine.org/lean-computer-program-confirms-peter-scholze-proof-20210728/</a></p>",
        "id": 247478193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627487995
    },
    {
        "content": "<p>I like the import tree illustration! It's of course ridiculously small compared to the real thing, but it gets the gist of it.</p>",
        "id": 247479542,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627488558
    },
    {
        "content": "<p>My apologies that many people involved didn't get a mention <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <br>\nI've posted a comment below the article that lists people that were actively involved in the project. I hope it gets accepted by Quanta soon.</p>",
        "id": 247481637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627489571
    },
    {
        "content": "<p>Wow, great article!</p>",
        "id": 247483296,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1627490231
    },
    {
        "content": "<p><a href=\"https://news.ycombinator.com/item?id=27984471\">https://news.ycombinator.com/item?id=27984471</a> (no discussion yet)</p>",
        "id": 247487345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627492169
    },
    {
        "content": "<p>/r/math: <a href=\"https://www.reddit.com/comments/otdclo\">https://www.reddit.com/comments/otdclo</a></p>",
        "id": 247506221,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627500632
    },
    {
        "content": "<p>How did we went from \"I spent much of 2019 obsessed with the proof of this theorem\" (from Peter's first blog post) to \"Scholze worked out himself during a consuming week in July 2019\"?</p>",
        "id": 247519278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627507297
    },
    {
        "content": "<p>Yeah, I was very curious about that too.</p>",
        "id": 247520616,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627508202
    },
    {
        "content": "<p>We could probably ask the author about all of these things... (at least someone with the same name has been on this zulip chat in the past)</p>",
        "id": 247520701,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627508269
    },
    {
        "content": "<p>By the way, do quanta articles ever actually have comments on them? I see the disqus box at the bottom, but I don't recall ever seeing any article there actually have any comments.</p>",
        "id": 247521223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627508671
    },
    {
        "content": "<p>Their \"puzzle\" ones often do</p>",
        "id": 247521316,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627508756
    },
    {
        "content": "<p>Ghuuuu, I just understood that Disqus = discuss. The joke took 2 years to go through my French-speaking mind.</p>",
        "id": 247521469,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627508874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Well I am a native English-speaker and never realized that either until you mentioned it! <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span>  I never thought to pronounce the 'qu' as 'cu'. (I always wanted to turn it into dis-quis.)</p>",
        "id": 247537478,
        "sender_full_name": "Mac",
        "timestamp": 1627524229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/247519278\">said</a>:</p>\n<blockquote>\n<p>How did we went from \"I spent much of 2019 obsessed with the proof of this theorem\" (from Peter's first blog post) to \"Scholze worked out himself during a consuming week in July 2019\"?</p>\n</blockquote>\n<p>I repeatedly told him that the proof-at-large was a) really joint with Dustin and b) really occupied us for a year. (Well, it was kind of done after that week, but writing it up only occured towards the end of the year, and certainly my mind wasn't at rest until it was written.) But it's also true that a part of the proof, and essentially the one you've now formalized (ie Lecture 9) is something where I've spent a week as described in the article. I think for this story he decided he'll just focus on the latter...</p>",
        "id": 247609527,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1627577306
    },
    {
        "content": "<p>(So there was a lot of preparatory work (eg, everything in Lectures 6-8, but also the rough setup of Lecture 9) until I decided that this week, I'll push and get it done.)</p>",
        "id": 247609752,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1627577434
    },
    {
        "content": "<p>It appears Lean and Johan are mentioned on the Condensed mathematics wikipedia page now: <a href=\"https://en.wikipedia.org/wiki/Condensed_mathematics#History\">https://en.wikipedia.org/wiki/Condensed_mathematics#History</a></p>",
        "id": 248325536,
        "sender_full_name": "Julian Berman",
        "timestamp": 1628067541
    },
    {
        "content": "<p>Ages ago I added a \"this theorem has been formalised in Lean\" sentence to <a href=\"https://en.wikipedia.org/wiki/Cap_set\">the Cap Set Wikipedia page</a> -- I think that such statements are of interest to the community.</p>",
        "id": 248327238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628068883
    },
    {
        "content": "<p>It is a great thing, although I believe it would be more accurate to state that in 6 months only a part of the whole Clausen-Scholze paper has been formalized.</p>",
        "id": 248337360,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628076270
    },
    {
        "content": "<p><a href=\"https://siliconreckoner.substack.com/p/on-the-implications-of-scholzes-liquid?fbclid=IwAR2aPno11mrXweweivDUakzAkl8JOw-DM_VXjgo-I_wTlAOb2DgSJ7QXcyk\">https://siliconreckoner.substack.com/p/on-the-implications-of-scholzes-liquid?fbclid=IwAR2aPno11mrXweweivDUakzAkl8JOw-DM_VXjgo-I_wTlAOb2DgSJ7QXcyk</a></p>",
        "id": 248371512,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1628093545
    },
    {
        "content": "<p>Harris's writings on this topic are becoming a recurring joke. His new imaginary opponents are people formalizing maths without having fun. He lives in a different world, completely disconnected from reality.</p>",
        "id": 248485234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628173930
    },
    {
        "content": "<p>He seems to have a special talent here, it's difficult to be so far away from reality. I very distinctly remember thinking during LT2021 that I never attended a traditional math conference with so many talks mentioning fun and enjoyment. I can't wait for the blog post where QHarris will explain that formalizers need to sacrifice children to AI beings during their satanic masses.</p>",
        "id": 248488474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628175186
    },
    {
        "content": "<p>Apparently comments can be posted here: <a href=\"https://mathematicswithoutapologies.wordpress.com/2021/08/04/new-entry-on-substack-newsletter-on-scholzes-liquid-tensor-experiment/\">https://mathematicswithoutapologies.wordpress.com/2021/08/04/new-entry-on-substack-newsletter-on-scholzes-liquid-tensor-experiment/</a></p>",
        "id": 248496196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628178452
    },
    {
        "content": "<p>Not saying that we should do that. Just want to point out the possibility</p>",
        "id": 248496243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628178475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/248488474\">said</a>:</p>\n<blockquote>\n<p>I very distinctly remember thinking during LT2021 that I never attended a traditional math conference with so many talks mentioning fun and enjoyment.</p>\n</blockquote>\n<p>He does quote <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> as someone who \"gets it\", so maybe he agrees that the folks working on formalization now are enjoying it, but worries that it will not stay that way? In any case, I agree that it's a weird litmus test. I don't think that \"mechanized mathematicians\" who work in the area for a living (or simply because they want to guarantee correctness) instead of enjoyment are more likely to ruin the fun for regular mathematicians, which is the only thing I can think of as to why he'd use this as the litmus test for a good colleague.</p>\n<p>A lot of it seems to be directed at ATP, but the other criticism of ITP in that post that I can see is that formalization may result in mainstream mathematics that is easy to understand by computers and not easy to understand by humans, and that less rigid notions of proof may end up being rejected outright:</p>\n<blockquote>\n<p>Would mathematicians who refuse to adapt — for example, because they find the rigidity of the system an obstacle to expressing their ideas — be forced to resort to samizdat, or even blogs, to get their work published?</p>\n</blockquote>\n<p>I think one of the goals of ITP is to close this gap, so that less rigid notions of proof can still be used for formalization. Hence whether this concern is justified depends on whether ITP manages to close the gap and the success of ITP in mainstream mathematics.</p>",
        "id": 248502340,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1628181402
    },
    {
        "content": "<p>Just to be clear, Michael and I are very old friends :-) We work in the same area of number theory</p>",
        "id": 248534262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628196489
    },
    {
        "content": "<p>I'm seeing Michael again (in person, I believe) at an Oberwolfach conference this month. Looking forward to lots of fun conversations <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 248544798,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1628202008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/248502340\">said</a>:</p>\n<blockquote>\n<p>A lot of it seems to be directed at ATP, but the other criticism of ITP in that post that I can see is that formalization may result in mainstream mathematics that is easy to understand by computers and not easy to understand by humans</p>\n</blockquote>\n<p>Since when was mainstream mathematics ever \"easy to understand by humans\" !? <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> </p>\n<p>At least for me, ass a computer scientist, I would find the computer formalization a marked improvement in mainstream mathematics approachability and readability, Admittedly, that still wouldn't help the vast majority of people who find computer science just as esoteric as math, but I am not sure it could possibly be any worse than the status quo.</p>\n<p>(Please note, this is all said in a spirit of levity and is not meant to be a serious inflammatory critique of mathematics.)</p>",
        "id": 248559854,
        "sender_full_name": "Mac",
        "timestamp": 1628216450
    },
    {
        "content": "<p>From many mathematician's viewpoints, mathlib looks like a library where there are theorems stated and the statements are pretty easy to understand, and then there are the proofs which look incomprehensible. So it is nothing like a marked improvement in readability. Of course this can be fixed by learning the language but this is not something that one would expect the mathematician of 2021 to do in general -- they already learnt how to decipher the heiroglyphics in maths papers and they don't want to learn a completely new way of doing it.</p>",
        "id": 248577695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628233109
    },
    {
        "content": "<p>Of course what Kevin describes is the current state of affairs, but this is a transitory phase. In the end rendered Lean proofs will be much easier to read than traditional proofs.</p>",
        "id": 248589757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628242863
    },
    {
        "content": "<p>I admit I have spent much more time writing Lean proofs than reading them and much more time reading informal proofs that writing them. However one thing I already prefer about reading a Lean proof is that I know it's correct.</p>",
        "id": 248596353,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628247165
    },
    {
        "content": "<p>Every time I'm struggling to understand an informal proof, part of me is wondering \"maybe it's just wrong, or maybe the gap is non-trivial, or maybe the gap is fine as long as you're an expert in pseudoholomorphic curves, or noncommutative geometry, or algebraic stacks, or harmonic analysis, or ...\".</p>",
        "id": 248596411,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1628247238
    },
    {
        "content": "<p>Yes, the fact that I can just use F12 to see the proof for something that's supposedly trivial is life-changing</p>",
        "id": 248597525,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628248111
    },
    {
        "content": "<p>I admit that the trouble I find with his posts is that they are long, and fully of flowery prose and side remarks.  I can’t for the life of me get the main point, much less the argument for that point.  I <em>think</em> after my second reading is that he is saying this: What people in the computer proof world talk about (at least in the articles and statements he reads about this topic) is “progress” and the technological advancements that would come from formal proofs or computer generated proofs.  In his mind however, the main point of pure mathematics (and life in general) is the enjoyable activity of the pursuit of knowledge.  He admits that both Kevin Buzzard and John Harrison share this view, so he might be arguing more about either the way this is presented in articles or a fear that math will be less fun in the future when formalization has taken over.  I certainly have heard this argument before (and much more succinctly!).  I think it is a view that shouldn’t be taken lightly.</p>",
        "id": 248607622,
        "sender_full_name": "Jason Rute",
        "timestamp": 1628255211
    },
    {
        "content": "<p>However, I do think one needs to be careful not to conflate ITPs and ATPs too much.  They are of a very different flavor and I think they will effect mathematics in different ways.  Also, I think that one talks about mathematics being taken over by machines, no one talks about how this will be a gradual process. When Szegedy talks about a decade he isn’t probably talking about Sholze level research (or really any research involving building new branches and tools in mathematics).  Also I don’t think Szegedy is talking about mathematicians loosing their jobs.  But he is also talking about a real noticeable advancement in the field of ATP as it relates to research mathematics.</p>",
        "id": 248609662,
        "sender_full_name": "Jason Rute",
        "timestamp": 1628256152
    },
    {
        "content": "<p>Beyond <span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> 's troubles with Harris' prose and remarks (and pompous quotations), what disturbs be most is<br>\n1) That he speaks for \"mathematicians\", as in his <strong>bold</strong> sentence <strong> What pure mathematicians find valuable about what we do is precisely that it provides a kind of understanding whose value is not determined by the logic of the market.</strong>: as a mathematician myself, I can say that my position towards the \"logic of the market\" is different from Harris';<br>\n2) In general, the level of political economy he needs for the lens through which our work is looked at;<br>\n3) When he says \"Far from heralding a step toward making digitization routine, then, Scholze's initiative clearly expressed an intention to reserve such a step for exceptional circumstances.  And there are reasons to digitize with caution.  As historian Stephanie Dick observed in her study of early efforts to digitize mathematics, <em>In developing theorem-proving software, practitioners endowed mathematical objects with computational properties - they were translated into dynamic, algorithmic, discrete things.</em>\": I might be too naif myself, but I have never seen in Scholze's initiative any \"clear intention to reserve such a step for exceptional circumstances\". I thought that he wanted to be sure of his theorem with Clausen, and was probably also a bit curious of the efforts needed for such a task, but it comes to me as a surprise to read that in Scholze's mind <em>digitization must be done with caution</em>. I wonder whether Harris has directly asked Scholze about this (as an aside: I am not sure that the quotation from Dick advocates for this caution neither, but this is another point).</p>",
        "id": 248611844,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628257181
    },
    {
        "content": "<p>Jason, I understand that Harris fears that math would become less fun with proof assistants. But he simply has no evidence to support that claim, only his fantasies.</p>",
        "id": 248708572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628331069
    },
    {
        "content": "<p>I think his points are poorly argued, but it is not an unrealistic fear.  Right now interactive formal proving is fun because it is new, it is ambitious, it is optional, and it is decoupled from discovering the proofs.  But imagine a world where it becomes required for publication like LaTeX is.  (Of course the technology is not even close at that point.)  I could see some areas of math fitting naturally into this world.  Whereas others could be much harder and painful (probability theory comes to mind).  I’m just saying that when we think of outreach to mathematicians, I imagine some of them likely have this fear in the back of their mind, and we shouldn’t be too dismissive.</p>",
        "id": 248714419,
        "sender_full_name": "Jason Rute",
        "timestamp": 1628339812
    },
    {
        "content": "<p>As far as automated theorem proving, I’ve often heard the fear that it could take away the beauty of math.  For example, here is a quote from some private correspondence I’ve had:</p>\n<blockquote>\n<p>I agree that advances in machine learning give us a lot to think about. I sometimes worry that everything we love about mathematics -- the clever ways that the right conceptualizations extend our cognitive reach -- are just crutches that we humans have developed to cope with the fact that we can't fit everything in our heads at once, and that we'll eventually give up and leave it to the cloud and machine learning will do everything we need.</p>\n</blockquote>",
        "id": 248714517,
        "sender_full_name": "Jason Rute",
        "timestamp": 1628339959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span>  Honestly, I, as a computer scientist share much the same concerns about machine learning. I find that as machine learning has improved, it seems popular to just toss it a problem and hope it magically figures out a solution without the user ever having to understand the solution themselves. In fields where this works, it tends to decrease interest in research to fully conceptualize or formalize the problem as the machine can just produce the desired results.</p>\n<p>When it comes to ATPs, though, I would think this would be a bit less of a concern. One can at least inspect the generated proof to figure out the way the machine got from point A to point B. Most other applications of machine learning don't have that luxury.</p>",
        "id": 248757590,
        "sender_full_name": "Mac",
        "timestamp": 1628407575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/248714419\">said</a>:</p>\n<blockquote>\n<p>I think his points are poorly argued, but it is not an unrealistic fear.  Right now interactive formal proving is fun because it is new, it is ambitious, it is optional, and it is decoupled from discovering the proofs.  But imagine a world where it becomes required for publication like LaTeX is.  (Of course the technology is not even close at this point.)  I could see some areas of math fitting naturally into this world.  Whereas others could be much harder and painful (probability theory comes to mind).  I’m just saying that when we think of outreach to mathematicians, I imagine some of them likely have this fear in the back of their mind, and we shouldn’t be too dismissive.</p>\n</blockquote>\n<p>I certainly don't want to be dismissive, but I often imagine a world where some kind of formalisation becomes necessary, and I actually find it very nice! Of course this should not happen suddenly, and each community must find it <em>natural</em> before requesting this as a standard. But in the long run I simply see it as a very good thing, precisely as LaTeX. But I wonder if I am too naif.</p>",
        "id": 248882432,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628531048
    },
    {
        "content": "<p>This starts in 3 hours, in case anyone is interested.<br>\n<a href=\"https://researchseminars.org/talk/ToposInstituteColloquium/33/\">https://researchseminars.org/talk/ToposInstituteColloquium/33/</a></p>",
        "id": 249236281,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628775880
    },
    {
        "content": "<p>The talk got the following labels <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span>  <code>Computer science</code> <code>algebraic topology</code> <code>category theory</code> <code>logic</code></p>",
        "id": 249237631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628776626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/249237631\">said</a>:</p>\n<blockquote>\n<p><code>algebraic topology</code></p>\n</blockquote>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 249237704,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628776680
    },
    {
        "content": "<p>Totally is algebraic topology.</p>",
        "id": 249239413,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1628777466
    },
    {
        "content": "<p>I just want to point out that the youtube stream currently has 37 viewers</p>",
        "id": 249264842,
        "sender_full_name": "Reid Barton",
        "timestamp": 1628788956
    },
    {
        "content": "<p>too many people wanted to verify this... it's up to 45</p>",
        "id": 249266271,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628789504
    },
    {
        "content": "<p>Recording seems to be here <a href=\"https://www.youtube.com/watch?v=alByz_LoANE\">https://www.youtube.com/watch?v=alByz_LoANE</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"alByz_LoANE\" href=\"https://www.youtube.com/watch?v=alByz_LoANE\"><img src=\"https://uploads.zulipusercontent.net/4294d21ccc6b95be32d0667e2cb20ee46f96693e/68747470733a2f2f692e7974696d672e636f6d2f76692f616c42797a5f4c6f414e452f64656661756c742e6a7067\"></a></div>",
        "id": 249308634,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1628813606
    },
    {
        "content": "<p>Kevin, could you share your slides?</p>",
        "id": 249340954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628847989
    },
    {
        "content": "<p>I made them in reveal-md so it's a little tricky.</p>",
        "id": 249347242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628852932
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/4U3OOYbUqx9vVX7vyEtLtlkX/slides.pdf\">slides.pdf</a> </p>\n<p>Will this do?</p>",
        "id": 249347545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628853148
    },
    {
        "content": "<p>Guess what I found in my science magazine... <a href=\"/user_uploads/3121/_jM740WA3CZb_UwL5oa3D0xy/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_jM740WA3CZb_UwL5oa3D0xy/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/_jM740WA3CZb_UwL5oa3D0xy/image.png\"></a></div>",
        "id": 252428196,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631091882
    },
    {
        "content": "<p>For those who can't read French<br>\n<strong>Proof assistants get a hold on real maths</strong><br>\nThe judgement of those automatic <em>(ahem)</em> programs will be soon unbounded. A machine <em>(understand the LTE people)</em> validated for the first time a very high level demonstration (in analytical geometry), when up to now only repetitive or standard proofs were validated <em>(hum... not really)</em>.</p>",
        "id": 252428310,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631091947
    },
    {
        "content": "<p>Which magazine is it?</p>",
        "id": 252428699,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631092163
    },
    {
        "content": "<p>Epsiloon. It's been created 6 months ago from all the journalists who left Science &amp; Vie (the editor changed ~2 years ago and has dubious practices).</p>",
        "id": 252428850,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631092243
    },
    {
        "content": "<p>This is in n°2 p. 13</p>",
        "id": 252428890,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631092272
    },
    {
        "content": "<p>Merci !</p>",
        "id": 252428913,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631092290
    },
    {
        "content": "<p>Hmmm, it's nice that they mention this, but it's a bit sad that they got half of the statements fronw.</p>",
        "id": 252436335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631096476
    },
    {
        "content": "<p>I googled for paracompact lattice and the top result was <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/paracompact.html\">https://leanprover-community.github.io/mathlib_docs/topology/paracompact.html</a></p>",
        "id": 253254451,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631627576
    },
    {
        "content": "<p>That's the goal right?</p>",
        "id": 253254811,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631627695
    },
    {
        "content": "<p>Taking over the Internet? Yes <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 253254871,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631627712
    },
    {
        "content": "<p>Are you sure it isn't Google that knows you like Lean? For me the Lean page is the fifth one, and doing it over TOR it's not even in the first page <span aria-label=\"unamused\" class=\"emoji emoji-1f612\" role=\"img\" title=\"unamused\">:unamused:</span></p>",
        "id": 253255519,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631627944
    },
    {
        "content": "<p>oh, could be</p>",
        "id": 253255904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631628043
    },
    {
        "content": "<p>big brother (-;</p>",
        "id": 253256236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631628164
    },
    {
        "content": "<p>I usually don't use google as my first choice search engine so I forgot about that</p>",
        "id": 253256774,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631628362
    },
    {
        "content": "<p>but it reads your emails, so it still knows what you like (-;</p>",
        "id": 253257550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631628632
    },
    {
        "content": "<p>Typing <code>mathlib</code> into duckduckgo (which I think is not remembering what I've clicked on in the past) it was the case for many months that the top link was to mathlib github, but as of a week so ago it's been sending me to the API documentation, which I thought was cool</p>",
        "id": 253274287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631634643
    },
    {
        "content": "<p><a href=\"https://www.reddit.com/r/math/comments/pt3h7k/cardano_chief_donates_20m_to_establish_carnegie/\">The amazing news about the Hoskinson Center has spread to Reddit</a></p>",
        "id": 254422983,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1632338423
    },
    {
        "content": "<p>Here's an interesting blockchain verification project that uses Lean: <a href=\"https://twitter.com/CairoLang/status/1443522554551996427?s=20\">https://twitter.com/CairoLang/status/1443522554551996427?s=20</a>. (No relation to Hoskinson and the center, just a fun side project for me.)</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/CairoLang/status/1443522554551996427?s=20\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/40b8dfc6fe712ab9fdb8e059b7b5b26b836094de/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313334393632393830313533313839353830392f4877684d515542435f6e6f726d616c2e6a7067\"></a><p>We use math to provide scaling for blockchains.\n\nHuman audits are the standard way to ensure code is error-free. We introduce a stronger alternative: a formal mathematical proof. \nThe LEAN system is used to prove the correctness of the Cairo AIR.\n<a href=\"https://t.co/fGXYyiaiVP\">https://arxiv.org/abs/2109.14534</a></p><span>- CairoLang (@CairoLang)</span></div></div>",
        "id": 255575051,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1633009080
    },
    {
        "content": "<p>Has anyone seen this? <a href=\"https://codegolf.meta.stackexchange.com/questions/23916/language-of-the-month-for-october-2021-lean\">https://codegolf.meta.stackexchange.com/questions/23916/language-of-the-month-for-october-2021-lean</a></p>",
        "id": 256777019,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1633714814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>  see <a href=\"#narrow/stream/113488-general/topic/Code.20Golf.20LOTM\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Code.20Golf.20LOTM</a></p>",
        "id": 256778115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633715257
    },
    {
        "content": "<p>On Wednesday, I'll be part of an informal discussion/presentation of formalization to an audience of blockchain developers that are new to the topic: <a href=\"https://www.crowdcast.io/e/in-mathematics-we-trust/register\">https://www.crowdcast.io/e/in-mathematics-we-trust/register</a>. I don't really know what to expect, but everyone is welcome to attend.</p>",
        "id": 259042274,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1635212729
    },
    {
        "content": "<p>Also tomorrow, I'll give a talk about Lean at <a href=\"https://cmsa.fas.harvard.edu/tech-in-math/\">https://cmsa.fas.harvard.edu/tech-in-math/</a>. It seems you need to ask for secret Zoom information (that I don't have...) if you want to attend.</p>",
        "id": 259093690,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635254023
    },
    {
        "content": "<p>Do you know where to ask?</p>",
        "id": 259096005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635255041
    },
    {
        "content": "<p>Just email Michael Douglas, listed at the top of that website.</p>",
        "id": 259096086,
        "sender_full_name": "Jason Rute",
        "timestamp": 1635255078
    },
    {
        "content": "<p>If you  want to actually attend the talk and get an answer then you should forward it to me.</p>",
        "id": 259098001,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635255846
    },
    {
        "content": "<p>The zoom link is <br>\n<a href=\"https://harvard.zoom.us/j/99651364593?pwd=Q1R0RTMrZ2NZQjg1U1ZOaUYzSE02QT09\">https://harvard.zoom.us/j/99651364593?pwd=Q1R0RTMrZ2NZQjg1U1ZOaUYzSE02QT09</a><br>\nThere is a password \"cmsa\" but you shouldn't need it if you type the link exactly.</p>",
        "id": 259098414,
        "sender_full_name": "Michael R Douglas",
        "timestamp": 1635256057
    },
    {
        "content": "<p>2 PM Eastern Time</p>",
        "id": 259098670,
        "sender_full_name": "Michael R Douglas",
        "timestamp": 1635256163
    },
    {
        "content": "<p>Which is <time datetime=\"2021-10-27T18:00:00Z\">2021-10-27T20:00:00+02:00</time> if I didn't make a timezone-calculation-error. (Edit: I did. Should be fine now.)</p>",
        "id": 259098688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635256172
    },
    {
        "content": "<p>I think you did -- <time datetime=\"2021-10-27T18:00:00Z\">2021-10-27T14:00:00-04:00</time></p>",
        "id": 259098949,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635256289
    },
    {
        "content": "<p>Aah, did you have a DST change already?</p>",
        "id": 259098981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635256305
    },
    {
        "content": "<p>Are we in that annoying window where we're still on DST and you're not?</p>",
        "id": 259098993,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635256311
    },
    {
        "content": "<p>I think Rob is correct</p>",
        "id": 259099053,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635256329
    },
    {
        "content": "<p>A friend of mine in Montreal says it's almost 10am there</p>",
        "id": 259099091,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635256344
    },
    {
        "content": "<p>Ooh, it seems we're still both on DST but I just can't count.</p>",
        "id": 259099140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635256372
    },
    {
        "content": "<p>There's a reason why I use Lean <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 259099177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635256388
    },
    {
        "content": "<p>And Jeremy's talk is at <time datetime=\"2021-10-27T16:00:00Z\">2021-10-28T03:00:00+11:00</time>.</p>",
        "id": 259175997,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635290894
    },
    {
        "content": "<p>Lean made Quanta’s list of top mathematical developments in 2021 <a href=\"https://www.quantamagazine.org/the-year-in-math-and-computer-science-20211223/\">https://www.quantamagazine.org/the-year-in-math-and-computer-science-20211223/</a></p>",
        "id": 266024381,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1640380374
    },
    {
        "content": "<p>Yeah, as did Ana Caraiani, who's four doors down from me at Imperial :-)</p>",
        "id": 266024446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640380473
    },
    {
        "content": "<p>Does that mean that Lean made it two years in a row?</p>",
        "id": 266041961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640408186
    },
    {
        "content": "<p>Yes the second year in a row <a href=\"https://www.quantamagazine.org/the-year-in-math-and-computer-science-20201223/\">https://www.quantamagazine.org/the-year-in-math-and-computer-science-20201223/</a></p>",
        "id": 266061760,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1640442817
    },
    {
        "content": "<p>DeepMind not mentioned??</p>",
        "id": 266090920,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1640493519
    },
    {
        "content": "<p>I can't help but mention that <a href=\"https://www.quantamagazine.org/mathematicians-prove-2d-version-of-quantum-gravity-really-works-20210617/\">one of the highlighted Quanta</a> articles of 2021 featured both my PhD supervisor (Antti Kupiainen) and my former PhD student (Eveliina Peltola) <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>. On the topic of counting doors, Eveliina is also nowadays <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> doors from me on the same corridor at Aalto, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is a small positive constant, which is perhaps just a bit worse than Kevin's constant <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span>. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>.</p>\n<p>Ok, that was not Lean-related... But the mathematical topic of that Quanta article was probabilistic / constructive quantum field theory, and my longer term hope/goal is that mathlib's probability theory will catch up with at least some such uses in mathematical physics!</p>",
        "id": 266169810,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1640609132
    },
    {
        "content": "<p>Zulip describes Lean as an ATP, should we correct them? <a href=\"https://chat.zulip.com/case-studies/lean/\">https://chat.zulip.com/case-studies/lean/</a></p>",
        "id": 267709313,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641985459
    },
    {
        "content": "<p>IDK about their reach, but might be worth it just to avoid spreading misinformation</p>",
        "id": 267732473,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641998117
    },
    {
        "content": "<p>I can contact whoever wrote this, what do we want it to say? \"automated proof system\" -&gt; \"interactive theorem prover\"?</p>",
        "id": 267736240,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641999743
    },
    {
        "content": "<p>It already says \"Lean is an interactive theorem-prover\" later in the article; so that should be acceptable!</p>",
        "id": 267745902,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1642003759
    },
    {
        "content": "<p><a href=\"https://github.com/zulip/zulip/pull/20848\">https://github.com/zulip/zulip/pull/20848</a>, I guess it will go live eventually</p>",
        "id": 268698151,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642688274
    },
    {
        "content": "<p>I'm honestly not sure what is happening but Wolfram seems to be streaming constructing some sort of Lean / Metamath import graphs on twitch <a href=\"https://www.twitch.tv/stephen_wolfram\">https://www.twitch.tv/stephen_wolfram</a> ?</p>",
        "id": 269331840,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643148320
    },
    {
        "content": "<p>Sorry, you posted to the wrong topic.</p>",
        "id": 269332158,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643148477
    },
    {
        "content": "<p>It's not Lean in the wild, it's wild Lean.</p>",
        "id": 269332214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643148491
    },
    {
        "content": "<p>This looks like a fun answer to \"why formalize mathematics\"</p>",
        "id": 269337037,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643150993
    },
    {
        "content": "<p>\"so that Stephen Wolfram can make funny diagrams\"? <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 269337487,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643151216
    },
    {
        "content": "<p>more like \"being able to visualize how mathematics comes together\"</p>",
        "id": 269337941,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643151460
    },
    {
        "content": "<p>We rarely have the chance to see something like this when we're so focused on figuring out particular vertices</p>",
        "id": 269338143,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643151572
    },
    {
        "content": "<p>It seems the latest video is all about Metamath and I can't find where Lean is mentioned. BTW <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> was featured in <a href=\"https://www.youtube.com/watch?v=zpDvP47Ppjs\">this episode</a> about Metamath.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"zpDvP47Ppjs\" href=\"https://www.youtube.com/watch?v=zpDvP47Ppjs\"><img src=\"https://uploads.zulipusercontent.net/a9cbb50026988fd657cb5090f996b945b166e2b3/68747470733a2f2f692e7974696d672e636f6d2f76692f7a70447650343750706a732f64656661756c742e6a7067\"></a></div>",
        "id": 269355465,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1643164637
    },
    {
        "content": "<p>Indeed it seems they mostly looked at metamath, I only saw this part way through so wasn't sure what was going on, one of his open windows (on the left 40 mins in <a href=\"https://www.twitch.tv/videos/1275782376\">https://www.twitch.tv/videos/1275782376</a>) is definitely experiments with the lean decl graph, but maybe that was from a different day or something</p>",
        "id": 269412450,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643204735
    },
    {
        "content": "<p>Probably related to <a href=\"https://writings.stephenwolfram.com/2020/09/the-empirical-metamathematics-of-euclid-and-beyond/\">https://writings.stephenwolfram.com/2020/09/the-empirical-metamathematics-of-euclid-and-beyond/</a> (Ctrl-F \"mathlib\")</p>",
        "id": 269422508,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1643208440
    },
    {
        "content": "<p>Interesting that <a href=\"http://set.mm\">set.mm</a> has more theorems yet far less definitions</p>",
        "id": 269424411,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643209167
    },
    {
        "content": "<p><a href=\"https://arxiv.org/abs/2201.08364\">https://arxiv.org/abs/2201.08364</a></p>",
        "id": 269526998,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643260544
    },
    {
        "content": "<p>Not sure if this has been shared, maybe in the Lean for teaching stream. Happy to discuss it in a sibling thread. Edit: upon reading it, I think it's worth discussing only until section 4, inclusive. I think the later sections are not of substance that deal with mathlib-related issues.</p>",
        "id": 269527056,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643260600
    },
    {
        "content": "<p>Has anyone seen <a href=\"https://siliconreckoner.substack.com/p/the-central-dogma-of-mathematical\">this article</a>?<br>\n<em>The Central Dogma of Mathematical Formalism</em></p>",
        "id": 269625080,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643311867
    },
    {
        "content": "<p>I wish I hadn't</p>",
        "id": 269629235,
        "sender_full_name": "David Wärn",
        "timestamp": 1643313572
    },
    {
        "content": "<p>I read this twice when Kevin retweeted it; I had a hard time discerning the author's point and it took me a second go to realize it wasn't my fault. They seem to be upset that proponents of formalism are promoting something as \"proof\" that lacks the elements of his definition of \"proof\" (as elucidated in the quote about Wiles). I haven't met anyone who thinks these concepts of proof are really in direct competition for anything, so I'm  not sure what they're upset about.</p>",
        "id": 269630371,
        "sender_full_name": "Chris B",
        "timestamp": 1643314036
    },
    {
        "content": "<p>I found the anecdote about Theorem 2.5.6 funny.</p>",
        "id": 269630704,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1643314176
    },
    {
        "content": "<blockquote>\n<p>I had a hard time discerning the author's point</p>\n</blockquote>\n<p>I second that. My best guess is that the author is upset about how formalization turns mathematics into a mechanical thing</p>",
        "id": 269631418,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643314538
    },
    {
        "content": "<p>There's a POPL panel on proof assistants with Kevin and others going on right now btw <a href=\"https://www.youtube.com/watch?v=Oqc2_TEyeaU\">https://www.youtube.com/watch?v=Oqc2_TEyeaU</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Oqc2_TEyeaU\" href=\"https://www.youtube.com/watch?v=Oqc2_TEyeaU\"><img src=\"https://uploads.zulipusercontent.net/3ff93918481e466d8f4f31ecad787cbd9db0cbbf/68747470733a2f2f692e7974696d672e636f6d2f76692f4f7163325f5445796561552f64656661756c742e6a7067\"></a></div>",
        "id": 269631982,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643314813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/269631982\">said</a>:</p>\n<blockquote>\n<p>There's a POPL panel on proof assistants with Kevin and others going on right now btw <a href=\"https://www.youtube.com/watch?v=Oqc2_TEyeaU\">https://www.youtube.com/watch?v=Oqc2_TEyeaU</a></p>\n</blockquote>\n<p>They did mention proof by reflection on the topic of proof automation, I've never heard that before I think, do we have stuff like that in Lean I can take a look at? Or some non-Lean ressources people would recommend?</p>",
        "id": 269640008,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643318605
    },
    {
        "content": "<p>There is a <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring2\">tactic#ring2</a> that works by reflection. Also the Coq library MathComp is extensively based on reflection.</p>",
        "id": 269641278,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643319165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/269640008\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/269631982\">said</a>:</p>\n<blockquote>\n<p>There's a POPL panel on proof assistants with Kevin and others going on right now btw <a href=\"https://www.youtube.com/watch?v=Oqc2_TEyeaU\">https://www.youtube.com/watch?v=Oqc2_TEyeaU</a></p>\n</blockquote>\n<p>They did mention proof by reflection on the topic of proof automation, I've never heard that before I think, do we have stuff like that in Lean I can take a look at? Or some non-Lean ressources people would recommend?</p>\n</blockquote>\n<p><a href=\"https://alectryon-paper.github.io/bench/books/proof-by-reflection.html\">https://alectryon-paper.github.io/bench/books/proof-by-reflection.html</a> is a nice read; I was hoping to do this in Lean someday but I never got to it</p>",
        "id": 269641612,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643319283
    },
    {
        "content": "<p>In Lean 3, you don't really want to use reflection because it moves computation from the relatively fast vm to the slower kernel. I understand Lean 4 has special support for fast proofs by reflection, and Coq definitely supports it well.</p>",
        "id": 269641714,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643319331
    },
    {
        "content": "<p>Oh? I mainly work with Lean 4 so I'd definitely be interested in that, do you have some source for that claim I could dig further into?</p>",
        "id": 269642054,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643319456
    },
    {
        "content": "<p>I don't know if it's written somewhere else, but the main feature in Lean 4 is the <code>reduceBool</code> operator: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Core.lean#L1035\">https://github.com/leanprover/lean4/blob/master/src/Init/Core.lean#L1035</a></p>",
        "id": 269642395,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643319606
    },
    {
        "content": "<p>Note that <code>reduceBool</code> goes a bit further than proof by reflection in the lean 3 sense. It is more like \"trusting <code>#eval</code>\", it is an extra axiom and it goes outside the regular type theory (external verifiers can't follow it)</p>",
        "id": 269642799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643319827
    },
    {
        "content": "<p>A smaller step toward faster kernel computation in lean 4 (which does not require new axioms) is that bignums are now part of the kernel spec: the <code>nat.add</code> and <code>nat.mul</code> functions work directly on nat literals represented as bignums in the kernel so they are orders of magnitude faster than lean 3.</p>",
        "id": 269643046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643319955
    },
    {
        "content": "<p>Given the caveats stated there, have we discussed whether we'll be allowing <code>reduceBool</code> in mathlib after the port?</p>",
        "id": 269644768,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1643320454
    },
    {
        "content": "<p>Here's another example just to make the point about what you have to trust:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[implementedBy Bool.false]</span>\n<span class=\"kd\">def</span> <span class=\"n\">truish</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">truthy</span> <span class=\"o\">:</span> <span class=\"n\">truish</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">falsy</span> <span class=\"o\">:</span> <span class=\"n\">truish</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nativeDecide</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">contradiction</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">Bool.noConfusion</span> <span class=\"n\">falsy</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">contradiction</span>\n<span class=\"c1\">-- 'contradiction' depends on axioms: [Lean.ofReduceBool]</span>\n</code></pre></div>",
        "id": 269644865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643320507
    },
    {
        "content": "<p>I wonder whether there should be an attribute for \"(un)trusted <code>implementedBy</code>\", such that proofs by <code>reduceBool</code> are only allowed to use the trusted ones. (There are other reasons to use <code>implementedBy</code> where the concern is more about good codegen than proving, and so you probably want to default to untrusted.)</p>",
        "id": 269645336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643320691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/269625080\">said</a>:</p>\n<blockquote>\n<p>Has anyone seen <a href=\"https://siliconreckoner.substack.com/p/the-central-dogma-of-mathematical\">this article</a>?<br>\n<em>The Central Dogma of Mathematical Formalism</em></p>\n</blockquote>\n<p>You don't need to read it, the author name is enough. The best you can do is to either ignore him or consider him as a running joke if you like that kind of jokes.</p>",
        "id": 269645383,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643320717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/269641612\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://alectryon-paper.github.io/bench/books/proof-by-reflection.html\">https://alectryon-paper.github.io/bench/books/proof-by-reflection.html</a> is a nice read; I was hoping to do this in Lean someday but I never got to it</p>\n</blockquote>\n<p>I tried to do some parts of this a little while ago, maybe not the cleanest implementation ever but I think I had a more or less working monoid tactic if you are interested <a href=\"https://github.com/leanprover-community/mathlib/blob/alexjbest/reflection_experiments2/src/tactic/myring.lean\">https://github.com/leanprover-community/mathlib/blob/alexjbest/reflection_experiments2/src/tactic/myring.lean</a></p>",
        "id": 269656078,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643325683
    },
    {
        "content": "<p>I tweeted about Michael Harris's article because he's a good friend of mine and I think his point that in 20 years' time all our proofs won't compile any more is worth noting. Obviously we have very different views on other things but he's a very respected figure in my community -- he proved the local Langlands conjectures for GL(n) with my advisor, for example.</p>",
        "id": 269657061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643326183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/269656078\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/269641612\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://alectryon-paper.github.io/bench/books/proof-by-reflection.html\">https://alectryon-paper.github.io/bench/books/proof-by-reflection.html</a> is a nice read; I was hoping to do this in Lean someday but I never got to it</p>\n</blockquote>\n<p>I tried to do some parts of this a little while ago, maybe not the cleanest implementation ever but I think I had a more or less working monoid tactic if you are interested <a href=\"https://github.com/leanprover-community/mathlib/blob/alexjbest/reflection_experiments2/src/tactic/myring.lean\">https://github.com/leanprover-community/mathlib/blob/alexjbest/reflection_experiments2/src/tactic/myring.lean</a></p>\n</blockquote>\n<p>this is really cool, thanks for sharing Alex!</p>",
        "id": 269659698,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643327590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/269657061\">said</a>:</p>\n<blockquote>\n<p>I tweeted about Michael Harris's article because he's a good friend of mine and I think his point that in 20 years' time all our proofs won't compile any more is worth noting. Obviously we have very different views on other things but he's a very respected figure in my community -- he proved the local Langlands conjectures for GL(n) with my advisor, for example.</p>\n</blockquote>\n<p>I don't think you're helping your old friend with such tweets. People should have the right to slowly decline in the shadow without other being invited to watch the show. It reminds me the last years of Atiyah when everybody knew he hadn't prove the big theorem he was claiming to have proven but people we still inviting him to talk about his \"proof\" in prestigious conferences simply because of his past achievements. I thought that was sad and shameful.</p>",
        "id": 269699790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643357366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/269699790\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/269657061\">said</a>:</p>\n<blockquote>\n<p>I tweeted about Michael Harris's article because he's a good friend of mine and I think his point that in 20 years' time all our proofs won't compile any more is worth noting. Obviously we have very different views on other things but he's a very respected figure in my community -- he proved the local Langlands conjectures for GL(n) with my advisor, for example.</p>\n</blockquote>\n<p>I don't think you're helping your old friend with such tweets. People should have the right to slowly decline in the shadow without other being invited to watch the show. It reminds me the last years of Atiyah when everybody knew he hadn't prove the big theorem he was claiming to have proven but people we still inviting him to talk about his \"proof\" in prestigious conferences simply because of his past achievements. I thought that was sad and shameful.</p>\n</blockquote>\n<p>Well, I don't think the situations are comparable. Michael is still alive and kicking in his mathematics. [And I believe he's always had a tendency for philosophical considerations that are at times difficult to follow.]</p>",
        "id": 269703620,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1643359580
    },
    {
        "content": "<p>I would like at least to defend some of the ideas of the post. The central thesis I distilled is that this currently trendy branch of mathematical formalism, that a proof is a proof iff it can be transformed into a formal arrangement of symbols checked for syntactic correctness by an automated process, is merely an ideology that can/should/will be subverted by another. (I use ideology here in a more epistemological sense, as a set of beliefs that define which topics are considered useful to know, discuss or research.) Formalism certainly is not a universally accepted standpoint, even though it would be in the interest of the ITP community to agree with it unanimously.</p>\n<p>What I really miss in the post is engaging with previous iterations of debates on mathematical formalism  — getting rid of the details about computers and cryptocurrency I can imagine Brouwer writing such an essay against Hilbert. So what makes the current situation interesting? Are there differences in kind or degree to that of the early 20th century?</p>",
        "id": 269716126,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643366419
    },
    {
        "content": "<p>To be provocative: the Lean community's reaction to the post is a proof in itself of the thesis that formalism is an ideology <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 269716383,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643366584
    },
    {
        "content": "<p>Maybe it's an ideology, but for me it's just so much fun!</p>",
        "id": 269717728,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643367330
    },
    {
        "content": "<p>Indeed, that's another aspect that is not really touched upon in the article: you can be a formal<em>izer</em> without being a formal<em>ist</em>.</p>",
        "id": 269718607,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643367752
    },
    {
        "content": "<p>Talking about provocativeness, the \"iff\" that the author talks about (from Avigad's speech) might be a bit hard on professional mathematicians who don't enjoy formalization and are not willing to formalize their results</p>",
        "id": 269722635,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643370042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/269718607\">said</a>:</p>\n<blockquote>\n<p>Indeed, that's another aspect that is not really touched upon in the article: you can be a formal<em>izer</em> without being a formal<em>ist</em>.</p>\n</blockquote>\n<p>This is exactly my issue with Harris' article and a previous one I had read as well. It feels like he's criticizing ITP by criticizing a strawman of the ITP community - there are certainly ITP folks with a hard formalist position, ones who think that formalized proofs should replace peer-reviewed formal proofs in natural language or ones who think that mathematics should be done by AI, but I don't think that these are positions held in general by the ITP community, or that they are even the main reasons why people are interested in ITP. <br>\nThis may in part be due to the running theme of his blog, with ITP being just one of multiple areas that he's commenting on from the same perspective, thus limiting the scope. </p>\n<p>I'd also be more sympathetic to the article if the points were made less rhetorically (i.e. they'd read less like an LSD trip :-)), and I didn't feel like I'm spending more time trying to understand the points in the article than the author spent time writing it.</p>",
        "id": 269723868,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1643370724
    },
    {
        "content": "<p>I personally found the article interesting.  It may be a bit meandering and have some strawman arguments, but the author was careful to insist this was about his values.  I've certainly heard FM researchers express disdain for results that haven't been formally specified and verified.  It's usually younger researchers and not the majority, but a sometimes vocal subgroup.<br>\nI really like the field, but think it would be a tragedy if reviewers were to reject papers with interesting ideas that were not fully backed by formal proof.  That would only serve to further limit what could be expressed and considered, and academic CS is often too narrow as is in my opinion.</p>",
        "id": 269772163,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1643391248
    },
    {
        "content": "<p>I have to say, I was somewhat taken aback by being characterized as putting forth a \"militant but unsubstantiated attempt to ventriloquize mathematics.\" It's far from straightforward to try to extract from the post a clear understanding of what Harris' concerns are, and the extent to which they are incompatible with the aims of the Lean and mathlib community. I will leave it to others to engage in that debate. But, for the record, I'd like to point out that the quotation is taken from the first section of this paper:<br>\n<a href=\"http://philsci-archive.pitt.edu/16725/1/reliability.pdf\">http://philsci-archive.pitt.edu/16725/1/reliability.pdf</a><br>\nI hope that readers of the post will at least have the courtesy of reading that before weighing in on whether the snippet is militant and unsubstantiated.</p>",
        "id": 269786547,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1643396844
    },
    {
        "content": "<p>A clarification: by \"that,\" I mean only the first section of the paper, which spells out the view that Harris (seems to be) attacking.</p>",
        "id": 269787604,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1643397269
    },
    {
        "content": "<p>Jeremy, you shouldn't worry too much. Harris is really making a fool of himself. I haven't read that last blog post because there so many interesting things to do instead, but the previous iterations were even more a caricature of Harris than a caricature of us.</p>",
        "id": 269788489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643397687
    },
    {
        "content": "<p>He knows very well that the ideas he is attacking do not exist.</p>",
        "id": 269788543,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643397717
    },
    {
        "content": "<p>If that was the case, why is he doing it then?</p>",
        "id": 269792194,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643399417
    },
    {
        "content": "<p><a href=\"https://openai.com/blog/formal-math/\">https://openai.com/blog/formal-math/</a></p>",
        "id": 270436275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643827132
    },
    {
        "content": "<p>Very cool.</p>",
        "id": 270438170,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643827986
    },
    {
        "content": "<p>I'm curious how <code>nlinarith</code> can prove Schur's inequality because I thought the difference of the two sides was not a sum of squares of polynomials.</p>",
        "id": 270438224,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643828010
    },
    {
        "content": "<p>Not directly Lean-related but feels appropriate to mention this blog post from today as well:<br>\n<a href=\"https://deepmind.com/blog/article/Competitive-programming-with-AlphaCode\">https://deepmind.com/blog/article/Competitive-programming-with-AlphaCode</a></p>",
        "id": 270439894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643828695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/270438224\">said</a>:</p>\n<blockquote>\n<p>I'm curious how <code>nlinarith</code> can prove Schur's inequality because I thought the difference of the two sides was not a sum of squares of polynomials.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> my best guess is that prompted with the sq_nonneg arguments it finds another way to get to the proof not necessarily stepping through anything Schur's like?</p>",
        "id": 270444177,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1643830356
    },
    {
        "content": "<p>Maybe this is for the mathlib ML channel, but given that the model can now prove statements, perhaps it can be modified to invent new tactics. What I mean by that, is create sensible subgoals, and extrapolate what steps it would like to take. Then if there are sequences of tactic states it would like to take, and that occurs often, maybe that's a missing tactic in our conceptual vocabulary that would be good to have. Stan, have you done training/validation where you ablate lemmas or tactics available to the model?</p>",
        "id": 270447204,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643831566
    },
    {
        "content": "<p>Not only tactics, but also some more granular key lemmas</p>",
        "id": 270447854,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643831819
    },
    {
        "content": "<p>After reading Harris's article, the thing that struck me was that he seems to be confusing/conflating proof verification vs proof construction and logical vs rhetorical argument. The former is evidence by his rigorous vs heuristic distinction (which is exactly the separation between proof verification and construction lie) and the latter is by his artifact vs social process distinction (which is exactly where the separation between logical and rhetorical argument lie).</p>",
        "id": 270492520,
        "sender_full_name": "Mac",
        "timestamp": 1643855829
    },
    {
        "content": "<p>It also slightly concerns me that Harris thinks mathematical proof is primarily a social process (i.e., rhetoric). While it is true that arguments for parts of mathematics are fundamentally rhetorical in nature (i.e., belief in the plausibility of first principles like the law of the excluded middle), the hope (as I see it) is that rest of mathematics follows objectively/logically from these principles and is not merely a matter of rhetorical consensus.</p>",
        "id": 270493172,
        "sender_full_name": "Mac",
        "timestamp": 1643856429
    },
    {
        "content": "<p>Rhetorical consensus has a big part to play in practice (bigger than what some in the CS world realise, I suspect). As a formalist I would argue that logical deduction should have something to do with it but thinking about it now I think that one could argue that when it comes to getting your paper published all you're asking is that the referees say it's fine, and if none of them read section 4 properly because it was technical and they were busy then maybe Harris has a point that rhetorical consensus is actually what's going on in practice</p>",
        "id": 270513780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643876683
    },
    {
        "content": "<p>The \"social construct\" part also means that what you write as a proof in a paper is not a proof, but a discourse intended to mean something along the lines of \"let me convince you that somewhere in the cavern exists a proof of my result, if you wanted to recover it you would start from first principles and do this, that and the other thing, but <em>of course</em> this is not doable in practice\" and so a large part is convincing other mathematicians rather than actually writing a proof.</p>\n<p>What is changing now is that the \"of course this is not doable in practice\" is becoming less and less true <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 270515968,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643878082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/270436275\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://openai.com/blog/formal-math/\">https://openai.com/blog/formal-math/</a></p>\n</blockquote>\n<p>Now discussed on HN: <a href=\"https://news.ycombinator.com/item?id=30181636\">https://news.ycombinator.com/item?id=30181636</a></p>",
        "id": 270536496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643889095
    },
    {
        "content": "<p>Also discussed now by Yannic Kilcher: <a href=\"https://www.youtube.com/watch?v=McpjrsHrEY4#t=11m30s\">https://www.youtube.com/watch?v=McpjrsHrEY4#t=11m30s</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"McpjrsHrEY4\" href=\"https://www.youtube.com/watch?v=McpjrsHrEY4#t=11m30s\"><img src=\"https://uploads.zulipusercontent.net/adb8a39455927d8b682b44194ad49a419d9eb8b1/68747470733a2f2f692e7974696d672e636f6d2f76692f4d63706a727348724559342f64656661756c742e6a7067\"></a></div>",
        "id": 271518775,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644542341
    },
    {
        "content": "<p>There's an undergraduate conference in a few weeks <a href=\"https://sites.google.com/view/imatmt2022/\">https://sites.google.com/view/imatmt2022/</a>  in the UK; it's a yearly thing, it's online this year. They get a bunch of UG speakers and a couple of bigshots and have a two day event. Of the 25 or so talks (covering pure and applied mathematics), three undergraduates chose to speak about Lean. Furthermore, none of those undergraduates are from Imperial! We have Yael (Cambridge), and then Hernan Ibarra Mejia from Sheffield (presumably they talked to Neil Strickland) and then Paul Lezeau from Warwick who worked with Damiano. I find this very exciting because it means this stuff is catching on with the younger generation.</p>",
        "id": 272001175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644943275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/269631982\">said</a>:</p>\n<blockquote>\n<p>There's a POPL panel on proof assistants with Kevin and others going on right now btw <a href=\"https://www.youtube.com/watch?v=Oqc2_TEyeaU\">https://www.youtube.com/watch?v=Oqc2_TEyeaU</a></p>\n</blockquote>\n<p>It's unfortunate that video is now private. Is there a public archived version?</p>",
        "id": 274211394,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1646444417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130272\">@David Michael Roberts</span> <a href=\"https://www.youtube.com/watch?v=O15dbvEDApg\">https://www.youtube.com/watch?v=O15dbvEDApg</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"O15dbvEDApg\" href=\"https://www.youtube.com/watch?v=O15dbvEDApg\"><img src=\"https://uploads.zulipusercontent.net/3981ab9ab8f5fd55ea295f70945108bff1d7338c/68747470733a2f2f692e7974696d672e636f6d2f76692f4f313564627645444170672f64656661756c742e6a7067\"></a></div>",
        "id": 274211768,
        "sender_full_name": "Chris B",
        "timestamp": 1646444889
    },
    {
        "content": "<p>More stuff on the recent OpenAI work solving Olympiad like problems in Lean.  This is a video by Yannic Kilcher covering the paper.  (I haven’t watched it yet.)  <a href=\"https://m.youtube.com/watch?v=lvYVuOmUVs8&amp;feature=youtu.be\">https://m.youtube.com/watch?v=lvYVuOmUVs8&amp;feature=youtu.be</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"lvYVuOmUVs8\" href=\"https://m.youtube.com/watch?v=lvYVuOmUVs8&amp;feature=youtu.be\"><img src=\"https://uploads.zulipusercontent.net/04682e2752f77ab4563feeb55efaa4f7301ce3a3/68747470733a2f2f692e7974696d672e636f6d2f76692f6c765956754f6d555673382f64656661756c742e6a7067\"></a></div>",
        "id": 274275076,
        "sender_full_name": "Jason Rute",
        "timestamp": 1646527805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> <span class=\"user-mention\" data-user-id=\"249373\">@Stanislas Polu</span> Do we have an interview with you and Yannic to look forward to?  (Lately his videos have been paired with author interviews so that is why I ask.)</p>",
        "id": 274275103,
        "sender_full_name": "Jason Rute",
        "timestamp": 1646527898
    },
    {
        "content": "<p>I should have watched the first 5 minutes before saying anything.   He says right at the beginning that tomorrow he will release another video interviewing <span class=\"user-mention\" data-user-id=\"249373\">@Stanislas Polu</span> about the paper.</p>",
        "id": 274275946,
        "sender_full_name": "Jason Rute",
        "timestamp": 1646529066
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=kl3aBni87jg\">https://www.youtube.com/watch?v=kl3aBni87jg</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"kl3aBni87jg\" href=\"https://www.youtube.com/watch?v=kl3aBni87jg\"><img src=\"https://uploads.zulipusercontent.net/af255bb6d85443b2500fc3ac260ca10ea83b90b1/68747470733a2f2f692e7974696d672e636f6d2f76692f6b6c3361426e6938376a672f64656661756c742e6a7067\"></a></div>",
        "id": 274318530,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1646588323
    },
    {
        "content": "<p>The game is afoot...</p>\n<p><a href=\"https://twitter.com/EgbertRijke/status/1505168608615354369?s=20&amp;t=3aXnrqzJz6f9egLwjzTxAQ\">https://twitter.com/EgbertRijke/status/1505168608615354369?s=20&amp;t=3aXnrqzJz6f9egLwjzTxAQ</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/EgbertRijke/status/1505168608615354369?s=20&amp;t=3aXnrqzJz6f9egLwjzTxAQ\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/1e908a1fcae3baa19a3a26c5d4866efe5948a638/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313233353930373234363832353039353136382f6d58355346427a725f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/EscardoMartin\">@EscardoMartin</a> <a href=\"https://twitter.com/Aqissiaq\">@Aqissiaq</a> <a href=\"https://twitter.com/jonaprietoc\">@jonaprietoc</a> The plan is to overtake lean’s mathlib</p><span>- Egbert Rijke 🇺🇦 (@EgbertRijke)</span></div></div>",
        "id": 275923221,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647714984
    },
    {
        "content": "<p>Are we comparing lines of code? Because I have some golfing I can revert :)</p>",
        "id": 275923286,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647715082
    },
    {
        "content": "<p>I think that competition is healthy.</p>",
        "id": 275923319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647715087
    },
    {
        "content": "<p>IMO The true competition is to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>π</mi><mn>1</mn><mrow><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">t</mi></mrow></msubsup><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">P</mi><mn>1</mn></msup><mo>∖</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">}</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\pi_1^{\\mathrm{et}}(\\mathbb{P}^1 \\smallsetminus \\{0,1,\\infty\\})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">et</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin amsrm\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">})</span></span></span></span> and prove that it's the profinite completion of the free group on two generators, using the <em>fewest</em> lines of code.</p>",
        "id": 275924475,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647716605
    },
    {
        "content": "<p><del>no linebreaks</del></p>",
        "id": 275925148,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647717721
    },
    {
        "content": "<p>Well at least we know where to start there -- define an etale morphism of schemes.</p>",
        "id": 275927768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647721367
    },
    {
        "content": "<p>I mentioned that result because it's something that I think is only possible with a large unified library like mathlib. The argument goes through the Riemann existence theorem, so it involves not just algebraic geometry, but also complex manifolds and algebraic topology.</p>",
        "id": 275928228,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647722070
    },
    {
        "content": "<p>Well Jujian is working on GAGA ;-) I see what you mean though. It is really hard to imagine that this sort of thing can be done in any way other than the way we're approaching it.</p>",
        "id": 275928416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647722340
    },
    {
        "content": "<p>Not really \"in the wild\" but Heather is talking in London Learning Lean today at <time datetime=\"2022-03-24T16:00:00Z\">2022-03-24T16:00:00Z</time> , about Fourier series in mathlib. See <a href=\"https://researchseminars.org/talk/LondonLearningLean/7/\">https://researchseminars.org/talk/LondonLearningLean/7/</a> for Zoom details.</p>",
        "id": 276458224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648119177
    },
    {
        "content": "<p>If I understand correctly <a href=\"https://www.mathunion.org/fileadmin/IMU/ICM2022/Program/Virtual_ICM_2022_Program_Schedule.pdf\">this</a>, Kevin's talk at the ICM will be at <time datetime=\"2022-07-09T07:00:00Z\">2022-07-09T09:00:00+02:00</time></p>",
        "id": 277198907,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648671084
    },
    {
        "content": "<p><a href=\"https://fredrikj.net/blog/2022/04/things-i-would-like-to-see-in-a-computer-algebra-system/\">Fredrik Johansson's blog post \"Things I would like to see in a computer algebra system\"</a> recently hit the front page of Hacker News. I think we've had a few discussions here about computer algebra in Lean, and this might be of interest. (It also mentions Lean/mathlib).</p>",
        "id": 279720291,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1650565568
    },
    {
        "content": "<blockquote>\n<p>Large but lean</p>\n</blockquote>\n<p>Well, Lean is pretty lean.</p>",
        "id": 279721013,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650565885
    },
    {
        "content": "<p>Here's the HN discussion: <a href=\"https://news.ycombinator.com/item?id=31101332\">https://news.ycombinator.com/item?id=31101332</a></p>",
        "id": 279721864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650566333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/279721013\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Large but lean</p>\n</blockquote>\n<p>Well, Lean is pretty lean.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 279723446,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650567070
    },
    {
        "content": "<p>I don't know if this is still counting as \"in the wild\",  but there is another <a href=\"https://twitter.com/GuillaumeLample/status/1529107248013795333?cxt=HHwWioCz1Zi8vbgqAAAA\">AI for theorem proving paper using Lean</a>.  This one is by Meta AI (along with <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and <span class=\"user-mention\" data-user-id=\"411224\">@Amaury Hayat</span>).  I made a topic to discuss it in <a class=\"stream-topic\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Paper.3A.20HyperTree.20Proof.20Search.20for.20Neural.20Theorem.20Proving\">#Machine Learning for Theorem Proving &gt; Paper: HyperTree Proof Search for Neural Theorem Proving</a>.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/GuillaumeLample/status/1529107248013795333?cxt=HHwWioCz1Zi8vbgqAAAA\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/a77c5db4fcb26731a76147fdcee12dd94482d501/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313230343532393931363032363435383131322f5f6b6354557038735f6e6f726d616c2e6a7067\"></a><p>Excited to release our latest work: <a href=\"https://t.co/E7BdFH72El\">https://arxiv.org/abs/2205.11491</a> We present a new algorithm, HyperTree Proof Search (HTPS) inspired by the recent success of AlphaZero. Our model is able to prove mathematical theorems in a fully automated way and significantly outperforms the SOTA. 1/n <a href=\"https://t.co/KdNjFDifB3\">https://twitter.com/GuillaumeLample/status/1529107248013795333/photo/1</a></p><span>- Guillaume Lample (@GuillaumeLample)</span><div class=\"twitter-image\"><a href=\"https://t.co/KdNjFDifB3\"><img src=\"https://uploads.zulipusercontent.net/a1077e697bf9c5a9aadda8e810fdd0454ff7e8d9/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f465468577a485657414141707753552e6a70673a6d656469756d\"></a></div></div></div>",
        "id": 283824280,
        "sender_full_name": "Jason Rute",
        "timestamp": 1653439916
    },
    {
        "content": "<p>Thanks for sharing. It is awesome that <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is one of the co-authors.</p>",
        "id": 283907940,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1653496499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239426\">@Christian Szegedy</span>  and Gary Marcus have a <a href=\"https://mobile.twitter.com/ChrSzegedy/status/1534082344096702464?cxt=HHwWgICpgfPwk8oqAAAA\">simple bet</a> going on whether by 2029 the following will happen:</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://mobile.twitter.com/ChrSzegedy/status/1534082344096702464?cxt=HHwWgICpgfPwk8oqAAAA\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/6d540f4030c0b0bfcb2984a28ac4cfe24a99a97d/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3930393236373932333638373936383736382f6731484c4a4d70395f6e6f726d616c2e6a7067\"></a><p>I am happy to have a long bet with anyone including <a href=\"https://twitter.com/MelMitchell1\">@MelMitchell1</a> or <a href=\"https://twitter.com/GaryMarcus\">@GaryMarcus</a>  on the formalization + theorem proving capabilities of AIs by 2029.\n\nI am fairly confident that we will have a system with comparable or stronger capabilities to/than strong human mathematicians. <a href=\"https://t.co/g4NeB5Wvga\">https://twitter.com/Plinz/status/1534075309300928512</a></p><span>- Christian Szegedy (@ChrSzegedy)</span></div></div><ul>\n<li>A diverse set of 100 graduate text books are automatically formalize/verified in a popular proof assistant (eg Lean).</li>\n<li>10% of problems from a preselected 100 open human conjectures is proved completely autonomously.</li>\n</ul>\n<p>Not very Lean specific, but Lean is mentioned a few times.  Regardless of the proof assistant I would find this quite impressive.</p>",
        "id": 285335318,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654652671
    },
    {
        "content": "<p>There is a new article by Harris on Lean and LTE <a href=\"https://www.pourlascience.fr/sd/mathematiques/les-mathematiciens-face-au-defi-des-machines-23662.php\">here</a>; it is in French, and I found it very balanced and objective, both in telling about his (mild?) concerns expressed at personal level, and in describing what proof assistants are.</p>",
        "id": 287829703,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656496211
    },
    {
        "content": "<p>See also: <a href=\"https://siliconreckoner.substack.com/p/mathematicians-challenged-by-machines\">https://siliconreckoner.substack.com/p/mathematicians-challenged-by-machines</a> for a little on Harris' backstory on the article, and an early english version (for those without a Pour la Science subscription <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 287842359,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656504277
    },
    {
        "content": "<p>Broken link in Harris' English article: <a href=\"https://leanprover-community.github.io/liquid/dep_graph.html\">https://leanprover-community.github.io/liquid/dep_graph.html</a></p>",
        "id": 287847602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656507117
    },
    {
        "content": "<p>Probably my French is not quite good enough and I missed it, but it seems that the article does not draw a clear distinction between interactive theorem proving and automated theorem proving. As long as computer proofs remain mostly interactive proofs, I am quite certain we're going to need many more human mathematicians :P</p>",
        "id": 287856063,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656510567
    },
    {
        "content": "<p>I very much appreciate the sidebar on conjecture generation, which in my opinion is a much more interesting task to see automated than proof generation, since it is in a way so much more unrestricted.</p>",
        "id": 287856591,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656510763
    },
    {
        "content": "<blockquote>\n<p>conjecture generation</p>\n</blockquote>\n<p>Make it rain crazy questions <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 287856887,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656510881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/287856063\">said</a>:</p>\n<blockquote>\n<p>Probably my French is not quite good enough and I missed it, but it seems that the article does not draw a clear distinction between interactive theorem proving and automated theorem proving. As long as computer proofs remain mostly interactive proofs, I am quite certain we're going to need many more human mathematicians <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>\n</blockquote>\n<p>You are right, there is no such clear distinction.</p>",
        "id": 287864573,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656513824
    },
    {
        "content": "<p>Which I think is common in his articles (to conflate the two).</p>",
        "id": 287887201,
        "sender_full_name": "Jason Rute",
        "timestamp": 1656522668
    },
    {
        "content": "<p>Just stumbled on another article about Lean in Quanta Magazine:<br>\n<a href=\"https://www.quantamagazine.org/can-computers-be-mathematicians-20220629/\">https://www.quantamagazine.org/can-computers-be-mathematicians-20220629/</a></p>\n<blockquote>\n<p>And if so, will mathematicians like me and my guest ever be out of a job? Not just out-computed, but out-thought? So joining me now is Kevin Buzzard, professor of pure mathematics at Imperial College London.</p>\n</blockquote>",
        "id": 288414250,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1656943948
    },
    {
        "content": "<p>Kevin said on discord that he thought this interview happened in 2021, hence the claim that Yaël has only been around 6 months</p>",
        "id": 288414628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656944193
    },
    {
        "content": "<p>yeah I'd forgotten about it!</p>",
        "id": 288414674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656944223
    },
    {
        "content": "<p>Of possible interest: <a href=\"https://www.scientificamerican.com/article/should-machines-replace-mathematicians/\">Should Machines Replace Mathematicians?</a> by John Horgan in the Scientific American, which features André Weil, myself, Shinichi Mochizuki and Michael Harris (in the order of the text). <br>\nIt's very difficult for journalists to give subtle accounts and not to deform to some extent one's view, but it's ok, one has to live with this fact.</p>",
        "id": 288970243,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1657301489
    },
    {
        "content": "<p>For a minute I came in expecting Mochizuki had commented on theorem provers (or somehow Weil given I didn't know how long ago he'd passed). Fun article though, congrats for being featured in it.</p>",
        "id": 288978391,
        "sender_full_name": "Julian Berman",
        "timestamp": 1657305786
    },
    {
        "content": "<p>Thank you Julian.<br>\nI would be curious to have Andre Weil's take on proof assistants!</p>",
        "id": 288980309,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1657306880
    },
    {
        "content": "<p>I was lucky enough to meet him, but I didn't ask :-) (it was 1995)</p>",
        "id": 288981196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657307311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/288978391\">said</a>:</p>\n<blockquote>\n<p>For a minute I came in expecting Mochizuki had commented on theorem provers (or somehow Weil given I didn't know how long ago he'd passed). Fun article though, congrats for being featured in it.</p>\n</blockquote>\n<p>FWIW, Mochizuki does have some comments about \"computer verification\" in section 1.12 of<br>\n<a href=\"https://www.kurims.kyoto-u.ac.jp/~motizuki/Essential%20Logical%20Structure%20of%20Inter-universal%20Teichmuller%20Theory.pdf\">https://www.kurims.kyoto-u.ac.jp/~motizuki/Essential%20Logical%20Structure%20of%20Inter-universal%20Teichmuller%20Theory.pdf</a></p>",
        "id": 288984024,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657308926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/277198907\">said</a>:</p>\n<blockquote>\n<p>If I understand correctly <a href=\"https://www.mathunion.org/fileadmin/IMU/ICM2022/Program/Virtual_ICM_2022_Program_Schedule.pdf\">this</a>, Kevin's talk at the ICM will be at <time datetime=\"2022-07-09T07:00:00Z\">2022-07-09T09:00:00+02:00</time></p>\n</blockquote>\n<p>It seems this is happening in 10 minutes at <a href=\"https://www.youtube.com/watch?v=SEID4XYFN7o&amp;ab_channel=InternationalMathematicalUnion\">https://www.youtube.com/watch?v=SEID4XYFN7o&amp;ab_channel=InternationalMathematicalUnion</a>, but I've managed to get the time wrong twice already so who knows</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"SEID4XYFN7o\" href=\"https://www.youtube.com/watch?v=SEID4XYFN7o&amp;ab_channel=InternationalMathematicalUnion\"><img src=\"https://uploads.zulipusercontent.net/10065faa603c9fe4cb2fb509c6fdfe798ca887eb/68747470733a2f2f692e7974696d672e636f6d2f76692f53454944345859464e376f2f64656661756c742e6a7067\"></a></div>",
        "id": 289028142,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1657354022
    },
    {
        "content": "<p>Nice talk <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>!  (And just to be clear, since it confused me, but that YouTube link is also for the recorded video.  It did however take a few seconds to play on my phone.)</p>",
        "id": 289044852,
        "sender_full_name": "Jason Rute",
        "timestamp": 1657377313
    },
    {
        "content": "<p>Note: it starts at <a href=\"https://youtu.be/SEID4XYFN7o?t=240\">4:00</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"SEID4XYFN7o\" href=\"https://youtu.be/SEID4XYFN7o?t=240\"><img src=\"https://uploads.zulipusercontent.net/10065faa603c9fe4cb2fb509c6fdfe798ca887eb/68747470733a2f2f692e7974696d672e636f6d2f76692f53454944345859464e376f2f64656661756c742e6a7067\"></a></div>",
        "id": 289045078,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657377573
    },
    {
        "content": "<p><a href=\"https://www.reddit.com/r/math/comments/vuyr0e/the_rise_of_formalism_in_mathematics_kevin/\">A reddit thread</a> discussing Kevin's talk</p>",
        "id": 289099056,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1657454456
    },
    {
        "content": "<p>I didn't know about the system he shows, that allows to write latex and link it to lean code.</p>\n<p>Is there documentation for that?</p>",
        "id": 289109957,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1657467997
    },
    {
        "content": "<p><a href=\"https://github.com/PatrickMassot/leanblueprint\">https://github.com/PatrickMassot/leanblueprint</a></p>",
        "id": 289110793,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657469058
    },
    {
        "content": "<p>Section 1.12 of Mochizuki’s document is not enlightening reading, he does not appear to be up to speed with what proof verification is about.</p>",
        "id": 289144511,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1657516095
    },
    {
        "content": "<p>Looks like Kalai wrote a short post on <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s ICM talk: <a href=\"https://gilkalai.wordpress.com/2022/07/17/icm-2022-kevin-buzzard-the-rise-of-formalism-in-mathematics/\">https://gilkalai.wordpress.com/2022/07/17/icm-2022-kevin-buzzard-the-rise-of-formalism-in-mathematics/</a></p>",
        "id": 289892061,
        "sender_full_name": "Julian Berman",
        "timestamp": 1658074261
    },
    {
        "content": "<p>The cycle of formalisation. I formalise Kalai's results, Kevin mentions my work, Kalai posts about Kevin's talk.</p>",
        "id": 289900075,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658085838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> your combinatorics repo gets a namecheck!</p>",
        "id": 289904693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658092199
    },
    {
        "content": "<p>For those (like me) who couldn't go to ICERM but are still interested in seeing some of the lectures, they are now available on the ICERM workshop webpage:<br>\n<a href=\"https://icerm.brown.edu/topical_workshops/tw-22-lean/\">https://icerm.brown.edu/topical_workshops/tw-22-lean/</a></p>",
        "id": 290281076,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658343136
    },
    {
        "content": "<p>Does anyone have a recording of the panel on using Lean for teaching?</p>",
        "id": 290460847,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1658461096
    },
    {
        "content": "<p>ICERM policy prohibited it. They got speakers to sign release forms to post the talks, but the idea with a panel is that you should be able to have informal discussions with people in the audience without having to worry about being recorded.</p>",
        "id": 290511732,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1658499569
    },
    {
        "content": "<p>The list of accepted papers for CICM 2022 is now published at <a href=\"https://cicm-conference.org/2022/cicm.php?event=&amp;menu=accepted\">https://cicm-conference.org/2022/cicm.php?event=&amp;menu=accepted</a>. I count at least 3 Lean papers!</p>",
        "id": 292266059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659802569
    },
    {
        "content": "<p>Congratulations to <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> , <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> and <span class=\"user-mention\" data-user-id=\"460212\">@Sebastian Monnet</span> !</p>",
        "id": 292282069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659824342
    },
    {
        "content": "<p>Dunno if this was posted yet but there is a video about Lean on computer phile <a href=\"https://www.youtube.com/watch?v=prYaTrZUces\">https://www.youtube.com/watch?v=prYaTrZUces</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"prYaTrZUces\" href=\"https://www.youtube.com/watch?v=prYaTrZUces\"><img src=\"https://uploads.zulipusercontent.net/738a018d9a299f559adee3448c1bda82635738a7/68747470733a2f2f692e7974696d672e636f6d2f76692f7072596154725a556365732f64656661756c742e6a7067\"></a></div>",
        "id": 292632711,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660069470
    },
    {
        "content": "<p>I'm kind of surprised computerphile and/or numberphile didn't catch on to lean sooner!</p>",
        "id": 292634489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660070063
    },
    {
        "content": "<p>We need to get Kevin to do an interview with numberphile, I think it would go really well</p>",
        "id": 292637100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660071069
    },
    {
        "content": "<p>Unfortunately, it seems that Brady Haran still hasn't jointed our zulip (unlike the rest of the world)</p>",
        "id": 292638304,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660071499
    },
    {
        "content": "<p>Kevin told me he knows Matt Parker well</p>",
        "id": 292640046,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1660072112
    },
    {
        "content": "<p>first video: a formalised proof that the parker square was nearly there</p>",
        "id": 292640824,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660072427
    },
    {
        "content": "<p>Lean 4 mentioned as part of the stack of a trustless software marketplace: <a href=\"https://www.youtube.com/watch?v=aeRH8ajJmqs\">https://www.youtube.com/watch?v=aeRH8ajJmqs</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"aeRH8ajJmqs\" href=\"https://www.youtube.com/watch?v=aeRH8ajJmqs\"><img src=\"https://uploads.zulipusercontent.net/15b8da65158e52eb7ae558cafc820c538d43ba0d/68747470733a2f2f692e7974696d672e636f6d2f76692f6165524838616a4a6d71732f64656661756c742e6a7067\"></a></div><p>The explicit mention happens around 26:40</p>",
        "id": 295618261,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1661618448
    },
    {
        "content": "<p><a href=\"https://twitter.com/EgbertRijke/status/1564283092570873857\">A longer twitter thread</a> discussing <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s MSc thesis and how it deals with global choice. This is just one leaf of it, you'll have to navigate the messy twitter UI yourself ... <br>\n<a href=\"https://archive.ph/B3Anb\">Here's an archive link</a> for this branch of the discussion in particular for if you don't have a twitter account.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/EgbertRijke/status/1564283092570873857\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/1e908a1fcae3baa19a3a26c5d4866efe5948a638/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313233353930373234363832353039353136382f6d58355346427a725f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/andrejbauer\">@andrejbauer</a> <a href=\"https://twitter.com/jonmsterling\">@jonmsterling</a> <a href=\"https://twitter.com/EscardoMartin\">@EscardoMartin</a> <a href=\"https://twitter.com/yforster_cs\">@yforster_cs</a> <a href=\"https://twitter.com/XenaProject\">@XenaProject</a> But I'm afraid it is still not what makes Mario's interpretation work. Replacement is also compatible with univalence.</p><span>- Egbert Rijke (@EgbertRijke)</span></div></div>",
        "id": 296059360,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1661849248
    },
    {
        "content": "<p>latest in the thread:<br>\n<a href=\"https://twitter.com/EgbertRijke/status/1564362100566380559?s=20&amp;t=7Hzf2_CD1lnoO39YrtXjxg\">https://twitter.com/EgbertRijke/status/1564362100566380559?s=20&amp;t=7Hzf2_CD1lnoO39YrtXjxg</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/EgbertRijke/status/1564362100566380559?s=20&amp;t=7Hzf2_CD1lnoO39YrtXjxg\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/1e908a1fcae3baa19a3a26c5d4866efe5948a638/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313233353930373234363832353039353136382f6d58355346427a725f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/jonmsterling\">@jonmsterling</a> <a href=\"https://twitter.com/andrejbauer\">@andrejbauer</a> <a href=\"https://twitter.com/EscardoMartin\">@EscardoMartin</a> <a href=\"https://twitter.com/yforster_cs\">@yforster_cs</a> <a href=\"https://twitter.com/XenaProject\">@XenaProject</a> The more I think about it, the less I believe Mario really constructed a model of Lean in ZFC. Also in ZFC the AC only gives you mere existence of a choice function. The way AC is applied gives mere existence of a global choice function, but he pretends he got his hands on one.</p><span>- Egbert Rijke (@EgbertRijke)</span></div></div>",
        "id": 296063974,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661851136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> I'm happy to respond here, but I don't do twitter. But it seems like the main points are already on the table so I don't have much to add.</p>",
        "id": 296064509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661851394
    },
    {
        "content": "<p>Ok, now you just have to formalize your thesis. <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 296073262,
        "sender_full_name": "Jason Rute",
        "timestamp": 1661855034
    },
    {
        "content": "<p>If this is going to be a long discussion, maybe it could be its own thread.</p>",
        "id": 296074221,
        "sender_full_name": "Jason Rute",
        "timestamp": 1661855475
    },
    {
        "content": "<p>I have to admit I’m confused a bit by some of the points.  Is the main idea that Lean’s choice operator is what is called “global choice”, or  Hilbert’s epsilon operator?  And that this choice is stronger than what you get in ZFC?  The ZFC version is closer to AC used in HoTT?  Then realizing that AC and replacement are compatible with Univalence but global choice isn’t, this casts doubt on Mario’s argument in his thesis which seems to prove that one can get global choice in ZFC plus countably many large cardinals?  If this is the case, then Mario’s thesis only shows Lean is equiconsistent with ZFC plus large cardinals plus global choice? (I could be totally misunderstanding.)</p>",
        "id": 296076177,
        "sender_full_name": "Jason Rute",
        "timestamp": 1661856417
    },
    {
        "content": "<p>Hi! Sorry, I barely open zulip anymore these days.</p>\n<p>I can summarize the main points of the discussion here. In your thesis it is clear: You assume large enough cardinals to obtain universes <code>V_0,...,V_omega</code>, so that every type in the i-th universe is in <code>Vi</code>. By the axiom of choice, there exists a choice function that selects an element of every inhabited set in <code>V_ω</code>. Then I put my type-theory hat on again, to see if I could understand the argument from the type theoretic point of view. </p>\n<p>Since we're here on the Lean zulip, let's assume that every type is a set. The axiom of choice asserts that <code>(∀(x:X), ∥Y(x)∥) → ∥Π(x:X), Y(x)∥</code>for every type <code>X</code> and every family of types <code>Y</code> over <code>X</code>. Applying this to <code>V_ω</code> we get that <code>(Π (X:V_ω), ∥X∥ → ∥X∥) → ∥Π(X:V_ω), ∥X∥ → X∥</code>. This is also how you apply it in your thesis. The thing I thought was a problem was that you only seem to get ∥Π(X:V_ω), ∥X∥ → X∥, but to interpret Lean's global choice you want <code>Π(X:V_ω), ∥X∥ → X</code>. Then Andrej pointed out that actually you're not _constructing_ a model, but you're proving that a model exists. This cleared up the discussion to me, but do you also see it this way?</p>",
        "id": 296089327,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1661862095
    },
    {
        "content": "<p>In other parts of the discussion I was wondering what would be needed in type theory to get an implication <code>AC → Global-Choice</code>. </p>\n<p>Andrej was very confused about what I wanted and suggested erroneously that this is possible in CIC. It is not. The argument here is as follows: The axiom of choice is consistent with the univalence axiom, but the global choice principle is not consistent with the univalence axiom. This implies that if we could simply prove global choice from AC, then in combination with univalence we would be able to reach a contradiction. Furthermore, any axiom that is compatible with the univalence axiom also won't help you prove global choice from AC. This leads to the question, what extra assumptions do we need to make about type theory in order for your argument to go through in type theory. I still don't know the answer. The suggestions by Andrej in that thread were not helpful. </p>\n<p>So that is a summary of the other part of the discussion.</p>",
        "id": 296091561,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1661862880
    },
    {
        "content": "<p><a href=\"https://galois.com/blog/2020/11/introducing-the-building-better-systems-podcast/\">Building Better Systems</a> seems to have the highest number of Lean mentions in the podcast ecosystems.</p>",
        "id": 296116075,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661868321
    },
    {
        "content": "<p><a href=\"https://www.reddit.com/r/math/comments/xcbhdg/beyond_the_liquid_tensor_experiment_the/\">https://www.reddit.com/r/math/comments/xcbhdg/beyond_the_liquid_tensor_experiment_the/</a>: reddit discussion about Kevin's latest blogpost on LTE</p>",
        "id": 298428928,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663003950
    },
    {
        "content": "<blockquote>\n<p>I don’t see what’s so hard, just write <code>sorry</code>.</p>\n</blockquote>",
        "id": 298428979,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663003968
    },
    {
        "content": "<p>Also <a href=\"https://news.ycombinator.com/item?id=32808045\">https://news.ycombinator.com/item?id=32808045</a> (0 comments, so far)</p>",
        "id": 298430160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663004360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/298428979\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I don’t see what’s so hard, just write <code>sorry</code>.</p>\n</blockquote>\n</blockquote>\n<p>In fact, this is what we had for a long time <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 298430360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663004419
    },
    {
        "content": "<p>A new paper using Codex and Lean 4 meta-programming to auto-formalize to both Lean 3 and Lean 4.</p>\n<ul>\n<li><a href=\"https://openreview.net/forum?id=pKu077C57fH\">Towards a Mathematics Formalisation Assistant using Large Language Models</a></li>\n</ul>\n<p>Some more details are in <a class=\"stream-topic\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/More.20papers.20on.20autoformalization\">#Machine Learning for Theorem Proving &gt; More papers on autoformalization</a>.<br>\n(It's anonymous since it is under review, and ICLR papers are reviewed in public.)</p>",
        "id": 301531818,
        "sender_full_name": "Jason Rute",
        "timestamp": 1664485541
    },
    {
        "content": "<p>(To be clear, the paper isn’t mine.)</p>",
        "id": 301536860,
        "sender_full_name": "Jason Rute",
        "timestamp": 1664487689
    },
    {
        "content": "<p>For people in France, the current issue of the popular science magazine \"La Recherche\" has a paper on maths formalization: <a href=\"https://www.larecherche.fr/math%C3%A9matiques-informatique/pourquoi-raconter-des-maths-%C3%A0-un-ordinateur\">https://www.larecherche.fr/math%C3%A9matiques-informatique/pourquoi-raconter-des-maths-%C3%A0-un-ordinateur</a>. This is a fairly well-known magazine in France. The paper was written by me and a journalist (only my name appears in print because this is what they wanted).</p>",
        "id": 302535109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665000169
    },
    {
        "content": "<p>I should say that I didn't ask to write that paper, the magazine asked me to write it.</p>",
        "id": 302535274,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665000236
    },
    {
        "content": "<p>Unfortunately it is beyond a paywall...</p>",
        "id": 302536582,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1665000729
    },
    {
        "content": "<p>I know, I don't have access either (I was sent a paper copy). You'll need to buy it in your favorite magazine shop.</p>",
        "id": 302536756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665000818
    },
    {
        "content": "<p>Oh, sure I will. Thanks!</p>",
        "id": 302536995,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1665000903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220270\">James King</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/186633265\">said</a>:</p>\n<blockquote>\n<p>Presently wrapping up work on a JSON parsing library for Lean3 to serve as the intro for the next section to the guide. (I'm really humbled that people have actually read it...)</p>\n</blockquote>\n<p>Where can I find this? I want to read in JSON and parse it and I have no clue where to begin.</p>",
        "id": 304253207,
        "sender_full_name": "Arfur Schloppenhowler",
        "timestamp": 1665877084
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/json_serializable\">docs#json_serializable</a> for what mathlib has to offer in this regard</p>",
        "id": 304253525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665877451
    },
    {
        "content": "<p>For a couple of years now, I have been working with <a href=\"https://starkware.co/\">StarkWare</a>, using Lean to verify code for blockchain applications written in their programming language, <a href=\"https://www.cairo-lang.org/\">Cairo</a>. We have just made public a system that generates Hoare descriptions and verifies them down to the Cairo machine model. That model, in turn, is verified down to the algebraic certificates that are published on blockchain. We have also made public a verification of Cairo library code that validates secp signatures. </p>\n<p>We are in the process of writing a paper on these results, but in the meanwhile, the repository is available here:<br>\n<a href=\"https://github.com/starkware-libs/formal-proofs\">https://github.com/starkware-libs/formal-proofs</a><br>\nThe README file provides an overview.</p>",
        "id": 307745655,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1667486688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"375262\">Jörg Hanisch</span> <a href=\"#narrow/stream/113488-general/topic/math.20solved.3F/near/307794179\">said</a>:</p>\n<blockquote>\n<p>Is math solved?<br>\n<a href=\"https://ai.facebook.com/blog/ai-math-theorem-proving/?utm_source=twitter&amp;utm_medium=organic_social&amp;utm_campaign=blog\">Link to Meta AI</a><br>\n<span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n</blockquote>\n<p>A Meta paper with some more AI + 67% accuracy in miniF2F; I seem to remember having this plugin installed!</p>",
        "id": 307795039,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1667495196
    },
    {
        "content": "<p>The paper is from May it seems? Maybe there's some new stuff they'll show at NeurIPS</p>",
        "id": 307800083,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667496722
    },
    {
        "content": "<p>The deadline for NeurIPS was in May</p>",
        "id": 307800317,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1667496785
    },
    {
        "content": "<p>which explains the date of the paper. Of course that does not rule out the possibility that they could present new stuff, but my experience of that conference is that people rarely talk about newer things than what is in the paper.</p>",
        "id": 307800659,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1667496880
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/tuDNShR1vuk70L5gf0z2Rn89/image.png\">image.png</a> <br>\nIsn't this solution using <code>norm_num</code> basically brute forcing the check for 0-18?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tuDNShR1vuk70L5gf0z2Rn89/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/tuDNShR1vuk70L5gf0z2Rn89/image.png\"></a></div>",
        "id": 307803589,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667497750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/307800083\">said</a>:</p>\n<blockquote>\n<p>The paper is from May it seems? Maybe there's some new stuff they'll show at NeurIPS</p>\n</blockquote>\n<p>I mean the extension was fairly recent, I remember the API key being shared here within &lt;2 months</p>",
        "id": 307808935,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1667499336
    },
    {
        "content": "<p>Indeed, the method hasn't changed since the paper has been published. We got slightly better results but as <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> notes, our proofs are still very much \"search\" biased : brute-forcing discrete cases or stumbling into recurrences that work by applying induction multiple times.  Math is definitely far from solved :p </p>\n<p>Regarding the extension, Gabriel merged a PR yesterday that adds the API key / url as defaults for the vs-code plug-in (because searching in zulip wasn't ideal to find it and there is currently no alternative).</p>",
        "id": 307811456,
        "sender_full_name": "Timothee Lacroix",
        "timestamp": 1667500133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"359917\">@Timothee Lacroix</span>  I have seen the modification in the settings adding the API key&url; does this mean that when I know type <code>sugges</code>, my VSCode automatically tries to connect to the internet and to get suggestions from your method?</p>",
        "id": 308301953,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1667772051
    },
    {
        "content": "<p>There is a question mark in the top right of the info view that will give the AI suggestions when you click it.</p>",
        "id": 308306446,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667776352
    },
    {
        "content": "<p>Thanks, found it!</p>",
        "id": 308306528,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1667776442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> has marked this topic as resolved.</p>",
        "id": 308306554,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667776461
    },
    {
        "content": "<p>Hmm, I mistakenly marked this stream as \"resolved\", and cannot unresolve it. Can one of the maintainers? <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 308306794,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1667776737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> has marked this topic as unresolved.</p>",
        "id": 308306998,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667776982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/302535109\">said</a>:</p>\n<blockquote>\n<p>For people in France, the current issue of the popular science magazine \"La Recherche\" has a paper on maths formalization: <a href=\"https://www.larecherche.fr/math%C3%A9matiques-informatique/pourquoi-raconter-des-maths-%C3%A0-un-ordinateur\">https://www.larecherche.fr/math%C3%A9matiques-informatique/pourquoi-raconter-des-maths-%C3%A0-un-ordinateur</a>. This is a fairly well-known magazine in France. The paper was written by me and a journalist (only my name appears in print because this is what they wanted).</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/302536582\">said</a>:</p>\n<blockquote>\n<p>Unfortunately it is beyond a paywall...</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/302536756\">said</a>:</p>\n<blockquote>\n<p>I know, I don't have access either (I was sent a paper copy). You'll need to buy it in your favorite magazine shop.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/302536995\">said</a>:</p>\n<blockquote>\n<p>Oh, sure I will. Thanks!</p>\n</blockquote>\n<p>Please don't buy it! I have obtained a pirated PDF copy of the paper. If anyone wants to read it, I'm happy to share for free. (Can't do it in a public stream though).</p>",
        "id": 312756759,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1669689086
    },
    {
        "content": "<p>Reddit r/Haskell post <a href=\"https://www.reddit.com/r/haskell/comments/z55hha/review_of_lean_4/\">Review of Lean 4</a></p>",
        "id": 313426888,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669956893
    },
    {
        "content": "<p>Aesop: White-Box Best-First Proof Search for Lean by <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> and <span class=\"user-mention\" data-user-id=\"457079\">@Asta Halkjær From</span> is a Distinguished Paper at CPP 2023! <a href=\"https://popl23.sigplan.org/details/CPP-2023-papers/5/Aesop-White-Box-Best-First-Proof-Search-for-Lean\">https://popl23.sigplan.org/details/CPP-2023-papers/5/Aesop-White-Box-Best-First-Proof-Search-for-Lean</a> <a href=\"https://people.compute.dtu.dk/ahfrom/aesop-camera-ready.pdf\">https://people.compute.dtu.dk/ahfrom/aesop-camera-ready.pdf</a></p>",
        "id": 315472119,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670882719
    },
    {
        "content": "<p><a href=\"https://busy-beavers.tigyog.app/proofs-about-programs\">https://busy-beavers.tigyog.app/proofs-about-programs</a><br>\nHN discussion: <a href=\"https://news.ycombinator.com/item?id=33986230\">https://news.ycombinator.com/item?id=33986230</a></p>",
        "id": 316263709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671196645
    },
    {
        "content": "<p>It's a bit of a reverse Lean in the wild, because it's not in the wild and you have to know that it's Lean, but this year's Zulip in review came this morning with <a href=\"/user_uploads/3121/pBdBOqnXUlyxSCQ-46YJ2GFZ/image.png\">a conspicuous fourth top emoji</a>.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pBdBOqnXUlyxSCQ-46YJ2GFZ/image.png\" title=\"a conspicuous fourth top emoji\"><img src=\"/user_uploads/3121/pBdBOqnXUlyxSCQ-46YJ2GFZ/image.png\"></a></div>",
        "id": 320722781,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673449104
    },
    {
        "content": "<p>isn't that emoji popular here <em>because</em> Zulip suggested it as a default?</p>",
        "id": 320723090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673449189
    },
    {
        "content": "<p>I have no idea! I thought we came up with it.</p>",
        "id": 320723307,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673449231
    },
    {
        "content": "<p>I can confirm it's a default emoji on all zulip instances I'm on</p>",
        "id": 320724013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673449399
    },
    {
        "content": "<p>I think the list of default emojis is hard-coded</p>",
        "id": 320724269,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673449454
    },
    {
        "content": "<p>I can't search by reactions, but I can confirm it seems to have been a vicious cycle where the emoji was used because it was suggested, and it is still suggested because it gets used: <a href=\"#narrow/stream/113488-general/topic/octopus.20emoji\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/octopus.20emoji</a></p>",
        "id": 320725028,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673449656
    },
    {
        "content": "<p><a href=\"https://www.twitter.com/recursecenter/status/1588260698978557952\">https://www.twitter.com/recursecenter/status/1588260698978557952</a> might be the origin. They started using Zulip ten years ago back when it was in private beta, so it's plausible that the Zulip developers added the octopus as a default emoji inspired by them. The actual visual effect probably depends on the user's emoji theme.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://www.twitter.com/recursecenter/status/1588260698978557952\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/0b78ac3027dc98f2e947a1fd8a4c1e09f10192fe/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3938343136363632313332383631373437322f356d4a775f4a59765f6e6f726d616c2e6a7067\"></a><p>What’s up with the octopus emojis at RC? \n\nThe exact history is hard to pin down! TL;DR: during the early days of Zulip, we noticed that if you put an emoji on one line and the octopus emoji on the next line, it looked like the octopus was holding it up in celebration, like this: <a href=\"https://t.co/wTRwObg5Fz\">https://twitter.com/recursecenter/status/1588260698978557952/photo/1</a></p><span>- Recurse Center (@recursecenter)</span><div class=\"twitter-image\"><a href=\"https://t.co/wTRwObg5Fz\"><img src=\"https://uploads.zulipusercontent.net/12e22cc3de9c017251b4cc399037c9b6c68135aa/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f46677169723630586f4138576946622e6a70673a7468756d62\"></a></div></div></div>",
        "id": 320725319,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1673449736
    },
    {
        "content": "<p><img alt=\":lean:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/17579.png\" title=\"lean\"><br>\n<span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 320726175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673449939
    },
    {
        "content": "<p>Lean is currently number 26 on hacker news. Can it get to 1? Here are the comments: <a href=\"https://news.ycombinator.com/item?id=34456573\">https://news.ycombinator.com/item?id=34456573</a></p>",
        "id": 322657301,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674271654
    },
    {
        "content": "<p>The return of deadbeef57 <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 322684273,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674290866
    }
]