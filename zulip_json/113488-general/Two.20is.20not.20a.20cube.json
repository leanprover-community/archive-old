[
    {
        "content": "<p>Is there any easier way to prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">two_not_cube</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">r</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">k</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span><span class=\"n\">norm_num</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span><span class=\"n\">norm_num</span><span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ne_of_gt</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"o\">(</span><span class=\"n\">nat.le_add_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212963825,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1602419588
    },
    {
        "content": "<p>For me the lemma in the library should be that if f from nat to some ordered thing is monotone, and if f(n) &lt;t&lt;f(n+1) then t is not in the range of f</p>",
        "id": 212965281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602422276
    },
    {
        "content": "<p>i.e. the philosophy is \"generalize\"</p>",
        "id": 212965334,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602422388
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_cube</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">r</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"n\">h</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"n\">h</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_not_cube</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"n\">not_cube</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 212965336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602422399
    },
    {
        "content": "<p>There's no pow_n_mono?</p>",
        "id": 212965384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602422440
    },
    {
        "content": "<p><code>nat.pow</code> is oldschool</p>",
        "id": 212965386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602422457
    },
    {
        "content": "<p>Lol</p>",
        "id": 212965389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602422467
    },
    {
        "content": "<p>But it's pretty direct from <code>nat.pow_le_pow_of_le_left</code></p>",
        "id": 212965391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602422481
    },
    {
        "content": "<p>We should also have a tactic \"descends to <code>zmod n</code> and <code>norm_num</code> working in <code>zmod n</code>.</p>",
        "id": 212965503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602422669
    },
    {
        "content": "<p>what's the <code>n</code> that works for this case?</p>",
        "id": 212965515,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602422714
    },
    {
        "content": "<p>Then the proof would be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">go_mod</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">r</span> <span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212965517,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602422727
    },
    {
        "content": "<p>I guess 7</p>",
        "id": 212965518,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602422728
    },
    {
        "content": "<p>oh right, 4 also works</p>",
        "id": 212965521,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602422736
    },
    {
        "content": "<p>probably <code>go_mod</code> should also take <code>r</code> as an argument.</p>",
        "id": 212965567,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602422805
    },
    {
        "content": "<p>Or else ask to <code>revert r</code> first.</p>",
        "id": 212965571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602422823
    },
    {
        "content": "<p>(modified from Mario's code)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_not_cube</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">r</span> <span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">pow_lt_pow_of_lt_left</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212965625,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602422909
    },
    {
        "content": "<p>(Patrick's suggestion)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_not_cube</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.cast_pow</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- why didn't norm_cast do this?</span>\n  <span class=\"n\">generalize_hyp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r4</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">r4</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212965745,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602423153
    },
    {
        "content": "<p>is <code>go_mod</code> a tactic?</p>",
        "id": 212965752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602423185
    },
    {
        "content": "<p>it's a tactic Patrick's proposed just now</p>",
        "id": 212965759,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602423197
    },
    {
        "content": "<p>Mario, you get to choose the name if you write that tactic.</p>",
        "id": 212965763,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602423212
    },
    {
        "content": "<p>I have no objections to the name (well..) but I was just double checking that it hadn't been added when I wasn't looking</p>",
        "id": 212965829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602423362
    },
    {
        "content": "<p>I used \"go\" because \"descend\" or \"lift\" are so controversial here.</p>",
        "id": 212965871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602423412
    },
    {
        "content": "<p>But it should obviously be \"descend\".</p>",
        "id": 212965882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602423434
    },
    {
        "content": "<p><code>zmod_bash</code>?</p>",
        "id": 212965887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602423454
    },
    {
        "content": "<p>That would be the combination of <code>go_mod</code> and <code>fin_cases</code></p>",
        "id": 212965892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602423478
    },
    {
        "content": "<p>p works iff it's 1 mod 3 and not of the form x^2+27y^2 -- a passing number theorist.</p>",
        "id": 212967925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602427319
    },
    {
        "content": "<p>I was really hoping this was a question over <code>ℚ</code> rather than <code>ℕ</code> so that I could suggest <a href=\"https://mathoverflow.net/a/42519/6801\">this approach</a>.</p>",
        "id": 212970394,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1602431639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s <code>not_cube</code> can be easily proven with <code>ne_of_monotone_of_lt_of_lt</code> after <a href=\"https://github.com/leanprover-community/mathlib/issues/4482\">#4482</a> is merged.</p>",
        "id": 212987344,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602460271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/113488-general/topic/Two.20is.20not.20a.20cube/near/212970394\">said</a>:</p>\n<blockquote>\n<p>I was really hoping this was a question over <code>ℚ</code> rather than <code>ℕ</code> so that I could suggest <a href=\"https://mathoverflow.net/a/42519/6801\">this approach</a>.</p>\n</blockquote>\n<p><code>r ^ 3 = 1 ^ 3 + 1 ^ 3</code> has no solutions by FLT, so the same proof appoach still works :)</p>",
        "id": 212987395,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602460385
    },
    {
        "content": "<p>Wiles' proof only works for p&gt;=5 because the Frey curve can have torsion when p=3, so really you're relying on something much older (Euler I guess)</p>",
        "id": 213001311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602483514
    },
    {
        "content": "<p>Not finding a way to do Euler without this fact, though</p>",
        "id": 213007861,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1602489551
    },
    {
        "content": "<p>And thanks for the suggestions, everyone!</p>",
        "id": 213007880,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1602489563
    }
]