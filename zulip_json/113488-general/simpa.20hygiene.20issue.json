[
    {
        "content": "<p><code>simpa</code> substitutes in <code>this</code> over existing <code>this</code>. Expected?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.cycles</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span> <span class=\"n\">equiv</span> <span class=\"n\">equiv.perm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.form_perm</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">list.zip_with</span> <span class=\"n\">equiv.swap</span> <span class=\"n\">l</span> <span class=\"n\">l.tail</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">erase_dup.form_perm.is_cycle</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">nodup</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">erase_dup_eq_self.mpr</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">form_perm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">is_cycle.swap</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- what is the hyp used for ^^? it is the is_cycle.swap h, not what we want</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232863790,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617342889
    },
    {
        "content": "<p>Of course, I can prove it using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">erase_dup_eq_self</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">form_perm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">is_cycle.swap</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>but just wanted to flag</p>",
        "id": 232863883,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617342984
    }
]