[
    {
        "content": "<p>Given a structure</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>we have the eta law for <code>S</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">eta</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">...⟩</span>\n</code></pre></div>\n\n\n<p>Does Lean already provide this anywhere (generically, for any structure)?</p>",
        "id": 199173302,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590767538
    },
    {
        "content": "<p>I doubt it, because for structures like the complex numbers it is proved explicitly very early on</p>",
        "id": 199184411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590772765
    },
    {
        "content": "<p>It shouldn't be too hard to automate. Already, we have <code>ext</code> laws for structures and <code>simps</code> laws as well. You can prove an <code>eta</code> rule by <code>cases s</code> and then you apply the automatically generated <code>ext</code> rule</p>",
        "id": 199191004,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1590775814
    },
    {
        "content": "<p>If you use <code>cases s</code> then it will already be true by <code>rfl</code>.</p>",
        "id": 199193008,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590776788
    },
    {
        "content": "<p>Do we really have a way to autogenerate <code>ext</code> lemmas? I missed that!</p>",
        "id": 199193035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590776803
    },
    {
        "content": "<p>Yes, it's the same attribute. You tag your structure with <code>ext</code> and you get two <code>ext</code> lemmas: one implication and one logical equivalence</p>",
        "id": 199193677,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1590777131
    },
    {
        "content": "<p>(I had to look up the doc string to make sure I didn't imagine that the change happened)</p>",
        "id": 199193742,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1590777165
    },
    {
        "content": "<p>(and <code>git blame</code> tells me that I was the one to implement it. I keep forgetting :P)</p>",
        "id": 199193859,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1590777231
    },
    {
        "content": "<p>I wonder if the <code>@[ext]</code> annotation should just at the <code>eta</code> lemma while it's at it.</p>",
        "id": 199235542,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590809018
    },
    {
        "content": "<p>That would be a good idea. Would could also make the <code>structure</code> and <code>inductive</code> keywords extendible so that we can specify parts of the inductive compiler. This way, every <code>structure</code> would get <code>ext</code> and <code>eta</code> lemmas without us having to annotate them.</p>",
        "id": 199235687,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1590809191
    }
]