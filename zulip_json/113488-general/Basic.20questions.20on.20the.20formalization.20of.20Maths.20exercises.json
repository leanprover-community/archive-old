[
    {
        "content": "<p>I'm trying to formalize all the AMC 12A 2021 problems and while I decided to skip entirely geometry problems (though <a href=\"https://artofproblemsolving.com/wiki/index.php/2021_AMC_12A_Problems/Problem_11\">this one</a> may be doable I think?), there are two problems on which I'm struggling that may still be formalized but I probably lack the knowledge.</p>\n<ul>\n<li>The first one is <a href=\"https://artofproblemsolving.com/wiki/index.php/2021_AMC_12A_Problems/Problem_5\">problem 5</a>, where we need to formalize a repetitive infinite decimal expansion of the form <code>1.ababababa...</code>. Any tool available to do so?</li>\n<li>The second one is <a href=\"https://artofproblemsolving.com/wiki/index.php/2021_AMC_12A_Problems/Problem_15\">problem 15</a> which is a combinatorics problem and I'm not sure what's the current state of affair in mathlib wrt to these statements?</li>\n</ul>\n<p>Thank you very much for your help as always!</p>",
        "id": 252759837,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631267444
    },
    {
        "content": "<p>We have convergent infinite sums e.g. (I'm over-importing here)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">66</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">66</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))))</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"c1\">-- or whatever</span>\n<span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(and presumably <code>normed_ring.tsum_geometric_of_norm_lt_1</code> will help to solve it)</p>",
        "id": 252760644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631267782
    },
    {
        "content": "<p>Problem 15 is definitely doable, but I fear it may be a bit of a pain.<br>\nFor solution 1, you'll need to be close to a finset virtuose, but the proof will be okay.<br>\nFor solution 2, we have Vandermonde's identity (thanks Johan!) but no relation between the terms and a size condition.<br>\nFor solution 3, I know <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> proved stuff using generating functions (the partition theorem, for anyone interested) but he never had to evaluate anything. Might be tricky but I don't know.<br>\nFor solution 4, yeah, that works. Not very fun though.</p>",
        "id": 252760936,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631267924
    },
    {
        "content": "<p>How would you state it Yael?</p>",
        "id": 252760968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631267945
    },
    {
        "content": "<p><del>Presumably the multiple of 4 condition is some Covid restriction?</del> (I guess it could be something to do with arranging the singers on the stage...)</p>",
        "id": 252761054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631268001
    },
    {
        "content": "<p>I guess you can look at <code>(T : finset (fin 6))</code> and <code>(B : finset (fin 8))</code></p>",
        "id": 252761401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631268146
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">{</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"n\">t.card</span> <span class=\"bp\">≡</span> <span class=\"n\">b.card</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">∧</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">t.card</span> <span class=\"bp\">+</span> <span class=\"n\">b.card</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">4095</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 252761550,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631268177
    },
    {
        "content": "<p>Eheh, that was my idea too.</p>",
        "id": 252761587,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631268189
    },
    {
        "content": "<p>Spoiler alert!</p>",
        "id": 252761674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631268234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Basic.20questions.20on.20the.20formalization.20of.20Maths.20exercises/near/252760644\">said</a>:</p>\n<blockquote>\n<p>We have convergent infinite sums e.g. (I'm over-importing here)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">66</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">66</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))))</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"c1\">-- or whatever</span>\n<span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(and presumably <code>normed_ring.tsum_geometric_of_norm_lt_1</code> will help to solve it)</p>\n</blockquote>\n<p>Thanks! Out of curiosity, If I read correctly the definition docstring, it's a sum without the finset restriction st if the sum converges it's the sum itself or the empty set otherwise. How does that translate when you compose it with + ? Does it collapses to 0 if not defined (Not really important here though as we'll know it converges).</p>",
        "id": 252761774,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631268268
    },
    {
        "content": "<p>Yes, I think all infinite sums are defined to be 0 if they don't converge in actual-math. It's called <code>tsum</code> in mathlib.</p>",
        "id": 252761904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631268323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Basic.20questions.20on.20the.20formalization.20of.20Maths.20exercises/near/252761550\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">{</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">t.card</span> <span class=\"bp\">≡</span> <span class=\"n\">b.card</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">∧</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">t.card</span> <span class=\"bp\">+</span> <span class=\"n\">b.card</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">4095</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ouah! I will need to ponder more on that, but this is incredibly useful!! Thanks!</p>",
        "id": 252762059,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631268395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Basic.20questions.20on.20the.20formalization.20of.20Maths.20exercises/near/252761550\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">{</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">t.card</span> <span class=\"bp\">≡</span> <span class=\"n\">b.card</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">∧</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">t.card</span> <span class=\"bp\">+</span> <span class=\"n\">b.card</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">4095</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That's a syntax error</p>",
        "id": 252762167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631268459
    },
    {
        "content": "<p>Fixed already ;)</p>",
        "id": 252762189,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631268471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Basic.20questions.20on.20the.20formalization.20of.20Maths.20exercises/near/252761550\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">{</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"n\">t.card</span> <span class=\"bp\">≡</span> <span class=\"n\">b.card</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">∧</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">t.card</span> <span class=\"bp\">+</span> <span class=\"n\">b.card</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">4095</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That's also a syntax error</p>",
        "id": 252762359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631268566
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">8</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≡</span> <span class=\"n\">p.2.card</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">∧</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p.1.card</span> <span class=\"bp\">+</span> <span class=\"n\">p.2.card</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">4095</span> <span class=\"o\">:=</span>\n<span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 252762368,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631268574
    },
    {
        "content": "<p><code>elaboration: tactic execution took 40.8s</code></p>",
        "id": 252762381,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1631268588
    },
    {
        "content": "<p>No waaay, does that work?</p>",
        "id": 252762387,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631268593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>, <code>fintype.card (finset (fin 6) × finset (fin 8))</code> is only <code>16384</code></p>",
        "id": 252762492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631268643
    },
    {
        "content": "<p>Fantastic!</p>",
        "id": 252762502,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631268648
    },
    {
        "content": "<p>That's well within the range of an exhaustive search</p>",
        "id": 252762506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631268652
    },
    {
        "content": "<p>To be fair, at the last olympic maths test we ran, some students tried 1000 cases one by one. 16k is much farther.</p>",
        "id": 252762568,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631268706
    },
    {
        "content": "<p>Possibly slightly more readable as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">//</span>\n                <span class=\"n\">x.1.card</span> <span class=\"bp\">≡</span> <span class=\"n\">x.2.card</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">∧</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x.1.card</span> <span class=\"bp\">+</span> <span class=\"n\">x.2.card</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">4095</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 252762684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631268769
    },
    {
        "content": "<p>Argh, I just updated my message to exactly this</p>",
        "id": 252762710,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631268783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Basic.20questions.20on.20the.20formalization.20of.20Maths.20exercises/near/252762506\">said</a>:</p>\n<blockquote>\n<p>That's well within the range of an exhaustive search</p>\n</blockquote>\n<p>You say that, but I've seen Lean 3 fail to count to 10 before when it's also assembling proofs etc.</p>",
        "id": 252763884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631269369
    },
    {
        "content": "<p>yeah, iirc dec_trival can barely handle the birthday problem</p>",
        "id": 252764475,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631269649
    },
    {
        "content": "<p>For <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mn>14</mn><mn>0</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mn>14</mn><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mn>14</mn><mn>4</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mn>14</mn><mn>6</mn></mfrac><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\binom{14}{0}+\\binom{14}{2}+\\binom{14}{4}+\\binom{14}{6}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.245118em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951079999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">14</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.245118em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951079999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">14</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.245118em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951079999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">14</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.245118em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951079999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">6</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">14</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span> the model answers seem to involve bashing it out, but using the Pascal's triangle identity you can rewrite as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mn>13</mn><mn>0</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mn>13</mn><mn>1</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mn>13</mn><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mo>⋯</mo><mo>+</mo><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mn>13</mn><mn>6</mn></mfrac><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\binom{13}{0}+\\binom{13}{1}+\\binom{13}{2}+\\cdots+\\binom{13}{6}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.245118em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951079999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">13</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.245118em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951079999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">13</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.245118em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951079999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">13</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.245118em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951079999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">6</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">13</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span> which is half of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mn>13</mn></msubsup><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mn>13</mn><mi>i</mi></mfrac><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=0}^{13}\\binom{13}{i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.304018em;vertical-align:-0.35001em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.954008em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">13</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951079999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">13</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span> so is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>12</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{12}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">12</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 252764756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631269805
    },
    {
        "content": "<p>So there could be some extension of this question where the numbers are much bigger then the generating function proof takes over.</p>",
        "id": 252764914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631269917
    },
    {
        "content": "<p>Now working on <a href=\"https://artofproblemsolving.com/wiki/index.php/2021_AMC_12A_Problems/Problem_16\">problem 16</a> which defines a list of numbers and asks for its median.</p>\n<p>I was able to define this as a finset, but now am stuck to define the median? Maybe should I define this as a list and ask for the value of the element in the middle?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">amc12a_2021_p16</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">finset.image</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">=</span> <span class=\"n\">finset.bUnion</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"mi\">200</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252769431,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631272322
    },
    {
        "content": "<p>uh, from reading more, finsets are sets in the sense that they don't have repeats, so that probably does not work</p>",
        "id": 252774224,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631274941
    },
    {
        "content": "<p>You can use <code>multiset</code> instead, but yeah lists are a good idea too.</p>",
        "id": 252774328,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631274995
    },
    {
        "content": "<p>Also, you can get rid of <code>s</code> like that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">amc12a_2021_p16</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">k</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"mi\">200</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bUnion</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">la</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252774461,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631275071
    },
    {
        "content": "<p>Sorry, me again <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> <br>\nLast question for the day! I can't seem to make this one work but I feel it's probably quite silly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">amc12a_2021_p20</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">p.2</span> <span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"n\">a.1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.2</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">21</span> <span class=\"bp\">∧</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"n\">a.1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">-</span><span class=\"n\">a.2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">20</span> <span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">S.to_finset.sum</span> <span class=\"bp\">=</span> <span class=\"mi\">40</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is refused by Lean with an error I have a hard time understanding. Also, Ideally I'd love to define (0, d) as a point and use a norm notation insted of <code>real.sqrt(...)</code> ?</p>\n<p>This is the <a href=\"https://artofproblemsolving.com/wiki/index.php/2021_AMC_12A_Problems/Problem_20\">informal statement</a>.</p>",
        "id": 252784085,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631279472
    },
    {
        "content": "<p>If I were you I'd replace P and S with standalone definitions, rather than take them as hypotheses</p>",
        "id": 252785471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631280086
    },
    {
        "content": "<p><code>sum</code> needs a function</p>",
        "id": 252785945,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631280270
    },
    {
        "content": "<p>I think you mean <code>S.to_finset.sum id</code></p>",
        "id": 252785963,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631280278
    },
    {
        "content": "<p><code>open_locale big_operators</code> will give you nicer notation :)</p>",
        "id": 252786024,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631280303
    },
    {
        "content": "<p>also, why do separate <code>S : set ℝ</code> and then a <code>fintype</code> on <code>S</code> instead of just <code>S : finset ℝ</code>?</p>",
        "id": 252786273,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631280398
    },
    {
        "content": "<p>Join the finsect!</p>",
        "id": 252786436,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631280461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Basic.20questions.20on.20the.20formalization.20of.20Maths.20exercises/near/252786024\">said</a>:</p>\n<blockquote>\n<p><code>open_locale big_operators</code> will give you nicer notation :)</p>\n</blockquote>\n<p>What do you have in mind ?</p>",
        "id": 252787864,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631281040
    },
    {
        "content": "<p>Have a look for yourself! <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/big_operators/basic.html\">https://leanprover-community.github.io/mathlib_docs/algebra/big_operators/basic.html</a></p>",
        "id": 252787944,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631281070
    },
    {
        "content": "<p><code>∑ x in S.to_finset, x</code></p>",
        "id": 252787997,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631281083
    },
    {
        "content": "<p>And, once it will be a finset, <code>∑ x in S, x</code></p>",
        "id": 252788052,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631281104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Basic.20questions.20on.20the.20formalization.20of.20Maths.20exercises/near/252785471\">said</a>:</p>\n<blockquote>\n<p>If I were you I'd replace P and S with standalone definitions, rather than take them as hypotheses</p>\n</blockquote>\n<p>We've tried to keep statements self-contained so far but agreed it would be clearer.</p>",
        "id": 252788058,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631281104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Basic.20questions.20on.20the.20formalization.20of.20Maths.20exercises/near/252787997\">said</a>:</p>\n<blockquote>\n<p><code>∑ x in S.to_finset, x</code></p>\n</blockquote>\n<p>Ah makes sense <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 252788106,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631281125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Basic.20questions.20on.20the.20formalization.20of.20Maths.20exercises/near/252786273\">said</a>:</p>\n<blockquote>\n<p>also, why do separate <code>S : set ℝ</code> and then a <code>fintype</code> on <code>S</code> instead of just <code>S : finset ℝ</code>?</p>\n</blockquote>\n<p>Hmmm I just tried that but the definition of S gets refused, (with or without the to_finset):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">amc12a_2021_p20</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">p.2</span> <span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"n\">a.1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.2</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">21</span> <span class=\"bp\">∧</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"n\">a.1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">-</span><span class=\"n\">a.2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">20</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">40</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252788672,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631281371
    },
    {
        "content": "<p>Here's how I might state it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.finprod</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">amc12a_2021_p20</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">p.2</span><span class=\"o\">},</span>\n      <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span>\n        <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"n\">a.1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.2</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">21</span> <span class=\"bp\">∧</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"n\">a.1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">-</span><span class=\"n\">a.2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">20</span> <span class=\"o\">}</span>\n      <span class=\"k\">in</span>\n  <span class=\"bp\">∑ᶠ</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">40</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252788743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631281405
    },
    {
        "content": "<p>That set notation only works on sets. You'd have to use finset.filter instead.</p>",
        "id": 252788766,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631281418
    },
    {
        "content": "<p>How would it figure out that <code>{ d : ℝ | ∃ a : (ℝ × ℝ), a ∈ P d → real.sqrt(a.1^2 + a.2^2) = 21 ∧ real.sqrt(a.1^2 + (d-a.2)^2) = 20 }</code> is finite?</p>",
        "id": 252788779,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631281426
    },
    {
        "content": "<p>You can't use filter because there's nothing finite to filter</p>",
        "id": 252788801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631281439
    },
    {
        "content": "<p>If you really want to use norm, then there is L2 space over the reals.</p>",
        "id": 252789031,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631281541
    },
    {
        "content": "<p>What's that space called (in mathlib identifiers)?</p>",
        "id": 252789282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631281652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Basic.20questions.20on.20the.20formalization.20of.20Maths.20exercises/near/252788743\">said</a>:</p>\n<blockquote>\n<p>Here's how I might state it:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.finprod</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">amc12a_2021_p20</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">p.2</span><span class=\"o\">},</span>\n      <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span>\n        <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"n\">a.1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a.2</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">21</span> <span class=\"bp\">∧</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"n\">a.1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">-</span><span class=\"n\">a.2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">20</span> <span class=\"o\">}</span>\n      <span class=\"k\">in</span>\n  <span class=\"bp\">∑ᶠ</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">40</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Very nice</p>",
        "id": 252789310,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631281671
    },
    {
        "content": "<p>That still doesn't resemble the statement very well IMO</p>",
        "id": 252789575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631281801
    },
    {
        "content": "<p>You can also ad hoc give the two values, and have the statement be \"This condition implies it's one of them\" and \"The sum of the two is 40/3\"</p>",
        "id": 252789753,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631281880
    },
    {
        "content": "<p>That's the problem with those statements. They ask you to calculate stuff, but the exercise isn't about calculating stuff.</p>",
        "id": 252789810,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631281907
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space\">docs#euclidean_space</a> is the L2 space</p>",
        "id": 252789829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631281919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Basic.20questions.20on.20the.20formalization.20of.20Maths.20exercises/near/252789575\">said</a>:</p>\n<blockquote>\n<p>That still doesn't resemble the statement very well IMO</p>\n</blockquote>\n<p>Welll agreed it's not perfect, but it's a good start! :)</p>",
        "id": 252789988,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631281981
    },
    {
        "content": "<p>I think it's fair to formalise the mathy part of the exercises and leave the calculatory part (here, adding two numbers <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span>) behind.</p>",
        "id": 252790079,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631282018
    },
    {
        "content": "<p>Note that the original statement doesn't compile in my head either: \"What is the sum of this potentially infinite number of solutions?\"</p>",
        "id": 252790236,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631282064
    },
    {
        "content": "<p>I guess it's a hint to restate as a quadratic equation and use Vieta's formula</p>",
        "id": 252790364,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631282114
    },
    {
        "content": "<p>Of course. That's why you should allow yourself some freedom in formalising.</p>",
        "id": 252790477,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631282155
    },
    {
        "content": "<p>Is the question even well posed? Presumably it's asking for the sum of all unique lengths F V, but I could also sum the lengths over all possible F and V (which would be infinite due to translation / rotation)</p>",
        "id": 252790943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631282322
    },
    {
        "content": "<p>This to me looks like the most faithful version of the statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">parabola</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">amc12a_2021_p20</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑ᶠ</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"n\">A</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"mi\">20</span> <span class=\"bp\">∧</span> <span class=\"n\">dist</span> <span class=\"n\">A</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"mi\">21</span> <span class=\"bp\">∧</span> <span class=\"n\">dist</span> <span class=\"n\">F</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n    <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">40</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252791365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631282452
    },
    {
        "content": "<p>Obvously it's much harder to prove because it's hasn't performed any of the steps like \"well obviously we can put <code>V</code> at the origin and <code>F</code> on the positive y axis\"</p>",
        "id": 252791650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631282556
    },
    {
        "content": "<p>Indeed, though your statement is ambiguous as it relies on the \"informal\" knowledge of what a parabola is and cannot be automatically checked without a human checking that the definition for <code>parabola</code> matches an actual parabola?</p>",
        "id": 252793767,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631283385
    },
    {
        "content": "<p>It stops being ambiguous once you fill out the sorry, doesn't it?</p>",
        "id": 252797980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631285184
    },
    {
        "content": "<p>Did you check the definition of <code>ℝ</code> matches the actual reals, or were you happy to trust mathlib ;)</p>",
        "id": 252798124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631285241
    },
    {
        "content": "<p>oh! you meant filling the parabola definition first and then providing the theorem as goal <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 252820523,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1631294592
    }
]