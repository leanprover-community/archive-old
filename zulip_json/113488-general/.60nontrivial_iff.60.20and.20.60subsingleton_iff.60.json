[
    {
        "content": "<p>We have a bunch of useful lemmas called <code>nontrivial_iff</code> and <code>subsingleton_iff</code> that look to me like they should be reversed and tagged with <code>simp</code> . For example, consider <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.nontrivial_iff\">docs#submodule.nontrivial_iff</a> which currently reads:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nontrivial_iff</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">M</span> <span class=\"bp\">↔</span> <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I contend this would be better as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nontrivial_iff</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">nontrivial</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Similar remarks apply to:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.nontrivial_iff\">docs#subgroup.nontrivial_iff</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_subgroup.nontrivial_iff\">docs#add_subgroup.nontrivial_iff</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.nontrivial_iff\">docs#submonoid.nontrivial_iff</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.nontrivial_iff\">docs#submodule.nontrivial_iff</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_submodule.nontrivial_iff\">docs#lie_submodule.nontrivial_iff</a></li>\n</ul>\n<p>and also corresponding <code>subsingleton_iff</code> lemmas.</p>",
        "id": 249588479,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629120674
    },
    {
        "content": "<p>Is there a reason to prefer these as they stand, or should I make the change?</p>",
        "id": 249588504,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629120693
    },
    {
        "content": "<p>didn't we run into performance issues with nontrivial/subsingleton and simp?</p>",
        "id": 249589616,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629121213
    },
    {
        "content": "<p>We did. Good point. Unfortunately I did not follow the details so I can't tell if that is relevant here.</p>\n<p>I do know we should not (for now) create subsingleton typeclass instances <a href=\"https://github.com/leanprover-community/mathlib/issues/6025\">https://github.com/leanprover-community/mathlib/issues/6025</a></p>",
        "id": 249590407,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629121617
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 249590725,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629121778
    },
    {
        "content": "<p>I think the issue was only in adding new instances</p>",
        "id": 249591141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629121962
    },
    {
        "content": "<p>In what situation have you found yourself actually needing those lemmas though <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>? Typeclass search ought to be solving your problems for you</p>",
        "id": 249591220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629122008
    },
    {
        "content": "<p>I was looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_algebra.subsingleton_of_semisimple_lie_abelian\">docs#lie_algebra.subsingleton_of_semisimple_lie_abelian</a> and I thought that its conclusion should really be <code>¬ nontrivial L</code>.</p>",
        "id": 249591497,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629122146
    },
    {
        "content": "<p>And as I thought about how to prove it I realised I'd use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_submodule.nontrivial_iff\">docs#lie_submodule.nontrivial_iff</a> except that I can't just call <code>simp</code> because it's backwards and has no tag.</p>",
        "id": 249591616,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629122192
    },
    {
        "content": "<p>I don't think typeclass search can do this because <code>R</code> is unknown when faced with <code>¬ nontrivial L</code>.</p>",
        "id": 249591734,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629122258
    },
    {
        "content": "<p>Surely the conclusion should be <code>subsingleton L</code>?</p>",
        "id": 249591826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629122290
    },
    {
        "content": "<p>Right, I guess it should.</p>",
        "id": 249591909,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629122339
    },
    {
        "content": "<p>I'm not opposed to flipping the directions, I just don't have much of an opinion</p>",
        "id": 249592100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629122415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/113488-general/topic/.60nontrivial_iff.60.20and.20.60subsingleton_iff.60/near/249591734\">said</a>:</p>\n<blockquote>\n<p>I don't think typeclass search can do this because <code>R</code> is unknown when faced with <code>¬ nontrivial L</code>.</p>\n</blockquote>\n<p>You're right that if you change the conclusion to <code>subsingleton L</code> then <code>subsingleton_of_semisimple_lie_abelian </code> is no longer eligible for typeclass search though</p>",
        "id": 249592160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629122447
    },
    {
        "content": "<p>OK I'll see what happens if I flip the directions and add <code>simp</code>. Thanks.</p>",
        "id": 249592267,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629122507
    }
]