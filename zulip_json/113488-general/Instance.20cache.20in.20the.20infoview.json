[
    {
        "content": "<p>Has the infoview access to the instance cache? If so, could we make this information available by coloring the name of an instance variable differently from a non-instance one? This would bring us closer to our mental model that \"The infoview is all you need to see\".</p>",
        "id": 291481647,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659261430
    },
    {
        "content": "<p>Here's a (somewhat artificial) example where one can't tell whether a variable is in the instance cache or not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.hom.equiv</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">my_instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">‹</span><span class=\"n\">monoid</span> <span class=\"n\">H</span><span class=\"o\">›</span> <span class=\"o\">},</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">G: Type u_1</span>\n<span class=\"cm\">H: Type u_2</span>\n<span class=\"cm\">_inst_1: group G</span>\n<span class=\"cm\">_inst_2: monoid H</span>\n<span class=\"cm\">f: G ≃* H</span>\n<span class=\"cm\">my_instance: group H</span>\n<span class=\"cm\">⊢ true-/</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">my_instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">‹</span><span class=\"n\">monoid</span> <span class=\"n\">H</span><span class=\"o\">›</span> <span class=\"o\">},</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">G: Type u_1</span>\n<span class=\"cm\">H: Type u_2</span>\n<span class=\"cm\">_inst_1: group G</span>\n<span class=\"cm\">_inst_2: monoid H</span>\n<span class=\"cm\">f: G ≃* H</span>\n<span class=\"cm\">my_instance: group H</span>\n<span class=\"cm\">⊢ true-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291481697,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659261485
    },
    {
        "content": "<p>I do not know the answer to your question, but for your examples, <code>G, f</code> are unnecessary, right?  Could you just have a type and prove with sorry that it is inhabited or is there something else that I am overlooking?</p>",
        "id": 291483538,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659264070
    },
    {
        "content": "<p>The example was \"Transfer the group structure on <code>G</code> to a group structure on <code>H</code> using <code>f</code>\" <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 291484873,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659265885
    },
    {
        "content": "<p>I think the answer is \"the infoview is implemented via widgets in leanprover-community/lean, so in theory it has access to everything\"</p>",
        "id": 291485026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659266093
    },
    {
        "content": "<p>Yaël, I guessed as much, I was simply making a Meaningless Working Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">my_non_instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">my_instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">α: Sort ?</span>\n<span class=\"cm\">my_non_instance my_instance: inhabited α</span>\n<span class=\"cm\">⊢ true -/</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 291485477,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659266721
    },
    {
        "content": "<p>There is a tactic <code>frozen_local_instances</code>: using <code>trace frozen_local_instances,</code> reveals that it interprets <code>my_non_instance</code> as a non-instance in isolation, but as an instance when <code>my_instance</code> is around.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">--  have my_non_instance : inhabited α := sorry,   -- comment/uncomment this and the next line in all configurations and look at the trace!</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">my_instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">frozen_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291487492,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659269766
    },
    {
        "content": "<p>I think that might be a quirk in haveI; nice find!</p>",
        "id": 291490316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659273705
    },
    {
        "content": "<p>Does that mean <code>haveI</code> resets the instance cache?</p>",
        "id": 291490539,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659273930
    },
    {
        "content": "<p>If I were to implement my above suggestion, is there a way for me to try out the modified infoview easily?</p>",
        "id": 291491385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659274954
    },
    {
        "content": "<p>Actually, the widgets are defined in core Lean, right? so I can literally write a test file that imports them and I will see the modified there?</p>",
        "id": 291491429,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659275042
    },
    {
        "content": "<p>You can override from user code, even outside mathlib.</p>",
        "id": 291491576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659275217
    },
    {
        "content": "<p>See <a href=\"https://github.com/PatrickMassot/MDD154/blob/master/src/lib/interactive_expr.lean\">https://github.com/PatrickMassot/MDD154/blob/master/src/lib/interactive_expr.lean</a> which is imported at <a href=\"https://github.com/PatrickMassot/MDD154/blob/master/src/lib/tactiques.lean\">https://github.com/PatrickMassot/MDD154/blob/master/src/lib/tactiques.lean</a></p>",
        "id": 291491669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659275316
    },
    {
        "content": "<p>The last three lines of the first file do the magic of overriding the version of that file that is in mathlib.</p>",
        "id": 291491692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659275382
    },
    {
        "content": "<p>You can compare with the mathlib version. The main changes should be the parenthesis option (this was before Kyle put an option in core Lean) and pretty printing bounded quantifiers (using code from <a href=\"https://github.com/leanprover-community/mathlib/pull/5440\">#5440</a>)</p>",
        "id": 291491768,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659275464
    },
    {
        "content": "<p>A first try, with... salmon instances! Anne also offered <em>pinkstances</em>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tagged_format</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">widget</span> <span class=\"n\">widget.html</span> <span class=\"n\">widget.attr</span> <span class=\"n\">widget.interactive_expression</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">inst_widget</span>\n\n<span class=\"sd\">/-- Component that displays the main (first) goal. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic_view_goal</span> <span class=\"o\">{</span><span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">local_c</span> <span class=\"o\">:</span> <span class=\"n\">tc</span> <span class=\"n\">local_collection</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">target_c</span> <span class=\"o\">:</span> <span class=\"n\">tc</span> <span class=\"n\">expr</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tc</span> <span class=\"n\">filter_type</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"n\">tc.stateless</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ft</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n  <span class=\"n\">is</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.frozen_local_instances</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">is'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">option.cases_on</span> <span class=\"n\">is</span> <span class=\"o\">[]</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">g</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">expr.mvar</span> <span class=\"n\">u_n</span> <span class=\"n\">pp_n</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">main_goal</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">get_tag</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">case_tag</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">html</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">interactive.case_tag.parse</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n      <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"s2\">\"li\"</span> <span class=\"o\">[</span><span class=\"n\">key</span> <span class=\"s2\">\"_case\"</span><span class=\"o\">]</span> <span class=\"bp\">$</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"s2\">\"span\"</span> <span class=\"o\">[</span><span class=\"n\">cn</span> <span class=\"s2\">\"goal-case b\"</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"s2\">\"case\"</span><span class=\"o\">]]</span> <span class=\"bp\">++</span>\n        <span class=\"o\">(</span><span class=\"n\">t.case_names.bind</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"s2\">\" \"</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">])]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">lcs</span> <span class=\"bp\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n  <span class=\"n\">lcs</span> <span class=\"bp\">←</span> <span class=\"n\">list.mfilter</span> <span class=\"o\">(</span><span class=\"n\">filter_local</span> <span class=\"n\">ft</span><span class=\"o\">)</span> <span class=\"n\">lcs</span><span class=\"o\">,</span>\n  <span class=\"n\">lcs</span> <span class=\"bp\">←</span> <span class=\"n\">to_local_collection</span> <span class=\"o\">[]</span> <span class=\"n\">lcs</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Display the local variables; grouping together locals of the same type.</span>\n  <span class=\"n\">lchs</span> <span class=\"bp\">←</span> <span class=\"n\">lcs.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">lc</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"n\">lh</span> <span class=\"bp\">←</span> <span class=\"n\">local_c</span> <span class=\"n\">lc</span><span class=\"o\">,</span>\n    <span class=\"n\">ns</span> <span class=\"bp\">←</span> <span class=\"n\">lc.locals.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">var_color</span> <span class=\"o\">:</span> <span class=\"n\">attr</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">is'</span>\n      <span class=\"k\">then</span> <span class=\"n\">attr.style</span> <span class=\"o\">[(</span><span class=\"s2\">\"color\"</span><span class=\"o\">,</span> <span class=\"s2\">\"#ff0073\"</span><span class=\"o\">)]</span>  <span class=\"c1\">-- \"goal-hyp-inst\"</span>\n      <span class=\"k\">else</span> <span class=\"n\">attr.style</span> <span class=\"o\">[(</span><span class=\"s2\">\"color\"</span><span class=\"o\">,</span> <span class=\"s2\">\"#ffcc00\"</span><span class=\"o\">)],</span> <span class=\"c1\">-- \"goal-hyp\"</span>\n        <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">h</span> <span class=\"s2\">\"span\"</span> <span class=\"o\">[</span><span class=\"n\">cn</span> <span class=\"s2\">\"goal-hyp b pr2\"</span><span class=\"o\">,</span> <span class=\"n\">var_color</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">html.of_name</span> <span class=\"bp\">$</span> <span class=\"n\">expr.local_pp_name</span> <span class=\"n\">n</span><span class=\"o\">]),</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">h</span> <span class=\"s2\">\"li\"</span> <span class=\"o\">[</span><span class=\"n\">key</span> <span class=\"n\">lc.key</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"s2\">\": \"</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"s2\">\"span\"</span> <span class=\"o\">[</span><span class=\"n\">cn</span> <span class=\"s2\">\"goal-hyp-type\"</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lh</span><span class=\"o\">]])),</span>\n  <span class=\"n\">t_comp</span> <span class=\"bp\">←</span> <span class=\"n\">target_c</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">h</span> <span class=\"s2\">\"ul\"</span> <span class=\"o\">[</span><span class=\"n\">key</span> <span class=\"n\">g.hash</span><span class=\"o\">,</span> <span class=\"n\">className</span> <span class=\"s2\">\"list pl0 font-code\"</span><span class=\"o\">]</span> <span class=\"bp\">$</span> <span class=\"n\">case_tag</span> <span class=\"bp\">++</span> <span class=\"n\">lchs</span> <span class=\"bp\">++</span> <span class=\"o\">[</span>\n    <span class=\"n\">h</span> <span class=\"s2\">\"li\"</span> <span class=\"o\">[</span><span class=\"n\">key</span> <span class=\"n\">u_n</span><span class=\"o\">]</span> <span class=\"o\">[</span>\n      <span class=\"n\">h</span> <span class=\"s2\">\"span\"</span> <span class=\"o\">[</span><span class=\"n\">cn</span> <span class=\"s2\">\"goal-vdash b\"</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"s2\">\"⊢ \"</span><span class=\"o\">],</span>\n      <span class=\"n\">t_comp</span>\n  <span class=\"o\">]]</span>\n\n<span class=\"sd\">/-- Component that displays all goals, together with the `$n goals` message. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic_view_component</span> <span class=\"o\">{</span><span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">local_c</span> <span class=\"o\">:</span> <span class=\"n\">tc</span> <span class=\"n\">local_collection</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">target_c</span> <span class=\"o\">:</span> <span class=\"n\">tc</span> <span class=\"n\">expr</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tc</span> <span class=\"n\">unit</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"n\">tc.mk_simple</span>\n  <span class=\"o\">(</span><span class=\"n\">tactic_view_action</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">filter_type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">filter_type.none</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨⟩</span> <span class=\"n\">ft</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n              <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tactic_view_action.out</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ft</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n              <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tactic_view_action.filter</span> <span class=\"n\">ft</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ft</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n              <span class=\"kd\">end</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨⟩</span> <span class=\"n\">ft</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n    <span class=\"n\">hs</span> <span class=\"bp\">←</span> <span class=\"n\">gs.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">flip</span> <span class=\"n\">tc.to_html</span> <span class=\"n\">ft</span> <span class=\"bp\">$</span> <span class=\"n\">tactic_view_goal</span> <span class=\"n\">local_c</span> <span class=\"n\">target_c</span><span class=\"o\">),</span>\n    <span class=\"n\">set_goals</span> <span class=\"n\">gs</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">goal_message</span> <span class=\"o\">:=</span>\n      <span class=\"k\">if</span> <span class=\"n\">gs.length</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n        <span class=\"s2\">\"goals accomplished\"</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">gs.length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n        <span class=\"s2\">\"1 goal\"</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">to_string</span> <span class=\"n\">gs.length</span> <span class=\"bp\">++</span> <span class=\"s2\">\" goals\"</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">goal_message</span> <span class=\"o\">:</span> <span class=\"n\">html</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"s2\">\"strong\"</span> <span class=\"o\">[</span><span class=\"n\">cn</span> <span class=\"s2\">\"goal-goals\"</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">goal_message</span><span class=\"o\">],</span>\n    <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"o\">:</span> <span class=\"n\">html</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"s2\">\"ul\"</span> <span class=\"o\">[</span><span class=\"n\">className</span> <span class=\"s2\">\"list pl0\"</span><span class=\"o\">]</span>\n        <span class=\"bp\">$</span> <span class=\"n\">list.map_with_index</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n          <span class=\"n\">h</span> <span class=\"s2\">\"li\"</span> <span class=\"o\">[</span><span class=\"n\">className</span> <span class=\"bp\">$</span> <span class=\"s2\">\"lh-copy mt2\"</span><span class=\"o\">,</span> <span class=\"n\">key</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span>\n        <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">goal_message</span> <span class=\"o\">::</span> <span class=\"n\">hs</span><span class=\"o\">),</span>\n    <span class=\"n\">pure</span> <span class=\"o\">[</span>\n      <span class=\"n\">h</span> <span class=\"s2\">\"div\"</span> <span class=\"o\">[</span><span class=\"n\">className</span> <span class=\"s2\">\"fr\"</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">html.of_component</span> <span class=\"n\">ft</span> <span class=\"bp\">$</span> <span class=\"n\">component.map_action</span> <span class=\"n\">tactic_view_action.filter</span> <span class=\"n\">filter_component</span><span class=\"o\">],</span>\n      <span class=\"n\">html.map_action</span> <span class=\"n\">tactic_view_action.out</span> <span class=\"n\">goals</span>\n    <span class=\"o\">])</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic_render</span> <span class=\"o\">:</span> <span class=\"n\">tc</span> <span class=\"n\">unit</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span>\n<span class=\"n\">component.ignore_action</span> <span class=\"bp\">$</span> <span class=\"n\">tactic_view_component</span> <span class=\"n\">show_local_collection_component</span> <span class=\"n\">show_type_component</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic_state_widget</span> <span class=\"o\">:</span> <span class=\"n\">component</span> <span class=\"n\">tactic_state</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span>\n<span class=\"n\">tc.to_component</span> <span class=\"n\">tactic_render</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">inst_widget</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">vm_override</span> <span class=\"n\">inst_widget.tactic_state_widget</span><span class=\"o\">]</span> <span class=\"n\">widget.tactic_state_widget</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">an_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">not_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">another_not_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">yet_another</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/cM_2w5s2vC9g5pwmPq0pvBNd/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cM_2w5s2vC9g5pwmPq0pvBNd/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/cM_2w5s2vC9g5pwmPq0pvBNd/image.png\"></a></div>",
        "id": 292397809,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659963557
    },
    {
        "content": "<p>Italics, maybe? <a href=\"/user_uploads/3121/z7DU1LSJxARf7_8QhUSzmSz2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/z7DU1LSJxARf7_8QhUSzmSz2/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/z7DU1LSJxARf7_8QhUSzmSz2/image.png\"></a></div>",
        "id": 292398335,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659963833
    },
    {
        "content": "<p>I'd maybe go for a more muted color</p>",
        "id": 292398422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659963857
    },
    {
        "content": "<p>Since you shouldn't have to know the name of things in the instance cache anyway</p>",
        "id": 292398443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659963870
    },
    {
        "content": "<p>Note, the colors are surprisingly strong on the first one for a reason that escapes me.</p>",
        "id": 292398448,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659963873
    },
    {
        "content": "<p>My guess would be that they're the dark mode colors being used in white mode</p>",
        "id": 292398483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659963898
    },
    {
        "content": "<p>Ah! Yes exactly.</p>",
        "id": 292398514,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659963919
    },
    {
        "content": "<p>Muted colors. <a href=\"/user_uploads/3121/pV-4e2Bg0sRYWVSUP7QAL1hv/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pV-4e2Bg0sRYWVSUP7QAL1hv/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/pV-4e2Bg0sRYWVSUP7QAL1hv/image.png\"></a></div>",
        "id": 292398670,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659963984
    },
    {
        "content": "<p>Possibly coloring things that aren't in the instance cache but are <code>@[class]</code> would be a good idea too / instead</p>",
        "id": 292398684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659963994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Instance.20cache.20in.20the.20infoview/near/292398422\">said</a>:</p>\n<blockquote>\n<p>I'd maybe go for a more muted color</p>\n</blockquote>\n<p>I meant make the ones in the cache be more muted than the ones not in the cache</p>",
        "id": 292398741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659964025
    },
    {
        "content": "<p>Rob suggested this as well. It's a choice to make.</p>",
        "id": 292398919,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659964108
    },
    {
        "content": "<p>Like this? <a href=\"http://\">Uploading image.png…</a></p>",
        "id": 292398925,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659964114
    },
    {
        "content": "<p>(Zulip's behavior of allowing you to send the loading text is wonderful, isn't it...)</p>",
        "id": 292398975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659964148
    },
    {
        "content": "<p>Another good option might just be a red dotted / squiggly line underneath the non-instance cache ones, with a <code>title=\"not in the instance cache\"</code> attribute</p>",
        "id": 292399181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659964241
    },
    {
        "content": "<p>Underlines sound like a good idea</p>",
        "id": 292399258,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1659964275
    },
    {
        "content": "<p>Or maybe not red since it's not an error, but some kind of underline, probably not in yellow</p>",
        "id": 292399282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659964292
    },
    {
        "content": "<p>I'd definitely suggest highlighting what's not in the cache instead of what is</p>",
        "id": 292403401,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659966253
    },
    {
        "content": "<p>/poll What should we separate visually?<br>\nInstances vs non instances<br>\nTypeclass assumptions that are not instances vs the rest<br>\nInstances vs typeclass assumptions that are not instances vs the rest<br>\nTypeclass assumptions from the rest</p>",
        "id": 292476771,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659982349
    },
    {
        "content": "<p>/poll How should we separate it?<br>\nDifferent color<br>\nItalic<br>\nBold<br>\nUnderline</p>",
        "id": 292476838,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659982386
    },
    {
        "content": "<p>By \"instances\" you mean \"in the instance cache\" or \"of a type tagged with <code>@[class]</code>\"?</p>",
        "id": 292477499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659982743
    },
    {
        "content": "<p>In the instance cache. as opposed to \"typeclass assumptions\".</p>",
        "id": 292479077,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659983566
    },
    {
        "content": "<p>Are you considering either of <code>[n : nat]</code> and <code>{s : setoid X}</code> a typeclass assumption?</p>",
        "id": 292479521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659983792
    },
    {
        "content": "<p>(I would hope the answer is just the latter)</p>",
        "id": 292479542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659983807
    },
    {
        "content": "<p>Just the latter.</p>",
        "id": 292479630,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659983847
    },
    {
        "content": "<p>Regarding the first poll, it might be possible to make variable names clickable or hoverable in order to show a bubble of the form \"This is a class but not an instance\" or something along those lines...</p>",
        "id": 292484174,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659986232
    },
    {
        "content": "<p>is \"frozen local instance\" being distinguished here? (i.e. something that would make revert fail)</p>",
        "id": 292484297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659986311
    },
    {
        "content": "<p>If you explain me what it is, I would be happy to try! My code above only knows about the instance cache.</p>",
        "id": 292484368,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659986356
    },
    {
        "content": "<p>the frozen local instances generally coincide with the ones in the cache</p>",
        "id": 292484535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659986444
    },
    {
        "content": "<p>Okay, that was my mental model. What are the exceptions?</p>",
        "id": 292484666,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659986507
    },
    {
        "content": "<p>when you say <code>unfreeze_local_instances</code></p>",
        "id": 292484732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659986525
    },
    {
        "content": "<p>the tactic <code>frozen_local_instances</code> returns the list of frozen local instances</p>",
        "id": 292484828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659986578
    },
    {
        "content": "<p>This is not supposed to be used by the end user, right?</p>",
        "id": 292485101,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659986732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, can you make a draft PR of this against lean to make it clear which bits of your code are copy-pasted to make <code>vm_override</code> work, and which bits are changed? My impression is that we want this in lean core eventually, and that <code>vm_override</code> is just a neat tool for protyping</p>",
        "id": 292485894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659987148
    },
    {
        "content": "<p>Yes absolutely! The twist is that to avoid harcoding the style I will need to first get a PR merged to <code>vscode-lean</code> to add the missing style attributes to the CSS file, unless you see another way out.</p>",
        "id": 292486045,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659987229
    },
    {
        "content": "<p>I think for the purpose of a draft PR that can be dealt with later (either by assuming the PR exists, or by inlining the styles for now)</p>",
        "id": 292486267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659987349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Instance.20cache.20in.20the.20infoview/near/292485101\">said</a>:</p>\n<blockquote>\n<p>This is not supposed to be used by the end user, right?</p>\n</blockquote>\n<p>No, but it is user-visible and I assumed that's why you want to color these things in the first place</p>",
        "id": 292486647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659987578
    },
    {
        "content": "<p>I assume you are trying to make it possible for the user to predict in advance that a typeclass in the context won't be used or something like that</p>",
        "id": 292486765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659987638
    },
    {
        "content": "<p>There are basically two user-facing issues that would be relevant here: (1) a typeclass in the context is not going to be used because it was added after the cache was frozen, (2) a typeclass in the context cannot be reverted or rewritten because it is frozen</p>",
        "id": 292486960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659987767
    },
    {
        "content": "<p>Here's a suggested scheme:</p>\n<ul>\n<li>If the instance cache is not frozen, all instances are reddish</li>\n<li>If the instance cache is frozen, frozen instances are bluish and unfrozen instances are italic</li>\n</ul>",
        "id": 292488051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659988346
    },
    {
        "content": "<p>so bluish means you can't revert it and italic means you forgot a <code>haveI</code></p>",
        "id": 292488152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659988407
    },
    {
        "content": "<p>reddish means you are in the middle of a <code>unfreezingI</code>, this should be rare</p>",
        "id": 292488190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659988439
    },
    {
        "content": "<p>I would only color \"unavailable\" type classes instances in red (= local instances are frozen &amp; the instance is not part of the frozen ones), because that's when you need to take action.</p>",
        "id": 292496026,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1659992476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> You need to do the changes in mathlib: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/interactive_expr.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/interactive_expr.lean</a>  Feel free to sync that file to core though if you want.</p>",
        "id": 292496173,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1659992532
    },
    {
        "content": "<p>I think showing somehow that the cache is frozen/unfrozen is good too, otherwise there's no observable effect of unfreezing the instance cache</p>",
        "id": 292498625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659993882
    },
    {
        "content": "<p>Mario's dream:<br>\n<a href=\"/user_uploads/3121/f99u7amw1XuQzdpkUQiH9sXp/image.png\">Before unfreezing</a><br>\n<a href=\"/user_uploads/3121/4iXkMhdMiJ5pBR4d3psoQTxU/image.png\">Within an <code>unfreezingI</code></a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/f99u7amw1XuQzdpkUQiH9sXp/image.png\" title=\"Before unfreezing\"><img src=\"/user_uploads/3121/f99u7amw1XuQzdpkUQiH9sXp/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4iXkMhdMiJ5pBR4d3psoQTxU/image.png\" title=\"Within an \"><img src=\"/user_uploads/3121/4iXkMhdMiJ5pBR4d3psoQTxU/image.png\"></a></div>",
        "id": 292537627,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660031990
    },
    {
        "content": "<p>One other thought: it's quite common to paste goals into Zulip /discord where the colors are lost</p>",
        "id": 292556657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660042438
    },
    {
        "content": "<p>Should we use a symbol instead / as well?</p>",
        "id": 292556724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660042448
    },
    {
        "content": "<p>Also symbols might be useful for people who are colourblind...</p>",
        "id": 292559973,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660044060
    },
    {
        "content": "<p>Agreed! I paid attention to the colors scheme, because I am myself colorblind. But I am only one flavor of colorblind so it would be good to get other people's opinions.</p>",
        "id": 292560411,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660044283
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15959\">#15959</a></p>",
        "id": 292577801,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660051608
    },
    {
        "content": "<p>This is still not merged, if people want to suggest ways to show the instance cache in the infoview on <a href=\"https://github.com/leanprover-community/mathlib/pull/15959\">#15959</a>.</p>",
        "id": 295109927,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661368476
    }
]