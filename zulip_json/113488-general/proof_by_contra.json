[
    {
        "content": "<p>I would very much like to have the following tactic in mathlib. But presumably this should be merged into <code>by_contra</code>, which is locked in core. And the behaviour of this tactic depends on <code>push_neg</code>, which is only available in mathlib. What is the best way forward?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"sd\">/-- Turns a goal `P` into `¬¬P`, and uses `push_neg` to simplify the inner `¬P`. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">proof_by_contra</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">by_contra</span> <span class=\"n\">proof_by_contra_hyp</span><span class=\"o\">,</span>\n   <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">proof_by_contra_hyp</span> <span class=\"o\">},</span>\n   <span class=\"n\">revert</span> <span class=\"n\">proof_by_contra_hyp</span><span class=\"o\">,</span>\n   <span class=\"k\">show</span> <span class=\"bp\">¬</span> <span class=\"n\">_</span> <span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">proof_by_contra</span><span class=\"o\">,</span> <span class=\"c1\">-- `¬¬P`</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 256574908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633612459
    },
    {
        "content": "<blockquote>\n<p>But presumably this should be merged into by_contra</p>\n</blockquote>\n<p>It does something different than by_contra, so I don't think they should be merged.</p>",
        "id": 256575166,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633612568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I think this would be reasonable behaviour for <code>by_contra</code> if it doesn't get a new id for the hypothesis.</p>",
        "id": 256577127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633613357
    },
    {
        "content": "<p>Or maybe <code>by_contra!</code>.</p>",
        "id": 256577154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633613367
    },
    {
        "content": "<p>The push_neg is pretty mathlib-specific though.</p>",
        "id": 256577172,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633613374
    },
    {
        "content": "<p>Note that your tactic is a no-op for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">proof_by_contra</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which is probably not what you want</p>",
        "id": 256577498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633613497
    },
    {
        "content": "<p>I think it <em>is</em> what I want.</p>",
        "id": 256577612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633613522
    },
    {
        "content": "<p>Aren't no-op tactics frowned upon?</p>",
        "id": 256577653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633613535
    },
    {
        "content": "<p>eg <code>simp</code> fails by default if it does nothing</p>",
        "id": 256577673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633613544
    },
    {
        "content": "<p>You mean that it should fail instead?</p>",
        "id": 256577683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633613547
    },
    {
        "content": "<p>Yes</p>",
        "id": 256577688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633613551
    },
    {
        "content": "<p>Aha... I don't know how to do that.</p>",
        "id": 256577701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633613554
    },
    {
        "content": "<p>I'm a cargo-tactic-writer</p>",
        "id": 256577733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633613572
    },
    {
        "content": "<p>Probably you shouldn't inherit the <code>intro</code> behavior from <code>by_contra</code></p>",
        "id": 256577767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633613590
    },
    {
        "content": "<p>I just want support for writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">proof_by_contra</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 256579272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633614236
    },
    {
        "content": "<p>I don't care too much about what <code>proof_by_contra</code> is called, as long as it is more readable than <code>apply lt_of_not_ge</code>.</p>",
        "id": 256579402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633614276
    },
    {
        "content": "<p>Every random stranger understands what <code>proof_by_contra</code> does. But <code>lt_of_not_ge</code> is hieroglyphic.</p>",
        "id": 256579455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633614300
    },
    {
        "content": "<p>Just to comment that I'm extensively using <code>by_contra</code> as it stands in a lecture I'm about to give and also in my undergraduate teaching this term. It's a great way of introducing classical logic to mathematicians without going on about constructivism</p>",
        "id": 256579486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633614313
    },
    {
        "content": "<p><code>by_contra</code> is nice, except for the lack of automatic tidying up using <code>push_neg</code>.</p>",
        "id": 256579563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633614354
    },
    {
        "content": "<p>You don't always want to use <code>push_neg</code> next though</p>",
        "id": 256579797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633614450
    },
    {
        "content": "<p>Why not?</p>",
        "id": 256580032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633614559
    },
    {
        "content": "<p>A proof that doesn't name any Prop-assumptions or library lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">euclid</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p.prime</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nat.min_fac</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">proof_by_contra</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"bp\">!</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">N</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 256580117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633614593
    },
    {
        "content": "<p>It's a bit long-winded. But this proof is readable by someone who has never read Lean before. I like that it doesn't contain any library lemmas.</p>",
        "id": 256580363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633614664
    },
    {
        "content": "<p>That's pretty nice!</p>",
        "id": 256580614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633614755
    },
    {
        "content": "<p>Impressive!</p>",
        "id": 256580624,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633614762
    },
    {
        "content": "<p>Can I use it in my talk?</p>",
        "id": 256580626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633614764
    },
    {
        "content": "<p>But doesn't it set your CPU on fire?</p>",
        "id": 256580687,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633614787
    },
    {
        "content": "<p>Unfortunately you can't use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">library_search</span> <span class=\"n\">using</span> <span class=\"o\">[‹</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"bp\">!</span><span class=\"o\">›]</span>\n</code></pre></div>",
        "id": 256580877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633614846
    },
    {
        "content": "<p>What imports does that example need?</p>",
        "id": 256580933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633614874
    },
    {
        "content": "<p>The problem with <code>library_search</code> is that it only works with the right imports, and without them you have no idea what you need to import!</p>",
        "id": 256580969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633614889
    },
    {
        "content": "<p>Preamble:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"sd\">/-- Turns a goal `P` into `¬¬P`, and uses `push_neg` to simplify the inner `¬P`. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">proof_by_contra</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">by_contra</span> <span class=\"n\">proof_by_contra_hyp</span><span class=\"o\">,</span>\n   <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">proof_by_contra_hyp</span> <span class=\"o\">},</span>\n   <span class=\"n\">revert</span> <span class=\"n\">proof_by_contra_hyp</span><span class=\"o\">,</span>\n   <span class=\"k\">show</span> <span class=\"bp\">¬</span> <span class=\"n\">_</span> <span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">proof_by_contra</span><span class=\"o\">,</span> <span class=\"c1\">-- `¬¬P`</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span> <span class=\"c1\">-- enable `!` as notation for factorial</span>\n</code></pre></div>",
        "id": 256580994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633614898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/proof_by_contra/near/256579272\">said</a>:</p>\n<blockquote>\n<p>I just want support for writing</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">proof_by_contra</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don't like that the proposed version of the tactic introduces a negation for no reason. If this is the kind of proof you want to do, why not make it <code>proof_by_contra h? : p ≤ n</code>, i.e. the same style as <code>by_contra</code>?</p>",
        "id": 256587267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633617127
    },
    {
        "content": "<p>Mario, this is all due to the fact that I don't know how to properly write tactics.</p>",
        "id": 256587520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633617240
    },
    {
        "content": "<p>So, if I can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">proof_by_contra</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>with a different implementation under the hood, then I certainly wont complain.</p>",
        "id": 256587718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633617306
    },
    {
        "content": "<p><code>proof_by_contra : p ≤ n</code> reads slightly weird. It's missing the <code>assume</code> verb.</p>",
        "id": 256588367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633617525
    },
    {
        "content": "<p>well then change the name of the tactic</p>",
        "id": 256588678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633617631
    },
    {
        "content": "<p>e.g. <code>assume_by_contra</code></p>",
        "id": 256588706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633617644
    },
    {
        "content": "<p>The existing <code>by_contra</code> has no <code>assume</code> in the name, though</p>",
        "id": 256588796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633617678
    },
    {
        "content": "<p>I think that it can also be merged into <code>by_contra</code> in this form; the only addition here is that we are explicitly type ascribing the hypothesis</p>",
        "id": 256588905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633617720
    },
    {
        "content": "<p>and we use some <code>simpa</code> call involving push neg stuff to make the type match</p>",
        "id": 256589030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633617752
    },
    {
        "content": "<p>Am I right in thinking the main advantages of <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>'s spelling:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">proof_by_contra</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>over</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_contra</span>\n<span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>is that the former doesn't name the hypothesis and does show the type?</p>",
        "id": 256589154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633617815
    },
    {
        "content": "<p>It also doesn't name <code>push_neg</code>. Which is an operation that should be performed \"behind the scenes\" whenever possible.</p>",
        "id": 256589299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633617855
    },
    {
        "content": "<p>they both name the hypothesis</p>",
        "id": 256589308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633617858
    },
    {
        "content": "<p>the first one names it <code>this</code></p>",
        "id": 256589322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633617864
    },
    {
        "content": "<p>Eric means that the proof script doesn't name (i.e., mention explicitly) it.</p>",
        "id": 256589357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633617881
    },
    {
        "content": "<p>Doesn't <code>by_contra</code> have a <code>!</code> version that calls <code>push_neg</code>?</p>",
        "id": 256589399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633617902
    },
    {
        "content": "<p><code>by_contra</code> is in core, right?</p>",
        "id": 256589435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633617913
    },
    {
        "content": "<p>I'd certainly be in favor of changing <code>by_contra</code> to accept an optional type annotation</p>",
        "id": 256589456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633617919
    },
    {
        "content": "<p>Yes, it is; I changed it very recently</p>",
        "id": 256589474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633617926
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_contra\">tactic#by_contra</a> to give you the breadcrumb to find it</p>",
        "id": 256589510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633617939
    },
    {
        "content": "<p>I could have sworn we had some souped up version of <code>by_contra</code> in mathlib</p>",
        "id": 256589637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633617971
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/a0fb1e8c7ac81dfd2e80ad0de08f4e57ee853d82/library/init/meta/interactive.lean#L1624-L1638\">https://github.com/leanprover-community/lean/blob/a0fb1e8c7ac81dfd2e80ad0de08f4e57ee853d82/library/init/meta/interactive.lean#L1624-L1638</a> is the parser</p>",
        "id": 256589648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633617976
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/a0fb1e8c7ac81dfd2e80ad0de08f4e57ee853d82/library/init/meta/tactic.lean#L1481-L1487\">https://github.com/leanprover-community/lean/blob/a0fb1e8c7ac81dfd2e80ad0de08f4e57ee853d82/library/init/meta/tactic.lean#L1481-L1487</a> is the tactic itself</p>",
        "id": 256589734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633618005
    },
    {
        "content": "<p>ah, there is <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#contrapose\">tactic#contrapose</a></p>",
        "id": 256589805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633618031
    },
    {
        "content": "<p>I would be in favour of having <code>assume_by_contra</code> which also calls <code>push_neg</code> on the new hyp.</p>",
        "id": 256589877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633618063
    },
    {
        "content": "<p>I think it would make sense  to have a <code>push_neg</code> powered <code>by_contra</code></p>",
        "id": 256589889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633618068
    },
    {
        "content": "<p>would it be too tricky to remove <code>by_contra</code> and just have <code>by_contradiction</code> in core?</p>",
        "id": 256590024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633618105
    },
    {
        "content": "<p>It might break projects that don't use mathlib?</p>",
        "id": 256590078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633618125
    },
    {
        "content": "<p>fair</p>",
        "id": 256590111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633618139
    },
    {
        "content": "<p>I'm guessing it's not possible to have <code>by_contra</code> in core and <code>by_contra!</code> in mathlib?</p>",
        "id": 256590144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633618155
    },
    {
        "content": "<p>Otoh, such project might not be using a recent Lean anyways.</p>",
        "id": 256590169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633618167
    },
    {
        "content": "<p>there is always the old standby of <code>by_contra'</code></p>",
        "id": 256590185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633618174
    },
    {
        "content": "<p>We never got complaints when we ripped algebra out of core.</p>",
        "id": 256590189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633618176
    },
    {
        "content": "<p>Can we use replacement hooks like <code>obviously</code> does, and have the default for <code>by_contra!</code> to just print \"sorry, needs mathlib\"</p>",
        "id": 256590192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633618178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/proof_by_contra/near/256590185\">said</a>:</p>\n<blockquote>\n<p>there is always the old standby of <code>by_contra'</code></p>\n</blockquote>\n<p>which is ugly. My goal is to have a way to write really slick proofs.</p>",
        "id": 256590231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633618194
    },
    {
        "content": "<p><code>by_con</code>?</p>",
        "id": 256590352,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1633618228
    },
    {
        "content": "<p>I don't think people will immediately understand that either.</p>",
        "id": 256590401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633618255
    },
    {
        "content": "<p>The point is, when you write a proof that will be printed, there cannot be any mouse-over hover-texts, and there will be no goal state or infoview.</p>",
        "id": 256590481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633618287
    },
    {
        "content": "<p>I think for demo purposes you can set up your own veneer over mathlib tactics, so they aren't intrinsically related</p>",
        "id": 256590542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633618312
    },
    {
        "content": "<p>That's fair. And that's what I'm doing now.</p>",
        "id": 256590630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633618332
    },
    {
        "content": "<p>like Patrick's \"french mode\"</p>",
        "id": 256590632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633618333
    },
    {
        "content": "<p>Still, I would like to stay very close to mathlib.</p>",
        "id": 256590675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633618349
    },
    {
        "content": "<p>Ideally, someone should be able to go to the online editor, and type in my proof.</p>",
        "id": 256590736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633618373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/proof_by_contra/near/256590736\">said</a>:</p>\n<blockquote>\n<p>Ideally, someone should be able to go to the online editor, and type in my proof.</p>\n</blockquote>\n<p>I had complaints from a reviewer that attempts to copy my proof from a PDF version didn't work... So sharing a URL with <code>.lean</code> files might be more reasonable.</p>",
        "id": 256591072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633618492
    },
    {
        "content": "<p>That's a good idea.</p>",
        "id": 256592471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633618903
    },
    {
        "content": "<p>Especially since <code>∣</code> ≠ <code>|</code> which will certainly trip up hand-copying of proofs.</p>",
        "id": 256592615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633618934
    },
    {
        "content": "<p>In that case, can someone tell me how to write a <code>observe : some_prop</code> tactic that does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">some_prop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 256592830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633619014
    },
    {
        "content": "<p>I can then put <code>proof_by_contra</code> and <code>observe</code> in a prereq file that I import.</p>",
        "id": 256592954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633619047
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.push_neg</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">assume_by_contra</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\":\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">texpr</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">applyc</span> <span class=\"bp\">``</span><span class=\"n\">classical.by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">h₁</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">t'</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">pr</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">push_neg.normalize_negations</span> <span class=\"n\">t'</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">refl_conv</span> <span class=\"n\">t'</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"o\">()</span> <span class=\"bp\">&lt;$</span> <span class=\"n\">replace_hyp</span> <span class=\"n\">h₁</span> <span class=\"n\">e</span> <span class=\"n\">pr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n    <span class=\"n\">unify</span> <span class=\"n\">t</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"o\">()</span> <span class=\"bp\">&lt;$</span> <span class=\"n\">replace_hyp</span> <span class=\"n\">h₁</span> <span class=\"n\">t</span> <span class=\"n\">pr</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">observe</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\":\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">texpr</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"n\">assert</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- `[{library_search}]</span>\n  <span class=\"n\">solve1</span> <span class=\"bp\">$</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">lemma_thunks</span><span class=\"o\">,</span> <span class=\"n\">ctx_thunk</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">solve_by_elim.mk_assumption_set</span> <span class=\"n\">ff</span> <span class=\"o\">[]</span> <span class=\"o\">[],</span>\n    <span class=\"o\">(()</span> <span class=\"bp\">&lt;$</span> <span class=\"n\">tactic.library_search</span>\n      <span class=\"o\">{</span> <span class=\"n\">backtrack_all_goals</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n        <span class=\"n\">lemma_thunks</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">lemma_thunks</span><span class=\"o\">,</span>\n        <span class=\"n\">ctx_thunk</span> <span class=\"o\">:=</span> <span class=\"n\">ctx_thunk</span><span class=\"o\">,</span>\n        <span class=\"n\">md</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.transparency.reducible</span> <span class=\"o\">})</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">\"observe failed\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">assume_by_contra</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">observe</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 256598946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633621075
    },
    {
        "content": "<p>it was harder than it should have been because the porcelain tactics forgot to expose the plumbing version, so I had to copy and paste bits of the implementation of <code>push_neg</code> and <code>library_search</code> respectively</p>",
        "id": 256599187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633621147
    },
    {
        "content": "<p>I had done</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">observe</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q₁</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\":\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">texpr</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span> <span class=\"n\">h</span> <span class=\"n\">q₁</span> <span class=\"n\">none</span> <span class=\"bp\">&gt;&gt;</span>\n<span class=\"n\">tactic.focus1</span> <span class=\"o\">(</span><span class=\"n\">tactic.library_search</span> <span class=\"o\">{</span> <span class=\"n\">backtrack_all_goals</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">}</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 256599240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633621165
    },
    {
        "content": "<p><code>library_search</code> should really have an option to turn off the trace in <code>opt</code></p>",
        "id": 256599290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633621186
    },
    {
        "content": "<p>You probably don't want the type arg of <code>observe</code> to be optional</p>",
        "id": 256599456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633621242
    },
    {
        "content": "<p>I guess so <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 256599524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633621270
    },
    {
        "content": "<p>I'm not really sure what the <code>mk_assumption_set</code> is doing, but <code>library_search</code> was doing that so I copied it</p>",
        "id": 256599621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633621307
    },
    {
        "content": "<p>ah, you do want that stuff, it adds some default lemmas like <code>rfl, trivial, congr_arg</code> to the simp set</p>",
        "id": 256599969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633621416
    },
    {
        "content": "<p>Thanks for your help, Mario!</p>",
        "id": 256604220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633622907
    },
    {
        "content": "<p>I'm a bit late to the party but I obviously support the idea of having a version of <code>by_contra</code> that uses <code>push_neg</code> (I wrote both <code>push_neg</code> and <code>contrapose</code>). I think we already had this conversation before and the fact that <code>by_contra</code> is in core is the only obstruction (we can't simply add the exclamation mark version in mathlib)</p>",
        "id": 256604515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633623010
    },
    {
        "content": "<p>I very frequently wish I could have this improved <code>by_contra</code> even outside of propaganda talks</p>",
        "id": 256604626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633623048
    },
    {
        "content": "<p>I think that we should just do <code>by_contra'</code>. We already have several tactics like that, they are basically TODOs for lean 4</p>",
        "id": 256605643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633623395
    },
    {
        "content": "<blockquote>\n<p>(we can't simply add the exclamation mark version in mathlib)</p>\n</blockquote>\n<p>To be pedantic, you can:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">reserve</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">by_contra</span><span class=\"bp\">!`</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.</span><span class=\"bp\">«</span><span class=\"n\">by_contra</span><span class=\"bp\">!»</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.fail</span> <span class=\"s2\">\"todo\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">by_contra</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>PRs are of course also welcome, but Lean 4 is on the horizon.</p>",
        "id": 256611271,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633625494
    },
    {
        "content": "<p>Just to add that \"have p&gt;n, by contra, assume p&lt;=n\" is pretty much exactly what a mathematician would write on a blackboard -- that's what Johan's idea has going for it</p>",
        "id": 256654471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633642858
    },
    {
        "content": "<p>I really like <code>observe</code> too</p>",
        "id": 256654900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633643069
    },
    {
        "content": "<p>I would love to have a <code>by_cases!</code> too, or even something that does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">...|...</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 256682364,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633662866
    },
    {
        "content": "<p>This is useful, e.g., when I want to say: either <code>∀ x, f x ≤ g x</code>, or <code>∃ x, g x &lt; f x</code>.</p>",
        "id": 256682404,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633662908
    },
    {
        "content": "<p>Never See a Negation Again (TM)</p>",
        "id": 256683299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633663818
    },
    {
        "content": "<p>Classical mathematicians don't take them seriously :-)</p>",
        "id": 256694198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633674066
    },
    {
        "content": "<p>I personally became quite fluent in using <code>has_le.le.eq_or_lt</code>, <code>ne.lt_or_lt</code>, <code>lt_trichotomy</code> to optimize my case disjunctions, and I've been shortening quite a few existing proofs that doing <code>by_cases</code> then rewriting to what they actually wanted to end up with.</p>",
        "id": 256695041,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633674837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you want to PR your <code>assume_by_contra</code> as <code>by_contra'</code>? Or would you mind if I do that?</p>",
        "id": 256703014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633680321
    },
    {
        "content": "<p>go ahead</p>",
        "id": 256703038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633680339
    },
    {
        "content": "<p>I feel like the following doesn't really belong in <code>tactic.norm_num</code>. Which file should it move to?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Reflexivity conversion: given `e` returns `(e, ⊢ e = e)` -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">refl_conv</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mk_eq_refl</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Turns a conversion tactic into one that always succeeds, where failure is interpreted as a</span>\n<span class=\"sd\">proof by reflexivity. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">or_refl_conv</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tac</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">refl_conv</span> <span class=\"n\">e</span>\n\n<span class=\"sd\">/-- Transitivity conversion: given two conversions (which take an</span>\n<span class=\"sd\">expression `e` and returns `(e', ⊢ e = e')`), produces another</span>\n<span class=\"sd\">conversion that combines them with transitivity, treating failures</span>\n<span class=\"sd\">as reflexivity conversions. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">trans_conv</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">t₁</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">t₂</span> <span class=\"n\">e₁</span><span class=\"o\">,</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mk_eq_trans</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">p₁</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">t₂</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 256703835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633680800
    },
    {
        "content": "<p>If nowhere else fits, I guess <code>tactic/basic.lean</code>?</p>",
        "id": 256703903,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633680842
    },
    {
        "content": "<p>That's just a long list of imports.</p>",
        "id": 256704746,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633681313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Can we soup up <code>by_contra' h : t</code>, so that <code>t</code> is equal to <code>\\not goal</code> modulo <code>push_neg</code>?</p>",
        "id": 256704852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633681361
    },
    {
        "content": "<p>In other words, <code>t</code> doesn't have to be equal to the result of <code>push_neg(\\not goal)</code>. But <code>push_neg(t)</code> should be.</p>",
        "id": 256704945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633681408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Does this look right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">by_contra'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\":\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">texpr</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">applyc</span> <span class=\"bp\">``</span><span class=\"n\">classical.by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">h₁</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">t'</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">pr'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">push_neg.normalize_negations</span> <span class=\"n\">t'</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">refl_conv</span> <span class=\"n\">t'</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"o\">()</span> <span class=\"bp\">&lt;$</span> <span class=\"n\">replace_hyp</span> <span class=\"n\">h₁</span> <span class=\"n\">e'</span> <span class=\"n\">pr'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">pr</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">push_neg.normalize_negations</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">refl_conv</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n    <span class=\"o\">()</span> <span class=\"bp\">&lt;$</span> <span class=\"n\">replace_hyp</span> <span class=\"n\">h₁</span> <span class=\"n\">e</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq.trans</span> <span class=\"kt\">Prop</span> <span class=\"bp\">%%</span><span class=\"n\">t'</span> <span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"bp\">%%</span><span class=\"n\">t</span> <span class=\"bp\">%%</span><span class=\"n\">pr'</span> <span class=\"o\">(</span><span class=\"n\">eq.symm</span> <span class=\"bp\">%%</span><span class=\"n\">pr</span><span class=\"o\">))</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 256708659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633683341
    },
    {
        "content": "<p>you can use <code>mk_eq_trans</code> toward the end there</p>",
        "id": 256708778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633683402
    },
    {
        "content": "<p>see <code>trans_conv</code> above for inspiration</p>",
        "id": 256708807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633683424
    },
    {
        "content": "<p>Like so?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">p_aux</span> <span class=\"bp\">←</span> <span class=\"n\">mk_eq_symm</span> <span class=\"n\">pr</span><span class=\"o\">,</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mk_eq_trans</span> <span class=\"n\">pr'</span> <span class=\"n\">p_aux</span><span class=\"o\">,</span>\n    <span class=\"o\">()</span> <span class=\"bp\">&lt;$</span> <span class=\"n\">replace_hyp</span> <span class=\"n\">h₁</span> <span class=\"n\">e</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 256709301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633683674
    },
    {
        "content": "<p>the cool kids write <code>mk_eq_symm pr &gt;&gt;= mk_eq_trans pr' &gt;&gt;= replace_hyp h₁ e</code> :D</p>",
        "id": 256709427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633683733
    },
    {
        "content": "<p>gotcha</p>",
        "id": 256709629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633683844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you agree if I move those <code>refl_conv</code> things to <code>tactic/core.lean</code>?</p>",
        "id": 256709663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633683865
    },
    {
        "content": "<p>yes, go ahead. You are right that they are misplaced</p>",
        "id": 256709693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633683883
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9619\">#9619</a></p>",
        "id": 256716614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633687652
    }
]