[
    {
        "content": "<p>Implementation of cool maths notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>b</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">a=b=c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">all_three_are_equal</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.interactive.cc</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">all_three_are_equal</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"c1\">-- Prop</span>\n</code></pre></div>\n<p>Should be fine, right? :-/</p>",
        "id": 277650220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649005849
    },
    {
        "content": "<p>(My students keep wanting to do it) (hopefully next year I'll be teaching the course in Lean 4)</p>",
        "id": 277650328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649006003
    },
    {
        "content": "<p>The next thing to do is <code>all_four_are_equal</code>, right? ;)</p>",
        "id": 277650945,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1649006711
    },
    {
        "content": "<p>Does this now break the ordinary <code>=</code>?</p>",
        "id": 277651125,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649006903
    },
    {
        "content": "<p>It's interesting how this gives you <code>hac</code> for transitivity.</p>\n<p>Something I've thought about is having Lean parse chains of binary relations <code>x1 R1 x2 R2 x3 R3 ...</code> as <code>x1 R1 x2 /\\ x2 R2 x3 /\\ x3 R3 x4 /\\ ...</code>. That doesn't give you a way to get any consequences of transitivity though.</p>",
        "id": 277652000,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649008206
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eq'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">s</span><span class=\"o\">:(</span><span class=\"n\">foldr</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"n\">eq'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 277652747,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1649009054
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"c1\">-- eq' [1, 1] : Prop</span>\n</code></pre></div>\n<p>erm...</p>",
        "id": 277655903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649013210
    },
    {
        "content": "<p>There's precedent in languages to support special constructs like this to only a particular size (like Haskell and tuple notation). Maybe this is ok:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">x1</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">x2</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">x3</span> <span class=\"o\">:=</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"bp\">∧</span> <span class=\"n\">x2</span> <span class=\"bp\">=</span> <span class=\"n\">x3</span>\n<span class=\"kd\">notation</span> <span class=\"n\">x1</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">x2</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">x3</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">x4</span> <span class=\"o\">:=</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"bp\">∧</span> <span class=\"n\">x2</span> <span class=\"bp\">=</span> <span class=\"n\">x3</span> <span class=\"bp\">=</span> <span class=\"n\">x4</span>\n<span class=\"kd\">notation</span> <span class=\"n\">x1</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">x2</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">x3</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">x4</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">x5</span> <span class=\"o\">:=</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"bp\">∧</span> <span class=\"n\">x2</span> <span class=\"bp\">=</span> <span class=\"n\">x3</span> <span class=\"bp\">=</span> <span class=\"n\">x4</span> <span class=\"bp\">=</span> <span class=\"n\">x5</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- prints as</span>\n  <span class=\"c1\">-- h: x = y ∧ y = z</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.1.trans</span> <span class=\"n\">h.2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><strong>Edit:</strong> This doesn't work for more than two equalities</p>",
        "id": 277656314,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649013759
    },
    {
        "content": "<p><del>Using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list\">docs#list</a>.forall₂ would reduce better</del></p>",
        "id": 277656318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649013768
    },
    {
        "content": "<p>(bad linkifier, <a href=\"https://leanprover-community.github.io/mathlib_docs/data/list/defs.html#list.forall%E2%82%82\">https://leanprover-community.github.io/mathlib_docs/data/list/defs.html#list.forall%E2%82%82</a>)</p>",
        "id": 277656352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649013812
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 277656366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649013835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/chaining.20equalities/near/277655903\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"c1\">-- eq' [1, 1] : Prop</span>\n</code></pre></div>\n<p>erm...</p>\n</blockquote>\n<p>That's easily fixable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eq'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">y</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">s</span><span class=\"o\">:(</span><span class=\"n\">foldr</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"n\">eq'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>      <span class=\"c1\">-- 1 = 1 : Prop</span>\n<span class=\"k\">#check</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>  <span class=\"c1\">-- eq' [1, 1, 1] : Prop</span>\n</code></pre></div>",
        "id": 277656771,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1649014299
    },
    {
        "content": "<p>I guess the question then is how to display <code>eq' [1, 1, 1]</code> as <code>1 = 1 = 1</code> in pp. I'm not sure.</p>",
        "id": 277657024,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1649014585
    },
    {
        "content": "<p>Here's the version that reduces nicely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eq'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list.foldr</span> <span class=\"o\">(</span><span class=\"bp\">∧</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq'</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">))</span>  <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">((</span><span class=\"bp\">=</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">s</span><span class=\"o\">:(</span><span class=\"n\">foldr</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"n\">eq'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n<span class=\"c1\">-- w = x ∧ w = y ∧ w = z ∧ x = y ∧ x = z ∧ y = z</span>\n</code></pre></div>",
        "id": 277657754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649015632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113488-general/topic/chaining.20equalities/near/277657024\">said</a>:</p>\n<blockquote>\n<p>I guess the question then is how to display <code>eq' [1, 1, 1]</code> as <code>1 = 1 = 1</code> in pp. I'm not sure.</p>\n</blockquote>\n<p>If you remove <code>import tactic</code> then pp does the right thing</p>",
        "id": 277657864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649015745
    },
    {
        "content": "<p>In fact, <code>import data.sym.basic</code> is what breaks the pretty printing</p>",
        "id": 277658048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649015989
    },
    {
        "content": "<p><code>notation x ` = ` y ` = ` s:(foldr:50 ` = ` (h t, list.cons h t) []) := eq' (list.cons x $ list.cons y $ s)</code> fixes it, you have to disambiguate the <code>::</code></p>",
        "id": 277658179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649016088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span>, your definition is probably better than mine simply because it matches how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.tfae\">docs#list.tfae</a> is implemented (either that, or we should change <code>tfae</code>)</p>",
        "id": 277658335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649016300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/chaining.20equalities/near/277657754\">said</a>:</p>\n<blockquote>\n<p>Here's the version that reduces nicely:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eq'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list.foldr</span> <span class=\"o\">(</span><span class=\"bp\">∧</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq'</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">))</span>  <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">((</span><span class=\"bp\">=</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">s</span><span class=\"o\">:(</span><span class=\"n\">foldr</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"n\">eq'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n<span class=\"c1\">-- w = x ∧ w = y ∧ w = z ∧ x = y ∧ x = z ∧ y = z</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Surely \"nicely\" := \"just need w=x, x=y, y=z\"?</p>",
        "id": 277658354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649016339
    },
    {
        "content": "<p>What's nice for production tends to be less nice for consumption</p>",
        "id": 277658416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649016414
    },
    {
        "content": "<p>Probably you want some more recursion magic to convert what you describe into the long version</p>",
        "id": 277658426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649016442
    },
    {
        "content": "<p>I guess the version you suggest is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eq'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list.foldr</span> <span class=\"o\">(</span><span class=\"bp\">∧</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(untested)</p>",
        "id": 277658533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649016574
    },
    {
        "content": "<p>Do you not simply want <code>list.chain' (=)</code>?</p>",
        "id": 277658773,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649016858
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.chain'/src\">src#list.chain'</a></p>",
        "id": 277658858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649017006
    },
    {
        "content": "<p>That's not defeq to <code>and</code></p>",
        "id": 277658861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649017021
    },
    {
        "content": "<p>Which may or may not matter</p>",
        "id": 277658864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649017027
    },
    {
        "content": "<p>Here is a proof that our definitions are equivalent.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Proof</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eq₁</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eq₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list.foldr</span> <span class=\"o\">(</span><span class=\"bp\">∧</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq₂</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">((</span><span class=\"bp\">=</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">z</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_eq_cons</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eq₁</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">eq₁</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">])</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">])</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foldr_true</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.foldr</span> <span class=\"n\">and</span> <span class=\"n\">true</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span> <span class=\"n\">rw</span> <span class=\"n\">list.foldr</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">P</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h.1</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ih.mp</span> <span class=\"n\">h.2</span> <span class=\"n\">P</span> <span class=\"n\">h₁</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ih.mpr</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"n\">P</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span> <span class=\"o\">}},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list_mem_cons_dup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.mem_cons_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_cons_dup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">eq₁</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">eq₁</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq₁</span><span class=\"o\">,</span> <span class=\"n\">list_mem_cons_dup</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foldr_true_z</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">list.foldr</span> <span class=\"n\">and</span> <span class=\"n\">P</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">induction'</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">h.2</span> <span class=\"o\">}}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">eq₁</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">list.foldr</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">eq₁</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq₁</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.map_cons</span><span class=\"o\">,</span> <span class=\"n\">list.foldr_cons</span><span class=\"o\">],</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">hd</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span> <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">eq_of_eq_cons</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">eq_of_eq_cons</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:=</span> <span class=\"n\">ih.mp</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">h₂</span> <span class=\"n\">trivial</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">h₁</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">foldr_true</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"n\">P</span> <span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">list.mem_map</span> <span class=\"n\">at</span> <span class=\"n\">hP</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">hP</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">],</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">hd</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">hd</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">rw</span> <span class=\"n\">eq_cons_dup</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ih.mpr</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">foldr_true_z</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">eq_of_eq_cons</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">h₁</span> <span class=\"n\">trivial</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">h₂</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq₁_eq₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eq₁</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">eq₂</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq₁</span><span class=\"o\">,</span> <span class=\"n\">eq₂</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq₁</span><span class=\"o\">,</span> <span class=\"n\">eq₂</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq₁</span><span class=\"o\">,</span> <span class=\"n\">eq₂</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.symm</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq₂</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">eq_aux</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 277661628,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1649020773
    }
]