[
    {
        "content": "<p>An example just came up on another thread where some missing parentheses garbled a statement. I was hoping to be able to run <code>slim_check</code> on it, but couldn't.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">slim_check</span>\n</code></pre></div>",
        "id": 212631724,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602113017
    },
    {
        "content": "<p>First, a little bug report: when this fails, it suggests running </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">testable</span> <span class=\"o\">(</span><span class=\"n\">slim_check.named_binder</span> <span class=\"s2\">\"f\"</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n     <span class=\"n\">slim_check.named_binder</span> <span class=\"s2\">\"g\"</span>\n       <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"n\">g</span> <span class=\"n\">k</span><span class=\"o\">))))</span>\n</code></pre></div>\n\n<p>to see which instances are missing, but we get <code>unknown identifier testable</code>.</p>",
        "id": 212631821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602113069
    },
    {
        "content": "<p>I can see that with the recent PR about <code>sampleable</code>, we at least get off the ground here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">sample</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n\n<p>produces lots of good candidate functions.</p>",
        "id": 212631877,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602113120
    },
    {
        "content": "<p>That's true, you need <code>open slim_check</code>. Sorry</p>",
        "id": 212631879,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602113122
    },
    {
        "content": "<p>An existential is difficult to test because there's no witness that shows that it's false</p>",
        "id": 212631968,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602113192
    },
    {
        "content": "<p>ah, of course!</p>",
        "id": 212632004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602113234
    },
    {
        "content": "<p>How about we just replace <code>testable</code> with <code>slim_check.testable</code> in the suggestion text?</p>",
        "id": 212632030,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602113264
    },
    {
        "content": "<p>If it ranged over <code>fin n</code> even if you quantify over all <code>n</code> that should be better</p>",
        "id": 212632037,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602113272
    },
    {
        "content": "<p>I think that's a good idea</p>",
        "id": 212632088,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602113287
    },
    {
        "content": "<p>Your todo list or mine? :-)</p>",
        "id": 212632115,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602113326
    },
    {
        "content": "<p>How about whoever gets there first?</p>",
        "id": 212632234,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602113408
    },
    {
        "content": "<p>Simon won the race: <a href=\"https://github.com/leanprover-community/mathlib/issues/4520\">#4520</a> (now on the queue)</p>",
        "id": 212644649,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602128690
    },
    {
        "content": "<p>That was one swift review!</p>",
        "id": 212645259,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602129761
    }
]