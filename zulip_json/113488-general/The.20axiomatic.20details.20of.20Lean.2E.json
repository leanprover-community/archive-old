[
    {
        "content": "<p>Does anyone have any suggestions for how I might go about studying the axiomatic details of Lean? I'm aware of the main.pdf at <a href=\"https://github.com/digama0/lean-type-theory/releases\" target=\"_blank\" title=\"https://github.com/digama0/lean-type-theory/releases\">https://github.com/digama0/lean-type-theory/releases</a> but.. what is the large arrangement of weird looking symbols in section 2 supposed to mean? Also, the paper says that type checking in Lean is undecidable. Does this mean that Lean might not be able to check some proofs?</p>",
        "id": 177054982,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1569936652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is the author of that pdf. He also happens to be superhuman, so he'll probably be right over... :)</p>",
        "id": 177055383,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569936928
    },
    {
        "content": "<blockquote>\n<p>what is the large arrangement of weird looking symbols in section 2 supposed to mean?</p>\n</blockquote>\n<p>You will have to be a bit more specific, there are a large number of symbols in section 2. Do you mean the first displayed formula in section 2.1 (after \"following grammar:\")? That is <a href=\"https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form\">Backus[-Naur|normal] form</a></p>",
        "id": 177063503,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569941993
    },
    {
        "content": "<p>Many of the other displayed formulas are typing/inference rules: if all the conditions above the line hold, then the condition below the line holds.</p>",
        "id": 177064001,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569942262
    },
    {
        "content": "<blockquote>\n<p>Also, the paper says that type checking in Lean is undecidable. Does this mean that Lean might not be able to check some proofs?</p>\n</blockquote>\n<p>There are indeed proofs in the type theory that are not accepted by the Lean kernel. However, you should note that:</p>\n<ul>\n<li>You can always give a bit more information in your proof to help the type-checker along, so that it can verify your proof</li>\n<li>This is incredibly rare. I have never encountered this myself, and I don't know of any case in mathlib where we have to give this extra information to Lean (but maybe it has happened once or twice).</li>\n</ul>",
        "id": 177064218,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569942413
    },
    {
        "content": "<p>Is this about things like the pathological example of non-transitivity of definitional equality in the reference manual? Yeah, I have never seen anything like this happening \"in real life\". Leo is good ;-)</p>",
        "id": 177066794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569944018
    },
    {
        "content": "<p>I think it happens quite a lot with <code>acc.rec</code>. I also think this is more or less the only place it comes up in practice.</p>",
        "id": 177069140,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1569945388
    },
    {
        "content": "<p>The main place it shows up in practice is that definitions by well founded recursion should result in definitional equalities in principle, but in practice you usually only get a propositional equality</p>",
        "id": 177091442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569959713
    }
]