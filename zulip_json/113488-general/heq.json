[
    {
        "content": "<p>Suppose that I have <code>f : fin k -&gt; alpha</code> and <code>g : fin n -&gt; alpha</code>, and I know <code>f == g</code>. Can I deduce <code>k = n</code>?</p>",
        "id": 193497377,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586460073
    },
    {
        "content": "<p>I think only if <code>alpha</code> is finite and has cardinality at least 2. You know the types are equal, but types with the same cardinality are not provably unequal.</p>",
        "id": 193498020,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586460387
    },
    {
        "content": "<p>If nonempty types are equal, then they must have a pair of elements that are <code>heq</code>.</p>",
        "id": 193498303,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586460504
    },
    {
        "content": "<p>It's <code>fin k</code> and <code>fin n</code>, so their cardinalities are the same only if <code>k = n</code>.</p>",
        "id": 193498501,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586460599
    },
    {
        "content": "<p>Yes, if <code>alpha</code> is finite I can do it by cardinality arguments. I guess that if <code>alpha</code> is infinite then this does not follow from Lean's axioms, but I might be wrong on this.</p>",
        "id": 193499104,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586460902
    },
    {
        "content": "<p>Ah, it's <code>fin k → α</code>, not <code>fin k</code>.</p>",
        "id": 193499182,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586460960
    },
    {
        "content": "<p>I should read more carefully.</p>",
        "id": 193499257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586460995
    },
    {
        "content": "<p>And think before typing.</p>",
        "id": 193499305,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586461046
    },
    {
        "content": "<p>You're a mathematician so if you have <code>f == g</code> then you already went wrong somewhere earlier, right?</p>",
        "id": 193499794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586461313
    },
    {
        "content": "<p>No, it's when building an equiv between some objects, you start from a function <code>fin k -&gt; alpha</code>, then you apply <code>to_fun</code>, then <code>inv_fun</code>, and in the end you get a function <code>fin n -&gt; alpha</code>, and you need to prove that it is the same function as the one you started with. You get into <code>==</code> quickly with this, but it's not really bad, you can prove that <code>k = n</code> and then do <code>induction</code> on the equality and you are back on track. If I could have deduced <code>k = n</code> from <code>f == g</code>, this would have saved me a few lines, but I can prove it directly in my context.</p>",
        "id": 193501832,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586462415
    },
    {
        "content": "<p>I was in this situation with quotient groups at some point in the perfectoid project and just proved some stupid lemmas, like e.g. I defined a map from G/N to G/K if K and N were normal subgroups and N=K(!)</p>",
        "id": 193501966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586462494
    }
]