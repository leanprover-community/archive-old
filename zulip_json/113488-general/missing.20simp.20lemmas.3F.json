[
    {
        "content": "<p>Shouldn't these be simp lemmas?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">is_ring_hom</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_add</span> <span class=\"n\">f</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n     <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">map_neg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_add</span> <span class=\"n\">f</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_zero</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">map_sub</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_add</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">map_neg</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 158016353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549875914
    },
    {
        "content": "<p>won't work</p>",
        "id": 158016372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549875955
    },
    {
        "content": "<p>If <code>ring_hom</code> becomes a type then these can be simp lemmas</p>",
        "id": 158016440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549875991
    },
    {
        "content": "<p>Too bad...</p>",
        "id": 158016580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549876195
    },
    {
        "content": "<p>You could make them typeclasses ;-)</p>",
        "id": 158017216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549876919
    },
    {
        "content": "<p>huh? it's already a typeclass</p>",
        "id": 158017438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549877173
    },
    {
        "content": "<p>Why wouldn't this work? Can <code>simp</code> not match a type class when looking up lemmas?</p>",
        "id": 158044312,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1549903220
    },
    {
        "content": "<p>I mean <code>map_zero_class</code> etc :-) Then type class inference could do it, right?</p>",
        "id": 158044524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549903397
    },
    {
        "content": "<p>It can't match a rule where the left-hand side is the application of a variable function. Or so I've gathered.</p>",
        "id": 158044875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549903663
    },
    {
        "content": "<p>Here, <code>f</code></p>",
        "id": 158044887,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549903672
    }
]