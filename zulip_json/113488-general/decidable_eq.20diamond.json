[
    {
        "content": "<p>I think I've just uncovered a diamond between <code>nat.decidable_eq</code> and <code>decidable_eq_of_decidable_le</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.decidable_eq</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">decidable_eq_of_decidable_le</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">--fails</span>\n</code></pre></div>",
        "id": 253462767,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631729841
    },
    {
        "content": "<p>oof, I can't imagine this has been around for years and nobody got bitten by this before.</p>",
        "id": 253463409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631730109
    },
    {
        "content": "<p>Is it ever really sensible to use <code>decidable_eq_of_decidable_le</code>? What would happen if we just deleted it?</p>",
        "id": 253464743,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631730659
    },
    {
        "content": "<p>By which I mean make it a non-<code>instance</code></p>",
        "id": 253464800,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631730678
    },
    {
        "content": "<p>Well, I would need to give <code>decidable_eq α</code> in many lemmas, I assume.</p>",
        "id": 253464857,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631730701
    },
    {
        "content": "<p>Right, I thought that was currently understood to be good practice anyways</p>",
        "id": 253465007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631730745
    },
    {
        "content": "<p>I started writing a linter to require explicit <code>decidable</code> arguments everywhere, but it ran into lots of gray areas where it wasn't clear what the right thing to do was. There's a PR open somewhere.</p>",
        "id": 253465860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631731109
    },
    {
        "content": "<p>Why is <code>decidable_eq</code> not a subsingleton, by the way?</p>",
        "id": 253465871,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631731117
    },
    {
        "content": "<p>It is</p>",
        "id": 253465878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631731123
    },
    {
        "content": "<p>But that's not relevant to typeclass search</p>",
        "id": 253465892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631731130
    },
    {
        "content": "<p>Ah, so <code>refl</code> doesn't eliminate subsingletons?</p>",
        "id": 253465939,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631731152
    },
    {
        "content": "<p><code>refl</code> is about definitional equality.</p>",
        "id": 253466104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631731216
    },
    {
        "content": "<p>This is why the information about how to compute a thing should not be contained in the definition of the thing.</p>",
        "id": 253466128,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631731227
    },
    {
        "content": "<p>I agree this is THE annoying thing about <code>finset</code>.</p>",
        "id": 253466291,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631731313
    },
    {
        "content": "<p>This diamond is actually pretty annoying for me... It prevents my lemmas newly generalized from ℕ to any locally finite order to apply.</p>",
        "id": 253479351,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631736526
    },
    {
        "content": "<p>Can I make <code>decidable_eq_of_decidable_le</code> locally not an instance?</p>",
        "id": 253479430,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631736556
    },
    {
        "content": "<p>Yeah, I think you can <code>local attribute [-instance]</code> it</p>",
        "id": 253481000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631737137
    },
    {
        "content": "<p>I guess the motivation is that the <code>decidable_eq</code> instance should be able to match any <code>decidable_eq</code> instance typeclass inference comes up with?</p>",
        "id": 253481850,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631737516
    },
    {
        "content": "<p>There's a similar diamond between <code>decidable_lt_of_decidable_le</code> and <code>linear_order.decidable_lt</code>. <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span></p>",
        "id": 253537026,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631775136
    },
    {
        "content": "<p>How do you get terms with <code>decidable_*_of_decidable_le</code>?</p>",
        "id": 253657867,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631829744
    },
    {
        "content": "<p>Possibly you should reformulate some of the lemmas you add and/or use.</p>",
        "id": 253657897,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631829764
    },
    {
        "content": "<p>E.g., if you have <code>if h : a = b then ... else ...</code> in the <em>statement</em> of a lemma, then you should assume <code>[decidable (a = b)]</code>, not <code>[decidable (≤)]</code>.</p>",
        "id": 253657973,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631829812
    },
    {
        "content": "<p>It happens because I need to assume <code>[decidable_rel (≤)]</code> to filter out the greatest/least element of Icc, like so <code>(finset_Icc a b).filter (λ x, ¬b ≤ x)</code>.</p>",
        "id": 253696287,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631859913
    },
    {
        "content": "<p>Can you provide an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 253723853,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631876104
    },
    {
        "content": "<p>For this filter I recommend to assume <code>∀ x, decidable (¬b ≤ x)</code>.</p>",
        "id": 253724029,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631876191
    },
    {
        "content": "<p>Or use <code>filter (λ x, x &lt; b)</code> and assume <code>[decidable_rel (&lt;)]</code>.</p>",
        "id": 253724091,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631876235
    },
    {
        "content": "<p>Actually, everything works fine now that I've done <code>local attribute [-instance] decidable_eq_of_decidable_le decidable_lt_of_decidable_le</code></p>",
        "id": 253736365,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631882940
    },
    {
        "content": "<p>If you want to have a look, this is in <code>data.finset.intervals</code> on the <a href=\"https://github.com/leanprover-community/mathlib/tree/localfinorder\">branch#localfinorder</a></p>",
        "id": 253736512,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631883008
    },
    {
        "content": "<p>and the corresponding PR is <a href=\"https://github.com/leanprover-community/mathlib/issues/7987\">#7987</a></p>",
        "id": 253736682,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631883114
    },
    {
        "content": "<p>I assume one thing that could bite us is that it will have derived <code>∀ a b, decidable (¬a ≤ b)</code> from <code>decidable_rel (≤)</code> and this will be repercuted in the kind of <code>decidable</code> instance you can plug in the lemmas.</p>",
        "id": 253737904,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631883632
    },
    {
        "content": "<p>I'm going to fix this.</p>",
        "id": 253741336,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631885158
    },
    {
        "content": "<p>(refactoring <code>order/locally_finite</code> to deal with diamonds now)</p>",
        "id": 253741447,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631885198
    },
    {
        "content": "<p>This is great! Thank you!</p>",
        "id": 253742058,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631885493
    },
    {
        "content": "<p>If you have time, <a href=\"https://github.com/leanprover-community/mathlib/tree/antitone\">branch#antitone</a> is to my eyes even more useful to fix because the PR is ready apart from that.</p>",
        "id": 253742263,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631885583
    },
    {
        "content": "<p>I suggest that we drop all default/tactic-default stuff from <code>locally_finite_order</code>, and add a custom constructor <code>of_finset_Icc</code> instead. If someone wants to override only some <code>finset_Ixx</code>'s, they can use <code>{ finset_Ioc := _, mem_finset_Ioc := _, .. of_finset_Icc}</code>.</p>",
        "id": 253748289,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631887985
    },
    {
        "content": "<p>This will simplify the design a lot. And we mention the <code>of_finset_Icc</code> constructor in the class docstring.</p>",
        "id": 253748401,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631888037
    },
    {
        "content": "<p>Done. I fixed <code>locally_finite_order</code>, but you may get new failures later.</p>",
        "id": 253752685,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631889702
    },
    {
        "content": "<p>And now you don't need to assume any decidability to speak about <code>locally_finite_order</code>s.</p>",
        "id": 253752800,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631889731
    },
    {
        "content": "<p>BTW, have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.ord_connected\">docs#set.ord_connected</a> You can assume it as a typeclass instead of a custom <code>hp</code> at the end of <code>locally_finite_order.lean</code>.</p>",
        "id": 253752835,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631889743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/decidable_eq.20diamond/near/253748289\">said</a>:</p>\n<blockquote>\n<p>I suggest that we drop all default/tactic-default stuff from <code>locally_finite_order</code>, and add a custom constructor <code>of_finset_Icc</code> instead. If someone wants to override only some <code>finset_Ixx</code>'s, they can use <code>{ finset_Ioc := _, mem_finset_Ioc := _, .. of_finset_Icc}</code>.</p>\n</blockquote>\n<p>I quite liked my fancy default constructors <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> but I guess you're right as no decidability is needed anymore.</p>",
        "id": 253758355,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631891828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/decidable_eq.20diamond/near/253752835\">said</a>:</p>\n<blockquote>\n<p>BTW, have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.ord_connected\">docs#set.ord_connected</a> You can assume it as a typeclass instead of a custom <code>hp</code> at the end of <code>locally_finite_order.lean</code>.</p>\n</blockquote>\n<p>Oh yes I know about that but it's still deeprooted in my brain that <code>set.ord_connected</code> = predicate.</p>",
        "id": 253758456,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631891879
    },
    {
        "content": "<p>Thanks a lot again!</p>",
        "id": 253759132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631892181
    }
]