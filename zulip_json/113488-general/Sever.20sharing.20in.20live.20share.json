[
    {
        "content": "<p>Is it possible to tweak the Lean extension in VS Code to enable server sharing (so as to view the goals)? <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> told me that for server sharing to work, the server needs to be TCP port or URL and Lean is not either of those.</p>",
        "id": 202019373,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593116273
    },
    {
        "content": "<p>As far as I know, Lean isn't either of those</p>",
        "id": 202019429,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593116288
    },
    {
        "content": "<p>Plus if this works then it might make collaboration easier for LFCM</p>",
        "id": 202019449,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593116303
    },
    {
        "content": "<p>There is no obstruction, but it needs work.</p>",
        "id": 202019486,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593116323
    },
    {
        "content": "<p>Basically you need to be very nice to Bryan or Gabriel.</p>",
        "id": 202019550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593116359
    },
    {
        "content": "<p>Oh, I'll by anyone 3 good Belgian beers (or something with the same value, if you don't like beers or Belgians...) if they can make this work smoothly before LFTCM!</p>",
        "id": 202048911,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593141732
    },
    {
        "content": "<p>You're talking about working with <a href=\"https://visualstudio.microsoft.com/services/live-share/\">https://visualstudio.microsoft.com/services/live-share/</a>?</p>",
        "id": 202052379,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593146553
    },
    {
        "content": "<p>Yep, at least that's whay I was thinking of</p>",
        "id": 202053790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593148754
    },
    {
        "content": "<p>Yes.</p>",
        "id": 202054826,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593150287
    },
    {
        "content": "<p>Yes. Currently it's extremely inconvenient. I will be working with summer students this summer and would donate three more. Currently what you can do is that one person uses Lean and the others can also type but they can't see the errors or goal state because if they run a local server then the imports fail</p>",
        "id": 202055154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593150731
    },
    {
        "content": "<p>Wow, I'm playing around with it now (with my laptop on macOS and my desktop on Windows) and it works much better than I thought it would. Some observations:</p>\n<ul>\n<li>There's a useless \"leanpkg.toml\" message when the extension on the guest's side opens. </li>\n<li>The cursor of the guest doesn't track the host's automatically, but as a guest, if I put my cursor inside a tactic the goal window (sometimes) works and I can see the goal locally, <strong>as long as the file doesn't rely on any imports.</strong></li>\n<li>Underlines and hovers seem to work only if the host has the same file in view. </li>\n<li>To get files with imports working properly, I think at a minimum the host will need to set up <a href=\"https://docs.microsoft.com/en-us/visualstudio/liveshare/reference/security#controlling-file-access-and-visibility\">a <code>.vsls.json</code> file</a>. I tried using the following, which at least gets <code>_target/deps/mathlib</code> to show up on the guest side:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span>\n    <span class=\"nt\">&quot;$schema&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://json.schemastore.org/vsls&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;gitignore&quot;</span><span class=\"p\">:</span><span class=\"s2\">&quot;none&quot;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&quot;excludeFiles&quot;</span><span class=\"p\">:[</span>\n        <span class=\"s2\">&quot;!*.olean&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;*!leanpkg.path&quot;</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">&quot;hideFiles&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<ul>\n<li>I wonder if we need to take a look at <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/extension.ts#L25\">the code that hides the oleans from view</a>. Maybe if we show them, we can get live share to transfer them to the guests' computers?</li>\n<li>The goal window seems to work very inconsistently. As a guest, the goal view is often just stuck in a blank state, but if I start editing the file then that causes stuff to appear. (Unfortunately, it still complains about not being able to find the imports in the path).</li>\n<li>Here's a weird state I got in:<br>\n<a href=\"/user_uploads/3121/ZU9EY5XHziAgJTmCBXGu-3QO/Screenshot-2020-06-26-02.19.59.png\">Screenshot-2020-06-26-02.19.59.png</a> <div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZU9EY5XHziAgJTmCBXGu-3QO/Screenshot-2020-06-26-02.19.59.png\" title=\"Screenshot-2020-06-26-02.19.59.png\"><img src=\"/user_uploads/3121/ZU9EY5XHziAgJTmCBXGu-3QO/Screenshot-2020-06-26-02.19.59.png\"></a></div></li>\n</ul>\n<p>I typed in <code>library_search</code> on the guest's side and got two suggestions. Neither of them work, but I get different errors. Also note the problems panel showing two different open versions of <code>blah.lean</code>, which I don't understand.</p>\n<p>I think I need to read up more on how live share actually works in order to work more on this, but the only info I could find about getting extensions to work with live share was <a href=\"https://docs.microsoft.com/en-us/visualstudio/liveshare/reference/extensions#known-issues\">this list of random issues and suggestions</a>, which doesn't give enough of an explanation for me.</p>",
        "id": 202056350,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593152632
    },
    {
        "content": "<p>I think there's hope to get things working, but most likely only after the current info view refactor (with widgets) settles down.</p>\n<p><a href=\"https://github.com/leanprover/vscode-lean/issues/191\">leanprover/vscode-lean#191</a></p>",
        "id": 202056418,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593152706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Is there a particular brand of Belgian beer that you are fond of?</p>",
        "id": 202056494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593152791
    },
    {
        "content": "<p>Because it seems that I should start preparing...</p>",
        "id": 202056506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593152808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> data.real.basic does not import library_search, I don't think!</p>",
        "id": 202058103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593154883
    },
    {
        "content": "<p>Are you sure? This seems to work in a recent mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n\n\n<p>It also seems to work in the <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20data.real.basic%0A%0Aexample%20%3A%20%E2%84%95%20%3A%3D%20by%20library_search\">web editor</a>.</p>",
        "id": 202059592,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593156298
    },
    {
        "content": "<p>Oh! Sorry, I must have made a slip.</p>",
        "id": 202067731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593162711
    }
]