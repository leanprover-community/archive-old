[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/13379\">#13379</a> I (think I) need a dense normed linear ordered field. What do people think of either</p>\n<ul>\n<li>defining <code>linear_ordered_nondiscrete_normed_field</code></li>\n<li>adding <code>non_trivial : ∃ (x : α), 1 &lt; ∥x∥</code> to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_linear_ordered_field\">docs#normed_linear_ordered_field</a>. As the only two instances are <code>ℚ</code> and <code>ℝ</code>, this wouldn't change anything (<del>but it would indeed exclude possible candidates, like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{-1, 0, 1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span></del>)</li>\n</ul>",
        "id": 279087387,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650034484
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span></p>",
        "id": 279087389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650034489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Normed.20linear.20ordered.20field/near/279087387\">said</a>:</p>\n<blockquote>\n<ul>\n<li>defining <code>linear_ordered_nondiscrete_normed_field</code></li>\n</ul>\n</blockquote>\n<p>Is this the same as <a href=\"https://en.wikipedia.org/wiki/Ordered_field\">https://en.wikipedia.org/wiki/Ordered_field</a>?</p>",
        "id": 279087748,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650034708
    },
    {
        "content": "<p>which I think is already <code>linear_ordered_field</code> right?</p>",
        "id": 279087846,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650034800
    },
    {
        "content": "<p>Are you saying that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_linear_ordered_field.to_normed_field\">docs#normed_linear_ordered_field.to_normed_field</a> should instead be <code>normed_linear_ordered_field.to_nondiscrete_normed_field</code>?</p>",
        "id": 279088045,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650034858
    },
    {
        "content": "<p>Oh I think I'm confused about this norm business. In my world if you are regarding K-vector spaces as having a \"norm\" (K being an ordered field) then the \"norm\" should take values in K not the reals.</p>",
        "id": 279088305,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650035025
    },
    {
        "content": "<p>(e.g. the norm on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> itself is given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>a</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>a</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||a|| = |a|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣∣</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">∣∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">∣</span></span></span></span> and it's automatically \"nondiscrete\" in whatever sense you like, because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is dense as an ordered set)</p>",
        "id": 279088842,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650035324
    },
    {
        "content": "<p>Does ìt have to be dense? Do we have that?</p>",
        "id": 279088885,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650035360
    },
    {
        "content": "<p>Oh, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_field.to_densely_ordered\">docs#linear_ordered_field.to_densely_ordered</a></p>",
        "id": 279088904,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650035378
    },
    {
        "content": "<p>I agree an ordered field with a norm isn't necessarily <code>nondiscrete</code> in the sense of mathlib</p>",
        "id": 279089008,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650035432
    },
    {
        "content": "<p>I'm still not sure this answers my original enquiry. The question is for what <code>something</code> this holds true</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.pointwise</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">something</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_dist_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_dist_lt_lt</span> <span class=\"o\">(</span><span class=\"n\">hδ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">∧</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 279089214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650035560
    },
    {
        "content": "<p>Probably a natural condition relating the ordering and the norm is that the norm should be convex (over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>)</p>",
        "id": 279089250,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650035587
    },
    {
        "content": "<p>How does this type check? Isn't <code>b : 𝕜</code> while <code>dist x z : real</code></p>",
        "id": 279089370,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650035667
    },
    {
        "content": "<p>Yeah we need a coercion from <code>𝕜</code> to <code>ℝ</code>. This is why I only stated it for <code>ℝ</code> so far, but left a comment saying it could be stated for <code>ℚ</code>.</p>",
        "id": 279089410,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650035696
    },
    {
        "content": "<p>So far we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_on_norm\">docs#convex_on_norm</a>. But those results are hard to get in general because you usually can't relate <code>a + b = 1</code> and <code>∥a∥ + ∥b∥ = 1</code>. I believe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_algebra\">docs#normed_algebra</a> does help here.</p>",
        "id": 279089459,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650035739
    },
    {
        "content": "<p>Aside from looking unnatural, is there a reason you couldn't just use <code>∥a∥</code>, <code>∥b∥</code> in place of <code>a</code>, <code>b</code> (this would also solve the coercion problem)? This is probably not the right choice, but I'm not really clear what your end goal is.</p>",
        "id": 279089783,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650035957
    },
    {
        "content": "<p>Probably looking through <a href=\"https://github.com/leanprover-community/mathlib/pull/13379\">#13379</a> will be the fastest way to understand my motivation.</p>",
        "id": 279089889,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650036019
    },
    {
        "content": "<p>For clarity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_dist_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">a</span><span class=\"bp\">∥</span> <span class=\"bp\">+</span> <span class=\"bp\">∥</span><span class=\"n\">b</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">b</span><span class=\"bp\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">a</span><span class=\"bp\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 279089900,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650036025
    },
    {
        "content": "<p>My general goal is showing that balls of radius <code>r</code> contain elements of distance arbitrarily close to <code>r</code> in all directions. This implies in particular that two balls are disjoint iff the sum of their radii is less than the distance between their center (<a href=\"https://github.com/leanprover-community/mathlib/pull/13379\">#13379</a>), that thickening by <code>δ</code> then thickening by <code>ε</code> is the same as thickening by <code>δ + ε</code> (<a href=\"https://github.com/leanprover-community/mathlib/pull/13380\">#13380</a>), that adding a ball of radius <code>δ</code> to a ball of radius <code>ε</code> gives a ball of radius <code>δ + ε</code> (<a href=\"https://github.com/leanprover-community/mathlib/pull/13381\">#13381</a>)...</p>",
        "id": 279090177,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650036198
    },
    {
        "content": "<p>In the form with real-valued norms I think this only makes sense for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> a subfield of the reals, with the induced norm--is that what you had in mind?</p>",
        "id": 279090372,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650036320
    },
    {
        "content": "<p>And how do I state that? <code>normed_algebra ℝ 𝕜</code>?</p>",
        "id": 279090808,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650036590
    },
    {
        "content": "<p>Well they are also the archimedean ordered fields but I'm not sure that helps directly.</p>",
        "id": 279091005,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650036709
    }
]