[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span>  could you comment on <a href=\"https://github.com/leanprover/lean4/pull/130/\" title=\"https://github.com/leanprover/lean4/pull/130/\">https://github.com/leanprover/lean4/pull/130/</a>? I thought the Lean 4 TC system was avoiding every loop problem.</p>",
        "id": 192499907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585731687
    },
    {
        "content": "<p>It might not be a loop problem. We do that in mathlib to put the fast fail typeclasses before the ones with many instances</p>",
        "id": 192500393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585732021
    },
    {
        "content": "<p>The name of the branch is <code>dselsam:fix-tc-loop</code>...</p>",
        "id": 192500957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585732385
    },
    {
        "content": "<p>And even with Mario's explanation, I kind of hoped that all the tc subtleties without any mathematical content would be gone in Lean 4.</p>",
        "id": 192501023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585732440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I have been using the old frontend with the old typeclass resolution procedure. The new frontend is still missing a few necessary features, e.g. an equation compiler. The fix is only relevant for using the old procedure.</p>",
        "id": 192527793,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1585748097
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 192527954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585748176
    }
]