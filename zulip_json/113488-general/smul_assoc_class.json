[
    {
        "content": "<p>What do people think of renaming <code>is_scalar_tower</code> to <code>smul_assoc_class</code>? That would make it fit with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_comm_class\">docs#smul_comm_class</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vadd_assoc_class\">docs#vadd_assoc_class</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vadd_comm_class\">docs#vadd_comm_class</a>.</p>",
        "id": 293191747,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660337822
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/leanprover-community/mathlib/pull/16032\">#16032</a> as a demonstration.</p>",
        "id": 293191791,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660337841
    },
    {
        "content": "<p>I don't mind either way as long as there are enough pointers from the concept of \"tower\" to this class. So in the module docs of <code>src/group_theory/group_action/defs.lean</code> and in the definition of <code>smul_assoc_class</code> itself.</p>",
        "id": 293670764,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660636828
    },
    {
        "content": "<p>I know we've already started down this road, but I'm not a huge fan of these <code>_class</code> suffices on algebraic typeclasses; they don't help the reader at all, and make everything longer. (I'm happy with them on <code>monoid_hom_class</code> where the suffix means \"I am a polymorphic version of the corresponding structure\")</p>",
        "id": 293674039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660638485
    },
    {
        "content": "<p>Can we think of other names that avoid these suffices?</p>",
        "id": 293674071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660638503
    },
    {
        "content": "<p>Even <code>smul_associates</code> to me seems marginally more readable than <code>smul_assoc_class</code></p>",
        "id": 293674112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660638530
    },
    {
        "content": "<p>(other offenders: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_zero_class\">docs#mul_zero_class</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_one_class\">docs#mul_one_class</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/covariant_class\">docs#covariant_class</a>)</p>",
        "id": 293674310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660638628
    },
    {
        "content": "<p>I don't like the <code>_class</code> name very much either, but it is nice how they connect with their contents: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vadd_assoc_class\">docs#vadd_assoc_class</a> just wraps <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vadd_assoc\">docs#vadd_assoc</a> in a class.</p>",
        "id": 293674350,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660638653
    },
    {
        "content": "<p>By that argument we should rename <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semigroup\">docs#semigroup</a> to <code>mul_assoc_class</code>!</p>",
        "id": 293674402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660638684
    },
    {
        "content": "<p>If there's a well-known existing name then that seems to be obviously better. I'm just saying, as long as we're making up names, we might as well acknowledge the advantages of making up names systematically.</p>",
        "id": 293674764,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660638876
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/initial_mono_class\">docs#initial_mono_class</a> is another example (I made it and I don't really like its name), it's also I think the only such example in category theory. It's a slightly weird example because this property is true in abelian categories and in toposes (and useful in both), but true for different reasons in each</p>",
        "id": 293737845,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1660662886
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/tree/splitting_field-diamond\">branch#splitting_field-diamond</a> I want to introduce a new class extending <code>has_smul</code> with the hypothesis <code> (smul_zero : ∀ (a : α), a • (0 : β) = 0)</code>. In the theme of this thread, anyone have a better name than <code>smul_zero_class</code>?</p>",
        "id": 294025447,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660807816
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_with_zero\">docs#smul_with_zero</a> already exists, which in addition contains <code>(zero_smul : ∀ (b : β), 0 • b = 0)</code>.</p>",
        "id": 294025573,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660807907
    },
    {
        "content": "<p>Oooh, that would unlock <a href=\"https://github.com/leanprover-community/mathlib/pull/12880\">#12880</a>.</p>",
        "id": 294030264,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660810542
    },
    {
        "content": "<p>smul_with_zero_right?</p>",
        "id": 294031115,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1660810944
    },
    {
        "content": "<p>I like <code>smul_zero_class</code>, personally.</p>",
        "id": 294031264,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660811018
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16123\">#16123</a></p>",
        "id": 294039174,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660814458
    }
]