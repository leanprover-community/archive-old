[
    {
        "content": "<p>I'm excited to announce a new mathlib tactic, <code>polyrith</code>! <a href=\"https://github.com/leanprover-community/mathlib/pull/14878\">#14878</a> landed last night so this is now live in mathlib.</p>\n<p>Sort of like <code>linarith</code>, <code>polyrith</code> works when you have a bunch of equality hypotheses that imply an equality goal, but you don't want to go through annoying calculation steps to explain why.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.polyrith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">14</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">polyrith</span>\n</code></pre></div>\n<p>Unlike <code>linarith</code>, though, <code>polyrith</code> is a self-replacing tactic! When it finds the combination of hypotheses that prove the goal, it will suggest a call to <code>linear_combination</code>. So in this sense, it's kind of like <code>library_search</code>, in that it should never appear in finished code.</p>\n<p>This is for a special reason. <code>polyrith</code> works by calling Sage, a computer algebra tool, via its web API. So it requires an active internet connection (support for local Sage coming later), and we don't want to leave these external calls in library code. </p>\n<p>I think <code>polyrith</code> is unique among mathlib tactics in calling external processes. You may need to install the Python package <code>requests</code> if you don't have it already. And, while it's been tested on a few different systems, there may be some unforeseen engineering issues, since this is uncharted territory for mathlib. Try it out and let us know if you run into issues! </p>\n<p>Many thanks to <span class=\"user-mention\" data-user-id=\"452188\">@Dhruv Bhatia</span> for implementing this! Also to <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> for substantial improvements during review, and to <span class=\"user-mention\" data-user-id=\"458879\">@Abby Goldberg</span> for contributing <code>linear_combination</code>, which <code>polyrith</code> depends on.</p>",
        "id": 289312457,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1657627023
    },
    {
        "content": "<p>Cool! Does this work over any field, or just fields like \\Q or \\R?</p>",
        "id": 289328959,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1657634871
    },
    {
        "content": "<p>Is this the Gröbner basis tactic I've heard about?</p>",
        "id": 289329627,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1657635149
    },
    {
        "content": "<p>(judging by the \"groebner\" tag, I presume the answer is yes)</p>",
        "id": 289330211,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1657635382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/polyrith.3A.20a.20new.20tactic/near/289328959\">said</a>:</p>\n<blockquote>\n<p>Cool! Does this work over any field, or just fields like \\Q or \\R?</p>\n</blockquote>\n<p>Depends on what exactly you mean by \"works\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> it will pretend that whatever field you're working over is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>. It uses <code>ring</code> for normalization and we don't have a comparable way to normalize expressions in more specific fields. With some tweaks it could report back coefficients and leave it to you to normalize yourself, but this isn't implemented yet.</p>",
        "id": 289332456,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1657636238
    },
    {
        "content": "<p>And yes, it uses Singular's Gröbner basis computation (via Sage) to find the coefficients.</p>",
        "id": 289332515,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1657636271
    },
    {
        "content": "<p>Let me mention that <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> has been working on a Gröbner basis implementation within Lean itself.</p>",
        "id": 289333024,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657636454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/polyrith.3A.20a.20new.20tactic/near/289333024\">said</a>:</p>\n<blockquote>\n<p>Let me mention that <span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> has been working on a Gröbner basis implementation within Lean itself.</p>\n</blockquote>\n<p>Cool, it would be very interesting to try to hook that up to <code>polyrith</code> when it's ready!</p>",
        "id": 289333156,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1657636507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/polyrith.3A.20a.20new.20tactic/near/289333024\">said</a>:</p>\n<blockquote>\n<p>Let me mention that <span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> has been working on a Gröbner basis implementation within Lean itself.</p>\n</blockquote>\n<p>(I have an implementation in <em>Lean 4</em> <a href=\"https://github.com/shingtaklam1324/iva\">here</a> which just has a basic implementation of Buchberger's algorithm. I've had a look at doing it using mathlib's <code>mv_polynomial</code>s, but nothing so far.)</p>",
        "id": 289333740,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1657636703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/polyrith.3A.20a.20new.20tactic/near/289312457\">said</a>:</p>\n<blockquote>\n<p>I'm excited to announce a new mathlib tactic, <code>polyrith</code>! <a href=\"https://github.com/leanprover-community/mathlib/pull/14878\">#14878</a> landed last night so this is now live in mathlib.</p>\n<p>Sort of like <code>linarith</code>, <code>polyrith</code> works when you have a bunch of equality hypotheses that imply an equality goal, but you don't want to go through annoying calculation steps to explain why.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.polyrith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">14</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">polyrith</span>\n</code></pre></div>\n<p>Unlike <code>linarith</code>, though, <code>polyrith</code> is a self-replacing tactic! When it finds the combination of hypotheses that prove the goal, it will suggest a call to <code>linear_combination</code>. So in this sense, it's kind of like <code>library_search</code>, in that it should never appear in finished code.</p>\n<p>This is for a special reason. <code>polyrith</code> works by calling Sage, a computer algebra tool, via its web API. So it requires an active internet connection (support for local Sage coming later), and we don't want to leave these external calls in library code. </p>\n<p>I think <code>polyrith</code> is unique among mathlib tactics in calling external processes. You may need to install the Python package <code>requests</code> if you don't have it already. And, while it's been tested on a few different systems, there may be some unforeseen engineering issues, since this is uncharted territory for mathlib. Try it out and let us know if you run into issues! </p>\n<p>Many thanks to <span class=\"user-mention silent\" data-user-id=\"452188\">Dhruv Bhatia</span> for implementing this! Also to <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> for substantial improvements during review, and to <span class=\"user-mention silent\" data-user-id=\"458879\">Abby Goldberg</span> for contributing <code>linear_combination</code>, which <code>polyrith</code> depends on.</p>\n</blockquote>\n<p>This is extremely cool.</p>",
        "id": 289343258,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657640372
    },
    {
        "content": "<p>I tried to use this to prove Pascal's Hexagon theorem from the 100 theorems list, but got a server error <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.polyrith</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"n\">y1</span> <span class=\"n\">x2</span> <span class=\"n\">y2</span> <span class=\"n\">x3</span> <span class=\"n\">y3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x2</span> <span class=\"bp\">-</span> <span class=\"n\">x1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y3</span> <span class=\"bp\">-</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x3</span> <span class=\"bp\">-</span> <span class=\"n\">x1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y2</span> <span class=\"bp\">-</span> <span class=\"n\">y1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pascal_hexagon</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">x1</span> <span class=\"n\">y1</span> <span class=\"n\">x2</span> <span class=\"n\">y2</span> <span class=\"n\">x3</span> <span class=\"n\">y3</span> <span class=\"n\">x4</span> <span class=\"n\">y4</span> <span class=\"n\">x5</span> <span class=\"n\">y5</span> <span class=\"n\">x6</span> <span class=\"n\">y6</span> <span class=\"n\">x7</span> <span class=\"n\">y7</span> <span class=\"n\">x8</span> <span class=\"n\">y8</span> <span class=\"n\">x9</span> <span class=\"n\">y9</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x1</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x2</span> <span class=\"bp\">*</span> <span class=\"n\">y2</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y2</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">y2</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x3</span> <span class=\"bp\">*</span> <span class=\"n\">y3</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y3</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">y3</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x4</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x4</span> <span class=\"bp\">*</span> <span class=\"n\">y4</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y4</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x4</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">y4</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x5</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x5</span> <span class=\"bp\">*</span> <span class=\"n\">y5</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y5</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x5</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">y5</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x6</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x6</span> <span class=\"bp\">*</span> <span class=\"n\">y6</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y6</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x6</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">y6</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h12</span> <span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">x1</span> <span class=\"n\">y1</span> <span class=\"n\">x2</span> <span class=\"n\">y2</span> <span class=\"n\">x7</span> <span class=\"n\">y7</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h23</span> <span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">x2</span> <span class=\"n\">y2</span> <span class=\"n\">x3</span> <span class=\"n\">y3</span> <span class=\"n\">x8</span> <span class=\"n\">y8</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h34</span> <span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">x3</span> <span class=\"n\">y3</span> <span class=\"n\">x4</span> <span class=\"n\">y4</span> <span class=\"n\">x9</span> <span class=\"n\">y9</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h45</span> <span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">x4</span> <span class=\"n\">y4</span> <span class=\"n\">x5</span> <span class=\"n\">y5</span> <span class=\"n\">x7</span> <span class=\"n\">y7</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h56</span> <span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">x5</span> <span class=\"n\">y5</span> <span class=\"n\">x6</span> <span class=\"n\">y6</span> <span class=\"n\">x8</span> <span class=\"n\">y8</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h61</span> <span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">x6</span> <span class=\"n\">y6</span> <span class=\"n\">x1</span> <span class=\"n\">y1</span> <span class=\"n\">x9</span> <span class=\"n\">y9</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">collinear</span> <span class=\"n\">x7</span> <span class=\"n\">y7</span> <span class=\"n\">x8</span> <span class=\"n\">y8</span> <span class=\"n\">x9</span> <span class=\"n\">y9</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">collinear</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">polyrith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 289375960,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1657655100
    },
    {
        "content": "<p>From the end of the <code>Lean: Server Error</code> output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Traceback</span> <span class=\"o\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"o\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/Users/boltonbailey/Desktop/mathlibcontribution/mathlib/src/../scripts/polyrith_sage.py\"</span><span class=\"o\">,</span> <span class=\"n\">line</span> <span class=\"mi\">84</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"bp\">&lt;</span><span class=\"n\">module</span><span class=\"bp\">&gt;</span>\n    <span class=\"n\">main</span><span class=\"o\">()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/Users/boltonbailey/Desktop/mathlibcontribution/mathlib/src/../scripts/polyrith_sage.py\"</span><span class=\"o\">,</span> <span class=\"n\">line</span> <span class=\"mi\">77</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">main</span>\n    <span class=\"n\">output</span> <span class=\"bp\">=</span> <span class=\"n\">dict</span><span class=\"o\">(</span><span class=\"n\">success</span><span class=\"bp\">=</span><span class=\"n\">True</span><span class=\"o\">,</span> <span class=\"n\">data</span><span class=\"bp\">=</span><span class=\"n\">evaluate_in_sage</span><span class=\"o\">(</span><span class=\"n\">final_query</span><span class=\"o\">))</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/Users/boltonbailey/Desktop/mathlibcontribution/mathlib/src/../scripts/polyrith_sage.py\"</span><span class=\"o\">,</span> <span class=\"n\">line</span> <span class=\"mi\">51</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">evaluate_in_sage</span>\n    <span class=\"n\">raise</span> <span class=\"n\">Exception</span><span class=\"o\">(</span><span class=\"n\">response</span><span class=\"o\">)</span>\n<span class=\"n\">Exception</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">success'</span><span class=\"o\">:</span> <span class=\"n\">False</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 289378684,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1657656393
    },
    {
        "content": "<p>Noted, we definitely need to work on error reporting. This problem seems to be too big (or false) for Sage, at least through its web API. This is the Sage code generated for your example:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">PolynomialRing</span><span class=\"p\">(</span><span class=\"n\">QQ</span><span class=\"p\">,</span> <span class=\"s1\">'var'</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">var0</span><span class=\"p\">,</span> <span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"n\">var2</span><span class=\"p\">,</span> <span class=\"n\">var3</span><span class=\"p\">,</span> <span class=\"n\">var4</span><span class=\"p\">,</span> <span class=\"n\">var5</span><span class=\"p\">,</span> <span class=\"n\">var6</span><span class=\"p\">,</span> <span class=\"n\">var7</span><span class=\"p\">,</span> <span class=\"n\">var8</span><span class=\"p\">,</span> <span class=\"n\">var9</span><span class=\"p\">,</span> <span class=\"n\">var10</span><span class=\"p\">,</span> <span class=\"n\">var11</span><span class=\"p\">,</span> <span class=\"n\">var12</span><span class=\"p\">,</span> <span class=\"n\">var13</span><span class=\"p\">,</span> <span class=\"n\">var14</span><span class=\"p\">,</span> <span class=\"n\">var15</span><span class=\"p\">,</span> <span class=\"n\">var16</span><span class=\"p\">,</span> <span class=\"n\">var17</span><span class=\"p\">,</span> <span class=\"n\">var18</span><span class=\"p\">,</span> <span class=\"n\">var19</span><span class=\"p\">,</span> <span class=\"n\">var20</span><span class=\"p\">,</span> <span class=\"n\">var21</span><span class=\"p\">,</span> <span class=\"n\">var22</span><span class=\"p\">,</span> <span class=\"n\">var23</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">gens</span><span class=\"p\">()</span>\n<span class=\"n\">gens</span> <span class=\"o\">=</span> <span class=\"p\">[(((((((</span><span class=\"n\">var6</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var7</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">var8</span> <span class=\"o\">*</span> <span class=\"n\">var7</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">var9</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var10</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var9</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var11</span> <span class=\"o\">*</span> <span class=\"n\">var7</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var12</span> <span class=\"o\">*</span> <span class=\"n\">var9</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">var13</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(((((((</span><span class=\"n\">var6</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var14</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">var8</span> <span class=\"o\">*</span> <span class=\"n\">var14</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">var15</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var10</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var15</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var11</span> <span class=\"o\">*</span> <span class=\"n\">var14</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var12</span> <span class=\"o\">*</span> <span class=\"n\">var15</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">var13</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(((((((</span><span class=\"n\">var6</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var16</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">var8</span> <span class=\"o\">*</span> <span class=\"n\">var16</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">var17</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var10</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var17</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var11</span> <span class=\"o\">*</span> <span class=\"n\">var16</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var12</span> <span class=\"o\">*</span> <span class=\"n\">var17</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">var13</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(((((((</span><span class=\"n\">var6</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var18</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">var8</span> <span class=\"o\">*</span> <span class=\"n\">var18</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">var19</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var10</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var19</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var11</span> <span class=\"o\">*</span> <span class=\"n\">var18</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var12</span> <span class=\"o\">*</span> <span class=\"n\">var19</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">var13</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(((((((</span><span class=\"n\">var6</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var20</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">var8</span> <span class=\"o\">*</span> <span class=\"n\">var20</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">var21</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var10</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var21</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var11</span> <span class=\"o\">*</span> <span class=\"n\">var20</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var12</span> <span class=\"o\">*</span> <span class=\"n\">var21</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">var13</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(((((((</span><span class=\"n\">var6</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var22</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">var8</span> <span class=\"o\">*</span> <span class=\"n\">var22</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">var23</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var10</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var23</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var11</span> <span class=\"o\">*</span> <span class=\"n\">var22</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var12</span> <span class=\"o\">*</span> <span class=\"n\">var23</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">var13</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(((</span><span class=\"n\">var14</span> <span class=\"o\">-</span> <span class=\"n\">var7</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var3</span> <span class=\"o\">-</span> <span class=\"n\">var9</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var1</span> <span class=\"o\">-</span> <span class=\"n\">var7</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var15</span> <span class=\"o\">-</span> <span class=\"n\">var9</span><span class=\"p\">))),</span> <span class=\"p\">(((</span><span class=\"n\">var16</span> <span class=\"o\">-</span> <span class=\"n\">var14</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var5</span> <span class=\"o\">-</span> <span class=\"n\">var15</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var0</span> <span class=\"o\">-</span> <span class=\"n\">var14</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var17</span> <span class=\"o\">-</span> <span class=\"n\">var15</span><span class=\"p\">))),</span> <span class=\"p\">(((</span><span class=\"n\">var18</span> <span class=\"o\">-</span> <span class=\"n\">var16</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var2</span> <span class=\"o\">-</span> <span class=\"n\">var17</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var4</span> <span class=\"o\">-</span> <span class=\"n\">var16</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var19</span> <span class=\"o\">-</span> <span class=\"n\">var17</span><span class=\"p\">))),</span> <span class=\"p\">(((</span><span class=\"n\">var20</span> <span class=\"o\">-</span> <span class=\"n\">var18</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var3</span> <span class=\"o\">-</span> <span class=\"n\">var19</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var1</span> <span class=\"o\">-</span> <span class=\"n\">var18</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var21</span> <span class=\"o\">-</span> <span class=\"n\">var19</span><span class=\"p\">))),</span> <span class=\"p\">(((</span><span class=\"n\">var22</span> <span class=\"o\">-</span> <span class=\"n\">var20</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var5</span> <span class=\"o\">-</span> <span class=\"n\">var21</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var0</span> <span class=\"o\">-</span> <span class=\"n\">var20</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var23</span> <span class=\"o\">-</span> <span class=\"n\">var21</span><span class=\"p\">))),</span> <span class=\"p\">(((</span><span class=\"n\">var7</span> <span class=\"o\">-</span> <span class=\"n\">var22</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var2</span> <span class=\"o\">-</span> <span class=\"n\">var23</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var4</span> <span class=\"o\">-</span> <span class=\"n\">var22</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var9</span> <span class=\"o\">-</span> <span class=\"n\">var23</span><span class=\"p\">)))]</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"p\">((((</span><span class=\"n\">var0</span> <span class=\"o\">-</span> <span class=\"n\">var1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var2</span> <span class=\"o\">-</span> <span class=\"n\">var3</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var4</span> <span class=\"o\">-</span> <span class=\"n\">var1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var5</span> <span class=\"o\">-</span> <span class=\"n\">var3</span><span class=\"p\">))))</span>\n<span class=\"n\">I</span> <span class=\"o\">=</span> <span class=\"n\">ideal</span><span class=\"p\">(</span><span class=\"n\">gens</span><span class=\"p\">)</span>\n<span class=\"n\">coeffs</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">lift</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">([</span><span class=\"n\">polynomial_to_string</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">coeffs</span><span class=\"p\">]))</span>\n</code></pre></div>\n<p>and pasting that into <a href=\"https://sagecell.sagemath.org/\">https://sagecell.sagemath.org/</a> times out.</p>",
        "id": 289379251,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1657656720
    },
    {
        "content": "<p>For people not at ICERM, you can have a look at <a href=\"https://hrmacbeth.github.io/computations_in_lean/index.html\">https://hrmacbeth.github.io/computations_in_lean/index.html</a></p>",
        "id": 289379427,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657656816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113488-general/topic/polyrith.3A.20a.20new.20tactic/near/289379427\">said</a>:</p>\n<blockquote>\n<p>For people not at ICERM, you can have a look at <a href=\"https://hrmacbeth.github.io/computations_in_lean/index.html\">https://hrmacbeth.github.io/computations_in_lean/index.html</a></p>\n</blockquote>\n<p>Highly recommended reading! Thanks <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> (and <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> for proofreading <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 289380405,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1657657362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/polyrith.3A.20a.20new.20tactic/near/289379251\">said</a>:</p>\n<blockquote>\n<p>Noted, we definitely need to work on error reporting. This problem seems to be too big (or false) for Sage, at least through its web API. This is the Sage code generated for your example:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">PolynomialRing</span><span class=\"p\">(</span><span class=\"n\">QQ</span><span class=\"p\">,</span> <span class=\"s1\">'var'</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">var0</span><span class=\"p\">,</span> <span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"n\">var2</span><span class=\"p\">,</span> <span class=\"n\">var3</span><span class=\"p\">,</span> <span class=\"n\">var4</span><span class=\"p\">,</span> <span class=\"n\">var5</span><span class=\"p\">,</span> <span class=\"n\">var6</span><span class=\"p\">,</span> <span class=\"n\">var7</span><span class=\"p\">,</span> <span class=\"n\">var8</span><span class=\"p\">,</span> <span class=\"n\">var9</span><span class=\"p\">,</span> <span class=\"n\">var10</span><span class=\"p\">,</span> <span class=\"n\">var11</span><span class=\"p\">,</span> <span class=\"n\">var12</span><span class=\"p\">,</span> <span class=\"n\">var13</span><span class=\"p\">,</span> <span class=\"n\">var14</span><span class=\"p\">,</span> <span class=\"n\">var15</span><span class=\"p\">,</span> <span class=\"n\">var16</span><span class=\"p\">,</span> <span class=\"n\">var17</span><span class=\"p\">,</span> <span class=\"n\">var18</span><span class=\"p\">,</span> <span class=\"n\">var19</span><span class=\"p\">,</span> <span class=\"n\">var20</span><span class=\"p\">,</span> <span class=\"n\">var21</span><span class=\"p\">,</span> <span class=\"n\">var22</span><span class=\"p\">,</span> <span class=\"n\">var23</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">gens</span><span class=\"p\">()</span>\n<span class=\"n\">gens</span> <span class=\"o\">=</span> <span class=\"p\">[(((((((</span><span class=\"n\">var6</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var7</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">var8</span> <span class=\"o\">*</span> <span class=\"n\">var7</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">var9</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var10</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var9</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var11</span> <span class=\"o\">*</span> <span class=\"n\">var7</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var12</span> <span class=\"o\">*</span> <span class=\"n\">var9</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">var13</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(((((((</span><span class=\"n\">var6</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var14</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">var8</span> <span class=\"o\">*</span> <span class=\"n\">var14</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">var15</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var10</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var15</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var11</span> <span class=\"o\">*</span> <span class=\"n\">var14</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var12</span> <span class=\"o\">*</span> <span class=\"n\">var15</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">var13</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(((((((</span><span class=\"n\">var6</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var16</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">var8</span> <span class=\"o\">*</span> <span class=\"n\">var16</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">var17</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var10</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var17</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var11</span> <span class=\"o\">*</span> <span class=\"n\">var16</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var12</span> <span class=\"o\">*</span> <span class=\"n\">var17</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">var13</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(((((((</span><span class=\"n\">var6</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var18</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">var8</span> <span class=\"o\">*</span> <span class=\"n\">var18</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">var19</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var10</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var19</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var11</span> <span class=\"o\">*</span> <span class=\"n\">var18</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var12</span> <span class=\"o\">*</span> <span class=\"n\">var19</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">var13</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(((((((</span><span class=\"n\">var6</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var20</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">var8</span> <span class=\"o\">*</span> <span class=\"n\">var20</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">var21</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var10</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var21</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var11</span> <span class=\"o\">*</span> <span class=\"n\">var20</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var12</span> <span class=\"o\">*</span> <span class=\"n\">var21</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">var13</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(((((((</span><span class=\"n\">var6</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var22</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">var8</span> <span class=\"o\">*</span> <span class=\"n\">var22</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">var23</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var10</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var23</span> <span class=\"o\">^</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var11</span> <span class=\"o\">*</span> <span class=\"n\">var22</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">var12</span> <span class=\"o\">*</span> <span class=\"n\">var23</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">var13</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(((</span><span class=\"n\">var14</span> <span class=\"o\">-</span> <span class=\"n\">var7</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var3</span> <span class=\"o\">-</span> <span class=\"n\">var9</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var1</span> <span class=\"o\">-</span> <span class=\"n\">var7</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var15</span> <span class=\"o\">-</span> <span class=\"n\">var9</span><span class=\"p\">))),</span> <span class=\"p\">(((</span><span class=\"n\">var16</span> <span class=\"o\">-</span> <span class=\"n\">var14</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var5</span> <span class=\"o\">-</span> <span class=\"n\">var15</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var0</span> <span class=\"o\">-</span> <span class=\"n\">var14</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var17</span> <span class=\"o\">-</span> <span class=\"n\">var15</span><span class=\"p\">))),</span> <span class=\"p\">(((</span><span class=\"n\">var18</span> <span class=\"o\">-</span> <span class=\"n\">var16</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var2</span> <span class=\"o\">-</span> <span class=\"n\">var17</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var4</span> <span class=\"o\">-</span> <span class=\"n\">var16</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var19</span> <span class=\"o\">-</span> <span class=\"n\">var17</span><span class=\"p\">))),</span> <span class=\"p\">(((</span><span class=\"n\">var20</span> <span class=\"o\">-</span> <span class=\"n\">var18</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var3</span> <span class=\"o\">-</span> <span class=\"n\">var19</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var1</span> <span class=\"o\">-</span> <span class=\"n\">var18</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var21</span> <span class=\"o\">-</span> <span class=\"n\">var19</span><span class=\"p\">))),</span> <span class=\"p\">(((</span><span class=\"n\">var22</span> <span class=\"o\">-</span> <span class=\"n\">var20</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var5</span> <span class=\"o\">-</span> <span class=\"n\">var21</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var0</span> <span class=\"o\">-</span> <span class=\"n\">var20</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var23</span> <span class=\"o\">-</span> <span class=\"n\">var21</span><span class=\"p\">))),</span> <span class=\"p\">(((</span><span class=\"n\">var7</span> <span class=\"o\">-</span> <span class=\"n\">var22</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var2</span> <span class=\"o\">-</span> <span class=\"n\">var23</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var4</span> <span class=\"o\">-</span> <span class=\"n\">var22</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var9</span> <span class=\"o\">-</span> <span class=\"n\">var23</span><span class=\"p\">)))]</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"p\">((((</span><span class=\"n\">var0</span> <span class=\"o\">-</span> <span class=\"n\">var1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var2</span> <span class=\"o\">-</span> <span class=\"n\">var3</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">var4</span> <span class=\"o\">-</span> <span class=\"n\">var1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">var5</span> <span class=\"o\">-</span> <span class=\"n\">var3</span><span class=\"p\">))))</span>\n<span class=\"n\">I</span> <span class=\"o\">=</span> <span class=\"n\">ideal</span><span class=\"p\">(</span><span class=\"n\">gens</span><span class=\"p\">)</span>\n<span class=\"n\">coeffs</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">lift</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">([</span><span class=\"n\">polynomial_to_string</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">coeffs</span><span class=\"p\">]))</span>\n</code></pre></div>\n<p>and pasting that into <a href=\"https://sagecell.sagemath.org/\">https://sagecell.sagemath.org/</a> times out.</p>\n</blockquote>\n<p>Note: I extracted this using <code>set_option trace.polyrith true</code>. Also on the to-do list is better tracing support.</p>",
        "id": 289380481,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1657657405
    },
    {
        "content": "<blockquote>\n<p>or false</p>\n</blockquote>\n<p>Indeed the issue might be that I need to rule out points being on top of one another</p>",
        "id": 289381395,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1657657890
    },
    {
        "content": "<p>Where did the <code>quaternion_simps</code> come from in that tutorial?</p>",
        "id": 289390046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657662439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/polyrith.3A.20a.20new.20tactic/near/289390046\">said</a>:</p>\n<blockquote>\n<p>Where did the <code>quaternion_simps</code> come from in that tutorial?</p>\n</blockquote>\n<p><a href=\"https://github.com/hrmacbeth/computations_in_lean/blob/main/src/02_Using_Polyrith/03_double_cover.lean#L15\">https://github.com/hrmacbeth/computations_in_lean/blob/main/src/02_Using_Polyrith/03_double_cover.lean#L15</a></p>",
        "id": 289400617,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1657670211
    },
    {
        "content": "<p>Huh, I guess github search failed me</p>",
        "id": 289417372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657690389
    },
    {
        "content": "<p>We can get <code>polyrith</code> to work with negations of equalities as well if we add the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_inv_one_of_ne</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub_ne_zero_of_ne</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Then, we just need to preprocess all the parameters by applying this lemma if the argument is of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo mathvariant=\"normal\">≠</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\neq b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a = b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>. Is anyone working on this?</p>\n<p>If we add this, we can do some more cool things. Here is the fact that at most one line of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">ax + b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> goes through two distinct points proved automatically using polyrith (after unfolding definitions):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">line.contains</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">line</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">p.snd</span> <span class=\"bp\">=</span> <span class=\"n\">l.a</span> <span class=\"bp\">*</span> <span class=\"n\">p.fst</span> <span class=\"bp\">+</span> <span class=\"n\">l.b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x₀</span> <span class=\"n\">x₁</span> <span class=\"n\">y₀</span> <span class=\"n\">y₁</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x₀</span> <span class=\"bp\">≠</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.subsingleton</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"bp\">|</span> <span class=\"n\">l.contains</span> <span class=\"o\">(</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">y₀</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">l.contains</span> <span class=\"o\">(</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">y₁</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">H₁'</span><span class=\"o\">,</span> <span class=\"n\">H₂'</span><span class=\"o\">⟩,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">line.contains</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">polyrith</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_one_of_ne</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(Crucially, this relies on the fact that the x-values are different).</p>\n<p>We could also extend it to proving goals of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo mathvariant=\"normal\">≠</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\neq b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> by introducing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a = b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> as a hypothesis and trying to prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1 = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> (the same strategy works for proving <code>false</code>, although you'd have to guess what the field/ring is).</p>",
        "id": 292239520,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1659770811
    },
    {
        "content": "<p>Nice! <code>polyrith</code> is one of those tactics which is more useful than you might expect! (modulo Heather's talk where she explained loads of uses so I should up my expectations!). I've used it several times with undergraduates in the past couple of weeks</p>",
        "id": 292243620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659776926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"437861\">@Praneeth Kolichala</span> Cool! I have a couple WIP pull requests for <code>polyrith</code> and <code>linear_combination</code>. <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> and I were discussing syntax for \"contraposed\" linear combinations, with one disequality hypothesis and a disequality goal. I'm overcommitted and travelilng right now so don't expect much movement from me in the next week or two. But if you have ideas for how to integrate this into <code>polyrith</code> and want to work on it, definitely go ahead!</p>",
        "id": 292309567,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1659864392
    },
    {
        "content": "<p>Hi,</p>\n<p>I already wrote this in a github issue, but I am not sure if that is the right place to comment it, so just in case, i will include it here too:</p>\n<p>to cover the case where your goal is not really in the ideal generated by your hypothesis, but in its radical, you can either use Sage's <code>saturation</code>method (which will give you the needed exponent), or write a proof for this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">X</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and ask Sage  for a lift of 1 to the ideal generated by your hypothesis and c*X - 1 (being c what you want to prove, and X a new variable). Then you can use Sage's answer to write the needed hypothesis (as a linear combination) and apply it.</p>\n<p>I have a (probably suboptimal) proof of that result if you need it.</p>",
        "id": 314969408,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1670614917
    },
    {
        "content": "<p>The second approach only needs one call to Sage, but the resulting proof might be not so clear.</p>",
        "id": 314969666,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1670615016
    },
    {
        "content": "<p>I'm working on polyrith now BTW. I don't really know how to implement what you suggested</p>",
        "id": 314971123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670615561
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"461731\">@Miguel Marco</span>, I think this was already implemented in the PR <a href=\"https://github.com/leanprover-community/mathlib/pull/15425\">#15425</a>, right?</p>",
        "id": 314974414,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670616800
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"461731\">@Miguel Marco</span>, I think this was already implemented in the PR <a href=\"https://github.com/leanprover-community/mathlib/pull/15425\">#15425</a>, right?</p>",
        "id": 314974448,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670616818
    },
    {
        "content": "<p>See this comment:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/15425#issuecomment-1201895845\">https://github.com/leanprover-community/mathlib/pull/15425#issuecomment-1201895845</a></p>",
        "id": 314974478,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670616832
    },
    {
        "content": "<p>It's a shame the PR hasn't been merged, we don't have many people who can review meta code.</p>",
        "id": 314974672,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670616899
    },
    {
        "content": "<p>Let me give an example.</p>\n<p>Say you want to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">4</span>  <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span>  <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span>  <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span><span class=\"o\">:</span>  <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>then you rewrite your equations as polynomials being equal to zero, and send the following code to Sage:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">R.</span><span class=\"bp\">&lt;</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">X</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"n\">QQ</span><span class=\"o\">[]</span>\n<span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">R.ideal</span><span class=\"o\">([</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">])</span>\n<span class=\"n\">R.one</span><span class=\"o\">()</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and you get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which means that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"o\">(</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>it could be easily checked with a <code>ring</code>, <code>linear_combination</code> or similar.</p>\n<p>Then you rewrite your starting hypothesis, and it should simplify to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then you apply the lemma I posted before (being <code>f=(-a*c*X + b*X - 1)</code> ) to conclude that <code>(a*c - b) = 0</code>.</p>",
        "id": 314974893,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1670616968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/polyrith.3A.20a.20new.20tactic/near/314974414\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span>, I think this was already implemented in the PR <a href=\"https://github.com/leanprover-community/mathlib/pull/15425\">#15425</a>, right?</p>\n</blockquote>\n<p>If I am understanding well the code in that PR, it checks if a specific power of the goal is in the idea. The advantage of the method I propose is that it proves that <em>some</em> power is in the ideal (and hence, it should be equal to zero modulo the hypothesis), without knowing which power.</p>",
        "id": 314975688,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1670617272
    },
    {
        "content": "<p>No, that was an earlier implementation (as described in the first message on the PR) -- as of the comment I linked to, the \"standard trick\" (which I believe is what you describe) is used.</p>",
        "id": 314975993,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670617384
    },
    {
        "content": "<p>Or, <del>perhaps indeed I'm misremembering,</del> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> can confirm whether he actually implemented it or just intended to!  Note the PR is currently blocked by <a href=\"https://github.com/leanprover-community/mathlib/pull/15428\">#15428</a> (hint to meta code reviewers ...)</p>",
        "id": 314976267,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670617476
    },
    {
        "content": "<p>Ah yes, see <a href=\"https://github.com/leanprover-community/mathlib/pull/15425#issuecomment-1201895845\">a later comment</a>:</p>\n<blockquote>\n<p>I've implemented the \"standard trick\" (see also 4.2 Prop 8 of Cox, Little, O'Shea). This is still pending docs, test updates, and <a href=\"https://github.com/leanprover-community/mathlib/pull/15428\">#15428</a> (which I think is ready to go).</p>\n</blockquote>",
        "id": 314976449,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670617560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461731\">@Miguel Marco</span> Are you able to review Lean meta code?  Maybe you can help us get <a href=\"https://github.com/leanprover-community/mathlib/pull/15428\">#15428</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/15425\">#15425</a> merged!</p>",
        "id": 314976682,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670617648
    },
    {
        "content": "<p>By the way, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, it seems like it would be a shame to lose this work of Rob's, which has been awaiting review since September (and which makes polyrith much more powerful).  Is there any chance you could incorporate it into your polyrith port?</p>",
        "id": 314977374,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670617909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/polyrith.3A.20a.20new.20tactic/near/314975993\">said</a>:</p>\n<blockquote>\n<p>No, that was an earlier implementation (as described in the first message on the PR) -- as of the comment I linked to, the \"standard trick\" (which I believe is what you describe) is used.</p>\n</blockquote>\n<p>I see. Yes, it is the same idea. Although, if you are not interested in the exponent, and just want to prove that the result must be zero, you don't need to do this part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">power</span> <span class=\"bp\">=</span> <span class=\"n\">max</span><span class=\"o\">(</span><span class=\"n\">cf.degree</span><span class=\"o\">(</span><span class=\"n\">aux</span><span class=\"o\">)</span> <span class=\"n\">for</span> <span class=\"n\">cf</span> <span class=\"k\">in</span> <span class=\"n\">coeffs</span><span class=\"o\">)</span>\n<span class=\"n\">coeffs</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">cf.subs</span><span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">power</span><span class=\"o\">)</span> <span class=\"n\">for</span> <span class=\"n\">cf</span> <span class=\"k\">in</span> <span class=\"n\">coeffs</span><span class=\"o\">[:</span><span class=\"n\">int</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)]]</span>\n</code></pre></div>\n<p>and just apply the lemma i mentioned. However, it might be a good idea to get the exponent, since it is quite straightforward to compute, and gives you a more readable proof. It was a nice exercise to prove the lemma though <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 314977645,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1670618025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/polyrith.3A.20a.20new.20tactic/near/314976682\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> Are you able to review Lean meta code?  Maybe you can help us get <a href=\"https://github.com/leanprover-community/mathlib/pull/15428\">#15428</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/15425\">#15425</a> merged!</p>\n</blockquote>\n<p>I can try to give it a look.... but have absolutely no experience with meta code. So I wouldn't trust my review, at least for the moment.</p>",
        "id": 314977800,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1670618071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/polyrith.3A.20a.20new.20tactic/near/314977374\">said</a>:</p>\n<blockquote>\n<p>By the way, <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>, it seems like it would be a shame to lose this work of Rob's, which has been awaiting review since September (and which makes polyrith much more powerful).  Is there any chance you could incorporate it into your polyrith port?</p>\n</blockquote>\n<p>Sure, but it won't make it to V1</p>",
        "id": 314977966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670618142
    },
    {
        "content": "<p>I can help with the Sage/Singular side if you want though. I would be specially interested in using a local instance instead of relying on an online service.</p>",
        "id": 314978520,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1670618394
    },
    {
        "content": "<p>Relatedly, there's another polyrith patch at <a href=\"https://github.com/leanprover-community/mathlib/pull/17142\">#17142</a></p>",
        "id": 314978651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670618442
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15428\">#15428</a> LGTM, just needs some documentation fixes. I think I missed Rob's comment that it was ready for another round of review.</p>",
        "id": 314979322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670618731
    },
    {
        "content": "<p>I can review the meta code in <a href=\"https://github.com/leanprover-community/mathlib/pull/15425\">#15425</a>, but if you have expertise in SageMath then your review would definitely be appreciated <span class=\"user-mention\" data-user-id=\"461731\">@Miguel Marco</span>!</p>",
        "id": 314979797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670618904
    },
    {
        "content": "<p>Well the initial version is up at <a href=\"https://github.com/leanprover-community/mathlib4/pull/942\">mathlib4#942</a>. Didn't know all these extensions would come out of the woodwork today</p>",
        "id": 314985390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670621194
    }
]