[
    {
        "content": "<p>There is a Lean 4 presentation by Leo &amp; Sebastian in about 90 minutes at PLDI: <a href=\"https://pldi20.sigplan.org/track/pldi-2020-sponsors?date=Thu%2018%20Jun%202020#program\">https://pldi20.sigplan.org/track/pldi-2020-sponsors?date=Thu%2018%20Jun%202020#program</a> . There is a meeting password but I will PM it to anyone who voices an interest if I can.</p>",
        "id": 201255472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592480044
    },
    {
        "content": "<p>Aarg, I have another meeting. Will it be recorded?</p>",
        "id": 201255590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592480152
    },
    {
        "content": "<p>no word yet</p>",
        "id": 201255594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592480159
    },
    {
        "content": "<p>Could <em>you</em> record it?</p>",
        "id": 201255674,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592480206
    },
    {
        "content": "<p>All the main conference presentations have been livestreamed on youtube, but these sponsored talks are only on zoom for some reason</p>",
        "id": 201255824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592480326
    },
    {
        "content": "<p>It's a big and well organized conference so I'd rather not do anything without approval here</p>",
        "id": 201255886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592480398
    },
    {
        "content": "<p>Can I have a password?</p>",
        "id": 201257587,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592481442
    },
    {
        "content": "<p>Can I have the password?</p>",
        "id": 201258828,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592482304
    },
    {
        "content": "<p>Leo and Sebastian are already here.  The password is also included on the PLDI conference website link, BTW.</p>",
        "id": 201261269,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592483795
    },
    {
        "content": "<p>If you mean the <code>pwd=...</code> in the link, I don't believe so</p>",
        "id": 201261576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592483997
    },
    {
        "content": "<p>if you try it you will get a password request from Zoom</p>",
        "id": 201261644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592484015
    },
    {
        "content": "<p>or at least I did</p>",
        "id": 201261656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592484021
    },
    {
        "content": "<p>well it worked for me somehow</p>",
        "id": 201261674,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592484030
    },
    {
        "content": "<p>I took the obvious step at that point</p>",
        "id": 201261682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592484034
    },
    {
        "content": "<p>Worked for me too</p>",
        "id": 201261699,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592484049
    },
    {
        "content": "<p>Ah, that's great then</p>",
        "id": 201261709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592484056
    },
    {
        "content": "<p>It looks like Leo will be recording it, so with any luck it will appear on youtube later</p>",
        "id": 201263718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592485203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Could you mute your mic while typing</p>",
        "id": 201264112,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592485428
    },
    {
        "content": "<p>This is the zoom link: <a href=\"https://us02web.zoom.us/j/85379682400?pwd=c3kzbTZidXk1UENMR1Y0ZlhqTXJWZz09\">https://us02web.zoom.us/j/85379682400?pwd=c3kzbTZidXk1UENMR1Y0ZlhqTXJWZz09</a></p>",
        "id": 201264902,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592485813
    },
    {
        "content": "<p>Something went wrong<br>\nThe server encountered an internal error and was unable to process your request.<br>\nError Code:3000</p>",
        "id": 201265275,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592486000
    },
    {
        "content": "<p>That link is public: from the webpage that Mario linked.</p>",
        "id": 201265459,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592486075
    },
    {
        "content": "<p>Slides: <a href=\"http://leanprover.github.io/talks/LeanPLDI.pdf\">http://leanprover.github.io/talks/LeanPLDI.pdf</a></p>",
        "id": 201266174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592486415
    },
    {
        "content": "<p>Did I hear correctly \"release by the end of the summer\"?</p>",
        "id": 201272257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592489171
    },
    {
        "content": "<p>Did he say which summer?</p>",
        "id": 201277396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592491467
    },
    {
        "content": "<p>This one.</p>",
        "id": 201277574,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592491558
    },
    {
        "content": "<p>And 99% of porting mathlib will be automatic.</p>",
        "id": 201277644,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592491582
    },
    {
        "content": "<p>Will the release include VS Code support?</p>",
        "id": 201277683,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592491614
    },
    {
        "content": "<p>But someone has to write a version of <code>simp</code> in Lean 4 that behaves exactly the same as Lean 3 simp.</p>",
        "id": 201277713,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592491630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> i don't remember that being discussed.</p>",
        "id": 201277774,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592491662
    },
    {
        "content": "<p>99% of what? Obviously not 99% of human effort by definition</p>",
        "id": 201278023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592491796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20talk.20on.20Zoom/near/201277644\">said</a>:</p>\n<blockquote>\n<p>And 99% of porting mathlib will be automatic.</p>\n</blockquote>\n<p>In some vague sense yes. The non-meta part can be dumped into a Lean 4 environment to be used, but you don't get ported source code. I don't remember anything said about automated translation.</p>",
        "id": 201278079,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592491804
    },
    {
        "content": "<p>Obviously 99% of the effort is changing mathlib to use the new NamingConvention.</p>",
        "id": 201278110,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592491821
    },
    {
        "content": "<p>wasn't something like that written for lean 4 already?</p>",
        "id": 201278172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592491839
    },
    {
        "content": "<p>for the core library</p>",
        "id": 201278185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592491843
    },
    {
        "content": "<p>Yes, which makes porting mathlib almost effortless!</p>",
        "id": 201278255,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592491866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Does the lean 4 emacs mode use any LSP extensions? What are the plans for the goal view?</p>",
        "id": 201278313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592491888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Have you seen <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>'s work on the widgets?</p>",
        "id": 201278357,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592491907
    },
    {
        "content": "<p>We want the LSP basics without extensions working first, but an extension for ITP-specifc parts like the goal view will likely be necessary, yes. I've seen a bit of talk and commits about the widgets, but from the toy examples it wasn't clear to me what the goal here is. We were planning on having inspectable and interactive error messages, but not arbitrary UI elements. But I don't think this will be part of the first release anyway.</p>",
        "id": 201280619,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1592492734
    },
    {
        "content": "<p>as the person responsible for the lean 4 server, i'll chime in.</p>\n<p>the lean 4 emacs mode currently shows only errors. <br>\ni'm still working on getting lsp and most useful features up and running, but i should have a lot more time for lean4 towards the end of the summer, so that i can tackle the goal view :)</p>\n<p>i'm aware of the widget extension.</p>",
        "id": 201280655,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1592492753
    },
    {
        "content": "<p>The endgoal of widgets is things like:</p>\n<ul>\n<li>interactively inspecting terms</li>\n<li>highlighting a variable also highlights the other instances of that variable</li>\n<li>being able to hover over subterms in the tactic state, click on them and see available rewrites for that subterm</li>\n<li>a list of tactics available for a given goal that can be activated and pushed to the sourcetext with a button</li>\n<li>custom visualisations of structures like matrices and graphs</li>\n<li>support for rendering latex expressions in the goal view</li>\n<li>interactively filtering hypotheses</li>\n</ul>\n<p>Giving Lean a UI system means that all of these become possible from within Lean without having to modify C++, Lean and javascript and push to lean-client-js, vscode-lean and lean.</p>",
        "id": 201281812,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592493190
    },
    {
        "content": "<p>some of these things should already be possible via regular LSP (once these features are implemented), while we might need to extend LSP for others. i'll definitely keep this in mind, thanks for the list!</p>",
        "id": 201282730,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1592493588
    },
    {
        "content": "<p>The point I'm trying to make is not really about specific UI features though. Allowing arbitrary, interactive UI in the output window makes for a much more compelling tool, particularly for beginners, and opens up a large space of creative uses of lean.</p>",
        "id": 201283062,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592493716
    },
    {
        "content": "<p>Is this cross editor supported though? It seems like this is just exposing vscode functionality to lean</p>",
        "id": 201283571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592493888
    },
    {
        "content": "<p>replicating this if someone wants to write a lean mode for their favorite editor seems pretty hard</p>",
        "id": 201283673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592493936
    },
    {
        "content": "<p>which kind of defeats the point of using LSP (not completely, but largely)</p>",
        "id": 201283735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592493961
    },
    {
        "content": "<p>afaik LSP doesn't support any kind of goal view ootb, so you already need to go beyond LSP to implement a good lean client. In principle you could include the widgets client code in any editor with the capability to support a web browser frame, so I admit that you would need to open a separate web-browser window for a terminal-based editor like emacs and vim. But the text-based goal view would still be there in any case.</p>",
        "id": 201286844,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592495303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20talk.20on.20Zoom/near/201283571\">said</a>:</p>\n<blockquote>\n<p>Is this cross editor supported though? It seems like this is just exposing vscode functionality to lean</p>\n</blockquote>\n<p>Yeah, that would my concern, too. I guess pushing HTML to the client would be perfect for VS Code, but as a (then former?) Emacs user I would feel a little sad. But that's the insignificant minority of users of course.</p>",
        "id": 201286936,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1592495353
    },
    {
        "content": "<p>Doesn't emacs have a web browser?</p>",
        "id": 201286997,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592495384
    },
    {
        "content": "<p>Maybe a better way to do it would be that you keep LSP, but also the lean server opens a local port that you can point your browser at to see the fancy UI stuff. So all of the widget-rendering code becomes completely independent of the editor</p>",
        "id": 201287268,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592495495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20talk.20on.20Zoom/near/201286997\">said</a>:</p>\n<blockquote>\n<p>Doesn't emacs have a web browser?</p>\n</blockquote>\n<p>Yes, but it's not exactly pretty... <a href=\"https://en.wikipedia.org/wiki/Eww_(web_browser)#/media/File:Eww_GNU_Emacs_24.4.png\">https://en.wikipedia.org/wiki/Eww_(web_browser)#/media/File:Eww_GNU_Emacs_24.4.png</a>. But maybe that's sufficient, I don't know.</p>",
        "id": 201287857,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1592495675
    },
    {
        "content": "<p>lol who names their browser \"eww\"?</p>",
        "id": 201288470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592495968
    },
    {
        "content": "<p>not exactly confidence-inspiring</p>",
        "id": 201288513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592495991
    },
    {
        "content": "<p>\"Emacs Web Wowser\"</p>",
        "id": 201288644,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592496041
    },
    {
        "content": "<p>\"So this Monday, I came up with the name of the browser while half-asleep: eww!  I don’t quite know what the second w is supposed to stand for (Emacs Web Wowser?), but now that I had a name I just had to start programming.\"</p>",
        "id": 201288695,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592496062
    },
    {
        "content": "<p>I was definitely expecting to see Sebastian test the webserver demo with an emacs web browser</p>",
        "id": 201289179,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592496289
    },
    {
        "content": "<p>I don't want to rain on the text based editor parade too much and I don't want to kick them out. But I believe that to get mass adoption of ITP by non-programmers, there needs to be a move away from representing proof state as non-interactive tiles of unicode.</p>",
        "id": 201289329,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592496342
    },
    {
        "content": "<p>It looks like emacs has a fairly extensible HTML renderer: <a href=\"https://github.com/emacs-mirror/emacs/blob/717b0341aafb9ae9b93395dba1192b12c4459f0c/lisp/net/shr.el\">https://github.com/emacs-mirror/emacs/blob/717b0341aafb9ae9b93395dba1192b12c4459f0c/lisp/net/shr.el</a>  It might be feasible to render widgets in emacs, as long as the markup is written carefully.</p>",
        "id": 201289405,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592496368
    },
    {
        "content": "<p>Ok, personally speaking I can very much see something like this being the future of ITP UIs. If it doesn't support Emacs very well, too bad for the Emacs users. So how much of this would actually have to be built into Lean 4? Would it be sufficient that plugins can customize the error/goal output and/or register custom LSP extensions?</p>",
        "id": 201294741,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1592498676
    },
    {
        "content": "<p>E.g. the Lean 4 elaborator supports embedding terms into messages. I don't think this would have to be generalized because <em>inside the elaborator</em> I don't see us having to report arbitrary widgets or anything. The bells and whistles can be added when the elaborator is done, when composing the response to the client.</p>",
        "id": 201295321,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1592498938
    },
    {
        "content": "<p>The main core thing that I needed to change for widgets was modifying the pretty printer so that it also emitted some structural information mapping subexpressions to different parts of the format string, which I am a bit worried will be quite complicated to do with Lean 4 if it's not put in early. The actual UI engine doesn't need to be in core lean.</p>",
        "id": 201295346,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592498950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20talk.20on.20Zoom/near/201295321\">said</a>:</p>\n<blockquote>\n<p>E.g. the Lean 4 elaborator supports embedding terms into messages. I don't think this would have to be generalized because <em>inside the elaborator</em> I don't see us having to report arbitrary widgets or anything. The bells and whistles can be added when the elaborator is done, when composing the response to the client.</p>\n</blockquote>\n<p>I agree with this</p>",
        "id": 201295509,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592499009
    },
    {
        "content": "<p>Without having read your code, something like this :) ? <a href=\"https://github.com/kha/lean4/blob/master/src/Lean/Delaborator.lean#L19-L21\">https://github.com/kha/lean4/blob/master/src/Lean/Delaborator.lean#L19-L21</a></p>",
        "id": 201295581,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1592499040
    },
    {
        "content": "<p>Is <code>MetaM</code> the new <code>tactic</code>?</p>",
        "id": 201295789,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592499137
    },
    {
        "content": "<p>You mean the new <code>TactiC</code>? <span aria-label=\"camel\" class=\"emoji emoji-1f42b\" role=\"img\" title=\"camel\">:camel:</span></p>",
        "id": 201295822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592499156
    },
    {
        "content": "<p>It's basically the old <code>type_context</code></p>",
        "id": 201295836,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1592499163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20talk.20on.20Zoom/near/201295581\">said</a>:</p>\n<blockquote>\n<p>Without having read your code, something like this :) ? <a href=\"https://github.com/kha/lean4/blob/master/src/Lean/Delaborator.lean#L19-L21\">https://github.com/kha/lean4/blob/master/src/Lean/Delaborator.lean#L19-L21</a></p>\n</blockquote>\n<p>This looks fab. The Delaborator is the right place to put this. The equivalent modification I made to this is that whenever the main <code>delab</code> is called, it wraps the resulting <code>Syntax</code> in something like <code>tag : expr -&gt; expr.address -&gt; Syntax -&gt; Syntax</code>. Where <code>expr.address</code> is a list of constructor recursive argument names (eg <code>[\"app_fn\", \"app_arg\", \"lam_body\"]</code>) that points to the sub expression's location wrt the original expression.</p>",
        "id": 201296599,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592499475
    },
    {
        "content": "<p>So <code>Syntax</code> would be extended to play the role of <code>tagged_format</code> here: <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/tagged_format.lean\">https://github.com/leanprover-community/lean/blob/master/library/init/meta/tagged_format.lean</a></p>",
        "id": 201296880,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592499578
    },
    {
        "content": "<p>I'm hoping that this can be adapted to get the desired result:</p>\n<blockquote>\n<p>Pretty printer options can be given not only for the whole term, but also<br>\nspecific subterms. This is used both when automatically refining pp options<br>\nuntil round-trip and when interactively selecting pp options for a subterm (both<br>\nTBD). The association of options to subterms is done by assigning a unique,<br>\nsynthetic Nat position to each subterm derived from its position in the full<br>\nterm. This position is added to the corresponding Syntax object so that<br>\nelaboration errors and interactions with the pretty printer output can be traced<br>\nback to the subterm.</p>\n</blockquote>",
        "id": 201299536,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592500837
    },
    {
        "content": "<p>I think <code>descend</code> is doing this right?</p>",
        "id": 201300048,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592501124
    },
    {
        "content": "<p>Given an <code>Expr</code> and a synthetic <code>Nat</code> position from the delaborator, you should be able to reconstruct such an argument path, yes</p>",
        "id": 201362947,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1592554538
    },
    {
        "content": "<p>I understand that you can't prove anything about an <code>unsafe</code> function. What about functions with <code>@[extern]</code>?</p>",
        "id": 201363243,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592554774
    },
    {
        "content": "<p>It's a regular Lean definition in that aspect, but what you prove about it might not be true for the runtime implementation (the one given by <code>@[extern]</code>)</p>",
        "id": 201363473,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1592554924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20talk.20on.20Zoom/near/201287857\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20talk.20on.20Zoom/near/201286997\">said</a>:</p>\n<blockquote>\n<p>Doesn't emacs have a web browser?</p>\n</blockquote>\n<p>Yes, but it's not exactly pretty... <a href=\"https://en.wikipedia.org/wiki/Eww_(web_browser)#/media/File:Eww_GNU_Emacs_24.4.png\">https://en.wikipedia.org/wiki/Eww_(web_browser)#/media/File:Eww_GNU_Emacs_24.4.png</a>. But maybe that's sufficient, I don't know.</p>\n</blockquote>\n<p>The nice thing about it is that it works around sites which try to block normal browsers from seeing the publicly-searchable content with a special feature that asks for money first...</p>",
        "id": 201435885,
        "sender_full_name": "James King",
        "timestamp": 1592598015
    },
    {
        "content": "<p><a href=\"https://youtu.be/8plFYifHHsE\">https://youtu.be/8plFYifHHsE</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"8plFYifHHsE\" href=\"https://youtu.be/8plFYifHHsE\"><img src=\"https://i.ytimg.com/vi/8plFYifHHsE/default.jpg\"></a></div>",
        "id": 202019592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593116395
    },
    {
        "content": "<p>ACM SIGPLAN have uploaded Leo's talk</p>",
        "id": 202019672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593116419
    },
    {
        "content": "<p>This is old news, but I recommend watching it for everybody who hasn't already.</p>",
        "id": 202019699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593116442
    },
    {
        "content": "<p>Sebastian's screen is cropped <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 202047951,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1593140380
    },
    {
        "content": "<p>Oh wow, that's pretty bad</p>",
        "id": 202063731,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1593159809
    },
    {
        "content": "<p>Someone should send an anonymous link to an anonymized version of the rogue recording everybody watched.</p>",
        "id": 202063902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593159930
    },
    {
        "content": "<p>Ssh!</p>",
        "id": 202067589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593162604
    },
    {
        "content": "<p>It's not anonymously hosted...</p>",
        "id": 202067626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593162631
    },
    {
        "content": "<p>That's why I wrote we need an anonymized version.</p>",
        "id": 202067665,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593162652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, I have a better recording, if you want to offer it to the organisers.</p>",
        "id": 202082310,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593173891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Yes, I received it! Thanks!</p>",
        "id": 202082395,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1593173960
    },
    {
        "content": "<p>Fixed version: <a href=\"https://youtu.be/TgHISG-81wM\">https://youtu.be/TgHISG-81wM</a>. Thanks again for the alternative source, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> !</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"TgHISG-81wM\" href=\"https://youtu.be/TgHISG-81wM\"><img src=\"https://i.ytimg.com/vi/TgHISG-81wM/default.jpg\"></a></div>",
        "id": 202551946,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1593598448
    }
]