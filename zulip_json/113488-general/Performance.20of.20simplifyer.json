[
    {
        "content": "<p>I have no idea how simp works, but in my mental model, the simplifier keeps track of some table, matching each symbol to a list of simp lemmas having that symbol as the head symbol of the LHS, and trying them one by one.</p>\n<p>The caveat is that there are hundreds if not thousands of simp lemmas (including auto-generated ones) with <code>category.comp</code> as the head symbol of the LHS, and I imagine (with evidence from the output of <code>set_option trace.simplify true</code>) that the simplifier is trying every one of them each time they see a <code>category.comp</code>. </p>\n<p>My main problem is that I just added a bunch more simp lemmas regarding some new morphisms that I newly defined, and I might just have pushed simp over the brink of deterministic timeouts, forcing me to change the proofs of a dozen lemmas from <code>by { delta foo, simp }</code>to a four line <code>simp only ...</code>, which is both time consuming (for me) and aesthetically unappealing.</p>",
        "id": 271701155,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1644689248
    },
    {
        "content": "<p>Is there a better way out?<br>\nI'm thinking if putting all the new simp lemmas into a custom simp attribute might help.</p>",
        "id": 271701316,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1644689371
    },
    {
        "content": "<p>Does <code>simp</code> support some kind of hint that might improve that ordering?</p>",
        "id": 271701809,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644689740
    },
    {
        "content": "<p>If there is a way to <code>simp only [namespace]</code> or <code>simp only [prefix]</code> I think the resulting fix for the timeout wouldn't look that scary as well.</p>",
        "id": 271701918,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1644689839
    },
    {
        "content": "<p>The group and continuity tactics I think use a \"custom <code>simp</code> set\" and perhaps this is what you might want here. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#group\">tactic#group</a></p>",
        "id": 271702740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644690632
    },
    {
        "content": "<p>Oh! You can't jump to source with tactics! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.group\">docs#tactic.interactive.group</a></p>",
        "id": 271702779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644690667
    },
    {
        "content": "<p>Hmm, looks like I'm totally wrong. My mental model of the <code>group</code> tactic was <code>simp only [list of 10 lemmas which Knuth and Bendix prove will do the job]</code>. Anyway, hopefully a custom simp attribute can be used to solve this.</p>",
        "id": 271702946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644690765
    },
    {
        "content": "<p>Looking at <a href=\"https://github.com/leanprover-community/mathlib/blob/91cc4ae6b842a99b44843b1dc4d45c766cc41d19/src/tactic/group.lean#L50-L85\">aux_group‚ÇÅ</a>, I don't think your mental model of <code>group</code> is that far off.</p>",
        "id": 271703276,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1644691174
    },
    {
        "content": "<p>Trying out the custom simp attribute approach.<br>\nDoes <code>reassoc</code> preserve the custom simp attributes of the original lemma or does it only preserves <code>simp</code>?</p>",
        "id": 271703345,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1644691231
    }
]