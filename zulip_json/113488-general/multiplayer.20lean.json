[
    {
        "content": "<p>At Xena today about six people collaborated in CoCalc using mathlib, and they made dihedral groups! <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> <span class=\"user-mention\" data-user-id=\"132893\">@Ken Lee</span> together wrote the below. It was <em>really funny</em> watching it happen, not least at the beginning when people kept changing the definition of multiplication and/or inverse because it wasn't quite right, whilst other people were trying to prove things about these functions at the same time. Once it stabilised things worked quite well. They also implemented <a href=\"https://xenaproject.wordpress.com/2018/04/30/group-theory-revision/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/04/30/group-theory-revision/\">https://xenaproject.wordpress.com/2018/04/30/group-theory-revision/</a> . It's still going, although several of the contributors have left now; they're proving stuff like how dihedral groups aren't abelian etc.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tidy</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">G</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">group_core</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">private</span> <span class=\"kn\">theorem</span> <span class=\"n\">group_core</span><span class=\"bp\">.</span><span class=\"n\">mul_inv</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">group_core</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">to_has_group_notation</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">to_has_group_notation</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span><span class=\"o\">],</span>\n<span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kn\">private</span> <span class=\"kn\">theorem</span> <span class=\"n\">group_core</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">group_core</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">to_has_group_notation</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">to_has_group_notation</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"k\">calc</span>  <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span> <span class=\"n\">g</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">group_core</span><span class=\"bp\">.</span><span class=\"n\">mul_inv</span> <span class=\"n\">hg</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">of_core</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">group_core</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">to_has_group_notation</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">group_core</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">has_inv</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">-- ff,a := ρ^a</span>\n<span class=\"c1\">-- tt,a := σ * ρ^a</span>\n<span class=\"kn\">definition</span> <span class=\"n\">dihedral2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">dihedral2</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- ρ^a * ρ^b = ρ^(a+b)</span>\n<span class=\"c1\">-- (σ * ρ^a) * ρ^b = σ * ρ^(a+b)</span>\n<span class=\"c1\">-- (ρ^a) * (σ ρ^b) = σ * ρ^(b-a)</span>\n<span class=\"c1\">-- (σ ρ^a) * (σ ρ^b) = ρ^(b-a)</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">dihedral2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">bxor</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_fst</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">dihedral2</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">bxor</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_snd</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">dihedral2</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">cond</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">dihedral2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">ff</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"c1\">-- (σ * ρ^a)⁻¹ = σ * ρ^a</span>\n<span class=\"c1\">-- (ρ^a)⁻¹ = ρ^(-a)</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"o\">(</span><span class=\"n\">dihedral2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">dihedral2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">bxor_assoc</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"bp\">⟩;</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨_|_</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"bp\">⟩;</span> <span class=\"n\">rcases</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"bp\">⟨_|_</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sub_add_eq_sub_sub_swap</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sub_add_eq_add_sub</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">sub_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">one_mul</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">dihedral2</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">sub_zero</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">mul_left_inv</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">dihedral2</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">add_left_neg</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">add_right_neg</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">dihedral2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">of_core</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">has_inv</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">dihedral2</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">dihedral2</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">dihedral2</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">dihedral2</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">dihedral2</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">rho_mul_sigma</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"bp\">*</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">dihedral2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">σ</span> <span class=\"bp\">*</span> <span class=\"n\">ρ</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">dihedral2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">dihedral2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">dihedral2</span>\n</pre></div>",
        "id": 148818374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543524944
    },
    {
        "content": "<p>It was the nerdiest thing I'd seen for quite some time. <span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span> we didn't use VS Code, we just worked together using the basic editor. It worked really well. Mathlib was really helpful -- without it we would have had to use <code>fin n</code> for a set with n elements, but with it we could use <code>zmod n</code> with its group structure.</p>",
        "id": 148819305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543525622
    },
    {
        "content": "<p>Looking at the code now, the comments were crucial. People tended not to use the chat, they talked using comments. It became clear very early on that we needed comments to explain the conventions we were using, and I see now that whilst people tidied up the chatty comments they left in the comments explaining the mathematics (more precisely the conventions and basic notation), so in some sense it has created more readable Lean code.</p>",
        "id": 148820730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543526786
    },
    {
        "content": "<p>This sounds fantastic.</p>",
        "id": 148821796,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543527671
    },
    {
        "content": "<p>Thanks for explaining how the first serious collaborative use of cocalc lean went!  </p>\n<blockquote>\n<p>People tended not to use the chat, they talked using comments.</p>\n</blockquote>\n<p>This is something I've wondered about, since I've experienced this too.  It depends a lot on the sort of document being edited.  I also haven't quite figured out if I should add some extra support for \"comments attributed to people\".  When collaboratively editing markdown files, we (cocalc devs) often do this sort of thing (to attribute the remark):</p>\n<div class=\"codehilite\"><pre><span></span>&gt; [ws] blah blah\n\n&gt; [hsy] blah blah\n</pre></div>",
        "id": 148844392,
        "sender_full_name": "William Stein",
        "timestamp": 1543559411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I also implemented \"run a bash command line in every student project\" in case that helps you workaround the path issue more easily.</p>",
        "id": 148844401,
        "sender_full_name": "William Stein",
        "timestamp": 1543559438
    }
]