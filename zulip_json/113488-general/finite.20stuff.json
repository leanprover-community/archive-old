[
    {
        "content": "<p>I'm really bad at manipulating finite sets in Lean. This is frustrating because everything about finite sets seem obvious. I'd be very grateful if someone could prove the following lemmas (the second one has the same assumption but a more precise conclusion):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_stuff</span>  <span class=\"o\">(</span><span class=\"n\">tfin</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_stuff&#39;</span> <span class=\"o\">(</span><span class=\"n\">tfin</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Of course I'm also interested if someone explains those lemmas should be stated like this and will be a pain to use.</p>",
        "id": 193302377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586343517
    },
    {
        "content": "<p>This reminds me of <a href=\"https://github.com/leanprover-community/mathlib/blob/51553e36ff9ae93ee4fbfb05a39e5d04c71be565/src/linear_algebra/finsupp.lean#L434\" title=\"https://github.com/leanprover-community/mathlib/blob/51553e36ff9ae93ee4fbfb05a39e5d04c71be565/src/linear_algebra/finsupp.lean#L434\">https://github.com/leanprover-community/mathlib/blob/51553e36ff9ae93ee4fbfb05a39e5d04c71be565/src/linear_algebra/finsupp.lean#L434</a></p>",
        "id": 193303653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586344172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I think the statements are fine. (Maybe I would use <code>t : finset _</code>... To prove this, I would do something like</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"err\">\\</span><span class=\"n\">ex</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">\\</span><span class=\"k\">in</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">this</span> <span class=\"kn\">using</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>modulo minor tweaks</p>",
        "id": 193304014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586344406
    },
    {
        "content": "<p>apparently Lean can't synthesize decidable equality on iota. I am assuming that this isn't an issue for Patrick...</p>",
        "id": 193304740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586344819
    },
    {
        "content": "<p><code>example (α : Type*) (t : set α) [finite t] : fintype t := by apply_instance -- fails</code></p>",
        "id": 193304995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586345009
    },
    {
        "content": "<p>I think you can do cases on the proof of <code>finite t</code></p>",
        "id": 193305132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586345091
    },
    {
        "content": "<p>is <code>finite</code> even a typeclass?</p>",
        "id": 193305143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586345100
    },
    {
        "content": "<p>no it isn't -- sorry. But still...</p>",
        "id": 193305177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586345128
    },
    {
        "content": "<p>yeah, it's defined as <code>nonempty (fintype t)</code> so just pop it open and use <code>resetI</code></p>",
        "id": 193305204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586345155
    },
    {
        "content": "<p>It's great that to prove this triviality I need to unfreeze local instances :-)</p>",
        "id": 193305302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586345213
    },
    {
        "content": "<p>hey, you're the one that wants to use instances that aren't present in the statement</p>",
        "id": 193305335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586345238
    },
    {
        "content": "<p>it's not needed for the statement and I'm not sure how it's being used in the proof</p>",
        "id": 193305357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586345262
    },
    {
        "content": "<p>stupid mum_bUnion_iff wants the term to be in a set, not a finset :-)</p>",
        "id": 193305536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586345393
    },
    {
        "content": "<p>How come <code>mem_Union</code> is an iff and <code>mem_bUnion</code> isn't?</p>",
        "id": 193305600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586345416
    },
    {
        "content": "<p>probably because <code>mem_bUnion</code> is too old</p>",
        "id": 193305884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586345601
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finite_stuff</span>  <span class=\"o\">(</span><span class=\"n\">tfin</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">tfin</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193305902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586345611
    },
    {
        "content": "<p>That bit at the end could use some tidying</p>",
        "id": 193305929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586345630
    },
    {
        "content": "<p>it looks like a term mode proof written vertically</p>",
        "id": 193306018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586345668
    },
    {
        "content": "<p>that's how I roll</p>",
        "id": 193306035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586345677
    },
    {
        "content": "<p>you should see my codewars solutions</p>",
        "id": 193306042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586345689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> in the second one, why not have sigma mapping to finset alpha? it's <code>finset.unbind</code> then :-)</p>",
        "id": 193306513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586345966
    },
    {
        "content": "<p>Did someone find a proof of <code>finite t -&gt; finite s \\cap t</code>?</p>",
        "id": 193306991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586346306
    },
    {
        "content": "<p>There should be a <code>mem_fUnion</code></p>",
        "id": 193307309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586346519
    },
    {
        "content": "<p>or possibly a mem_fUnion_iff...</p>",
        "id": 193307331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586346536
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finite_stuff&#39;</span> <span class=\"o\">(</span><span class=\"n\">tfin</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">finite_stuff</span> <span class=\"n\">tfin</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">I</span> <span class=\"n\">hI</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∩</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">},</span> <span class=\"c1\">-- finite t → finite s ∩ t</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">inter_subset_left</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hI</span> <span class=\"o\">:=</span> <span class=\"n\">hI</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span> <span class=\"n\">at</span> <span class=\"n\">hI</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hI</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span> <span class=\"n\">at</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hi</span> <span class=\"k\">with</span> <span class=\"n\">hi</span> <span class=\"n\">hsi</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hsi</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I'm not sure this is mathlib-ready &lt;/sarcasm&gt;, and I assumed finite t -&gt; finite s \\cap t, but if it's just something you need now then there it is</p>",
        "id": 193307549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586346655
    },
    {
        "content": "<p>I'm not sure these are term mode proofs really, because of the occasional rw mem_Union.</p>",
        "id": 193307595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586346682
    },
    {
        "content": "<p>The proof of <code>mem_Union</code> doesn't seem to be rfl</p>",
        "id": 193307698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586346732
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finite_stuff&#39;</span> <span class=\"o\">(</span><span class=\"n\">tfin</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">I</span><span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">finite_stuff</span> <span class=\"n\">tfin</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">I</span> <span class=\"n\">hI</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∩</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finite_subset</span> <span class=\"n\">tfin</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">inter_subset_right</span> <span class=\"o\">},</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">inter_subset_left</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hI</span> <span class=\"o\">:=</span> <span class=\"n\">hI</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span> <span class=\"n\">at</span> <span class=\"n\">hI</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hI</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span> <span class=\"n\">at</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hi</span> <span class=\"k\">with</span> <span class=\"n\">hi</span> <span class=\"n\">hsi</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hsi</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193311706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586349195
    },
    {
        "content": "<p>Than you very much Kevin and Mario!</p>",
        "id": 193312162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586349376
    },
    {
        "content": "<p>Mario, do you think we are missing intermediate lemmas here? It looks like a very long proof for such an obvious fact.</p>",
        "id": 193312227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586349412
    },
    {
        "content": "<p>here's kevin's proof in term mode:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">```</span><span class=\"n\">lean</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_stuff&#39;</span> <span class=\"o\">(</span><span class=\"n\">tfin</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">I</span><span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">hI</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finite_stuff</span> <span class=\"n\">tfin</span> <span class=\"n\">h</span> <span class=\"k\">in</span>\n<span class=\"bp\">⟨</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∩</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">finite_subset</span> <span class=\"n\">tfin</span> <span class=\"o\">(</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">mem_Union</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span>\n    <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hsi</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_bUnion_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"bp\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hsi</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 193313280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586349921
    },
    {
        "content": "<p>Nice :-)</p>",
        "id": 193313327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586349945
    },
    {
        "content": "<p>although I did swap in the use of <code>mem_bUnion_iff</code></p>",
        "id": 193313402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586349966
    },
    {
        "content": "<p>To do that I would have had to understand how supr was implemented and I couldn't be bothered to dig</p>",
        "id": 193313506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586350027
    },
    {
        "content": "<p>I don't think this is an unreasonably long proof, given the complexity of the statement itself. Once you set the logical manipulation aside the only actually interesting part is the last 3 lines of my version of the proof</p>",
        "id": 193313554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586350050
    },
    {
        "content": "<p>I ctrl-clicked on <code>mem_bUnion</code> and looked for neighbors</p>",
        "id": 193313649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586350091
    },
    {
        "content": "<p>it was two lemmas previous</p>",
        "id": 193313663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586350100
    },
    {
        "content": "<p>Do you think we should keep both version <code>finite_stuff</code> and <code>finite_stuff'</code>?</p>",
        "id": 193313937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586350240
    },
    {
        "content": "<p>(with better names of course)</p>",
        "id": 193313955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586350248
    },
    {
        "content": "<p>If you find it useful, I don't see why not</p>",
        "id": 193314080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586350316
    },
    {
        "content": "<p>I usually try to find an appropriate constructive analogue for these sorts of things, that is, a function with the stated properties, since existentials have to be unpacked and lack global coherence of choices</p>",
        "id": 193314226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586350365
    },
    {
        "content": "<p>In my question the first lemma was really meant as training for the second one.</p>",
        "id": 193314383,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586350416
    },
    {
        "content": "<p>I want to use only the second one.</p>",
        "id": 193314412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586350423
    },
    {
        "content": "<p>If you can turn this lemma into a function that would be even better of course.</p>",
        "id": 193314520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586350447
    },
    {
        "content": "<p>(in order to avoid unpacking the existential)</p>",
        "id": 193314569,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586350464
    },
    {
        "content": "<p>I feel like there is a simpler core underlying principle here</p>",
        "id": 193314694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586350519
    },
    {
        "content": "<p>That was my question about missing lemmas.</p>",
        "id": 193314771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586350552
    },
    {
        "content": "<p>like, you can swap forall and exists a la skolemization for finite sets</p>",
        "id": 193314914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586350593
    },
    {
        "content": "<p>In the conclusion of <code>finite_stuff'</code>, it would be better to replace <code>t ⊆ ⋃ i, σ i</code>with <code>t = ⋃ i, σ i</code>.</p>",
        "id": 193315183,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586350716
    },
    {
        "content": "<p>I didn't need this, but feel free to prove that stronger version!</p>",
        "id": 193315232,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586350744
    },
    {
        "content": "<p>what do you think of this formulation:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finite_stuff&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 193315302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586350776
    },
    {
        "content": "<p>That certainly looks cleaner. Can you prove it and deduce Sébastien's version of the original question?</p>",
        "id": 193315868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586350993
    },
    {
        "content": "<p>I think it's not quite enough to get the second version of the statement</p>",
        "id": 193316048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586351060
    },
    {
        "content": "<p>Do we have an equiv e between finset X and Pi (s : set X), finite s, and the lemma that for x : X, x \\in s iff x \\in e s?</p>",
        "id": 193316639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586351320
    },
    {
        "content": "<p>Hey, isn't this just the collection principle from zfc?</p>",
        "id": 193316655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586351335
    },
    {
        "content": "<p>All I know is that it's a mathematical triviality so it wouldn't surprise me if the logicians called it a principle</p>",
        "id": 193316706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586351374
    },
    {
        "content": "<p>I'm thinking of the version where you replace \"finite\" with \"is a set\" and depending on how you set things up it might be a theorem or an axiom</p>",
        "id": 193316810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586351414
    },
    {
        "content": "<p>Like most principles</p>",
        "id": 193316840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586351432
    },
    {
        "content": "<p>it's essentially a souped up version of replacement without the assumption that the relation is a function</p>",
        "id": 193316860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586351448
    },
    {
        "content": "<p>Replacement says the image of a set is a set</p>",
        "id": 193316919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586351474
    },
    {
        "content": "<p>right</p>",
        "id": 193316932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586351480
    },
    {
        "content": "<p>here it's the image under a relation</p>",
        "id": 193316947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586351489
    },
    {
        "content": "<p>A relation on X</p>",
        "id": 193316969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586351500
    },
    {
        "content": "<p>and it's not really an image because you can take a subset</p>",
        "id": 193316974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586351502
    },
    {
        "content": "<p>but you have to preserve \"enough\" of the original relation</p>",
        "id": 193317009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586351518
    },
    {
        "content": "<p>is_monoid_hom f is unbundled monoid homs and it's a class. monoid_hom is bundled and it's a structure</p>",
        "id": 193317416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586351681
    },
    {
        "content": "<p>finite s is unbundled finiteness and it's a structure. finset is bundled and a structure</p>",
        "id": 193317491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586351716
    },
    {
        "content": "<p>Do we have a version <code>sInter s</code> when <code>s : finset (set X)</code>? This is why I used <code>finite</code> everywhere instead of <code>finset</code>.</p>",
        "id": 193317498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586351718
    },
    {
        "content": "<p>I mentioned fUnion earlier (which doesn't exist)</p>",
        "id": 193317566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586351748
    },
    {
        "content": "<p>I know I can write <code>⋂₀ s.to_set</code> but it looks silly.</p>",
        "id": 193317581,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586351756
    },
    {
        "content": "<p>you can use the coercion as I did above</p>",
        "id": 193317681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586351784
    },
    {
        "content": "<p>If we did have something like that, I would prefer it generalize to lattices. I would call it <code>finset.inf</code></p>",
        "id": 193317807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586351845
    },
    {
        "content": "<p>ok hey look what I found</p>",
        "id": 193317883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586351881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/finite.20stuff/near/193317491\" title=\"#narrow/stream/113488-general/topic/finite.20stuff/near/193317491\">said</a>:</p>\n<blockquote>\n<p>finite s is unbundled finiteness and it's a structure. finset is bundled and a class</p>\n</blockquote>\n<p>Whut?? Is <code>finset</code> a class?</p>",
        "id": 193317972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586351909
    },
    {
        "content": "<p>finset isn't a class</p>",
        "id": 193317995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586351922
    },
    {
        "content": "<p>It should be just a <code>structure</code>, right?</p>",
        "id": 193317997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586351924
    },
    {
        "content": "<p>Fixed</p>",
        "id": 193318002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586351925
    },
    {
        "content": "<p>It's the wrong way around</p>",
        "id": 193318022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586351935
    },
    {
        "content": "<p>arguably, <code>finite s</code> should be called <code>is_finite s</code>. Is that your point?</p>",
        "id": 193318267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586352055
    },
    {
        "content": "<p>I think the problem, grammatically, is that <code>finite</code> is an adjective and <code>monoid_hom</code> is a noun</p>",
        "id": 193318337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586352085
    },
    {
        "content": "<p>I am saying that the class/structure choice is different in the two situations for <del>both</del> the unbundled <del>and the bundled</del> concept<del>s</del></p>",
        "id": 193318433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586352123
    },
    {
        "content": "<p>I think I have this straight now</p>",
        "id": 193318452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586352130
    },
    {
        "content": "<p>Oh I see. Well, using typeclasses for these things has always been dubious, that's why we're moving away from them</p>",
        "id": 193318527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586352173
    },
    {
        "content": "<p><del>I'm saying that either finset should be a structure or subgroup should be a class</del></p>",
        "id": 193318556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586352186
    },
    {
        "content": "<p>Reasoning purely by analogy</p>",
        "id": 193318586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586352205
    },
    {
        "content": "<p>finset is a structure</p>",
        "id": 193318592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586352208
    },
    {
        "content": "<p>subgroup is also a structure</p>",
        "id": 193318624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586352226
    },
    {
        "content": "<p>I see so I still have one error</p>",
        "id": 193318731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586352252
    },
    {
        "content": "<p>I'm failing to see past the typo to the point</p>",
        "id": 193318768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586352273
    },
    {
        "content": "<p>Is finite a class?</p>",
        "id": 193318820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586352298
    },
    {
        "content": "<p>I'm on mobile right now</p>",
        "id": 193318840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586352309
    },
    {
        "content": "<p>Because is_subgroup is a class</p>",
        "id": 193318887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586352334
    },
    {
        "content": "<p><code>finite</code> is not a class, <code>is_subgroup</code> is a class, and yes this is inconsistent</p>",
        "id": 193319058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586352398
    },
    {
        "content": "<p>my proposed solution is to delete <code>is_subgroup</code> and call it a day</p>",
        "id": 193319110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586352420
    },
    {
        "content": "<p>Is <code>finite</code> deprecated? Because <code>is_subgroup</code> is, kinda</p>",
        "id": 193319147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586352433
    },
    {
        "content": "<p>finite is not deprecated, it is meant to be a proposition to talk about finiteness in other positions</p>",
        "id": 193319226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586352478
    },
    {
        "content": "<p>for example you can meaningfully negate it</p>",
        "id": 193319296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586352492
    },
    {
        "content": "<p>This is some sort of indication that one should stick to finsets where one can though</p>",
        "id": 193319566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586352607
    },
    {
        "content": "<p>Bundled ftw</p>",
        "id": 193319585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586352615
    },
    {
        "content": "<p>We should have infinset</p>",
        "id": 193319637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586352639
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">subset_properties</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_stuff</span>  <span class=\"o\">(</span><span class=\"n\">tfin</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"err\">⊥</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">discrete_topology</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tfin</span><span class=\"bp\">.</span><span class=\"n\">compact</span><span class=\"bp\">.</span><span class=\"n\">elim_finite_subcover</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_open_discrete</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193322849,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586354063
    },
    {
        "content": "<p>Brilliant hack!</p>",
        "id": 193323500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586354306
    },
    {
        "content": "<p>Too bad this topology stuff come too late.</p>",
        "id": 193323558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586354330
    },
    {
        "content": "<p>You still get the jury special honorary mention.</p>",
        "id": 193323649,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586354370
    },
    {
        "content": "<p>It's too late because I want to put this below <code>order.filter.basic</code>. But it's also good to see that the form of the statement is used elsewhere in mathlib.</p>",
        "id": 193323838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586354440
    },
    {
        "content": "<p>Yes, I expected it to be easy but I didn't realize it would be quite this easy.</p>",
        "id": 193324453,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586354703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/finite.20stuff/near/193319296\" title=\"#narrow/stream/113488-general/topic/finite.20stuff/near/193319296\">said</a>:</p>\n<blockquote>\n<p>for example you can meaningfully negate it</p>\n</blockquote>\n<p>BTW, is it normal that <code>push_neg</code> on <code>not set.finite</code> cannot rename it as <code>set.infinite</code>, I guess it has to do with <code>simp</code> (?) ?</p>",
        "id": 193325081,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586354969
    },
    {
        "content": "<p>(I had to do a <code>rw set.infinite</code> in order to get the nice <code>infinite S</code> rather than <code>not set.finite S</code>)</p>",
        "id": 193325118,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586354988
    },
    {
        "content": "<p><code>push_neg</code> needs explicit support for each of these things. Seems like a good PR</p>",
        "id": 193325230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586355025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/finite.20stuff/near/193325230\" title=\"#narrow/stream/113488-general/topic/finite.20stuff/near/193325230\">said</a>:</p>\n<blockquote>\n<p><code>push_neg</code> needs explicit support for each of these things. Seems like a good PR</p>\n</blockquote>\n<p>Sounds good, thanks</p>",
        "id": 193325318,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586355061
    },
    {
        "content": "<p>Yes, every end-game negation in push_neg is hardcoded.</p>",
        "id": 193326128,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586355393
    },
    {
        "content": "<p>Damn, I was trying to put this finite stuff in the proper place before PRing, and guess what? <a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/finite.html#set.finite_subset_Union\" title=\"https://leanprover-community.github.io/mathlib_docs/data/set/finite.html#set.finite_subset_Union\">https://leanprover-community.github.io/mathlib_docs/data/set/finite.html#set.finite_subset_Union</a></p>",
        "id": 193427495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586425365
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sisym_UfFXAaJ5VlkARjOaeL/2020-04-09-2.png\" title=\"/user_uploads/3121/sisym_UfFXAaJ5VlkARjOaeL/2020-04-09-2.png\"><img src=\"/user_uploads/3121/sisym_UfFXAaJ5VlkARjOaeL/2020-04-09-2.png\"></a></div>",
        "id": 193427787,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586425550
    },
    {
        "content": "<p>So... why did <code>library_search</code> not find this?</p>",
        "id": 193428263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586425844
    },
    {
        "content": "<p>It's very unlikely that library_search will find longer statements, because the probability that you spell the theorem the same way as the library decreases exponentially with the length of the theorem</p>",
        "id": 193428405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586425929
    },
    {
        "content": "<p>Because of our rigid naming convention and fairly deterministic file organization it's much likely to notice a collision the way Patrick did, by putting it in its proper place and seeing something already there, or getting a name conflict with a duplicate of your theorem</p>",
        "id": 193428497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586426020
    },
    {
        "content": "<p>Yes, I'm trying to fit in the more precise version, and it's a pain.</p>",
        "id": 193428586,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586426076
    },
    {
        "content": "<p>Because of mathematically empty differences between my statement and the one already in mathlib.</p>",
        "id": 193428611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586426099
    },
    {
        "content": "<p>this is also why I highly recommend looking at sources for relevant files as a theorem discovery strategy</p>",
        "id": 193428622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586426104
    },
    {
        "content": "<p>Let's try that Zulip tactic. For our experts in finiteness:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.finite.fin_param</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">h.to_finset.card</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 233024083,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617475345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  voila</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">set.finite.fin_param</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">h.to_finset.card</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.equiv_fin</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.card</span> <span class=\"bp\">$</span> <span class=\"n\">set.finite.to_finset</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩),</span>\n  <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">finset.card_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.finite.mem_to_finset</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ha</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">finset.mem_univ</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.mk_eq_mk</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.finite.mem_to_finset</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ha</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e.symm</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_injective.comp</span> <span class=\"n\">e.symm.injective</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_range</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">e</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rw</span> <span class=\"n\">e.symm_apply_apply</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233025097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617476349
    },
    {
        "content": "<p>Thanks Johan! This is much more complicated than what I hoped for <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 233030698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617481784
    },
    {
        "content": "<p>I massaged a bit into:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.finite.finset_card_eq_fintype_card</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">h.to_finset.card</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"bp\">↥</span><span class=\"n\">s</span> <span class=\"n\">h.fintype</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h.fintype</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset.card_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.finite.mem_to_finset</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ha</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">finset.mem_univ</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.mk_eq_mk</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.finite.mem_to_finset</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ha</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">set.finite.equiv_fin</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">h.to_finset.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h.finset_card_eq_fintype_card</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h.fintype</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">fintype.equiv_fin</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists_rep</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">set.finite.fin_param</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">h.to_finset.card</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">h.equiv_fin</span> <span class=\"k\">in</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e.symm</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_injective.comp</span> <span class=\"n\">e.symm.injective</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">e.symm.surjective.range_comp</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">set.finite.fin_param'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h.fin_param</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Now I'm sure <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> will explain why we are writing nonsense.</p>",
        "id": 233032489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617483634
    },
    {
        "content": "<p><code>noncomputable lemma</code> strikes me as nonsense</p>",
        "id": 233034849,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617485792
    },
    {
        "content": "<p>Probably the conclusion should be <code>nonempty (s \\equiv fin _)</code>, which also eliminates the <code>classical</code></p>",
        "id": 233034924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617485884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/finite.20stuff/near/233030698\">said</a>:</p>\n<blockquote>\n<p>Thanks Johan! This is much more complicated than what I hoped for <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">set.finite.fin_param'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fintype.equiv_fin</span> <span class=\"o\">(</span><span class=\"n\">h.to_finset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"k\">in</span>\n<span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"n\">f.symm</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_injective.comp</span> <span class=\"o\">(</span><span class=\"n\">equiv.injective</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n <span class=\"n\">set.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">f.symm</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩⟩⟩</span>\n</code></pre></div>",
        "id": 233036387,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617487513
    },
    {
        "content": "<p>Presumably you can avoid choice there by using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/trunc.rec\">docs#trunc.rec</a> instead of trunc.out?</p>",
        "id": 233066970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617525845
    },
    {
        "content": "<p>Or better, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonempty_of_trunc\">docs#nonempty_of_trunc</a></p>",
        "id": 233067014,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617525929
    },
    {
        "content": "<p>I don't see how any of this could avoid choice here.</p>",
        "id": 233096466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617554117
    },
    {
        "content": "<p>Your conclusion is in prop, so you don't need to ever construct anything</p>",
        "id": 233098631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617556193
    },
    {
        "content": "<p>Indeed, it's in prop</p>",
        "id": 233098702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617556226
    },
    {
        "content": "<p>You're correct though, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.equiv_fin\">docs#fintype.equiv_fin</a> already uses classical logic</p>",
        "id": 233099372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617556959
    },
    {
        "content": "<p>Which seems ridiculous, because isn't the whole point of <code>trunc</code> to be a computable version of <code>nonempty</code>?</p>",
        "id": 233099399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617557002
    },
    {
        "content": "<p>Yes, that's the issue. Maybe a proof exists in classical logic without going through that lemma, but I'm not very interested in avoiding classical logic anyway...</p>",
        "id": 233099404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617557020
    },
    {
        "content": "<p>The docs specifically list that lemma as being computable</p>",
        "id": 233099459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617557050
    },
    {
        "content": "<p>Oh, I guess functions can still be computable but use classical logic in internal proofs</p>",
        "id": 233099486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617557096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> There is a difference between being computable and avoiding choice entirely. The former means that any uses of AC are confined to proof arguments where they don't hamper code generation. Large parts of mathlib are computable, but only a small fraction is AC-free</p>",
        "id": 233137410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617598992
    },
    {
        "content": "<p>In principle most of the things that are computable are also AC-free, but there aren't too many people besides me making any attempt to actually make it happen, and there are several foundational bits that need adjustment before there is any hope of making, say, finsets AC-free. I made another push toward AC-freedom in lean core recently, so we should see some improvement in mathlib when the next minor version is released.</p>",
        "id": 233137715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617599339
    }
]