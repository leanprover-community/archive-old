[
    {
        "content": "<p>Hardly a big deal I guess?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! boy I should update my lean -/</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tauto</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>(Oh -- I just realised I have a super-old mathlib. Hang on.)</p>",
        "id": 209884162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599921730
    },
    {
        "content": "<p>That's because <code>open_locale classical</code> makes every proposition decidable and <code>tauto</code> uses the excluded middle (and related laws) when a proposition is decidable. <code>!</code> basically just makes every proposition decidable before <code>tauto</code> gets started.</p>",
        "id": 209884457,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599922309
    },
    {
        "content": "<p>The reason I ran into it was that I had just explicitly applied LEM in a proof and wanted to show the students that after this one application the rest of the proof was classical, so I ran <code>tauto</code> before and after the LEM application and they both worked :-) This wasn't a live lecture, just something I'm scripting for a video for undergrads.</p>",
        "id": 209885572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599924026
    },
    {
        "content": "<p>I thought you don't care</p>",
        "id": 209885592,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599924075
    },
    {
        "content": "<p>I don't care, but I'm writing an optional video lecture on constructive mathematics.</p>",
        "id": 209885753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599924303
    },
    {
        "content": "<p>Do you think the following is true: a theorem in first order logic is true iff it can be proving using <code>intro, apply, exact, have, left, right, split, cases, have</code> and <code>classical.em</code>.</p>",
        "id": 209885816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599924369
    },
    {
        "content": "<p>Do I have enough tactics?</p>",
        "id": 209885819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599924379
    },
    {
        "content": "<p>sounds about right</p>",
        "id": 209885828,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599924406
    },
    {
        "content": "<p>wait, first order?</p>",
        "id": 209885831,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599924413
    },
    {
        "content": "<p>Oh</p>",
        "id": 209885845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599924446
    },
    {
        "content": "<p>I just mean propositional calculus, no predicates</p>",
        "id": 209885850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599924456
    },
    {
        "content": "<p>I don't know what this stuff is called. \"Propositional logic\"? The one where there's a completeness theorem that you get by using <code>(P -&gt; Q -&gt; R) -&gt; (P -&gt; Q) -&gt; (P -&gt; R)</code> for modus ponens</p>",
        "id": 209885909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599924512
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://i.stack.imgur.com/POXIt.png\"><img src=\"https://i.stack.imgur.com/POXIt.png\"></a></div>",
        "id": 209885927,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599924547
    },
    {
        "content": "<p>yeah sounds about right</p>",
        "id": 209885947,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599924597
    },
    {
        "content": "<p>convince yourself that you can prove everything on this list using your tactics</p>",
        "id": 209885987,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599924607
    },
    {
        "content": "<p>You don't need have and it should work for first order. Ah I am using constructor but I guess this is the same as intro?</p>",
        "id": 209885998,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599924630
    },
    {
        "content": "<p>why don't you need have?</p>",
        "id": 209886007,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599924653
    },
    {
        "content": "<p>Ok cut elimination may not work here...</p>",
        "id": 209886020,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599924675
    },
    {
        "content": "<p>it's good practice to use <code>have</code> anyway</p>",
        "id": 209886030,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599924700
    },
    {
        "content": "<p>to show your steps</p>",
        "id": 209886031,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599924702
    },
    {
        "content": "<p>also I prefer <code>refine</code> over <code>apply</code> for the same reason</p>",
        "id": 209886038,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599924717
    },
    {
        "content": "<p>sure I wasn't thinking about practice but about Gentzen</p>",
        "id": 209886039,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599924717
    },
    {
        "content": "<p>basically, the less automation, the better</p>",
        "id": 209886056,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599924723
    },
    {
        "content": "<p>depends</p>",
        "id": 209886082,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599924736
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209887431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599926480
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Is this a bug?</p>",
        "id": 209887591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599926573
    },
    {
        "content": "<p><code>tauto</code> is not complete for constructive logic and doesn't do any step that it might have to undo later. It could do much better</p>",
        "id": 209887924,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599926875
    },
    {
        "content": "<p>it works with <code>ifinish</code></p>",
        "id": 209888003,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599926981
    },
    {
        "content": "<p>I've heard interesting things about <code>ifinish</code></p>",
        "id": 209890303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599930280
    },
    {
        "content": "<p>OK so the theorem is that I should be able to prove any classical logic theorem using only <code>intro, exact, apply, cases, split, left, right, exfalso</code> and <code>by_cases</code>.</p>",
        "id": 209890457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599930530
    },
    {
        "content": "<p>are you sure you don't need <code>have</code></p>",
        "id": 209890814,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599931106
    },
    {
        "content": "<p>I think there might be some distance here between \"in theory\" and \"in practice.\" Lean's tactic mode isn't a natural deduction system. If you allow arbitrary terms to be used with those tactics, then sure, all you need is <code>exact</code>. If you only allow atomic identifiers as proof terms, I think you'll at least need <code>have</code>. This kind of question makes more sense in term mode.</p>",
        "id": 209891884,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599932635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/.60tauto.60.20is.20classical.20with.20.60open_locale.20classical.60/near/209885987\">said</a>:</p>\n<blockquote>\n<p>convince yourself that you can prove everything on this list using your tactics</p>\n</blockquote>\n<p>I proved all of those without using <code>have</code> but I'm not at all sure.</p>",
        "id": 209892730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599933712
    },
    {
        "content": "<p>I see, I need rules about exactly what I will allow for <code>exact</code>. I don't want to allow <code>h.2</code> or anything. Maybe I should ban <code>exact</code> and only allow <code>assumption</code></p>",
        "id": 209892788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599933765
    },
    {
        "content": "<p>maybe clearer to write a crippled version of <code>assumption</code>/<code>exact</code> that requires that you specify the name of the assumption.</p>",
        "id": 209903808,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599951916
    },
    {
        "content": "<p>I'm not sure exactly what this is for, but here are versions of exact and apply that only accept local constants for proof terms. (Maybe they're correct?)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">exact&#39;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">tgt</span><span class=\"o\">),</span>\n   <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">local_const</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">x</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"err\">$</span> <span class=\"n\">sformat</span><span class=\"bp\">!</span> <span class=\"s2\">&quot;you must refer to only a single proof term, not ({x})&quot;</span>\n   <span class=\"kn\">end</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">apply&#39;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">concat_tags</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n  <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr_for_apply</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">local_const</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"err\">$</span> <span class=\"n\">sformat</span><span class=\"bp\">!</span> <span class=\"s2\">&quot;you must refer to only a single proof term, not ({h})&quot;</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"c1\">--exact&#39; h₁ h₂, -- fails, not a single proof term</span>\n  <span class=\"n\">apply&#39;</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">exact&#39;</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">exact&#39;</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209906081,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599955918
    }
]