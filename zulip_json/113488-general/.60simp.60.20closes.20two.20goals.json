[
    {
        "content": "<p>Dear All,</p>\n<p>I noticed today the example below and I am failing to understand where this is coming from.  Why is <code>simp</code> solving two goals?  Why does <code>simp only [eq_iff_iff]</code> stop solving the second one?</p>\n<p>A possible answer is that the case split is irrelevant, which is fair enough!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.split_ifs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">le_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">gh</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_le_eq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">le_le</span> <span class=\"n\">h</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">le_le</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_iff</span><span class=\"o\">]</span> <span class=\"c1\">-- if you remove `only` then `simp` closes both goals</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271297620,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1644421626
    },
    {
        "content": "<p>Part of what simp does is try <code>triv</code> and and <code>refl</code> in turn, once it is done. If simp already solved the goal  then this may \"leak out\" and solve other goals if they are also provable by refl or triv.<br>\nI think simp in this case is basically doing this, or something close to it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_le_eq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">le_le</span> <span class=\"n\">h</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">le_le</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_iff_iff.mpr</span><span class=\"o\">,</span> <span class=\"c1\">-- simp does these lines</span>\n  <span class=\"n\">triv</span><span class=\"o\">,</span><span class=\"c1\">-- simp does these lines</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span><span class=\"c1\">-- simp does these lines</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271299763,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644422395
    },
    {
        "content": "<p>Normally we try to avoid this as its a bit counter-intuitive by calling <code>focus1</code> or something before a tactic like simp or rw</p>",
        "id": 271299995,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644422449
    },
    {
        "content": "<p>Ah, I see!  So the second goal is so trivial that the first <code>simp</code> closes it by accident!</p>",
        "id": 271300228,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1644422531
    },
    {
        "content": "<p>the other reason is that for some reason <code>simp</code> only does <code>focus1</code> on itself using <code>propagate_tags</code>; this only does <code>focus1</code> if the tags are empty, and the tags are empty for some reason</p>",
        "id": 271300252,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644422542
    },
    {
        "content": "<p>So, in particular, following the style of enclosing goals in brackets is not <em>just</em> a style thing!</p>",
        "id": 271300599,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1644422667
    },
    {
        "content": "<p>hmm, it may be a combination of this and what Alex is saying, because if the goal is <strong>not</strong> trivial, then it won't work, e.g. if you change the <code>split_ifs</code> to <code>by_cases</code>, which also doesn't set tags</p>",
        "id": 271300703,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644422702
    },
    {
        "content": "<p>but you can see it here as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_le_eq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_iff</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271300820,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644422747
    },
    {
        "content": "<p>This sounds like a (minor) bug in simp.</p>",
        "id": 271301431,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1644422984
    },
    {
        "content": "<p>Thank you all for your explanations!  I'm very happy that I have learned a non-<code>triv</code>ial thing about <code>simp</code>!</p>",
        "id": 271306987,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1644424854
    },
    {
        "content": "<p>Other tactics are occasionally found to do this too, and it was one of the things which taught me to always use <code>{}</code>, but it's generally regarded as a bug if my understanding is correct.</p>",
        "id": 271317308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644428403
    }
]