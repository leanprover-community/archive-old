[
    {
        "content": "<p>I think there might be something wrong with naming scopes with mutually inductive types - it seems impossible to pick one of its constructors as a <code>case</code> in the type's own namespace:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span>\n<span class=\"k\">with</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">FooA</span><span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">FooB</span><span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"k\">with</span> <span class=\"n\">bar</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bar</span><span class=\"o\">:</span> <span class=\"n\">bar</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">FooB</span> <span class=\"c1\">-- FooB : foo → foo</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">FooB</span> <span class=\"c1\">-- FooB : foo → foo</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"c1\">-- nevermind I&#39;m proving f=f by cases, it&#39;s just an example</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">FooB</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> invalid `case`, there is no goal tagged with prefix [FooB]</span>\n<span class=\"cm\">     state:</span>\n<span class=\"cm\">     2 goals</span>\n<span class=\"cm\">     case foo.FooA</span>\n<span class=\"cm\">     ⊢ FooA = FooA</span>\n\n<span class=\"cm\">     case foo.FooB</span>\n<span class=\"cm\">     f : foo</span>\n<span class=\"cm\">     ⊢ FooB f = FooB f -/</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">FooB</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> &#39;foo.FooB&#39; is not a constructor</span>\n<span class=\"cm\">     state:</span>\n<span class=\"cm\">     2 goals</span>\n<span class=\"cm\">     case foo.FooA</span>\n<span class=\"cm\">     ⊢ FooA = FooA</span>\n\n<span class=\"cm\">     case foo.FooB</span>\n<span class=\"cm\">     f : foo</span>\n<span class=\"cm\">     ⊢ FooB f = FooB f -/</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159342637,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1551106544
    },
    {
        "content": "<p>I think the \"foo.fooB is not a constructor\" message is not very forward thinking</p>",
        "id": 159345231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551108389
    },
    {
        "content": "<p>probably requires a patch to lean though</p>",
        "id": 159345247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551108407
    },
    {
        "content": "<p><del>Yeah I think it's definitely broken. If I introduce a <code>notation ``FOOB`` := foo.FooB</code> before <code>namespace Foo</code> and then use it inside in a function <code>fn</code> within the namespace, <code>unfold fn</code> stops working.</del> I can't reproduce this so possibly I made a mistake somewhere.</p>",
        "id": 159351477,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1551112739
    }
]