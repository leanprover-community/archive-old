[
    {
        "content": "<p>I don't remember if I've asked this before, but what's the deal with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.out'\">docs#ordinal.out'</a>? How can it be computable when it depends on <code>quotient.out</code>? Do we really gain any computability out of this?</p>",
        "id": 289636159,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657825995
    },
    {
        "content": "<p>If I remember correctly, terms of type <code>Sort u</code> are always computable</p>",
        "id": 289636721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657826265
    },
    {
        "content": "<p>Computability is a property of terms  <code>t : T</code> where <code>T : Type u</code></p>",
        "id": 289636858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657826325
    },
    {
        "content": "<p>Not of <code>T</code> itself</p>",
        "id": 289636873,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657826333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/computability/near/168157572\">said</a>:</p>\n<blockquote>\n<p>I think the rules are simply</p>\n<ol>\n<li>Types and propositions and proofs are always computable (because they are not actually represented at all at runtime). That is, anything whose type is <code>Sort u</code> for some <code>u</code>. This also extends to Pi-types ending in <code>Sort u</code>.</li>\n<li>Axioms are not computable (because they have no definition). Normally I think this only applies to <code>choice</code> because the other standard axioms are propositions.</li>\n<li>Anything that uses something noncomputable is noncomputable, except that rule 1 always takes priority.</li>\n</ol>\n</blockquote>",
        "id": 289637173,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657826496
    },
    {
        "content": "<p>I don't know anything about the design of <code>ordinal.out'</code>, but I think I can explain why it's computable. The fields of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Well_order\">docs#Well_order</a> are a <code>Type</code>, a <code>Prop</code>-valued function, and a <code>Prop</code>. Each of these are considered to be computationally irrelevant, so they are erased during VM compilation. So, <code>Well_order</code> is represented by the VM as a nullary constructor with no data whatsoever. The definition of <code>ordinal.out'</code> then reduces to this single nullary constructor during VM compilation, so it's computable in a rather trivial way.</p>",
        "id": 289637286,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657826548
    },
    {
        "content": "<p>I guess the question is whether <code>quotient.out</code> would cause downstream poisoning in places the current <code>out'</code> doesn't</p>",
        "id": 289637613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657826706
    },
    {
        "content": "<p>The reason <code>quotient.out</code> isn't computable here is that it ends up using the axiom of choice to transform this nullary constructor. It's a no-op in this case, though, so it's noncomputable for a somewhat silly reason.</p>\n<p>I wonder whether it would break anything to mark <code>quotient.out</code> to be <code>@[inline]</code>. There's a chance it would make uses of it for ordinals be computable.</p>",
        "id": 289637631,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657826719
    },
    {
        "content": "<p>Is the problem here equivalent to the fact that <code>x : Type</code> matches rule 1 but not <code>x : Type × Type</code>?</p>",
        "id": 289637767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657826777
    },
    {
        "content": "<p>That is, \"is computationally irrelevant\" isn't inherited by inspecting fields of structures</p>",
        "id": 289637839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657826823
    },
    {
        "content": "<p>I think it's just that <code>quotient.out</code> is marked <code>noncomputable</code>, so you can't use it in a computationally relevant way.</p>",
        "id": 289637908,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657826861
    },
    {
        "content": "<p><code>ordinal.out'</code> is effectively inlining a <code>let</code> that uses <code>quotient.out</code>, pushing it into computationally irrelevant terms.</p>",
        "id": 289638018,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657826908
    },
    {
        "content": "<p>well, also doing the <code>x &lt;-&gt; C x.1 x.2 ...</code> eta conversion for structures and pushing it in even further. (related to what you were saying about <code>x : Type × Type</code>)</p>",
        "id": 289638104,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657826960
    },
    {
        "content": "<p>My suspicion is that the latter is the problem</p>",
        "id": 289639963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657827890
    },
    {
        "content": "<p>I've heard about Lean 4 doing eta reduction automatically. Would that turn <code>ordinal.out'</code> noncomputable again?</p>",
        "id": 289655384,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657836031
    },
    {
        "content": "<p>A computable <code>pgame</code> is about as useful as a computable <code>real</code>, i.e., not useful. This file would benefit from <code>noncomputable theory</code>.</p>",
        "id": 289658876,
        "sender_full_name": "Reid Barton",
        "timestamp": 1657838062
    },
    {
        "content": "<p>I do think there's instances where we want computability on games, see the domineering file for instance. But having <code>nim</code> be computable does sound ultimately futile, given the dependence on ordinals.</p>",
        "id": 289659386,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657838377
    },
    {
        "content": "<p>It's meaningless though, there is no data in a <code>pgame</code> that you can extract anyways.</p>",
        "id": 289659695,
        "sender_full_name": "Reid Barton",
        "timestamp": 1657838545
    },
    {
        "content": "<p>How so?</p>",
        "id": 289660112,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657838804
    },
    {
        "content": "<p>Note that I'm talking about the type of pre-games, not the quotient type of games</p>",
        "id": 289660130,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657838816
    },
    {
        "content": "<p>You should be able to extract left and right moves out of a <code>pgame</code></p>",
        "id": 289660155,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657838829
    },
    {
        "content": "<p>But the moves are types, and those have no runtime content</p>",
        "id": 289660263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657838888
    },
    {
        "content": "<p>If you want to dig into the depths of lean, you could try modifying the noncomputability checker to be aware of this</p>",
        "id": 289660323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657838943
    },
    {
        "content": "<p>Because the current behavior is certainly misleading, even though as Reid rightly comments it doesn't mean anything</p>",
        "id": 289660380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657838985
    },
    {
        "content": "<p>All I know is that the VM can determine whether two small games of domineering are equivalent, and it shouldn't be able to do that if <code>pgame</code> truly held no data</p>",
        "id": 289660517,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657839070
    },
    {
        "content": "<p>For example, you can't determine whether the left or right option sets are empty</p>",
        "id": 289660533,
        "sender_full_name": "Reid Barton",
        "timestamp": 1657839089
    },
    {
        "content": "<p><code>pgame</code> really holds no data.</p>",
        "id": 289660554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1657839110
    },
    {
        "content": "<p>The data isn't in the <code>pgame</code>, it's in some synthesized <code>decidable</code> instances</p>",
        "id": 289660638,
        "sender_full_name": "Reid Barton",
        "timestamp": 1657839147
    },
    {
        "content": "<p>I see</p>",
        "id": 289660698,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657839188
    },
    {
        "content": "<p>So there's really no use in trying to make things computable here</p>",
        "id": 289660708,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657839199
    },
    {
        "content": "<p>e.g. for a more familiar example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">to_bool</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>   <span class=\"c1\">-- tt</span>\n</code></pre></div>",
        "id": 289660893,
        "sender_full_name": "Reid Barton",
        "timestamp": 1657839309
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 289660904,
        "sender_full_name": "Victor Maia",
        "timestamp": 1657839317
    },
    {
        "content": "<p>I'm convinced now</p>",
        "id": 289660936,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657839344
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15367\">#15367</a> adds <code>noncomputable theory</code> to this file, and removes <code>ordinal.out'</code> in the process</p>",
        "id": 289660949,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657839353
    },
    {
        "content": "<p>Remember the only advantage to <code>noncomputable theory</code> is that it saves a few <code>noncomputable</code> keywords</p>",
        "id": 289665380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657842583
    },
    {
        "content": "<p>It might be worth leaving in in case we ever fix lean to know automatically that these have no computational content, as they we can see the effect</p>",
        "id": 289665462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657842621
    },
    {
        "content": "<p>So, keep the <code>noncomputable</code> keywords but still ditch <code>ordinal.out'</code>?</p>",
        "id": 289666422,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657843523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/ordinal.2Eout'/near/289660323\">said</a>:</p>\n<blockquote>\n<p>If you want to dig into the depths of lean, you could try modifying the noncomputability checker to be aware of this</p>\n</blockquote>\n<p>I think this would go beyond the noncomputability checker and would be rather involved. The VM compiler still thinks that there's computational content to the <code>pgame</code> type itself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">pgame</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pgame</span>\n</code></pre></div>\n<p>There are two closures there in its constructor. You'd need to design a pass for the VM compiler that detects this and turns it into a nullary constructor (right now it turns into a 2-argument constructor since the type arguments are irrelevant). This analysis then also needs to go into the noncomputability checker.</p>",
        "id": 289666529,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657843615
    }
]