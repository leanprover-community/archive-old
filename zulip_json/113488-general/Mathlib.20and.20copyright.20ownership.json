[
    {
        "content": "<p>Given the following tweet, I would be interested in how copyright is handled for Mathlib: <a href=\"https://twitter.com/XenaProject/status/1276985859552825346\">https://twitter.com/XenaProject/status/1276985859552825346</a></p>\n<p>What happens usually in open source is that copyright is retained by each author, so the definition in Lean of perfectoid spaces is owned by its authors. For something like Lean code to \"never be owned by anyone\", the only way I know would be to set up an organization to which all copyright is assigned, like the FSF does with GNU project contributions. Is this what is done currently?</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/XenaProject/status/1276985859552825346\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1263810297560735744/gMianQ_V_normal.jpg\"></a><p>Perfectoid spaces! <a href=\"https://t.co/9Hfg7nHtyr\">https://link.springer.com/article/10.1007/s10240-012-0042-x</a> . Yours for only Â£29.95 from Springer Verlag.\n\nPerfectoid spaces! <a href=\"https://t.co/gnXcQOpsWx\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/43954f64ce4afdf4fa39e2aeef8ec43826b24f2a/src/perfectoid_space.lean#L54</a> . A well-defined term in a well-defined type theory. Hosted by <a href=\"https://twitter.com/github\">@github</a> , with an Apache 2.0 license. Free software. Can never be owned by anyone.</p><span>- The Xena Project (@XenaProject)</span></div></div>",
        "id": 202608633,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593629439
    },
    {
        "content": "<p>I am far from an expert, but I think Kevin meant that this code can not be put behind a paywall.</p>",
        "id": 202608842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593629555
    },
    {
        "content": "<p>\"own\" is a weird word</p>",
        "id": 202608857,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593629570
    },
    {
        "content": "<p>Personally, I don't care about copyrights... people can do whatever they want with the code I write.</p>",
        "id": 202608882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593629587
    },
    {
        "content": "<p>I believe the authors still retain the ownership in the case of mathlib</p>",
        "id": 202608902,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593629600
    },
    {
        "content": "<p>If they want to claim that they wrote the code... I don't care.</p>",
        "id": 202608903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593629600
    },
    {
        "content": "<p>does ownership mean that they can later unpublish it?</p>",
        "id": 202608945,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593629637
    },
    {
        "content": "<p>But you are asking about mathlib, not about my opinion. Currently I think all mathlib files (with nontrivial content) have a copyright header that mentions the Apache License.</p>",
        "id": 202609009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593629655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.20and.20copyright.20ownership/near/202608842\">said</a>:</p>\n<blockquote>\n<p>I am far from an expert, but I think Kevin meant that this code can not be put behind a paywall.</p>\n</blockquote>\n<p>The Apache-2.0 license absolutely permits putting copies of code behind a paywall. But I guess you mean something like: \"the Lean community will endeavor to always provide this code for download for free\"</p>",
        "id": 202609032,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593629672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.20and.20copyright.20ownership/near/202608945\">said</a>:</p>\n<blockquote>\n<p>does ownership mean that they can later unpublish it?</p>\n</blockquote>\n<p>Most license dedications can't be revoked. However, they could also license it under other licenses, such as proprietary ones.</p>",
        "id": 202609085,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593629715
    },
    {
        "content": "<p>Well, our repo is not behind a paywall, and organisations cannot force us to take it down. So the perfectoid repo should in principal always stay around. Free to read for everyone with an internet connection.</p>",
        "id": 202609140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593629759
    },
    {
        "content": "<p>so i guess there's a question of whether we can make the legal reality match up better with our interpretation</p>",
        "id": 202609208,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593629786
    },
    {
        "content": "<p>The other variable <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> is for us to not lose interest and abandon the website or delete the account</p>",
        "id": 202609245,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593629809
    },
    {
        "content": "<p>and karl is suggesting this social technology of forming an org with a mandate to keep providing this code for free</p>",
        "id": 202609271,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593629828
    },
    {
        "content": "<p>Yup, agreed. Hence the \"in principal\" (<span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>)</p>",
        "id": 202609283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593629838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.20and.20copyright.20ownership/near/202609140\">said</a>:</p>\n<blockquote>\n<p>Well, our repo is not behind a paywall, and organisations cannot force us to take it down. So the perfectoid repo should in principal always stay around. Free to read for everyone with an internet connection.</p>\n</blockquote>\n<p>We have discussed this issue in coq-community. GitHub can absolutely shut repos/websites down (whether by policy or accident). Hence, many of our project repos are mirrored on multiple open platforms.</p>",
        "id": 202609360,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593629879
    },
    {
        "content": "<p>That's a good idea</p>",
        "id": 202609449,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593629909
    },
    {
        "content": "<p>We have local clones, so we can host it in another place as soon as github acts up</p>",
        "id": 202609451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593629910
    },
    {
        "content": "<p>Where do you mirror them?</p>",
        "id": 202609472,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593629917
    },
    {
        "content": "<p>I guess gitlab and sourcehut are obvious candidates?</p>",
        "id": 202609489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593629931
    },
    {
        "content": "<p>GitLab for one</p>",
        "id": 202609494,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593629934
    },
    {
        "content": "<p>Is there a mechanism to push everything from the github repos to gitlab or others on a regular basis?</p>",
        "id": 202609756,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593630055
    },
    {
        "content": "<p>could it be implemented as a GitHub Action?</p>",
        "id": 202609852,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593630093
    },
    {
        "content": "<p>GitLab lets you continuously mirror from github automatically, I think</p>",
        "id": 202609876,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593630103
    },
    {
        "content": "<p>this mirroring can be done unilaterally, then</p>",
        "id": 202610002,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593630147
    },
    {
        "content": "<p>Here's our discussion on backup etc. so far: <a href=\"https://github.com/coq-community/manifesto/issues/76\">https://github.com/coq-community/manifesto/issues/76</a> --- We have also considered platforms like Zenodo: <a href=\"https://github.com/coq-community/manifesto/issues/75\">https://github.com/coq-community/manifesto/issues/75</a> </p>\n<p>In any case, for the \"free availability\" goal to hold, I think these issues have to be considered.</p>",
        "id": 202610011,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593630151
    },
    {
        "content": "<p>The bigger problem is all the \"extras\" that github offers: issues and PRs. If those get taken down, it's harder to recover the info, because it's not stored in the repo.</p>",
        "id": 202610081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593630185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.20and.20copyright.20ownership/near/202610081\">said</a>:</p>\n<blockquote>\n<p>The bigger problem is all the \"extras\" that github offers: issues and PRs. If those get taken down, it's harder to recover the info, because it's not stored in the repo.</p>\n</blockquote>\n<p>they can be exported (regularly) via GitHub's API</p>",
        "id": 202610144,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593630213
    },
    {
        "content": "<p>But is gitlab compatible with it?</p>",
        "id": 202610179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593630228
    },
    {
        "content": "<p>Maybe we only want to backup the stuff, and not mirror things like issues. I guess that would quickly become confusing anyway.</p>",
        "id": 202610279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593630265
    },
    {
        "content": "<p>if you have the JSON or whatever, you could always convert it (we did this for imported Bitbucket repos)</p>",
        "id": 202610293,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593630272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.20and.20copyright.20ownership/near/202609271\">said</a>:</p>\n<blockquote>\n<p>and karl is suggesting this social technology of forming an org with a mandate to keep providing this code for free</p>\n</blockquote>\n<p>I wasn't suggesting to go the FSF route and force reassignment of copyright for contributions, I'm just saying this is what one has to do to if the goal is to make sure nobody owns the code. In coq-community at least, we don't mind if everybody owns their code themselves, even though it becomes very problematic if one wants to change license (e.g., from GPL2 -&gt; Apache-2.0)</p>",
        "id": 202610450,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593630354
    },
    {
        "content": "<p>i think it's not a crazy goal; I would guess it is not worth the effort right now, but would not be surprised if it were worthwhile two years from now.</p>",
        "id": 202610623,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593630437
    },
    {
        "content": "<p>What would we gain?</p>",
        "id": 202611077,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593630627
    },
    {
        "content": "<p>I think FSF does it mostly so they can take legal action against violators of the GPL. But Apache-2.0 is such a permissive license that it's hard to violate...</p>",
        "id": 202611184,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593630687
    },
    {
        "content": "<p>I would like to move everything to public domain, but I think that's probably not possible because we have too much MSR code in mathlib</p>",
        "id": 202611244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593630720
    },
    {
        "content": "<p>public domain doesn't work in all jurisdictions, the closest we have used in coq-community is the Unlicense: <a href=\"https://unlicense.org\">https://unlicense.org</a> (which has an MIT-like fallback)</p>",
        "id": 202611397,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593630782
    },
    {
        "content": "<p>If you increase the long-term availability of the code, you gain some probability mass on \"the work we're doing on mathlib now is appreciated by people 40 years from now.\" But right now if you want to buy probability on that event, the most efficient thing to do is increase the number of good researchers contributing to mathlib.<br>\n(\"is my work still recognized 40 years from now\" is a thing career mathematicians optimize somewhat hard for, I think)</p>",
        "id": 202611436,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593630805
    },
    {
        "content": "<p>I mean by PD multilicensed PD / CC0 / unlicense / WTFPL of course :)</p>",
        "id": 202611477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593630829
    },
    {
        "content": "<p>well, that kind of PD at least renders the \"ownership\" issue moot (anyone can claim they own Mathlib)</p>",
        "id": 202611680,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593630928
    },
    {
        "content": "<p>that works for me</p>",
        "id": 202611703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593630941
    },
    {
        "content": "<p>we even tried to sidestep that question pretty hard in the <a href=\"https://arxiv.org/abs/1910.09336\">mathlib paper</a></p>",
        "id": 202611730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593630956
    },
    {
        "content": "<p>I think there are more than enough social institutions for apportioning credit in OSS projects without any need for copyright claims</p>",
        "id": 202611949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593631051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.20and.20copyright.20ownership/near/202611436\">said</a>:</p>\n<blockquote>\n<p>If you increase the long-term availability of the code, you gain some probability mass on \"the work we're doing on mathlib now is appreciated by people 40 years from now.\" But right now if you want to buy probability on that event, the most efficient thing to do is increase the number of good researchers contributing to mathlib.<br>\n(\"is my work still recognized 40 years from now\" is a thing career mathematicians optimize somewhat hard for, I think)</p>\n</blockquote>\n<p>I don't think that's a major stumbling block. Yes, mathlib is a mathematical artifact but it's also a software artifact. It's hard to find a piece of code that remains relevant for 40 years. The theorems proved today will still be true in 40 years but it is encoded in Lean. Will Lean still be around in 40 years? Maybe the language will be completely different maybe there will be something better</p>",
        "id": 202611950,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593631051
    },
    {
        "content": "<p>I think this is a serious concern though, that is not really being currently addressed and will become a bigger problem as mathlib grows</p>",
        "id": 202612210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593631170
    },
    {
        "content": "<p>Lean is absolutely not \"40-year proof\"</p>",
        "id": 202612242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593631189
    },
    {
        "content": "<p>that doesn't mean it's impossible to have something that is</p>",
        "id": 202612266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593631200
    },
    {
        "content": "<p>we'll learn a lot from porting mathlib to lean 4</p>",
        "id": 202612351,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593631225
    },
    {
        "content": "<p>lean is notoriously volatile even among contemporary proof assistants</p>",
        "id": 202612383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593631241
    },
    {
        "content": "<p>I have worked on updating 20+ year old Coq code quite a lot, it's hard but usually works out in the end (due to Coq maintainers' compatibility policies)</p>",
        "id": 202612608,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593631357
    },
    {
        "content": "<p>One thing that I want, is that I can edit mathlib files without having the original author having legal rights about what the file should look like. But I guess that is not a problem with our current setup.</p>",
        "id": 202612609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593631358
    },
    {
        "content": "<p>the main value from 20+ year old code are definitions and theorem statements... if a development has been partitioned properly so that there aren't gigantic proof scripts for a single lemma, it usually works out. Paulson makes similar points about Isabelle <a href=\"https://arxiv.org/abs/1804.07860\">here</a> (when talking about porting from HOL Light)</p>",
        "id": 202612721,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593631418
    },
    {
        "content": "<p>i imagine that when lean stops being the best choice for developing math libraries, a fork of mathlib will be translated into a better language</p>",
        "id": 202612854,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593631487
    },
    {
        "content": "<p>Metamath was definitely built to be \"archival quality\"; the spec has remained essentially unchanged from the 1991 version although it has grown in several backwards compatible ways</p>",
        "id": 202612983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593631544
    },
    {
        "content": "<p>The idea that your proofs will outlive you is part of the ethos</p>",
        "id": 202613142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593631623
    },
    {
        "content": "<p>maybe all we need for lean proofs to survive is to be able to compile them down to metamath</p>",
        "id": 202613193,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593631659
    },
    {
        "content": "<p>I don't suppose we can expect the proofs to outlive the community.</p>",
        "id": 202613214,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593631668
    },
    {
        "content": "<p>why not?</p>",
        "id": 202613227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593631678
    },
    {
        "content": "<p>say everything in mathlib was compiled to metamath, and then everyone forgot about the existence of lean</p>",
        "id": 202613331,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593631715
    },
    {
        "content": "<p>metamath proofs may not live on as metamath proofs necessarily, but the idea is that they will be forward ported in perpetuity</p>",
        "id": 202613339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593631720
    },
    {
        "content": "<p>Especially with Lean, we've kept the code alive but adapting it through the myriad of breaking changes</p>",
        "id": 202613342,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593631723
    },
    {
        "content": "<p>then in the development of the next general mathematics library, you make heavy use of a <code>mm_library_search</code></p>",
        "id": 202613382,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593631751
    },
    {
        "content": "<p>this is like relying on details checked by elders in ordinary maths</p>",
        "id": 202613560,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593631828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> The problem with this method is that it is very labour intensive and as soon as people decide that porting is no longer worth the effort, it dies</p>",
        "id": 202613615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593631860
    },
    {
        "content": "<p>having a stable \"fallback\" language is good for offloading developments where you don't care to upkeep them at that level</p>",
        "id": 202613813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593631961
    },
    {
        "content": "<p>That's true but not many software project survive the lack of maintainers. We might want to get to a point where the breaking changes are less common or we track master less closely but it will have to keep being maintained</p>",
        "id": 202613933,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593632026
    },
    {
        "content": "<p>I think you are highlighting the importance of a Project Gutenberg for formal proof</p>",
        "id": 202614057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593632072
    },
    {
        "content": "<p>is a \"Project Gutenberg for formal proof\" an archivist who keeps the code runnable without developing it?</p>",
        "id": 202614318,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593632202
    },
    {
        "content": "<p>right</p>",
        "id": 202614408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593632242
    },
    {
        "content": "<p>do you prefer keeping code runnable to translating the code-base into metamath and then letting it bitrot?</p>",
        "id": 202614763,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593632402
    },
    {
        "content": "<p>I imagine that the latter is less labor intensive because keeping a complicated program running on newer hardware can be challenging</p>",
        "id": 202614961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593632495
    },
    {
        "content": "<p>for some appropriate definition of metamath C, is \"reimplement the prover in metamath C\" enough to translate all of the proofs to metamath?</p>",
        "id": 202615203,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593632627
    },
    {
        "content": "<p>The main claim for reliability of metamath on future hardware is that it is really simple to write from scratch and this has been done over 20 times in almost every major language</p>",
        "id": 202615446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593632761
    },
    {
        "content": "<p>Metamath C is a bit of vaporware of my own devising, not to be confused with metamath :)</p>",
        "id": 202615571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593632807
    },
    {
        "content": "<p>yes, I did mean to ask about the vaporware. the question is \"do you think it's possible to write a language with the specified property?\"</p>",
        "id": 202615666,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593632865
    },
    {
        "content": "<p>yes, the goal was to outline what I think I can feasibly get done in ~1 year when my dissertation comes due</p>",
        "id": 202615773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593632922
    },
    {
        "content": "<p>(but that's a bit off topic for this thread, feel free to continue at <a href=\"#narrow/stream/236449-Program-verification/topic/Metamath.20C\">#Program verification</a>)</p>",
        "id": 202616039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593633045
    }
]