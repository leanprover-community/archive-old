[
    {
        "content": "<p>I wonder whether it would be possible to implement a version of universe inequalities as an elaborator feature.<br>\nConsider these examples:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mylift</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ulift</span>\n<span class=\"n\">def</span> <span class=\"n\">mylift&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ulift</span> <span class=\"c1\">-- fails</span>\n<span class=\"n\">def</span> <span class=\"n\">mylift&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 194928204,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587561382
    },
    {
        "content": "<p><code>mylift</code> has the same type as <code>ulift.{v u}</code> so the elaborator doesn't need any help to solve the universe unification problem.<br>\nIn <code>mylift'</code>, the type is written differently and the elaborator doesn't know how to solve <code>max v u =?= max u ?l_2</code>.<br>\nWe need to help it, as shown in <code>mylift''</code>.</p>",
        "id": 194928559,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587561547
    },
    {
        "content": "<p>Now maybe the elaborator should just be able to solve this outright, but it also seems like we could help it out a little if we could say: if you get stuck when trying to elaborate the <code>v</code> variable of <code>ulift.{v u}</code>, assume that it will be <code>&gt;= u</code> and use that to simplify the constraints.</p>",
        "id": 194929020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587561746
    },
    {
        "content": "<p>Also, now I'm slightly disturbed by the fact that if I write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">mylift&#39;&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>then <code>mylift''</code> and <code>mylift'''</code> are not definitionally equal.</p>",
        "id": 194929319,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587561869
    },
    {
        "content": "<p>No, those two are entirely different functions that are merely provably isomorphic</p>",
        "id": 194935487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587564345
    },
    {
        "content": "<p>the relation between them is similar to the relation between two inductive types with the same definition</p>",
        "id": 194935574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587564366
    },
    {
        "content": "<p>Right, so I guess I shouldn't be too worried about this.</p>",
        "id": 194935650,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587564405
    },
    {
        "content": "<p>But as a result, the elaborator problem here is literally underdetermined</p>",
        "id": 194935757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587564464
    },
    {
        "content": "<p>which is a fancy way of saying that <code>max</code> is not injective</p>",
        "id": 194935856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587564492
    },
    {
        "content": "<p>Right, so if the problem is underdetermined, maybe we can add constraints to make it determined.</p>",
        "id": 194936129,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587564606
    },
    {
        "content": "<p>Perhaps the better definition to aim for is actually <code>mylift'''</code>?</p>",
        "id": 194936171,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587564623
    },
    {
        "content": "<p>since that one's easier to characterize: we say we're only allowed to write <code>ulift.{x y}</code> when <code>x &gt;= y</code></p>",
        "id": 194936248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587564652
    },
    {
        "content": "<p>I don't know... universe expressions can get pretty complicated, especially once <code>imax</code> gets involved</p>",
        "id": 194936461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587564731
    },
    {
        "content": "<p>I agree that it would be easier to find a \"maximal assignment\", but I'm still not sure that uniquely picks the inputs from the output</p>",
        "id": 194936549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587564777
    },
    {
        "content": "<p>I guess a useful thing to do would be to look at some of the actual instances in the category theory library where we have to write universe levels explicitly and see if there's some way we could account automatically for all of them</p>",
        "id": 194937213,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587565009
    }
]