[
    {
        "content": "<p>I use the vim bindings extension in VSCode. When I am typing in an open lean file, the VSCode Lean extension tries to recompile even while I am still typing, which results in a lot more lag in getting a response from the widget. It gets hung up on things like unmatched parens, or unknown tokens. Has anyone else faced this?</p>",
        "id": 207799960,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598231224
    },
    {
        "content": "<p>Yeah -- is it really specific to the vim extension?  It would be nice to have a shortcut to start/stop the compilation.</p>",
        "id": 207800847,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1598232791
    },
    {
        "content": "<p>Yeah I've had this too, it's really frustrating</p>",
        "id": 207800916,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1598232941
    },
    {
        "content": "<p>This is typically because you have two files open that are on the opposite end of the import hierarchy (like <code>tactic.core</code> and <code>geometry.manifold.mfderiv</code>).</p>",
        "id": 207816487,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598256301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/113488-general/topic/vim.20extension.20on.20VSCode/near/207800847\">said</a>:</p>\n<blockquote>\n<p>Yeah -- is it really specific to the vim extension?  It would be nice to have a shortcut to start/stop the compilation.</p>\n</blockquote>\n<p>I believe you can open the Command Palette and choose \"Lean: Check Nothing\" to disable compilation <span aria-label=\"relaxed\" class=\"emoji emoji-263a\" role=\"img\" title=\"relaxed\">:relaxed:</span></p>",
        "id": 207826508,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1598263751
    },
    {
        "content": "<p>And more generally you can use the \"Lean: Check ...\" commands to control how aggressive Lean/VSCode will be about compiling. For example \"Lean: Check visible files\" should stop the problem Gabriel mentioned caused by imports</p>",
        "id": 207826712,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1598263917
    },
    {
        "content": "<p>You can also access the settings by clicking on the part of the bottom blue bar that says \"Lean: <span aria-label=\"checkbox\" class=\"emoji emoji-2611\" role=\"img\" title=\"checkbox\">:checkbox:</span>️ (checking open files)\"</p>",
        "id": 207826814,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1598263992
    },
    {
        "content": "<p>Thanks! Do you know if there's a way to turn this into keyboard shortcuts? I was hoping to be able to do this very quickly when moving large blocks of code around.</p>",
        "id": 207844921,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1598276979
    },
    {
        "content": "<p>Yes, it is possible. The command names for those selections are <a href=\"https://github.com/leanprover/vscode-lean#server-commands\">here</a> (click on \"The choices can also be made directly:\") and then you can add custom keybindings for those. </p>\n<p>To do so, open \"Keyboard Shortcuts\" in VS Code via the menu in the bottom left gear (or press ctrl+k then ctrl+s, or search the ctrl+p menu). Then search for <code>lean.roiMode</code>.</p>",
        "id": 207851423,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598280152
    },
    {
        "content": "<p>I suspect this is hiding a deeper issue though. I've been using Lean for a long time, including editing mathlib and I never felt the need to constantly change this setting.</p>",
        "id": 207851774,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598280310
    },
    {
        "content": "<p>I think it has to do with how the vim extension is firing keypress events into VSCode itself. For example, it has a separate undo stack (via <code>u</code>) than the VSCode <code>ctrl-Z</code> stack. And <code>ctrl-z</code> will sometimes undo a keypress at a time, which isn't really how undo should work.</p>",
        "id": 207853985,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598281308
    },
    {
        "content": "<p>I'm also using the vim extension (both of them actually, depending on the computer).</p>",
        "id": 207854095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598281344
    },
    {
        "content": "<p>And vim undo in VSCode is a completely unpredictable nightmare.</p>",
        "id": 207854128,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598281362
    },
    {
        "content": "<p>So every time it fires the keypress event, it triggers the underlying \"visible file has changed\" event for sending the buffer to the lean server. As opposed to waiting for input to stop via your <code>Esc</code> sequence.</p>",
        "id": 207854165,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598281383
    },
    {
        "content": "<p>Relevant vscodevim bug: <a href=\"https://github.com/VSCodeVim/Vim/issues/1490#issuecomment-352167221\">https://github.com/VSCodeVim/Vim/issues/1490#issuecomment-352167221</a></p>",
        "id": 207855170,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598281864
    },
    {
        "content": "<p>Basically, I'm saying, as exemplified by the weird vim undo in VSCode is that the vim extension doesn't play nicely with what counts as a changing (right now, in this moment) buffer over a buffer that has recently been changed (and isn't about to).</p>",
        "id": 207855276,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598281922
    },
    {
        "content": "<p>And my guess is that the vim extension always makes it seem like the latter to VSCode and other extensions, even when it is really the former.</p>",
        "id": 207855360,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598281955
    }
]