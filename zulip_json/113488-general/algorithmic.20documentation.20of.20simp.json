[
    {
        "content": "<p>Hello, is there a place where I can read more about the algorithm(s) implemented by <code>simp</code>? For instance, I am interested in the specification of the matching strategy, for selecting subterms, and in the rewriting strategy. Thanks in advance!</p>",
        "id": 278533932,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1649672801
    },
    {
        "content": "<p>I don't know about such descriptions of the algorithms. I think it's inspired by the Isabelle simplifier. Do you care about Lean 3 vs Lean 4? I think the simplifier changed.</p>\n<p>I hope <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  or <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  knows more. Maybe <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> also?</p>",
        "id": 278534303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649673030
    },
    {
        "content": "<p>I'm no expert, but I've poked around the source code for Lean 3's simplifier. This is my understanding of how it works:</p>\n<ul>\n<li>\n<p>When the simplifier is looking at an expression, it locates an applicable \"congruence lemma.\" These come from either \"user congruence lemmas\" (those introduced by <code>@[congr]</code> for example) or from specialized congruence lemmas synthesized by simp. A congruence lemma is something like \"if <code>a = a'</code> and <code>b = b'</code> then <code>f a b = f a' b'</code>, which is applicable to expressions that unify with <code>f a b</code> with <code>a</code> and <code>b</code> metavariables.</p>\n</li>\n<li>\n<p>Given an applicable congruence lemma, the simplifier recursively turns the problem of simplifying <code>f a b</code> into the problem of simplifying <code>a</code> and <code>b</code> independently. If <code>a</code> simplifies to <code>a'</code> and <code>b</code> simplifies to <code>b'</code>, then the congruence lemma is used to simplify <code>f a b</code> to <code>f a' b'</code>.</p>\n</li>\n<li>\n<p>After this, the simplifier looks for simplification lemmas (those introduced by <code>@[simp]</code> for example) that are applicable to <code>f a b</code>. The simplification lemmas are put into the form of a directed rules <code>X --&gt; Y</code>, with conditions (for instance, \"if <code>x = 0</code> then <code>x * y = 0</code>\" turns into the rule <code>x * y --&gt; 0</code> conditioned on <code>x = 0</code>), and it's looking to see if the current expression unifies with <code>X</code>. The simplifier tries to discharge the rule's conditions using the simplification procedure recursively, and if succeeds then the term is replaced with <code>Y</code>.</p>\n</li>\n</ul>\n<p>(The simplifier also has support for doing simplifications using general reflexive transitive relations, which can be triggered when congruence lemmas have hypotheses involving relations other than equality. I don't have a strong understanding for this feature, and there aren't too many examples of it.)</p>",
        "id": 278613746,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649709706
    },
    {
        "content": "<p>It's worth contrasting it with <code>rw</code>, which computes a \"motive\" for <code>eq.rec</code> to globally rewrite a term all at once. The simplifier instead sort of navigates into an expression using congruence lemmas.</p>",
        "id": 278613967,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649709826
    }
]