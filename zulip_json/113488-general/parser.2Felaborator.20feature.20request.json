[
    {
        "content": "<p>Could we expand the scope of <code>@</code> (make implicit arguments explicit) to expressions as well?</p>",
        "id": 202937734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593982276
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>   <span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 202937783,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593982335
    },
    {
        "content": "<p>That's probably something you can write your own function to do</p>",
        "id": 202937932,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593982573
    },
    {
        "content": "<p>as in C++ code?</p>",
        "id": 202938001,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593982686
    },
    {
        "content": "<p>No, I'm thinking of a Lean function where you write a tactic to build it's type</p>",
        "id": 202938016,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593982764
    },
    {
        "content": "<p>It's less obvious to make than I thought actually</p>",
        "id": 202938090,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593982888
    },
    {
        "content": "<p>Maybe a macro (like <code>format!</code>) would be a good approach to make it work</p>",
        "id": 202938143,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593982954
    },
    {
        "content": "<p>Try this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">reserve</span> <span class=\"kn\">prefix</span> <span class=\"bp\">`</span><span class=\"n\">elab</span><span class=\"bp\">!</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">explicit_binder</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"n\">d</span> <span class=\"err\">$</span> <span class=\"n\">explicit_binder</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">user_notation</span><span class=\"o\">]</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">elab_macro</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">&quot;elab!&quot;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">mk_explicit</span><span class=\"o\">,</span>\n   <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">explicit_binder</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"err\">%%</span><span class=\"n\">t</span> <span class=\"err\">%%</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">elab</span><span class=\"bp\">!</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span>\n</code></pre></div>",
        "id": 202938560,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593983644
    },
    {
        "content": "<p>Still not great</p>",
        "id": 202938788,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593984101
    },
    {
        "content": "<p>In any case, you might like what Leo is putting in the Lean 4 elaborator. He's adding named arguments. You should be able to write <code>foo 0 (n := 1) (p := 2)</code></p>",
        "id": 202938903,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593984273
    },
    {
        "content": "<p>I also think that <code>@</code> should work on expressions. There isn't really a reason not to, and it's one of the reasons why the pretty printer doesn't round trip</p>",
        "id": 202939754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593985889
    },
    {
        "content": "<p>Why is that?</p>",
        "id": 202939794,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593985927
    },
    {
        "content": "<p>You can't write <code>@(\\lam {x : nat}, x) 1</code></p>",
        "id": 202939802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593985951
    },
    {
        "content": "<p>it means that there are some terms that can't be printed in a way where they will be parsed correctly</p>",
        "id": 202939819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593985992
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">this</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">},</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_one</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202939884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593986102
    },
    {
        "content": "<p>That said, I don't think that kenny's example should work. If you write <code>(foo 0)</code> then that should mean <code>foo 0 _</code> so <code>@(foo 0) 1 2</code> means <code>@foo 0 _ 1 2</code>. The correct version would be <code>@(@foo 0) 1 2</code></p>",
        "id": 202939955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593986249
    },
    {
        "content": "<p>It also would make sense for <code>#check λ {x : ℕ}, x</code> to have type <code>ℕ</code></p>",
        "id": 202940098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593986455
    },
    {
        "content": "<p>Right, that's the issue that I've been having with it. But if <code>foo</code> takes another implicit argument before <code>0</code> that's where <code>@</code> makes a functional applicative too verbose</p>",
        "id": 202940100,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593986458
    },
    {
        "content": "<p>I'm sorry, I don't understand the objection</p>",
        "id": 202940120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593986517
    },
    {
        "content": "<p>Kenny's example get more interesting if you have this type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span>\n</code></pre></div>",
        "id": 202940192,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593986631
    },
    {
        "content": "<p>Then, your solution <code>@(@foo 0) 1 2</code> would have to be <code>@(@foo 7 0) 1 2</code>. I think avoiding that would be one reasonable argument for applying <code>@</code> on a partial application</p>",
        "id": 202940245,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593986711
    },
    {
        "content": "<p>Did I miss anything?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo a</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo _ m _</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo _ m</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo a m</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo _ _</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"c1\">-- @foo a m _ p</span>\n</code></pre></div>",
        "id": 202940246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593986712
    },
    {
        "content": "<p>I don't get your question. Are you asking if your enumeration of desired behavior is exhaustive?</p>",
        "id": 202940297,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593986790
    },
    {
        "content": "<p>I'm proposing a particular meaning for <code>@</code> on an expression and giving examples. Is there a problem case somewhere that I haven't demonstrated</p>",
        "id": 202940308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593986845
    },
    {
        "content": "<p>FYI: In Lean 2 you were able to apply <code>@</code> to an expression, and it worked in exactly the way you would expect. I don't know what problem was solved by disallowing it in Lean 3.</p>",
        "id": 202941371,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593988818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What I understood of your suggestion was this here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo _ m _</span>\n</code></pre></div>\n\n\n<p>Notice that it has one underscore than the list you showed. That is something I'm on the fence about</p>",
        "id": 202941467,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593989040
    },
    {
        "content": "<p>Yeah I confused myself about that too (and <code>#check (λ {x : ℕ}, x) : ℕ</code> is another example of the problem). If we view it strictly compositionally, then by the time you see the <code>@</code> the expression has already had implicits inserted, which is too late</p>",
        "id": 202941575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593989271
    },
    {
        "content": "<p>I think one desideratum is that <code>@</code> on expressions should have the same effect as <code>@foo</code> when the expression is the local constant<code>foo</code></p>",
        "id": 202941615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593989308
    },
    {
        "content": "<p>but this means that <code>@(foo m)</code> yields <code>@foo _ m</code> even though <code>(foo m)</code> is <code>@foo _ m _</code></p>",
        "id": 202941674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593989489
    },
    {
        "content": "<p>If <code>@(foo m)</code> means <code>@foo _ m _</code> then this negates the point of <code>@</code> on expressions</p>",
        "id": 202941721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593989557
    },
    {
        "content": "<p>I agree. That's how to make it the most useful. Does that make it a bit weird?</p>",
        "id": 202941781,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593989675
    },
    {
        "content": "<p>I think it means that <code>@</code> modifies the context of the expression inside the parens to tell it not to insert final implicits</p>",
        "id": 202941802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593989720
    },
    {
        "content": "<p>Put another way, elaboration works one \"application group\" at a time, with behavior modified by the <code>@</code> at the head constant, as well as potentially an <code>@</code> around the whole expression. Here's an enumeration of cases:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"mi\">0</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"c1\">-- @foo</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"c1\">-- @foo a</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">C</span> <span class=\"c1\">-- @foo a C</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"c1\">-- @foo a C b</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"c1\">-- @foo a C b c</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@@</span><span class=\"n\">foo</span> <span class=\"c1\">-- @foo _</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@@</span><span class=\"n\">foo</span> <span class=\"n\">C</span> <span class=\"c1\">-- @foo _ C</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@@</span><span class=\"n\">foo</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"c1\">-- @foo _ C b _</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span> <span class=\"c1\">-- @foo _ _</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span> <span class=\"n\">b</span> <span class=\"c1\">-- @foo _ _ b _</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo a</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo a C</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">C</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo a C b</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo a C b c</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">@@</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">@@</span><span class=\"n\">foo</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo _ C</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">@@</span><span class=\"n\">foo</span> <span class=\"n\">C</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo _ C b</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- @foo _ _ b</span>\n</code></pre></div>",
        "id": 202942199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593990410
    },
    {
        "content": "<p>The effect of <code>@@(...)</code> is the same as <code>@(...)</code>, namely to suppress all insertions of trailing implicit args</p>",
        "id": 202942203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593990442
    },
    {
        "content": "<p>This ensures that <code>@(foo)</code> always means the same as <code>@foo</code></p>",
        "id": 202942262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593990569
    },
    {
        "content": "<p>This means that <code>\\lam {x}, ...</code> can't be written as is because it will have implicits immediately inserted, unless you protect it with <code>@</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"c1\">-- @(λ {x : ℕ}, x) _</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- @(λ {x : ℕ}, x) _</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- @(λ {x : ℕ}, x)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"c1\">-- @(λ {x : ℕ}, x) 0</span>\n</code></pre></div>",
        "id": 202942324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593990710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> After going through these cases, it's not clear to me what \"exactly what you would expect\" means anymore. Could you elaborate on lean 2 <code>@</code>?</p>",
        "id": 202942380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593990840
    },
    {
        "content": "<p>I typically used it when (partially) applying a constant to arguments, if you want to leave the first implicit arguments implicit, but make all later arguments explicit. For example, this worked:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I think the binder type for lambdas was usually/always ignored when elaborating: it would not immediately apply the function to an argument.</p>",
        "id": 202943694,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593993447
    },
    {
        "content": "<p>I wonder if we can bring back the <code>!foo</code> annotation too while we're at it</p>",
        "id": 202944201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593994380
    },
    {
        "content": "<p>What did it do?</p>",
        "id": 202944789,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593995476
    },
    {
        "content": "<p>it makes all arguments implicit</p>",
        "id": 202944794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593995493
    },
    {
        "content": "<p><code>!foo = foo _ _ _ _</code></p>",
        "id": 202944797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593995502
    },
    {
        "content": "<p>Is that useful? Maybe you'd rather have something like Coq's <code>Set Implicit Arguments</code> command.</p>",
        "id": 202944843,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593995559
    },
    {
        "content": "<p>It's local to the particular application</p>",
        "id": 202944849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593995578
    },
    {
        "content": "<p>It's basically the opposite of <code>@foo</code></p>",
        "id": 202944854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593995587
    },
    {
        "content": "<p>In the Lean 2 HoTT library the <code>!</code> was used all over the place.  We made many arguments explicit, because you could easily write <code>!foo</code> if you didn't want to write them explicitly.</p>",
        "id": 202945424,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593996699
    },
    {
        "content": "<p>If you have <code>foo : \\Pi a, a -&gt; b</code>, is there a way to omit <code>a</code> but not the parameter of type <code>a</code>?</p>",
        "id": 202946471,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593998652
    },
    {
        "content": "<p>Not using <code>!</code> and <code>@</code></p>",
        "id": 202946676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593999113
    },
    {
        "content": "<p>lean 2 also had regular implicit arguments, that's what you would use in that example</p>",
        "id": 202946716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593999137
    },
    {
        "content": "<p>Ok, I think I see why that's useful. If you have <code>!foo = x</code>, <code>x</code> can dictate the implicit arguments of <code>foo</code>, is that right?</p>",
        "id": 202946740,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593999216
    },
    {
        "content": "<p>yes</p>",
        "id": 202946782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593999262
    },
    {
        "content": "<p>I see</p>",
        "id": 202946786,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593999280
    },
    {
        "content": "<p>also in theorem applications it is very common for our usual implicitness method to be too conservative</p>",
        "id": 202946790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593999294
    },
    {
        "content": "<p>You mean with <code>apply</code> or when proving a proof term?</p>",
        "id": 202946859,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593999444
    },
    {
        "content": "<p>in proof terms</p>",
        "id": 202947510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594000529
    },
    {
        "content": "<p>Our usual convention says anything that can be inferred from the hypotheses (not the goal) is implicit, but in theorem applications, working backwards, the goal is usually known</p>",
        "id": 202947568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594000613
    },
    {
        "content": "<p>That's true</p>",
        "id": 202947645,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594000762
    },
    {
        "content": "<p>That might even make proof terms more robust</p>",
        "id": 202947648,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594000771
    },
    {
        "content": "<p>I usually write <code>foo _ _</code> for arguments I want inferred, even if I know what should go in the <code>_</code></p>",
        "id": 202947720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594000834
    },
    {
        "content": "<p>That's flexible enough. It still breaks if the number of arguments or implicit arguments changes</p>",
        "id": 202947731,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594000882
    },
    {
        "content": "<p>is that actually reliable though? I would be pretty surprised if the number of arguments changes but the term still unifies</p>",
        "id": 202947743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594000918
    },
    {
        "content": "<p>unless it was a duplicate / unused argument or something</p>",
        "id": 202947785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594000942
    },
    {
        "content": "<p>I think the most likely situation that this would help with is if explicit arguments become implicit or vice versa</p>",
        "id": 202947955,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594001199
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">⦃</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 206596452,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597163120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> look I made it work using <code>{{}}</code> and <code>id</code></p>",
        "id": 206596475,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597163134
    },
    {
        "content": "<p>that is unexpected</p>",
        "id": 206596637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597163224
    },
    {
        "content": "<p>that's what you get by learning Lean using machine learning (i.e. having me just explore things)</p>",
        "id": 206597120,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597163465
    },
    {
        "content": "<p>you get unexpected results</p>",
        "id": 206597141,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597163472
    }
]