[
    {
        "content": "<p>I just discovered <code>bundled</code> in <code>category_theory.category</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">bundled</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>This seems very useful. In particular, I'm thinking it can help me remove <code>[decidable_eq α]</code> that I have to state everywhere by allowing me to bundle the condition. So, I have a couple of questions:</p>\n<p>1. I think it would be helpful to define this outside the <code>category_theory</code> directory because it's not inherently tied to category theory. Do people agree? Should it be in <code>data/bundled.lean</code> or somewhere else?<br>\n2. Do the <code>[</code>/<code>]</code> brackets do anything different from <code>(</code>/<code>)</code> here? <code>#print bundled</code> doesn't give any clue.<br>\n3. What does <code>str</code> abbreviate? I've typically seen <code>str</code> for string, but I don't think that makes sense here. Is it <code>structure</code>? If so, why? It seems more like a type function being bundled with its parameter, so I'm not clear where the <code>structure</code> comes in.</p>",
        "id": 135174961,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538657595
    },
    {
        "content": "<p>I <em>believe</em> that the only difference the <code>[]</code> makes within the structure is that you can use type class inference within the structure itself. So I am going to stick my neck out and suggest that in this case, where we don't need str to be inferred in any of the other fields, the <code>[]</code> is no different to <code>()</code>. Apologies if I've written something misleading / wrong here. I think the way to make type class inference pick up on <code>str</code> is to have the obvious instance immediately after the definition of the structure.</p>",
        "id": 135175752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538657825
    },
    {
        "content": "<p>I think Johannes suggested the <code>[ ]</code> here, and I never thought too hard about it.</p>",
        "id": 135177519,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538658358
    },
    {
        "content": "<p><code>str</code> is indeed for <code>structure</code>. We earlier had <code>carrier</code> instead of <code>a</code>.</p>",
        "id": 135177627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538658382
    },
    {
        "content": "<p>Regarding <code>bundled</code>, I've found that it has limited use, because as soon as you're past the first round of examples, you want to bundle up multiple typeclasses, and you're back to writing a custom structure for each set of typeclasses you're interested in.</p>",
        "id": 135177784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538658430
    },
    {
        "content": "<p>I can see how it is not suitable for more involved structures. This applies as well to <code>sigma</code>, <code>subtype</code>, etc. (And, even for cases that fit those, it often seems better to define your own structure.) That said, it is still a unique point in the design space and useful for many cases in which you don't need/want to define a structure.</p>",
        "id": 135183550,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538660052
    },
    {
        "content": "<p>The binder types (brackets) used in a structure declaration are reflected in the structure's constructor</p>",
        "id": 135197885,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1538668020
    },
    {
        "content": "<p>Aah so my post is inaccurate. Thanks Sebastian.</p>",
        "id": 135199650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538669796
    },
    {
        "content": "<blockquote>\n<p>The binder types (brackets) used in a structure declaration are reflected in the structure's constructor</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Ah, of course. Thanks!</p>",
        "id": 135236416,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538719542
    },
    {
        "content": "<p>Here's the resulting <a href=\"https://github.com/leanprover/mathlib/pull/390\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/390\">PR</a>.</p>",
        "id": 135242468,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538729380
    },
    {
        "content": "<p>I added a comment: <a href=\"https://github.com/leanprover/mathlib/pull/390#discussion_r223174490\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/390#discussion_r223174490\">https://github.com/leanprover/mathlib/pull/390#discussion_r223174490</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Meas</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bundled</span> <span class=\"n\">measurable_space</span>\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Meas</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">inst</span>\n</pre></div>\n\n\n<p>The comment says:<br>\nWould it be possible to autogenerate these instances? Everytime we bundle a class we want an instance like this. This probably means that <code>bundled</code> has to become meta. I don't know. But I think it would take away one of those \"minor annoyances\" if all these instances would just be there, automagically.</p>",
        "id": 135303706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538813051
    },
    {
        "content": "<p>You can't hook in to inductive aux theorem generation, but you can have a derive handler</p>",
        "id": 135303758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538813175
    },
    {
        "content": "<p>You could add an attribute to <code>Meas</code> that does the instance generation</p>",
        "id": 135303764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538813238
    },
    {
        "content": "<p>but I don't think you will gain much over just writing that one line</p>",
        "id": 135303766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538813267
    },
    {
        "content": "<p>it's not like there are that many bundled classes. This is a negligible fraction of the work</p>",
        "id": 135303809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538813301
    }
]