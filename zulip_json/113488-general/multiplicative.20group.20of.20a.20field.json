[
    {
        "content": "<p>How to define the multiplicative group of a field in Lean 3?</p>",
        "id": 258855454,
        "sender_full_name": "Meow",
        "timestamp": 1635044519
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mulgroup</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 258855493,
        "sender_full_name": "Meow",
        "timestamp": 1635044526
    },
    {
        "content": "<p>Maybe this? <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group/units.html#units\">https://leanprover-community.github.io/mathlib_docs/algebra/group/units.html#units</a></p>",
        "id": 258855831,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1635045157
    },
    {
        "content": "<p>See <code>def units.group</code></p>",
        "id": 258855839,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1635045192
    },
    {
        "content": "<p>Thanks</p>",
        "id": 258855840,
        "sender_full_name": "Meow",
        "timestamp": 1635045204
    },
    {
        "content": "<p>You can define anything (e.g., <code>false</code>) if you assume that all elements of a field are nonzero!</p>",
        "id": 258855851,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635045234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/multiplicative.20group.20of.20a.20field/near/258855851\">said</a>:</p>\n<blockquote>\n<p>You can define anything (e.g., <code>false</code>) if you assume that all elements of a field are nonzero!</p>\n</blockquote>\n<p>Yes I made a fool mistake, that's a contradiction.</p>",
        "id": 258856384,
        "sender_full_name": "Meow",
        "timestamp": 1635046166
    },
    {
        "content": "<p>The field itself will have a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group_with_zero\">docs#group_with_zero</a> instance which I think would be good enough for most things. If you really want, use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units\">docs#units</a> which will have a group instance. But you will need to deal with coercions if you want to go back to the field</p>",
        "id": 258856456,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635046278
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">structure</span> <span class=\"n\">mulgroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)):=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">neq_zero</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)):</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">mulgroup</span> <span class=\"n\">α</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h.symm</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">u.val</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mulgroup.neq_zero</span> <span class=\"n\">u</span><span class=\"o\">]}</span> <span class=\"o\">⟩,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">u₁.val</span> <span class=\"bp\">*</span> <span class=\"n\">u₂.val</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mulgroup.neq_zero</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">mulgroup.neq_zero</span> <span class=\"n\">u₂</span><span class=\"o\">]}⟩,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">},</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>How to complete the proof at the first <code>sorry</code>?<br>\nThe goal of <code>one_mul</code> after <code>simp</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">α</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mulgroup</span> <span class=\"n\">α</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a.val</span><span class=\"o\">,</span> <span class=\"n\">neq_zero</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>That's trivial, but I don't know how to succeed.</p>",
        "id": 258864655,
        "sender_full_name": "Meow",
        "timestamp": 1635060324
    },
    {
        "content": "<p>Try <code>intro a, cases a, refl</code></p>",
        "id": 258865902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635062485
    },
    {
        "content": "<p><code>h</code> is unnecessary by the way, it's an axiom of a field</p>",
        "id": 258865911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635062521
    },
    {
        "content": "<p>Thanks</p>",
        "id": 258866774,
        "sender_full_name": "Meow",
        "timestamp": 1635063993
    },
    {
        "content": "<p>You have made a new structure, <code>mulgroup</code>, rather than using mathlib's <code>units</code>, so to get it to work effectively you will have to make a little interface for it. I would recommend proving an extensionality lemma for it before you start the proof that it's a group, ie prove that two terms of type <code>mulgroup k</code> (don't call it alpha unless you're actually a computer scientist who thinks this is a better name for a field) are equal when their <code>val</code>s are.</p>",
        "id": 258866988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635064383
    },
    {
        "content": "<p>This might be as simple as writing <code>@[ext]</code> before the word <code>structure</code> but I'm not at lean to check. Then you will be able to use the <code>ext</code> tactic instead of <code>cases</code></p>",
        "id": 258867048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635064466
    },
    {
        "content": "<p>I was about to write that. Put <code>@[ext]</code> right above the structure line</p>",
        "id": 258867060,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635064495
    },
    {
        "content": "<p>BTW, all fields in <code>mathlib</code> are assumed to be nontrivial.</p>",
        "id": 258886868,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635093778
    },
    {
        "content": "<p>So you can get <code>(0 : α) ≠ (1 : α)</code> from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zero_ne_one\">docs#zero_ne_one</a>.</p>",
        "id": 258886874,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635093797
    }
]