[
    {
        "content": "<p>Consider the following partial proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"k\">in</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>If I put the curser right before <code>end</code> the goal is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>I tried to enter that into Lean as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>However, I get a different goal (which is neither equivalent nor even true).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">opt_param</span> <span class=\"bp\">ℕ</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>My questions:</p>\n<ol>\n<li>Is there a way to enter the goal <code>x : ℕ := 0 ⊢ x = 0</code> into Lean with the <code>x : ℕ := 0</code> on the left hand side?</li>\n<li>Is there a way to tactic-programmatically know that <code>x</code> in the first example <em>(in the context of the goal, after applying <code>intro</code>)</em> is a <code>let</code> binder (or whatever the appropriate terminology is) and that <code>0</code> is the value assigned to <code>x</code>?</li>\n</ol>",
        "id": 188165562,
        "sender_full_name": "Jason Rute",
        "timestamp": 1581638288
    },
    {
        "content": "<ol>\n<li>no</li>\n</ol>",
        "id": 188170634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581643644
    },
    {
        "content": "<ol start=\"2\">\n<li>Mechanisms for this are limited, I don't recall any function to tell you the value directly. Perhaps 3.5 can improve this. A workaround is to revert the target hypothesis (and dependents), and check if the resulting goal is a pi (so it was a regular argument) or a let (so it was a let binder and you can access the value).</li>\n</ol>",
        "id": 188170793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581643828
    },
    {
        "content": "<p>There was some functionality for dealing with things like 2. added in 3.5c (<a href=\"https://leanprover-community.github.io/mathlib_docs/core/init/meta/type_context.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/core/init/meta/type_context.html\">https://leanprover-community.github.io/mathlib_docs/core/init/meta/type_context.html</a>). See also <a href=\"https://github.com/leanprover-community/mathlib/issues/1953\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1953\">#1953</a>.</p>",
        "id": 188192001,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581673989
    },
    {
        "content": "<p>There is already a function <code>local_def_value </code> which follows Mario's suggestion. I will update <a href=\"https://github.com/leanprover-community/mathlib/issues/1953\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1953\">#1953</a> soon to add some more tactics.</p>",
        "id": 188228806,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1581702611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> Is there a difference between <code>get_context </code> and <code>get_local_context</code> in the <code>type_context</code> file?</p>",
        "id": 188228831,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1581702628
    },
    {
        "content": "<p>Yes I should have put a docstring on <code>get_context</code>.</p>\n<ul>\n<li><code>get_context</code> gets the local context that an mvar was defined in. For example,   the list of entries above <code>⊢</code> in a goal state is the context for the goal metavariable. </li>\n<li><code>get_local_context</code> gets the current local context of the type context. As well as each mvar having a local context, the type context itself carries a local context that can be modified. IIRC, when a <code>type_context</code> monad is run this will be the local context of the main goal (ie, the first mvar returned by <code>get_goals</code>.</li>\n</ul>",
        "id": 188242013,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1581711159
    }
]