[
    {
        "content": "<p>Issue <a href=\"https://github.com/leanprover-community/mathlib/issues/4688\">#4688</a> asks for the characteristic of a (semi)ring to be refactored. Unifying the definition of <code>char_p</code> and <code>char_zero</code>. In <a href=\"https://github.com/leanprover-community/mathlib/issues/6753\">#6753</a> Damiano has recently suggested that it would make sense to redefine <code>ring_char</code> in terms of <code>add_order_of (1 : R)</code>. I had similar thoughts, but since this would be a major refactor, I wanted to ask for opinions whether this is desirable at all and what the concrete suggestion would be. </p>\n<p>Like I said, I would imagine that <code>ring_char R = add_order_of (1 : R)</code> and then one could let <code>char_p R p</code> be the class defined by the condition <code>(h : ring_char R = p)</code>. <code>char_zero</code> would then not exist separatly but be the special case <code>char_p R 0</code>. </p>\n<p>(I assume that another option would be to work with something like <code>[fact(ring_char R = p)]</code> but I assumed this was ruled out before since <code>char_p</code> is used a lot). </p>\n<p>What do you think? Are there any suggestions how to make this more managable?</p>",
        "id": 233298056,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1617705502
    },
    {
        "content": "<p>I think this refactor is a good idea. For the transition, my first suggestion would be to do it in multiple steps: change the definition of <code>char_p</code>, change the definition of <code>char_zero</code>, replace usages of <code>char_zero</code> with <code>char_p 0</code>.</p>",
        "id": 233298309,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617705679
    },
    {
        "content": "<p>As long as you keep a definition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_p.cast_eq_zero_iff\">docs#char_p.cast_eq_zero_iff</a>, I expect that you will only need to tweak the instance definitions, no usages.</p>",
        "id": 233298494,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617705805
    },
    {
        "content": "<p><code>add_order_of 1</code> doesn't work for <code>add_monoid</code>s, right? So we do not satisfy point 2 of <a href=\"https://github.com/leanprover-community/mathlib/issues/4688\">#4688</a>.</p>",
        "id": 233298659,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617705902
    },
    {
        "content": "<p>I quickly thought about this and was wondering how to define the \"order\" of an element <code>a</code> in a <code>semigroup/monoid</code>.  I probably would define it to be the smallest gap between two repeated values of the iterated operation of the element on itself:<br>\nthe sequence<br>\n<code>a</code>, <code>a.a</code>, <code>a.a.a</code>,... <br>\neither</p>\n<ul>\n<li>never repeats itself, in which case the order would be zero, or</li>\n<li>repeats a value at some point and the gap between the first repeated values would be the order.</li>\n</ul>\n<p>It seems to me that this should be a reasonable definition, but I have no experience of working with something like this mathematically.  It might be that someone doing dynamics has a better idea, given that the one outlined above is related to pre-periodic points.</p>",
        "id": 233299184,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617706265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> Of course it has to be <code>[add_monoid R] [has_one R]</code>, but this is anyway the minimal assumptions one can put to make sense of <code>ring_char</code>, whatever the definition is. Thanks to previous PRs this definition would typecheck.</p>",
        "id": 233299531,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1617706497
    },
    {
        "content": "<p>I was just wondering whether the supremum of <code>add_order_of</code> would work 1) as another definition, and 2) have a useful meaning outside of semirings.</p>",
        "id": 233299736,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617706640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> At the moment <code>add_order_of a</code> is defined to be the smallest positive number such that <code>n \\smul\\N a=0</code> if it exists and <code>0</code> otherwise. There is a suggestion by Yury to redefine it in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.minimal_period\">docs#function.minimal_period</a>, so that <code>to_additive</code> works in more cases and some statements are for free from the general theory, but I guess this refactor could be done independently or first (I don't imagine it to be terribly difficult. I've changed the definition of <code>order_of</code> before and not that much breaks, the API is pretty robust.)</p>",
        "id": 233299905,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1617706776
    },
    {
        "content": "<p>Ok, using <code>add_order_of</code> for now sounds like a good plan.  I am not really sure that I know good examples of semirings where <code>minimal_period</code> would give me more leverage than <code>add_order_of</code>!</p>",
        "id": 233300145,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617706898
    },
    {
        "content": "<p>Also, I think that <code>add_order_of</code> is relatively \"new\" as a definition in mathilb.  Working with it may also start showing how useful it is in practice.</p>",
        "id": 233300261,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617706981
    },
    {
        "content": "<p>Indeed, it is <a href=\"https://github.com/leanprover-community/mathlib/issues/6770\">#6770</a>, merged 5 days ago.</p>",
        "id": 233300424,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1617707085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> Your supremum definition makes sense if we want to generalise to non-unital rings.</p>",
        "id": 233313647,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1617713985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"317890\">Julian Külshammer</span> <a href=\"#narrow/stream/113488-general/topic/characteristic.20refactor.3F/near/233313647\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> Your supremum definition makes sense if we want to generalise to non-unital rings.</p>\n</blockquote>\n<p>We still don't have <a href=\"https://github.com/leanprover-community/mathlib/pull/6786\">these</a> <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 233315883,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617714829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> That's a pity, but for me the question is, how to redefine <code>ring_char</code> so that when they arrive, it is only a matter of replacing <code>semiring</code> by <code>non_unital_semiring</code> in a few places. To me this feels more natural than defining it for <code>[add_monoid R] [has_one R]</code> for which I know no example.</p>",
        "id": 233329894,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1617720014
    },
    {
        "content": "<p>Dear All,</p>\n<p>I have been experimenting with the definition and it seems that what is below can be made to work.  Following Anne's suggestion, it seems to make sense to define the \"characteristic\" of an <code>add_monoid R</code> as the smallest natural number <code>n</code> such that <code>∀ a : R, n • a = 0</code>, or <code>0</code> if the set of such <code>n</code>s is empty.</p>\n<p>This is also called, I believe, the exponent, at least in the case of a (commutative) group.  So, should we define <code>exponent R</code>?</p>\n<p>What I started with is playing around with the \"annihilating set\" for all of <code>R</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.iterate_hom</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ann</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ann_exists</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ann</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>NB: the elements of <code>ann R</code> are <em>one less</em> than what I would call the annihilator!  Thus, the exponent would have to be defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exponent</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ann</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">ann</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>but written in a way that works in Lean.</p>",
        "id": 233444788,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617780612
    },
    {
        "content": "<p>In my experiments, I have started to prove that <code>ann (zmod n)</code> contains <code>n - 1</code> and, so far, it has not been too rough.</p>",
        "id": 233444836,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617780653
    },
    {
        "content": "<p>I also proved with little effort that, if <code>R</code> is a <code>semiring</code>, then the \"annihilator of 1\" annihilates the whole <code>semiring</code>.</p>",
        "id": 233444946,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617780733
    },
    {
        "content": "<p>By natural number you mean positive integer?</p>",
        "id": 233445153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617780855
    },
    {
        "content": "<p>Why <code>(+ a)^[n] n</code> and not <code>n \\smul a</code> or <code>n \\smul\\N a</code>?</p>",
        "id": 233447281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617782128
    },
    {
        "content": "<p>That would eliminate the off-by-one error you observed!</p>",
        "id": 233447299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617782142
    },
    {
        "content": "<p>Here is a further expansion (I only now read Kevin and Eric's comments).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.iterate_hom</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">char</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ann</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ann_exists</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ann</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zmod.pred_eq_neg_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n.pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span> <span class=\"n\">h.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_eq_zero_iff_eq_neg.mp</span> <span class=\"o\">(</span><span class=\"n\">zmod.nat_cast_self'</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zmod_pred_ann</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">ann</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_left_iterate</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.pred_eq_sub_one</span><span class=\"o\">,</span> <span class=\"n\">zmod.pred_eq_neg_one</span><span class=\"o\">,</span>\n    <span class=\"n\">neg_mul_eq_neg_mul_symm</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">add_left_neg</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_ann</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">kn</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_eq_zero_iff_eq_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.cast_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">zmod.nat_coe_zmod_eq_zero_iff_dvd</span><span class=\"o\">],</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">k.succ_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.lt_asymm</span> <span class=\"n\">this</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">nk</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"n\">hj.ge</span><span class=\"o\">,</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span> <span class=\"n\">h.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">kn</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat.add_lt_of_lt_sub_right</span> <span class=\"n\">kn</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">nk.trans_lt</span> <span class=\"n\">kn</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zmod_not_ann</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">kn</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∉</span> <span class=\"n\">ann</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">add_eq_zero_iff_eq_neg</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_ann</span> <span class=\"n\">kn</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233447411,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617782184
    },
    {
        "content": "<p>Kevin, yes, I meant positive integer!  The \"off-by-one\" thing confused me!  Although, it seems that Eric's suggestion will make this better!</p>",
        "id": 233447492,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617782231
    },
    {
        "content": "<p>Anyway, I now have to meet students: I will be quiet for a while!</p>",
        "id": 233447563,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617782283
    },
    {
        "content": "<p>I did some experiments with <code>minimal_period</code> and my conclusion was that I'd like to introduce the predicate <code>is_of_finite_order</code> which seems similar to your findings. I can push around lunch tiime.</p>",
        "id": 233449719,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1617783420
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7082\">#7082</a> shows the status of the minimal_period refactor right now. Comments welcome, keep in mind it is in an early stage.</p>",
        "id": 233458447,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1617788367
    },
    {
        "content": "<p>According to the strategy which <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> and <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> suggested, after <a href=\"https://github.com/leanprover-community/mathlib/issues/7082\">#7082</a> gets hopefully merged, the next natural step would be to define the exponent of a group (or a monoid). Again we would want that this makes sense for infinite groups. The exponent of a group is the lcm of all the orders of elements of a group. This is a potentially infinite set. As far as I can see, there is only the lcm of a multiset and a finset. Would it make sense to define the lcm of an infinite set as 0 and otherwise as the lcm of the corresponding finset? It looks a bit like what was done for finprod/finsum recently.</p>",
        "id": 234056703,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1618156779
    },
    {
        "content": "<p>These adjectives \"lowest\" and \"highest\" are really unfortunate. The \"lowest\" common multiple of a bunch of naturals should be the unique natural which is a multiple of all of them and which divides all the other naturals which are a multiple of all of them, ie the lowest under the divisibility relation. This is what is always used in practice. So I completely agree that 0 is a good choice here.</p>",
        "id": 234057040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618157063
    },
    {
        "content": "<p>I would have made the same choice: if the <code>set</code> of orders is not finite, define the <code>exponent</code> as zero.  Clearly no finite group will have exponent zero, so, that should also cause no confusion with mathematicians!</p>",
        "id": 234060959,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618160946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> , you had asked to be reminded about PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7082\">#7082</a>, which I am doing now.  However, do not feel pressured to look at it: I can understand that it is not a priority!</p>\n<p>As a side note, I have also made sure that the PR is compatible with Sébastien's refactor.</p>",
        "id": 234533394,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618418751
    },
    {
        "content": "<p>[I thought that it built successfully, but now CI seems to still be going at it.  However, it is in the final Linting/Testing stage]</p>",
        "id": 234533799,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618418885
    },
    {
        "content": "<p>Thank you for the reminder!</p>",
        "id": 234538169,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1618420470
    },
    {
        "content": "<p>Any comments on the following definition of exponent of a group before I start proving stuff about it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.gcd</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.gcd</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_cancel_monoid_with_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">gcd_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">set.lcm</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S.finite</span> <span class=\"k\">then</span> <span class=\"n\">finset.lcm</span> <span class=\"n\">h.to_finset</span> <span class=\"n\">id</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">exponent</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">lcm</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">order_of</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 234822051,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1618565177
    },
    {
        "content": "<p>Hmm, I guess that works. But I would probably have used <code>nat.find</code>.</p>",
        "id": 234822171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618565245
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exponent_exists</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">ex</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">\\</span><span class=\"n\">all</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">\\</span><span class=\"n\">bu</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exponent</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">exponent_exists</span> <span class=\"k\">then</span> <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 234822338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618565322
    },
    {
        "content": "<p>With your definition, you will also need to develop an API for <code>set.lcm</code>. Which is fine, of course. <code>nat.find</code> has 3 lemmas, that's it's total API. So that's maybe also quite minimalistic.</p>",
        "id": 234823045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618565653
    },
    {
        "content": "<p>That also makes sense. The equivalence of both would be one of the first things to prove.</p>",
        "id": 234823097,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1618565671
    },
    {
        "content": "<p>Your approach also has the advantage that I already know all the <code>nat.find</code> API :-)</p>",
        "id": 234823163,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1618565707
    },
    {
        "content": "<p>Pasting your code in my lean asks for the <code>lcm</code> to really be a <code>set.lcm</code>: is this not happening for you?</p>",
        "id": 234823493,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618565876
    },
    {
        "content": "<p>I guess <code>open set</code> is missing</p>",
        "id": 234823562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618565899
    },
    {
        "content": "<p>Sorry, I changed a few things last minute before pasting. I had <code>namespace set</code> there before, but I guess <code>set.exponent</code> doesn't make much sense.</p>",
        "id": 234823805,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1618566034
    },
    {
        "content": "<p>Ok, no worries! I also do not want to sidetrack the discussion: I was simply trying to understand whether there was something funny with my copy of Lean.  Issue settled!</p>",
        "id": 234823903,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618566088
    },
    {
        "content": "<p>On the side of definitions, I think that I prefer Johan's version: you probably do not need to assume that <code>M</code> is a <code>comm_cancel_monoid_with_zero</code> with that...</p>",
        "id": 234824000,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618566127
    },
    {
        "content": "<p>Although I would change <code>n &lt; 0</code> for <code>0 &lt; n</code>...</p>",
        "id": 234824185,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618566223
    },
    {
        "content": "<p>I don't, <code>nat</code> is the <code>comm_cancel_monoid_with_zero</code>, <code>G</code> is just a monoid.</p>",
        "id": 234824195,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1618566232
    },
    {
        "content": "<p>Ah, sorry!  I had missed this!  However, to define exponents with Johan's formulation, you no longer need to define the <code>set.lcm</code>, which I think is a plus.</p>",
        "id": 234824729,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618566455
    },
    {
        "content": "<p>I agree, although it might be good to have it anyway to show the equivalence.</p>",
        "id": 234825095,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1618566621
    },
    {
        "content": "<p>I certainly think that the equivalence should be there, but the definition of <code>exponent</code> should not need the definition of <code>set.lcm</code>, in my opinion.</p>",
        "id": 234825763,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618566966
    },
    {
        "content": "<p>A more uniform way of defining the lcm of a set <code>s</code> of integers (or indexed family) is to pick a generator of the ideal given by intersecting the principal ideals from <code>s</code></p>",
        "id": 234830238,
        "sender_full_name": "David Wärn",
        "timestamp": 1618569129
    },
    {
        "content": "<p>The two waves of refactors, with <code>nat</code> and <code>int</code> have washed over PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7082\">#7082</a>.  I believe that I have resolved all conflicts and CI is checking this right now.</p>\n<p>In case someone wants to take a look at this PR, I would be very grateful!  In particular, I will ping <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> , who had expressed interested in this refactor!</p>\n<p>Thanks a lot!</p>",
        "id": 236299508,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619511604
    }
]