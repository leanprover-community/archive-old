[
    {
        "content": "<p>Is there a way to flip the <code>Type</code> and <code>ℕ</code> parameters around so I can make this a functor?</p>\n<div class=\"codehilite\"><pre><span></span>inductive Bezier (β : Type) : ℕ → Type\n| point : β → Bezier 0\n| curve : Π {n}, Bezier n → β → Bezier (n+1)\n</pre></div>",
        "id": 127578848,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1528167187
    },
    {
        "content": "<p>You can do </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Bezier&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Bezier</span> <span class=\"n\">β</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 127578914,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528167358
    },
    {
        "content": "<p>And make <code>Bezier'</code> a functor (or switch the names)</p>",
        "id": 127578955,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528167377
    },
    {
        "content": "<p>okay, that should work :)</p>",
        "id": 127578967,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1528167427
    },
    {
        "content": "<p>wat</p>\n<div class=\"codehilite\"><pre><span></span>invalid type ascription, term has type\n  g &lt;$&gt; @Bezier&#39;.curve α n (@pure (Bezier&#39; n) (@Bezier&#39;.has_pure n) α x) x =\n    @Bezier&#39;.curve β n (g &lt;$&gt; @pure (Bezier&#39; n) (@Bezier&#39;.has_pure n) α x) (g x)\nbut is expected to have type\n  g &lt;$&gt; @Bezier&#39;.curve α n (@pure (Bezier&#39; n) (@Bezier&#39;.has_pure n) α x) x = ?m_1\n</pre></div>",
        "id": 127579887,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1528169232
    },
    {
        "content": "<p>try <code>set_option pp.all true</code> before your proof. It will display all the implicit parameters, universe levels and expand notations</p>",
        "id": 127579928,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528169324
    },
    {
        "content": "<p>aha, thank you! it was using <code>applicative.to_functor</code> and applicative's default map <span class=\"emoji emoji-1f926\" title=\"face palm\">:face_palm:</span></p>",
        "id": 127580056,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1528169582
    },
    {
        "content": "<p>Do you by any chance have a <code>functor</code> and a <code>applicative</code> instance available in your context?</p>",
        "id": 127580100,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528169648
    },
    {
        "content": "<p>If you're used to Haskell, you'll see that Lean does not ensure that instances are globally unique</p>",
        "id": 127580101,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528169677
    },
    {
        "content": "<p>I get that :) and yes, I have <code>functor</code> and <code>applicative</code>, working on <code>is_lawful_applicative</code></p>",
        "id": 127580114,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1528169714
    },
    {
        "content": "<p>I suggest you make sure that only one is available at any time</p>",
        "id": 127580157,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528169766
    }
]