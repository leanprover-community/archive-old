[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is there anything we can do to avoid the error in:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_or_nonempty</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hs</span><span class=\"o\">),</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208196050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598521568
    },
    {
        "content": "<p><code>rcases</code> doesn't actually do the dirty work here, it's all <code>cases</code> and <code>subst</code> doing the heavy lifting. They both fail here; <code>rfl</code> uses <code>subst</code> so you are seeing this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">app_builder</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_or_nonempty</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[app_builder] failed to build eq.rec, invalid motive:</span>\n<span class=\"cm\">let s : set ℕ := {k : ℕ | k &lt; n} in true</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>while <code>cases</code> gives</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">app_builder</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_or_nonempty</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">cases tactic failed, unsupported equality between type and constructor indices</span>\n<span class=\"cm\">(only equalities between constructors and/or variables are supported, try cases on the indices):</span>\n<span class=\"cm\">(λ (a : ℕ), false) = λ (k : ℕ), k &lt; n</span>\n\n<span class=\"cm\">state:</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">s : set ℕ := {k : ℕ | k &lt; n},</span>\n<span class=\"cm\">e : s = ∅</span>\n<span class=\"cm\">⊢ ((λ (a : ℕ), false) = λ (k : ℕ), k &lt; n) → e == _ → true</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208196452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598521907
    },
    {
        "content": "<p>What proof state are you hoping for after the <code>rcases</code>?</p>",
        "id": 208196505,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598521929
    },
    {
        "content": "<p>They have a point though; the hypothesis in question says <code>{k : ℕ | k &lt; n} = ∅</code> and you can't case on that</p>",
        "id": 208196517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598521948
    },
    {
        "content": "<p>Perhaps this is more to your liking:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_or_nonempty</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208196668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598522061
    },
    {
        "content": "<p>My example is probably too minimized to make sense. I was looking again at an exercise of LFTCM. The tactic state before casing is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)},</span>\n<span class=\"n\">K_closed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">K_cpct</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">K</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"n\">d</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</code></pre></div>\n\n\n<p>And indeed I'd like <code>rfl</code> to bring me to a state where I have an assumption saying <code> {p : X × X | ε ≤ d (f p.fst) (f p.snd)} = ∅</code></p>",
        "id": 208201499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598525659
    },
    {
        "content": "<p>what about not writing <code>rfl</code> but just <code>hK</code>?</p>",
        "id": 208201635,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598525764
    },
    {
        "content": "<p>This is what is done in the current proof, but then you need one extra step. It's not a big deal.</p>",
        "id": 208201680,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598525803
    },
    {
        "content": "<p>If you write <code>rfl</code>, you are saying \"get rid of this assumption by eliminating the lhs\", not \"unfold the let variable in this equality\". There is no rcases step corresponding to <code>unfold h</code> (something tells me that if we keep going this route <code>rcases</code> patterns are going to turn into ssreflect, which is fine with me but possibly not others), but you can achieve the same effect by a type ascription, that is <code>rcases ... with (hK : {p | _} = _) | hs</code>.</p>",
        "id": 208266108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598557321
    },
    {
        "content": "<p>I was probably trying to over-optimize.</p>",
        "id": 208266309,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598557439
    },
    {
        "content": "<p>I'd like to show this proof in a propaganda talk I've been asked to give to students (150 students in 4th and 5th year).</p>",
        "id": 208266406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598557476
    },
    {
        "content": "<p>But I've already simplified the proof enough (compared to what is in the LFTCM repo).</p>",
        "id": 208266457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598557505
    },
    {
        "content": "<p><code>ssrcases</code></p>",
        "id": 208266536,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598557557
    }
]