[
    {
        "content": "<p>Recall that <code>old_structure_cmd</code> doesn't exist in Lean4.<br>\nInstead, Lean4 now has <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/diamond7.lean\">direct support for diamond inheritance</a>.</p>\n<p>Thus in Lean4 <code>class Field (α : Type u) extends DivisionRing α, CommRing α</code> produces constructors and projections like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Field.mk</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">toDivisionRing</span> <span class=\"o\">:</span> <span class=\"n\">DivisionRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Field</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Field.toDivisionRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Field.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">DivisionRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Field.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Field.toCommRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Field.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">CommRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Field.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">@</span><span class=\"n\">CommRing.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivisionRing.toRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toDivisionRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">self</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.mul_comm.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">self</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 256820034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633735702
    },
    {
        "content": "<p>Ideally in the long run in Mathlib4 we will be using this implementation. We need to work out how to get there!</p>",
        "id": 256820063,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633735726
    },
    {
        "content": "<p>Some alternatives:</p>\n<ol>\n<li>remove use of <code>old_structure_cmd</code> from mathlib3 before the port</li>\n<li>during migration, port <code>old_structure_cmd</code> structures by hand to \"new\" structures, and write automation in mathport to align</li>\n<li>during migration, implement <code>old_structure_cmd</code> in mathlib4 and automate the port entirely</li>\n</ol>",
        "id": 256820071,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633735734
    },
    {
        "content": "<p>If 1. is viable, I'm in favour of it:</p>\n<ul>\n<li>it reduces the work mathport needs to do, saving Daniel's effort for other things</li>\n<li>option 3. seems prematurely pessimistic --- it prolongs the life of the old_structure_cmd hack</li>\n<li>option 2. requires additional work during the port, while option 1. can be done now, while we have lots of refactoring resources available</li>\n</ul>",
        "id": 256820107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633735759
    },
    {
        "content": "<p>That said, even option 1. may require some work in mathport, depending on whether we can remove <code>old_structure_cmd</code> in a way that exactly matches the type signatures that \"new structures\" generate.</p>",
        "id": 256820120,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633735771
    },
    {
        "content": "<p>To this end, yesterday I tried removing some uses of <code>old_structure_cmd</code> from mathlib3. I just worked on the \"long-hanging fruit\", to get up to speed, and all the cases I tried were either trivial or easy: <a href=\"https://github.com/leanprover-community/mathlib/issues/9612\">#9612</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/9613\">#9613</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/9614\">#9614</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/9615\">#9615</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/9616\">#9616</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/9617\">#9617</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/9620\">#9620</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/9621\">#9621</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/9622\">#9622</a>.</p>",
        "id": 256820127,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633735781
    },
    {
        "content": "<p>The remaining uses of <code>old_structure_cmd</code> fall mostly into three cases:</p>\n<ul>\n<li>algebraic structures</li>\n<li>algebraic morphisms</li>\n<li>order structures</li>\n</ul>\n<p>I suspect that it makes sense to deal with these \"all at once\" (i.e. 3 seperate refactors), and I'm happy to have a go at these, although if anyone else would like to do some or all please let me know!</p>",
        "id": 256820139,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633735789
    },
    {
        "content": "<p>The basic principle of removing <code>old_structure_cmd</code> is:</p>\n<ol>\n<li>if two parents have overlapping fields, chose a \"preferred\" one</li>\n<li>remove the non-preferred parent from the <code>extends</code> clause</li>\n<li>copy-and-paste the fields of the non-preferred parent into the current structure</li>\n<li>write <code>to_non_preferred_parent</code>, either as a def or an instance</li>\n<li>optionally, write a \"fully-flattened\" constructor that emulates the constructor that <code>old_structure_cmd</code> provided</li>\n<li>update initialization of <code>simps</code> (see examples in PRs above)</li>\n<li>patch downstream code as necessary, particularly use of constructors</li>\n</ol>",
        "id": 256820146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633735795
    },
    {
        "content": "<p>(To be clear, the proposal is that <em>after</em> the mathport phase of the mathlib3 -&gt; mathlib4 port, when we are cleaning up files by hand, we will be able to remove these copy-and-paste fields, and restore the non-preferred parent to the extends clause, and Lean4 will then automatically generate <code>to_non_preferred_parent</code>.)</p>",
        "id": 256820189,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633735803
    },
    {
        "content": "<p>In the PRs I made so far, it was always obvious which was the \"preferred\" parent, and it's slightly less so in the remaining cases. I propose the following preferences:</p>\n<ul>\n<li>data over axioms</li>\n<li>additive stuff over multiplicative stuff</li>\n<li>less-algebraic-structure over upgrading-to-equivalences</li>\n</ul>\n<p>I'm not sure what other decisions will need to be made.</p>",
        "id": 256820199,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633735811
    },
    {
        "content": "<p>So --- in summary:</p>\n<ul>\n<li>If there are reasons I'm missing for not attempting to remove use of <code>old_structure_cmd</code> from mathlib3, please explain them!</li>\n<li>Otherwise, I'll try doing more of this,</li>\n<li>but help is very welcome. :-)</li>\n</ul>",
        "id": 256820206,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633735817
    },
    {
        "content": "<p>When you are doing this, make sure to put an attribute to mark the non-preferred parents as parents</p>",
        "id": 256821436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633736863
    },
    {
        "content": "<p>Won't making this change mean that after telling Leo \"hey, we really want direct support for diamonds\", that the mathlib port will not end up using them at all?</p>",
        "id": 256853549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633769446
    },
    {
        "content": "<p>Immediately after the automatic port, it won't be using diamonds. Instead, it will be using definitions (manually constructed in mathlib3, automatically ported to mathlib4) which are pretty close to what Leo's solution produces. Then, soon after we're happy with the output of mathport, we will delete these definitions, replacing them with multiple-extends-diamond-inheritance.</p>",
        "id": 256853986,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633769959
    },
    {
        "content": "<p>It's just a bridge to get to the point where we are using the direct support for diamonds.</p>",
        "id": 256854003,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633769986
    },
    {
        "content": "<p>(But a bridge for which the work can be done \"on this side of the gap\".)</p>",
        "id": 256854042,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633770003
    },
    {
        "content": "<p>Perhaps this is what Mario was saying above, but it sounds like we should tag every such diamond workaround with a comment (library note?) or attribute, to make them easier to find after the port</p>",
        "id": 256854593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633770532
    },
    {
        "content": "<p>Is there any indication that old_str_cmd is an issue for the port?  I thought we could just ignore it because the nw structure command is more general.</p>",
        "id": 256856034,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633772078
    },
    {
        "content": "<p>I think it limits our flexibility as follows. If we do the port as an automated run through mathport \"from scratch\", and then patch things up afterwards, then yes, we can probably ignore <code>old_structure_cmd</code>. However we're (probably) not doing the port from scratch: we're going to have a partially \"by hand\" ported mathlib, just enough to support writing essential tactics, and then we're going to run <code>mathport</code> \"relative\" to that.</p>\n<p>As an example, we already have <code>Ring</code> in mathlib4, to support writing the <code>ring</code> tactic, and when mathport runs at the moment it can't align the ported <code>ring</code> from mathlib3 with the <code>Ring</code> in mathlib4 (because the <code>ring</code> in mathlib3 has flattened fields), so we get a <code>Ring</code> (hand-ported) and a <code>Ringₓ</code> (generated by mathport).</p>\n<p>That said:</p>\n<ol>\n<li>Of course we can put more effort (either by hand or automation) into aligning <code>Ring</code> and <code>Ringₓ</code>.</li>\n<li>There may not actually be many instances of this problem, because tactics don't actually rely much on the algebraic hierarchy, so we don't need to port much \"by hand\". (And we could re-engineer things to rely even less on the algebraic hierarchy.)</li>\n</ol>",
        "id": 256866582,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633782499
    },
    {
        "content": "<p>There's also just the argument that <code>old_structure_cmd</code> is cruft, and deserves to die. :-) The changes I made so far were surprisingly easy, hence the desire to possibly continue.</p>",
        "id": 256866758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633782674
    },
    {
        "content": "<p>Also re: ignoring it --- the fact that there are <em>some</em> changes that need to be made after removing <code>old_structure_cmd</code> (besides just adding the extra <code>to_parent</code> projections) I'm pretty sure means those changes would be needed during the port. Hopefully by removing <code>old_structure_cmd</code> ahead of time we can make the port have fewer moving pieces.</p>",
        "id": 256866956,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633782845
    },
    {
        "content": "<p>Maybe I am being wildly optimistic about getting alignment for <code>ring</code> without further tweaking or further cleverness in mathport.</p>",
        "id": 256868023,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633783899
    },
    {
        "content": "<p>Which of the PRs you link above actually involve diamonds?</p>",
        "id": 256875773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633791418
    },
    {
        "content": "<blockquote>\n<p>we're going to have a partially \"by hand\" ported mathlib, just enough to support writing essential tactics</p>\n</blockquote>\n<p>I wonder how realistic it is to align these classes.  There are a lot of changes in core that affect them.  For example OfNat vs. has_zero/has_one/has_add.  As a result, the mathlib4 instances are significantly different than the Lean 3 ones.  The encoding scheme for inheritance seems like the least of our worries here.</p>",
        "id": 256886547,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633801685
    },
    {
        "content": "<blockquote>\n<p>so we get a Ring (hand-ported) and a Ringₓ (generated by mathport).</p>\n</blockquote>\n<p>This is not necessarily a huge problem btw.  We can add an <code>instance [Ringₓ R] : Ring R where ...</code> and then the tactic should work.</p>",
        "id": 256891335,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633806200
    },
    {
        "content": "<p>A consequence of removing <code>old_structure_cmd</code> comes up in <a href=\"https://github.com/leanprover-community/mathlib/issues/9774\">#9774</a>; default field values in parent structures no longer work, meaning we need custom <code>mk'</code> constructors and have to replace something readable like <code>{ carrier := C, mul_mem' := h_mul, add_mem' := h_add,  algebra_map_mem' := h_grade0 }</code> with something less readable like <code>mk' C h_mul h_add h_grade0</code>. Are we convinced that removing <code>old_structure_cmd</code> is actually useful enough to the porting effort to justify losing readability?</p>",
        "id": 257911747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634470654
    },
    {
        "content": "<p>It's nothing to do with \"we\", right? Leo has been arguing since about 2017 that old structures are terrible for internal reasons involving horrible blow-up of term size. It took us 4 years to listen to him, but when we started having slowdowns this was diagnosed as the cause. Old structures aren't in Lean 4 and I am pretty sure that they will not be being added to Lean 4 any time soon.</p>",
        "id": 257911878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634470788
    },
    {
        "content": "<p>On the other hand, making cool custom constructors which can do the kind of thing which you're missing is surely well within the scope of Lean 4's fancy macro system</p>",
        "id": 257911940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634470817
    },
    {
        "content": "<blockquote>\n<p>It took us 4 years to listen to him, but when we started having slowdowns this was diagnosed as the cause.</p>\n</blockquote>\n<p>Do we have any data that shows replacing structures in mathlib with new-style ones actually improves performance?</p>",
        "id": 257911941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634470817
    },
    {
        "content": "<p>I think Leo has ample data for him to have made this decision, and indeed he has had it since 2017.</p>",
        "id": 257911976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634470863
    },
    {
        "content": "<blockquote>\n<p>Old structures aren't in Lean 4 and I am pretty sure that they will not be being added to Lean 4 any time soon.</p>\n</blockquote>\n<p>But that's not really relevant, because the new structures in lean4 come with all the behavior we needed from the old structures in the first place.</p>",
        "id": 257912012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634470910
    },
    {
        "content": "<p>I think the fix for your issue is to make a fancy new constructor thing and not to start thinking about old structures again.</p>",
        "id": 257912109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634470987
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/wiki/Refactoring-structures\">https://github.com/leanprover/lean/wiki/Refactoring-structures</a> is Leo's explanation</p>",
        "id": 257912133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634471040
    },
    {
        "content": "<p>You have seen the benefits of a super-fine-grained algebra heirarchy, indeed you have contributed to making it even more complex and this idea seems to make maths in Lean better. But Leo says that this + old structures makes complex algebra classes \"monstrosities behind the scenes\".</p>",
        "id": 257912301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634471178
    },
    {
        "content": "<p>My reading of that page is that eliminating old structures is only half the solution, the other half is redesigning the algebra heirarchy to not carry the data so that it has no diamonds</p>",
        "id": 257912426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634471293
    },
    {
        "content": "<p>And I think the plan to do that half was abandoned long ago</p>",
        "id": 257912462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634471332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/old_structure_cmd.20and.20mathlib4/near/257912012\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>But that's not really relevant, because the new structures in lean4 come with all the behaviour we needed from the old structures in the first place.</p>\n</blockquote>\n</blockquote>\n<p>No, this part is just not the case. The way I am removing <code>old_structure_cmd</code> at the moment is by replacing it with a rough approximation of what Lean4's new structure command will produce. It will be nicer in Lean4 --- we won't have to write out the \"non-preferred parent fields\" by hand, and we won't have to write the <code>to_other_parent</code> declarations ourselves, but they will be produced under the hood.</p>\n<p>Thus, to a first approximation all the changes that need to be made downstream (i.e. after doing those two things) are changes that will need to be made to the library for mathlib4 in any case. Given the choice of doing it now, or doing it mid-port, when many other things are going on as well, and many things are broken, I would far prefer to get it done now.</p>\n<p>It's true that <a href=\"https://github.com/leanprover-community/mathlib/pull/9774#discussion_r730400989\">the thing Eric is annoyed about here</a> (having to write a separate constructor when you use multiple inheritance and fill in some of the preferred-parent fields using default values) will be better in Lean4 than we can currently achieve (I think?). But we can readily change this back after mathlib4 is the official version (i.e. change a few <code>subalgebra.mk'</code> back to structure literals), at very little expense compared to the peace of mind of knowing that mathlib is possible without <code>old_structure_cmd</code>.</p>",
        "id": 257952932,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634508827
    },
    {
        "content": "<p>I don't see how what you say contradicts what Eric said. We used old_structure_cmd for years because \"new structures\" banned diamonds, and this was not an acceptable solution. Lean 4's \"newer\" structure command is a hybrid that allows diamonds but is otherwise new-structure-like.</p>",
        "id": 257953425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634509307
    },
    {
        "content": "<p>It is not clear to me that performing a mathlib refactor to remove old_structure_cmd is necessarily all that helpful for the port. It is good to know if the refactor will hit any major roadblocks, so doing the exploration now is fine, but actually <em>applying</em> the refactor might be counterproductive for synport, since it would prefer to see actual structure instance syntax rather than <code>foo.mk'</code>, and similarly for <code>extends</code> in structures.</p>",
        "id": 257953891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634509747
    },
    {
        "content": "<p>Okay -- but these refactors (unlike the earlier ones) are resulting in lots of changes downstream being required. We really don't want to have to be making those changes \"mid-port\".</p>",
        "id": 257959650,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634515582
    },
    {
        "content": "<p>Further, the experiments only work step by step. I can only remove <code>old_structure_cmd</code> from something once its has been removed from all descendants. I can't really keep going unless we actually apply the earlier stages.</p>",
        "id": 257959787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634515740
    },
    {
        "content": "<p>Could we think about how to remove uses of <code>old_structure_cmd</code>, but to leave some indication (just the <code>@[ancestor]</code> attribute?) so that synport can automatically write new structure commands? </p>\n<p>This had seemed to me like unnecessary extra work in synport: my thought had just been to do the translation from \"by hand newer structures\" to \"actual newer structures\" as a late step in the port, by hand. But we could also automate it.</p>",
        "id": 257959923,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634515900
    },
    {
        "content": "<p>But really my main point is just the above: changing from old structures to newer ones is not completely trivial, and already we're going to have a million things broken in the output of synport, and I think if we can make changes ahead of time we should.</p>",
        "id": 257960035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634516002
    },
    {
        "content": "<p>I agree with Mario.  For synport it would be better to have \"idiomatic Lean 3\", because that is most likely to map to idiomatic Lean 4.  If you don't look under the hood, the Lean 3 old_structure_cmd and Lean 4's structure command behave very similarly.  (The only real difference I can think of is how the cases tactic behaves, but maybe we should change that in Lean 4 instead.)</p>",
        "id": 257992948,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634545271
    },
    {
        "content": "<p>Okay! We'll give it a go that way, I guess. :-) I remain pretty worried about how much stuff is going to be broken even with the most optimistic view of what synport can achieve, but we'll get there somehow.</p>",
        "id": 257996363,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634547240
    },
    {
        "content": "<p>I have some PRs <a href=\"https://github.com/leanprover-community/mathlib/issues/9719\">#9719</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/9739\">#9739</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/9748\">#9748</a> that remove one or two <code>old_structure_cmd</code>, but only incidentally (really they are about making <code>domain</code> and <code>integral_domain</code> mixins, and in fact combining them into a single <code>is_domain</code>). They'll stay on the queue, but <a href=\"https://github.com/leanprover-community/mathlib/issues/9774\">#9774</a> can be abandoned.</p>",
        "id": 257996676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634547406
    },
    {
        "content": "<p>There is still a big difference that, in Lean 4, we will need to choose a preferred parent for the data fields, right? And this choice should be made with conscious design decisions, because this will have an impact performancewise. Currently, there is no way synport will have this kind of information available.</p>",
        "id": 257996926,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1634547545
    },
    {
        "content": "<p>But it does?  Synport can just write the extends clause in the same order.</p>",
        "id": 257997155,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634547635
    },
    {
        "content": "<p>And hopefully the performance impact isn't any worse than old structures to begin with, so this could be optimized after porting</p>",
        "id": 257997222,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634547677
    },
    {
        "content": "<p>What if you have <code>foo</code> with fields <code>A, B, C</code> and <code>bar</code> with fields <code>A, B, D</code>, and you want a class extending <code>foo</code> and <code>bar</code> to pick <code>A, C</code> from <code>foo</code> and <code>B, D</code> from <code>bar</code>? (This is the kind of stuff that you see all the time in the algebraic hierarchy).</p>",
        "id": 257997457,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1634547804
    },
    {
        "content": "<p>With the lean 4 structure command, you get <code>foo</code> as preferred parent and <code>D</code> as a mixin from <code>bar</code>; I don't know what it would mean to pick <code>A, C</code> from <code>foo</code> and <code>B, D</code> from <code>bar</code></p>",
        "id": 257997650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634547906
    },
    {
        "content": "<p>in lean 3 old structures you always merge all common fields, so there is no half and half thing</p>",
        "id": 257997715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634547956
    },
    {
        "content": "<p>i.e. you get one class with <code>A, B, C, D</code> and the forgetful functors to <code>foo</code> and <code>bar</code> do the obvious thing</p>",
        "id": 257997819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634548001
    },
    {
        "content": "<p>There is no constructor that takes a complete <code>foo</code> and a complete <code>bar</code> and mixes and matches fields; this would almost certainly lead to type errors due to the existence of non-defeq <code>foo.A</code> and <code>bar.A</code> in the context</p>",
        "id": 257997900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634548052
    }
]