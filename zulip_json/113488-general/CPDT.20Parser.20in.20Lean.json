[
    {
        "content": "<p>My son got interested in parsers and I'm trying to understand them better by implementing the simple parser at the beginning of Certified Programming with Dependent Types. But actually I find making these inductive types quite hard -- in my area of expertise we don't really ever use complicated inductive structures like the ones showing up in these parsers. Here's an example of one I'm struggling with: in Coq it's</p>",
        "id": 127822804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528555598
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Fixpoint progDenote (p : prog) (s : stack) : option stack :=\nmatch p with\n| nil ⇒ Some s\n| i :: p’ ⇒\nmatch instrDenote i s with\n| None ⇒ None\n| Some s’ ⇒ progDenote p’ s’\nend\nend.\n</pre></div>",
        "id": 127822805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528555612
    },
    {
        "content": "<p><a href=\"http://adam.chlipala.net/cpdt/cpdt.pdf\" target=\"_blank\" title=\"http://adam.chlipala.net/cpdt/cpdt.pdf\">http://adam.chlipala.net/cpdt/cpdt.pdf</a></p>",
        "id": 127822809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528555624
    },
    {
        "content": "<p>page 21</p>",
        "id": 127822814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528555644
    },
    {
        "content": "<p>I tried writing it by hand with <code>list.rec_on</code> (<code>prog := list instr</code>) but I seemed to end up knowing <code>progDenote p' s</code> rather than <code>progDenote p' s'</code>. Presumably this is the sort of thing the equation compiler can do for me somehow? Or is there some complicated issue which makes this definition problematic? I know very little about this sort of stuff beyond <code>rec</code>.</p>",
        "id": 127822933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528555867
    },
    {
        "content": "<p>Oh I see now, I should somehow carry s around as a parameter</p>",
        "id": 127822935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528555879
    },
    {
        "content": "<p>Do you also have the definition of <code>stack</code>?</p>",
        "id": 127822977,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528555931
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">progDenote</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">prog</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stack</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">stack</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">p</span> <span class=\"n\">some</span> <span class=\"err\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">p&#39;</span> <span class=\"n\">pDp&#39;</span> <span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">instrDenote</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">none</span> <span class=\"n\">pDp&#39;</span>\n</pre></div>",
        "id": 127823139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528556375
    },
    {
        "content": "<p>So I can just do it in term mode</p>",
        "id": 127823140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528556381
    },
    {
        "content": "<p>I am slightly unnerved by how incomprehensible mine looks compared to Chlipata's</p>",
        "id": 127823192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528556408
    },
    {
        "content": "<p><code>definition stack := list ℕ</code></p>",
        "id": 127823199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528556423
    },
    {
        "content": "<p>you can plough through <a href=\"http://adam.chlipala.net/cpdt/html/Cpdt.StackMachine.html\" target=\"_blank\" title=\"http://adam.chlipala.net/cpdt/html/Cpdt.StackMachine.html\">http://adam.chlipala.net/cpdt/html/Cpdt.StackMachine.html</a> to find these. I see my error now -- I should have been inducting on p before introducing s. These are subtleties I don't usually run into in my area of mathematics, you rarely induct on something other than nat</p>",
        "id": 127823252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528556546
    },
    {
        "content": "<p>You can also write it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">progDenote</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">prog</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stack</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">stack</span>\n <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">::</span> <span class=\"n\">ss</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>",
        "id": 127823257,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528556585
    },
    {
        "content": "<p>Which I find prettier than Coq</p>",
        "id": 127823260,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528556598
    },
    {
        "content": "<p>Sorry, I should write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">progDenote</span> <span class=\"o\">:</span> <span class=\"n\">prog</span>  <span class=\"bp\">→</span> <span class=\"n\">stack</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">stack</span>\n <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">s</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">::</span> <span class=\"n\">ps</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">instrDenote</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">progDenote</span> <span class=\"n\">ps</span>\n</pre></div>",
        "id": 127823364,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528556825
    },
    {
        "content": "<p>Oh thanks!</p>",
        "id": 127823365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528556833
    },
    {
        "content": "<p>I was just working on this myself but I'm not sure I would have hit upon that crazy smiley thing</p>",
        "id": 127823369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528556852
    },
    {
        "content": "<p>is <code>&gt;&gt;=</code> the smiley? :)</p>",
        "id": 127823370,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528556872
    },
    {
        "content": "<p>I guess he looks pretty sad :-/</p>",
        "id": 127823419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528556956
    },
    {
        "content": "<p>Or angry? I see <code>&gt;&gt;</code> as eyebrows and <code>=</code> as a nose</p>",
        "id": 127823468,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528557007
    },
    {
        "content": "<p>OK here's my effort:</p>",
        "id": 127823527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528557145
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">progDenote&#39;</span> <span class=\"o\">:</span> <span class=\"n\">prog</span> <span class=\"bp\">→</span> <span class=\"n\">stack</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">stack</span>\n<span class=\"bp\">|</span> <span class=\"o\">([])</span> <span class=\"o\">:=</span> <span class=\"n\">some</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">::</span> <span class=\"n\">p&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">instrDenote</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">s&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">progDenote&#39;</span> <span class=\"n\">p&#39;</span> <span class=\"n\">s&#39;</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 127823530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528557149
    },
    {
        "content": "<p>So you are doing the match with this crazy smiley?</p>",
        "id": 127823537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528557196
    },
    {
        "content": "<p>I can see that your <code>progDenote ps</code> is my <code>progDenote p'</code> and then other than that I am sending <code>none</code> to <code>none</code> and <code>s'</code> to <code>s'</code>. You're exploiting this in some way?</p>",
        "id": 127823571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528557242
    },
    {
        "content": "<p>PS <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I felt quite bad a week or so ago when I was trying to write some notation and didn't understand binding powers and was in a rush and you tried to explain them and I just said <code>just gimme the number!</code></p>",
        "id": 127823587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528557323
    },
    {
        "content": "<p>Yes, with option, <code>&gt;&gt;=</code> returns <code>none</code> if either of its parameters does</p>",
        "id": 127823589,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528557335
    },
    {
        "content": "<p>It was partially because of that incident that I thought it was time to learn about parsers!</p>",
        "id": 127823590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528557336
    },
    {
        "content": "<p>Aah I see you're explictly utilising the fact that it's a monad?</p>",
        "id": 127823635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528557378
    },
    {
        "content": "<p>No worries, I got that you were in a rush. And I know I'd always prefer to get deeper into it. But thanks for coming back to it :)</p>",
        "id": 127823640,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528557402
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 127823641,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528557408
    },
    {
        "content": "<p>In Coq, he'd have to do some work to bring that in but it's just there for us in Lean so it's good to get used to it</p>",
        "id": 127823688,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528557485
    },
    {
        "content": "<p>The operators are a bit broken but in Haskell, I'd rather write <code>progDenote ps =&lt;&lt; instrDenote p s</code>. It's a bit like function application with monads (you apply <code>progDenote ps</code> to the result of <code>instrDenote p s</code>)</p>",
        "id": 127823993,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528558241
    },
    {
        "content": "<p>I have my compiler working now and I'd like to do some unit tests using <code>#eval</code>. This means as far as I can see that I have to go and define a bunch of <code>has_repr</code> instances.</p>",
        "id": 127824101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528558492
    },
    {
        "content": "<p>Here's one:</p>",
        "id": 127824102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528558499
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">binop</span>\n<span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"o\">:</span> <span class=\"n\">binop</span>\n<span class=\"bp\">|</span> <span class=\"n\">Times</span> <span class=\"o\">:</span> <span class=\"n\">binop</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">binop</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">binop</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;add&quot;</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Times</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;mul&quot;</span>\n    <span class=\"kn\">end</span>\n<span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127824110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528558513
    },
    {
        "content": "<p>I just wanted to write</p>",
        "id": 127824112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528558523
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">binop</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;add&quot;</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Times</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;mul&quot;</span>\n    <span class=\"kn\">end</span>\n<span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127824115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528558538
    },
    {
        "content": "<p>but that didn't work so I had to put all the match waffle in. Am I missing something?</p>",
        "id": 127824116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528558553
    },
    {
        "content": "<p>No I think that's the way to do it. I was looking to see if it could be generated for you but I haven't found tactics for that</p>",
        "id": 127824169,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528558650
    }
]