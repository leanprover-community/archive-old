[
    {
        "content": "<p>Say I have a function <code>f : α → α → β</code> and I proved that <code>∀ x y, f x y = f y x</code>. I now want to lift it to a function <code>g : sym2 α → β</code> so I use <a href=\"https://leanprover-community.github.io/mathlib_docs/data/sym2.html#sym2.from_rel\"><code>sym2.from_rel</code></a>. But wait! <code>sym2.from_rel</code> is only defined for functions <code>α → α → Prop</code>. And now I'm annoyed.</p>\n<p>Of course <code>Prop</code>-valued functions have nothing special in that context (and for now I've copy-pasted the definition of <code>sym2.from_rel</code> for my purposes and it works just fine), so what about we generalize it?<br>\nThe problem is that <code>sym2.from_rel</code> uses <code>symmetric r</code>, and that is also only defined for <code>Prop</code>-valued functions. Is there any equivalent for <code>Type</code>-valued functions? Note that <code>symmetric</code> is currently very <code>Prop</code>-specific as it is an implication, not an equality.</p>",
        "id": 242713820,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623752611
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/init/logic.html#commutative\"><code>commutative</code></a> is a good candidate, but it's in the core and is about functions <code>α → α → α</code> for no reason.</p>",
        "id": 242713954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623752689
    },
    {
        "content": "<p>If I generalise <code>def commutative {α : Type u} {β : Sort v} (f : α → α → β) : Prop</code>, I think everything goes fine and we can even prove stuff live <code>symmetric iff commutative</code>. Any objections?</p>",
        "id": 242715505,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623753765
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_symm_op\">docs#is_symm_op</a></p>",
        "id": 242725671,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623760729
    },
    {
        "content": "<p>Oh wow, that's quite nice! But still not enough. I want <code>β : Sort v</code> as otherwise I'll have to duplicate code for <code>sym2.from_rel</code>.</p>",
        "id": 242726146,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623760999
    },
    {
        "content": "<p>I don't understand why you have to use sym2.from_rel. Isn't what you want just a quotient.lift? The proof that it lifts into the quotient is so simple, that the duplication, I think, is fine.</p>",
        "id": 242726561,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623761220
    },
    {
        "content": "<p>sym2.from_rel is special because it's doing two things, it's lifting a relationship and also using defeq to turn it into a creation of a set.</p>",
        "id": 242726735,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623761309
    },
    {
        "content": "<p>In your case, you're just lifting the function.</p>",
        "id": 242726802,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623761349
    },
    {
        "content": "<p>You can generalize is_symm_op, basically nothing uses it (I think I've made the sole mathlib instance of it). But there might be some issues with out_param into Sort (or Prop), not sure.</p>",
        "id": 242727002,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623761453
    }
]