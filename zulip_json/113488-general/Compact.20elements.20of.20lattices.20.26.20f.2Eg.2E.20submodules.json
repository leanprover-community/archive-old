[
    {
        "content": "<p>Hey all! I was surprised to find recently that Lean doesn't seem to know that a finitely generated module has a maximal submodule (although it does know this for Noetherian modules). <br>\nWell, I went down a rabbit hole and ended up making a small project out of that, and proved it more generally by way of defining compact elements in (complete) lattices, showing such elements always cover something below them. Then you can get that a submodule is f.g. iff it's compact (and same for other f.g. algebraic substructures).<br>\nHighlights include the defn of compact and the equivalence of the two definitions <a href=\"https://ncatlab.org/nlab/show/compact+element+in+a+lattice\">here</a>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">compact</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_Sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">S.nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">directed_on</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">compact_def</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">compact</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">F</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">F.sup</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>And the main theorems</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_maximal_of_compact</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">set.Ico</span> <span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">set.Ico</span> <span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">submodule_compact_iff_fg</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S.fg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>This was mainly an exercise to do something non-trivial in Lean, but I would be interested in contributing this if there's any interest. I expect there's a lot of clean up and things to do before it's ready for a PR, so I wanted to ask (1) is there any interest in this enough to work on contributing it, and (2) what are some of those things to do to get something up to mathlib standards?</p>",
        "id": 222938854,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1610752085
    },
    {
        "content": "<p>Hi Chase, this certainly sounds interesting to me, I'd encourage you to PR this. A few things to do to get it to mathlib standards are to:</p>\n<ul>\n<li>Check that all the linters are happy (type #lint at the bottom of each file you changed)</li>\n<li>Check out the style guide <a href=\"https://leanprover-community.github.io/contribute/style.html\">https://leanprover-community.github.io/contribute/style.html</a> and naming conventions for lemmas and make sure those are conformed to <a href=\"https://leanprover-community.github.io/contribute/naming.html\">https://leanprover-community.github.io/contribute/naming.html</a> </li>\n<li>Make sure any documentation follows the developed style <a href=\"https://leanprover-community.github.io/contribute/doc.html\">https://leanprover-community.github.io/contribute/doc.html</a></li>\n<li>Make sure all lemmas etc. are in good places, its quite tempting to lump everything in one file when developing something new, but in the end things should be in a logical file for the sort of object they deal with.</li>\n<li>Remove any stray commented out code and random <code>#check blah</code> type lines you may have added when writing </li>\n<li>If you've done all this (or even if you haven't) feel free to open a PR and then add the awaiting-review tag when you're ready, people will undoubtedly have more comments but thats part of the process too!</li>\n</ul>",
        "id": 222940599,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610753225
    },
    {
        "content": "<p>Thanks a lot! I'll get to work on that soon</p>",
        "id": 222943943,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1610755971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> and I have recently been expanding the lattice library, with some related PRs currently in the pipeline</p>",
        "id": 222948127,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1610759455
    },
    {
        "content": "<p>The main file that you should look at, if you haven’t, is <code>order.complete_well_founded.lean</code></p>",
        "id": 222948392,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1610759663
    },
    {
        "content": "<p>Which essentially shows that a complete lattice is well-founded iff all elements are compact, but without quite defining “compact elements”</p>",
        "id": 222948424,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1610759702
    },
    {
        "content": "<p>I totally think that definition belongs in mathlib, and we should edit that file to use it.</p>",
        "id": 222948855,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1610760137
    },
    {
        "content": "<p>Thanks Aaron; that file's pretty recent so I didn't have it - I'll definitely take a look. I'll see if some of what I've done can fit in or around there.</p>",
        "id": 222949947,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1610761155
    },
    {
        "content": "<p>Oh, also, there's certainly some relation between your lemma <code>exists_maximal_of_compact</code> and the definition <code>is_coatomic</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/5588\">#5588</a>.</p>",
        "id": 222951636,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1610762743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"374868\">@Chase Meadors</span> besides the checklist from Alex, there is also <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> that gives an overview of the PR lifecycle.<br>\nCould you please give a rought estimate of how many lines of code you have added/changed? For example using</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git diff --stat master...\n</code></pre></div>",
        "id": 222957708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610769643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"374868\">@Chase Meadors</span> This is great news! I look forward to seeing the definition of compact lattice elements land in Mathlib. These results will be useful and as <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> mentions, it will allow you to refine the results we recently introduced <a href=\"https://leanprover-community.github.io/mathlib_docs/order/complete_well_founded.html\">here</a>.</p>",
        "id": 222980078,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1610801951
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>  I'll be away this weekend but I'll take a look at this soon; I'll message you if I have ideas or questions.<br>\n<span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I only have about 7 theorems comprising about 200 LOC, but I did everything in a scratch file and hadn't decided where to put things yet. It sounds like I should check for some overlap with the areas Aaron and Oliver mentioned before deciding what to contribute.</p>",
        "id": 223015293,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1610843366
    },
    {
        "content": "<p>Enjoy your weekend away!</p>",
        "id": 223034912,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1610877150
    }
]