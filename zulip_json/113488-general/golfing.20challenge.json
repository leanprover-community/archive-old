[
    {
        "content": "<p>Is there a one line proof of this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 242770628,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623778613
    },
    {
        "content": "<p>This is just over the 100 character limit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">set.ext_iff</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">set</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">set</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n<span class=\"c1\">--λ H, by simp at H; ext; specialize H x; set y := f x; set z := g x; fin_cases y; fin_cases z; simp * at *</span>\n</code></pre></div>",
        "id": 242772700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623779524
    },
    {
        "content": "<p>I wish we had <code>sets [y,z] [f x, g x]</code>. Also <code>fin_cases *</code> doesn't work as I expected.</p>",
        "id": 242772820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623779587
    },
    {
        "content": "<p>Golfed <code>specialize</code> down to <code>have :=</code></p>",
        "id": 242773025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623779674
    },
    {
        "content": "<p>Is it ok to move the hypothesis to the left of the colon?</p>",
        "id": 242773186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623779757
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">set.ext_iff</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">set</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">set</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 242773294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623779790
    },
    {
        "content": "<p>That's now &lt; 100 chars</p>",
        "id": 242773309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623779796
    },
    {
        "content": "<p>Nice!</p>",
        "id": 242773354,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623779821
    },
    {
        "content": "<p>I wish <code>fin_cases [f x, g x]</code> would work. That would avoid the <code>set</code>s.</p>",
        "id": 242773361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623779826
    },
    {
        "content": "<p>yeah that would be nice.</p>",
        "id": 242773410,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623779852
    },
    {
        "content": "<p>Moving the <code>have</code> after the two <code>set</code>s  breaks the proof <span aria-label=\"head bandage\" class=\"emoji emoji-1f915\" role=\"img\" title=\"head bandage\">:head_bandage:</span></p>",
        "id": 242775723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623780850
    },
    {
        "content": "<p>Turning <code>have</code> into <code>set</code> or <code>let</code> doesn't work either.</p>",
        "id": 242775792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623780885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/golfing.20challenge/near/242772820\">said</a>:</p>\n<blockquote>\n<p>I wish we had <code>sets [y,z] [f x, g x]</code>. Also <code>fin_cases *</code> doesn't work as I expected.</p>\n</blockquote>\n<p>In term mode <code>let x := 1, y := 2</code> works, but in tactic mode the comma is seen as next tactic, maybe a bracketed version of this would be good though <code>set [x := 1, y := 2]</code>?</p>",
        "id": 242780258,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1623782665
    },
    {
        "content": "<p>A variant of <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> 's proof is now part of  <a href=\"https://github.com/leanprover-community/mathlib/issues/7954\">#7954</a></p>",
        "id": 242783391,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623783931
    },
    {
        "content": "<p>Might be easier to do this for bool (can just use cases on the bool val), and use the fin 2 to bool iso</p>",
        "id": 242785426,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623784834
    },
    {
        "content": "<p>From LTE. I can't believe this proof is optimal, but I don't see a better proof either.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.Sup_mul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">P₁</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">P₂</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P₁</span> <span class=\"bp\">↔</span> <span class=\"n\">P₂</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P₁</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">real.Sup_le</span> <span class=\"n\">_</span> <span class=\"n\">h.1</span> <span class=\"n\">h.2</span><span class=\"o\">,</span>\n        <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">_</span> <span class=\"n\">hr.le</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">real.le_Sup</span> <span class=\"n\">_</span> <span class=\"n\">h.2</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">le_div_iff'</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_le</span> <span class=\"n\">_</span> <span class=\"n\">h.1</span> <span class=\"n\">h.2</span><span class=\"o\">],</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">le_div_iff'</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">real.le_Sup</span> <span class=\"n\">_</span> <span class=\"n\">h.2</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">real.Sup_def</span><span class=\"o\">],</span>\n      <span class=\"n\">classical</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">and_congr</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">exists_comm</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_left'</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">and_comm</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_eq_left'</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">div_eq_iff_mul_eq</span> <span class=\"n\">hr.ne.symm</span><span class=\"o\">],</span>\n      <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_div_cancel</span> <span class=\"n\">y</span> <span class=\"n\">hr.ne.symm</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">le_div_iff</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">hy</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">div_le_iff'</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">hy</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244382362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625034702
    },
    {
        "content": "<p>This is a bit shorter and a bit less gnarly but it's still pretty long:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">le_div_iff</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.Sup_mul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"c1\">-- unbounded case</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.Sup_of_not_bdd_above</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_of_not_bdd_above</span><span class=\"o\">],</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hb</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">foo</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hB</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hrb</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hys</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_le_mul_left</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hB</span> <span class=\"n\">hys</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"c1\">-- empty case</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.not_nonempty_iff_eq_empty</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_empty</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">cSup_le_iff</span> <span class=\"n\">hrb</span> <span class=\"o\">⟨</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hys</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_le_mul_left</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_cSup</span> <span class=\"n\">hb</span> <span class=\"n\">hys</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">cSup_le</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">b</span> <span class=\"n\">hbs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">foo</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_cSup</span> <span class=\"n\">hrb</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hbs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244387755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625039058
    },
    {
        "content": "<p>The problem (for those idly watching on) is that basically the definition of \"Sup S\" is \"if S is empty or unbounded it's zero, else it's what a mathematician would call Sup S\" so I had to break into three cases.</p>",
        "id": 244388357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625039498
    },
    {
        "content": "<p>It feels like we're missing a <code>cSup_image</code> lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.Sup_mul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">Sup</span> <span class=\"o\">(((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  this: monotone f</span>\n<span class=\"cm\">  ⊢ Sup (f '' s) = f (Sup s)</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244389371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625040146
    },
    {
        "content": "<p>Eric, you haven't read Kevin's message carefully enough</p>",
        "id": 244390618,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625040967
    },
    {
        "content": "<p>The lemma you have in mind is wrong. Counter-example: <code>f</code> maps <code>x</code> to <code>x+1</code> and <code>s = univ</code>.</p>",
        "id": 244390682,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625041017
    },
    {
        "content": "<p>You need to add the assumption that <code>f</code> preserves zero and something like <code>f '' s</code> is bounded iff <code>s</code> is bounded. Yes, it's a pain, that's the point.</p>",
        "id": 244390808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625041092
    },
    {
        "content": "<p>Here's the version I'm thinking of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cSup_image</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs'</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hf.map_bdd_above</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hf.cSup_image_le</span> <span class=\"n\">hs'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_upper_bounds</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_cSup</span> <span class=\"n\">hs</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf.le_cSup_image</span> <span class=\"n\">_</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- `Sup s ∈ s` - is this true, given we have a linear order?</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">le_div_iff</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.Sup_mul'</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"c1\">-- unbounded case</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.Sup_of_not_bdd_above</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_of_not_bdd_above</span><span class=\"o\">],</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hb</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">foo</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hB</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"c1\">-- empty case</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.not_nonempty_iff_eq_empty</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_empty</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cSup_image</span> <span class=\"n\">s</span> <span class=\"n\">hb</span> <span class=\"n\">hs</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't know whether that <code>sorry</code> is true</p>",
        "id": 244390979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625041208
    },
    {
        "content": "<p><code>sorry</code> looks false to me: bounded subsets of reals don't need to contain their Sup</p>",
        "id": 244391060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625041258
    },
    {
        "content": "<p>Take <code>(0, x)</code>. The Sup is <code>x</code>, but not contained in the open interval</p>",
        "id": 244391094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625041289
    },
    {
        "content": "<p>Yeah otherwise everything would have a maximal element.</p>",
        "id": 244391136,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1625041316
    },
    {
        "content": "<p>Does <code>cSup_image</code> look true, even if my proof went in a bad direction?</p>",
        "id": 244391485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625041549
    },
    {
        "content": "<p>No, it doesn't</p>",
        "id": 244391574,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625041596
    },
    {
        "content": "<p>Alright, in that case I back down my <code>cSup_image</code> suggestion, and just offer a golfed version of Kevin's proof (keeping his <code>foo</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">real.Sup_mul''</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">Sup</span> <span class=\"o\">(((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"c1\">-- unbounded case</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.Sup_of_not_bdd_above</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_of_not_bdd_above</span><span class=\"o\">],</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hb</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">foo</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hB</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hrb</span> <span class=\"o\">:=</span> <span class=\"n\">hm.map_bdd_above</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"c1\">-- empty case</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.not_nonempty_iff_eq_empty</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_empty</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hm.cSup_image_le</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_cSup</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">cSup_le</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">b</span> <span class=\"n\">hbs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">foo</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_cSup</span> <span class=\"n\">hrb</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hbs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244392029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625041924
    },
    {
        "content": "<p>This is soo painful. This kind of proof is a really cruel example of how far we are from having a usable tool. Where is AI when we need it?</p>",
        "id": 244392270,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625042088
    },
    {
        "content": "<p>Is this an example of <code>cSup</code> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_linear_order\">docs#conditionally_complete_linear_order</a> being too weird a definition to have a generalizable API?</p>",
        "id": 244392345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625042146
    },
    {
        "content": "<p>Eg the fact that we don't have a typeclass that says <code>Sup s = 0</code> if <code>s</code> is not bounded / empty. Maybe the only instance where that's true is the reals though anyway, I think the other instances all have a <code>bot</code>.</p>",
        "id": 244392437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625042194
    },
    {
        "content": "<p>This generalizes out the multiplication, at least (slightly cleaned up):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.Sup_image</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"c1\">-- unbounded case</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.Sup_of_not_bdd_above</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_of_not_bdd_above</span><span class=\"o\">,</span> <span class=\"n\">hf'</span><span class=\"o\">],</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">f.monotone.map_bdd_above</span> <span class=\"n\">hb</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hrb</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">monotone.map_bdd_above</span> <span class=\"n\">f.symm.monotone</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">by_cases</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"c1\">-- empty case</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.not_nonempty_iff_eq_empty</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_empty</span><span class=\"o\">,</span> <span class=\"n\">hf'</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">cSup_le_iff</span> <span class=\"n\">hb</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hys</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">f.monotone</span> <span class=\"o\">(</span><span class=\"n\">le_cSup</span> <span class=\"n\">hrb</span> <span class=\"n\">hys</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">f.apply_symm_apply</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">f.monotone</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">cSup_le</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">f.symm.monotone</span> <span class=\"o\">(</span><span class=\"n\">f.monotone.le_cSup_image</span> <span class=\"n\">hb</span> <span class=\"n\">hrb</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.Sup_mul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">],</span>\n  <span class=\"k\">let</span> <span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">real.Sup_image</span> <span class=\"n\">s</span> <span class=\"n\">ff</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hr.ne'</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hr.ne'</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_le_mul_left</span> <span class=\"n\">hr</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244392658,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1625042356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/golfing.20challenge/near/244392270\">said</a>:</p>\n<blockquote>\n<p>This is soo painful. This kind of proof is a really cruel example of how far we are from having a usable tool. Where is AI when we need it?</p>\n</blockquote>\n<p>I claim that the reason it's painful is that we spend a lot of time dealing with the junk case where Sup(S) is meaningless and it coincidentally happens to be the case that the lemma is true anyway -- this is precisely what hurts Eric's approach, where a more conceptual lemma is not true because it fails in the junk cases. However Johan is a mathematician so presumably only cares about this lemma in the case where Sup(S) is not junk, in which case the proof is just those last 8 lines of Eric's proof and looks far more reasonable. So whilst I agree with you that in some sense this is a problem with the tool, the problem is that we mathematicians now have taken on board this whole \"garbage in garbage out\" approach with our definitions and are trying to prove lemmas which are easier for people to use, and harder to prove. </p>\n<p>I think the real question is: take Eric's abstraction about monotone functions and sups, and now add in the hypotheses that the set is nonempty and bounded. Then the abstraction becomes true, the proof will be short, and it looks useful to me. Is this good enough for Johan's application? I bet it is.</p>",
        "id": 244393170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625042646
    },
    {
        "content": "<p>Argument from CS people: \"the great thing about garbage-in garbage-out defs is that sometimes stuff is true without side conditions! For example a/b + c/b = (a+c)/b is true without assuming b=0! This is a big win!\". Mathematician: \"...but I have hb : b != 0 in my local context anyway\"</p>",
        "id": 244393349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625042773
    },
    {
        "content": "<blockquote>\n<p>Is this good enough for Johan's application? I bet it is.</p>\n</blockquote>\n<p>Yes it is. But it shifts the burden, as you say yourself:</p>\n<blockquote>\n<p>prove lemmas which are easier for people to use, and harder to prove.</p>\n</blockquote>",
        "id": 244393384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625042804
    },
    {
        "content": "<p>We all agree that it's cute that <code>/</code> can be extended to all of the reals, however it extends to a junk function which mathematicians have no use for most of the time apart from super-low-level stuff, so will not show up at all after some point (in the sense that <code>hb : b != 0</code> will always be there)</p>",
        "id": 244393416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625042832
    },
    {
        "content": "<p>Because it means that I have to do the painful checking that my input is not garbage at the place where I want to apply the lemma. And at that point I really don't want to be bothered by those \"silly\" side conditions.</p>",
        "id": 244393439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625042847
    },
    {
        "content": "<p>So you're saying that you _don't_ have the handy hypotheses that S is nonempty and bounded above in your local context, even though they're going to be there in the mathematical source you're formalising?</p>",
        "id": 244393559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625042906
    },
    {
        "content": "<p>Let me check exactly what I have</p>",
        "id": 244393581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625042933
    },
    {
        "content": "<p>If this is a serious problem for you then probably one should push ahead with Eric's abstraction</p>",
        "id": 244393593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625042944
    },
    {
        "content": "<p>The norm of a locally constant function is the Sup norm. But if the range is empty or unbounded...</p>",
        "id": 244393763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625043043
    },
    {
        "content": "<p>There should perhaps be a \"one size fits all\" lemma of the form \"to prove some theorem about Sups, it suffices to prove it when all the sets are nonempty and bounded above, and also that it works for 0\" (except I am currnetly unclear how one manages the situation we have here, where there are two sets and it's a cute lemma that one is empty/unbounded iff the other one is), and then use the mono lemma for the sensible case...oh crap the mono lemma isn't even true in the unbounded case of course, it needs continuity as well</p>",
        "id": 244393796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625043070
    },
    {
        "content": "<p>So, we are on a compact space, so it cannot be unbounded. But it can still be empty.</p>",
        "id": 244393817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625043080
    },
    {
        "content": "<p>Mathematically, the sup of an empty collection of norms is the sup of the empty set in <code>nnreal</code> so it really is 0</p>",
        "id": 244393858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625043114
    },
    {
        "content": "<p>Maybe we should embrace <code>nnreal</code> a bit more.</p>",
        "id": 244393928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625043136
    },
    {
        "content": "<p>The analysts seem to have thought hard about where to use it (e.g. they don't want to use it for metric spaces but do want to use it for some measure theory)</p>",
        "id": 244394040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625043234
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/prop_92/concrete.lean#L58L127\">https://github.com/leanprover-community/lean-liquid/blob/master/src/prop_92/concrete.lean#L58L127</a> for a bit more pain</p>",
        "id": 244394102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625043251
    },
    {
        "content": "<p>Kevin, the issue is not only that S can be unbounded, it's also that S can be bounded and f(S) unbounded.</p>",
        "id": 244394628,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625043585
    },
    {
        "content": "<p>If <code>f</code> is a <code>A ≃o A</code> as in <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>'s version then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monotone.map_bdd_above\">docs#monotone.map_bdd_above</a> means that f(S) and S are both bounded, right?</p>",
        "id": 244397570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625045447
    },
    {
        "content": "<p>Aah interesting -- Patrick and I are thinking of maps like y=tan(x) which send the bounded region (-pi/2,pi/2) to an unbounded region, but tan is not defined on all of the reals.</p>",
        "id": 244398756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625046119
    },
    {
        "content": "<p>Another issue with the latest proposed <code>cSup_image</code> lemma is that <code>f</code> can be discontinuous at <code>Sup x</code>: <code>s = {x : ℝ | x &lt; 0}</code> and <code>f = real.sign</code>.</p>",
        "id": 244399521,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1625046510
    },
    {
        "content": "<p>Here's a generalized version of <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>'s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">order_iso.cSup_image</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs'</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">):</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">f.monotone.cSup_image_le</span> <span class=\"n\">hs'</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_cSup</span> <span class=\"n\">hs</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">f.apply_symm_apply</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">f.monotone</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">cSup_le</span> <span class=\"n\">hs'</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">f.symm.monotone</span> <span class=\"o\">(</span><span class=\"n\">f.monotone.le_cSup_image</span> <span class=\"n\">hb</span> <span class=\"n\">hs</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">f.symm_apply_apply</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.Sup_image</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"c1\">-- unbounded case</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.Sup_of_not_bdd_above</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_of_not_bdd_above</span><span class=\"o\">,</span> <span class=\"n\">hf'</span><span class=\"o\">],</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">f.monotone.map_bdd_above</span> <span class=\"n\">hb</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hrb</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">monotone.map_bdd_above</span> <span class=\"n\">f.symm.monotone</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">by_cases</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"c1\">-- empty case</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.not_nonempty_iff_eq_empty</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">real.Sup_empty</span><span class=\"o\">,</span> <span class=\"n\">hf'</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">f.cSup_image</span> <span class=\"n\">s</span> <span class=\"n\">hrb</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- `equiv.mul_left'` as an order_iso. TODO: add this for all the other equivs too. -/</span>\n<span class=\"kd\">@[simps {simp_rhs := tt}]</span>\n<span class=\"kd\">def</span> <span class=\"n\">order_iso.mul_left'</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mul_le_mul_left</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">equiv.mul_left'</span> <span class=\"n\">k</span> <span class=\"n\">hk.ne'</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.Sup_mul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">real.Sup_image</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">order_iso.mul_left'</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_zero</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244399623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625046587
    },
    {
        "content": "<p><del>My guess would be that <code>mul_left_iso</code> already exists somewhere</del>. Yep: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.mul_left'\">docs#equiv.mul_left'</a></p>",
        "id": 244399850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625046723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  the first lemma is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.nonempty.cSup_mem\">docs#set.nonempty.cSup_mem</a></p>",
        "id": 244399988,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1625046803
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8150\">#8150</a> adds <code>order_iso.mul_left'</code> and similar defintions</p>",
        "id": 244445212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625068246
    }
]