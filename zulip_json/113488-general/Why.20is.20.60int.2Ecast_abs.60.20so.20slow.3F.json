[
    {
        "content": "<p>On the latest mathlib master, I was surprised that the combination of simp lemmas <code>[max_eq_left, neg_le_self_iff, inv_nonneg]</code> are very slow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.cast</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- Original code from `src/data/int/cast.lean`</span>\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">theorem</span> <span class=\"n\">cast_abs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">|</span><span class=\"n\">q</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">q</span><span class=\"bp\">|</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">abs_eq_max_neg</span><span class=\"o\">]</span> <span class=\"c1\">-- tactic execution took 1.3s</span>\n<span class=\"c1\">-- `squeeze_simp`sed:</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">|</span><span class=\"n\">q</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">q</span><span class=\"bp\">|</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">abs_eq_max_neg</span><span class=\"o\">,</span> <span class=\"n\">int.cast_max</span><span class=\"o\">,</span> <span class=\"n\">int.cast_neg</span><span class=\"o\">]</span> <span class=\"c1\">-- tactic execution took 49ms</span>\n<span class=\"c1\">-- With the offending lemmas back in:</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">|</span><span class=\"n\">q</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">q</span><span class=\"bp\">|</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">abs_eq_max_neg</span><span class=\"o\">,</span> <span class=\"n\">int.cast_max</span><span class=\"o\">,</span> <span class=\"n\">int.cast_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_le_self_iff</span><span class=\"o\">,</span> <span class=\"n\">inv_nonneg</span><span class=\"o\">,</span> <span class=\"n\">max_eq_left</span><span class=\"o\">]</span> <span class=\"c1\">-- tactic execution took 1.48s</span>\n</code></pre></div>",
        "id": 266939971,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641391989
    },
    {
        "content": "<p>More specific test cases:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.cast</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- tactic execution took 1.64s</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_le_self_iff</span><span class=\"o\">,</span> <span class=\"n\">inv_nonneg</span><span class=\"o\">,</span> <span class=\"n\">max_eq_right</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- tactic execution took 1.17s</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- tactic execution took 527s</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_le_self_iff</span><span class=\"o\">,</span> <span class=\"n\">inv_nonneg</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- tactic execution took 508s</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_le_self_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- tactic execution took 14ms</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inv_nonneg</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- tactic execution took 13ms</span>\n</code></pre></div>",
        "id": 266940037,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641392045
    },
    {
        "content": "<p>I noticed this lemma was being elaborated slowly when trying out <a href=\"https://github.com/leanprover-community/lean/pull/659\">lean#659</a> on mathlib, but it turns out the slowness was there already.</p>",
        "id": 266940270,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641392167
    },
    {
        "content": "<p>As expected, it seems to come from an extremely slow defeq check <code>0 ≤ q =?= 0 ≤ ?m_1⁻¹</code>. This is then triggering many pages of cached failure for <code>linear_ordered_field ℤ</code>.</p>",
        "id": 266941749,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641393035
    },
    {
        "content": "<p>The check is specifically for the zero of <code>linear_ordered_field</code> to equal the zero of <code>linear_ordered_ring</code>, by checking that <code>linear_ordered_field.to_linear_ordered_comm_ring.to_linear_ordered_ring.to_ordered_ring.to_ring.to_non_unital_non_assoc_ring.to_non_unital_non_assoc_semiring.to_mul_zero_class.to_has_zero.zero</code> coincides with <code>linear_ordered_ring.to_ordered_ring.to_ring.to_non_unital_non_assoc_ring.to_non_unital_non_assoc_semiring.to_mul_zero_class.to_has_zero.zero</code>, and it looks like it's exponentially slow in doing so:</p>\n<ol>\n<li>for each <code>to_subclass</code>, they match so check that their arguments match, by considering the <code>to_subclass</code> of the parent.</li>\n<li>these are both constructor applications, so check their fields are the same. well, the <code>add</code> field is just <code>linear_ordered_field.to_subclass...to_subclass.add =?= int.linear_ordered_comm_ring.to_subclass.to_subclass....to_subclass.add</code>, which looks the same so call 1 on the parent class.</li>\n<li>eventually we get stuck on <code>linear_ordered_field.add ℤ ?m_1 =?= int.add</code>, fail the comparison, unfold the <code>to_subclass</code> of the parent class and go back to 1.</li>\n</ol>\n<p>for each time that we go through 3, we add as many iterations of 2 as we have already done, together with an extra unfold, so this is exponentially slow in the length of the inheritance chain.</p>",
        "id": 266945077,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641394730
    },
    {
        "content": "<p>Did someone fix this already, or did you forget an 'm' before the 's'?  I'm getting 879ms, 598ms, 457ms, 181ms, 6ms, 6ms on your second example.  It's not great, but not the ten minutes I was expecting either.</p>",
        "id": 266979490,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641410952
    },
    {
        "content": "<p>(Sorry, missed your reply last time!) This really is what the profiler reports on my machine. Perhaps it depends on the mathlib version, since the hierarchy got restructured a bit recently with the <code>non_unital_non_assoc_ring</code>.</p>",
        "id": 267182018,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641557562
    },
    {
        "content": "<p>So really 8.5 minutes, wow.  If I understand your analysis correctly, then this should also be fixed in Lean 4 since step 3 should succeed due to η.  But I didn't verify this in mathlib3port yet.</p>",
        "id": 267182197,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641557692
    },
    {
        "content": "<p>Ah oops, debug traces are expensive! Perhaps I should run the actual code I posted instead... Now I have timings similar to yours: 1.53s, 1.2s, 779ms, 585ms, 22ms, 13ms.</p>",
        "id": 267182572,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641557986
    }
]