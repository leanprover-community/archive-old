[
    {
        "content": "<p>There is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">neg_add_eq_sub</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">subtraction_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>in the root name space and defined in <code>algebra.group.basic</code>, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">tactic.ring.add_neg_eq_sub</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>in the <code>tactic.ring</code> namespace and defined in <code>tactic.ring</code>.<br>\nIs there a (good) reason for this asymmetry?<br>\n(There are a few other statements in <code>tactic.ring</code> that look like they should be in <code>algebra.group.basic</code> or a similar file.)</p>",
        "id": 292619880,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1660065021
    },
    {
        "content": "<p>You can ignore the lemmas in the<code>tactic.ring</code> namespace, they only exist to be used by the <code>ring</code> tactic</p>",
        "id": 292621951,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1660065709
    },
    {
        "content": "<p>But <code>add_neg_eq_sub</code> does not seem to exist somewhere else (and I just needed it).</p>",
        "id": 292622783,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1660065992
    },
    {
        "content": "<p><code>suggest</code> told me that the statement is <code>tactic.ring....</code>.</p>",
        "id": 292622864,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1660066027
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_eq_add_neg\">docs#sub_eq_add_neg</a></p>",
        "id": 292627080,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660067525
    },
    {
        "content": "<p>Thanks. Why is <code>neg_add_eq_sub</code> in the other direction?</p>",
        "id": 292627465,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1660067651
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_eq_neg_add\">docs#sub_eq_neg_add</a> also exists. Not sure why <code>neg_add_eq_sub</code> is reversed.</p>",
        "id": 292633817,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660069848
    },
    {
        "content": "<p>Tactics often come with peculiarly stated lemmas simply because it's much easier to run the elaborator outside the tactic than it is to build complex term mode proofs within it</p>",
        "id": 292642012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660072909
    },
    {
        "content": "<p>(in my experience, largely due to <code> `(_) </code> notation not working with universe metavariables)</p>",
        "id": 292642121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660072937
    },
    {
        "content": "<p>That explains <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.ring.add_neg_eq_sub\">docs#tactic.ring.add_neg_eq_sub</a>, not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/neg_add_eq_sub\">docs#neg_add_eq_sub</a>.</p>",
        "id": 292643368,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660073452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Namespaces.20for.20ring.20lemmas/near/292642012\">said</a>:</p>\n<blockquote>\n<p>Tactics often come with peculiarly stated lemmas simply because it's much easier to run the elaborator outside the tactic than it is to build complex term mode proofs within it</p>\n</blockquote>\n<p>It's also significantly more efficient. In many cases you don't even need to call the elaborator at all, you just call expr constructors directly</p>",
        "id": 292668307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660084416
    },
    {
        "content": "<p>Ah, the point being that everything is elaborated once at startup rather than on each tactic invocation?</p>",
        "id": 292672568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660087039
    }
]