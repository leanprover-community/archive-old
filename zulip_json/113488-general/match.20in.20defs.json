[
    {
        "content": "<p>Out of the following two definitions, I find the first much easier to use.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">private</span>  <span class=\"n\">def</span>  <span class=\"n\">mul_aux</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">loc</span> <span class=\"n\">α</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"err\">⟦</span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span>  <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span>  <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"err\">⟧</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">mul_aux</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">loc</span> <span class=\"n\">α</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">r₁</span><span class=\"o\">,</span> <span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">hs₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">hs₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"err\">⟦</span><span class=\"bp\">⟨</span><span class=\"n\">r₁</span> <span class=\"bp\">*</span> <span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"n\">s₁</span> <span class=\"bp\">*</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">hs₁</span> <span class=\"n\">hs₂</span><span class=\"bp\">⟩</span><span class=\"err\">⟧</span>\n</pre></div>\n\n\n<p>The first one unfolds much more easily if I give it arguments either of the form <code>x y</code> but also works okay with <code>⟨r₁, s₁, hs₁⟩ ⟨r₂, s₂, hs₂⟩</code> as arguments. What are the advantages/disadvantages of each approach?</p>",
        "id": 124532070,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522683999
    },
    {
        "content": "<p>Let me make the comment that in the past, when I have used pointy brackets and lambdas when writing a definition, I've found it much more difficult to prove things by rfl because high powered stuff is going on behind the scenes.</p>",
        "id": 124540129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522696074
    },
    {
        "content": "<p>Essentially, I think it's because<code> λ ⟨r₁, s₁, hs₁⟩ </code> uses prod.rec and subtype.rec, or the various derived lemmas like <code>subtype.cases_on</code> and these don't reduce to anything unless you give them something of the form <code>subtype.mk _ _</code> The first def will unfold when the arguments are not of the form <code>subtype.mk _ _</code></p>",
        "id": 124544887,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522702352
    },
    {
        "content": "<p>don't use any pointy brackets or tactics in a definition</p>",
        "id": 124545185,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522702767
    },
    {
        "content": "<p>Any reason not to want this?</p>\n<div class=\"codehilite\"><pre><span></span>private def mul_aux : α × S → α × S → loc α S\n| ⟨r₁, s₁, hs₁⟩ ⟨r₂, s₂, hs₂⟩ := ⟦⟨r₁ * r₂, s₁ * s₂, is_submonoid.mul_mem hs₁ hs₂⟩⟧\n</pre></div>\n\n\n<p>It only unfolds with explicit tuples, unlike the first alternative. In the second alternative, it will unfold to a useless auxiliary definition.</p>",
        "id": 124552407,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522714342
    },
    {
        "content": "<p>it's private</p>",
        "id": 124552424,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522714390
    },
    {
        "content": "<p>Why is that relevant?</p>",
        "id": 124552442,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522714436
    },
    {
        "content": "<p>it isn't</p>",
        "id": 124552499,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522714539
    },
    {
        "content": "<p>Why was that your response to my question then?</p>",
        "id": 124552550,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522714577
    },
    {
        "content": "<p>it wasn't</p>",
        "id": 124552626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522714707
    },
    {
        "content": "<p>it's relevant because I'm not going to unfold that definition except in the definition of multiplication</p>",
        "id": 124552651,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522714793
    },
    {
        "content": "<p>and I only need to use its properties, not its definition</p>",
        "id": 124552691,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522714806
    },
    {
        "content": "<p>Are you saying that the whole conversation is pointless?</p>",
        "id": 124552703,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522714892
    },
    {
        "content": "<p>he's asking about one of my definitions</p>",
        "id": 124552745,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522714928
    },
    {
        "content": "<p>I don't know why he's doing that</p>",
        "id": 124552746,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522714932
    },
    {
        "content": "<p>ok</p>",
        "id": 124552749,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522714962
    },
    {
        "content": "<blockquote>\n<p>Are you saying that the whole conversation is pointless?</p>\n</blockquote>\n<p>• &lt;-- there you go, a point</p>",
        "id": 124552750,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522714963
    },
    {
        "content": "<p>Sorry that, was the wrong place to write that.</p>",
        "id": 124552879,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522715233
    },
    {
        "content": "<p>sorry</p>",
        "id": 124552882,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522715248
    }
]