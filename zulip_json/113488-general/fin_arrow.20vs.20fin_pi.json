[
    {
        "content": "<p>Aren't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/encodable.fin_arrow\">docs#encodable.fin_arrow</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/encodable.fin_pi\">docs#encodable.fin_pi</a> creating a (not even propeq) diamond?</p>",
        "id": 278706385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649776002
    },
    {
        "content": "<p>Also, can't both be generalized by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">pi.encodable</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">encodable</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">encodable</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 278707693,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649776510
    },
    {
        "content": "<p>Thats <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype_pi\">docs#fintype_pi</a> . You need to pick some order on iota right? So if you want a computable instance you have to stick to fin, unless there is some succ_order generalization?</p>",
        "id": 278708202,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1649776708
    },
    {
        "content": "<p>Read carefully. I added <code>[encodable ι]</code>.</p>",
        "id": 278708363,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649776780
    },
    {
        "content": "<p>A finite encodable type has an ordering that can be used for this purpose</p>",
        "id": 278708390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649776789
    },
    {
        "content": "<p>and you get the current instances out of mine using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/encodable.trunc_encodable_of_fintype\">docs#encodable.trunc_encodable_of_fintype</a></p>",
        "id": 278708565,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649776845
    },
    {
        "content": "<p>Having just read your PR that adds docstrings and renames, your generalization looks like a good one to me</p>",
        "id": 278716521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649780465
    },
    {
        "content": "<p>Okay I will try it then <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 278716787,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649780598
    }
]