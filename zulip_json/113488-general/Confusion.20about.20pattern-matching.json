[
    {
        "content": "<p>Hello,</p>\n<p>I'm trying Lean, and have been confused by the following, rather simple code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mkx</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">catax</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">mkx</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>This works, but if I try and write <code>(mkx f)</code> for the pattern in <code>catax</code>, I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">trace.eqn_compiler.elim_match</span> <span class=\"n\">true'</span> <span class=\"n\">for</span> <span class=\"n\">additional</span> <span class=\"n\">details</span><span class=\"o\">)</span>\n<span class=\"n\">invalid</span> <span class=\"n\">application</span><span class=\"o\">,</span> <span class=\"n\">function</span> <span class=\"n\">expected</span>\n</code></pre></div>\n<p>I feel like I have done other pattern-matches elsewhere where the opposite was true, so am I doing something silly here that I'm not noticing?</p>",
        "id": 249526983,
        "sender_full_name": "Valentin Robert",
        "timestamp": 1629055670
    },
    {
        "content": "<p>This works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mkx</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">catax</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x.mkx</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 249527445,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1629056409
    },
    {
        "content": "<p>To be more explicit: this is a namespacing issue. You can also type <code>open x</code> between your two declarations.</p>",
        "id": 249527601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629056741
    },
    {
        "content": "<p>Huh, of course!<br>\nSo in my working example, <code>mkx</code> in the pattern is just a binding catch-all pattern? :D</p>",
        "id": 249529881,
        "sender_full_name": "Valentin Robert",
        "timestamp": 1629060667
    }
]