[
    {
        "content": "<p>I still don't know enough binding power wizardry to do what I want. Say I have a binary operation <code>#</code>. How can I define it so that <code>f a # b</code> is parsed as <code>f (a # b)</code>? I tried putting random numbers where I expect Lean to expect binding powers, but failed.</p>",
        "id": 165314263,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557471253
    },
    {
        "content": "<p>Of course <code>f</code> is meant to be a function</p>",
        "id": 165314266,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557471268
    },
    {
        "content": "<p>is there any such operation in Lean?</p>",
        "id": 165314370,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1557471450
    },
    {
        "content": "<p>iirc not even <code>*</code> has that priority</p>",
        "id": 165314372,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1557471457
    },
    {
        "content": "<p>There are a lot of such operations in maths</p>",
        "id": 165314423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557471488
    },
    {
        "content": "<p>They probably want us to use <code>$</code>...</p>",
        "id": 165314435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557471511
    },
    {
        "content": "<p>I understand that, and actually I've get used to <code>$</code> and use it a lot now. But the context for this question forbids this trick (we want one file from the perfectoid project to be readable by mathematicians who never saw any proof assistant or functional programming language)</p>",
        "id": 165314456,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557471597
    },
    {
        "content": "<p>I'm just pointing out that nothing overrides function application iirc</p>",
        "id": 165314535,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1557471692
    },
    {
        "content": "<p>You just need to set the binding precedence high enough. But this isn't intended for mathlib, right? This goes against the normal notation customs and I think it would be very confusing.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">infix</span> <span class=\"bp\">`#`</span><span class=\"o\">:</span><span class=\"mi\">10000</span> <span class=\"o\">:=</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">#</span> <span class=\"mi\">3</span>\n</pre></div>",
        "id": 165314938,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557472242
    },
    {
        "content": "<p>Application is at precedence level 1024</p>",
        "id": 165315133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557472502
    },
    {
        "content": "<p>also known confusingly as <code>max</code></p>",
        "id": 165315161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557472526
    },
    {
        "content": "<p>many unary prefix and postfix notations are at precedence \"max_plus\" which is max + 10</p>",
        "id": 165315223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557472569
    },
    {
        "content": "<p>I tried with <code>notation</code> instead of <code>infix</code>, I guess this explains I couldn't do it</p>",
        "id": 165315313,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557472703
    },
    {
        "content": "<p>but with <code>infix</code> I get weird type class search issues</p>",
        "id": 165315319,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557472716
    },
    {
        "content": "<p>Lean doesn't seem to resolve instances when I use my notation (this has nothing to do with the precedence thing)</p>",
        "id": 165315345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557472789
    },
    {
        "content": "<p>does using <code>local</code> notation/infix help?</p>",
        "id": 165315488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557472956
    },
    {
        "content": "<p>Do I need to define a class <code>has_</code>?</p>",
        "id": 165315493,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557472969
    },
    {
        "content": "<p>I'll try the local thing</p>",
        "id": 165315495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557472975
    },
    {
        "content": "<p>it changes nothing</p>",
        "id": 165315513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557473000
    },
    {
        "content": "<p>details</p>",
        "id": 165315525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557473034
    },
    {
        "content": "<p><code> notation R `∕` x :=  ideal.quotient (ideal.span ({x} : set R))</code> works fine but does not take precedence over function application. <code>infix `∕`:max_plus := λ R x, (ideal.quotient (ideal.span ({x} : set R)))</code> fails to find <code>comm_ring R</code> which is obvious</p>",
        "id": 165315656,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557473184
    },
    {
        "content": "<p>Note that this is not a regular <code>/</code> but unicode division sign</p>",
        "id": 165315676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557473240
    },
    {
        "content": "<p>Does it work if you do <code>def idq := λ R x, (ideal.quotient (ideal.span ({x} : set R)))</code> and then <code>infix `∕`:max_plus := idq</code>?</p>",
        "id": 165317298,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557475431
    },
    {
        "content": "<p>With whatever type class instances you need in <code>idq</code>.</p>",
        "id": 165317372,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557475467
    },
    {
        "content": "<p>Make <code>idq</code> reducible if necessary.</p>",
        "id": 165317448,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557475523
    }
]