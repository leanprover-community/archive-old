[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.mem_def\">docs#option.mem_def</a> (<code>a ∈ b ↔ b = option.some a</code>) is already marked simp, but we have a lot of <code>iff</code> lemmas with <code>a ∈ b </code> on the LHS (eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alist.mem_lookup_union\">docs#alist.mem_lookup_union</a>). Should we change all of these to use the <code>=</code> spelling?</p>\n<p>This comes up in <a href=\"https://github.com/leanprover-community/mathlib/pull/14930\">#14930</a>, as lean 3.44.0 is much more eager to apply <code>option.mem_def</code> than it used to be.</p>",
        "id": 287340760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656082180
    },
    {
        "content": "<p>Alternatively, we could make <code>option.mem_def</code> not be a simp lemma</p>",
        "id": 287340991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656082275
    },
    {
        "content": "<p>On the one hand, simping away all instances of <code>a ∈ b</code> seems weird to me, because why define that notation in the first place? On the other hand, <code>b = some a</code> is much more familiar/useful to me than <code>a ∈ b</code> so I'd rather keep <code>mem_def</code>.</p>",
        "id": 287348424,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656085639
    },
    {
        "content": "<p>So I'm going to cast a weak vote for the <code>=</code> spelling.</p>",
        "id": 287348468,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656085666
    },
    {
        "content": "<p>If we made <code>option.mem_def</code> not a simp lemma, we could replace it with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.mem_some_iff\">docs#option.mem_some_iff</a> being <code>simp</code></p>",
        "id": 287348651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656085759
    },
    {
        "content": "<p>I agree that the <code>has_mem</code> instance is a bit weird and I certainly haven't used it myself.</p>",
        "id": 287351646,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656087173
    },
    {
        "content": "<p>It turns out that there's not quite as much fallout from this as I expected, so perhaps we don't need to decide before bumping to lean 3.44.0</p>",
        "id": 287352028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656087360
    },
    {
        "content": "<p>But I guess the <code>simp_nf</code> linter will be the real test</p>",
        "id": 287352087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656087377
    },
    {
        "content": "<p>The <code>has_mem</code> instance here is used a lot in <code>finset.max</code> and related, but in that case also I think it would be nicer to have the <code>= some</code> versoin</p>",
        "id": 287370546,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1656096924
    },
    {
        "content": "<p>Strong vote for the <code>=</code>, I find the <code>∈</code> notation to be very odd</p>",
        "id": 287401146,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656118007
    },
    {
        "content": "<p>And we already have the <code>simp</code> lemma, so might as well use it</p>",
        "id": 287401151,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656118021
    },
    {
        "content": "<p>I've used the <code>has_mem</code> notation for <code>option</code> a few times, and it can be convenient in meta code.</p>\n<p>I think what you're supposed to do is imagine that <code>option</code> could have been defined as lists of length at most 1.</p>",
        "id": 287401394,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656118305
    },
    {
        "content": "<p>That logic makes sense, but<br>\na) using set notation for things that aren't sets or very similar reeks of ZFC<br>\nb) we don't employ this logic in other places where it would make sense, like for <code>α ⊕ β</code> or <code>Σ i, α i</code> (with the appropriate instances)</p>",
        "id": 287450200,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656183861
    },
    {
        "content": "<p>Regarding (a), pretty much every mathlib data structure that contains elements in some sense has a <code>has_mem</code> instance. I mentioned <code>list</code> because it has the same computational properties (and there's a map of monads from <code>option</code> to <code>list</code>), but, except for issues of computational relevance, <code>option</code> could also have been defined as sets of cardinality at most 1. (Just for fun, <a href=\"https://github.com/leanprover-community/mathlib/commit/8f4327ae0c45ed36037beb1449f8285cae1ebe9c#diff-f4580f39da30fe1ff184287725115ef220e320b4281e7ccc8c4d62501b579766\">the commit</a> where this <code>has_mem</code> instance was introduced, five years ago.)</p>\n<p>Regarding (b), I'm not sure I'm following; could you write out those instances?</p>",
        "id": 287461154,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656200620
    },
    {
        "content": "<p>An issue with the = based expressions is that = has two syntactically different yet propositionally equal forms, b = some a and some a = b. While the has_mem has only one</p>",
        "id": 287465768,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656207841
    }
]