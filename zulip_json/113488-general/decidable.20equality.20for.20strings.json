[
    {
        "content": "<p>How do I activated the decidable equality for strings? I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I tried <code>import init.data.string.instances</code> but it says the path doesn't exist?</p>",
        "id": 226832813,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1613664091
    },
    {
        "content": "<p>Maybe (x = \"x\") should be?</p>",
        "id": 226833086,
        "sender_full_name": "Kana",
        "timestamp": 1613664138
    },
    {
        "content": "<p>Ok, I forgot that Lean is this clever way of overloading Prop and bool. Is this written up somewhere?</p>",
        "id": 226833899,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1613664339
    },
    {
        "content": "<p>== is not a <code>bool</code> either, its <a href=\"https://leanprover-community.github.io/mathlib_docs/find/heq\">docs#heq</a></p>",
        "id": 226834158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613664389
    },
    {
        "content": "<p>And <code>decidable</code> expects a <code>Prop</code> anyway</p>",
        "id": 226834255,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613664409
    }
]