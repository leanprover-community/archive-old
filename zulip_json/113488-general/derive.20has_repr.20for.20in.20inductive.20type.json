[
    {
        "content": "<p>Is there a convenient way to automatically derive a representation for  an inductive type? (so that I can print it). E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Instr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">pushC</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Instr</span>\n<span class=\"bp\">|</span> <span class=\"n\">pushV</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">Instr</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Instr</span>\n<span class=\"bp\">|</span> <span class=\"n\">mult</span> <span class=\"o\">:</span> <span class=\"n\">Instr</span>\n</code></pre></div>",
        "id": 313480441,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1669981280
    },
    {
        "content": "<p>a quick and dirty solution is to use <code>has_reflect</code> as a proxy for <code>has_repr</code>, although the results aren't great:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive has_reflect]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Instr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">pushC</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Instr</span>\n<span class=\"bp\">|</span> <span class=\"n\">pushV</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">Instr</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Instr</span>\n<span class=\"bp\">|</span> <span class=\"n\">mult</span> <span class=\"o\">:</span> <span class=\"n\">Instr</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">Instr</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Instr.pushC</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- Instr.pushC (has_zero.zero.{0} nat nat.has_zero)</span>\n</code></pre></div>",
        "id": 313482174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669981917
    },
    {
        "content": "<p>That is good but is there a way to get rid of the weird representation of nat?</p>",
        "id": 313496459,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1669986756
    },
    {
        "content": "<p>implement <code>has_repr</code> manually...</p>",
        "id": 313496805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669986871
    },
    {
        "content": "<p>I suppose you could also do a hybrid implementation like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">Instr</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Instr.pushC</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sformat</span><span class=\"bp\">!</span><span class=\"s2\">\"Instr.pushC {x}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Instr.pushC</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- Instr.pushC 2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Instr.pushV</span> <span class=\"s2\">\"A\"</span>\n<span class=\"c1\">-- Instr.pushV \"A\"</span>\n</code></pre></div>",
        "id": 313497225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669987010
    },
    {
        "content": "<p>I think it would be fairly easy to write a metaprogram to do this</p>",
        "id": 313504219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669989228
    }
]