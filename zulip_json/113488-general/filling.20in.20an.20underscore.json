[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.fintype\nimport algebra\n\nuniverses u v\n-- Chris multiset example\n\ntheorem meh {i : ℕ} {n : ℕ} : i &lt; n → i &lt; nat.succ n := λ H, lt.trans H $ nat.lt_succ_self _\n\ntheorem miracle (f : ℕ → ℕ)\n(d : ℕ)\n(Hd :\n  ∀ (g : fin d → ℕ),\n    (∀ (i : fin d), f (i.val) = g i) →\n      finset.sum (finset.range d) f = finset.sum finset.univ g)\n(g : fin (nat.succ d) → ℕ)\n(h : ∀ (i : fin (nat.succ d)), f (i.val) = g i)\n: finset.sum (finset.range d) f = finset.sum finset.univ (λ (i : fin d), g ⟨i.val, meh i.is_lt⟩)\n:=\nlet gres : fin d → ℕ := λ (i : fin d), g ⟨i.val, meh i.is_lt⟩ in\nbegin\nrw Hd gres (λ i, h ⟨i.val,_⟩)\nend\n</pre></div>",
        "id": 124374909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522343504
    },
    {
        "content": "<p>Lean magically filled in the underscore in the last but one line</p>",
        "id": 124374951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522343525
    },
    {
        "content": "<p>It either guessed that <code>i&lt;n -&gt; i&lt;succ n</code></p>",
        "id": 124374971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522343590
    },
    {
        "content": "<p>or proved it</p>",
        "id": 124374972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522343593
    },
    {
        "content": "<p>or decided it didn't care if it was true</p>",
        "id": 124374973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522343600
    },
    {
        "content": "<p>Note that the result is proved in the definition of gres</p>",
        "id": 124374979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522343641
    },
    {
        "content": "<p>(gres is the restriction of <code>g : fin (d+1) -&gt; nat</code>, to fin d)</p>",
        "id": 124375018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522343657
    },
    {
        "content": "<p>I think it proved it. Looking at the proof term, it used <code>lt_succ_of_lt</code>. I didn't know lean could do that.</p>",
        "id": 124375687,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522344770
    },
    {
        "content": "<p>What triggered that? Is it the <code>rw</code> ? I tried to minimise this but didn't get far.</p>",
        "id": 124376073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522345358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can you clarify what is going on here?</p>",
        "id": 124418473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522426948
    },
    {
        "content": "<p>The <code>rw</code> is a confounder here. You could equally well use <code>exact Hd gres (λ i, h ⟨i.val, _⟩)</code> to close the goal. Here are some intermediate data points:</p>\n<div class=\"codehilite\"><pre><span></span>Hd gres (λ i, _) -- -&gt; looking for proof of ⊢ f (i.val) = gres i\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Hd gres (λ i, h _)\ntype mismatch at application\n  Hd gres (λ (i : fin d), h ?m_1[i])\nterm\n  λ (i : fin d), h ?m_1[i]\nhas type\n  ∀ (i : fin d), f (?m_1[i].val) = g ?m_1[i]\nbut is expected to have type\n  ∀ (i : fin d), f (i.val) = gres i\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Hd gres (λ i, h ⟨_, _⟩) -- works\n</pre></div>\n\n\n<p>Lean isn't magically guessing the proof, it's unfolding <code>gres</code> and unifying with the enclosed proof</p>",
        "id": 124423248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522434063
    },
    {
        "content": "<p>Oh I see. The moment I saw rw I thought \"I don't understand that tactic properly, maybe it's doing something under the hood,  so I give in\"</p>",
        "id": 124433011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522449515
    },
    {
        "content": "<p>But now you tell me exact works I can just debug it myself with <code>pp.proofs true</code>.</p>",
        "id": 124433012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522449535
    },
    {
        "content": "<p>I used to think of stuff like type class inference and proofs being magicked around was just all part of some magic, it's only now I begin to realise that everything that happens, happens for a really precise reason.</p>",
        "id": 124433025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522449587
    },
    {
        "content": "<p>In some sense I still draw the line at reading <code>tactic.interactive</code> (partly because I know it will be incomprehensible).</p>",
        "id": 124433076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522449648
    },
    {
        "content": "<p>but really it's because I feel like \"end users\" shouldn't have to know anything about a tactic other than what is documented.</p>",
        "id": 124433093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522449699
    },
    {
        "content": "<blockquote>\n<p>I used to think of stuff like type class inference and proofs being magicked around was just all part of some magic, it's only now I begin to realise that everything that happens, happens for a really precise reason.</p>\n</blockquote>\n<p>there is no magic in lean</p>",
        "id": 124433142,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522449752
    },
    {
        "content": "<p>No, just sufficiently advanced technology.</p>",
        "id": 124433202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522449863
    },
    {
        "content": "<p>which is canonically isomorphic though</p>",
        "id": 124433205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522449880
    },
    {
        "content": "<p>so I heard</p>",
        "id": 124433208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522449893
    }
]