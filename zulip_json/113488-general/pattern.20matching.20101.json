[
    {
        "content": "<p>Easy question: how do I do pattern matching against values? Given <code>k : nat</code>, naively I could try writing</p>\n<div class=\"codehilite\"><pre><span></span>match n with\n| k := something\n| _ := something_else\nend\n</pre></div>\n\n\n<p>a glorified <code>if n = k then something else something_else</code>, but of course this doesn't work, because Lean doesn't treat the <code>k</code> in the pattern as related to the earlier <code>k</code>.</p>\n<p>Am I just meant to use <code>if ... then ... else</code>? Or can I get the pattern matcher to help me?</p>",
        "id": 125662292,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524645560
    },
    {
        "content": "<p>you need to use <code>if then else</code>. <code>match</code> only deals with constructors.</p>",
        "id": 125662332,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524645607
    },
    {
        "content": "<p>That's what I feared. How sad. So if I want to write something that given <code>some n</code> where <code>n = k</code> does <code>X</code>, and given any other <code>some n</code> or <code>none</code> does <code>Y</code>... What's the idiomatic way to write this?</p>",
        "id": 125662414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524645784
    },
    {
        "content": "<p>(Preferably your answer shouldn't use <code>option.is_some</code> or friends, just pretend <code>option</code> is a bare inductive type with no dressing up.)</p>",
        "id": 125662422,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524645831
    },
    {
        "content": "<p>In particular, how can I do this without writing the symbol <code>Y</code> twice?</p>",
        "id": 125662463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524645860
    },
    {
        "content": "<p>Other languages have pattern guards for this, but Lean doesn't... yet. You'll have to factor <code>Y</code> out into a <code>let</code>.</p>",
        "id": 125662781,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524646501
    },
    {
        "content": "<blockquote>\n<p>That's what I feared. How sad. So if I want to write something that given <code>some n</code> where <code>n = k</code> does <code>X</code>, and given any other <code>some n</code> or <code>none</code> does <code>Y</code>... What's the idiomatic way to write this?</p>\n</blockquote>\n<p>This sounds like something you'd use pattern match guards for in Haskell:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">case</span> <span class=\"n\">n</span> <span class=\"kr\">of</span>\n  <span class=\"kt\">Just</span> <span class=\"n\">k</span> <span class=\"o\">|</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">k</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">something</span>\n  <span class=\"kr\">_</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">something_else</span>\n</pre></div>",
        "id": 125662792,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524646520
    },
    {
        "content": "<blockquote>\n<p>In particular, how can I do this without writing the symbol <code>Y</code> twice?</p>\n</blockquote>\n<p><code>if o = some k then _ else Y</code></p>",
        "id": 125662838,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524646584
    },
    {
        "content": "<p>okay, good, except I've over-minimised of course, and there are lots of other fields that I don't care about matching :-)</p>",
        "id": 125662856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524646672
    },
    {
        "content": "<p>so maybe give us more context?</p>",
        "id": 125662899,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524646694
    },
    {
        "content": "<p>Is it possible that your type is like the following?</p>\n<div class=\"codehilite\"><pre><span></span>inductive my_type\n| constr : a -&gt; b -&gt; c -&gt; d -&gt; e -&gt; my_type\n| other : a&#39; -&gt; b&#39; -&gt; my_type\n</pre></div>\n\n\n<p>In Haskell, a common advice is to make that two or more types, separate the sum aspect and the product aspect.</p>",
        "id": 125671684,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524663001
    },
    {
        "content": "<p>Then, you can use selectors on to access whatever part of the product that you care about</p>",
        "id": 125671764,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524663076
    },
    {
        "content": "<p>hmm, my type </p>\n<div class=\"codehilite\"><pre><span></span>inductive edit_distance_progress (l₁: list α) (l₂: list α)\n| exactly : ℕ → edit_distance_progress\n| at_least : ℕ → partial_edit_distance_data α → edit_distance_progress\n</pre></div>",
        "id": 125671847,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524663211
    },
    {
        "content": "<p>and I need to check if I have an <code>exactly _ _ k</code> for some specified value of <code>k</code>.</p>",
        "id": 125671851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524663236
    },
    {
        "content": "<p>Ok, it's not as bad as I thought. I thought because you didn't want to repeat <code>Y</code>. Is it a pattern for <code>partial_edit_distance_data α</code>?</p>",
        "id": 125672040,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524663506
    },
    {
        "content": "<p>I'm not sure what you mean. The offending code (which works, just looks gross) is &lt;<a href=\"https://github.com/semorrison/lean-tidy/blob/master/src/tidy/rewrite_search.lean#L64-L84\" target=\"_blank\" title=\"https://github.com/semorrison/lean-tidy/blob/master/src/tidy/rewrite_search.lean#L64-L84\">https://github.com/semorrison/lean-tidy/blob/master/src/tidy/rewrite_search.lean#L64-L84</a>&gt;. You can see lines 72-74 and lines 76-78 are almost identical because of this.</p>",
        "id": 125672190,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524663824
    },
    {
        "content": "<p>Why can't you do something like <code>if update_edit_distance h.distance = exactly _ _ k then ... else ...</code> as Kenny suggested?</p>",
        "id": 125672413,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524664193
    },
    {
        "content": "<p>Oh... somehow I thought those <code>_</code>s would be a problem, but of course they're not. Thank you!</p>",
        "id": 125672494,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524664296
    },
    {
        "content": "<p>I will need an extra decidable instance for this. I remember there is some trick for synthesising decidable instances for boring inductive types....? Anyone remember?</p>",
        "id": 125672566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524664408
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"bp\">...</span>\n</pre></div>",
        "id": 125672589,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524664441
    },
    {
        "content": "<p>Lovely! And where do I find out what derive is doing? :-)</p>",
        "id": 125672652,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524664555
    },
    {
        "content": "<p>I'm sure there's a <code>#print</code> that'll tell you, but I never remember which one. <span class=\"emoji emoji-1f60a\" title=\"blush\">:blush:</span></p>",
        "id": 125672714,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524664664
    },
    {
        "content": "<p>Perhaps <code>#print &lt;type-name&gt;.decidable_eq</code>?</p>",
        "id": 125672780,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524664737
    }
]