[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span> <span class=\"c1\">-- only to easily prove/disprove the goal</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.rat.order</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">order.locally_finite</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_statement</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">my_statement</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">my_statement</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">my_statement</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">my_statement</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>as written, the first example fails and the second example succeeds. If you remove the <code>open finset</code> line, the first example succeeds and the second example fails. (If you remove the norm_num import, both goals are the same as they are right now, and have the same truth value as they do right now, it's just there for a concise example, but the bug occurs without that)</p>",
        "id": 304982461,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666193790
    },
    {
        "content": "<p>Somehow the presence of <code>finset.Ico</code> makes Lean elaborate the  <code>k / 2</code> in <code>Ico</code> as <code>↑(k / 2)</code> rather than <code>↑k / 2</code>.</p>",
        "id": 304983015,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666193948
    },
    {
        "content": "<p>Yeah - if you remove <code>import order.locally_finite</code> as well (which defines <code>finset.Ico</code>), this behaves like I expected</p>",
        "id": 304983496,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666194085
    },
    {
        "content": "<p>Here's a modified example which shows it's not an issue because of the instances in <code>order.locally_finite</code>, but just the mere definition of <code>finset.Ico</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span> <span class=\"c1\">-- only to easily prove/disprove the goal</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.rat.order</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finset.Ico</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_statement</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">my_statement</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">my_statement</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">my_statement</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">my_statement</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 304985159,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666194578
    },
    {
        "content": "<p>oh what in the hell</p>",
        "id": 304985403,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666194644
    },
    {
        "content": "<p>agreed</p>",
        "id": 304985916,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666194781
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo1.bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo2.bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">foo1</span>\n<span class=\"kn\">open</span> <span class=\"n\">foo2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_statement</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">my_statement</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">my_statement</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>a further example, showing it's not to do with <code>finset</code></p>",
        "id": 304987819,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666195325
    },
    {
        "content": "<p>and finally, an example without mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo1.bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo2.bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">foo1</span>\n<span class=\"c1\">-- open foo2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_statement</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">my_statement</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">my_statement</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo1.bar</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_one</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">my_statement</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">my_statement</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo1.bar</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_zero</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>commenting/uncommenting <code>open foo2</code> changes which goal can be proved</p>",
        "id": 304990007,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666195917
    },
    {
        "content": "<p>My initial reaction was \"you're changing which <code>bar</code> gets picked up\" but you're not: with <code>pp.all true</code> <code>my_statement</code> always involves <code>foo1.bar</code> but it's different depending on whether <code>foo2</code> is open or not. The pp.all outputs:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>with open foo2 commented out\n\ndef my_statement : nat → Prop :=\nλ (k : nat),\n  foo1.bar (@has_zero.zero.{0} int int.has_zero)\n    (@has_sub.sub.{0} int int.has_sub\n       (@coe.{1 1} nat int (@coe_to_lift.{1 1} nat int (@coe_base.{1 1} nat int int.has_coe)) k)\n       (@bit0.{0} int int.has_add (@has_one.one.{0} int int.has_one)))\n\nwith open foo2 uncommented\n\ndef my_statement : nat → Prop :=\nλ (k : nat),\n  foo1.bar (@has_zero.zero.{0} int int.has_zero)\n    (@coe.{1 1} nat int (@coe_to_lift.{1 1} nat int (@coe_base.{1 1} nat int int.has_coe))\n       (@has_sub.sub.{0} nat nat.has_sub k (@bit0.{0} nat nat.has_add (@has_one.one.{0} nat nat.has_one))))\n</code></pre></div>",
        "id": 304993371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666196870
    },
    {
        "content": "<p>The order of coercion and subtraction changes.</p>",
        "id": 304993536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666196909
    },
    {
        "content": "<p>Looks like Lean 4 gets it right (phew)</p>",
        "id": 304998805,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666198299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/.60open.20finset.60.20changes.20truth.20of.20goal/near/304993371\">said</a>:</p>\n<blockquote>\n<p>My initial reaction was \"you're changing which <code>bar</code> gets picked up\" but you're not: with <code>pp.all true</code> you can see that <code>my_statement</code> always involves <code>foo1.bar</code> but it changes depending on whether <code>foo2</code> is open or not. The pp.all outputs:</p>\n</blockquote>\n<p>right! it wouldn't even type check with the wrong <code>bar</code> though, because I insist the first argument is int</p>",
        "id": 305050618,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1666217658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I think we should open an issue on the community repo for this, just to keep track of it, seems like a pretty clear bug to me, even if nobody gets round to fixing it pre-4.</p>",
        "id": 305345593,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666356403
    }
]