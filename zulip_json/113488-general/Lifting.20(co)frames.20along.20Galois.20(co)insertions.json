[
    {
        "content": "<p>Can anybody do those? They are paper-trivial, but with all my will I can't get Lean to infer the intermediate <code>complete_lattice</code> instance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.complete_boolean_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.galois_connection</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">order</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Lift all suprema and infima along a Galois insertion. -/</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"c1\">-- See note [reducible non instances]</span>\n<span class=\"kd\">def</span> <span class=\"n\">lift_coframe</span> <span class=\"o\">[</span><span class=\"n\">coframe</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coframe</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">infi_sup_le_sup_Inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">gi.choice</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">⊔</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">gi.choice</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">gi.u_le_u_iff.1</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- It *should* be obvious enough for `simp` at this point</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">gi.lift_complete_lattice</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Lift all suprema and infima along a Galois coinsertion. -/</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"c1\">-- See note [reducible non instances]</span>\n<span class=\"kd\">def</span> <span class=\"n\">lift_frame</span> <span class=\"o\">[</span><span class=\"n\">frame</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">galois_coinsertion</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">frame</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inf_Sup_le_supr_inf</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">gi.lift_complete_lattice</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 274261737,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646510008
    },
    {
        "content": "<p>To be precise, for the first case (the second one is the same but with <code>α</code> and <code>β</code> swapped) I can't talk about any <code>inf</code> or <code>sup</code> in <code>β</code> because it's part of the instance I'm creating even though <code>gi.lift_complete_lattice</code> should do the job.</p>",
        "id": 274261832,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646510151
    },
    {
        "content": "<p>And, no, <code>haveI := gi.lift_complete_lattice</code> doesn't do the trick.</p>",
        "id": 274261880,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646510175
    },
    {
        "content": "<p>To show you how trivial this is once we have access to <code>complete_lattice β</code>, here's my solution for a concrete type, namely <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.opens\">docs#topological_space.opens</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.opens</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">frame</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Sup</span> <span class=\"o\">:=</span> <span class=\"n\">Sup</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_Sup_le_supr_inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">opens.ext</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">opens.coe_inf</span><span class=\"o\">,</span> <span class=\"n\">set.inf_eq_inter</span><span class=\"o\">,</span>\n    <span class=\"n\">opens.supr_s</span><span class=\"o\">,</span> <span class=\"n\">opens.coe_Sup</span><span class=\"o\">,</span> <span class=\"n\">set.inter_Union₂</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">opens.complete_lattice</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 274262320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646510729
    },
    {
        "content": "<p>Also, yes, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.opens.gc\">docs#topological_space.opens.gc</a> really should be a <code>galois_coinsertion</code>.</p>",
        "id": 274262334,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646510759
    },
    {
        "content": "<p>Looks like it's a diamond...</p>",
        "id": 274273621,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646525518
    },
    {
        "content": "<p>Oh no it's even dumber. The lifts weren't marked <code>reducible</code> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 274274158,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646526454
    }
]