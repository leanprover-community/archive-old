[
    {
        "content": "<p>Is there a good way to pretty print expressions, so metavariables get replaced by <code>_</code> characters?</p>",
        "id": 148406464,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543274400
    },
    {
        "content": "<p>I see there is <code>pp.use_holes</code> which prints metavariables as <code>{! !}</code>.</p>",
        "id": 148406530,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543274431
    },
    {
        "content": "<p>or perhaps more simply --- does anyone know how I do substring replacement? (e.g. <code>{! !}</code> to <code>_</code>)</p>",
        "id": 148406776,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543274712
    },
    {
        "content": "<p>It might be easier to replace the metavars with <code>pexpr.mk_placeholder</code> before printing.</p>",
        "id": 148406884,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543274853
    },
    {
        "content": "<p>I see. Any suggestions on how to do the replacement? I tried just folding, but I need to turn <code>expr</code>s back into <code>pexpr</code>s.</p>",
        "id": 148407075,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543275049
    },
    {
        "content": "<p>of, pexpr.of_expr</p>",
        "id": 148407086,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543275064
    },
    {
        "content": "<p>No promises that this works beyond the two little examples I just tried, but give it a shot.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">replace_mvars</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">replace</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e&#39;</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">e&#39;</span><span class=\"bp\">.</span><span class=\"n\">is_meta_var</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">mk_placeholder</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 148407113,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543275119
    },
    {
        "content": "<p>Looking good!!</p>",
        "id": 148407167,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543275166
    },
    {
        "content": "<p>I still need to learn how to do string munging in Lean, I'm flailing about trying to decide is a string contains a given character... :-(</p>",
        "id": 148407267,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543275337
    },
    {
        "content": "<p><code>'_' ∈ s.to_list</code>?</p>",
        "id": 148407316,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543275366
    },
    {
        "content": "<p>Seems to work, but presumably there's something more natural.</p>",
        "id": 148407320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543275379
    },
    {
        "content": "<p>Just on the strings scott<br>\nResist the temptation to use <code>string.iterator</code>s<br>\nI thought they were the future (they are VM implemented), and changed the <code>expr</code> deserialiser to use them<br>\nAbout a 5% slowdown</p>",
        "id": 148408767,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543277272
    }
]