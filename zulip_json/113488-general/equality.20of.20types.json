[
    {
        "content": "<p>The topic name might be slightly misleading.<br>\nSay I wanted to prove the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The lemma is obviously false, but that is not the point.<br>\nMy problem is, that I cannot even formulate the lemma, because x and y have different types, which totally makes sense.<br>\nBut then I also know that the types are the same, so I should somehow be allowed to speak about equality of x and y.</p>\n<p>Is there some way to make my example work?</p>",
        "id": 225558245,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1612797367
    },
    {
        "content": "<p>Yes, this is called heterogeneous equality. You can write <code>x == y</code>. But it isn't very pleasant to work with.</p>",
        "id": 225558516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612797470
    },
    {
        "content": "<p>The \"philosophy\" is that if <code>X Y : Type</code> and <code>a b : X</code> then talking about <code>a = b</code> is sensible, but talking about <code>X = Y</code> is a bit more dangerous because <code>X</code> and <code>Y</code> are \"one level up\" from <code>a</code> and <code>b</code>, so the correct notion of \"same\"ness is an <code>equiv</code>, <code>e : X ≃ Y</code>, which is defined to be maps in both directions whose composite both ways is the identity. In your example you can then talk about <code>e x = y</code>, and here you avoid the dreaded <code>==</code> completely. You can even see it with the <code>Prop</code> universe -- it is not really reasonable to say that Fermat's Last Theorem is equal to 2+2=4, but they are logically equivalent because they're both true, and here the appropriate notion of sameness is <code>↔</code>.</p>",
        "id": 225616876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612822381
    },
    {
        "content": "<p>Except <a href=\"https://leanprover-community.github.io/mathlib_docs/find/propext\">docs#propext</a> means you really can say that <code>2+2=4</code> and Fermat's last theorem are equal.</p>",
        "id": 225618201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612822956
    },
    {
        "content": "<p>The very fact that this is an axiom and some people don't believe it is already an indication that something funny is going on.</p>",
        "id": 225620166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612824009
    },
    {
        "content": "<p>I'm not sure that there is anyone who thinks this axiom is not true; in fact it's basically baby-HoTT, being the univalence axiom for <code>Prop</code></p>",
        "id": 225620717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612824331
    },
    {
        "content": "<p>If you think that types should be syntactically generated (like an inductive type) then perhaps you want to deny this axiom</p>",
        "id": 225620800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612824369
    },
    {
        "content": "<p>Generally speaking, something being an axiom is evidence that people think it's true, not that people think it is false</p>",
        "id": 225620887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612824421
    },
    {
        "content": "<p>I think univalence is false!</p>",
        "id": 225652896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612855459
    },
    {
        "content": "<p>It depends on what you mean by \"is\" <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 225653097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612855710
    }
]