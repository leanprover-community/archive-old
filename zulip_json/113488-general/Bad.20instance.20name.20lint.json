[
    {
        "content": "<p>This has caught me out many times, so I'm wondering if we can get a lint to watch for it (or maybe even fix lean so it doesn't happen).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">widget</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">doodad</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">widget</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span> <span class=\"c1\">-- widget.has_to_string</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">doodad</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span> <span class=\"c1\">-- doodad.has_to_string</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">widget</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">doodad</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">widget</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span> <span class=\"c1\">-- foo.has_to_string</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">doodad</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span> <span class=\"c1\">-- foo.has_to_string, error</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>\n\n\n<p>Usually I won't even notice that <code>foo.widget</code>'s instance has a name that doesn't mention <code>widget</code> until I write <code>foo.doodad</code> and hit the name conflict, so I'm quite sure that there are many uncaught instances of this problem in mathlib.</p>",
        "id": 206730654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597256120
    },
    {
        "content": "<p>ha ha I'm not sure I want to know the number of instances with bad names in mathlib :-) Wouldn't it be more fun to change Lean so that it names the instances in a cleverer way and then see if mathlib still compiles? So what is the algorithm for naming instances? It's well-known that the current method is laughed at but is there a cleverer proposal which is less bad? In namespace foo I decide to prove <code>foo A -&gt; baz B -&gt; bar (prod A B)</code> and also <code>bar A -&gt; foo B -&gt; baz (prod A B)</code> (with <code>foo</code>, <code>bar</code>, <code>baz</code> all classes). Are these now both named something like <code>foo.prod</code>? What is your proposal for the example you post? What do you want <code>has_to_string foo</code> to be called in namespace <code>foo</code>? I think there was a discussion here a long time ago about naming lemmas and how it wasn't at all automatic because you have a tree of constants which you want to turn into a list of constants.</p>",
        "id": 206731771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597256637
    },
    {
        "content": "<p>I think that for the most part the instance names that are automatically generated are okay, not great but usable</p>",
        "id": 206735704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597258672
    },
    {
        "content": "<p>not to mention that they more or less by necessity have to define our style guide for naming instances</p>",
        "id": 206735789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597258701
    },
    {
        "content": "<p>I think that the right answer in this instance is that namespaces should always just append, never replace bits of the name. So this one should be called <code>foo.widget.has_to_string</code></p>",
        "id": 206736245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597258905
    },
    {
        "content": "<p>Although, I think that this would name your instances <code>foo.prod.bar</code> and <code>foo.prod.baz</code> respectively which is a bit odd to say the least</p>",
        "id": 206736420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597258971
    },
    {
        "content": "<p>Another thing that would help is if the instance naming algorithm was more comfortable saying \"I don't know what to call this, you do it\"</p>",
        "id": 206736803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597259111
    },
    {
        "content": "<p>For example</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"o\">(</span><span class=\"n\">Sort</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Sort</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>gives <code>failed to synthesize instance name, name should be provided explicitly</code> but</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"o\">(</span><span class=\"n\">Sort</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Sort</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>\n\n\n<p>gives <code>foo.has_to_string</code> like the others. I think that when this situation occurs (lean wants to call it <code>foo.has_to_string</code>) we are in the case that we should at least lint and maybe also give the <code>failed to synthesize instance name</code> error</p>",
        "id": 206737115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597259272
    },
    {
        "content": "<p>I think I'd rather be asked for an instance name than accidentally name an instance badly</p>",
        "id": 206737731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597259595
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/decl_util.cpp#L78-L91\">Here</a> is the relevant code:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"cm\">/* Try to synthesize name */</span>\n        <span class=\"n\">expr</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">type</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">is_pi</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">))</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">binding_body</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">);</span>\n        <span class=\"n\">expr</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">get_app_fn</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">);</span>\n        <span class=\"n\">name</span> <span class=\"n\">ns</span> <span class=\"o\">=</span> <span class=\"n\">get_namespace</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">env</span><span class=\"p\">());</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">is_constant</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">ns</span><span class=\"p\">.</span><span class=\"n\">is_anonymous</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">c_name</span> <span class=\"o\">=</span> <span class=\"n\">const_name</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">);</span>\n            <span class=\"n\">scope</span><span class=\"p\">.</span><span class=\"n\">set_name</span><span class=\"p\">(</span><span class=\"n\">c_name</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">is_constant</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">is_app</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">is_constant</span><span class=\"p\">(</span><span class=\"n\">get_app_fn</span><span class=\"p\">(</span><span class=\"n\">app_arg</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">))))</span> <span class=\"p\">{</span>\n            <span class=\"n\">c_name</span> <span class=\"o\">=</span> <span class=\"n\">const_name</span><span class=\"p\">(</span><span class=\"n\">get_app_fn</span><span class=\"p\">(</span><span class=\"n\">app_arg</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"n\">const_name</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">);</span>\n            <span class=\"n\">scope</span><span class=\"p\">.</span><span class=\"n\">set_name</span><span class=\"p\">(</span><span class=\"n\">c_name</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">maybe_throw_error</span><span class=\"p\">({</span><span class=\"s\">&quot;failed to synthesize instance name, name should be provided explicitly&quot;</span><span class=\"p\">,</span> <span class=\"n\">c_pos</span><span class=\"p\">});</span>\n            <span class=\"n\">c_name</span> <span class=\"o\">=</span> <span class=\"n\">mk_unused_name</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">env</span><span class=\"p\">(),</span> <span class=\"s\">&quot;_inst&quot;</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>In english, it says to get the conclusion of the theorem, and call it <code>it</code>, with the head constant of <code>it</code> (the instance like <code>has_to_string</code>) being <code>C</code>. If we are not at the top level, then name it <code>current_namespace.C</code> (this is the bad case), else if the last argument of <code>it</code> is itself a constant <code>D</code> applied to things then name it <code>current_namespace.D.C</code>, else complain to the user</p>",
        "id": 206738235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597259862
    },
    {
        "content": "<p>We could just swap the two if statements, so that the present case gets the name <code>current_namespace.D.C</code>, and the scheme <code>current_namespace.C</code> is only used for things like the <code>has_to_string (Sort -&gt; Sort)</code> example</p>",
        "id": 206738409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597259963
    },
    {
        "content": "<p>or we could just delete that case entirely so that this case gives the <code>failed to synthesize instance name</code> error</p>",
        "id": 206738452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597259997
    },
    {
        "content": "<p>I think the first case probably exists to handle situations like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟩⟩</span>\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">has_add</span>   <span class=\"c1\">-- not `foo.foo.has_add`</span>\n</code></pre></div>\n\n\n<p>because it's pretty common to create a structure and then add a lot of things in a namespace, and some of those things are likely to be instances for the structure you just made.</p>",
        "id": 208443030,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598719733
    },
    {
        "content": "<p>Of course it can also choose the wrong name in other situations, for example if the namespace is something like <code>category_theory</code></p>",
        "id": 208443103,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598719836
    },
    {
        "content": "<p>How about this heuristic: drop the first case and, in the second case, don't include the <code>D</code> part of the name if it equals the last component of the current namespace.</p>",
        "id": 208443299,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598720125
    },
    {
        "content": "<p>A better version of this is: drop the current namespace from either the <code>C</code> or the <code>D</code> component if it happens to be a prefix of them</p>",
        "id": 208445966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598723788
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/458\">lean#458</a> is my proposal</p>",
        "id": 208453437,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598734257
    },
    {
        "content": "<p>wait, no. I was supposed to say \"My proposal is <a href=\"https://github.com/leanprover-community/lean/issues/458\">lean#458</a>\"</p>",
        "id": 208461362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598747951
    }
]