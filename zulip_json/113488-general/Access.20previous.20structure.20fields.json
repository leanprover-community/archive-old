[
    {
        "content": "<p>I feel like I keep stumbling onto this limitation. Is there really no way for an auto-param tactic to fill in Prop structure fields using previous Prop fields?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">the_tactic_i_want</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">foo.bar_zero</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bar_zero</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">baz_zero</span> <span class=\"o\">:</span> <span class=\"n\">baz</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"bp\">.</span> <span class=\"n\">the_tactic_i_want</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n  <span class=\"n\">bar_zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">baz_zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n  <span class=\"n\">bar_zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid type ascription, term has type</span>\n<span class=\"cm\">  ?m_1.bar 0 = 37</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  37 = 37</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">⊢ 37 = 37</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Context is <a href=\"https://github.com/leanprover-community/mathlib/pull/17826\">#17826</a></p>",
        "id": 314678828,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670507045
    },
    {
        "content": "<p>The obvious alternative would have been</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bar_zero</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">baz_zero</span> <span class=\"o\">:</span> <span class=\"n\">baz</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"n\">bar_zero</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid let-expression, term</span>\n<span class=\"cm\">  bar_zero</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  bar 0 = 37</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  baz 0 = 37</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>but it doesn't work because <code>bar_zero</code> gets evaluated directly.</p>",
        "id": 314679265,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670507175
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">maybe_default</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">try_maybe_default</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">maybe_default</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.exact</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bar_zero</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">baz_zero</span> <span class=\"o\">:</span>  <span class=\"n\">maybe_default</span> <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"n\">bar_zero</span> <span class=\"bp\">.</span> <span class=\"n\">try_maybe_default</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n  <span class=\"n\">bar_zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">baz_zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n  <span class=\"n\">bar_zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 314683596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670508492
    },
    {
        "content": "<p>Isn't this the kind of thing you can do with the sneaky <code>by</code> syntax? That is, <code>baz_zero := by exact bar_zero</code> (untested)?</p>",
        "id": 314700959,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670513227
    },
    {
        "content": "<p>I think there are limitations on use of identifiers in auto params in both lean 3 and lean 4</p>",
        "id": 314701262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670513322
    },
    {
        "content": "<p>Would people be happy with me using Eric's hack, then?</p>",
        "id": 314701331,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670513348
    },
    {
        "content": "<p><code>maybe_default</code> seems to be another name for <code>opt_param</code></p>",
        "id": 314701427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670513376
    },
    {
        "content": "<p><code>opt_param</code> requires the types to agree</p>",
        "id": 314701458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670513390
    },
    {
        "content": "<p>But maybe that should inform a better name</p>",
        "id": 314701588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670513415
    },
    {
        "content": "<p><code>hopt_param</code> :)</p>",
        "id": 314701701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670513437
    },
    {
        "content": "<p>I unironically like it.</p>",
        "id": 314701858,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670513484
    },
    {
        "content": "<p>Probably it's reasonable to constrain the universe arguments a bit more than I did</p>",
        "id": 314702936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670513804
    },
    {
        "content": "<p>Might be worth planning and documenting how you will migrate to lean 4 before using any such tricks.</p>",
        "id": 314754848,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670527889
    },
    {
        "content": "<p>This is to be used in <code>algebra.group.defs</code>, so it would be forward-ported immediately anyway ;)</p>",
        "id": 317256304,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671660091
    }
]