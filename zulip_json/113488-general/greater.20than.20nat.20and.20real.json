[
    {
        "content": "<p>Im new to lean and am trying to formalize some theorems from my lecture notes on real analysis, one of them being </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ℕ ⊂ ℝ is not bounded above.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">theorem_1_1_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>however I am getting a type error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">x</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℝ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>I am not sure how to cast n :  ℕ  to be a real number so I can apply &gt; or use some form of &gt; that accepts  ℕ and ℝ.</p>",
        "id": 221134731,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1609249140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"370446\">@Saif Ghobash</span> This is because Lean is reading \"outside in, left-to-right\"...</p>",
        "id": 221135013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609249396
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ℕ ⊂ ℝ is not bounded above.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">theorem_1_1_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221135019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609249402
    },
    {
        "content": "<p>Note that, as Johan points out, you could also write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ℕ ⊂ ℝ is not bounded above.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">theorem_1_1_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221135047,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609249432
    },
    {
        "content": "<p>So it sees \"<code>&gt;</code>\" and then \"<code>n</code>\", and determines you must be comparing two natural numbers, because <code>n</code> is a <code>nat</code>.</p>",
        "id": 221135049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609249433
    },
    {
        "content": "<p>Patrick just posted the two ways around this (-;</p>",
        "id": 221135103,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609249448
    },
    {
        "content": "<p>Because of order of elaboration, in the second version Lean knows it expects a real when meeting n.</p>",
        "id": 221135110,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609249457
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> !</p>",
        "id": 221135252,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1609249573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"370446\">@Saif Ghobash</span> Also, note that <code>src/data/real/basic.lean</code> contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">200</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">archimedean</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"mi\">201</span><span class=\"o\">:</span><span class=\"n\">archimedean_iff_rat_le.2</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">x</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"mi\">202</span><span class=\"bp\">-</span><span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">M0</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f.bounded'</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"mi\">203</span><span class=\"bp\">-</span><span class=\"o\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">mk_le_of_forall_le</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"mi\">204</span><span class=\"bp\">-</span>  <span class=\"n\">rat.cast_le.2</span> <span class=\"bp\">$</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">abs_lt.1</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 221135387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609249718
    },
    {
        "content": "<p>That exactly gives you the result you are looking for.</p>",
        "id": 221135413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609249754
    },
    {
        "content": "<p>You can use the lemma <code>exists_nat_gt</code> because that instance exists.</p>",
        "id": 221135473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609249806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  oh cool! that's exactly what I needed, thank you :)</p>",
        "id": 221139308,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1609253501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"370446\">@Saif Ghobash</span> most likely 90-95% of the theorems in an introduction to analysis course are already in mathlib (in one form or another). On the other hand, this doesn't mean that all the <em>exercises</em> in such a course will be trivial to do using mathlib.</p>",
        "id": 221139579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609253739
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/undergrad.html\">https://leanprover-community.github.io/undergrad.html</a></p>",
        "id": 221139657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609253786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/greater.20than.20nat.20and.20real/near/221135049\">said</a>:</p>\n<blockquote>\n<p>So it sees \"<code>&gt;</code>\" and then \"<code>n</code>\", and determines you must be comparing two natural numbers, because <code>n</code> is a <code>nat</code>.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/commit/eba3983658faef2d41b7ad00fc2c2e540a1e43e6\">https://github.com/leanprover/lean4/commit/eba3983658faef2d41b7ad00fc2c2e540a1e43e6</a></p>",
        "id": 221202735,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609323132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Thanks, as always (-;</p>",
        "id": 221203316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609323960
    },
    {
        "content": "<p>But I didn't even do anything <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 221204322,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1609325279
    },
    {
        "content": "<p>One could intentionally or unintentionally abuse this with some random coercion you didn't know was there, which might change the meaning of a statement. This should be fun! Does it mean that <code>(a : T) &lt; b</code> no longer guarantees that <code>&lt;</code> will be <code>T.has_lt</code>?</p>",
        "id": 221209668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609332017
    },
    {
        "content": "<p>Having said that it would make the Bernoulli code look better! So in a real use case it does look like a good idea</p>",
        "id": 221209716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609332113
    },
    {
        "content": "<p>I'm multiplying and dividing what look like naturals, and all of a sudden there's a Bernoulli number at the end and I didn't want to put it at the start but it's rational</p>",
        "id": 221209784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609332174
    }
]