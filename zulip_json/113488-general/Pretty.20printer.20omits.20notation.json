[
    {
        "content": "<p>Why doesn't the pretty printer know about the <a href=\"https://github.com/leanprover-community/mathlib/blob/2a3809769cd6d1b28d045f2f1697981f4002cdab/src/analysis/normed_space/linear_isometry.lean#L218\">notation</a> for conjugate linear maps?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">E</span> <span class=\"bp\">`</span> <span class=\"bp\">≃ₗᵢ⋆</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">R</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">E₂</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">linear_isometry_equiv</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">star_ring_aut</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span>\n</code></pre></div>\n<p>The declaration <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.adjoint\">docs#continuous_linear_map.adjoint</a> is constructed using this notation in the source:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">adjoint</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗᵢ⋆</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it displays using the less specific semilinear map notation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">adjoint</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≃ₛₗᵢ</span><span class=\"o\">[</span><span class=\"bp\">↑</span><span class=\"n\">conj</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>both in the docs, and in the infoview</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.adjoint</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">continuous_linear_map.adjoint</span>\n</code></pre></div>",
        "id": 267797462,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642027304
    },
    {
        "content": "<p>Does it do better if you remove the notation for conj? (Not that we want to do that)</p>",
        "id": 267797925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642027564
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/conj\">docs#conj</a> <em>is</em> itself notation, which explains why that link doesn't work)</p>",
        "id": 267797953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642027599
    },
    {
        "content": "<p>No.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.star.module</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">adjoint</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ⋆</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">adjoint</span>\n</code></pre></div>",
        "id": 267798238,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642027806
    },
    {
        "content": "<p>Infoview check result says</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>adjoint : (?M_4 →ₗ[?M_1] ?M_7) ≃ₛₗ[↑star_ring_aut] ?M_7 →ₗ[?M_1] ?M_4\n</code></pre></div>",
        "id": 267798253,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642027825
    },
    {
        "content": "<p>My first thought was that it might have something to do with the <code>(_  : R →+* R))</code>, but changing it to an explicit coe doesn't help :-(</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">E</span> <span class=\"bp\">`</span> <span class=\"bp\">→ₗᵢ⋆</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">R</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">E₂</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">linear_isometry</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">star_ring_aut</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">E₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E₂</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗᵢ⋆</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- no correct notation</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267798689,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642028127
    },
    {
        "content": "<p>oh, maybe the problem is the <code>@</code>: <a href=\"#narrow/stream/113488-general/topic/Notation.20with.20implicit.20arguments.20.3F/near/200916740\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Notation.20with.20implicit.20arguments.20.3F/near/200916740</a></p>",
        "id": 267799057,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642028385
    },
    {
        "content": "<p>Interesting!  Do you think the <code>priority</code> fix should work in this case too?</p>",
        "id": 267799236,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642028441
    },
    {
        "content": "<p>The problem is not the other notation. The problem is that for some reason this notation never \"fires\" in the pretty-printer (commenting the <code> →ₗᵢ</code> and <code>→ₛₗᵢ</code> causes it to just print no notation).</p>",
        "id": 267799357,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642028511
    },
    {
        "content": "<p>If I change <code>star_ring_aut</code> to take <code>R</code> as an explicit argument, to avoid the </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">star_ring_aut</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>should that then fix it?</p>",
        "id": 267799586,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642028640
    },
    {
        "content": "<p>I don't know, maybe?</p>",
        "id": 267799716,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642028707
    },
    {
        "content": "<p>The coe might also be problematic.</p>\n<p>Here is something that <em>does</em> work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">my_star_ring_aut</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">star_ring_aut</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">E</span> <span class=\"bp\">`</span> <span class=\"bp\">→ₗᵢ⋆</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">R</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">E₂</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">linear_isometry</span> <span class=\"o\">(</span><span class=\"n\">my_star_ring_aut</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">E₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E₂</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗᵢ⋆</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267800059,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642028901
    },
    {
        "content": "<p>Hopefully you can transform that into something that is acceptable.</p>",
        "id": 267800110,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642028939
    },
    {
        "content": "<p>I think that all <code>@</code> and <code>(_ : ...)</code> notations will break the pretty printer. So you have to somehow specify what you want without them.</p>",
        "id": 267800306,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642029036
    },
    {
        "content": "<p>I tried just making <code>R</code> explicit at <a href=\"https://github.com/leanprover-community/mathlib/tree/star_ring_aut_implicit\">branch#star_ring_aut_implicit</a>, let's see what that looks like when it compiles.</p>",
        "id": 267800884,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642029319
    },
    {
        "content": "<p>I don't think that works. I tried inserting these lines in <code>normed_space/linear_isometry</code> and that fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">my_star_ring_aut</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring_aut</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">star_ring_aut</span>\n<span class=\"kd\">notation</span> <span class=\"n\">E</span> <span class=\"bp\">`</span> <span class=\"bp\">→ₗᵢ⋆</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">R</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">E₂</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">linear_isometry</span> <span class=\"o\">(</span><span class=\"n\">my_star_ring_aut</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">E₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E₂</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗᵢ⋆</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- no correct printing</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267801110,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642029437
    },
    {
        "content": "<p>You need to also get rid of the <code>(_ : _)</code> notation</p>",
        "id": 267801123,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642029449
    },
    {
        "content": "<p>Indeed, you're quite right.  But with both changes (making <code>star_ring_aut</code> into <code>star_ring_end</code>, of type <code>R →+* R</code> rather than <code>R ≃+* R</code>, and making the <code>R</code> argument explicit), it seems to work, at least <a href=\"#narrow/stream/113488-general/topic/Pretty.20printer.20omits.20notation/near/267798238\">this check</a> works for me locally.</p>\n<p>I'll get the branch to compile and then open a PR for a discussion.  This amounts to reverting part of the work done in <a href=\"https://github.com/leanprover-community/mathlib/pull/9640\">#9640</a>: in that PR (among other things) complex conjugation was upgraded from ring hom to ring equiv.  What do you think, <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ?</p>",
        "id": 267822495,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642047907
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11418\">#11418</a> for the change.</p>",
        "id": 267830720,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642057165
    },
    {
        "content": "<p>I'm happy with this change.</p>",
        "id": 267892008,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1642090871
    },
    {
        "content": "<p>I'm fine with changing what <code>conj</code> points to, but I think <code>star_ring_aut</code> should still exist, even if  we're changing to nothing using it</p>",
        "id": 267900848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642094234
    },
    {
        "content": "<p>(Keeping it alongside <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_ring_equiv\">docs#star_ring_equiv</a> is consistent with having <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_mul_aut\">docs#star_mul_aut</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_mul_equiv\">docs#star_mul_equiv</a>)</p>",
        "id": 267901098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642094341
    },
    {
        "content": "<p>So I'm guessing this <code>@</code> issue is why the notation for inner products doesn't always show up in the pretty printer, since it is defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_inner</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then we usually define notation for it as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>Is there a way to make <code>𝕜</code> explicit? I tried playing around a bit with the definition to no avail.</p>",
        "id": 268153204,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1642289426
    },
    {
        "content": "<p><code>class has_inner (𝕜 E : Type*) := (inner ( ) : E → E → 𝕜)</code> makes both <code>𝕜</code> and <code>E</code> explicit.<br>\nThe other option is to write an alias:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_inner</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inner'</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">inner</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_inner.inner'</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 268249616,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642413526
    }
]