[
    {
        "content": "<p>fin doesn’t have the morally correct recursor. we should prove it maybe.</p>",
        "id": 124402350,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522393644
    },
    {
        "content": "<p>There are two obvious approaches: using <code>fz</code> and <code>fs</code> like in <code>fin2</code>, or by peeling off the right end instead, with <code>raise_fin</code> and <code>last</code> or whatever you want to call them</p>",
        "id": 124402455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522393849
    },
    {
        "content": "<p>there should be more consistent naming here...</p>",
        "id": 124402457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522393859
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@[elab_as_eliminator] def fin.succ_rec\n  {C : ∀ n, fin n → Sort*}\n  (H0 : ∀ n, C (succ n) 0)\n  (Hs : ∀ n i, C n i → C (succ n) i.succ) : ∀ {n : ℕ} (i : fin n), C n i\n| 0 i := i.elim0\n| (succ n) ⟨0, _⟩ := H0 _\n| (succ n) ⟨succ i, h⟩ := Hs _ _ (fin.succ_rec ⟨i, lt_of_succ_lt_succ h⟩)\n\n@[elab_as_eliminator] def fin.succ_rec_on {n : ℕ} (i : fin n)\n  {C : ∀ n, fin n → Sort*}\n  (H0 : ∀ n, C (succ n) 0)\n  (Hs : ∀ n i, C n i → C (succ n) i.succ) : C n i :=\ni.succ_rec H0 Hs\n</pre></div>",
        "id": 124402660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522394308
    }
]