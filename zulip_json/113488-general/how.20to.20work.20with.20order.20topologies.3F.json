[
    {
        "content": "<p>So, for example, consider this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.polynomial</span>\n\n<span class=\"c1\">--example {K} [linear_ordered_field K] : false :=</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">preorder.topology</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">order_topology</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">topological_ring</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">linear_ordered_field.has_continuous_mul</span><span class=\"o\">,</span>\n                                <span class=\"bp\">..</span><span class=\"n\">linear_ordered_add_comm_group.topological_add_group</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">intermediate_value_interval</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial.X</span> <span class=\"n\">K</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_on</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Firstly, it's kind of weird that <code>preorder.topology </code> doesn't have an instance of <code>order_topology</code>, but I guess that is a performance consideration or not that important. However, the bigger issue is that neither of these headers work for different reasons; I need the <code>conditionally_complete_linear_order</code> for <code>intermediate_value_interval</code>, but if I add it in (even as a <code>letI</code>)  it seems to ruin the topology (even though I'm setting my own!) and making my topological ring declaration fail. I have a feeling I'm using the wrong typeclasses and they're not meant to be mix-ins — what to do here?</p>",
        "id": 262897368,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638053936
    },
    {
        "content": "<p>This looks fishy. Both <code>[linear_ordered_field K]</code> and <code>[conditionally_complete_linear_order K]</code> carry an order on <code>K</code>.</p>",
        "id": 262897519,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638054091
    },
    {
        "content": "<p>You might need <a href=\"https://github.com/leanprover-community/mathlib/issues/3292\">#3292</a> to do what you want.</p>",
        "id": 262897573,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638054170
    },
    {
        "content": "<p>I was going to say, I guess you have some specialized reason not to just use <code>real</code>?</p>",
        "id": 262897581,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638054196
    },
    {
        "content": "<p>I was trying to generalize a theorem from ℝ and decided not to use my brain too much :)</p>",
        "id": 262897586,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638054219
    },
    {
        "content": "<p>Generalize to what though?</p>",
        "id": 262897593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638054232
    },
    {
        "content": "<p>Exactly, I'm saying now that you guys point it out I'm basically generalizing from ℝ to \"ℝ with extra steps\"</p>",
        "id": 262897638,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638054253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/how.20to.20work.20with.20order.20topologies.3F/near/262897368\">said</a>:</p>\n<blockquote>\n<p>Firstly, it's kind of weird that <code>preorder.topology </code> doesn't have an instance of <code>order_topology</code>, but I guess that is a performance consideration or not that important.</p>\n</blockquote>\n<p><code>preorder.topology</code> is a def, not an instance.</p>",
        "id": 262898985,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638056408
    },
    {
        "content": "<p>yes, but an instance that's meant to be <code>letI</code>'d; in that file I see a lot of <code>letI := preorder.topology α; letI : order_topology α := \\&lt;rfl&gt;</code></p>",
        "id": 262899148,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638056724
    },
    {
        "content": "<p>Lean 3 looks for instances right to left, so it will try to pick this instance every time.</p>",
        "id": 262902834,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638063214
    }
]