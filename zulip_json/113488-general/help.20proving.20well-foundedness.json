[
    {
        "content": "<p>I am terrible at proving well-foundedness, apparently (or maybe just bad at telling when something is well-founded in the first place). Can anyone provide the proof of well-foundedness here:</p>\n<div class=\"codehilite\"><pre><span></span>universe u\n\ninductive pgame : Type (u+1)\n| mk : ∀ α β : Type u, (α → pgame) → (β → pgame) → pgame\n\nnamespace pgame\n\ndef left_moves : pgame → Type u\n| (mk l _ _ _) := l\ndef right_moves : pgame → Type u\n| (mk _ r _ _) := r\n\ndef move_left : Π (g : pgame), left_moves g → pgame\n| (mk l _ L _) i := L i\ndef move_right : Π (g : pgame), right_moves g → pgame\n| (mk _ r _ R) j := R j\n\ninductive r : pgame → pgame → Prop\n| left : Π (x : pgame) (i : x.left_moves), r (x.move_left i) x\n| right : Π (x : pgame) (j : x.right_moves), r (x.move_right j) x\n| trans : Π (x y z : pgame), r x y → r y z → r x z\n\ntheorem wf_r : well_founded r :=\nbegin\n  sorry\nend\n\nend pgame\n</pre></div>",
        "id": 168492105,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560937447
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">wf_r</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"n\">IHl</span> <span class=\"n\">IHr</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize_hyp</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"n\">i</span> <span class=\"bp\">_</span> <span class=\"n\">j</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">IHl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">IHr</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">acc</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">IH2</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">h1</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 168492989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560938408
    },
    {
        "content": "<p>Wow! Not trivial. I feel less bad failing to do that. :-)</p>",
        "id": 168493150,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560938552
    },
    {
        "content": "<p>the transitivity part is tricky. Usually I would have used the lemma that says the transitive closure of a wf relation is wf</p>",
        "id": 168493190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560938592
    }
]