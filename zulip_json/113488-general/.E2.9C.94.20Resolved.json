[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- failed</span>\n</code></pre></div>",
        "id": 307508837,
        "sender_full_name": "Erika Su",
        "timestamp": 1667391175
    },
    {
        "content": "<p>you can add <code>    assumption</code> to close the goal.</p>",
        "id": 307509487,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667391397
    },
    {
        "content": "<p><code>nat.succ.inj</code> ?</p>",
        "id": 307509566,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1667391421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557291\">Erika Su</span> has marked this topic as resolved.</p>",
        "id": 307509846,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667391508
    },
    {
        "content": "<p>Or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">library_search</span> <span class=\"c1\">-- This prints the suggestion: `exact Nat.succ.inj h`.</span>\n</code></pre></div>",
        "id": 307608397,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667419310
    },
    {
        "content": "<p>Here is a way to get the simplifier to do it (which knows succ n = succ m &lt;-&gt; n = m):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>But the simplest way is not to do the intros:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 307608866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667419449
    }
]