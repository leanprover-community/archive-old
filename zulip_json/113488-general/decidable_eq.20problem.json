[
    {
        "content": "<p>I would like some help fixing an error.  Apologies for the length, this was a little hard to minimize.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"sd\">/-- Example with no errors -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i.pred</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">j.pred</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">if_congr</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"c1\">-- no errors here</span>\n\n<span class=\"kd\">end</span>\n\n\n<span class=\"sd\">/-- build up to the (apparent) same goal state, with error -/</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">submodule_inner_product_space</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inner</span>             <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">y</span><span class=\"bp\">⟫</span><span class=\"o\">,</span>\n  <span class=\"n\">conj_sym</span>          <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inner_conj_sym</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">,</span>\n  <span class=\"n\">nonneg_im</span>         <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inner_self_nonneg_im</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_sq_eq_inner</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">norm_sq_eq_inner</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left</span>          <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">inner_add_left</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_left</span>         <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inner_smul_left</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">submodule.normed_space</span> <span class=\"n\">W</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">orthonormal</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">j</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional.findim</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">ᗮ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">orthonormal</span> <span class=\"bp\">𝕜</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">orthonormal</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">i.pred</span> <span class=\"n\">h</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hw</span> <span class=\"o\">(</span><span class=\"n\">i.pred</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j.pred</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">if_congr</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"c1\">-- error here</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222510587,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610493842
    },
    {
        "content": "<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized\n  subtype.decidable_eq i j\ninferred\n  classical.prop_decidable (i = j)\n</code></pre></div>",
        "id": 222510660,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610493895
    },
    {
        "content": "<p>Do you have to have <code>open_locale classical</code> at the top?</p>",
        "id": 222511246,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610494319
    },
    {
        "content": "<p>Your <code>orthonormal</code> doesn't require <code>decidable_eq</code> on the <code>{ι : Type*}</code></p>",
        "id": 222511332,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610494374
    },
    {
        "content": "<p>I would just require that, which will make the <code>if then else</code> happy, and then rely in other things to choose whether to use a type which is truly <code>decidable_eq</code> like <code>fin n</code>, or conjure up such an instance with <code>classical</code>.</p>",
        "id": 222511362,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610494392
    },
    {
        "content": "<p>Those suggestions are without actually trying it, I might be wrong.</p>",
        "id": 222511499,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610494494
    },
    {
        "content": "<p>Yup, requiring <code>decidable_eq</code> for <code>orthonormal</code> seems to work!</p>",
        "id": 222511551,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610494529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/decidable_eq.20problem/near/222511246\">said</a>:</p>\n<blockquote>\n<p>Do you have to have <code>open_locale classical</code> at the top?</p>\n</blockquote>\n<p>Is this a problem?  I thought that in mathlib it was supposed to be safe to make everything classical everywhere :)</p>",
        "id": 222511652,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610494591
    },
    {
        "content": "<p>In any case, whenever you do an <code>ite (a = b)</code>, you're making the claim you can actually decide that. And what happens downstream is that <code>fin n</code> knows it can supply <code>decidable_eq</code> from the fact that <code>nat</code> is <code>decidable_eq</code> and <code>fin</code> is a subtype.</p>",
        "id": 222511703,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610494642
    },
    {
        "content": "<p>And borks, because it's not the more general and not computable <code>classical.prop_decidable</code></p>",
        "id": 222511729,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610494663
    },
    {
        "content": "<p>We ran into this problem recently with <code>equiv.swap</code>s, which should only work on <code>decidable_eq</code>types. So some lemmas about them were stated with <code>classical</code> instead of just general <code>variables ... [decidable_eq ...]</code></p>",
        "id": 222511822,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610494714
    },
    {
        "content": "<p>Because later on, proving concrete specialized lemmas over <code>fin</code> or <code>option ι</code> or what have you hits the same issue you're hitting now.</p>",
        "id": 222511871,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610494759
    },
    {
        "content": "<p>Someone that understand this better than me can comment -- but should <code>def</code>s state explicitly the <code>decidable_eq</code> constraints, and downstream, uses of the <code>def</code> can satisfy that with <code>classical</code>?</p>",
        "id": 222511993,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610494844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/decidable_eq.20problem/near/222511993\">said</a>:</p>\n<blockquote>\n<p>Someone that understand this better than me can comment -- but should <code>def</code>s state explicitly the <code>decidable_eq</code> constraints, and downstream, uses of the <code>def</code> can satisfy that with <code>classical</code>?</p>\n</blockquote>\n<p>If this is correct, it seems like a useful rule of thumb.</p>",
        "id": 222512037,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610494891
    },
    {
        "content": "<p>For your <code>(λ i : fin (k + 1), if h : i = 0 then x else coe (w (i.pred h)))</code> you might prefer <code>fin.cases _ _ i</code></p>",
        "id": 222512234,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610495046
    },
    {
        "content": "<p>Could you indicate the specific syntax?  I had a quick look but didn't see how to use it.</p>",
        "id": 222513300,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610495887
    },
    {
        "content": "<p><code>fin.cases x (λ j, coe (w j)) i</code></p>",
        "id": 222513543,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610496032
    },
    {
        "content": "<p>So no need to juggle hypotheses about positivity or <code>pred</code>. And the simp lemmas for <code>fin.cases</code> are clean.</p>",
        "id": 222513618,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610496073
    },
    {
        "content": "<p>Otherwise, you'd be proving things about how <code>ite i.succ = 0</code> is always false by having to introduce the relevant inequality, then <code>i.succ.pred = i</code> etc etc</p>",
        "id": 222513703,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610496133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/decidable_eq.20problem/near/222513703\">said</a>:</p>\n<blockquote>\n<p>Otherwise, you'd be proving things about how <code>ite i.succ = 0</code> is always false by having to introduce the relevant inequality, then <code>i.succ.pred = i</code> etc etc</p>\n</blockquote>\n<p>Hmm, I didn't need to do anything like this in my proof, maybe it's a slightly different situation.</p>",
        "id": 222513878,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610496274
    },
    {
        "content": "<p>With <code>fin (n + 1)</code> it's either casing on if it is <code>0</code> or positive (I like <code>rcases eq_or_lt_of_le (fin.zero_le i)</code>) or casing on if it is <code>0</code> or the <code>i.succ</code> for some <code>i : fin n</code>.</p>",
        "id": 222514217,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610496516
    },
    {
        "content": "<p>Isn't there some rule of thumb about when to use <code>decidable_eq</code>, which I've never managed to internalise because it's \"not mathematics\"?</p>",
        "id": 222514298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610496582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/decidable_eq.20problem/near/222514217\">said</a>:</p>\n<blockquote>\n<p>With <code>fin (n + 1)</code> it's either casing on if it is <code>0</code> or positive (I like <code>rcases eq_or_lt_of_le (fin.zero_le i)</code>) or casing on if it is <code>0</code> or the <code>i.succ</code> for some <code>i : fin n</code>.</p>\n</blockquote>\n<p>I suppose the former is closer to the style of the proof I was writing.  I hadn't found it awkward, but let me experiment with <code>fin.cases</code>.  The syntax you suggested gives an error, any ideas?</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch at application\n  fin.cases x\nterm\n  x\nhas type\n  E : Type u_2\nbut is expected to have type\n  ?m_1 0 : Sort ?\n</code></pre></div>\n<p>This is for my <a href=\"#narrow/stream/113488-general/topic/decidable_eq.20problem/near/222510587\">original code</a>, modified to have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">orthonormal</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">fin.cases</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">j</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>as line 34.</p>",
        "id": 222514798,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610496978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/decidable_eq.20problem/near/222514217\">said</a>:</p>\n<blockquote>\n<p>With <code>fin (n + 1)</code> it's either casing on if it is <code>0</code> or positive (I like <code>rcases eq_or_lt_of_le (fin.zero_le i)</code>) or casing on if it is <code>0</code> or the <code>i.succ</code> for some <code>i : fin n</code>.</p>\n</blockquote>\n<p>More precisely, my proof before was casing using <code>by_cases h : i = 0</code>, and in the second (nonzero) case working with <code>i.pred h</code>.</p>",
        "id": 222515129,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610497297
    },
    {
        "content": "<p>For fin.cases, you'll still need the 'fun i, fin.cases _ _ i'. I think your way is great and clear.</p>",
        "id": 222519582,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610500675
    },
    {
        "content": "<p>Hmm, with the modification</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">orthonormal</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fin.cases</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I get a different error,</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>invalid 'fin.cases' application, elaborator has special support for this kind of application (it is handled as an \"eliminator\"), but expected type must not contain metavariables\n  ?m_1\n</code></pre></div>",
        "id": 222520220,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610501140
    },
    {
        "content": "<p>Well then, I guess the ite is the best choice :-)</p>",
        "id": 222523139,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610503390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/decidable_eq.20problem/near/222512037\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/decidable_eq.20problem/near/222511993\">said</a>:</p>\n<blockquote>\n<p>Someone that understand this better than me can comment -- but should <code>def</code>s state explicitly the <code>decidable_eq</code> constraints, and downstream, uses of the <code>def</code> can satisfy that with <code>classical</code>?</p>\n</blockquote>\n<p>If this is correct, it seems like a useful rule of thumb.</p>\n</blockquote>\n<p>This is more or less the design rule I follow: <code>classical</code> is for internal use only. Therefore, unfolding a definition or applying a lemma should not introduce <code>classical</code>. So not only definitions, but also lemma statements, should avoid the use of <code>classical</code>.</p>\n<p>In practice, I declare <code>variables [deι : decidable_eq ι]</code> if I need decidability. Since named parameters won't get included in the hypotheses if they are not used in a definition or lemma statement, there should be no complaints from the <code>classical</code> linter.</p>",
        "id": 222557814,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1610532160
    }
]