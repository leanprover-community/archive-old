[
    {
        "content": "<p>How should one use <code>match</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.homology.homotopy</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι₁</span> <span class=\"n\">ι₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">complex_shape</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">embedding</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">ι₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">ι₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι₁</span> <span class=\"bp\">→</span> <span class=\"n\">ι₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ι₂</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ι₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">rf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">eq_none</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i'</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">⦄,</span> <span class=\"n\">c₁.rel</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">c₂.rel</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">complex_shape</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">c₁</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">ι₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">ι₂</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">homological_complex</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">zero_object</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">c₁.embedding</span> <span class=\"n\">c₂</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">homological_complex</span> <span class=\"n\">C</span> <span class=\"n\">c₁</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">embed.X</span> <span class=\"o\">:</span> <span class=\"n\">ι₂</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">e.r</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">i'</span> <span class=\"o\">:=</span> <span class=\"n\">X.X</span> <span class=\"n\">i'</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>    <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">embed.d</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι₂</span><span class=\"o\">),</span> <span class=\"n\">embed.X</span> <span class=\"n\">e</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">embed.X</span> <span class=\"n\">e</span> <span class=\"n\">X</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">e.r</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">e.r</span> <span class=\"n\">j</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">j'</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">X.X</span> <span class=\"n\">i'</span> <span class=\"bp\">⟶</span> <span class=\"n\">X.X</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">X.d</span> <span class=\"n\">i'</span> <span class=\"n\">j'</span> <span class=\"c1\">-- Lean is unhappy here</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">none</span>    <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span>    <span class=\"n\">some</span> <span class=\"n\">j'</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span>    <span class=\"n\">none</span>    <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">homological_complex</span>\n</code></pre></div>",
        "id": 274970713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647003461
    },
    {
        "content": "<p>Context: I'm trying to build the functor from <code>ℕ</code>-indexed complexes to <code>ℤ</code>-indexed complexes. But there are actually two useful <code>complex_shape</code> on both <code>ℕ</code> and <code>ℤ</code>. So there are 4 potentially useful <code>embedding</code>s. Hence my attempt at abstracting the definition of this functor.<br>\nAt the same time, I was trying to write this in such a way that we will have useful defeqs when specializing to one of these four <code>ℕ → ℤ</code> embeddings.</p>",
        "id": 274970931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647003570
    },
    {
        "content": "<p>But Lean doesn't want to reduce <code>embed.X</code> in the <code>match</code> statement in <code>embed.d</code>. Is Lean throwing away too much information?</p>",
        "id": 274971043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647003612
    },
    {
        "content": "<p>this is truly terrible, but compiles:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">embed.d</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι₂</span><span class=\"o\">),</span> <span class=\"n\">embed.X</span> <span class=\"n\">e</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">embed.X</span> <span class=\"n\">e</span> <span class=\"n\">X</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">embed.X</span><span class=\"o\">],</span>\n<span class=\"n\">exact</span> <span class=\"k\">match</span> <span class=\"n\">e.r</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">e.r</span> <span class=\"n\">j</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">j'</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">X.X</span> <span class=\"n\">i'</span> <span class=\"bp\">⟶</span> <span class=\"n\">X.X</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">X.d</span> <span class=\"n\">i'</span> <span class=\"n\">j'</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">none</span>    <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span>    <span class=\"n\">some</span> <span class=\"n\">j'</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span>    <span class=\"n\">none</span>    <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I think the \"real\" answer is \"don't do this\" somehow</p>",
        "id": 274971458,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647003843
    },
    {
        "content": "<p>But.....</p>",
        "id": 274971916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647004073
    },
    {
        "content": "<p>That would mean giving up on really nice defeqs, presumably.</p>",
        "id": 274971984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647004091
    },
    {
        "content": "<p>But apparently those defeqs aren't working anyways.</p>",
        "id": 274971999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647004102
    },
    {
        "content": "<p>Anyway, thank you so much for that <code>dsimp</code> trick!</p>",
        "id": 274972024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647004118
    },
    {
        "content": "<p>I feel like <code>cases</code> on constructor applications aren't really supported that well. People like Mario, etc, will likely know the \"correct\" way to do this</p>",
        "id": 274973095,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647004743
    },
    {
        "content": "<p>Here is a \"do it this way instead\" approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">embed.X</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ι₁</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X.X</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">embed.d</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ι₁</span><span class=\"o\">),</span> <span class=\"n\">embed.X</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">embed.X</span> <span class=\"n\">X</span> <span class=\"n\">j</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X.d</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">none</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"n\">j</span>        <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">embed.shape</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ι₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i'</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">ι₁</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">i'</span> <span class=\"bp\">→</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">j'</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">c₁.rel</span> <span class=\"n\">i'</span> <span class=\"n\">j'</span><span class=\"o\">),</span>\n  <span class=\"n\">embed.d</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">X.shape</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">none</span>     <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"n\">j</span>        <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">embed.d_comp_d</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ι₁</span><span class=\"o\">),</span> <span class=\"n\">embed.d</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">≫</span> <span class=\"n\">embed.d</span> <span class=\"n\">X</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X.d_comp_d</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">none</span>     <span class=\"o\">:=</span> <span class=\"n\">limits.comp_zero</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">none</span>     <span class=\"n\">k</span>        <span class=\"o\">:=</span> <span class=\"n\">limits.comp_zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"n\">j</span>        <span class=\"n\">k</span>        <span class=\"o\">:=</span> <span class=\"n\">limits.zero_comp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">embed</span> <span class=\"o\">:</span> <span class=\"n\">homological_complex</span> <span class=\"n\">C</span> <span class=\"n\">c₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">embed.X</span> <span class=\"n\">X</span> <span class=\"bp\">∘</span> <span class=\"n\">e.r</span><span class=\"o\">,</span>\n  <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">embed.d</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">e.r</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e.r</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n  <span class=\"n\">shape'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">embed.shape</span> <span class=\"n\">X</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">e.eq_some</span><span class=\"o\">],</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">i'</span> <span class=\"n\">j'</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hij</span> <span class=\"o\">(</span><span class=\"n\">e.c</span> <span class=\"n\">h'</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">d_comp_d'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">hij</span> <span class=\"n\">hjk</span><span class=\"o\">,</span> <span class=\"n\">embed.d_comp_d</span> <span class=\"n\">X</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 274976157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647006236
    },
    {
        "content": "<p>That worked really well! See <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/complex_extend.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/complex_extend.lean</a> for the result.</p>",
        "id": 274981401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647008683
    }
]