[
    {
        "content": "<p>Just found out something interesting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.game</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"c1\">-- both norm_num fail</span>\n<span class=\"k\">calc</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 226006927,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1613057185
    },
    {
        "content": "<p>Even <code>sorry</code> fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.pgame</span>\n\n<span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 226010013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613058227
    },
    {
        "content": "<p>Because <code>lt</code> on it is some weird data that doesn't have <code>[trans]</code> afair</p>",
        "id": 226011279,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613058627
    },
    {
        "content": "<p><code>1 ≤ 3</code> is a completely benign statement about natural numbers</p>",
        "id": 226011371,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1613058658
    },
    {
        "content": "<p>Oh I see what you mean</p>",
        "id": 226011435,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613058677
    },
    {
        "content": "<p>Unfortunately <code>local attribute [-trans]</code> isn't legal, otherwise we could use it to track down which trans lemma is firing</p>",
        "id": 226011758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613058773
    },
    {
        "content": "<p>I'll spare you the effort of searching: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/game.le_trans/src\">src#game.le_trans</a></p>",
        "id": 226011928,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1613058842
    },
    {
        "content": "<p>The problem persists with just <code>pgame</code> imported though, so I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.le_trans/src\">src#pgame.le_trans</a> is also a culprit?</p>",
        "id": 226011999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613058867
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.le_trans/src\">src#pgame.le_trans</a></p>",
        "id": 226012096,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1613058911
    },
    {
        "content": "<p>Also: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.lt_of_le_of_lt/src\">src#pgame.lt_of_le_of_lt</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.lt_of_lt_of_le/src\">src#pgame.lt_of_lt_of_le</a></p>",
        "id": 226012336,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1613058996
    },
    {
        "content": "<p>I might be being dense: is the issue with those lemmas or in <code>calc</code>?</p>",
        "id": 226015515,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613059879
    },
    {
        "content": "<p>I'm guessing <code>calc</code> chooses lemmas keyed to the head symbol? So those lemmas overwrite the generic trans lemma for <code>has_le.le</code>?</p>",
        "id": 226015737,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613059968
    },
    {
        "content": "<p>The issue is that <code>calc</code> can't handle multiple <code>@[trans]</code> lemmas per binrel</p>",
        "id": 226015763,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1613059976
    },
    {
        "content": "<p>I saw it with <code>subset</code> on <code>set</code> vs <code>finset</code>.</p>",
        "id": 226015807,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1613059995
    },
    {
        "content": "<p>It's not just calc either, also the transitivity tactic fails after importing pgame.</p>",
        "id": 226017702,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1613060792
    },
    {
        "content": "<p>Is pgame not a preorder? This <code>@[trans]</code> lemma should not exist, it should be using the lemma on preorders</p>",
        "id": 226018911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613061345
    },
    {
        "content": "<p>Sadly, no: <a href=\"https://github.com/leanprover-community/mathlib/blob/d405c5e9099b4b2e23a475dd76e418918d08b666/src/set_theory/pgame.lean#L40\">https://github.com/leanprover-community/mathlib/blob/d405c5e9099b4b2e23a475dd76e418918d08b666/src/set_theory/pgame.lean#L40</a></p>",
        "id": 226019052,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613061412
    },
    {
        "content": "<p>It looks like <code>lt</code> is quite badly behaved too. I wonder if it would work to have a preorder instance and a <code>has_lt</code> instance of higher priority</p>",
        "id": 226019348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613061533
    },
    {
        "content": "<p>Or a <code>local notation `&lt;` := weird_lt</code> so that <code>lt_of_lt_of_le</code> and such work</p>",
        "id": 226019452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613061579
    },
    {
        "content": "<p>Can we have <code>lt_game</code> and notation instead of <code>has_lt</code>?</p>",
        "id": 226019488,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1613061594
    },
    {
        "content": "<p>This has come up again here: <a href=\"https://github.com/leanprover-community/mathlib/pull/7440/files#r627673550\">https://github.com/leanprover-community/mathlib/pull/7440/files#r627673550</a></p>",
        "id": 238112424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620639516
    }
]