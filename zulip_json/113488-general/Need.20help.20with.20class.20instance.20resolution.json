[
    {
        "content": "<p>Hi, I'm trying to make <code>algebra</code> work with semirings and semimodules, see <a href=\"https://github.com/leanprover-community/mathlib/issues/2303\" title=\"https://github.com/leanprover-community/mathlib/issues/2303\">#2303</a>. Lean fails to find an instance of <code>algebra R (matrix n R)</code> in <code>lie_algebra.lean</code>. I've enables <code>trace.class_instances</code>, see <a href=\"https://github.com/leanprover-community/mathlib/pull/2303/checks?check_run_id=549397958\" title=\"https://github.com/leanprover-community/mathlib/pull/2303/checks?check_run_id=549397958\">build log</a>. It seems that <code>matrix_algebra</code> fails <code>defeq</code>. Why could this happen?</p>",
        "id": 192421345,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585675257
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">lie_algebra</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<p>What definition of matrix are you using? (what you posted doesn't typecheck for me)</p>",
        "id": 192421563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585675376
    },
    {
        "content": "<p>I'm talking about the bottom of <a href=\"https://github.com/leanprover-community/mathlib/blob/algebra-bundled/src/algebra/lie_algebra.lean#L441\" title=\"https://github.com/leanprover-community/mathlib/blob/algebra-bundled/src/algebra/lie_algebra.lean#L441\">lie_algebra.lean</a></p>",
        "id": 192421987,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585675598
    },
    {
        "content": "<p><code>matrix n n R</code></p>",
        "id": 192422070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585675635
    },
    {
        "content": "<p>It compiles with <code>master</code> but fails in my branch, probably because of some <code>semiring</code> vs <code>ring</code> or <code>semimodule</code> vs <code>module</code> issues.</p>",
        "id": 192422109,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585675660
    },
    {
        "content": "<p>In the build log you can see that it tries to apply <code>matrix_algebra</code> but fails.</p>",
        "id": 192422216,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585675694
    },
    {
        "content": "<p>The above doesn't compile for me on master:</p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nR : Type,\n_inst_1 : comm_ring R,\nn : Type,\n_inst_2 : fintype n\n⊢ ring (matrix n n R)\n</pre></div>",
        "id": 192422455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585675803
    },
    {
        "content": "<p>That's interesting.</p>",
        "id": 192422638,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585675884
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">lie_algebra</span>\n\n<span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 192422854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585675953
    },
    {
        "content": "<p>Need decidable equality on n</p>",
        "id": 192422868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585675960
    },
    {
        "content": "<p>(the def to work around open_locale bug)</p>",
        "id": 192422933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585675994
    },
    {
        "content": "<p>Don't we have a decidable equality on <code>fin n</code>? And we have it at the bottom of <code>lie_algebra</code></p>",
        "id": 192423068,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585676047
    },
    {
        "content": "<p>You've posted code snippet with <code>fin n</code>, then error for <code>{n : Type*} [fintype n]</code></p>",
        "id": 192423233,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585676126
    },
    {
        "content": "<p>Yes, I was confused by n. I'll fix. Thanks.</p>",
        "id": 192424429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585676672
    },
    {
        "content": "<p>And this doesn't help with the original question: why <code>lie_algebra</code> fails to compile in my branch?</p>",
        "id": 192426294,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585677475
    },
    {
        "content": "<p>Probably this issue is similar to what <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> had when he tried to make <code>linear_map</code>s work with <code>semimodule</code>s</p>",
        "id": 192428591,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585678497
    },
    {
        "content": "<p>Ping here...</p>",
        "id": 192437494,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585682659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I'd prefer some hint...</p>",
        "id": 192442720,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585685260
    },
    {
        "content": "<p>I have tried (again) to refactor things to replace <code>module</code> by <code>semimodule</code> everywhere, hoping that Lean 3.7 would help. I run into issues I don't understand (mostly with product types), with class instance resolution as usual. I have tracked down the source of my problem to the following example. Open current mathlib master, and put the following lines at Line 85 in <code>algebra/pi_instances.lean</code> (after the semimodule instance, but before the module instance)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>  <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_ok</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">but_same</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n  <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>In <code>ok</code> and <code>not_ok</code>, I am asking if the same type, but presented in two different ways, is a semimodule. The first one works, the second one fails. The last lemma in the snippet is to show that the types are really the same. In current master, the following module instance saves the day, because it can then be used to show that <code>not_ok</code> is a semimodule, so when this class instance question appears later on it is solved. In my refactoring, I remove modules, so I remove the <code>pi_instance</code> for modules, and now this instance fails. Of course, I could add it back (with semimodules), but it doesn't feel like a real solution. Do you understand what is going on, and what I should do here?</p>",
        "id": 192687775,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1585843090
    },
    {
        "content": "<p>Anyone on this typeclass issue? Maybe I should try to bring <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> here.</p>",
        "id": 192700393,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1585848851
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>(@add_comm_group.to_add_comm_monoid.{0} (β → α)\n  (@pi.add_comm_group.{0 0} β (λ (a : β), α)\n  (λ (i : β), @ring.to_add_comm_group.{0} α _inst_1)))\n</pre></div>\n\n\n<p>has type <code>add_comm_monoid (β → α)</code>, whereas</p>\n<div class=\"codehilite\"><pre><span></span>(@pi.add_comm_monoid.{0 0} β (λ (a : β), α)\n  (λ (i : β), @semiring.to_add_comm_monoid.{0} α (@ring.to_semiring.{0} α _inst_1)))\n</pre></div>\n\n\n<p>has type <code>add_comm_monoid (Π (i : β), (λ (a : β), α) i)</code></p>",
        "id": 192701210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585849265
    },
    {
        "content": "<p>And these are the same thing, right?</p>",
        "id": 192701365,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1585849347
    },
    {
        "content": "<p>Maybe not to the unifier</p>",
        "id": 192701382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585849358
    },
    {
        "content": "<p>At least some parts of Lean know it is the same thing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 192701701,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1585849516
    },
    {
        "content": "<p>For sure, but you know that <code>rw</code> doesn't think they're the same thing</p>",
        "id": 192701743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585849538
    },
    {
        "content": "<p>I don't know the answer, I've just taken to looking at the output of </p>\n<div class=\"codehilite\"><pre><span></span>set_option trace.type_context.is_def_eq true\nset_option trace.type_context.is_def_eq_detail true\n</pre></div>\n\n\n<p>recently.</p>",
        "id": 192701837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585849565
    },
    {
        "content": "<p><code>foo</code> is iota reduction or eta expansion or whatever it is called by the CS people, and that's part of <code>rfl</code> but maybe not part of the unifier. But also it might be nothing to do with the problem :-(</p>",
        "id": 192702267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585849777
    },
    {
        "content": "<p>Actually rw seems to work fine too</p>",
        "id": 192702477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585849870
    },
    {
        "content": "<p>I don't know how to check to see if two terms are syntactically equal in Lean</p>",
        "id": 192702512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585849891
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192702553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585849910
    },
    {
        "content": "<p>This is the kind of problem where I feel completely helpless. When even with <code>pp.all</code> I can't see anything bad, I just need to call for help...</p>",
        "id": 192702637,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1585849941
    },
    {
        "content": "<p>Yeah I am interested in learning how to debug these issues. <code>mv_polynomial</code> is defined to be some <code>finsupp</code> after some unfolding, and I saw an mv_polynomial zero and a finsupp zero which <code>add_zero</code> got upset about because of some unification issue but <code>refl</code> worked fine.</p>",
        "id": 192702789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585850021
    },
    {
        "content": "<p><code>pp.all</code> just shows these defeq terms. The question is what the type class inference algorithm is I guess.</p>",
        "id": 192703240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585850240
    },
    {
        "content": "<p>With <code>set_option trace.class_instances true</code>, the success</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ok</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>  <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">apply_instance</span> <span class=\"kn\">end</span> <span class=\"c1\">-- ok</span>\n</pre></div>\n\n\n<p>has log</p>\n<div class=\"codehilite\"><pre><span></span>[class_instances] (0) ?x_0 : @semimodule α (β → α) (@ring.to_semiring α _inst_1)\n  (@pi.add_comm_monoid β (λ (a : β), α)\n     (λ (i : β), @semiring.to_add_comm_monoid α (@ring.to_semiring α _inst_1))) := @pi.semimodule ?x_1 ?x_2 ?x_3 ?x_4 ?x_5 ?x_6\n\n[class_instances] (1) ?x_6 i : @semimodule α α (@ring.to_semiring α _inst_1) (@semiring.to_add_comm_monoid α (@ring.to_semiring α _inst_1)) := @semiring.to_semimodule (?x_15 i) (?x_16 i)\n</pre></div>",
        "id": 192704149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585850626
    },
    {
        "content": "<p>(I skipped a couple of steps and just showed the successful route to the success) and the failure has a <a href=\"https://gist.github.com/kbuzzard/a6188cf5b37c683d10fb3a1f64de0690\" title=\"https://gist.github.com/kbuzzard/a6188cf5b37c683d10fb3a1f64de0690\">longer log</a>.</p>",
        "id": 192704461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585850751
    },
    {
        "content": "<p>The very first line of the gist is</p>\n<div class=\"codehilite\"><pre><span></span>[class_instances] (0) ?x_0 : @semimodule α (β → α) (@ring.to_semiring α _inst_1)\n  (@add_comm_group.to_add_comm_monoid (β → α)\n     (@pi.add_comm_group β (λ (a : β), α) (λ (i : β), @ring.to_add_comm_group α _inst_1))) := @pi.semimodule ?x_1 ?x_2 ?x_3 ?x_4 ?x_5 ?x_6\nfailed is_def_eq\n</pre></div>\n\n\n<p>so it tries to use <code>pi.semimodule</code> but here it fails.</p>",
        "id": 192704838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585850924
    },
    {
        "content": "<p>I think this is the precise point where the typeclass algorithm decides to go in two different ways for your two different questions.</p>",
        "id": 192704894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585850953
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ok&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Proof complete!</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">not_ok&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  invalid type ascription, term has type</span>\n<span class=\"cm\">  semimodule ?m_1 (Π (i : ?m_2), ?m_3 i) : Type (max ? ? ?)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  semimodule α (β → α) : Type</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192705324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585851193
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> were talking about this kind of unification issue quite recently.</p>",
        "id": 192705395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585851236
    },
    {
        "content": "<p>The types of <code>ok'</code> and <code>not_ok'</code> are defeq.</p>",
        "id": 192705708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585851404
    },
    {
        "content": "<p>Of course I am in no position to be able to tell you what to do about it, I'm just observing that with <code>set_option trace.class_instances true</code> you can diagnose what is going on even if you know as little about computers as me.</p>",
        "id": 192705860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585851482
    },
    {
        "content": "<p>The first difference in the <code>trace.type_context.is_def_eq true</code> logs is that in the OK case, we have</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq] semimodule ?m_1 (Π (i : ?m_2), ?m_3 i) =?= semimodule α (β → α) ... success  (approximate mode)\n</pre></div>\n\n\n<p>and in the not OK case, we have</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq] semimodule ?m_1 (Π (i : ?m_2), ?m_3 i) =?= semimodule α (β → α) ... failed  (approximate mode)\n</pre></div>\n\n\n<p>So that is a diagnosis of the failure, which might help someone else to tell you how to fix it.</p>",
        "id": 192706435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585851768
    },
    {
        "content": "<p>These lines are the same up to <code>success/failed</code>, right?</p>",
        "id": 192706483,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585851793
    },
    {
        "content": "<p>Yes, but I didn't have the detailed version on</p>",
        "id": 192706509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585851808
    },
    {
        "content": "<p>are these logs with pp.all? is that what you mean?</p>",
        "id": 192706619,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585851853
    },
    {
        "content": "<p>oh no, i have pp.all off</p>",
        "id": 192706667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585851875
    },
    {
        "content": "<p>I meant I didn't have <code>trace.type_context.is_def_eq_detail</code> on</p>",
        "id": 192706908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585851987
    },
    {
        "content": "<p>Well, I imagine/hope there must be some difference between the pp.all versions.</p>",
        "id": 192706909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585851988
    },
    {
        "content": "<p>Ah.</p>",
        "id": 192706917,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585851991
    },
    {
        "content": "<p>Here is the pp.all unification failure:</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq] @semimodule.{?l_1 (max ?l_2 ?l_3)} ?m_4 (Π (i : ?m_5), ?m_6 i) ?m_7\n  (@pi.add_comm_monoid.{?l_2 ?l_3} ?m_5 (λ (i : ?m_5), ?m_6 i) (λ (i : ?m_5), ?m_8 i)) =?= @semimodule.{0 0} α (β → α) (@ring.to_semiring.{0} α _inst_1)\n  (@add_comm_group.to_add_comm_monoid.{0} (β → α)\n     (@pi.add_comm_group.{0 0} β (λ (a : β), α) (λ (i : β), @ring.to_add_comm_group.{0} α _inst_1))) ... failed  (approximate mode)\n</pre></div>\n\n\n<p>and here is the success:</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq] @semimodule.{?l_1 (max ?l_2 ?l_3)} ?m_4 (Π (i : ?m_5), ?m_6 i) ?m_7\n  (@pi.add_comm_monoid.{?l_2 ?l_3} ?m_5 (λ (i : ?m_5), ?m_6 i) (λ (i : ?m_5), ?m_8 i)) =?= @semimodule.{0 0} α (β → α) (@ring.to_semiring.{0} α _inst_1)\n  (@pi.add_comm_monoid.{0 0} β (λ (a : β), α)\n     (λ (i : β), @semiring.to_add_comm_monoid.{0} α (@ring.to_semiring.{0} α _inst_1))) ... success  (approximate mode)\n</pre></div>",
        "id": 192707148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585852112
    },
    {
        "content": "<p>So now you can all play the unification game at home</p>",
        "id": 192707257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585852177
    },
    {
        "content": "<p>Okay so there is a diamond here, when putting an add_comm_monoid structure on a product of rings.</p>",
        "id": 192707376,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585852226
    },
    {
        "content": "<p>we could (1) forget from ring to add_comm_group, (2) use the pi instance, (3) forget from add_comm_group to add_comm_monoid.<br>\nOr (1) forget from ring to semiring, (2) forget from ring to add_comm_monoid, (3) use the pi instance.</p>",
        "id": 192707443,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585852268
    },
    {
        "content": "<p>question 1: are these defeq?</p>",
        "id": 192707450,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585852272
    },
    {
        "content": "<p>I'm pretty sure the answer will be yes</p>",
        "id": 192707502,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585852317
    },
    {
        "content": "<p>question 2: are they defeq using \"instance transparency\", that is, only looking into the definitions of things which are either <code>reducible</code> or <code>instance</code>s (and not, for example, the definition of <code>id</code>)</p>",
        "id": 192707652,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585852401
    },
    {
        "content": "<p>I imagine the answer will be no, otherwise both should succeed (or fail).</p>",
        "id": 192707685,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585852421
    },
    {
        "content": "<p>I see from <code>#print pi.add_comm_monoid</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n</pre></div>",
        "id": 192708356,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585852786
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- the full semimodule instance</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"c1\">-- instance transparency version for the full semimodule instance</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">reflexivity</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"kn\">reducible</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"c1\">-- But now let&#39;s look at the subterms giving the add_comm_monoid structure</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">reflexivity</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"kn\">reducible</span> <span class=\"c1\">-- fails!</span>\n</pre></div>",
        "id": 192708442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585852818
    },
    {
        "content": "<p>oh, actually that field is probably not a problem, since <code>pi.add_comm_group</code>'s <code>add</code> has <code>id</code> in the same place.</p>",
        "id": 192708499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585852857
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span><span class=\"bp\">._</span><span class=\"n\">proof_2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">_</span><span class=\"n\">x</span><span class=\"o\">)),</span>\n</pre></div>\n\n\n<p>This certainly looks silly</p>",
        "id": 192708522,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585852877
    },
    {
        "content": "<p>Reid I think my snippet shows that the semimodule terms are defeq even using instance transparency, but they have defeq subterms which are not defeq using instance transparency. I am pretty much at the boundary of my understanding here, I am just posting stuff like <code>by tactic.reflexivity tactic.transparency.reducible</code> copying from posts Gabriel made earlier this week and am not even 100% sure that I am checking what you are asking.</p>",
        "id": 192708690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585852989
    },
    {
        "content": "<p>I think you want <code>tactic.transparency.instances</code> not <code>reducible</code></p>",
        "id": 192708719,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585853018
    },
    {
        "content": "<p>Eveything succeeds if I change <code>reducible</code> to <code>instances</code></p>",
        "id": 192708801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585853050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> help</p>",
        "id": 192708815,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585853066
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">reflexivity</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"n\">instances</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 192708837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585853082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> MWE please.</p>",
        "id": 192708860,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585853094
    },
    {
        "content": "<p>I'll do it</p>",
        "id": 192708880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585853106
    },
    {
        "content": "<p>I'm really confused about your 2nd and 4th examples. Isn't <code>semimodule</code> just a constant? How can adding it turn a failing unification problem into one which succeeds?</p>",
        "id": 192709294,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585853305
    },
    {
        "content": "<p>Actually these examples are \"easier\" than the original failing instance search problem, because here we gave Lean both sides</p>",
        "id": 192709618,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585853485
    },
    {
        "content": "<p>Not to sound like a broken record, but life would be simpler if we didn't allow diamonds and <code>add_comm_group.to_add_comm_monoid</code> wasn't an instance.</p>",
        "id": 192709831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585853614
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ok&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"n\">def</span> <span class=\"n\">not_ok&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n<span class=\"c1\">--by apply_instance -- fails</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n     <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n     <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">reflexivity</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"kn\">reducible</span> <span class=\"c1\">-- succeeds</span>\n</pre></div>",
        "id": 192709953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585853702
    },
    {
        "content": "<p>The second <code>apply_instance</code> works for me.</p>",
        "id": 192710095,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585853771
    },
    {
        "content": "<p>curses, I might be using some modified mathlib</p>",
        "id": 192710128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585853793
    },
    {
        "content": "<p>oh yeah, you need to add an <code>#exit</code> in <code>algebra.pi_instances</code> :-/</p>",
        "id": 192710185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585853819
    },
    {
        "content": "<p>Is this meant seriously?  Where should I put it?</p>",
        "id": 192710239,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585853858
    },
    {
        "content": "<p>How about</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">subring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pi</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>     <span class=\"c1\">-- The indexing type</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"c1\">-- The family of types already equipped with instances</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_zero</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">zero_apply</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_one</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">one_apply</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">has_one</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">one_apply</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_add</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_add</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">add_apply</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_add</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_mul</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_mul</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_apply</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_mul</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">has_mul</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">mul_apply</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_inv</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">inv_apply</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_neg</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_neg</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">neg_apply</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_neg</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">has_inv</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">inv_apply</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_scalar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">smul_apply</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">semigroup</span>          <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span>          <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span>          <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">comm_semigroup</span>     <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_semigroup</span>     <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_semigroup</span>     <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">monoid</span>             <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">monoid</span>             <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span>             <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">comm_monoid</span>        <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_monoid</span>        <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span>        <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">group</span>              <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">group</span>              <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group</span>              <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">comm_group</span>         <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_group</span>         <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span>         <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">add_semigroup</span>      <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_semigroup</span>      <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_semigroup</span>      <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">add_comm_semigroup</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_semigroup</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_semigroup</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">add_monoid</span>         <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span>         <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span>         <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">add_comm_monoid</span>    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span>    <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span>    <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">add_group</span>          <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_group</span>          <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span>          <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">add_comm_group</span>     <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span>     <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span>     <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">semiring</span>           <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semiring</span>           <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span>           <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">ring</span>               <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ring</span>               <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring</span>               <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">comm_ring</span>          <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_ring</span>          <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span>          <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">mul_action</span>     <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">}</span>                                      <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">mul_action</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>     <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">distrib_mul_action</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">}</span>         <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>      <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">mul_action</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">semimodule</span>     <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">}</span>       <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>     <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">distrib_mul_action</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ok&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"n\">def</span> <span class=\"n\">not_ok&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n<span class=\"c1\">--by apply_instance -- fails</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n     <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n     <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">reflexivity</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"kn\">reducible</span> <span class=\"c1\">-- succeeds</span>\n</pre></div>",
        "id": 192710279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585853880
    },
    {
        "content": "<p>That is like the first third of algebra.pi_instances</p>",
        "id": 192710386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585853918
    },
    {
        "content": "<p>Ok, fails for me now.</p>",
        "id": 192710620,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585854033
    },
    {
        "content": "<p>I stop just before the line</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">module</span>         <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">}</span>           <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>         <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span> <span class=\"n\">I</span> <span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 192710717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585854092
    },
    {
        "content": "<p>In the first message of the thread, I said to put it just before the module instance.</p>",
        "id": 192710734,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1585854108
    },
    {
        "content": "<p>The reason I stop here is that Sebastien is trying to remove <code>module</code> from this part of the story and use only <code>semimodule</code>.</p>",
        "id": 192710824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585854143
    },
    {
        "content": "<p>Why is there an <code>eq.mpr</code> in the 0 in <code>pi.add_comm_monoid</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)],</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)],</span>\n  <span class=\"o\">{</span><span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n   <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n   <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">add_comm_monoid</span><span class=\"bp\">._</span><span class=\"n\">proof_2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">_</span><span class=\"n\">x</span><span class=\"o\">)),</span>\n   <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n   <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n   <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 192721933,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585859418
    },
    {
        "content": "<p>With this modifications, the <code>not_ok'</code> works for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">add_comm_monoid</span>    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span>    <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span>    <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">semimodule</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n           <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n           <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>     <span class=\"o\">:</span>\n           <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">I</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n            <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">distrib_mul_action</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 192722802,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585859845
    },
    {
        "content": "<p>Previously, there was an <code>eq.mpr</code> in the 0 of <code>pi.add_comm_monoid</code> (this is bad for unification, don't do that).  There were also the η-expansions <code>λ i, f i</code> and <code>λ i, m i</code> in <code>pi.semimodule</code>, try to avoid those as well.</p>",
        "id": 192723017,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585859966
    },
    {
        "content": "<p>I'm not sure what in <code>pi_instance</code> is causing that. Would  <code>apply</code> insert <code>id</code> terms in the goal?</p>",
        "id": 192723467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585860204
    },
    {
        "content": "<p>I tried to understand the magic in <code>by pi_instance</code> some time ago, and failed.</p>",
        "id": 192732846,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585865004
    },
    {
        "content": "<p>Could someone explain me what happens in <code>derive_field</code> in <code>tactic/pi_instances</code> (the \"else\" branch)?</p>",
        "id": 192732955,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585865055
    },
    {
        "content": "<p>BTW, the following fails (tried to write this instead of the current instance):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">add_comm_group</span>     <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span>     <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span>     <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"k\">show</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 192733014,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585865089
    },
    {
        "content": "<p>Here is the code of the <code>else</code> branch:</p>\n<div class=\"codehilite\"><pre><span></span>     <span class=\"n\">field</span> <span class=\"err\">←</span> <span class=\"n\">get_current_field</span><span class=\"o\">,</span>\n     <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">field</span><span class=\"o\">,</span>\n     <span class=\"n\">expl_arity</span> <span class=\"err\">←</span> <span class=\"n\">get_expl_arity</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n     <span class=\"n\">xs</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">iota</span> <span class=\"n\">expl_arity</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">intro1</span><span class=\"o\">,</span>\n     <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">intro1</span><span class=\"o\">,</span>\n     <span class=\"n\">applyc</span> <span class=\"n\">field</span><span class=\"o\">,</span>\n     <span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"err\">$</span>\n      <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n      <span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"err\">$</span> <span class=\"err\">%%</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">%%</span><span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">&quot;args&quot;</span><span class=\"o\">,</span>\n     <span class=\"n\">return</span> <span class=\"o\">()</span>\n</pre></div>",
        "id": 192733479,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585865330
    },
    {
        "content": "<p>Rewriting <code>pi</code>-instances by hand doesn't help.</p>",
        "id": 192735395,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585866396
    },
    {
        "content": "<p>I tried the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">subring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pi</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>     <span class=\"c1\">-- The indexing type</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"c1\">-- The family of types already equipped with instances</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">has_one</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">one_apply</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"n\">has_mul</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_mul</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_apply</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_mul</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"n\">has_inv</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">inv_apply</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_scalar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">smul_apply</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_semigroup</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">semigroup</span>          <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span>          <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span>          <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">derive_field</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_comm_semigroup</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">comm_semigroup</span>     <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_semigroup</span>     <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_semigroup</span>     <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">derive_field</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">monoid</span>             <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">monoid</span>             <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span>             <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">derive_field</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_comm_monoid</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">comm_monoid</span>        <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_monoid</span>        <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span>        <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">derive_field</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_group</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">group</span>              <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">group</span>              <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group</span>              <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">has_inv</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">derive_field</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_comm_group</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">comm_group</span>         <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_group</span>         <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span>         <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">has_inv</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">derive_field</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">semiring</span>           <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semiring</span>           <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span>           <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">derive_field</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">ring</span>               <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ring</span>               <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring</span>               <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">has_neg</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">derive_field</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">comm_ring</span>          <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_ring</span>          <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span>          <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">has_neg</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">derive_field</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">mul_action</span>     <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">}</span>                                      <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">mul_action</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>     <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">distrib_mul_action</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">}</span>         <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>      <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">mul_action</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">semimodule</span>     <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">}</span>       <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>     <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">distrib_mul_action</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>  <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_ok</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span> <span class=\"n\">pi</span>\n</pre></div>",
        "id": 192735476,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585866451
    },
    {
        "content": "<p>And I don't see the difference between my instances and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> 's</p>",
        "id": 192735706,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585866586
    },
    {
        "content": "<p>Ah, I didn't apply his patch to <code>semimodule</code>.</p>",
        "id": 192736828,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585867321
    },
    {
        "content": "<p>Regarding this <code>eq.mpr</code> ---- I put a lot of effort in the <code>transport</code> tactic to ensure none of these turned up in <code>transport</code>ed structures.</p>",
        "id": 192738305,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585868258
    },
    {
        "content": "<p>I haven't looked at this case, but we should ping <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> to ask about <code>pi_instances</code>, I think.</p>",
        "id": 192738369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585868283
    },
    {
        "content": "<p>When writing <code>transport</code>, I found that often the <code>eq.mpr</code>s (and even the<code>eq.rec</code>s) that were being produced were actually trivial:</p>",
        "id": 192738401,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585868316
    },
    {
        "content": "<p>when you looked at the equality you were running <code>eq.mpr</code> along, it was in fact <code>refl</code>, and <code>eq_mpr_refl</code> (only recently in<code>master</code>) would reduce it.</p>",
        "id": 192738514,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585868400
    },
    {
        "content": "<p>Sometimes it was very hard to avoid the <code>eq.mpr</code> being generated, and you had to intercept it after the fact with the <a href=\"https://github.com/leanprover-community/mathlib/pull/2251/files#diff-952457174394a10d62a503823cccc3bbR349\" title=\"https://github.com/leanprover-community/mathlib/pull/2251/files#diff-952457174394a10d62a503823cccc3bbR349\"><code>simp_result</code> tactic</a> introduced in <a href=\"https://github.com/leanprover-community/mathlib/issues/2251\" title=\"https://github.com/leanprover-community/mathlib/issues/2251\">#2251</a>.</p>",
        "id": 192738672,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585868472
    },
    {
        "content": "<p>I haven't spent much time looking at <code>eq.mp</code>. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I think you know more than me on the topic</p>",
        "id": 192738929,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585868633
    },
    {
        "content": "<p>How do I add debug output to a tactic script? Do we have something more convenient than <code>trace</code>?</p>",
        "id": 192739580,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585869060
    },
    {
        "content": "<p>I just want to prepend string labels to output strings.</p>",
        "id": 192739635,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585869104
    },
    {
        "content": "<p>You could write your own that does:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_trace</span> <span class=\"o\">(</span><span class=\"n\">msg</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"s2\">&quot;prefix: &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">msg</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 192741977,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585870909
    },
    {
        "content": "<p>Ok, so wrapping <code>pi_instance</code> in <code>simp_result</code> does make the <code>eq.mpr</code> in <code>#print pi.add_comm_monoid </code> go away.</p>",
        "id": 192742258,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585871100
    },
    {
        "content": "<p>So I think this counts as a fix to <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s original problem?</p>",
        "id": 192742656,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585871409
    },
    {
        "content": "<p>How should we implement it?</p>",
        "id": 192742668,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585871417
    },
    {
        "content": "<p>I can make a PR that just patches <code>pi_instances</code> to use <code>simp_result</code>. (Presumably I will play with <code>squeeze_simp</code> to identify exactly which simp lemmas <code>simp_result</code> actually needs.</p>",
        "id": 192742689,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585871449
    },
    {
        "content": "<p>And then <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> can continue his branch on top of that?</p>",
        "id": 192742712,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585871469
    },
    {
        "content": "<p>Sounds like a good idea.</p>",
        "id": 192742981,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585871658
    },
    {
        "content": "<p>We will need to remember to make <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s patch to the <code>semimodule</code> instance in <code>pi_instances</code>, but I think this can be done in <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s branch, as this is a separate issue from the automation problem.</p>",
        "id": 192743068,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585871756
    },
    {
        "content": "<p>This seems super hacky. Couldn't we just build the correct term in the first place using structural recursion on the shape of the operation we want to define?</p>",
        "id": 192743463,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585872076
    },
    {
        "content": "<p>Can you do this? It seems that either <code>applyc</code> or <code>apply</code> generates this <code>eq.mpr</code>.</p>",
        "id": 192743878,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585872388
    },
    {
        "content": "<p>No, for <code>one</code> somehow <code>intro1</code> closes the goal.</p>",
        "id": 192744659,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585872979
    },
    {
        "content": "<p>And generates <code>eq.mpr</code>.</p>",
        "id": 192744665,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585872985
    },
    {
        "content": "<p><code>intro_core</code> does the same.</p>",
        "id": 192744808,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585873141
    },
    {
        "content": "<p>How do I print debug current proof state (i.e., what Lean normally prints in \"goals\" in the tactic proof mode)?</p>",
        "id": 192744855,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585873201
    },
    {
        "content": "<p>Dumb <code>eq.mpr</code>s seem hard to avoid. :-(</p>",
        "id": 192744950,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585873279
    },
    {
        "content": "<p>But maybe we can go into the C++?</p>",
        "id": 192744955,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585873287
    },
    {
        "content": "<p>I found out the difference between <code>1</code> and <code>mul</code>.</p>",
        "id": 192745560,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585873766
    },
    {
        "content": "<p>For <code>mul</code>, <code>expl_arity = 2</code>, and after two <code>intro1</code>, the goal is <code>Π i, f i</code></p>",
        "id": 192745624,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585873803
    },
    {
        "content": "<p>For <code>one</code>, <code>expl_arity = 1</code>, and after one <code>intro1</code>, the goal is <code>f i</code>.</p>",
        "id": 192745657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585873827
    },
    {
        "content": "<p>What I had in mind was to just build the required <code>expr</code> directly from the constructors.</p>",
        "id": 192745700,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585873878
    },
    {
        "content": "<p>My tactic programming skills are, let's say, far from being good.</p>",
        "id": 192745793,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585873946
    },
    {
        "content": "<p>exactly, don't use tactics!</p>",
        "id": 192745803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585873963
    },
    {
        "content": "<p>What do you propose?</p>",
        "id": 192745816,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585873986
    },
    {
        "content": "<p>Should we have <code>pi_instance</code> tactic or not?</p>",
        "id": 192745828,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585874005
    },
    {
        "content": "<p>Of course, we can leave only <code>Prop</code> branch, and use <code>:= by refine_struct { one := (1 : Π i, f i) }; pi_props</code></p>",
        "id": 192745957,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585874101
    },
    {
        "content": "<p>This will give us all the required defeq's.</p>",
        "id": 192745983,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585874126
    },
    {
        "content": "<p>But if we want to generate all fields automatically, then we need some meta code analyzing the target.</p>",
        "id": 192746076,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585874186
    },
    {
        "content": "<p>The current code works well for unary and binary operations but fails for constants.</p>",
        "id": 192746099,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585874216
    },
    {
        "content": "<p>The </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"err\">$</span>\n      <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n      <span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"err\">$</span> <span class=\"err\">%%</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">%%</span><span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">&quot;args&quot;</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>block deserves some documentation. :-)</p>",
        "id": 192746231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585874308
    },
    {
        "content": "<p>(but I think is unrelated to what we're seeing at the moment)</p>",
        "id": 192746264,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585874352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I added some <code>trace</code>s, and the goal <code>one</code> is closed by <code>x ← intro1</code></p>",
        "id": 192746395,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585874466
    },
    {
        "content": "<p>how does the rest of the tactic not fail, then?</p>",
        "id": 192746483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585874552
    },
    {
        "content": "<p>doesn't <code>applyc</code> choke when there's no goal?</p>",
        "id": 192746489,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585874561
    },
    {
        "content": "<p>I'm confused</p>",
        "id": 192746492,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585874563
    },
    {
        "content": "<p>It just exits. At least <code>trace</code> doesn't print anything.</p>",
        "id": 192746509,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585874596
    },
    {
        "content": "<p>It seems easy to get the target type and appropriate bits of the context and compute by a pure function the term which we should produce.</p>",
        "id": 192746651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585874733
    },
    {
        "content": "<p>I can't try right now because I need to prepare a seminar for tomorrow</p>",
        "id": 192746659,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585874745
    },
    {
        "content": "<p>I don't understand how this manages to define <code>pi.monoid</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">expr</span>\n<span class=\"kn\">open</span> <span class=\"n\">functor</span> <span class=\"n\">has_seq</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">derive_field&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">is_prop</span><span class=\"o\">,</span>\n   <span class=\"n\">field</span> <span class=\"err\">←</span> <span class=\"n\">get_current_field</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n     <span class=\"n\">field</span> <span class=\"err\">←</span> <span class=\"n\">get_current_field</span><span class=\"o\">,</span>\n     <span class=\"n\">vs</span> <span class=\"err\">←</span> <span class=\"n\">introv</span> <span class=\"o\">[]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[],</span>\n     <span class=\"n\">hs</span> <span class=\"err\">←</span> <span class=\"n\">intros</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[],</span>\n     <span class=\"n\">resetI</span><span class=\"o\">,</span>\n     <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">get_unused_name</span><span class=\"o\">,</span>\n     <span class=\"n\">try</span> <span class=\"o\">(()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">ext1</span> <span class=\"o\">[</span><span class=\"n\">rcases_patt</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n     <span class=\"n\">x&#39;</span> <span class=\"err\">←</span> <span class=\"n\">try_core</span> <span class=\"o\">(</span><span class=\"n\">get_local</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n     <span class=\"n\">applyc</span> <span class=\"n\">field</span><span class=\"o\">,</span>\n     <span class=\"n\">hs</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"err\">$</span>\n       <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"err\">%%</span><span class=\"n\">h</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"bp\">.</span><span class=\"n\">iget</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">apply</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n       <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x&#39;</span><span class=\"bp\">.</span><span class=\"n\">iget</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n       <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_image_of_mem</span> <span class=\"bp\">_</span> <span class=\"err\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">apply</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n       <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">solve_by_elim</span><span class=\"o\">)</span> <span class=\"o\">),</span>\n     <span class=\"n\">return</span> <span class=\"o\">()</span>\n   <span class=\"k\">else</span> <span class=\"n\">focus1</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n     <span class=\"n\">field</span> <span class=\"err\">←</span> <span class=\"n\">get_current_field</span><span class=\"o\">,</span>\n     <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">field</span><span class=\"o\">,</span>\n     <span class=\"n\">expl_arity</span> <span class=\"err\">←</span> <span class=\"n\">get_expl_arity</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n     <span class=\"n\">xs</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">iota</span> <span class=\"n\">expl_arity</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">intro1</span><span class=\"o\">,</span>\n     <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">whnf</span><span class=\"o\">,</span>\n     <span class=\"k\">if</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">is_pi</span> <span class=\"n\">t</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n       <span class=\"n\">trace</span> <span class=\"n\">field</span><span class=\"o\">,</span>\n       <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">intro1</span><span class=\"o\">,</span>\n       <span class=\"n\">applyc</span> <span class=\"n\">field</span><span class=\"o\">,</span>\n       <span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n       <span class=\"n\">return</span> <span class=\"o\">()</span>\n     <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">`pi_instance` constructs an instance of `my_class (Π i : I, f i)`</span>\n<span class=\"cm\">where we know `Π i, my_class (f i)`. If an order relation is required,</span>\n<span class=\"cm\">it defaults to `pi.partial_order`. Any field of the instance that</span>\n<span class=\"cm\">`pi_instance` cannot construct is left untouched and generated as a new goal.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pi_instance&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">refine_struct</span> <span class=\"bp\">``</span><span class=\"o\">(</span> <span class=\"o\">{</span>  <span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">propagate_tags</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">derive_field&#39;</span> <span class=\"bp\">;</span> <span class=\"n\">done</span><span class=\"o\">))</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">add_interactive</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">pi_instance&#39;</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</pre></div>",
        "id": 192746722,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585874777
    },
    {
        "content": "<p>(I put this at the top of <code>algebra/pi_instances.lean</code> to avoid compiling other files)</p>",
        "id": 192746797,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585874875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> May I open an issue and assign it to you?</p>",
        "id": 192746868,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585874916
    },
    {
        "content": "<p>oh ....</p>",
        "id": 192746874,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585874924
    },
    {
        "content": "<p>I think what is going on is that <code>derive_field</code> is actually _failing_ on <code>one</code>.</p>",
        "id": 192746886,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585874945
    },
    {
        "content": "<p>Which by itself is fine, it's wrapped in <code>try</code>.</p>",
        "id": 192746896,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585874959
    },
    {
        "content": "<p>However we then plough on trying to <code>derive_field</code> the axioms as well.</p>",
        "id": 192746900,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585874978
    },
    {
        "content": "<p>And somehow <code>one</code> is solved by unification at a later step.</p>",
        "id": 192746906,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585874991
    },
    {
        "content": "<p>But we mess up and introduce the bad answer there?</p>",
        "id": 192746964,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875011
    },
    {
        "content": "<p>Indeed!</p>",
        "id": 192746983,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585875042
    },
    {
        "content": "<p>Removed <code>try</code>, and now it fails.</p>",
        "id": 192746988,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585875052
    },
    {
        "content": "<p>Yes, look at this, from <code>trace_state</code> at the beginning of solving <code>zero_add</code>:</p>\n<div class=\"codehilite\"><pre><span></span>(@has_zero.zero.{(max u v)} (Π (i : I), f i)\n            (@has_zero.mk.{(max u v)} (Π (i : I), f i)\n               (@eq.mpr.{(max (u+1) (v+1))} (Π (i : I), f i) (Π (i : I), f i)\n                  (@id.{0} (@eq.{(max (u+1) (v+1))+1} (Type (max u v)) (Π (i : I), f i) (Π (i : I), f i))\n                     (@eq.refl.{(max (u+1) (v+1))+1} (Type (max u v)) (Π (i : I), f i)))\n                  ?m_1)))\n         a)\n</pre></div>\n\n\n<p>We've just got a metavariable for <code>zero</code>!</p>",
        "id": 192747082,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875148
    },
    {
        "content": "<p>Until you turn <code>pp.all</code> on, you can't even see this. It just happily prints as <code>0</code>...</p>",
        "id": 192747099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875163
    },
    {
        "content": "<p>Kind of scary that this was working at all. :-)</p>",
        "id": 192747126,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875199
    },
    {
        "content": "<p>Haha...</p>",
        "id": 192747225,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875285
    },
    {
        "content": "<p>it turns out we've already fixed this issue</p>",
        "id": 192747228,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875294
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/169\" title=\"https://github.com/leanprover-community/lean/pull/169\">https://github.com/leanprover-community/lean/pull/169</a></p>",
        "id": 192747247,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875326
    },
    {
        "content": "<p>This is the reason why we're seeing arity = 1 on <code>zero</code> and <code>one</code>.</p>",
        "id": 192747251,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875349
    },
    {
        "content": "<p>I suspect that when this gets merged, and we move to Lean 3.8, <code>derive_field</code> will no longer fail, the <code>eq.mpr</code> will disappear, and we'll all be happy.</p>",
        "id": 192747308,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875410
    },
    {
        "content": "<p>I don't think so. The target is <code>Π i, f i</code>, so it actually has arity = 1</p>",
        "id": 192747345,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585875470
    },
    {
        "content": "<p>oh, hrm.</p>",
        "id": 192747429,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875535
    },
    {
        "content": "<p>BTW, now I'm testing on <code>has_zero</code> instead of <code>monoid</code>.</p>",
        "id": 192747540,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585875614
    },
    {
        "content": "<p>I don't think that's what <code>expl_arity</code> is meant to mean. Notice that it is 2 for <code>add</code>, and 1 for <code>zero</code>.</p>",
        "id": 192747551,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875628
    },
    {
        "content": "<p>It should be 2 for <code>add</code>, and 0 for <code>zero</code>.</p>",
        "id": 192747562,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875641
    },
    {
        "content": "<p>With <code>has_zero</code> we'll just see it fail at the <code>x &lt;- intro1</code> line.</p>",
        "id": 192747586,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875674
    },
    {
        "content": "<p>This works for <code>has_zero</code> but gives <code>eq.mpr</code> in the result:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">expr</span>\n<span class=\"kn\">open</span> <span class=\"n\">functor</span> <span class=\"n\">has_seq</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">derive_field&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">is_prop</span><span class=\"o\">,</span>\n   <span class=\"n\">field</span> <span class=\"err\">←</span> <span class=\"n\">get_current_field</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n     <span class=\"n\">field</span> <span class=\"err\">←</span> <span class=\"n\">get_current_field</span><span class=\"o\">,</span>\n     <span class=\"n\">vs</span> <span class=\"err\">←</span> <span class=\"n\">introv</span> <span class=\"o\">[]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[],</span>\n     <span class=\"n\">hs</span> <span class=\"err\">←</span> <span class=\"n\">intros</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[],</span>\n     <span class=\"n\">resetI</span><span class=\"o\">,</span>\n     <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">get_unused_name</span><span class=\"o\">,</span>\n     <span class=\"n\">try</span> <span class=\"o\">(()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">ext1</span> <span class=\"o\">[</span><span class=\"n\">rcases_patt</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n     <span class=\"n\">x&#39;</span> <span class=\"err\">←</span> <span class=\"n\">try_core</span> <span class=\"o\">(</span><span class=\"n\">get_local</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n     <span class=\"n\">applyc</span> <span class=\"n\">field</span><span class=\"o\">,</span>\n     <span class=\"n\">hs</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"err\">$</span>\n       <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"err\">%%</span><span class=\"n\">h</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"bp\">.</span><span class=\"n\">iget</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">apply</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n       <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x&#39;</span><span class=\"bp\">.</span><span class=\"n\">iget</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n       <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_image_of_mem</span> <span class=\"bp\">_</span> <span class=\"err\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">apply</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n       <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">solve_by_elim</span><span class=\"o\">)</span> <span class=\"o\">),</span>\n     <span class=\"n\">return</span> <span class=\"o\">()</span>\n   <span class=\"k\">else</span> <span class=\"n\">focus1</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n     <span class=\"n\">field</span> <span class=\"err\">←</span> <span class=\"n\">get_current_field</span><span class=\"o\">,</span>\n     <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">field</span><span class=\"o\">,</span>\n     <span class=\"n\">expl_arity</span> <span class=\"err\">←</span> <span class=\"n\">get_expl_arity</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n     <span class=\"n\">xs</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">iota</span> <span class=\"n\">expl_arity</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">intro1</span><span class=\"o\">,</span>\n     <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">whnf</span><span class=\"o\">,</span>\n     <span class=\"k\">if</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">is_pi</span> <span class=\"n\">t</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n       <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">intro1</span><span class=\"o\">,</span>\n       <span class=\"n\">applyc</span> <span class=\"n\">field</span><span class=\"o\">,</span>\n       <span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n       <span class=\"n\">return</span> <span class=\"o\">()</span>\n     <span class=\"k\">else</span>\n       <span class=\"n\">applyc</span> <span class=\"n\">field</span><span class=\"o\">,</span>\n       <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">`pi_instance` constructs an instance of `my_class (Π i : I, f i)`</span>\n<span class=\"cm\">where we know `Π i, my_class (f i)`. If an order relation is required,</span>\n<span class=\"cm\">it defaults to `pi.partial_order`. Any field of the instance that</span>\n<span class=\"cm\">`pi_instance` cannot construct is left untouched and generated as a new goal.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pi_instance&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">refine_struct</span> <span class=\"bp\">``</span><span class=\"o\">(</span> <span class=\"o\">{</span>  <span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">propagate_tags</span> <span class=\"o\">(</span><span class=\"n\">derive_field&#39;</span> <span class=\"bp\">;</span> <span class=\"n\">done</span><span class=\"o\">)</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">add_interactive</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">pi_instance&#39;</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</pre></div>",
        "id": 192747699,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585875768
    },
    {
        "content": "<p>I see. You're saying that the <code>applyc</code> call introduces an <code>eq.mpr</code> all by itself?</p>",
        "id": 192747800,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875846
    },
    {
        "content": "<p>Can we reproduce that in a standalone tactic block, independent of using <code>pi_instance</code>?</p>",
        "id": 192747814,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585875868
    },
    {
        "content": "<p>How do I try to close the goal using <code>apply e</code>, and do something else if it fails?</p>",
        "id": 192748176,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585876226
    },
    {
        "content": "<p>I mean, inside <code>do</code> block</p>",
        "id": 192748179,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585876232
    },
    {
        "content": "<p><code>&lt;|&gt;</code></p>",
        "id": 192748234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876321
    },
    {
        "content": "<p>I'm remaining pretty sure the problem is the <code>expl_arity</code> being reported for <code>one</code> is wrong.</p>",
        "id": 192748289,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876348
    },
    {
        "content": "<p>Your last update to <code>derive_field</code> doesn't make sense.</p>",
        "id": 192748295,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876360
    },
    {
        "content": "<p>The <code>else</code> branch of </p>\n<div class=\"codehilite\"><pre><span></span>if expr.is_pi t then do\n       x ← intro1,\n       applyc field,\n       xs.mmap&#39; (λ h, apply (h x) &lt;|&gt; apply h),\n       return ()\n     else\n       applyc field,\n       return ()\n</pre></div>\n\n\n<p>really needs to have a <code>x ← intro1</code> to consume the argument of the Pi type</p>",
        "id": 192748315,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876394
    },
    {
        "content": "<p>Your code is working without it because <code>expl_arity</code> is wrong for <code>zero</code>/<code>one</code> because of the explicit argument in <code>has_zero</code>/<code>has_one</code> that is fixed in that PR I linked above.</p>",
        "id": 192748338,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876427
    },
    {
        "content": "<p>Try to add <code>trace target</code> before <code>expl_arity</code>.</p>",
        "id": 192748391,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585876457
    },
    {
        "content": "<p>Sorry, you're right.</p>",
        "id": 192748494,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585876579
    },
    {
        "content": "<p><code>e</code> is <code>has_one.one</code>.</p>",
        "id": 192748497,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585876583
    },
    {
        "content": "<p>Actually, while I remain convinced <code>expl_arity</code> is being calculated incorrectly, I no longer believe it's because of this implicit/explict argument in<code>has_one</code>.</p>",
        "id": 192748538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876652
    },
    {
        "content": "<p>The target before <code>expl_arity</code> in <code>has_add</code> is</p>\n<div class=\"codehilite\"><pre><span></span>(Π (i : I), f i) → (Π (i : I), f i) → Π (i : I), f i\n</pre></div>\n\n\n<p>and we get told <code>2</code></p>",
        "id": 192748571,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876682
    },
    {
        "content": "<p>The target before <code>expl_arity</code> in <code>has_zero</code> is </p>\n<div class=\"codehilite\"><pre><span></span>Π (i : I), f i\n</pre></div>\n\n\n<p>and we get told <code>1</code></p>",
        "id": 192748603,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876705
    },
    {
        "content": "<p>These are not consistent.</p>",
        "id": 192748606,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876709
    },
    {
        "content": "<p>I think in the <code>has_add</code> case it should be <code>3</code>?</p>",
        "id": 192748630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876777
    },
    {
        "content": "<p>oh, no, it is the PR I was talking about</p>",
        "id": 192748706,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876851
    },
    {
        "content": "<p>That's why we have <code>x</code> and <code>xs</code>.<br>\nP.S.: Please use syntax highlighting.</p>",
        "id": 192748707,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585876852
    },
    {
        "content": "<p>it's not the <code>target</code> that matters, it is <code>e</code> that matters.</p>",
        "id": 192748711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876866
    },
    {
        "content": "<p>and the <code>expl_arity</code> of <code>add_comm_monoid.add.{?l_1}</code> is (correctly) 2</p>",
        "id": 192748732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876895
    },
    {
        "content": "<p>This defines <code>pi.has_one</code> but still produces <code>eq.mpr</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">derive_field&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">is_prop</span><span class=\"o\">,</span>\n   <span class=\"n\">field</span> <span class=\"err\">←</span> <span class=\"n\">get_current_field</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n     <span class=\"n\">field</span> <span class=\"err\">←</span> <span class=\"n\">get_current_field</span><span class=\"o\">,</span>\n     <span class=\"n\">vs</span> <span class=\"err\">←</span> <span class=\"n\">introv</span> <span class=\"o\">[]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[],</span>\n     <span class=\"n\">hs</span> <span class=\"err\">←</span> <span class=\"n\">intros</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[],</span>\n     <span class=\"n\">resetI</span><span class=\"o\">,</span>\n     <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">get_unused_name</span><span class=\"o\">,</span>\n     <span class=\"n\">try</span> <span class=\"o\">(()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">ext1</span> <span class=\"o\">[</span><span class=\"n\">rcases_patt</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n     <span class=\"n\">x&#39;</span> <span class=\"err\">←</span> <span class=\"n\">try_core</span> <span class=\"o\">(</span><span class=\"n\">get_local</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n     <span class=\"n\">applyc</span> <span class=\"n\">field</span><span class=\"o\">,</span>\n     <span class=\"n\">hs</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"err\">$</span>\n       <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"err\">%%</span><span class=\"n\">h</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">x&#39;</span><span class=\"bp\">.</span><span class=\"n\">iget</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">apply</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n       <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x&#39;</span><span class=\"bp\">.</span><span class=\"n\">iget</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n       <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_image_of_mem</span> <span class=\"bp\">_</span> <span class=\"err\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">apply</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n       <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">solve_by_elim</span><span class=\"o\">)</span> <span class=\"o\">),</span>\n     <span class=\"n\">return</span> <span class=\"o\">()</span>\n   <span class=\"k\">else</span> <span class=\"n\">focus1</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n     <span class=\"n\">field</span> <span class=\"err\">←</span> <span class=\"n\">get_current_field</span><span class=\"o\">,</span>\n     <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">field</span><span class=\"o\">,</span>\n     <span class=\"n\">expl_arity</span> <span class=\"err\">←</span> <span class=\"k\">if</span> <span class=\"n\">field</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">get_expl_arity</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n     <span class=\"n\">xs</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">iota</span> <span class=\"n\">expl_arity</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">intro1</span><span class=\"o\">,</span>\n     <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">intro_core</span> <span class=\"bp\">`_</span><span class=\"o\">,</span>\n     <span class=\"n\">applyc</span> <span class=\"n\">field</span><span class=\"o\">,</span>\n     <span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"err\">$</span>\n      <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n      <span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"err\">$</span> <span class=\"err\">%%</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">%%</span><span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">&quot;args&quot;</span><span class=\"o\">,</span>\n     <span class=\"n\">return</span> <span class=\"o\">()</span>\n</pre></div>",
        "id": 192748733,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585876896
    },
    {
        "content": "<p>and the <code>expl_arity</code> of <code>has_zero.zero.{?l_1}</code> is (suprisingly) 1</p>",
        "id": 192748749,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876918
    },
    {
        "content": "<p>Interesting, let me try that</p>",
        "id": 192748801,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585876945
    },
    {
        "content": "<p>Okay, I agree that is sensible code, and still produces an <code>eq.mpr</code>.</p>",
        "id": 192748956,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585877157
    },
    {
        "content": "<p>Here is an MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">has_zero</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span>\n</pre></div>",
        "id": 192749005,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585877181
    },
    {
        "content": "<p>So it is a bug in <code>refine_struct</code>.</p>",
        "id": 192749098,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585877306
    },
    {
        "content": "<p>It works with <code>refine</code>.</p>",
        "id": 192749101,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585877312
    },
    {
        "content": "<p>And a completely standalone example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pi</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>     <span class=\"c1\">-- The indexing type</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"c1\">-- The family of types already equipped with instances</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_zero</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">propagate_tags</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">intro1</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">applyc</span> <span class=\"bp\">`</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">pi</span>\n</pre></div>",
        "id": 192749114,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585877346
    },
    {
        "content": "<p><code>refine_struct</code> produces an <code>eq.mpr</code>, <code>refine</code> doesn't.</p>",
        "id": 192749168,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585877415
    },
    {
        "content": "<p>And <code>refine_struct</code> is too long for me to understand and catch the bug.</p>",
        "id": 192749185,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585877464
    },
    {
        "content": "<p>Yeah, I'm looking through it now. Hopefully <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> will stop by sometime. :-)</p>",
        "id": 192749259,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585877590
    },
    {
        "content": "<p>I'm worried it falls all the way down to <code>meta constant pexpr.mk_structure_instance : structure_instance_info → pexpr</code>.</p>",
        "id": 192749423,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585877805
    },
    {
        "content": "<p>no, that makes no sense, it is just producing something with metavariables:  <code>@has_zero.mk.{?l_1} ?m_2 ?m_3</code></p>",
        "id": 192749486,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585877886
    },
    {
        "content": "<p>In</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pi</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>     <span class=\"c1\">-- The indexing type</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"c1\">-- The family of types already equipped with instances</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_zero</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">},</span>\n  <span class=\"n\">result</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">intro1</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">applyc</span> <span class=\"bp\">`</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">pi</span>\n</pre></div>\n\n\n<p>You can clearly see that the problem has already occurred by the time we leave <code>refine_struct</code>: the <code>eq.mpr</code> is there no matter how we discharge the goal later.</p>",
        "id": 192749589,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585878072
    },
    {
        "content": "<p>Even shorter:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">has_zero</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 192749607,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585878115
    },
    {
        "content": "<p>You can wrap the whole <code>refine_struct { .. }; exact λ _, 0</code> with <code>simp_result</code>, and successfully clear the <code>eq.mpr</code>, but it's not possible to fix <code>refine_struct</code> this way: until the metavariables have been filled in <code>simp_result</code> doesn't work.</p>",
        "id": 192749784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585878313
    },
    {
        "content": "<p>Ok, the <code>eq.mpr</code> in the <code>result</code> is introduced in the line</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">with_enable_tags</span> <span class=\"o\">(</span>\n        <span class=\"n\">mzip_with</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n           <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">],</span>\n           <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">unfold</span> <span class=\"o\">(</span><span class=\"n\">provided</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">update_prefix</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">ns</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">])),</span>\n           <span class=\"n\">apply_auto_param</span>\n             <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply_opt_param</span>\n             <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">set_main_tag</span> <span class=\"o\">[</span><span class=\"bp\">`_</span><span class=\"n\">field</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">]),</span>\n           <span class=\"n\">get_goals</span><span class=\"o\">)</span>\n        <span class=\"n\">missing_f&#39;</span> <span class=\"n\">vs</span><span class=\"o\">),</span>\n</pre></div>\n\n\n<p>in <code>meta def refine_one</code> in <code>tactic/interactive.lean</code>.</p>",
        "id": 192750058,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585878656
    },
    {
        "content": "<p>(You can <code>trace_result</code> before and after.)</p>",
        "id": 192750071,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585878670
    },
    {
        "content": "<p>And if we comment out the line </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">unfold</span> <span class=\"o\">(</span><span class=\"n\">provided</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">update_prefix</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">ns</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">])),</span>\n</pre></div>\n\n\n<p>then the problem goes away.</p>",
        "id": 192750240,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585878854
    },
    {
        "content": "<p>Why do we need this line?</p>",
        "id": 192750265,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585878938
    },
    {
        "content": "<p>When I read the code, I wish we had much more comments. Why do I forget about this when I write the code?</p>",
        "id": 192750414,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585879142
    },
    {
        "content": "<p>I have no idea. :-)</p>",
        "id": 192750420,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585879148
    },
    {
        "content": "<p>:-)</p>",
        "id": 192750421,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585879153
    },
    {
        "content": "<p>I will go and add extra comments to all my current PRs. I feel exactly the same way at the moment.</p>",
        "id": 192750435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585879187
    },
    {
        "content": "<p>In fact I'm starting to think this is a bug in core again.</p>",
        "id": 192750494,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585879232
    },
    {
        "content": "<p>This <code>interactive.unfold</code> should be failing, on the basis that it's not really changing anything. Except, of course, that it is changing something: introducing this pesky <code>eq.mpr</code>!</p>",
        "id": 192750509,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585879264
    },
    {
        "content": "<p>It seems we are calling <code>interactive.unfold [] (loc.ns [none])</code> here, which means <code>simp_core</code> is being called with no lemmas at all.</p>",
        "id": 192750525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585879303
    },
    {
        "content": "<p>So it has no excuse for doing anything.</p>",
        "id": 192750530,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585879311
    },
    {
        "content": "<p>Can you try to turn it into an MWE?</p>",
        "id": 192750584,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585879357
    },
    {
        "content": "<p>I mean, an example without <code>refine_struct</code>.</p>",
        "id": 192750606,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585879402
    },
    {
        "content": "<p>Trying... if we just run</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pi</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>     <span class=\"c1\">-- The indexing type</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"c1\">-- The family of types already equipped with instances</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_zero</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">},</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">unfold</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">ns</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">]),</span>\n  <span class=\"n\">result</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">λ_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">pi</span>\n</pre></div>",
        "id": 192750619,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585879431
    },
    {
        "content": "<p>Then <code>unfold</code> correctly fails, saying it has nothing to do.</p>",
        "id": 192750675,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585879443
    },
    {
        "content": "<p>But somehow inside <code>refine_struct</code>, with apparently the same goal, it succeeds and introduces the <code>eq.mpr</code>.</p>",
        "id": 192750761,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585879569
    },
    {
        "content": "<p><code>simp</code> does stuff even with no lemmas</p>",
        "id": 192750778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585879622
    },
    {
        "content": "<p>like unfolding beta redexes</p>",
        "id": 192750783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585879633
    },
    {
        "content": "<p>and apparently introducing <code>eq.mpr</code> along <code>eq.refl _</code>, just for the fun of it. :-(</p>",
        "id": 192751194,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585880168
    },
    {
        "content": "<p>We should call it <code>unsimp</code> here. You need to hit the result with <code>simp [eq_mpr_refl]</code> to get something reasonable back...</p>",
        "id": 192751292,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585880326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, when you notice this thread, don't feel the need to read from the top. We can write a good summary now, we're getting much closer to the source.</p>",
        "id": 192751386,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585880437
    },
    {
        "content": "<p>Usually people call <code>simp</code> when the goal is in <code>Prop</code>, so the exact proof term is not important.</p>",
        "id": 192751466,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585880580
    },
    {
        "content": "<p>I just tried commenting out that offending line inside <code>refine_struct</code>. All the tests in <code>test/examples.lean</code> succeed, but maybe they don't test enough.</p>",
        "id": 192751536,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585880664
    },
    {
        "content": "<p>I think that the logic of <code>refine_struct</code> should be changed so that if there is no field with a given name among explicitly provided fields, then it doesn't <code>unfold</code>/<code>simp</code>/whatever.</p>",
        "id": 192751553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585880705
    },
    {
        "content": "<p>What is the status here?</p>",
        "id": 192751735,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585880922
    },
    {
        "content": "<p>The following code generates an <code>eq.mpr</code> in the result:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_zero</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 192751809,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585881010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> found the offending line in <code>refine_struct</code></p>",
        "id": 192751820,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585881034
    },
    {
        "content": "<p>It's</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">unfold</span> <span class=\"o\">(</span><span class=\"n\">provided</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">update_prefix</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">ns</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">])),</span>\n</pre></div>",
        "id": 192751835,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585881072
    },
    {
        "content": "<p>That's all I know. May be <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> has more details to add</p>",
        "id": 192751872,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585881122
    },
    {
        "content": "<p>I wonder why <code>refine_struct</code> does something to a goal if there is no field with the same name provided in the <code>{ .. }</code> block.</p>",
        "id": 192751923,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585881198
    },
    {
        "content": "<p>And how hard would it be to fix this.</p>",
        "id": 192751928,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585881213
    },
    {
        "content": "<p>If we use <code>dunfold</code> instead of <code>unfold</code>, does that solve the problem?</p>",
        "id": 192751935,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585881230
    },
    {
        "content": "<p>No <code>eq.mpr</code> but there is <code>id</code>.</p>",
        "id": 192752030,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585881362
    },
    {
        "content": "<p>Don't know how bad is it for class instances.</p>",
        "id": 192752063,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585881392
    },
    {
        "content": "<p>I think it's going to be an issue too. Can you skip that line if the goal is not a prop?</p>",
        "id": 192752129,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585881515
    },
    {
        "content": "<p>I don't understand what happens in <code>refine_one</code>.</p>",
        "id": 192752147,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585881577
    },
    {
        "content": "<p>If you insert this after the definition of <code>refine_struct</code> in <code>tactic.interactive</code>, it will tell you whether the problem is fixed or not:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">has_one</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">has_one</span>\n</pre></div>",
        "id": 192752221,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585881661
    },
    {
        "content": "<p><code>refine_struct</code> has to work recursively because structures can extend each other and I have to elaborate one instance at a time</p>",
        "id": 192752238,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585881701
    },
    {
        "content": "<p><code>refine_one</code> takes the definition of a struct and an instance, infers the missing fields, tries to fill them up and tag the left-over goals</p>",
        "id": 192752303,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585881774
    },
    {
        "content": "<p>Ok, I think I see how we can do things.</p>",
        "id": 192752314,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585881807
    },
    {
        "content": "<p>We can create a copy of the current goal, rewrite it using <code>dunfold</code>, get the new statement with <code>target</code> and use it with <code>change</code> in the original goal</p>",
        "id": 192752439,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585881959
    },
    {
        "content": "<p>What are you doing to fields that are not in <code>provided</code>?</p>",
        "id": 192752556,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585882093
    },
    {
        "content": "<p>Creating a meta variable with their type and add it to the list of goals</p>",
        "id": 192752608,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585882188
    },
    {
        "content": "<p>Why do you run <code>unfold</code> on them?</p>",
        "id": 192753078,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585882809
    },
    {
        "content": "<p>I think it's because otherwise I can get this kind of expression <code>{ add := my_add }.add x y ≤ _</code></p>",
        "id": 192753183,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585882988
    },
    {
        "content": "<p>I see, they can depend on provided fields.</p>",
        "id": 192753237,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585883056
    },
    {
        "content": "<p>(and <code>Prop</code>s normally do)</p>",
        "id": 192753246,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585883076
    },
    {
        "content": "<p>Yes and I'd rather have <code>my_add x y ≤ _</code></p>",
        "id": 192753288,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585883116
    },
    {
        "content": "<p>I'm heading to bed. Good luck with <code>refine_struct</code></p>",
        "id": 192753532,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585883419
    },
    {
        "content": "<p>We may ask for help again tomorrow. :-)</p>",
        "id": 192753990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585884053
    },
    {
        "content": "<p>Let's see if <a href=\"https://github.com/leanprover-community/mathlib/issues/2319\" title=\"https://github.com/leanprover-community/mathlib/issues/2319\">#2319</a> works.</p>",
        "id": 192758871,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585890497
    }
]