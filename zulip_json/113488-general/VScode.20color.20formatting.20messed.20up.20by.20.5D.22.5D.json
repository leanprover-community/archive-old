[
    {
        "content": "<p>Line 120 of <code>group_theory/subgroup.lean</code>is <code>@[to_additive \"See Note [custom simps projection]\"]</code> and the parser doesn't like that. It picks up the inner <code>]</code> as closing the outer <code>[</code> and then proceeds to color everything red until line 262, which is funnily enough another tag with weird mixup of quotes and square brackets: <code>@[to_additive \"Sum of a list of elements in an </code>add_subgroup<code> is in the </code>add_subgroup<code>.\"]</code>.<br>\nAnyway we can solve this (minor) issue?</p>",
        "id": 238446231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620811969
    },
    {
        "content": "<p>Ugh, even Zulip pukes on this one.</p>",
        "id": 238446460,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620812072
    },
    {
        "content": "<p>Here's the vscode syntax definition: <a href=\"https://github.com/leanprover/vscode-lean/blob/master/syntaxes/lean.json\">https://github.com/leanprover/vscode-lean/blob/master/syntaxes/lean.json</a></p>",
        "id": 238446480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620812088
    },
    {
        "content": "<p>I've written this style of syntax highlighter before (for other tmLanguage derivatives), so should be able to take a look; can anyone recommend a workflow for iterating on it in vscode?</p>",
        "id": 238446554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620812142
    },
    {
        "content": "<p>Oh thanks! because my biggest experience with regexp is parsing the list of Caius rooms to prepare for the ballot.</p>",
        "id": 238446709,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620812236
    },
    {
        "content": "<p>I suspect it's the match on l.22 that should be made less greedy: <code>{ \"match\": \"@\\\\[[^\\\\]]*\\\\]\", \"name\": \"storage.modifier.lean\" },</code></p>",
        "id": 238446830,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620812286
    },
    {
        "content": "<p>It ought to be recursing into the grammar I think</p>",
        "id": 238446902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620812330
    },
    {
        "content": "<p>This also fails: <code>/-\"test\" -/</code></p>",
        "id": 238446912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620812334
    },
    {
        "content": "<p>Yeah, and isn't it already, at least partially?</p>",
        "id": 238446979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620812379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, what is <code>comment.block.string.lean</code> for? You added it in <a href=\"https://github.com/leanprover/vscode-lean/commit/48ad01824958992fdc05f039435480a0e111cb4e\">https://github.com/leanprover/vscode-lean/commit/48ad01824958992fdc05f039435480a0e111cb4e</a></p>",
        "id": 238447021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620812402
    },
    {
        "content": "<p>I think it should be recursive, but apply the outermost color format.</p>",
        "id": 238447136,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620812455
    },
    {
        "content": "<p>Huh, didn't know this existed: <a href=\"https://github.com/leanprover-community/lean/pull/352\">https://github.com/leanprover-community/lean/pull/352</a></p>",
        "id": 238447160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620812472
    },
    {
        "content": "<p>This is an alternative way to write string literals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"c\">/-</span><span class=\"cm\">\"</span>\n<span class=\"cm\">Hello, world!</span>\n<span class=\"cm\">\"-/</span>\n</code></pre></div>",
        "id": 238447180,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620812496
    },
    {
        "content": "<p>Does that also mean it's a choice that some keywords are put in blue and other aren't?</p>",
        "id": 238447460,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620812654
    },
    {
        "content": "<p>Tactic names, to be more precise.</p>",
        "id": 238447498,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620812683
    },
    {
        "content": "<p>Ok, I have a fix</p>",
        "id": 238448607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620813322
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/vscode-lean/pull/265\">https://github.com/leanprover/vscode-lean/pull/265</a></p>",
        "id": 238449080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620813631
    },
    {
        "content": "<p>I love it how you can just report something on Zulip and someone will fix it in the minute.</p>",
        "id": 238450338,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620814284
    },
    {
        "content": "<p>I was actually looking at this yesterday and thought that the only way was \"manually\" creating a couple of extra levels (as properly nested brackets isn't a regular language). Does VSCode let you have more flexibility in this?</p>",
        "id": 238453528,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620816258
    },
    {
        "content": "<p>Have a look at the PR</p>",
        "id": 238454164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620816685
    },
    {
        "content": "<p>the tmLanguage highlighting system allows <code>{\"#include\": \"a previous bit of grammar\"}</code></p>",
        "id": 238454197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620816713
    },
    {
        "content": "<p>So in this case, I just told it to parse expressions within the <code>[]</code></p>",
        "id": 238454245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620816725
    },
    {
        "content": "<p>If it's in the middle of parsing a string it won't parse the closing <code>]</code>, which is what we want</p>",
        "id": 238454266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620816738
    },
    {
        "content": "<p>I made a small follow-up PR at <a href=\"https://github.com/leanprover/vscode-lean/pull/266\">https://github.com/leanprover/vscode-lean/pull/266</a>, since I didn't quite finish the job the first time, and vscode crashed before I could beat <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> to the merge!</p>",
        "id": 238454316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620816782
    },
    {
        "content": "<p>Here is an issue I noticed that might be related, and can potentially be closed now <a href=\"https://github.com/leanprover/vscode-lean/issues/260\">https://github.com/leanprover/vscode-lean/issues/260</a></p>",
        "id": 238525154,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1620845385
    },
    {
        "content": "<p>Would you mind trying to reproduce it and producing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 238542400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620852696
    },
    {
        "content": "<p>if I type exactly what's on the video, <code>`nat</code> isn't that colour anymore regardless:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">expr</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">is_constant_of</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">is_constant_of</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">int</span><span class=\"o\">]</span> <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 238542969,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620852937
    },
    {
        "content": "<p>Does the syntax highlighter know about <code> `name </code>s at all?</p>",
        "id": 238543823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620853277
    },
    {
        "content": "<p>Did these PRs also fix the tiny highlighting issue of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [has_reflect, inhabited]</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>where the last <code>]</code> is not highlighted?</p>",
        "id": 238560927,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620863469
    },
    {
        "content": "<p>Yes</p>",
        "id": 238578528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620878875
    },
    {
        "content": "<p>I've pushed a fix for this bug to <code>pygments</code> too, meaning it will eventually end up back on zulip: <a href=\"https://github.com/pygments/pygments/pull/1817\">https://github.com/pygments/pygments/pull/1817</a></p>",
        "id": 240217930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621961703
    }
]