[
    {
        "content": "<p>The following gives an error when marked as a <code>lemma</code>, though not when marked as an <code>example</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs'</span> <span class=\"o\">:</span> <span class=\"n\">set.nonempty</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">hs'.to_subtype</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs'</span> <span class=\"o\">:</span> <span class=\"n\">set.nonempty</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">hs'.to_subtype</span>\n</code></pre></div>\n<p>The error message is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch, term\n  hs'.to_subtype\nhas type\n  nonempty.{(max 1 (u_1+1))}\n    (@coe_sort.{(max (u_1+1) 1) (max 1 (u_1+1))+1} (set.{u_1} α) (@set.has_coe_to_sort.{u_1} α)\n       (@coe.{u_1+1 (max (u_1+1) 1)} (finset.{u_1} α) (set.{u_1} α)\n          (@coe_to_lift.{u_1+1 (max (u_1+1) 1)} (finset.{u_1} α) (set.{u_1} α) (@finset.set.has_coe_t.{u_1} α))\n          s))\nbut is expected to have type\n  nonempty.{u_2}\n    (@coe_sort.{(max (u_1+1) 1) (max 1 (u_1+1))+1} (set.{u_1} α) (@set.has_coe_to_sort.{u_1} α)\n       (@coe.{u_1+1 (max (u_1+1) 1)} (finset.{u_1} α) (set.{u_1} α)\n          (@coe_to_lift.{u_1+1 (max (u_1+1) 1)} (finset.{u_1} α) (set.{u_1} α) (@finset.set.has_coe_t.{u_1} α))\n          s))\n</code></pre></div>\n<p>which seems to suggest a universe issue (that's the only difference between the two types, as far as I can tell).</p>\n<p>Any ideas for fixing it?</p>",
        "id": 220292407,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608234372
    },
    {
        "content": "<p>It looks like a Lean bug. The expected type does not type check. Try changing the proof to <code>sorry</code>!</p>",
        "id": 220293173,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608234800
    },
    {
        "content": "<p>A workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs'</span> <span class=\"o\">:</span> <span class=\"n\">set.nonempty</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">nonempty.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">hs'.to_subtype</span>\n</code></pre></div>",
        "id": 220293284,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608234845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/strange.20error.20(universe.20issue.3F)/near/220293173\">said</a>:</p>\n<blockquote>\n<p>It looks like a Lean bug. The expected type does not type check. Try changing the proof to <code>sorry</code>!</p>\n</blockquote>\n<p>Indeed, that moves the bug elsewhere!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">kernel</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">type</span> <span class=\"n\">check</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">test'</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"n\">usually</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">buggy</span> <span class=\"n\">tactic</span> <span class=\"n\">or</span> <span class=\"n\">a</span> <span class=\"n\">bug</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">builtin</span> <span class=\"n\">elaborator</span>\n<span class=\"n\">elaborated</span> <span class=\"n\">type</span><span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">s.nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"bp\">↥↑</span><span class=\"n\">s</span>\n<span class=\"n\">elaborated</span> <span class=\"n\">value</span><span class=\"o\">:</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs'</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">s.nonempty</span><span class=\"o\">),</span> <span class=\"n\">sorry</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">nonempty</span> <span class=\"bp\">↥↑</span><span class=\"n\">s</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">↥↑</span><span class=\"n\">s</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_coe_to_sort.S</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Sort</span> <span class=\"n\">u_2</span>\n</code></pre></div>",
        "id": 220293334,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608234866
    },
    {
        "content": "<p>Your workaround works perfectly, so I will use that.</p>",
        "id": 220293463,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608234952
    },
    {
        "content": "<p>Is the Lean \"bug\" actually a bug, or just a failure to exhibit the behaviour one would naively expect?</p>",
        "id": 220293613,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608235020
    }
]