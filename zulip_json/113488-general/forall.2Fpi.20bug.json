[
    {
        "content": "<div class=\"message_inline_image\"><a href=\"user_uploads/3121/c1ZBycc13n7CpW1Vs3ihmQjX/2020-07-27-1.png\"><img src=\"user_uploads/3121/c1ZBycc13n7CpW1Vs3ihmQjX/2020-07-27-1.png\"></a></div><p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span>\n</code></pre></div>\n\n\n<p>Error: the forall <code>∀</code> is converted to a pi <code>Π</code> in the suggestions.</p>\n<p>Minimality: the following changes makes the bug disappear:</p>\n<ul>\n<li>making <code>α</code> into any concrete type (e.g. <code>ℕ</code>)</li>\n<li>removing the dependence of <code>x = x</code> on <code>x</code> (e.g. by changing it to <code>true</code>)</li>\n<li>making the type of <code>y</code> a concrete type</li>\n<li>removing <code>true →</code></li>\n<li>removing <code>∀ y : α,</code></li>\n</ul>",
        "id": 205060972,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595785997
    },
    {
        "content": "<p>Changing the curly braces around <code>α</code> to parentheses also makes the bug disappear.</p>",
        "id": 205061257,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595786513
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/lean/blob/4628bb38ed5a14ccda448eb8125608668003c502/src/frontends/lean/completion.cpp#L124\">this line of <code>shell/completion.cpp</code></a> is where the completions are returned (if you have ideas about improving the suggestions, this file is also the place to start digging), and that calls <a href=\"https://github.com/leanprover-community/lean/blob/b335d76e2b3c3456b2fded1c0d7e363571672b09/src/frontends/lean/json.cpp#L62\">\"<code>serialize_decl</code>\"</a> to format the name and type. I can't look further at the moment, but maybe you can see what the issue is.</p>",
        "id": 205061492,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595786928
    },
    {
        "content": "<p>Is this an instance of the same bug, or something different?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a&#39;</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mem</span> <span class=\"n\">a&#39;</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pairwise</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">28</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">mem</span> <span class=\"n\">a&#39;</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">a&#39;</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207080938,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600081
    },
    {
        "content": "<p>what is <code>mem</code>?</p>",
        "id": 207081001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600159
    },
    {
        "content": "<p>Where list and mem are explicitly defined in the current namespace</p>",
        "id": 207081002,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600159
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>  <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span>       <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 207081008,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600180
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 207081010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600193
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 207081012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597600195
    },
    {
        "content": "<p>alright, my bad will create mwe</p>",
        "id": 207081054,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600221
    },
    {
        "content": "<p>What is the type of <code>mem</code></p>",
        "id": 207081066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600237
    },
    {
        "content": "<p><code>#print mem -- ???</code></p>",
        "id": 207081074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600250
    },
    {
        "content": "<p>there is something wrong with your <code>mem a'</code> and it looks like you've just fed it a bad term but it's hard to tell if you don't post working code. As Mario said, if you look at the type of mem it will probably tell you what you did wrong.</p>",
        "id": 207081077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597600256
    },
    {
        "content": "<p>α → list α → Prop</p>",
        "id": 207081079,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600257
    },
    {
        "content": "<p>that's an open term, I don't believe you</p>",
        "id": 207081085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600272
    },
    {
        "content": "<p>Is that the actual output of <code>#check @mem</code>?</p>",
        "id": 207081087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597600273
    },
    {
        "content": "<p>I notice also that in your post you wrote <code>variable (α : Type u)</code></p>",
        "id": 207081138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600329
    },
    {
        "content": "<p>yes</p>",
        "id": 207081143,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600337
    },
    {
        "content": "<p>My guess is that <code>mem</code> wants to be fed an explicit type i.e. alpha, and if you look at the actual type you'll see this.</p>",
        "id": 207081145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597600339
    },
    {
        "content": "<p>if you defined <code>mem</code> after that then it will pick up this explicit alpha</p>",
        "id": 207081147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600348
    },
    {
        "content": "<p>It takes a second to write the output of check since I can't copy paste minibuffer</p>",
        "id": 207081148,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600354
    },
    {
        "content": "<p>I'm on it though</p>",
        "id": 207081151,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600362
    },
    {
        "content": "<p>there is a copy button</p>",
        "id": 207081152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600363
    },
    {
        "content": "<p>oh you mean emacs</p>",
        "id": 207081182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600388
    },
    {
        "content": "<p>yes</p>",
        "id": 207081209,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600417
    },
    {
        "content": "<p>you should be able to copy from the problems panel or sidekick or whatever it's called</p>",
        "id": 207081225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600419
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">mem</span>\n<span class=\"c1\">--mem : Π (α : Type u_1), α → list α → Prop</span>\n</code></pre></div>",
        "id": 207081242,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600421
    },
    {
        "content": "<p>boom</p>",
        "id": 207081248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600427
    },
    {
        "content": "<p>parentheses means explicit alpha</p>",
        "id": 207081254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600441
    },
    {
        "content": "<p>On Emacs, you can open the buffer <code>Lean Goal</code> or <code>Lean Errors</code> and copy out of that.</p>",
        "id": 207081293,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1597600446
    },
    {
        "content": "<p>so you have to write <code>mem _ a' l</code></p>",
        "id": 207081295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600452
    },
    {
        "content": "<p>Oh I figured out how to copy from minibuffer</p>",
        "id": 207081303,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600468
    },
    {
        "content": "<p>or else use <code>variable {α : Type u}</code> at the top of the file</p>",
        "id": 207081304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600468
    },
    {
        "content": "<p>and probably the same for R</p>",
        "id": 207081317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597600475
    },
    {
        "content": "<p>Not in pairwise, I think</p>",
        "id": 207081363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600494
    },
    {
        "content": "<p>you want <code>pairwise R l</code> not <code>pairwise _ l</code></p>",
        "id": 207081368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597600507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113488-general/topic/forall.2Fpi.20bug/near/207081293\">said</a>:</p>\n<blockquote>\n<p>On Emacs, you can open the buffer <code>Lean Goal</code> or <code>Lean Errors</code> and copy out of that.</p>\n</blockquote>\n<p>oh yeah that works too, I was just going to messages</p>",
        "id": 207081373,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/forall.2Fpi.20bug/near/207081304\">said</a>:</p>\n<blockquote>\n<p>or else use <code>variable {α : Type u}</code> at the top of the file</p>\n</blockquote>\n<p>Why?</p>",
        "id": 207081438,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600578
    },
    {
        "content": "<p>oh I see, sorry reading different threads</p>",
        "id": 207081447,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228135\">Scott Viteri</span> <a href=\"#narrow/stream/113488-general/topic/forall.2Fpi.20bug/near/207081373\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113488-general/topic/forall.2Fpi.20bug/near/207081293\">said</a>:</p>\n<blockquote>\n<p>On Emacs, you can open the buffer <code>Lean Goal</code> or <code>Lean Errors</code> and copy out of that.</p>\n</blockquote>\n<p>oh yeah that works too, I was just going to messages</p>\n</blockquote>\n<p>The <code>Lean Errors</code> buffer (<code>C-c C-n</code>) is also where you can get <code>#print</code> and <code>#lint</code> messages for copy/paste.</p>",
        "id": 207081455,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597600623
    },
    {
        "content": "<p>Ok fixed thx for the super fast responses</p>",
        "id": 207081469,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600656
    },
    {
        "content": "<p>I didn't realize that the errors buffer also takes output from commands</p>",
        "id": 207081584,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600762
    },
    {
        "content": "<p>(Also, while you can't copy paste them, you can use <code>C-c C-b</code> to get inline command output.)</p>",
        "id": 207081629,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597600783
    },
    {
        "content": "<p>Yeah that's a nice feature</p>",
        "id": 207081700,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1597600832
    }
]