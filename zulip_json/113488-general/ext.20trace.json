[
    {
        "content": "<p>is there a way to get <code>ext</code> to print which lemmas it applied?</p>",
        "id": 176389865,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569259511
    },
    {
        "content": "<p>Not yet</p>",
        "id": 176390431,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569259920
    },
    {
        "content": "<p>Do you know how to implement it / do you have time to do it?</p>",
        "id": 176390506,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569259946
    },
    {
        "content": "<p>I managed to guess the lemmas in the case I was looking at so it's not my problem any more <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 176390705,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569260132
    },
    {
        "content": "<p>Blast! I'll try to make it harder next time :P</p>",
        "id": 176390879,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569260260
    },
    {
        "content": "<p>On the subject of <code>ext</code>, it should probably complain if there are extra unused names. I found the <code>ext intro x</code> tactic in a line of mine which had been edited far too many times.</p>",
        "id": 176397655,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569264809
    },
    {
        "content": "<p>I don't see how the error message fixes that situation</p>",
        "id": 176398624,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569265398
    },
    {
        "content": "<p><code>ext intro x</code> would introduce one new hypothesis, called <code>intro</code>, and then hopefully complain: <br>\n\"hey, you gave me another hypothesis name, <code>x</code>, but I didn't find a use for it\".</p>",
        "id": 176419455,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569282069
    },
    {
        "content": "<p>This actually should be pretty easy to do. A student here (<span class=\"user-mention\" data-user-id=\"209436\">@Lucas Allen</span>) has some code that you can just wrap around another tactic, and it will produce strings of the form <code>refine ...</code> that reconstruct how the goal changed during the tactic invocation. Hopefully it could just be a matter of plugging that into <code>ext?</code>.</p>",
        "id": 176419541,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569282169
    },
    {
        "content": "<p>Hmm, I guess there are also the intros, which would require some extra handling. I agree this would be a desirable thing, so I created an issue <a href=\"https://github.com/leanprover-community/mathlib/issues/1481\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1481\">#1481</a> to keep track of it. :-)</p>",
        "id": 176419661,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569282335
    },
    {
        "content": "<p>The issue with being inflexible like that is if the operands of <code>=</code> are of such a type as <code>(a -&gt; b) \\x c</code>. `ext will split that goal into two, the first goal can use another variable name but not the second.</p>",
        "id": 176420260,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569283040
    }
]