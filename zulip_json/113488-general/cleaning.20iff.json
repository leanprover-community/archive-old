[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> in particular: another area (besides calculations) where I'm always angry about automation is many proofs that are only unpackaging and repackaging stuff. The following is an example abstracted from a topological groups and filter context:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_sub</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">$</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">V</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">t</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"bp\">↔</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"err\">∈</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 174212351,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566899250
    },
    {
        "content": "<p>This has no mathematical content (in the sense that a mathematician wouldn't understand what requires a proof here).</p>",
        "id": 174212424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566899306
    },
    {
        "content": "<p>What I would like Lean to do is at least to peel-off layers that are common to both lines.</p>",
        "id": 174212570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566899429
    },
    {
        "content": "<p>Note that in this specific example, <code>by simp [subset_def]</code> works.</p>",
        "id": 174212582,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566899455
    },
    {
        "content": "<p>But it takes time to reach that conclusion. I also experimented writing the following stupid tactic:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">clean_step</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tgt</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"k\">match</span> <span class=\"n\">tgt</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">intros</span><span class=\"o\">]</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n                     <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"err\">%%</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">has_var</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">imp_congr</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">forall_congr</span><span class=\"o\">]</span>\n                     <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Exists</span> <span class=\"err\">%%</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">exists_congr</span><span class=\"o\">]</span>\n                     <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span><span class=\"o\">]</span>\n                     <span class=\"kn\">end</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">&quot;Goal is not a forall, implies or iff&quot;</span>\n   <span class=\"kn\">end</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">clean_iff</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">repeat</span> <span class=\"n\">clean_step</span>\n</pre></div>\n\n\n<p>doing the peeling-off. In the example above, it reduces the goal to <code>set.prod s s ⊆ (λ (x : α × α), x.snd - x.fst) ⁻¹' a ↔  ∀ (x y : α), x ∈ s → y ∈ s → y - x ∈ a</code> which can be closed by <code>library_search</code>, which is pretty good I think. Should we try to make a smarter version of that tactic?</p>",
        "id": 174212794,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566899633
    },
    {
        "content": "<p>I've wanted such a \"mild\" congr tactic as well.</p>",
        "id": 174213553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566900289
    },
    {
        "content": "<p>This does feel like something within the scope of congr</p>",
        "id": 174226236,
        "sender_full_name": "Reid Barton",
        "timestamp": 1566911087
    },
    {
        "content": "<p>I have had to do similar things, with crazy lambdas and corner brackets. It is funny how much of mathematics is just unpacking and repacking information. This is something that a decent tableau prover should do. (I am disappointed that <code>finish</code> is no help.) It is worth experimenting to see how useful a <code>congr</code>-like tactic is, though eventually it would be nice to see this subsumed by general automation.</p>",
        "id": 174229806,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1566913277
    },
    {
        "content": "<p>I have no opinion about what kind of automation should do it, I only say <em>I</em> don't want to do it.</p>",
        "id": 174229918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566913354
    },
    {
        "content": "<p>Here is my short answer to your \"automation for the working mathematician\" wish-list question:</p>\n<ul>\n<li>elaboration that works, including coercions, especially to functions, and type class resolution</li>\n<li>calculations where I only give the intermediate steps I would write on paper, using <code>ring</code>, <code>abel</code> and their non-existent extensions to other algebraic structures, and non-linear <code>linarith</code></li>\n<li>packing/unpacking stuff</li>\n</ul>",
        "id": 174230252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566913584
    },
    {
        "content": "<p>Thanks! I really am taking notes and gathering all the comments I received.</p>",
        "id": 174231499,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1566914310
    },
    {
        "content": "<p>I would have never guessed that when I started Lean and everything was confusing, but today it's clear that elaboration is by far the most important aspect. I spend most of my wasted time fighting the elaborator (and parser maybe).</p>",
        "id": 174231785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566914521
    },
    {
        "content": "<p>With good-old-paper-maths you could offload those fights to the reader (-;</p>",
        "id": 174231906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566914595
    },
    {
        "content": "<p>This and so many other boring details</p>",
        "id": 174231930,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566914611
    },
    {
        "content": "<p>The elaborator is the formalisation of \"left as an exercise for the reader\" <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 174231934,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566914616
    },
    {
        "content": "<p>One important question is what should be done by the elaborator and what should be done by automation at a later stage. The elaborator should be focused on filling in information that is absolutely essential to make sense of an expression. It may be putting too much of a burden on the elaborator to expect it to prove that an operation is commutative or a set is finite. Maybe that is best done by another process later on, that acts when all the implicit data has been inferred.</p>",
        "id": 174232508,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1566914973
    },
    {
        "content": "<p>Let me prove once more that I have no idea how type classes work, and ask: why is it stupid to insert the following two mechanisms into type class search:</p>\n<ul>\n<li>allow to write <code>instance_for `X my_class := explicit_instance or by apply_instance</code> where, as usual, <code> `X </code> is a name. Then every type Lean wants to infer an instance for <code>my_type X</code> use the database created by that line. </li>\n<li>If the previous method fails,  class search <code>[my_class X Y Z...]</code> by a search by name head_symbol_of_X.class_name</li>\n</ul>\n<p>If both fail then use the current algorithm. To me it sounds like this would solve most of the cases where Lean fails or take forever to find an instance. For instance we have files in the perfectoid space where <code>K</code> denotes a field, and it does so for 1000 lines.  And each proof involves Lean searching at least twice for <code>comm_ring K</code>. It sounds like looking at a hash table under key <code>K</code> would be much faster.</p>",
        "id": 174233034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566915283
    },
    {
        "content": "<p>I don't think I want to put a burden on the elaborator. I only want coercions and type class search to do their jobs. And also, I'd like the elaborator to stop thinking every numeral is in nat</p>",
        "id": 174233591,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566915643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Adding a head index (i.e. exactly what <code>simp</code> uses) to the instance search is definitely something we have been thinking about. Though I believe Leo already has new plans for the whole algorithm we haven't talked about yet, so I won't speculate any further for now.</p>",
        "id": 174237114,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1566917946
    },
    {
        "content": "<p>Does that mean it will only become as slow as <code>simp</code> is? (See the other thread...)</p>",
        "id": 174237153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566917985
    },
    {
        "content": "<p>no</p>",
        "id": 174237166,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1566917999
    },
    {
        "content": "<p>Great!</p>",
        "id": 174237242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566918021
    },
    {
        "content": "<p>I'm pretty sure you have thought about all that. I was honestly asking why things are not that simple.</p>",
        "id": 174237270,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566918050
    },
    {
        "content": "<p>But generally speaking, it's not immediately clear how exactly the index should work: Does it only index a single parameter of the class? Is it always the first one? Or does this need to be customizable, by an attribute on the class?</p>",
        "id": 174237344,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1566918096
    },
    {
        "content": "<p>I'm sure there are some examples in mathlib where indexing by the first parameter would not be optimal</p>",
        "id": 174237465,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1566918159
    },
    {
        "content": "<p>I guess that using the first parameter would already cover a lot of cases. You don't have to cover all cases since you can always fall back to a more general arguments. It even looks to me like this part of the procedure should be stupid enough to fail very quickly when it fails</p>",
        "id": 174237508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566918198
    },
    {
        "content": "<p>Sure, it's a single lookup of the head constant name in a hopefully fast data structure for deciding which algorithm to follow. The big issue in Lean 3 is where to build and store this data structure - this is exactly the issue with <code>simp</code> constantly rebuilding its simpset. This will work completely differently in Lean 4.</p>",
        "id": 174237879,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1566918425
    },
    {
        "content": "<p>I know GHC has an index on the head type constructor for ordinary type classes (although it also supports instances that aren't of the Haskell 98 form which specify only the head). I don't remember what it does for multiparameter type classes, I could check at some point.</p>",
        "id": 174238228,
        "sender_full_name": "Reid Barton",
        "timestamp": 1566918635
    },
    {
        "content": "<p>And what about my even stupider idea of a local indexing by name of variable?</p>",
        "id": 174238286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566918695
    },
    {
        "content": "<p>My guess is that it's usually best to index the last type argument</p>",
        "id": 174238295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1566918697
    },
    {
        "content": "<p>It's much easier if you're not an interactive compiler :)</p>",
        "id": 174238296,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1566918698
    },
    {
        "content": "<p>(Also Haskell does not have priorities. Should a head matching always be prioritized over a unification match? Is that intuitive?)</p>",
        "id": 174238464,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1566918838
    },
    {
        "content": "<p>I think I'd be happy if head matching were prioritized. I always feel a bit queasy when I see an instance where the whole type is one variable. It does not use any specific knowledge of the type we're creating an instance for. I think specific insight should be prioritized</p>",
        "id": 174238782,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566919034
    },
    {
        "content": "<blockquote>\n<p>And what about my even stupider idea of a local indexing by name of variable?</p>\n</blockquote>\n<p>It would probably help, but I wouldn't hold my breath for such a hack being included in Lean proper. The head index should be strictly better.</p>",
        "id": 174238911,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1566919110
    },
    {
        "content": "<p>They cover different cases (at least the way I dream of it)</p>",
        "id": 174239258,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566919317
    }
]