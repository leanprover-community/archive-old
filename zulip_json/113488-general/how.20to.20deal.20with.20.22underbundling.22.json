[
    {
        "content": "<p>I've noticed that there are lots of definitions made, which later on are proved to be a <code>foo_hom</code> (100, 200, 300+ lines later). This is all well and good, but it ends up duplicating the API in ways that aren't great. I'd like to propose that we instead try and get the strongest bundling possible, and leave all auxilliary earlier definitions as either <code>private</code> or duplicated in the case when they aren't directly provable by the bundled definition results. I'm currently thinking of <code>absolute_value</code>s like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.abs\">docs#complex.abs</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic_norm\">docs#padic_norm</a> for this, which need a lot of duplicated API because of this (and also API that doesn't apply on either side!)</p>",
        "id": 296655179,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662050480
    },
    {
        "content": "<p>I usually suggest in PRs to introduce <code>foo'</code> as a plain function, prove stuff like <code>foo'_add</code> and then define <code>foo</code> as bundled hom. I agree that <code>foo'</code> should never be used.</p>",
        "id": 296660089,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662052041
    },
    {
        "content": "<p>I was worrying about this the other day with reference to <code>hamming_dist</code>, which still feels like it has too much duplication. But really (because that has domain nat) to fix that I would some kind of generalisation of dist...</p>",
        "id": 296666313,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1662054054
    },
    {
        "content": "<p>Sometimes the level of bundling depends on other ambient typeclasses though, and it's easier to make the fully-unbundled form simp-normal than it is to do that with the minimally-unbundled one.</p>",
        "id": 296683223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662059470
    },
    {
        "content": "<p>this is true, for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_neg.has_abs\">docs#has_neg.has_abs</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/absolute_value.abs\">docs#absolute_value.abs</a></p>",
        "id": 296683382,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662059541
    },
    {
        "content": "<p>but sometimes this can be an issue with other things (the one I hate the most is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.map_ring_hom\">docs#polynomial.map_ring_hom</a>, caused solely because dot notation doesn't work for bundled morphisms)</p>",
        "id": 296683451,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662059580
    },
    {
        "content": "<p>(or wait, did that finally get fixed?)</p>",
        "id": 296683466,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662059589
    },
    {
        "content": "<p>Arguably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.map\">docs#polynomial.map</a> should relax its assumptions to only require <code>f : R â†’ S</code></p>",
        "id": 296767144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662104998
    },
    {
        "content": "<p>I guess so! And it should also be renamed <code>map'</code>. And then <code>map</code> can be the one which eats a ring hom and emits a ring hom.</p>",
        "id": 296774683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662108384
    }
]