[
    {
        "content": "<p><code>(presheaf_of_types_pullback_under_open_immersion {F := F, res := res, Hid := Hid, Hcomp := Hcomp} id _).res</code></p>",
        "id": 126947033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527025229
    },
    {
        "content": "<p>Why can't I unfold that?</p>",
        "id": 126947036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527025238
    },
    {
        "content": "<p><code>lam X, presheaf_of_types_pullback_under_open_immersion X f H</code> is a function from a structure to itself</p>",
        "id": 126947054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527025271
    },
    {
        "content": "<p>I explicitly write down the definition, I say what F and res and Hid and Hcomp are</p>",
        "id": 126947111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527025339
    },
    {
        "content": "<p>I don't see any reason why Lean can't evaluate that res</p>",
        "id": 126947116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527025350
    },
    {
        "content": "<p>My goal is <code>[mess above] == res</code></p>",
        "id": 126947121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527025365
    },
    {
        "content": "<p>and this should just unravel to be, hopefully, something trivial.</p>",
        "id": 126947128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527025382
    },
    {
        "content": "<p>This is another one of those insane \"trivial in maths, hard in Lean\" things</p>",
        "id": 126947148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527025431
    },
    {
        "content": "<p>I am trying to prove that if you pull back a sheaf by the identity function, you get the same sheaf</p>",
        "id": 126947234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527025523
    },
    {
        "content": "<p>this statement is fraught with difficulties though</p>",
        "id": 126947235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527025523
    },
    {
        "content": "<p>and this is definitely not refl</p>",
        "id": 126947236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527025523
    },
    {
        "content": "<p>because I am claiming for example that F U = F (id '' U)</p>",
        "id": 126947238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527025523
    },
    {
        "content": "<p>What's the definition of <code>presheaf_of_types_pullback_under_open_immersion</code>? I think the functions like <code>.res</code> only unfold when applied to something of the form <code>{F := _, ...}.res</code> and not  <code>x.res</code> for example. Have you tried <code>show</code>?</p>",
        "id": 126948909,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527027689
    },
    {
        "content": "<p>Is it because it doesn't know what the underscore is?</p>",
        "id": 126948980,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527027751
    },
    {
        "content": "<p>The underscore is a horrible proof term.</p>",
        "id": 126949066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527027914
    },
    {
        "content": "<p>I have realised there's another approach</p>",
        "id": 126949069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527027925
    },
    {
        "content": "<p>so this question is no longer relevant</p>",
        "id": 126949071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527027933
    },
    {
        "content": "<p>Again I have to use something very counterintuitive to a mathematician</p>",
        "id": 126949077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527027947
    },
    {
        "content": "<p>Instead of trying to claim that the identity map is a map <code>F U -&gt; F (id '' U)</code></p>",
        "id": 126949115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527027963
    },
    {
        "content": "<p>I use the actual map <code>F U -&gt; F (id '' U)</code> which a mathematician would call \"the identity map\" but which in dependent type theory is known as \"restriction from U to the open subset id '' U\"</p>",
        "id": 126949141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527028013
    },
    {
        "content": "<p>it's unbelievable</p>",
        "id": 126949220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527028083
    },
    {
        "content": "<p>all my hitherto impossible goals magically become refl</p>",
        "id": 126949230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527028097
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>⊢ {morphism := λ (U : set (X R)) (HU : is_open zariski.open U),\n                   ((zariski.structure_presheaf_of_rings R).to_presheaf_of_types).res U (id &#39;&#39; U) HU\n                     (eq.mpr (id (eq.rec (eq.refl (is_open zariski.open (id &#39;&#39; U))) (set.image_id U))) HU)\n                     (eq.mpr (id (eq.rec (eq.refl (id &#39;&#39; U ⊆ U)) (set.image_id U))) (set.subset.refl U)),\n     commutes := λ (U V : set (X R)) (HU : is_open zariski.open U) (HV : is_open zariski.open V) (Hsub : V ⊆ U),\n                   eq.refl\n                     (((presheaf_of_rings_pullback_under_open_immersion (zariski.structure_presheaf_of_rings R) id\n                            H).to_presheaf_of_types).res\n                          U\n                          V\n                          HU\n                          HV\n                          Hsub ∘\n                        (λ (HU : is_open zariski.open U),\n                           ((zariski.structure_presheaf_of_rings R).to_presheaf_of_types).res U (id &#39;&#39; U) HU\n                             (eq.mpr (id (eq.rec (eq.refl (is_open zariski.open (id &#39;&#39; U))) (set.image_id U))) HU)\n                             (eq.mpr (id (eq.rec (eq.refl (id &#39;&#39; U ⊆ U)) (set.image_id U))) (set.subset.refl U)))\n                          HU)}.morphism\n      U\n      HU\n      (x * y) =\n    {morphism := λ (U : set (X R)) (HU : is_open zariski.open U),\n                     ((zariski.structure_presheaf_of_rings R).to_presheaf_of_types).res U (id &#39;&#39; U) HU\n                       (eq.mpr (id (eq.rec (eq.refl (is_open zariski.open (id &#39;&#39; U))) (set.image_id U))) HU)\n                       (eq.mpr (id (eq.rec (eq.refl (id &#39;&#39; U ⊆ U)) (set.image_id U))) (set.subset.refl U)),\n       commutes := λ (U V : set (X R)) (HU : is_open zariski.open U) (HV : is_open zariski.open V) (Hsub : V ⊆ U),\n                     eq.refl\n                       (((presheaf_of_rings_pullback_under_open_immersion (zariski.structure_presheaf_of_rings R) id\n                              H).to_presheaf_of_types).res\n                            U\n                            V\n                            HU\n                            HV\n                            Hsub ∘\n                          (λ (HU : is_open zariski.open U),\n                             ((zariski.structure_presheaf_of_rings R).to_presheaf_of_types).res U (id &#39;&#39; U) HU\n                               (eq.mpr (id (eq.rec (eq.refl (is_open zariski.open (id &#39;&#39; U))) (set.image_id U))) HU)\n                               (eq.mpr (id (eq.rec (eq.refl (id &#39;&#39; U ⊆ U)) (set.image_id U))) (set.subset.refl U)))\n                            HU)}.morphism\n        U\n        HU\n        x *\n      {morphism := λ (U : set (X R)) (HU : is_open zariski.open U),\n                     ((zariski.structure_presheaf_of_rings R).to_presheaf_of_types).res U (id &#39;&#39; U) HU\n                       (eq.mpr (id (eq.rec (eq.refl (is_open zariski.open (id &#39;&#39; U))) (set.image_id U))) HU)\n                       (eq.mpr (id (eq.rec (eq.refl (id &#39;&#39; U ⊆ U)) (set.image_id U))) (set.subset.refl U)),\n       commutes := λ (U V : set (X R)) (HU : is_open zariski.open U) (HV : is_open zariski.open V) (Hsub : V ⊆ U),\n                     eq.refl\n                       (((presheaf_of_rings_pullback_under_open_immersion (zariski.structure_presheaf_of_rings R) id\n                              H).to_presheaf_of_types).res\n                            U\n                            V\n                            HU\n                            HV\n                            Hsub ∘\n                          (λ (HU : is_open zariski.open U),\n                             ((zariski.structure_presheaf_of_rings R).to_presheaf_of_types).res U (id &#39;&#39; U) HU\n                               (eq.mpr (id (eq.rec (eq.refl (is_open zariski.open (id &#39;&#39; U))) (set.image_id U))) HU)\n                               (eq.mpr (id (eq.rec (eq.refl (id &#39;&#39; U ⊆ U)) (set.image_id U))) (set.subset.refl U)))\n                            HU)}.morphism\n        U\n        HU\n        y\n</pre></div>",
        "id": 126949245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527028134
    },
    {
        "content": "<p>proof is refl</p>",
        "id": 126949246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527028136
    },
    {
        "content": "<p>it seems you discover cool new things daily! perhaps you can include a mathematician's tips and tricks section in the textbook you want to write this summer</p>",
        "id": 126955573,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527040790
    }
]