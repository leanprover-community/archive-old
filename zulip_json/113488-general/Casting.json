[
    {
        "content": "<p>When I write an expression with a certain type, enclose it in parentheses, put a colon after it, and then put a different type after the colon, I expect the value I put in parentheses to be cast to the new type. But that's not what happens here! Lean sees the real type and starts converting individual arguments to reals, casting <code>n</code> and missing the intended meaning. Is this a bug? Is there a way to achieve the bottom awkward <code>ℕ) : ℝ</code> more cleanly? (it seems perverse if this is the minimal-character way of doing this)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_one</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">n_one</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- false</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">casting_twice</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_one</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">n_one</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263817274,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638777290
    },
    {
        "content": "<p>Yeah, this is how it works -- casting (coercion) goes \"outside in\". The cast is first and foremost a type ascription, so it ends up directing typeclass search to choose the <code>has_div</code> for a real-valued output, which causes the division's operands to be reals, and so on recursively.</p>",
        "id": 263817739,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638777693
    },
    {
        "content": "<p>One way is to explicitly put in the coercion arrow yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">casting_twice</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_one</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">n_one</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263818004,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638777910
    },
    {
        "content": "<p>You can try searching for \"elaboration outside in\" in zulip for scattered details</p>",
        "id": 263818130,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638777990
    },
    {
        "content": "<p>Another example that might help make it clear Lean doesn't really do casting like other languages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">casting_twice</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_one</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">n_one</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263818486,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638778223
    },
    {
        "content": "<p>I think the missing intuition is that <code>(x : T)</code> does not mean \"cast x to T\", it means \"parse a T here, insert <code>↑</code>s (the actual casts) if and where you need them\"</p>",
        "id": 263821869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638780654
    },
    {
        "content": "<p>This is definitely very confusing to beginners and I remember having a hard time with it.</p>",
        "id": 263822853,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638781342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Casting/near/263818004\">said</a>:</p>\n<blockquote>\n<p>One way is to explicitly put in the coercion arrow yourself:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">casting_twice</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_one</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">n_one</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This solves the issue, but now that I understand the given-type coercion process better it leads to another question: If the casting is going outside-in figuring out the type of everything from the top of the syntax tree, when it reaches the <code>↑</code>, how does it figure out the type of the <code>/</code> inside? Does it wait until it spots an ambiguity and then start working bottom-up?</p>",
        "id": 263823417,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638781743
    },
    {
        "content": "<p>The answer is what Eric was alluding to: \"casting\" is actually about automatically inserting <code>↑</code>s in certain places when Lean detects a type mismatch.  It's the elaboration (i.e., solving for things like implicit arguments, like types) that's going outside-in.  The coercion arrow has type <code>a -&gt; b</code>, so when Lean solves for <code>a</code> and <code>b</code> they don't contribute any constraints.  Later it'll do typeclass inference to find a <code>has_coe</code> instance for those particular <code>a</code> and <code>b</code>.</p>",
        "id": 263824427,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638782397
    },
    {
        "content": "<p>What's going on with this example (going outside in) is that with <code>↑(2 * n / 3)</code>, lean knows the coercion has to go to <code>ℝ</code>, but it doesn't know yet what it's coercing from.</p>\n<p>Then it looks at <code>2 * n /3</code>, and it still doesn't know what the value should be, but since <code>/</code> requires everything to be the same type, now <code>2 * n</code> and <code>3</code> are constrained to have the same type.  It then looks at <code>2 * n</code>, and since <code>n</code> has type <code>ℕ</code>, then we know <code>2</code> and <code>3</code> have that type.  Then those literals are interpreted as terms of <code>ℕ</code> (they're actually expressions in terms of <code>bit0</code> and <code>bit1</code>).</p>",
        "id": 263824975,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638782724
    }
]