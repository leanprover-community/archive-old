[
    {
        "content": "<p>For example, I wanted to prove (cb)a=(bc)a=b(ca)=b(ac) in the conv mode, but I stuck there. <a href=\"/user_uploads/3121/ZoVMHimzw10wal1_lA_8zlw0/lean_conv.png\">lean_conv.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZoVMHimzw10wal1_lA_8zlw0/lean_conv.png\" title=\"lean_conv.png\"><img src=\"/user_uploads/3121/ZoVMHimzw10wal1_lA_8zlw0/lean_conv.png\"></a></div>",
        "id": 290680055,
        "sender_full_name": "dudubao2007",
        "timestamp": 1658668610
    },
    {
        "content": "<p>Using <code>conv</code> multiple times is one option</p>",
        "id": 290680237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658668906
    },
    {
        "content": "<p>I think you can use <code>conv</code> within conv? Can you paste your code as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> so that we can copy it?</p>",
        "id": 290680298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658668946
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_lhs</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290680455,
        "sender_full_name": "dudubao2007",
        "timestamp": 1658669168
    },
    {
        "content": "<p>Conv within conv is a nice option. Thank you very much!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_lhs</span><span class=\"o\">,</span>\n    <span class=\"n\">conv</span> <span class=\"o\">{</span>\n      <span class=\"n\">congr</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290680535,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1658669301
    },
    {
        "content": "<p>Glad to see you were able to work out how to get that working</p>",
        "id": 290680634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658669430
    },
    {
        "content": "<p>(btw, either <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_rotate\">docs#mul_rotate</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_rotate'\">docs#mul_rotate'</a> are your lemma)</p>",
        "id": 290680785,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658669660
    },
    {
        "content": "<p>Thank you. Of course, if I meet such a goal in a long proof, I will directly solve it by \"ring\". <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 290680900,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1658669874
    },
    {
        "content": "<p>...or with the not-yet-in-mathlib ( <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> ) <code>move_mul</code>, you can also do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">move_mul</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 290682132,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658671654
    }
]