[
    {
        "content": "<p>The simp normal form linter is <a href=\"https://github.com/leanprover-community/mathlib/runs/996265268\">complaining about my code</a>. </p>\n<p>The issue is on the <code>with-zero-stuff</code> branch of mathlib, which is compiling. The complaint is about this lemma: <a href=\"https://github.com/leanprover-community/mathlib/blob/8667a3bab9e5e6fee70dfb8d1b563125aca504ad/src/algebra/group/with_one.lean#L59\"><code>coe_mul</code></a> and the linter output is</p>\n<div class=\"codehilite\"><pre><span></span><code>/- The `simp_nf` linter reports: -/\n/- SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.\nsee note [simp-normal form] for tips how to debug this.\nhttps://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form\n: -/\n#print with_one.coe_mul /- Left-hand side simplifies from\n  ↑(a * b)\nto\n  ↑a * ↑b\nusing\n  [with_zero.coe_mul]\nTry to change the left-hand side to the simplified term!\n -/\n</code></pre></div>\n\n\n<p>I don't know if I'm confused or the linter is confused or both. This is the file where <code>with_one</code> and <code>with_zero</code> are defined, and they're both defined to be <code>option</code>, but I would not expect <code>simp</code> to be able to see through this definition. Furthermore, <code>with_zero.coe_mul</code> is defined on line 136, after <code>with_one.coe_mul</code>. To my surprise, it is true that if I try <code>simp</code> in the proof of <code>with_zero.coe_mul</code> then it simplifies <code>↑(a * b) : with_zero α</code> to <code>↑a * ↑b : with_one α</code> (and then fails to close the goal with <code>refl</code>). I don't know what to do here. <code>simp</code> trace says it's doing exactly what the linter is warning me about -- just changing a with_zero to a with_one. I don't want the simplifier to do this, I don't <em>think</em>. It's breaking some kind of abstraction barrier as far as I can see. What can I do here?</p>",
        "id": 207247532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597749584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Did you see my remark on the PR page?</p>",
        "id": 207247742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597749747
    },
    {
        "content": "<p>Aah! I knew I'd asked about this somewhere last night when I was tired :-)</p>",
        "id": 207247757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597749773
    },
    {
        "content": "<p>So another linter complaint is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">coe_le_coe</span> <span class=\"c\">/-</span><span class=\"cm\"> simp can prove this:</span>\n<span class=\"cm\">  by simp only [with_bot.coe_le_coe]</span>\n</code></pre></div>\n\n\n<p>This is a bit more excusable because at least  you can imagine a situation where zero = bot. But zero = one is kind of inexcusable. So you suggest to mark them locally irreducible -- but this is basically just to trick the linter, right?</p>",
        "id": 207247951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597749923
    },
    {
        "content": "<p>no, I because then the problem will show up in other files</p>",
        "id": 207248038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597749968
    },
    {
        "content": "<p>I don't understand what you're suggesting</p>",
        "id": 207248066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597749997
    },
    {
        "content": "<p>And you will get <code>\\u</code> up arrows that are sometimes doing a <code>with_one</code> coe, and sometimes a <code>with_zero</code> coe</p>",
        "id": 207248067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597749999
    },
    {
        "content": "<p>Which is a pain</p>",
        "id": 207248074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597750008
    },
    {
        "content": "<p>So the only solution I know, is to make them globally irreducible.</p>",
        "id": 207248090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597750025
    },
    {
        "content": "<p>But I wouldn't be surprised if that breaks everything</p>",
        "id": 207248098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597750037
    },
    {
        "content": "<p>OTOH is that the \"correct\" thing to do?</p>",
        "id": 207248106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597750053
    },
    {
        "content": "<p>aargh adding line <code>attribute [irreducible] with_one</code> on line 32 of <code>algebra.group.with_one</code> gives me a SEGV :-/</p>",
        "id": 207248478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597750353
    },
    {
        "content": "<p>so indeed it breaks everything :-)</p>",
        "id": 207248492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597750364
    },
    {
        "content": "<p>No, that's to early</p>",
        "id": 207248777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597750606
    },
    {
        "content": "<p>You should do it after setting up the api</p>",
        "id": 207248784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597750613
    },
    {
        "content": "<p>At the end of that file</p>",
        "id": 207248786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597750617
    },
    {
        "content": "<p>And then it shouldn't give a SEGV</p>",
        "id": 207248791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597750625
    }
]