[
    {
        "content": "<p>Can anyone explain this behavior?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"kn\">instance</span> <span class=\"n\">good_4</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">good</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">4</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>  <span class=\"c1\">-- other pairs summing to 4 also work</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>  <span class=\"c1\">-- failed to synthesize type class instance for ⊢ good (2 * 2)</span>\n</pre></div>",
        "id": 176393458,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569261960
    },
    {
        "content": "<p>Oh, <code>good (nat.add 2 2)</code> doesn't work. Some magic then?</p>",
        "id": 176393563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569262022
    },
    {
        "content": "<p>I was originally going to ask what kinds of definitional equivalence instance matching allows, but I realized I could just experiment instead.<br>\nMy conclusion is that it allows all kinds of definitional equalities except that delta reductions are only permitted for <code>reducible</code> definitions. In other words, it's just usual definitional equality with an appropriate transparency setting.<br>\nHowever, there is a small mystery remaining: why <code>good (2 + 2)</code> works even by default.</p>",
        "id": 176396988,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569264311
    },
    {
        "content": "<p>This seems to be something hard-coded into type-class inference. I think type-class inference normalizes (addition on) numerals using a mechanism other than definitional equality. Look at this example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">100000</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"n\">my_nat_add</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>Note that the tactic <code>apply_instance</code> succeeds, even though <code>2 + 2</code> is not definitionally equal to <code>4</code> after my instance.</p>",
        "id": 176398646,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569265409
    },
    {
        "content": "<p>And after <code>apply_instance</code> succeeds, the kernel rejects the found instance.</p>",
        "id": 176399153,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569265761
    },
    {
        "content": "<p>I think there's one more special rule about instance matching I didn't notice earlier: as far as I can tell, instances themselves are always treated as reducible, whether or not they are marked as such.</p>",
        "id": 176678244,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569519040
    },
    {
        "content": "<p>One \"fun fact\" here is if you write an instance like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">delta</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>then the tactic will actually produce <code>id (something)</code>, and <code>id</code> is <em>not</em> reducible, so this will behave differently than if you had just written <code>(something)</code> directly, under some circumstances.</p>",
        "id": 176679447,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569519842
    },
    {
        "content": "<p>You can use <code>clean</code> to fix this</p>",
        "id": 176679545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569519907
    },
    {
        "content": "<p>like <code>by clean by { delta CommRing, apply_instance }</code>?</p>",
        "id": 176679685,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569520013
    },
    {
        "content": "<p>It worked but it doesn't look very ... clean</p>",
        "id": 176679732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569520054
    }
]