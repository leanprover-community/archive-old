[
    {
        "content": "<p>I want to find all possible instance of a certain name \"foo\".  Things like <code>x.foo</code>, <code>(foo)</code>, <code>a:foo</code>, <code>foo.bar</code>, etc, but not <code>foo_bar</code> or <code>myfoo</code>.  Because of unicode, it is hard to determine when a name has ended (or begun).  Is there a list of one of these sets of characters or rules?:</p>\n<ul>\n<li>all characters which can't be in a name (and therefore can be used to determine when a name begins and ends)</li>\n<li>all characters which can be in a name</li>\n<li>the exact rules for allowable names</li>\n<li>the exact rules for parsing names (if not too complicated)</li>\n</ul>\n<p>If it matters, I'm more ok with false positives (it could be <code>foo</code> but isn't), than false negatives.  I'm not concerned with if there is more than one declaration <code>foo</code>, like <code>nat.foo</code> and <code>int.foo</code>.  That is the part I'm working on solving.</p>",
        "id": 199444400,
        "sender_full_name": "Jason Rute",
        "timestamp": 1591064502
    },
    {
        "content": "<p>For now I'm just checking that there isn't an alphanumeric character or _ on either side.  This will eliminate cases like <code>foo_bar</code> or <code>myfoo</code>, but not <code>Î±foo</code> or <code>foo'</code>  that is probably ok for now since I will check all those anyway to make sure they are the exact <code>foo</code> I'm looking for.</p>",
        "id": 199447440,
        "sender_full_name": "Jason Rute",
        "timestamp": 1591068860
    },
    {
        "content": "<p>The allowable name characters are given by this C++: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/util/name.cpp#L27-L56\">https://github.com/leanprover-community/lean/blob/master/src/util/name.cpp#L27-L56</a></p>",
        "id": 199447591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591069139
    },
    {
        "content": "<p>If you ignore the unicode, it is the regex <code>[A-Za-z_][A-Za-z0-9_']*</code></p>",
        "id": 199447600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591069180
    },
    {
        "content": "<p>(by the way, I always look for \"Coptic\" to find this snippet, since of course Coptic characters don't actually come up anywhere else)</p>",
        "id": 199447699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591069337
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 199447931,
        "sender_full_name": "Jason Rute",
        "timestamp": 1591069792
    }
]