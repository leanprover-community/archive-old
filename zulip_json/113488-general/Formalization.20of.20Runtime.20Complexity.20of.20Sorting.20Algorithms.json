[
    {
        "content": "<p>Hi there!<br>\nAbout <a href=\"#narrow/stream/113488-general/topic/BSc.20Final.20Project/near/220647062\">this</a> message,<br>\nI've completed the formalization last year, and now I'm adjusting everything according to mathlib's guide for contribution. It's implemented <a href=\"https://github.com/tomaz1502/runtimeformalization\">in this repository</a>. I would really appreciate if someone could take a look and give me feedback before I make a PR. I know that specially the proof about merge sort is quite large and may be hard to get, so feel free to ask any questions about it. This is my first contribution to mathlib, and I don't have an extensive background in Lean, so probably there is some code smells that I'm not aware of.</p>\n<p>The proofs are all based on a new version of Insertion Sort and Merge Sort that I've defined, that counts the number of operations done besides sorting the input list. In the formalization, I've included proofs that they produce the same output as their original counterparts, defined in data/list/sort.lean. Everything is documented on my bachelor thesis (Report.pdf in the repository). Unfortunately, there is only the version in brazilian portuguese :/.</p>",
        "id": 284184450,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1653685380
    },
    {
        "content": "<p>I'm taking a quick look at your insertion sort, and I don't completely understand this part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">ordered_insert</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"c1\">-- ([2, 5, 3, 1, 4], 0)</span>\n</code></pre></div>\n<p>I would expect this to have one comparison: checking that 2 &lt;= 5, and looking at the definition of <code>ordered_insert</code> it seems that it should be 1 as well - is the comment just outdated?</p>",
        "id": 284194357,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653692829
    },
    {
        "content": "<p>As an aside, you can also write this as <code>#eval ordered_insert (≤) 2 [5, 3, 1, 4]</code></p>",
        "id": 284194384,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653692860
    },
    {
        "content": "<p>I just spun up a gitpod instance to try it out (<a href=\"https://github.com/tomaz1502/RunTimeFormalization/pull/1\">https://github.com/tomaz1502/RunTimeFormalization/pull/1</a>): yes, the comment is just outdated, it gives what you expect</p>",
        "id": 284194835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653693298
    },
    {
        "content": "<p>One other comment: your <code>log_monotone lemma</code> is exactly <code>@nat.log_monotone 2</code></p>",
        "id": 284194945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653693377
    },
    {
        "content": "<p>Generally though it looks very well written!</p>",
        "id": 284195001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653693472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/Formalization.20of.20Runtime.20Complexity.20of.20Sorting.20Algorithms/near/284194357\">said</a>:</p>\n<blockquote>\n<p>I'm taking a quick look at your insertion sort, and I don't completely understand this part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">ordered_insert</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"c1\">-- ([2, 5, 3, 1, 4], 0)</span>\n</code></pre></div>\n<p>I would expect this to have one comparison: checking that 2 &lt;= 5, and looking at the definition of <code>ordered_insert</code> it seems that it should be 1 as well - is the comment just outdated?</p>\n</blockquote>\n<p>yes, the commentary is outdated, thanks for pointing that out</p>",
        "id": 284195172,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1653693638
    },
    {
        "content": "<p>Here's a shorter proof of your <code>div_two</code> as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">div_two</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">nat.le_div_iff_mul_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">imp_self</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 284195266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653693731
    },
    {
        "content": "<p>(I found the main lemma by typing <code>nat.le_div</code> and hitting ctrl+space to get suggestions)</p>",
        "id": 284195293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653693771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Formalization.20of.20Runtime.20Complexity.20of.20Sorting.20Algorithms/near/284194945\">said</a>:</p>\n<blockquote>\n<p>One other comment: your <code>log_monotone lemma</code> is exactly <code>@nat.log_monotone 2</code></p>\n</blockquote>\n<p>oh! Maybe it was added recently? I remember not being able to find it about a year ago, when I was proving this.. anyway, thanks a lot! I will remove it</p>",
        "id": 284195629,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1653694100
    },
    {
        "content": "<p>I'm surprised that I couldn't find the <code>nat.log b b = 1</code> lemma (which you have for <code>b=2</code>) in mathlib</p>",
        "id": 284195928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653694435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Formalization.20of.20Runtime.20Complexity.20of.20Sorting.20Algorithms/near/284195928\">said</a>:</p>\n<blockquote>\n<p>I'm surprised that I couldn't find the <code>nat.log b b = 1</code> lemma (which you have for <code>b=2</code>) in mathlib</p>\n</blockquote>\n<p>It should be a very special case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.log_eq_one_iff\">docs#nat.log_eq_one_iff</a></p>",
        "id": 284209082,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653711551
    },
    {
        "content": "<p>Alternatively, of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.log_pow\">docs#nat.log_pow</a></p>",
        "id": 284209173,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653711680
    },
    {
        "content": "<p>I think it's still worth having as a lemma</p>",
        "id": 284215158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653721788
    },
    {
        "content": "<p>can someone give me write access to non-master branches of mathlib? So I can push this to the branch and create a PR</p>",
        "id": 284249946,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1653774451
    },
    {
        "content": "<p>Invite sent</p>",
        "id": 284250664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653775505
    },
    {
        "content": "<p>It's not immediately clear to me whether this type of formalization is in scope for mathlib, but certainly some of the lemmas you needed along the way will be; and the easiest place to have that discussion will probably be in a PR. Perhaps <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> has some opinion on whether and/or where this would best fit into mathlib</p>",
        "id": 284250746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653775638
    },
    {
        "content": "<p>as long as it is written in a way where people can clearly build on it, I don't see why not to put it in mathlib, perhaps somewhere in <code>computability</code> or near the other complexity theory work</p>",
        "id": 284250822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653775775
    },
    {
        "content": "<p>I think there are some aspects of the \"framework\" that need work, for example, is there a principled explanation for where the \"ticks\" are supposed to go?</p>",
        "id": 284250883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653775875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Formalization.20of.20Runtime.20Complexity.20of.20Sorting.20Algorithms/near/284250883\">said</a>:</p>\n<blockquote>\n<p>I think there are some aspects of the \"framework\" that need work, for example, is there a principled explanation for where the \"ticks\" are supposed to go?</p>\n</blockquote>\n<p>Can you give me a more detailed explanation on what do you mean by \"where the ticks are supposed to go\"? By \"tick\" you mean each operation, right? You mean that I should define precisely what is an operation in my framework?</p>",
        "id": 284417132,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1653958564
    }
]