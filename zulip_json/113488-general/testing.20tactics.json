[
    {
        "content": "<p>I have a <code>meta def T : expr â†’ tactic expr := ...</code> that I've written that isn't behaving properly, and I want to do some debugging. Inside the definition there are some <code>trace</code> statements that explain to me what's going on --- I just need a convenient way to invoke my tactic. Suppose I have some other <code>def f := ...</code>, and I want to invoke <code>T</code> on <code>f</code>. What do I do?</p>",
        "id": 123790056,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521194777
    },
    {
        "content": "<p>I'm hoping there's just something easy involving quotations that I don't know.</p>",
        "id": 123790062,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521194803
    },
    {
        "content": "<p>Something like <code>to_expr `(f) &gt;&gt;= T</code> should work</p>",
        "id": 123790083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521194874
    },
    {
        "content": "<p><code>term `(f) has type reflected f but is expected to have type pexpr</code></p>",
        "id": 123790135,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521194951
    },
    {
        "content": "<p>Actually, <code> `(f)</code> is already an <code>expr</code>, so <code>T `(f)</code> should work</p>",
        "id": 123790137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521194956
    },
    {
        "content": "<p><code> to_expr ``(f)</code> works, however</p>",
        "id": 123790146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521194991
    },
    {
        "content": "<p>You would use <code>to_expr</code> if you need to parse the expression at run time rather than parse time</p>",
        "id": 123790148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521194995
    },
    {
        "content": "<p>thanks!</p>",
        "id": 123790199,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521195017
    }
]