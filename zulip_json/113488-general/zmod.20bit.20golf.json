[
    {
        "content": "<p>Some of the proofs below look like they are twice as long as they should be. Golfing challenge!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.invertible</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bit0_mod_two</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_mod</span><span class=\"o\">,</span> <span class=\"n\">mod_self</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mod</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bit1_mod_two</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">add_mod</span><span class=\"o\">,</span> <span class=\"n\">bit0_mod_two</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">mod_mod</span><span class=\"o\">,</span> <span class=\"n\">one_mod</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">zmod</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pow_bit0</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">zmod.pow_card_sub_one_eq_one</span> <span class=\"n\">hk</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_mul_gcd_a_self_bit1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_a</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:=</span> <span class=\"n\">nat.gcd_eq_gcd_ab</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">aux</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int.cast_add</span><span class=\"o\">,</span> <span class=\"n\">int.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">int.cast_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">zmod.cast_self</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">nat.cast_bit0</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">aux</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">nat.gcd</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">aux</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.gcd_succ</span><span class=\"o\">,</span> <span class=\"n\">nat.gcd_one_left</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">nat.bit1_mod_two</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">invertible_two</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv_of</span> <span class=\"o\">:=</span> <span class=\"n\">nat.gcd_a</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_of_mul_self</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">two_mul_gcd_a_self_bit1</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_inv_of_self</span> <span class=\"o\">:=</span> <span class=\"n\">two_mul_gcd_a_self_bit1</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bit0_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mt</span> <span class=\"n\">_</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.pos_of_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">nat.bit1_ne_zero</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">two_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⅟</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">inv_of_mul_self</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">H</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bit1_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">ℤ</span> <span class=\"n\">at</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int.cast_bit1</span><span class=\"o\">,</span> <span class=\"n\">cast_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">n.succ</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.cast_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod.cast_self</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">nat_coe_zmod_eq_zero_iff_dvd</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.le_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">n.succ_pos</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.lt_add_of_pos_left</span> <span class=\"n\">n.succ_pos</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">zmod</span>\n</code></pre></div>",
        "id": 211878901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601539191
    }
]