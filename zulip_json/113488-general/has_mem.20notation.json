[
    {
        "content": "<p>Does anyone know how to fix this notation hack?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">covering_family</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Π</span> <span class=\"o\">{{</span><span class=\"n\">V</span><span class=\"o\">}},</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"err\">∈</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"c1\">-- Aaahrg!</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">coverage</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">covers</span>   <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">covering_family</span> <span class=\"n\">U</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n            <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">covers</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"err\">∈</span> <span class=\"n\">covers</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n            <span class=\"bp\">∀</span> <span class=\"n\">Vj</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Vj</span> <span class=\"err\">⟶</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"n\">h</span> <span class=\"bp\">→</span>\n            <span class=\"bp\">∃</span> <span class=\"n\">Ui</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Ui</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">l</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Vj</span> <span class=\"err\">⟶</span> <span class=\"n\">Ui</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"err\">≫</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 155075639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547462795
    },
    {
        "content": "<p>Ooh, and here is the relevant top of the file</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">comma</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">full_subcategory</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">examples</span><span class=\"bp\">.</span><span class=\"n\">topological_spaces</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">where</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n</pre></div>",
        "id": 155075643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547462817
    },
    {
        "content": "<p>Could you do a <code>has_mem</code> instance instead?</p>",
        "id": 155075774,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1547462965
    },
    {
        "content": "<p>No, I don't think <code>has_mem</code> works. I want to say that <code>f : V ⟶ U</code> is a member of <code>c</code>. But the type of <code>f</code> depends on <code>V</code>, which ranges over all of <code>X</code>.</p>",
        "id": 155077701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547465286
    }
]