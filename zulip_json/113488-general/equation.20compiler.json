[
    {
        "content": "<p>Hi friends, is there a way to fill up this underscore?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">k</span>     <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n           <span class=\"mi\">0</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Usually <code>n</code> is of some complicated inductive types, but I really just need to handle one specific constructor. For all the other constructors the proofs are long but exactly the same.  <br>\nI could use <code>rec</code> or <code>cases</code> or <code>if then else</code> but that would be awkward. So I am wondering how I can refer to the facts that the equation compiler knows but are not listed as hypotheses?</p>",
        "id": 130222550,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532451369
    },
    {
        "content": "<p>use k+1 instead of k</p>",
        "id": 130222560,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532451386
    },
    {
        "content": "<p>that works in the case of nat but not other complicated inductive types</p>",
        "id": 130222573,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532451422
    },
    {
        "content": "<p>then you can't</p>",
        "id": 130222582,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532451441
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span>     <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>well maybe this one is a better toy example</p>",
        "id": 130222696,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532451598
    },
    {
        "content": "<p>you can't.</p>",
        "id": 130222747,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532451610
    },
    {
        "content": "<p>reason?</p>",
        "id": 130222758,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532451620
    },
    {
        "content": "<p>in that environment you do not know that b is not tt</p>",
        "id": 130222768,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532451636
    },
    {
        "content": "<p>also how do you use <code>rec</code> or <code>cases</code>?</p>",
        "id": 130222788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532451668
    },
    {
        "content": "<p>but the equation compiler knows that if it's tt then the thing is not exhaustive</p>",
        "id": 130222792,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532451672
    },
    {
        "content": "<p>the <code>b</code> is a catch-all clause</p>",
        "id": 130222798,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532451691
    },
    {
        "content": "<p>it is intended to match everything</p>",
        "id": 130222801,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532451696
    },
    {
        "content": "<p>that's true</p>",
        "id": 130222804,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532451702
    },
    {
        "content": "<p>I am saying that the compiler knows that tt will never be matched by b</p>",
        "id": 130222864,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532451759
    },
    {
        "content": "<p>but that's already outside your environment</p>",
        "id": 130222869,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532451772
    },
    {
        "content": "<p>perhaps, so I am asking if there is a clever hack</p>",
        "id": 130222890,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532451823
    },
    {
        "content": "<p>what was your idea with <code>rec</code> and <code>cases</code>?</p>",
        "id": 130222892,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532451836
    },
    {
        "content": "<blockquote>\n<p>also how do you use <code>rec</code> or <code>cases</code>?</p>\n</blockquote>\n<p>you just don't use <code>match</code></p>",
        "id": 130222941,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532451858
    },
    {
        "content": "<blockquote>\n<p>that works in the case of nat but not other complicated inductive types</p>\n</blockquote>\n<p>does using <code>rec</code> solve this problem?</p>",
        "id": 130222950,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532451891
    },
    {
        "content": "<p>it's the same as your suggestion of using <code>(k+1)</code></p>",
        "id": 130222965,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532451909
    },
    {
        "content": "<p>namely explicitly writing down all the constructors</p>",
        "id": 130222983,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532451933
    },
    {
        "content": "<p>What you could do is:</p>\n<div class=\"codehilite\"><pre><span></span>begin\n  cases n,\n  case 0 :\n  { /- proof -/ },\n  all_goals { /- proof -/ },\nend\n</pre></div>",
        "id": 130224157,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532453297
    },
    {
        "content": "<p>but how are you going to prove n != 0?</p>",
        "id": 130224169,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532453322
    },
    {
        "content": "<p>I think that you don't have to.</p>",
        "id": 130224343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532453508
    },
    {
        "content": "<p>That is Simon's trick.</p>",
        "id": 130224351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532453517
    },
    {
        "content": "<p>You just prove it case by case, for all cases. But then, you prove all but one case with a single proof.</p>",
        "id": 130224422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532453549
    },
    {
        "content": "<p>I forgot to mention that foll all the other cases I need the fact that n!=0</p>",
        "id": 130224489,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532453633
    },
    {
        "content": "<p>but this trick might work</p>",
        "id": 130224536,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532453644
    },
    {
        "content": "<p>Right, so now you somehow need to know that fact, but now it should be even true in your environment (I hope).</p>",
        "id": 130224585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532453703
    },
    {
        "content": "<p>Off the top of my head, <code>cases h : n</code> will preserve the variable n and you can do your proof with <code>subst n</code> and <code>contradiction</code></p>",
        "id": 130224590,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532453705
    },
    {
        "content": "<p>concretely, here is how I do it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">n</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130225161,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532454271
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 130225220,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532454322
    },
    {
        "content": "<p>when you use <code>cases 0:</code> to handle the specific constructor, how do you supply the arguments to that constructor?</p>",
        "id": 130225363,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532454444
    },
    {
        "content": "<p>in the case of nat there is no parameters</p>",
        "id": 130225389,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532454476
    },
    {
        "content": "<p>(note that it's <code>case nat.zero :</code>, no s, and full constructor name)</p>",
        "id": 130225432,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532454484
    },
    {
        "content": "<p>if we were looking at a list for instance, it would be <code>case list.cons : x xs { /- my proof -/ }</code></p>",
        "id": 130225455,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532454512
    },
    {
        "content": "<p>Very cool, it worked</p>",
        "id": 130226138,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532455161
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 130226143,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532455166
    },
    {
        "content": "<p>I wasn't aware of the <code>case</code> tatic</p>",
        "id": 130226210,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532455204
    },
    {
        "content": "<p>The more you know <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 130226238,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532455225
    },
    {
        "content": "<p>I'm going to embrace it from now on :)</p>",
        "id": 130226248,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1532455231
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 130244135,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1532474060
    }
]