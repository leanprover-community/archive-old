[
    {
        "content": "<p>Is there any particular reason not to make <code>t2_space</code> and similar classes a Prop?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">t2_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">is_open</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">u</span> <span class=\"err\">∩</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125747081,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524782535
    },
    {
        "content": "<p>I actually had sort of assumed that a structure with only Prop fields would automatically be a Prop by default.</p>",
        "id": 125747084,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524782557
    },
    {
        "content": "<p>I noticed earlier this week that this wasn't happening</p>",
        "id": 125747703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524783593
    },
    {
        "content": "<p>As I'm sure you know, if you are defining your own class you can just tell it to be a Prop</p>",
        "id": 125747761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524783612
    },
    {
        "content": "<p>but that won't help you here</p>",
        "id": 125747764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524783623
    },
    {
        "content": "<p>I don't really need it to be a Prop, I just tried to use it as a Prop and was surprised when it didn't work, but it's easy enough for me to avoid doing that.</p>",
        "id": 125747940,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524783924
    },
    {
        "content": "<p>I came across this comment later in the same file which makes me think the statuses of these structures are a bit accidental:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> countability axioms</span>\n\n<span class=\"cm\">For our applications we are interested that there exists a countable basis, but we do not need the</span>\n<span class=\"cm\">concrete basis itself. This allows us to declare these type classes as `Prop` to use them as mixins.</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 125747991,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524783966
    },
    {
        "content": "<p>(It's followed by a structure which is indeed declared to be a Prop.)</p>",
        "id": 125748028,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524784079
    },
    {
        "content": "<p>I think that's a typo. I'll change it</p>",
        "id": 125751920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524791133
    }
]