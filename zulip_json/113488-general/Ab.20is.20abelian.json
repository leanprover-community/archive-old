[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>, do you have already, or planned, the constructions that <code>Ab</code> or <code>Module R</code> are abelian?</p>",
        "id": 203470603,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594358784
    },
    {
        "content": "<p>I have the version for <code>Module R</code> in my repository (but some cleanup is required)</p>",
        "id": 203471414,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594360000
    },
    {
        "content": "<p>Adding the version for Ab was the next thing on my todo list, but I only got as far as noticing that there is some stuff missing in <code>subgroup.lean</code>(like <code>cod_restrict</code>) until I got distracted by real-life obligations yet again</p>",
        "id": 203471498,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594360125
    },
    {
        "content": "<p>Ab is just Z-Mod!</p>",
        "id": 203471501,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594360134
    },
    {
        "content": "<p>Yes, but pulling the <code>abelian</code> instance via this equivalence gives definitionally not-so-nice kernels, which would make working with exactness less fun</p>",
        "id": 203471589,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594360221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Sure, if you can turn that into a 1-line proof that Ab is abelian (and the resulting biproducts are actually usable), then I'll be you 3 good Belgian beers.</p>",
        "id": 203471594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594360244
    },
    {
        "content": "<p>I just made <a href=\"https://github.com/leanprover-community/mathlib/issues/3366\">#3366</a>, which just provides <code>has_image_maps Ab</code>. Later this will hopefully be obsoleted by <code>[abelian Ab]</code>, but it would be good to check that that has equally good definitional behaviour.</p>",
        "id": 203588013,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594458240
    }
]