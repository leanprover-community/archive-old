[
    {
        "content": "<p>I'm trying to make an instance of <code>add_comm_group X</code> and every time I press a key I get an assertion violation and the VS Code window unfocuses. This is with Lean 3.5.1. I'm not sure I can minimise but does anyone have any tips as to why this might be happening?</p>",
        "id": 188757466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582307946
    },
    {
        "content": "<p>You're probably triggering some bug in Lean. What does the assertion violation say exactly?</p>",
        "id": 188758043,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582308221
    },
    {
        "content": "<p>It's the usual line 3174 one:</p>\n<div class=\"codehilite\"><pre><span></span>Task: /home/buzzard/Encfs/Computer_languages/Lean/lean-projects/Wu_group_cohomology_M4R/src/add_subquotient/basic.lean: coe_sort.add_comm_group\nm_ctx.match(e, *val2)\nLEAN ASSERTION VIOLATION\nFile: /home/travis/build/leanprover-community/lean/src/frontends/lean/elaborator.cpp\nLine: 3174\n</pre></div>",
        "id": 188758425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582308433
    },
    {
        "content": "<p>Oh, I wasn't aware that this happened frequently. Could you open an issue here? <a href=\"https://github.com/leanprover-community/lean/issues\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues\">https://github.com/leanprover-community/lean/issues</a></p>",
        "id": 188758868,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582308723
    },
    {
        "content": "<p>It happens a fair amount to me when I am making structures. This seems to reliably trigger it for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">def</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">B</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>LEAN ASSERTION VIOLATION\nFile: /home/travis/build/leanprover-community/lean/src/frontends/lean/elaborator.cpp\nLine: 3174\nTask: /home/buzzard/lean-projects/M4P33/scratch/unreachable.lean: quot.lift\nm_ctx.match(e, *val2)\n</pre></div>\n\n\n<p>Does it trigger it for anyone else or is there something wrong with my set-up?</p>",
        "id": 188759510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582309155
    },
    {
        "content": "<p>I just tried it, and it also triggered the assertion violation for me.</p>",
        "id": 188759620,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1582309212
    },
    {
        "content": "<p>I just tested your code in a 3.4.2 project and it triggered there as well.</p>",
        "id": 188759628,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582309220
    },
    {
        "content": "<p>(to give an indication as to how common it is for me, this is an independent problem from last week. I think I sometimes push the elaborator too far when making a structure)</p>",
        "id": 188759637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582309233
    },
    {
        "content": "<p>I've had the same violation (and frustration) working with category theory structures, it seemed to happen only when I had <code>_</code> in some part of a structure I was defining in term mode</p>",
        "id": 188782668,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1582325977
    }
]