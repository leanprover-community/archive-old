[
    {
        "content": "<p>With Kevin's help I came up with a bug in <code>squeeze_dsimp</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">lftcm</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Filters</span>\n\n<span class=\"cm\">## Definition of filters</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">principal</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">t</span><span class=\"o\">},</span>\n  <span class=\"n\">univ_sets</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subset_univ</span><span class=\"o\">,</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">],</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sets_of_superset</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">squeeze_dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">transitivity</span> <span class=\"n\">x</span> <span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inter_sets</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">lftcm</span>\n</code></pre></div>\n\n\n<p>Lean suggests <code>dsimp only []</code> but this breaks the proof!</p>",
        "id": 204185916,
        "sender_full_name": "Tony Scholl",
        "timestamp": 1594977302
    },
    {
        "content": "<p>(just to add -- Tony was asking about <code>squeeze_dsimp</code> so I told him to do <code>leanproject up</code> ;-) )</p>",
        "id": 204186001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594977367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span></p>",
        "id": 204187008,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594978214
    },
    {
        "content": "<p>Really going after cutting-edge features here, <code>squeeze_dsimp</code> is four hours old!</p>",
        "id": 204187038,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594978245
    },
    {
        "content": "<p><code>squeeze_dsimp</code> is probably not to be trusted completely. Because <code>dsimp</code> preserves definitional equality, it can use lemmas without them being obviously used.</p>",
        "id": 204204481,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594991999
    },
    {
        "content": "<p>I'm going to look into the issue, maybe it can be made more reliable. Do you have an example that doesn't use topology?</p>",
        "id": 204205905,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594992756
    },
    {
        "content": "<p>The good news is that there's a way to make it more reliable but this call takes 2 min to complete</p>",
        "id": 204210210,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594995034
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3431\">#3431</a></p>",
        "id": 204211634,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594995827
    },
    {
        "content": "<p>Could we have <code>squeeze_dsimp</code> and <code>squeeze_dsimp!</code>?</p>",
        "id": 204212794,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594996338
    },
    {
        "content": "<p>Or try the first strategy, then the tactic would try its output, see if the new goal matches what is should be, and if it doesn't switch to the slow strategy?</p>",
        "id": 204212914,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594996398
    },
    {
        "content": "<p>That's an option. The same technique could apply for <code>squeeze_simp</code> but <code>!</code> has a meaning already. We could use <code>?</code> instead</p>",
        "id": 204212916,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594996400
    },
    {
        "content": "<p>I hadn't considered that. That's an interesting option. I think having a <code>?</code> flag might have the added benefit that if you convert a whole file at once, you won't have a lot of calls holding you up.</p>",
        "id": 204213117,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594996488
    },
    {
        "content": "<p>I think it'd be most intuitive to make <code>dsimp?</code> do what <code>squeeze_dsimp</code> does, along the lines of <a href=\"https://github.com/leanprover-community/mathlib/issues/2706\">#2706</a>. (Would we need a <code>dsimp??</code> for the slower version?)</p>",
        "id": 204213532,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594996687
    },
    {
        "content": "<p>That should probably be a separate refactor, no?</p>",
        "id": 204213828,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594996853
    },
    {
        "content": "<p>Yeah, you're right.</p>",
        "id": 204214033,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594996954
    }
]