[
    {
        "content": "<p>With just a bare import things are fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">submodule</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@[_ext_core id.{1} name submodule.ext]</span>\n<span class=\"cm\">structure submodule : Î  (R : Type u) (M : Type v) [_inst_1 : semiring R] [_inst_2 : add_comm_monoid M] [_inst_3 : module R M], Type v</span>\n<span class=\"cm\">fields:</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>But if I'm doing Noetherian stuff then this happens:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[_ext_core id.{1} name submodule.ext, _simps_str prod.mk.{0 0} (list.{0} name) (list.{0} (prod.{0 0} name (prod.{0 0} (expr bool.tt) (prod.{0 0} (list.{0} nat) bool)))) (list.cons.{0} name (name.mk_string \"u\" name.anonymous) (list.cons.{0} name (name.mk_string \"v\" name.anonymous) (list.nil.{0} name))) (list.cons.{0} (prod.{0 0} name (prod.{0 0} (expr bool.tt) (prod.{0 0} (list.{0} nat) bool))) (prod.mk.{0 0} name (prod.{0 0} (expr bool.tt) (prod.{0 0} (list.{0} nat) bool)) (name.mk_string \"carrier\" name.anonymous) (prod.mk.{0 0} (expr bool.tt) (prod.{0 0} (list.{0} nat) bool) `(fun (R : Type.{u}) (M : Type.{v}) [_inst_1 : semiring.{u} R]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">submodule.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">submodule.carrier.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">list.cons.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.nil.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">))</span> <span class=\"n\">bool.tt</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">list.cons.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">bool.tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">bool.tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"zero_mem'\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">bool.tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">submodule.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">submodule.zero_mem'.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">list.cons.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.nil.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">))</span> <span class=\"n\">bool.ff</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">list.cons.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">bool.tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">bool.tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"add_mem'\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">bool.tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">submodule.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">submodule.add_mem'.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">list.cons.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">list.nil.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">))</span> <span class=\"n\">bool.ff</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">list.cons.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">bool.tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">bool.tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"smul_mem'\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">bool.tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">submodule.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">submodule.smul_mem'.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">list.cons.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">list.nil.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">))</span> <span class=\"n\">bool.ff</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">list.nil.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">bool.tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">bool</span><span class=\"o\">))))))))]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">submodule</span> <span class=\"o\">:</span> <span class=\"bp\">Î </span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">],</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>Why is this happening?</p>",
        "id": 237060683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619969171
    },
    {
        "content": "<p>Something put a <code>simps</code> attribute on it</p>",
        "id": 237064453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619973126
    },
    {
        "content": "<p>In the wrong file</p>",
        "id": 237064463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619973136
    },
    {
        "content": "<p>Yes, that is just some junk <code>@[simps]</code> generates and then records so that it doesn't have to generate it again.<br>\nIt's not necessarily a problem if it is generated in a different file than where a structure is defined. Only when you declare custom projections or rename projections, you should do it in the same file.</p>",
        "id": 237121392,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620025528
    },
    {
        "content": "<p>Is there any way to make the output of #print more readable, or am I just not supposed to read it?</p>",
        "id": 237131256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620031913
    },
    {
        "content": "<p>Isn't there a magic builtin function that means \"don't print this\"?</p>",
        "id": 237133350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620033202
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/hidden\">docs#hidden</a></p>",
        "id": 237133371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620033225
    },
    {
        "content": "<p><code>hidden</code> is a partial solution that would help, but perhaps a better solution is that the <code>#print</code> command doesn't print any attributes that start with <code>_</code>, since those are automatically generated.</p>",
        "id": 237188837,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620059345
    },
    {
        "content": "<p>oh actually <code>hidden</code> doesn't help. Notice that the raw term gets printed, including all implicit arguments.</p>",
        "id": 237188913,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620059383
    },
    {
        "content": "<p>the obvious problem here is the pp.all printing</p>",
        "id": 237189059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620059443
    },
    {
        "content": "<p>Another improvement would be that <code>#print</code> pretty-prints all arguments of attributes</p>",
        "id": 237189065,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620059446
    },
    {
        "content": "<p><code>#print</code> should be using the environment options instead of printing everything raw</p>",
        "id": 237189123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620059476
    },
    {
        "content": "<p>Even with better printing, I still think we can leave out the internal attributes that start with <code>_</code>.</p>",
        "id": 237189169,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1620059506
    },
    {
        "content": "<p>maybe there should be another pp option for that</p>",
        "id": 237189233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620059527
    },
    {
        "content": "<p>I think it would be confusing if you are debugging the attributes</p>",
        "id": 237189269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620059551
    },
    {
        "content": "<p>Note that this isn't even <code>pp.all</code>, it's <code>expr.to_string</code>.</p>",
        "id": 237189596,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620059689
    },
    {
        "content": "<p>I was thinking it looked rather better than <code>expr.to_raw_fmt</code> so I wasn't sure how exactly it was getting printed</p>",
        "id": 237189901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620059818
    }
]