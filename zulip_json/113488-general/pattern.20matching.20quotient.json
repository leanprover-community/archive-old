[
    {
        "content": "<p>I'm trying to do the following but it doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What is the correct way to do this?</p>",
        "id": 265815104,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640185843
    },
    {
        "content": "<p>The error says, <code>quot.mk</code> is not a pattern. What that means is that you can't use it on as a pattern of deconstruction in a match statement. Here is one option:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- not constant, so that foo can be computable</span>\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">quot.hrec_on</span> <span class=\"n\">x</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">nat_from_my_quot</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- my function from the underlying nat inside the quot</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"c1\">-- here we must prove that my function would have given the same output</span>\n    <span class=\"c1\">-- regardless of what precise nat was inside the quot, as long as</span>\n    <span class=\"c1\">-- other nats that satisfy `r` would also give the same output</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">heq_of_eq</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265815796,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640186273
    },
    {
        "content": "<p>So you're saying that I have to use the recursor when dealing with quotients?</p>",
        "id": 265816562,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640186679
    },
    {
        "content": "<p>No, not necessarily. You could use something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.map\">docs#quotient.map</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.map\">docs#quot.map</a></p>",
        "id": 265818218,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640187619
    },
    {
        "content": "<p>There are many helper functions built on top of the recursor.</p>",
        "id": 265818353,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640187694
    },
    {
        "content": "<p>Alright. Thanks a lot.</p>",
        "id": 265818547,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640187777
    },
    {
        "content": "<p>When you define a function on a <code>quotient</code>, you can't just say <code>f ⟦x⟧ = g x</code>. You also need to prove <code>x ≈ y → g x = g y</code>. Pattern matching doesn't have syntax for that.</p>",
        "id": 265948847,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640289719
    },
    {
        "content": "<p>You need to use, e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.lift_on\">docs#quot.lift_on</a> to define <code>f</code>.</p>",
        "id": 265948922,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640289764
    }
]