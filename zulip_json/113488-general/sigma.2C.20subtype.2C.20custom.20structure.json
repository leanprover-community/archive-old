[
    {
        "content": "<p>On <a href=\"https://github.com/leanprover/mathlib/pull/316\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/316\">#316</a>, there are the following comments:</p>\n<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span>:</p>\n<blockquote>\n<p>The first is that this may encourage us to overuse <code>sigma</code> types and <code>subtype</code>s at the expense of bespoke structures.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>:</p>\n<blockquote>\n<p>But somehow a bare <code>sigma</code> feels so low-level. Would it make any sense to replace it with a generic bundled structure? I guess it's basically the same thing...</p>\n</blockquote>\n<p>I bring this up here because it is off-topic for that particular issue but is still an issue that I've wondered about myself.</p>\n<p>In my <a href=\"https://github.com/spl/lean-finmap\" target=\"_blank\" title=\"https://github.com/spl/lean-finmap\">finmap</a> work, I've been using <code>sigma</code> as a singleton mapping between a key and value used in association lists and <code>finmap</code> itself. This is partly because it's already done in <code>hash_map</code> and partly because it's just the right type for the job. As far as the library goes, it works perfectly.</p>\n<p>But in usage, it means that whatever I insert, I must use <code>sigma</code> instead of a custom <code>structure</code>. I then end up defining a type that is defeq <code>sigma</code>. I'd rather use a custom <code>structure</code> that then provides the appropriate interface used by the library. But I'm not sure if this is desirable or how best to do it. I can think of possibly using a type class or an equivalence.</p>",
        "id": 133436036,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536233174
    }
]