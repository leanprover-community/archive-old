[
    {
        "content": "<p>How does this definition work? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span>  <span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"bp\">.</span>\n</pre></div>\n\n\n<p>What does the dot at the end do? I haven't seen that before.</p>",
        "id": 124678478,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522945878
    },
    {
        "content": "<p>\"it's too obvious I don't even wanna write \"rfl\"\"</p>",
        "id": 124678484,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522945910
    },
    {
        "content": "<p>I don't think that's it. I think it's a definition by pattern matching and <code>empty</code> has no constructors. I haven't seen <code>.</code> used that way before but it looks to me like it signals that we're done with the pattern matching.</p>",
        "id": 124680675,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522949275
    },
    {
        "content": "<p>How does this notation work in general, for things with constructors?</p>",
        "id": 124680900,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522949549
    },
    {
        "content": "<p>You mean with the dot or just pattern matching definitions?</p>",
        "id": 124680970,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522949676
    },
    {
        "content": "<p>With the dot</p>",
        "id": 124680993,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522949740
    },
    {
        "content": "<p>I haven't seen many more examples but I found these:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">not_succ_le_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">.</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">ff_ne_tt</span> <span class=\"o\">:</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">.</span>\n</pre></div>\n\n\n<p>I think you just put it in instead of a pattern matching to signal that there are no constructors.</p>",
        "id": 124681319,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522950209
    },
    {
        "content": "<p>In general the dot is an optional command delimiter, you can always use it if you want:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">.</span>\n</pre></div>",
        "id": 124681520,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522950486
    },
    {
        "content": "<p>If you want to write a definition using pattern matching and you have zero equations, then the dot is mandatory.  The examples above have zero equations.</p>",
        "id": 124681558,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522950575
    },
    {
        "content": "<p>In case you didn't know, this definition syntax is essentially just sugar for a nested match.  Here it is maybe clearer that there are zero equations:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"kn\">end</span>\n</pre></div>",
        "id": 124681664,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522950686
    },
    {
        "content": "<p>To give you an intuition for when this zero-equation magic works, recall that the equation compiler is (ignoring lots and lots of details) a wrapper around the <code>cases</code> tactic.  Whenever iterated <code>cases</code> would yield zero subgoals, then you can use this magic.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n</pre></div>",
        "id": 124681854,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522950911
    }
]