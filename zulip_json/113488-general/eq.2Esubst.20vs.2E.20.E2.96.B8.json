[
    {
        "content": "<p><code>▸</code> is simply the notation for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq.subst\">docs#eq.subst</a>, but I've found it sometimes less powerful, e.g. <a href=\"https://github.com/leanprover-community/mathlib/blob/ed19e76695b2e34179725aa28a47b528312c2c40/src/field_theory/splitting_field.lean#L197\">The two <code>subst</code> here</a> cannot be replaced by <code>▸</code>. Why is this, and is it possible to make them equally powerful? This is desirable since <code>h ▸</code> is shorter than <code>h.subst</code>; it's less a problem for <code>h.symm ▸</code> vs. <code>h.substr</code> since they have equal length (but a pair of parentheses may be eliminable using <code>h.symm ▸</code>), though it will be another story if we introduce a notation for <code>eq.substr</code> ...</p>",
        "id": 287010715,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655879692
    },
    {
        "content": "<p>Huh, yeah that's pretty weird. Note that <code>eq.subst h ...</code> also doesn't work (even though <code>h.subst</code> does).</p>",
        "id": 287017230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655884464
    },
    {
        "content": "<p>Here's the issue on master and I've no doubt that it can be minimised a lot more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.splitting_field</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">roots_ne_zero_of_splits</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">splits</span> <span class=\"n\">i</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf0</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f.map</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">roots</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_root_of_splits</span> <span class=\"n\">i</span> <span class=\"n\">hs</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hf0</span> <span class=\"bp\">$</span> <span class=\"n\">nat_degree_eq_of_degree_eq_some</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- h : (map i f).roots = 0</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">eval_map</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"c1\">--  cases eq.subst h ((mem_roots _).2 hx), -- fails</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h.subst</span> <span class=\"o\">((</span><span class=\"n\">mem_roots</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hx</span><span class=\"o\">),</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">exact</span> <span class=\"n\">map_ne_zero</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h.subst</span> <span class=\"n\">hf0</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287017682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655884723
    },
    {
        "content": "<p>I'm pretty sure this is the result of <code>elab_as_eliminator</code>. I'm not certain we want to get the two to do the same thing because if I remember correctly I sometimes reached the opposite situation, so it's nice to have both options available.</p>",
        "id": 287024177,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655888450
    },
    {
        "content": "<p>Interesting, I didn't know <code>elab_as_eliminator</code> has to do with dot notation.</p>",
        "id": 287024991,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655888859
    },
    {
        "content": "<p>Dot notation in general messes up with elaboration, so dot notation has to do with <code>elab_as_eliminator</code> to the extent that both change elaboration. As a result, I'm not sure the difference in behavior is intended.</p>",
        "id": 287035056,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655894658
    },
    {
        "content": "<p>I’ve run into this problem too - I am not sure that having both options available is a great solution, since it is rather opaque when one works over the other. I don’t understand what fixing this would entail, though.</p>",
        "id": 287037015,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1655895898
    }
]