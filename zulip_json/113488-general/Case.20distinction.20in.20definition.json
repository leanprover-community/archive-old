[
    {
        "content": "<p>For teaching purposes I would like to define my own version of the rational numbers and prove that they form a field. I have managed to set them up and prove that they form a commutative ring (adapting the construction of the integers from the natural numbers in Kevin's PhD course). However, I struggle to define the multiplicative inverse. I was not able to make the necessary case distinction depending on whether the rational number is zero (in which case the inverse should be 0) and the reasonable case. Here is an mwe. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linear_combination</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">int_plane_non_zero</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"n\">snd</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">int_plane_non_zero</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">r.1</span> <span class=\"bp\">*</span> <span class=\"n\">s.2</span> <span class=\"bp\">=</span> <span class=\"n\">s.1</span> <span class=\"bp\">*</span> <span class=\"n\">r.2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">S_def</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">int_plane_non_zero</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">S</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">r.1</span> <span class=\"bp\">*</span> <span class=\"n\">s.2</span> <span class=\"bp\">=</span> <span class=\"n\">s.1</span> <span class=\"bp\">*</span> <span class=\"n\">r.2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">S_refl</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">S_def</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">S_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">hrs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">S_def</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hrs.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">S_trans</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">hrs</span> <span class=\"n\">hst</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">S_def</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_right_inj'</span> <span class=\"o\">(</span><span class=\"n\">s.non_zero</span><span class=\"o\">),</span>\n  <span class=\"n\">linear_combination</span> <span class=\"n\">t.snd</span> <span class=\"bp\">*</span> <span class=\"n\">hrs</span> <span class=\"bp\">+</span> <span class=\"n\">r.snd</span> <span class=\"bp\">*</span> <span class=\"n\">hst</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">S_equiv</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">S_refl</span><span class=\"o\">,</span> <span class=\"n\">S_symm</span><span class=\"o\">,</span> <span class=\"n\">S_trans</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">int_plane_non_zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">S_equiv</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">myrat</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">namespace</span> <span class=\"bp\">«</span><span class=\"n\">myrat</span><span class=\"bp\">»</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">equiv_def</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">int_plane_non_zero</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">r</span> <span class=\"bp\">≈</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">r.1</span> <span class=\"bp\">*</span> <span class=\"n\">s.2</span> <span class=\"bp\">=</span> <span class=\"n\">s.1</span> <span class=\"bp\">*</span> <span class=\"n\">r.2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">myrat</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span><span class=\"bp\">⟧</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"n\">myrat</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"bp\">«</span><span class=\"n\">myrat</span><span class=\"bp\">»</span>\n</code></pre></div>",
        "id": 286406144,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1655409900
    },
    {
        "content": "<p>You didn't provide a <code>has_zero</code> instance, so it isn't a good start to do this case distinction.</p>",
        "id": 286406870,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655410218
    },
    {
        "content": "<p>Fixed.</p>",
        "id": 286407154,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1655410360
    },
    {
        "content": "<p>Maybe add </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">myrat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">⟦</span><span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">int_plane_non_zero</span><span class=\"o\">)</span><span class=\"bp\">⟧</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"n\">myrat</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">int_plane_non_zero</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">myrat</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">⟦</span><span class=\"o\">⟨</span><span class=\"n\">x.2</span><span class=\"o\">,</span> <span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span><span class=\"bp\">⟧</span> <span class=\"o\">:</span> <span class=\"n\">myrat</span><span class=\"o\">))</span> <span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 286407166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655410367
    },
    {
        "content": "<p>Of course insisting on the non-zero condition in <code>int_plane_nonzero</code> is a footgun, especially since you plan to define the inverse of zero in <code>myrat</code> anyway.</p>",
        "id": 286407294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655410438
    },
    {
        "content": "<p>And the missing proof would start with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">n'</span><span class=\"o\">,</span> <span class=\"n\">d'</span><span class=\"o\">,</span> <span class=\"n\">hd'</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">d'</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">),</span>\n<span class=\"n\">dsimp</span><span class=\"o\">,</span>\n<span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 286407658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655410640
    },
    {
        "content": "<p>Thank you. What definition would you suggest instead for avoiding the non-zero condition?</p>",
        "id": 286407841,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1655410735
    },
    {
        "content": "<p>Leaving out this condition I guess.</p>",
        "id": 286408099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655410847
    },
    {
        "content": "<p>Except that everybody would be equivalent to (0, 0)...</p>",
        "id": 286408400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655410998
    },
    {
        "content": "<p>So I should go to bed instead.</p>",
        "id": 286408411,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655411005
    },
    {
        "content": "<p>Have fun!</p>",
        "id": 286408430,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655411016
    }
]