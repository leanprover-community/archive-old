[
    {
        "content": "<p>In the Lean Tutorial  (<a href=\"https://github.com/leanprover-community/tutorials\">https://github.com/leanprover-community/tutorials</a>) problem <a href=\"https://github.com/leanprover-community/mathlib/issues/0011\">#0011</a>,  I was unable to prove that <code>(a b : ℝ) (ha : 0 ≤ a) (hb : 0 ≤ b) : 0 ≤ a + b</code> without using the transitive property of <code>≤</code>. Am I missing something?</p>\n<p>If there isn't another way that I simply failed to see, then in my opinion, the user should either be explicitly given the transitive property as something to <code>apply</code> or be told that it is valid to chain expressions together with <code>≤</code> as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">expr1</span> <span class=\"bp\">≤</span> <span class=\"n\">expr2</span> <span class=\"o\">:</span> <span class=\"n\">proof12</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">expr3</span> <span class=\"o\">:</span> <span class=\"n\">proof23</span>\n</code></pre></div>\n<p>to get a final inequality <code>expr1 ≤ expr3</code>. Does anyone have thoughts?</p>",
        "id": 223026897,
        "sender_full_name": "Miles",
        "timestamp": 1610863637
    },
    {
        "content": "<p>I don't think it says anywhere that you shouldn't use transitivity</p>",
        "id": 223026943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610863740
    },
    {
        "content": "<p>Yes, but for newcomers I think it would be helpful to say explicitly that <code>calc ...</code> can be used in that way (thus far it had only been used for a equality or single inequality. Just a suggestion</p>",
        "id": 223027008,
        "sender_full_name": "Miles",
        "timestamp": 1610863863
    },
    {
        "content": "<p>AFAICT it is already stated in the docs of <code>calc</code> mode <a href=\"https://leanprover-community.github.io/extras/calc.html\">https://leanprover-community.github.io/extras/calc.html</a></p>",
        "id": 223027079,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610864002
    },
    {
        "content": "<p>Ah, thank you, that's good to know. I had not read that far into the docs before starting the tutorial.</p>",
        "id": 223027153,
        "sender_full_name": "Miles",
        "timestamp": 1610864133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373999\">@Miles</span> , I'd like to understand what you understood here. Chain equalities and inequalities is the only purpose of <code>calc</code>. What did you think <code>calc</code> was doing? I'm asking because I'll resume teaching using this material in two weeks.</p>",
        "id": 223034540,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610876480
    },
    {
        "content": "<p>For context, I was coming to this tutorial from the natural number game, where it seems nothing could be taken for granted. I had proved that <code>a ≤ a + b</code> (and <code>ha</code> tells us that <code>0 ≤ a</code>), but I did not believe that we had proven transitivity of <code>≤</code>. Transitivity of equality is essentially given to us by the <code>rw</code> tactic, so chain equality of <code>calc</code> (which was explicitly demonstrated in file 01, line 97) seems like just a simplification of multiple uses of <code>rw</code>. Since we hadn't proven or been told anywhere that <code>≤</code> is transitive, I didn't think that was a fact we could assume that <code>calc</code> would do. It would have helped me to be told explicitly in the comments that <code>calc</code> can have more than one <code>≤</code> in its chain and remain valid (i.e. that <code>≤</code> is transitive). I hope that helps clarify my thinking. I'm happy to share more if it doesn't. Thanks</p>",
        "id": 223052184,
        "sender_full_name": "Miles",
        "timestamp": 1610902259
    }
]