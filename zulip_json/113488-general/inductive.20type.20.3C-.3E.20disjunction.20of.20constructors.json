[
    {
        "content": "<p>Let's say I have a type family like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">typed</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">val</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">val</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">typed</span> <span class=\"n\">fn2.zero</span> <span class=\"n\">val.nil</span> <span class=\"n\">val.nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">typed</span> <span class=\"n\">fn2.succ</span> <span class=\"n\">val.nat</span> <span class=\"n\">val.nat</span>\n<span class=\"bp\">....</span>\n</code></pre></div>\n\n<p>There's only the one constructor that has fn2.zero in the first argument position. I'm trying to prove <code>decidable (typed fn2.zero a b)</code>. I feel like the easiest thing is to convert this to <code>decidable ((a = val.nil) /\\ (b = val.nat))</code>. Is there a way to do that? To convert an inductive type into an \"or\" over all its constructors?</p>",
        "id": 212146066,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601687895
    },
    {
        "content": "<p>(I could do case splits as well, of course, but the more complex the constructors get, the harder it is to just split on everything)</p>",
        "id": 212146075,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601687953
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#mk_iff_of_inductive_prop\">https://leanprover-community.github.io/mathlib_docs/commands.html#mk_iff_of_inductive_prop</a></p>",
        "id": 212146889,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601689402
    },
    {
        "content": "<p>BTW, does <code>@[derive decidable]</code> work?</p>",
        "id": 212146948,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601689476
    },
    {
        "content": "<p>no</p>",
        "id": 212149558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601693706
    },
    {
        "content": "<p>Can anyone give an example of how to use <code>mk_iff_of_inductive_prop</code>?</p>",
        "id": 212174211,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601734284
    },
    {
        "content": "<p>I think I got it: <code>run_cmd tactic.mk_iff_of_inductive_prop `typed `typed_iff</code></p>",
        "id": 212174331,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601734502
    },
    {
        "content": "<p>Or you can do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mk_iff_of_inductive_prop</span> <span class=\"n\">typed</span> <span class=\"n\">typed_iff</span>\n</code></pre></div>\n\n<p>as a declaration</p>",
        "id": 212174948,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601735421
    },
    {
        "content": "<p>I think it would fit in better as an attribute though</p>",
        "id": 212174953,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601735442
    },
    {
        "content": "<p>aye. Thanks!</p>",
        "id": 212175259,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601735936
    }
]