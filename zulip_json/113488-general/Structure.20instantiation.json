[
    {
        "content": "<p>I had always assumed that for a structure with a single field, writing <code>⟨value⟩</code> is exactly equivalent to writing <code>{ field := value }</code>. However, this seems not to be the case:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">baz</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Works</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">baz</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized</span>\n<span class=\"cm\">  ⁇</span>\n<span class=\"cm\">inferred</span>\n<span class=\"cm\">  x</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">baz</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>Is this intended behavior or a bug?</p>",
        "id": 202666074,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1593681693
    },
    {
        "content": "<p>what is the type of the constructor?</p>",
        "id": 202666171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593681764
    },
    {
        "content": "<p>I'm not sure what you mean</p>",
        "id": 202666222,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1593681804
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">baz</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"c1\">-- constructor baz.mk : Π [_inst_1 : foo], true → baz</span>\n</code></pre></div>",
        "id": 202666237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593681822
    },
    {
        "content": "<p>The anonymous constructor is the same as <code>bas.mk trivial</code></p>",
        "id": 202666254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593681838
    },
    {
        "content": "<p>so maybe the better question is why the structure literal version doesn't give an error</p>",
        "id": 202666355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593681897
    },
    {
        "content": "<p>If this was a regular function application, the error would be expected (although this synthesized vs unified instance error is notorious for being useless and obstructionist)</p>",
        "id": 202666420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593681959
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> made a change affecting this error in a recent version</p>",
        "id": 202666495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593681999
    },
    {
        "content": "<p>I guess I'm being stupid, because I don't see what's wrong with either of the versions. Why is an error expected?</p>",
        "id": 202666562,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1593682064
    },
    {
        "content": "<p>The error message has been unchanged since 3.2.0.</p>",
        "id": 202666651,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593682118
    },
    {
        "content": "<p>When you use <code>[foo]</code>, lean will use typeclass inference to infer the value of <code>foo</code> you want. But in this case you have also supplied a value for the <code>foo</code> argument manually in the statement using <code>@baz x</code>, and this doesn't match what typeclass inference finds (nothing in this case)</p>",
        "id": 202666680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593682143
    },
    {
        "content": "<p>Aha, I thought using <code>@</code> completely disables typeclass resolution.</p>",
        "id": 202666998,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1593682381
    },
    {
        "content": "<p>It does, at <code>@baz</code>, but not at <code>baz.mk</code> where you used the anonymous constructor</p>",
        "id": 202667029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593682409
    },
    {
        "content": "<p>Oh, now I get it.</p>",
        "id": 202667046,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1593682424
    },
    {
        "content": "<p>If you use <code>@baz.mk x trivial</code> instead it should work</p>",
        "id": 202667048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593682425
    },
    {
        "content": "<p>I think the reason the error exists instead of doing the obvious thing and going with the version found by unification is that it is an elaboration order problem; typeclass inference happens before unification is complete, and so lean may have already committed to the version that typeclass inference found and then later finds out that this doesn't match with something else</p>",
        "id": 202667058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593682438
    },
    {
        "content": "<p>Okay, but does that explain why <code>⟨⟩</code> vs. <code>{}</code> makes a difference?</p>",
        "id": 202667301,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1593682626
    },
    {
        "content": "<p>Structure literals are a pretty complicated part of the elaborator, so I'm not particularly surprised that the order is different</p>",
        "id": 202667421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593682691
    },
    {
        "content": "<p>If I had to guess, I would say that it first gets the expected type to find out what structure is needed, and unifies with the constructor in order to get all the arguments</p>",
        "id": 202667523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593682794
    },
    {
        "content": "<p>Fair enough, thank you for looking into it</p>",
        "id": 202667952,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1593683123
    }
]