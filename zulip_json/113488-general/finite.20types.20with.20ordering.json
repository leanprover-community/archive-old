[
    {
        "content": "<p>In a couple of my projects I've found the need for a typeclass for finite types which either support a decidable_linear_order, or equivalently, have decidable_eq and a universe list (not just a universe finset). The trouble with using <code>[fintype a] [decidable_linear_order a]</code> itself is that it rules out lots of core types like <code>unit</code> which don't have <code>decidable_linear_order</code> unless I do it myself. Another option I found which works pretty well is <code>[fintype a] [encodable a]</code> which has greater coverage but seems somewhat roundabout and perhaps an abuse of encodable.</p>\n<p>In fact, before I found mathlib I had defined my own <code>fintype</code> for these purposes which used a nodup universal list, but it's a lot of unnecessary duplication of work.</p>\n<p>I guess my question is, what approach would people recommend?</p>",
        "id": 163495535,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555440214
    },
    {
        "content": "<p>I would PR an instance of <code>decidable_linear_order</code> for <code>unit</code> and the other types for which you think it should exist.</p>",
        "id": 163496326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555440777
    },
    {
        "content": "<p>Hmm, yeah, I'm not sure why I didn't consider that... it's probably the simplest way to go.</p>",
        "id": 163496531,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555440919
    },
    {
        "content": "<p>I also did <a href=\"https://github.com/NeilStrickland/lean_lib/blob/master/src/data/enumeration.lean\" target=\"_blank\" title=\"https://github.com/NeilStrickland/lean_lib/blob/master/src/data/enumeration.lean\"> a version of this</a> (with a typeclass called <code>enumeration</code>).  Some version or other should be in mathlib.  I could make a PR of mine if people thought that would be useful.  I am not sure whether we need to worry about diamonds, though.  We would want to have an instance converting <code>enumeration</code> to <code>fintype</code>, and instances deriving  numerations and fintypes on <code>α × β</code> from those on <code>α</code> and <code> β</code>.  That gives two ways of getting from <code>enumeration α</code> and <code>enumeration β</code> to <code>fintype (α × β)</code>, but the target is a subsingleton so perhaps it does not matter.</p>",
        "id": 163496612,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1555440978
    },
    {
        "content": "<p>That would be cool. It's also possible to implement a derive macro for <code>fintype</code> and/or <code>enumeration</code> so something like <code>@[derive enumeration] inductive state | A | B</code> works. (I had this working with my custom <code>fintype</code>which was convenient for readable finite automata states.)</p>",
        "id": 163497618,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555441695
    },
    {
        "content": "<blockquote>\n<p>That gives two ways of getting from <code>enumeration α</code> and <code>enumeration β</code> to <code>fintype (α × β)</code>, but the target is a subsingleton so perhaps it does not matter.</p>\n</blockquote>\n<p>Sadly, this does matter, currently. The standard solution seems to be to make <code>enumeration</code> redundant by adding the <code>fintype</code> instance into it (i.e. by extending <code>fintype</code>). You can provide a constructor which doesn't need the <code>fintype</code> instance, but in this way you can make sure that the product will have the correct <code>fintype</code> instance.</p>",
        "id": 163497782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555441830
    }
]