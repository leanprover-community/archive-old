[
    {
        "content": "<p>It seems to me that they both model the same mathematical concept. Do we need both of them?</p>",
        "id": 191775652,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585154429
    },
    {
        "content": "<p><code>pequiv</code>s have better definitional equality at the cost of bad codomains of <code>to_fun</code> and <code>inv_fun</code>.</p>",
        "id": 191775790,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585154503
    },
    {
        "content": "<p><code>pequiv</code>s also have better equality. I think, though I may be wrong, that equality of <code>local_equiv</code> depends on the out of domain behaviour. There's redundant information in a local equiv, which mucks up equality.</p>",
        "id": 191783476,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585157629
    },
    {
        "content": "<p>whatever is \"out of domain behaviour\"?</p>",
        "id": 191785305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585158301
    },
    {
        "content": "<p>An example is how <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>0</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0^{-1}=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>",
        "id": 191785398,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585158338
    },
    {
        "content": "<p><code>local_equiv</code> is a partial function, but it's implemented as a total function that returns junk outside of the domain of the partial function.</p>",
        "id": 191785673,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585158424
    },
    {
        "content": "<p>I think the answer is: try to port manifolds to <code>pequiv</code> or something else that has the correct equality and see if you can do it without everything falling over.</p>",
        "id": 191786125,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585158612
    },
    {
        "content": "<p>If you can, it will be great.</p>",
        "id": 191786134,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585158620
    },
    {
        "content": "<p><code>pequiv</code> won't work, e.g., in the inverse function theorem because I want <code>(h.to_local_homeomorph f).to_fun = f</code> to be defeq. This way it's much easier to prove theorems about <code>local_homeomorph</code>s and apply to the original function. Probably the same is the case in many places in <code>manifold</code>s.</p>",
        "id": 191789211,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585160034
    },
    {
        "content": "<p>Probably we should mention each equivalence in the docstring of another and prove that the quotient of <code>local_equiv</code> by <code>eq_on_source</code> is the same as <code>pequiv</code>.</p>",
        "id": 191789444,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585160143
    },
    {
        "content": "<p>that's not true either, unfortunately, because of empty types</p>",
        "id": 191789521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585160177
    },
    {
        "content": "<p>it's not always possible to add \"junk\" to complete the function</p>",
        "id": 191789569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585160211
    },
    {
        "content": "<p>OK, it's the same provided <code>[nonempty α] [nonempty β]</code></p>",
        "id": 191789642,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585160249
    },
    {
        "content": "<p>I think you can get a pequiv to invert to the original function, but you have to supply a proof that it is total</p>",
        "id": 191789922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585160393
    },
    {
        "content": "<p>When you are working with a pequiv, you should never talk about out of range values, and as long as you are in range it should be defeq to the original function <code>f</code></p>",
        "id": 191790081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585160464
    },
    {
        "content": "<p>Another difficulty with calculus and <code>pequiv</code>: I can't say that the forward/inverse function is differentiable because it has a bad codomain.</p>",
        "id": 191791901,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585161256
    },
    {
        "content": "<p>what do you mean? I thought we had support for differentiating partial functions</p>",
        "id": 191791989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585161300
    },
    {
        "content": "<p>Do we?</p>",
        "id": 191792165,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585161374
    },
    {
        "content": "<p>ah, we had a big discussion about this when it was getting set up. Looks like the core definitions all assume <code>f</code> itself is total</p>",
        "id": 191792317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585161450
    },
    {
        "content": "<p>There are some useful filters for partial functions but they weren't hooked up to <code>deriv</code></p>",
        "id": 191792401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585161479
    },
    {
        "content": "<p>I guess the nearest approximation is to say that a <code>pequiv</code> is differentiable if it extends to a function that is differentiable on the subset</p>",
        "id": 191792516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585161526
    }
]