[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- `α ≃ β` is the type of functions from `α → β` with a two-sided inverse. -/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>    <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_fun</span>   <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">left_inv</span>  <span class=\"o\">:</span> <span class=\"n\">left_inverse</span> <span class=\"n\">inv_fun</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">right_inverse</span> <span class=\"n\">inv_fun</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Why was it decided to use <code>left_inverse</code> and <code>right_inverse</code>, rather than the other possibilities <code> inv_fun \\circ to_fun = id</code> or <code>\\forall x, inv_fun (to_fun x) = x</code>? Both of my suggestions seem more natural to me.</p>",
        "id": 173785927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566388121
    },
    {
        "content": "<p>The first thing you'd do when defining an equiv using your definition is apply <code>funext</code>. This definition saves you that trouble.</p>",
        "id": 173786586,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566388769
    },
    {
        "content": "<p>I thought I was offering both a pre-funext and a post-funext suggestion?</p>",
        "id": 173786679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566388825
    },
    {
        "content": "<p>the second one is defeq to the existing definition</p>",
        "id": 173786719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566388878
    },
    {
        "content": "<p>I guess the reasoning is, if you have a definition for something why not use it when it's obviously applicable</p>",
        "id": 173786757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566388910
    },
    {
        "content": "<p>If you don't think that <code>left_inverse</code> is appropriate here, when would it ever be appropriate?</p>",
        "id": 173786823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566388945
    },
    {
        "content": "<p>The \"pre-funext\" vs \"post-funext\" dilemma is unfortunately unfixable. In my experience, you will always want both, depending on what you are proving.</p>",
        "id": 173786892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566389007
    },
    {
        "content": "<blockquote>\n<p>the second one is defeq to the existing definition</p>\n</blockquote>\n<p>Right, but it's less obfuscated!</p>",
        "id": 173786985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566389098
    },
    {
        "content": "<blockquote>\n<p>If you don't think that <code>left_inverse</code> is appropriate here, when would it ever be appropriate?</p>\n</blockquote>\n<p>I don't think I've ever used it...(and that's not only because I can never remember whether it says fg=id or gf=id)</p>",
        "id": 173787016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566389147
    },
    {
        "content": "<p>that's actually a totally reasonable response too. I'm not sure I would have ever defined <code>left_inverse</code> and <code>right_inverse</code>; they aren't abbreviating enough to be worth it, plus they are easily confused and differ only in argument order</p>",
        "id": 173787161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566389251
    },
    {
        "content": "<p>So this \"left\" and \"right\" stuff comes up sometimes, and I can never remember which way round things are. If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a left <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module then that means <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> acts on the left, so <code>r \\bub m</code>. This one I remember because I have to in my day job. <code>left_distrib</code> I have no idea what this means, I just use <code>mul_add</code> or <code>add_mul</code> as appropriate, because I know what these mean. <code>left_inverse</code> I have no idea what this means, but it seems to be actually longer than its definition, whatever the definition is. Is there some rule of thumb? Left associative I think I understand -- that means that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>b</mi><mi>c</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mi>b</mi><mo stretchy=\"false\">)</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">abc=(ab)c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mord mathdefault\">c</span></span></span></span>, right? That is maybe a more sensible use of <code>left</code>?</p>",
        "id": 173787835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566389854
    },
    {
        "content": "<p>left distrib is the same as left assoc - a * (b + c) = ...</p>",
        "id": 173788198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566390154
    },
    {
        "content": "<p>you put a thing on the left and distribute it</p>",
        "id": 173788320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566390254
    },
    {
        "content": "<p>as for left inverse, your guess is as good as mine. Blame the category theorists</p>",
        "id": 173788370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566390327
    },
    {
        "content": "<p>actually it probably originates in group theory</p>",
        "id": 173788465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566390370
    },
    {
        "content": "<p>category theorists like to call these things monos and sections</p>",
        "id": 173788493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566390401
    },
    {
        "content": "<p>which is confusing in a completely different way</p>",
        "id": 173788510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566390419
    },
    {
        "content": "<p>I just remember that the first law (<code>left_inv</code>) wants an argument which is the same type as the first function (<code>to_fun</code>) and then the same for the second law/function</p>",
        "id": 173790744,
        "sender_full_name": "Reid Barton",
        "timestamp": 1566392159
    },
    {
        "content": "<p>In <code>data.equiv.basic</code> there is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"err\">≃</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">e₂</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"err\">∘</span> <span class=\"n\">e₁</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">,</span> <span class=\"n\">e₁</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"err\">∘</span> <span class=\"n\">e₂</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">e₂</span><span class=\"bp\">.</span><span class=\"n\">left_inv</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">e₁</span><span class=\"bp\">.</span><span class=\"n\">left_inv</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">e₁</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>and the proofs would not typecheck if one used the more low-level definitions. Here it seems to work because there is a function called <code>function.left_inverse.comp</code></p>",
        "id": 173796971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566396373
    },
    {
        "content": "<p>There's an attribute <code>higher_order</code> if, from the post-ext formulation, you want to create the pre-ext formulation of a lemma</p>",
        "id": 173797665,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566396853
    },
    {
        "content": "<p>I remember left-inverse/right-inverse as follows: if you have <code>g ∘ f = id</code> in the equation <code>g</code> is on the left, so it is a left-inverse of <code>f</code>, and <code>f</code> is on the right, so it is a right-inverse of <code>g</code>.</p>",
        "id": 173799743,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1566398220
    },
    {
        "content": "<p>Yeah, this is just the sort of idea that I find really hard to remember like that. Because on other days I might figure that <code>g</code> is on the left, so <code>f</code> is a left-inverse of <code>g</code>.</p>",
        "id": 173799907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566398326
    },
    {
        "content": "<p>The only reason I can remember what a left <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module is (\"<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> goes on the left\" as opposed to \"the module goes on the left\") is that this comes up time and time again in the stuff I read.</p>",
        "id": 173799987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566398385
    },
    {
        "content": "<p>Makes sense. I get confused myself about most other left/right distinctions (in <code>left_distrib</code> and <code>add_le_add_left</code>, or the direction of <code>assoc</code>), just not this one.</p>",
        "id": 173800688,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1566398797
    },
    {
        "content": "<p>The corresponding fields in <code>iso</code> (which works fine for <code>Type</code>, as long as you don't mind a fixed universe) are called <code>hom_inv_id</code> and <code>inv_hom_id</code>, which are a little easier to remember.</p>",
        "id": 173834834,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566424002
    },
    {
        "content": "<p>(Except that they are actually called <code>hom_inv_id'</code> and <code>inv_hom_id'</code>, because they have <code>auto_param</code>s which hopefully mean you don't even need to write them.)</p>",
        "id": 173834858,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566424042
    }
]