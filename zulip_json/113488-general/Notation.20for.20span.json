[
    {
        "content": "<p>I would like to find some kind of notation for the span of a vector, really anything shorter than typing <code>span ℝ {v}</code> repeatedly.  Can someone help me troubleshoot?  I have tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`∙`</span><span class=\"o\">:</span><span class=\"mi\">1000</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">𝕜</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">submodule.span</span> <span class=\"bp\">𝕜</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`⟫</span><span class=\"n\">_</span><span class=\"bp\">`𝕜</span>  <span class=\"o\">:=</span> <span class=\"n\">submodule.span</span> <span class=\"bp\">𝕜</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∉</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hy'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∉</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which give the errors, respectively,</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to synthesize type class instance for\nE : Type u_1,\n_inst_1 : add_comm_group E,\n_inst_2 : module ℝ E,\nx y : E,\n𝕜 : Type ?,\nx : ?m_1\n⊢ semiring 𝕜\n</code></pre></div>\n<p>(among others) and</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>don't know how to synthesize placeholder\ncontext:\nE : Type u_1,\n_inst_1 : add_comm_group E,\n_inst_2 : module ℝ E,\nx y : E\n⊢ Type ?\n</code></pre></div>",
        "id": 220745595,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608679139
    },
    {
        "content": "<p>(please ignore the dubious mathematics, I just want it to typecheck!)</p>",
        "id": 220745993,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608679468
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`⟫</span><span class=\"n\">_</span><span class=\"bp\">`𝕜</span>  <span class=\"o\">:=</span> <span class=\"n\">submodule.span</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">set.insert</span> <span class=\"n\">x</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∉</span> <span class=\"bp\">⟪</span> <span class=\"n\">x</span> <span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 220746153,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608679606
    },
    {
        "content": "<p>I feel like there was a similar issue with similar notation around adjoining elements to fields in the work around Galois theory, but I don't remember how it was resolved.</p>",
        "id": 220746179,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608679634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> probably knows :)</p>",
        "id": 220746190,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608679644
    },
    {
        "content": "<p><code>example (x y : E) (hy : y ∉ submodule.span ℝ {x}) (hy' : y ≠ x) : y = 0 := sorry</code> doesn't work, no notation at all</p>",
        "id": 220746271,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608679709
    },
    {
        "content": "<p>It does seem to be because Lean doesn't pick up on <code>{x} : set E</code></p>",
        "id": 220746292,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608679737
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`⟫</span><span class=\"n\">_</span><span class=\"bp\">`𝕜</span>  <span class=\"o\">:=</span> <span class=\"n\">submodule.span</span> <span class=\"bp\">𝕜</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∉</span> <span class=\"bp\">⟪</span> <span class=\"n\">x</span> <span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 220746322,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608679783
    },
    {
        "content": "<p>Thank you!  What about the infix version, is there a way to get that working?</p>",
        "id": 220746626,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608679994
    },
    {
        "content": "<p>Oh,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">𝕜`∙`</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">submodule.span</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">set.insert</span> <span class=\"n\">x</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>seems to work.  Maybe it's just a peculiarity of the <code>infix</code> keyword that the other one didn't.</p>",
        "id": 220746886,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608680162
    },
    {
        "content": "<p>At least, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">𝕜`∙`</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">submodule.span</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">set.insert</span> <span class=\"n\">x</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∉</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hy'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there something I can do with priorities that will let me ditch the parentheses in <code>(ℝ ∙ x)</code>?</p>",
        "id": 220746997,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608680264
    },
    {
        "content": "<p>Maybe something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">𝕜`∙`</span><span class=\"o\">:</span><span class=\"mi\">1000</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">submodule.span</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">set.insert</span> <span class=\"n\">x</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∉</span> <span class=\"n\">ℝ</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 220747099,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608680360
    },
    {
        "content": "<p>Awesome, thanks!  One last question: is there a centralized list of unicode characters, so that I can find a dot character without any previous use in mathlib?</p>",
        "id": 220747181,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608680421
    },
    {
        "content": "<p>I think you have to look at the repo for the vscode extension.</p>",
        "id": 220747562,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608680716
    },
    {
        "content": "<p>(assuming you're using vscode <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 220747583,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608680740
    },
    {
        "content": "<p>If I remember correctly, that lists all the unicode symbols that are taken.  But how can I determine the complement? :)</p>",
        "id": 220747674,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608680799
    },
    {
        "content": "<p>that list is not all taken characters, in fact most of them are free</p>",
        "id": 220748311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608681320
    },
    {
        "content": "<p>a better list would be <code>#print notation</code> with all of mathlib imported</p>",
        "id": 220748333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608681347
    },
    {
        "content": "<p>alternatively, if you are looking specifically for unicode characters, you can just use the list in the repo and grep for uses of each of them in mathlib</p>",
        "id": 220748422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608681403
    },
    {
        "content": "<p>Here's what we used for adjoin:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Variation on `set.insert` to enable good notation for adjoining elements to fields.</span>\n<span class=\"sd\">Used to preferentially use `singleton` rather than `insert` when adjoining one element.</span>\n<span class=\"sd\">-/</span>\n<span class=\"c1\">--this definition of notation is courtesy of Kyle Miller on zulip</span>\n<span class=\"kd\">class</span> <span class=\"n\">insert</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[priority 1000]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">insert_empty</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">insert</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">singleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">set.has_singleton</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[priority 900]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">insert_nonempty</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">insert</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">set.insert</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`⟮`</span><span class=\"o\">:</span><span class=\"n\">std.prec.max_plus</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">insert.insert</span> <span class=\"n\">t</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"bp\">`⟯`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 220755399,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608689402
    },
    {
        "content": "<p>This made it so that K(x) was definitionally equal to <code>adjoin K {x}</code></p>",
        "id": 220755454,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608689442
    },
    {
        "content": "<p>and it allowed for adjoining multiple elements at once</p>",
        "id": 220755471,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608689476
    },
    {
        "content": "<p>Another way to do the original problem, adapting a trick from the code <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> posted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">𝕜`∙`</span><span class=\"o\">:</span><span class=\"mi\">1000</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">submodule.span</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">singleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">set.has_singleton</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∉</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hy'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 220766370,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608707984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> did your new notation for the span of a vector get merged into mathlib yet?</p>",
        "id": 222678819,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610598181
    },
    {
        "content": "<p>Yup, <a href=\"https://github.com/leanprover-community/mathlib/issues/5538\">#5538</a>.</p>",
        "id": 222678894,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610598260
    },
    {
        "content": "<p>Great! Thanks :)</p>",
        "id": 222678902,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610598281
    }
]