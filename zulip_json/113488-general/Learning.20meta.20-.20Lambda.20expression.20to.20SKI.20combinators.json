[
    {
        "content": "<p>I'm trying to learn how to reflect on expression. So I thought, I will try to implement <a href=\"https://en.wikipedia.org/wiki/Combinatory_logic#Completeness_of_the_S-K_basis\">conversion from lambda expressions to SKI basis</a>. I have managed to convert <code>expr</code> representing a lambda expression to a <code>expr</code> that uses only SKI combinators and does not contain any lambdas. (This assumes that dependent types are not used)</p>\n<p>Thus I have function <code>meta def to_SKI_basis : expr → expr</code>. However, I would like to have a function <code>meta def to_SKI_basis' {X : Type} (x : X) [reflected x] : X</code> which actually takes an expression of type <code>X</code> and produces another expression of type <code>X</code> that does not contain any lambdas or fail when dependent types are used.</p>\n<p>How do I achieve this? I should probably somehow use <code>tactic.infer_type</code>, but I'm unable to figure out how. I don't even understand what <code>tactic expr</code> really is. What is <code>interaction_monad</code> and <code>tactic_state</code>? Is there a tutorial how all this meta stuff works?</p>\n<p>Here is my current progress:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">expr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">K</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">→</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">→</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">II</span> <span class=\"o\">{</span><span class=\"n\">elab</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">expr.const</span> <span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">mk_simple_name</span> <span class=\"s2\">\"I\"</span><span class=\"o\">)</span> <span class=\"n\">list.nil</span><span class=\"o\">)</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">KK</span> <span class=\"o\">{</span><span class=\"n\">elab</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">expr.const</span> <span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">mk_simple_name</span> <span class=\"s2\">\"K\"</span><span class=\"o\">)</span> <span class=\"n\">list.nil</span><span class=\"o\">)</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">SS</span> <span class=\"o\">{</span><span class=\"n\">elab</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">expr.const</span> <span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">mk_simple_name</span> <span class=\"s2\">\"S\"</span><span class=\"o\">)</span> <span class=\"n\">list.nil</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">to_SKI_basis</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">to_SKI_basis</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_SKI_basis</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">var_type</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">body.has_var_idx</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n     <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">KK</span> <span class=\"o\">(</span><span class=\"n\">to_SKI_basis</span> <span class=\"n\">body</span><span class=\"o\">))</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">match</span> <span class=\"n\">body</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">II</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">SS</span> <span class=\"o\">(</span><span class=\"n\">to_SKI_basis</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">var_type</span> <span class=\"n\">f</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">to_SKI_basis</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">var_type</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">var_name'</span> <span class=\"n\">bi'</span> <span class=\"n\">var_type'</span> <span class=\"n\">body'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_SKI_basis</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">var_type</span> <span class=\"o\">((</span><span class=\"n\">to_SKI_basis</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">var_name'</span> <span class=\"n\">bi'</span> <span class=\"n\">var_type'</span> <span class=\"n\">body'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">lower_vars</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n      <span class=\"bp\">|</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"n\">e'</span>\n    <span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n\n<span class=\"c1\">--- Test</span>\n<span class=\"kd\">constants</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">to_SKI_basis</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_string</span>\n<span class=\"bp\">|</span> <span class=\"s2\">\"S (K (S I)) (S (K K) I)\"</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">to_SKI_basis'</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 212756516,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1602195815
    },
    {
        "content": "<p>It's not possible to make a function with that type <code>meta def to_SKI_basis' {X : Type} (x : X) [reflected x] : X</code> (unless you do the silly thing and return <code>x</code>). What you really want is a program that produces an expression that when handed to lean would typecheck at type <code>X</code></p>",
        "id": 212756889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602196068
    },
    {
        "content": "<p>And this is what <code>by</code> does</p>",
        "id": 212756895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602196074
    },
    {
        "content": "<p><code>by</code> is how you \"escape\" the tactic mode: if <code>tac : tactic unit</code> then <code>by tac : X</code>, where <code>tac</code> is responsible for producing an <code>expr</code> that would typecheck as an <code>X</code></p>",
        "id": 212757014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602196137
    },
    {
        "content": "<p>Here's how you could make and use a simple tactic wrapper around your function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">to_SKI_basis'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.exact</span> <span class=\"o\">(</span><span class=\"n\">to_SKI_basis</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">to_SKI_basis'</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212758131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602196972
    },
    {
        "content": "<p>It doesn't work though, because you have some bugs in the implementation</p>",
        "id": 212758156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602196999
    },
    {
        "content": "<p>Thanks a lot! It makes sense that it is not possible to write the function as I have originally thought. <br>\nNow, I should be able to fix <code>to_SKI_basis</code> so it works as intended when using <code>by</code>.</p>",
        "id": 212759903,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1602198119
    },
    {
        "content": "<p>Note that since now everything is in a tactic, you can consider putting the whole code inside the tactic monad. This has the advantage that you can use functions like <code>tactic.infer_type</code> to infer the types of subterms, or <code>tactic.mk_app</code> for e.g. applying <code>S</code> to two arguments and automatically figuring out the substitutions for <code>A X Y</code></p>",
        "id": 212760554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602198635
    },
    {
        "content": "<p>And the best place to learn the basics of tactic monad is <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">the tutorial on tactic writing</a>? Currently I don't really understand what you are suggesting.</p>",
        "id": 212762243,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1602199945
    },
    {
        "content": "<p>Here's your function converted into monadic style:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">to_SKI_basis</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">f'</span> <span class=\"bp\">←</span> <span class=\"n\">to_SKI_basis</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">x'</span> <span class=\"bp\">←</span> <span class=\"n\">to_SKI_basis</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">f'</span> <span class=\"n\">x'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">var_type</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">body.has_var_idx</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n    <span class=\"n\">body'</span> <span class=\"bp\">←</span> <span class=\"n\">to_SKI_basis</span> <span class=\"n\">body</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">KK</span> <span class=\"n\">body'</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">match</span> <span class=\"n\">body</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">II</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n        <span class=\"n\">f'</span> <span class=\"bp\">←</span> <span class=\"n\">to_SKI_basis</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">var_type</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n        <span class=\"n\">x'</span> <span class=\"bp\">←</span> <span class=\"n\">to_SKI_basis</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">var_type</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n        <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">SS</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"n\">x'</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">var_name'</span> <span class=\"n\">bi'</span> <span class=\"n\">var_type'</span> <span class=\"n\">body'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n        <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">to_SKI_basis</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">var_name'</span> <span class=\"n\">bi'</span> <span class=\"n\">var_type'</span> <span class=\"n\">body'</span><span class=\"o\">),</span>\n        <span class=\"n\">to_SKI_basis</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">var_type</span> <span class=\"o\">(</span><span class=\"n\">a.lower_vars</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n      <span class=\"bp\">|</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">e'</span>\n    <span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">to_SKI_basis'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">to_SKI_basis</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.exact</span> <span class=\"n\">e'</span>\n</code></pre></div>\n\n<p>Because tactic computations are stateful, you have to use bind or <code>do</code> notation here to call them in a well defined order, so you can't use pure function composition anymore. Other than that it is a mere syntactic transformation that doesn't change the behavior of the code at all.</p>\n<p>But now you can insert a call to <code>tactic.mk_app</code> in one of those sequences of instructions to create expressions using information from the typing context, query the types of terms and so on.</p>",
        "id": 212763950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602201520
    }
]