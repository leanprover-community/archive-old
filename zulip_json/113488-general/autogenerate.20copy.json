[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.copy/src\">src#add_monoid_hom.copy</a> is written by hand, and so are many other <code>copy</code>s. How hard would it be to write an attribute <code>@[copy]</code> that we can slap on defs and structures in order to auto-generate their <code>copy</code> constructor?</p>",
        "id": 274846111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646924356
    },
    {
        "content": "<p>What would it mean on <code>def</code>s?</p>",
        "id": 274847864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646925060
    },
    {
        "content": "<p>Aah, I guess that doesn't make sense. So let's just focus on <code>structure</code> (and <code>class</code>).</p>",
        "id": 274848716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646925440
    },
    {
        "content": "<p>Had this on my mind too!</p>",
        "id": 274849566,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646925796
    },
    {
        "content": "<p>The problem is with some structures which use <code>copy</code> to mean something else. Ex: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finpartition.copy\">docs#finpartition.copy</a>. Culprit: me.</p>",
        "id": 274849649,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646925833
    },
    {
        "content": "<p>I guess that should be <code>congr</code> instead of <code>copy</code>?</p>",
        "id": 274849800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646925888
    },
    {
        "content": "<p>Oh yeah maybe.</p>",
        "id": 274850429,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646926174
    },
    {
        "content": "<p>Could this one be autogenerated as well?</p>",
        "id": 274850463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646926187
    },
    {
        "content": "<p>I guess <code>fin.cast</code> is analogous to <code>finpartition.copy</code>?</p>",
        "id": 274850903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646926337
    },
    {
        "content": "<p>Can we think of other similar examples of things which are just definitionally nicer versions of <code>cast h</code>?</p>",
        "id": 274850993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646926372
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.cast\">docs#equiv.cast</a></p>",
        "id": 274858929,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1646929402
    },
    {
        "content": "<p>That's not a definitionally nicer version though, that's just a bundled <code>cast</code></p>",
        "id": 274860194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646929975
    },
    {
        "content": "<p>I'm talking about things where <code>foo h x = cast h x</code> propositionally but not definitionally, like <code>fin.cast</code> and <code>finpartition.cast</code></p>",
        "id": 274860262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646930003
    },
    {
        "content": "<p>Ah I see!</p>",
        "id": 274870013,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1646934166
    }
]