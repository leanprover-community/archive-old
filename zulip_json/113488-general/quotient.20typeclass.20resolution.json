[
    {
        "content": "<p>here is a working example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">coset</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">group_action</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fn</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fn</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">group_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"err\">●</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">group_action</span><span class=\"bp\">.</span><span class=\"n\">fn</span> <span class=\"c1\">-- \\ci</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">one_act</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"err\">●</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">group_action</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">G</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_act</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"err\">●</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"err\">●</span> <span class=\"n\">h</span> <span class=\"err\">●</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">group_action</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">act_act</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"err\">●</span> <span class=\"n\">h</span> <span class=\"err\">●</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"err\">●</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">group_action</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inv_act</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"err\">●</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"err\">●</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">act_act</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">stab</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"err\">●</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mem_stab_iff</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"err\">∈</span> <span class=\"n\">stab</span> <span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"err\">●</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">stab</span><span class=\"bp\">.</span><span class=\"n\">is_subgroup</span> <span class=\"o\">:</span> <span class=\"n\">is_subgroup</span> <span class=\"o\">(</span><span class=\"n\">stab</span> <span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g1</span> <span class=\"n\">g2</span> <span class=\"n\">hg1</span> <span class=\"n\">hg2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hg1</span> <span class=\"n\">hg2</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_act</span><span class=\"o\">,</span> <span class=\"n\">hg1</span><span class=\"o\">,</span> <span class=\"n\">hg2</span><span class=\"o\">],</span>\n  <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">inv_act</span> <span class=\"n\">hg</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">left_cosets</span> <span class=\"o\">(</span><span class=\"n\">stab</span> <span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">L</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 125182192,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523941507
    },
    {
        "content": "<p>working but not minimalized</p>",
        "id": 125182195,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523941517
    },
    {
        "content": "<p>the error is on the last line</p>",
        "id": 125182198,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523941524
    },
    {
        "content": "<p>I cannot use <code>quotient.induction_on</code> because apparently Lean doesn't know that <code>left_cosets (stab G X x)</code> is a quotient</p>",
        "id": 125182199,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523941551
    },
    {
        "content": "<p>error message:</p>\n<div class=\"codehilite\"><pre><span></span>[class_instances]  class-instance resolution trace\n[class_instances] (0) ?x_0 : setoid G := @left_rel ?x_1 ?x_2 ?x_3 ?x_4\n[class_instances] (1) ?x_2 : group G := _inst_1\n[class_instances] (1) ?x_4 : @is_subgroup G _inst_1 _inst_1 ?x_3 := @stab.is_subgroup ?x_5 ?x_6 ?x_7 ?x_8 ?x_9\n[class_instances] (2) ?x_6 : group G := _inst_1\n[class_instances] (2) ?x_8 : @group_action G _inst_1 ?x_7 := _inst_2\n[class_instances] trying next solution, current solution has metavars\n@left_rel G _inst_1 (@stab G _inst_1 X _inst_2 ?x_9) _\n[...]\n</pre></div>",
        "id": 125182246,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523941620
    },
    {
        "content": "<p>what is this supposed to mean</p>",
        "id": 125182252,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523941626
    },
    {
        "content": "<p>I think the <code>x</code> messed up everything</p>",
        "id": 125182316,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523941731
    },
    {
        "content": "<p>How do i solve this problem?</p>",
        "id": 125182318,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523941736
    },
    {
        "content": "<p><code>left_rel</code> is a bad instance, because it depends on <code>s</code> which is not in the output. I made it a <code>def</code> and used <code>local instance</code> for the proofs in that file. With this modification, you have to write</p>\n<div class=\"codehilite\"><pre><span></span>example (L : left_cosets (stab G X x)) : false :=\nby letI := left_rel (stab G X x); exact\nquotient.induction_on L _\n</pre></div>\n\n\n<p>but then it works</p>",
        "id": 125183528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523944314
    }
]