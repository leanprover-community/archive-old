[
    {
        "content": "<p>In interactive mode, <code>drec</code>, <code>cases_on</code>,... are generated at inductive declaration</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">myeq1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">myeq1</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">myeq1</span><span class=\"bp\">.</span><span class=\"n\">drec</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">myeq</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span>\n</pre></div>\n\n\n<p>However in tactic mode,  they are not!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">expr</span> <span class=\"n\">native</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n  <span class=\"n\">l</span> <span class=\"err\">←</span> <span class=\"n\">mk_fresh_name</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">add_inductive</span> <span class=\"s2\">&quot;myeq&quot;</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"mi\">1</span>\n    <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"s2\">&quot;α&quot;</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"err\">$</span> <span class=\"n\">pi</span> <span class=\"s2\">&quot;a&quot;</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"err\">$</span> <span class=\"n\">pi</span> <span class=\"s2\">&quot;a&quot;</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">sort</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span>\n   <span class=\"o\">[((</span><span class=\"s2\">&quot;myeq&quot;</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;refl&quot;</span><span class=\"o\">,</span>\n    <span class=\"n\">pi</span> <span class=\"s2\">&quot;α&quot;</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"err\">$</span> <span class=\"n\">pi</span> <span class=\"s2\">&quot;a&quot;</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"err\">$</span> <span class=\"n\">mk_app</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"s2\">&quot;myeq&quot;</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"o\">[</span><span class=\"n\">var</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">])</span>\n   <span class=\"o\">])</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">myeq</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">myeq</span><span class=\"bp\">.</span><span class=\"n\">drec</span> <span class=\"c\">/-</span><span class=\"cm\"> not found -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">myeq</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"c\">/-</span><span class=\"cm\"> not found -/</span>\n</pre></div>\n\n\n<p>How to generate them or call a tactic that does?</p>",
        "id": 171682415,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1564053849
    },
    {
        "content": "<p>There is a community lean tactic for this</p>",
        "id": 171684868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564056441
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/environment.lean#L91-L107\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/environment.lean#L91-L107\">https://github.com/leanprover-community/lean/blob/master/library/init/meta/environment.lean#L91-L107</a></p>",
        "id": 171685014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564056590
    },
    {
        "content": "<blockquote>\n<p>There is a community lean tactic for this</p>\n</blockquote>\n<p>should I install lean_community/lean master to access it?</p>",
        "id": 171687013,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1564058339
    },
    {
        "content": "<p>I think there are nightlies</p>",
        "id": 171687049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564058383
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-nightly/releases/tag/nightly-2019-07-15\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-nightly/releases/tag/nightly-2019-07-15\">https://github.com/leanprover-community/lean-nightly/releases/tag/nightly-2019-07-15</a></p>",
        "id": 171687164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564058461
    },
    {
        "content": "<p>The alternative for stock lean is to produce the necessary <code>inductive</code> command as a text expression and call a parser command to splice it into the file</p>",
        "id": 171687345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564058598
    },
    {
        "content": "<p>Thanks</p>",
        "id": 171687967,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1564059074
    },
    {
        "content": "<p>Is mathlib supposed to be built on top of lean 3.4.2 or lean-community/lean master?</p>",
        "id": 171688283,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1564059327
    },
    {
        "content": "<p>both</p>",
        "id": 171688303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564059344
    },
    {
        "content": "<p>we haven't made any backwards incompatible changes yet</p>",
        "id": 171688374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564059381
    },
    {
        "content": "<blockquote>\n<p>both</p>\n</blockquote>\n<p>so noone used <code>add_ginductive</code> so far?</p>",
        "id": 171688395,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1564059409
    },
    {
        "content": "<p>not in any mathlib tactics</p>",
        "id": 171688445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564059436
    },
    {
        "content": "<p>ok...</p>",
        "id": 171688460,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1564059453
    },
    {
        "content": "<p>Right now most people still use 3.4.2. We want to make it worth switching</p>",
        "id": 171688480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564059477
    },
    {
        "content": "<p>OK... now this makes my community lean master crash...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">expr</span> <span class=\"n\">native</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n  <span class=\"n\">l</span> <span class=\"err\">←</span> <span class=\"n\">mk_fresh_name</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">params</span> <span class=\"o\">:=</span> <span class=\"o\">[(</span><span class=\"n\">sort</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)],</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">pi</span> <span class=\"s2\">&quot;a&quot;</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"err\">$</span> <span class=\"n\">pi</span> <span class=\"s2\">&quot;a&quot;</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">sort</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctorty</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">pi</span> <span class=\"s2\">&quot;a&quot;</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"err\">$</span> <span class=\"n\">mk_app</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">myeq</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"o\">[</span><span class=\"n\">var</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"k\">let</span> <span class=\"n\">inds</span> <span class=\"o\">:=</span> <span class=\"o\">[((</span><span class=\"bp\">`</span><span class=\"n\">myeq</span><span class=\"o\">,</span> <span class=\"n\">ty</span><span class=\"o\">),</span>\n    <span class=\"o\">[{</span><span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">intro_rule</span> <span class=\"bp\">.</span> <span class=\"n\">constr</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">ctorty</span><span class=\"o\">}])],</span>\n  <span class=\"n\">updateex_env</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">add_ginductive</span> <span class=\"kn\">options</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">params</span> <span class=\"n\">inds</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 171698559,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1564066554
    },
    {
        "content": "<p>My debug build says that <a href=\"https://github.com/leanprover-community/lean/blob/master/src/kernel/abstract.cpp#L33\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/src/kernel/abstract.cpp#L33\">this assert</a> is failing before it crashes.</p>",
        "id": 171707642,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1564073954
    },
    {
        "content": "<p>I reduced the crash to this,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">expr</span> <span class=\"n\">native</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">sort</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span>\n  <span class=\"n\">updateex_env</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">add_ginductive</span> <span class=\"kn\">options</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"n\">ty</span><span class=\"o\">]</span> <span class=\"o\">[((</span><span class=\"s2\">&quot;test&quot;</span><span class=\"o\">,</span> <span class=\"n\">ty</span><span class=\"o\">),</span> <span class=\"o\">[])]</span> <span class=\"n\">ff</span>\n</pre></div>\n\n\n<p>This goes through</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">expr</span> <span class=\"n\">native</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">sort</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span>\n  <span class=\"n\">updateex_env</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">add_ginductive</span> <span class=\"kn\">options</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">[((</span><span class=\"s2\">&quot;test&quot;</span><span class=\"o\">,</span> <span class=\"n\">ty</span><span class=\"o\">),</span> <span class=\"o\">[])]</span> <span class=\"n\">ff</span> <span class=\"c\">/-</span><span class=\"cm\"> removed parameter ty -/</span>\n</pre></div>\n\n\n<p>but I have this strange debug/warning/error looping in the output buffer:</p>\n<div class=\"codehilite\"><pre><span></span>cannot parse: foo bar\ncannot parse: bar foo bar\n</pre></div>",
        "id": 171757994,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1564131180
    },
    {
        "content": "<p>lol did someone leave some debug code in the build?</p>",
        "id": 171758615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564131810
    },
    {
        "content": "<p>Looks like the foo bar stuff is coming from <a href=\"https://github.com/leanprover-community/lean/blob/d31cc181ba8c9d022b3f5a933eb97e8d8d6d6e6d/src/library/vm/vm_environment.cpp#L142\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/d31cc181ba8c9d022b3f5a933eb97e8d8d6d6e6d/src/library/vm/vm_environment.cpp#L142\">here</a>.</p>",
        "id": 171782494,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1564154382
    },
    {
        "content": "<p>oh dear it was me</p>",
        "id": 171790478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564160885
    },
    {
        "content": "<p>there is a new nightly out at <a href=\"https://github.com/leanprover-community/lean-nightly/releases/tag/nightly-2019-07-26\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-nightly/releases/tag/nightly-2019-07-26\">https://github.com/leanprover-community/lean-nightly/releases/tag/nightly-2019-07-26</a> without the foo bar</p>",
        "id": 171806854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564172187
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Db3thHT8S6SXeHQrWtG9JPqa/Spider-Man-meme.jpeg\" target=\"_blank\" title=\"Spider-Man-meme.jpeg\">Spider-Man-meme.jpeg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Db3thHT8S6SXeHQrWtG9JPqa/Spider-Man-meme.jpeg\" target=\"_blank\" title=\"Spider-Man-meme.jpeg\"><img src=\"/user_uploads/3121/Db3thHT8S6SXeHQrWtG9JPqa/Spider-Man-meme.jpeg\"></a></div>",
        "id": 171807048,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1564172399
    }
]