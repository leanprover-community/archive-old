[
    {
        "content": "<p>Anyone have any small hints for the final level of advanced multiplication world that doesn't give away the full game? I'm at:<br>\ncase mynat.succ<br>\na b d : mynat,<br>\nhd : a ≠ 0 → a * b = a * d → b = d,<br>\nanz : a ≠ 0,<br>\nh : a * b = a * succ d<br>\n⊢ b = succ d</p>",
        "id": 189240758,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582827887
    },
    {
        "content": "<p>unfold the definition of a * succ d , then use the inductive hypothesis and left cancellation of addition</p>",
        "id": 189241263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582828185
    },
    {
        "content": "<p>So use induction a second time?</p>",
        "id": 189241705,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582828386
    },
    {
        "content": "<p>This doesn't look good. Isn't <code>hd</code> useless?</p>",
        "id": 189245422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582830325
    },
    {
        "content": "<p>We know a isn't zero, but we also know that ab isn't ad from h, so hd can never be used.</p>",
        "id": 189245451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582830345
    },
    {
        "content": "<p>I'm really sorry about this final level -- nobody can do it ;-)</p>",
        "id": 189245479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582830358
    },
    {
        "content": "<p>I usually ask students if they can prove it in maths rather than in Lean!</p>",
        "id": 189245550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582830378
    },
    {
        "content": "<p>No worries, it's nice to have a challenge! I definitely banged my head against the first level in advanced multiplication world for an hour before getting it - makes victory all the sweeter.</p>",
        "id": 189245589,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582830392
    },
    {
        "content": "<p>I've started trying to follow this proof on math stackexchange: <a href=\"https://math.stackexchange.com/a/3219757/616655\" target=\"_blank\" title=\"https://math.stackexchange.com/a/3219757/616655\">https://math.stackexchange.com/a/3219757/616655</a></p>",
        "id": 189245608,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582830406
    },
    {
        "content": "<p>but then I get to \"To say that m≠0 means that m=z+1 for some z\" and I don't know how to introduce a new variable z</p>",
        "id": 189245656,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582830434
    },
    {
        "content": "<p>You can do <code>cases m with z</code> to do that.</p>",
        "id": 189245730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582830466
    },
    {
        "content": "<p>Ahhhh yeah that would do it. Also before that... I have a * b \\ne 0 and a \\ne 0 but don't think I have a theorem to get to b \\ne 0</p>",
        "id": 189245871,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582830546
    },
    {
        "content": "<p>I suppose I could look up how to introduce &amp; prove new theorems mid-proof</p>",
        "id": 189245921,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582830580
    },
    {
        "content": "<p>But I am concerned that the state that your game is problematic because you will need induction at some point and your <code>hd</code> is useless. I think your <code>hd</code> needs to be beefed up to have a \"for all b\" in . I don't think you can finish from here, whatever a 2 point answer on stackexchange says</p>",
        "id": 189246270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582830768
    },
    {
        "content": "<p>Well I did try a double induction strategy at one point and after much finangling  managed to change a<em>b = a</em>c =&gt; b = c to b<em>a = c</em>a =&gt; b = c lol. But perhaps I will try the induction again from the top without adding a \"revert ha\" at the beginning</p>",
        "id": 189246549,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582830961
    },
    {
        "content": "<p>huh... actually that probably would have worked because then I could just use mul_comm and the inductive hypothesis? I will try this!</p>",
        "id": 189246751,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582831090
    },
    {
        "content": "<p>All right I throw in the towel... does anyone have a proof of this? Would love to go over it line by line.</p>",
        "id": 189260247,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582839660
    },
    {
        "content": "<p>Credit : I copied this (with some light edits) from the solutions, but I won't link to them unless you ask for it as I don't want to spoil any fun ;):</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">revert</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_succ</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">eq_comm</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_left_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"c1\">-- c = d -&gt; succ c = succ d</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_succ</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_succ</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">hb</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div>",
        "id": 189261251,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582840363
    },
    {
        "content": "<p>lol what is this revert b thing</p>",
        "id": 189262876,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582841509
    },
    {
        "content": "<p>revert is the opposite of intro, it turns a statement with given variable into a forall</p>",
        "id": 189263270,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582841762
    },
    {
        "content": "<p>I think it is listed under the tactics box on the left in natural number game.</p>",
        "id": 189263342,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582841812
    },
    {
        "content": "<p>Oh sure, I've just never seen it used in this specific way... still going through the proof</p>",
        "id": 189263380,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582841835
    },
    {
        "content": "<p>Huh I was actually very close, except for the use of \"revert b\" (which effect I still don't understand on the proof - makes the inductive hypothesis nicer?) and the use of case instead of a second induction</p>",
        "id": 189263632,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582842006
    },
    {
        "content": "<p>Okay yeah this is very strange. Don't know why \"revert b\" has the effect that it does on the inductive hypothesis, can anyone explain? Thanks for the proof btw!</p>",
        "id": 189264661,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582842707
    },
    {
        "content": "<p>Without revert, b is fixed in the whole inductive proof.</p>",
        "id": 189264746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582842770
    },
    {
        "content": "<p>(Note I don't even know what you want to prove, I can only tell what revert is doing to inductive proofs).</p>",
        "id": 189264776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582842801
    },
    {
        "content": "<p>so it looks like without \"revert b\", \"cases b with e\" rewrites our inductive hypothesis to \"hd : a * succ e = a * d → succ e = d\"<br>\nwhereas<em>with</em> \"revert b\" it's rewritten to \"∀ (b : mynat), a * b = a * d → b = d\" which we can actually use to solve the proof</p>",
        "id": 189264996,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582842969
    },
    {
        "content": "<p>trying to wrap my head around when I'd want to put a universally-quantified variable in the inductive hypothesis vs not</p>",
        "id": 189265153,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582843084
    },
    {
        "content": "<p>Can someone post the goal of this proof?</p>",
        "id": 189265228,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582843166
    },
    {
        "content": "<p>theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=</p>",
        "id": 189265244,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582843180
    },
    {
        "content": "<blockquote>\n<p>so it looks like without \"revert b\", \"cases b with e\" </p>\n</blockquote>\n<p>This is a typo, right? If you revert b you cannot case on b.</p>",
        "id": 189265403,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582843321
    },
    {
        "content": "<p>This cases is nested within an induction, here's my (horribly formatted) proof:<br>\nrevert b,<br>\ninduction c with d hd,</p>\n<p>intros b h,<br>\nrw mul_zero at h,<br>\nrw mul_eq_zero_iff at h,<br>\ncases h with p q,<br>\nexfalso,<br>\napply ha,<br>\nexact p,<br>\nexact q,</p>\n<p>intros b h,<br>\ncases b with e,<br>\nrw mul_zero at h,<br>\nsymmetry at h,<br>\nexfalso,<br>\napply ha,<br>\nrw mul_eq_zero_iff at h,<br>\ncases h with p q,<br>\nexact p,<br>\nexfalso,<br>\napply succ_ne_zero d,<br>\nexact q,<br>\nrw succ_eq_succ_iff,<br>\napply hd,<br>\nrw mul_succ a e at h,<br>\nrw mul_succ a d at h,<br>\nrw add_right_cancel_iff at h,<br>\nexact h,</p>",
        "id": 189265523,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582843389
    },
    {
        "content": "<p>The first two lines of the proof are <code>revert b, induction c with d hd,</code>. Here it should be very easy to compare the induction hypothesis you get with or without the revert. Clearly the one you get after revert is stronger.</p>",
        "id": 189265525,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582843391
    },
    {
        "content": "<p>I guess what I want to get at is what exactly is this doing and in what circumstances would I want to do this (reverting a variable declaration is a new technique in this natural numbers game tutorial)</p>",
        "id": 189265665,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1582843496
    },
    {
        "content": "<p>It's just a matter of whether you've fixing a value for <code>b</code> before you do the induction or not.</p>",
        "id": 189265726,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582843546
    },
    {
        "content": "<p>By the way, I don't know if this is explained in the natural number game, but the recommended way of doing those first two lines is <code>induction c with d hd generalizing b,</code> which does the <code>intro</code> afterwards (but this may be too much magic if you already have difficulties here).</p>",
        "id": 189265749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582843562
    },
    {
        "content": "<p><code>intro b</code> effectively says \"let b be some particular value\", and <code>revert b</code> says: actually, let's make life harder, by proving this for all values of <code>b</code></p>",
        "id": 189265803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582843593
    },
    {
        "content": "<p>I don't think <code>generalizing</code> works in natural number game?</p>",
        "id": 189265865,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582843658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264607\">Andrew Helwer</span> <a href=\"#narrow/stream/113488-general/topic/Advanced.20multiplication.20world.20final.20level/near/189265153\" title=\"#narrow/stream/113488-general/topic/Advanced.20multiplication.20world.20final.20level/near/189265153\">said</a>:</p>\n<blockquote>\n<p>trying to wrap my head around when I'd want to put a universally-quantified variable in the inductive hypothesis vs not</p>\n</blockquote>\n<p>it depends! sometimes proving a more general statement is easier. in fact, for some inductive proofs you need to generalize to entirely different statements in order to be able to prove them comfortably (i.e. generalizing in a way that is trickier than just using revert).<br>\nif you have a bunch of universal quantifiers at the beginning of your statement, revert is just the same thing as shuffling around the order of those quantifiers, usually in a way that yields the strongest induction hypothesis when you introduce the variable you want to induct on.</p>",
        "id": 189265941,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1582843730
    }
]