[
    {
        "content": "<p>Section 3.1 of 'Mathematics in Lean' contains the code</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xs</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">xs</span>\n</code></pre></div>\n\n\n<p>The last line causes an error in vscode and in the community web editor:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]),</span> <span class=\"n\">xs</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span>\n</code></pre></div>\n\n\n<p>I don't understand why there's an error message.</p>\n<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span></p>",
        "id": 205471682,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1596112120
    },
    {
        "content": "<p>notice that the following works</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">xs</span>\n</code></pre></div>\n\n\n<p>(In case it's not clear, the difference here is that <code>exact</code> will use something like <code>refl</code> to unify the goal and the target)</p>",
        "id": 205472163,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596112417
    },
    {
        "content": "<p>this doesn't work</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">xs</span>\n</code></pre></div>",
        "id": 205472297,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596112484
    },
    {
        "content": "<p>and this does work</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">xs</span>\n</code></pre></div>",
        "id": 205472773,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596112746
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 205473492,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596113193
    },
    {
        "content": "<p>This is a quirk of Lean's parser: <code>example</code> is parsed like <code>def</code> rather than <code>theorem</code>, which means that the elaborator doesn't use the statement of the theorem to elaborate the proof term. That's why <code>exact</code> works where the proof term doesn't. It will also work if you change <code>example</code> to <code>theorem foo</code>.</p>\n<p>I don't remember why Leo implemented <code>example</code> that way, except maybe that he also wanted it to work for definitions, like <code>example := 3</code>. I also don't know why this example made it past the test suite, but we'll fix it. <span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span>, thanks for the correction.</p>",
        "id": 205476447,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1596114830
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> . This was really confusing me.</p>",
        "id": 205477140,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1596115146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> <a href=\"#narrow/stream/113488-general/topic/mathematics.20in.20lean.20error/near/205476447\">said</a>:</p>\n<blockquote>\n<p>I don't remember why Leo implemented <code>example</code> that way, except maybe that he also wanted it to work for definitions, like <code>example := 3</code>.</p>\n</blockquote>\n<p>I would guess so as well. Fortunately it won't matter in Lean 4 because a <code>def</code> <em>with</em> a specified type will behave exactly like <code>theorem</code> does in Lean 3 (except for the parallelism, currently).</p>",
        "id": 205478615,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1596115972
    },
    {
        "content": "<p>This is a surprise to me. Not that <code>example</code> is parsed like <code>def</code> but that <code>def</code> ignores the expected type. Why would it do that? I would have expected that it behaves the same as <code>def f := show s ⊆ s, from λ x xs, xs</code></p>",
        "id": 205486848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596120081
    },
    {
        "content": "<p>...good question. I hadn't looked very closely at the actual example. I don't think it completely ignores it, but there must be some subtle, probably unintended difference.</p>",
        "id": 205492464,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1596122491
    },
    {
        "content": "<p>Section (3.3. Negation) of 'Mathematics in Lean' contains the code</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">monof</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"n\">reflexivity</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span>\n    <span class=\"n\">reflexivity</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"c1\">-- exact h monof h&#39;,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"c1\">-- END</span>\n</code></pre></div>\n\n\n<p>If I remove sorry and use <code>exact h monof h',</code>, it will told me</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">unnamed_1180</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"mi\">10</span>\n<span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">monof</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>I don't understand why there's an error message.</p>\n<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span></p>",
        "id": 207077725,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1597594893
    },
    {
        "content": "<p>The statement <code>h1</code> says <code>(1 : nat) &lt;= 0</code>, because there is nothing to suggest what the type should be so lean picks <code>nat</code> by default. Change that line to <code>have h1: (1 : ℝ) ≤ 0,</code></p>",
        "id": 207078014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597595334
    },
    {
        "content": "<p>That error message is incredibly unhelpful though.</p>",
        "id": 207078114,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597595491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thank you very much.</p>",
        "id": 207078127,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1597595517
    },
    {
        "content": "<p>Is the 1 here a polymorphic 1, not nat and not real?</p>",
        "id": 207078368,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1597595859
    },
    {
        "content": "<p>It's polymorphic until lean gives up on the idea that you're going to tell it which one, and then it uses nat</p>",
        "id": 207078572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597596146
    },
    {
        "content": "<p>So the <code>?m_1</code> here is (1:nat)</p>",
        "id": 207078657,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1597596317
    },
    {
        "content": "<p>The <code>1</code> at the bottom is <code>1:nat</code>, the <code>?m_1</code> at the top is <code>?m_1:real</code> and that's why there is a type unification error</p>",
        "id": 207078708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597596366
    },
    {
        "content": "<p>and yes, the message is incredibly unhelpful, I only know the problem because I've seen it many times</p>",
        "id": 207078721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597596408
    },
    {
        "content": "<p>I have another question about this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">monof</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"n\">reflexivity</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span>\n    <span class=\"n\">reflexivity</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- have h1: (1:ℝ) ≤ 0,</span>\n  <span class=\"c1\">--   exact h monof h&#39;,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h&#39;&#39;</span><span class=\"o\">:</span><span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h&#39;&#39;&#39;</span><span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h&#39;&#39;</span> <span class=\"n\">monof</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- linarith,</span>\n<span class=\"kn\">end</span>\n<span class=\"c1\">-- END</span>\n</code></pre></div>\n\n\n<p>Error message:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">f</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 207100446,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1597629880
    },
    {
        "content": "<p>replace the line where you declare <code>h''</code> by </p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">h&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 207101064,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597630927
    },
    {
        "content": "<p>The curly braces mean these are implicit arguments, so <code>h'' monof</code> is interpreted as <code>@h'' monof _ _</code>.</p>",
        "id": 207101317,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597631366
    },
    {
        "content": "<p>You can also use strict implicit arguments, using <code>{{a b}}</code> or <code>\\{a b\\}</code>.</p>",
        "id": 207101329,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597631395
    },
    {
        "content": "<p>we really need <code>{{}}</code> to be the default behaviour</p>",
        "id": 207109022,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597643596
    },
    {
        "content": "<p>Can we swap the meaning of <code>{{ }}</code> and <code>{ }</code> in C++?</p>",
        "id": 207109320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597644046
    },
    {
        "content": "<p>That would save us a huge refactor</p>",
        "id": 207109326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597644055
    },
    {
        "content": "<p>yeah that's what I mean</p>",
        "id": 207109506,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597644288
    },
    {
        "content": "<p>I don't know about this. I think there are a significant fraction of <code>{ }</code> that should be <code>{ }</code>, compared to a small fraction where <code>{{ }}</code> is noticeably better or more appropriate</p>",
        "id": 207110125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597645085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm slow today. Can you give an example where <code>{{ }}</code> is clearly the wrong choice?</p>",
        "id": 207111211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597646576
    },
    {
        "content": "<p>Something like <code>\\forall {{x y}}, f x y = 0</code></p>",
        "id": 207111310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597646731
    },
    {
        "content": "<p>really anything where there are no explicit arguments after the semi implicit args</p>",
        "id": 207111371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597646773
    },
    {
        "content": "<p>because then you can't apply the semi implicit args even if you want to</p>",
        "id": 207111379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597646795
    },
    {
        "content": "<p>you would have to write <code>@foo _ _</code></p>",
        "id": 207111386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597646819
    },
    {
        "content": "<p>Fair enough. Personally, I wouldn't mind having these explicit.</p>",
        "id": 207111400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597646864
    },
    {
        "content": "<p>For quite some time, I've been thinking that we're marking too many things implicit.</p>",
        "id": 207111438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597646887
    },
    {
        "content": "<p>For a local hypothesis that makes sense, but it is not uncommon for type arguments to be implicit like this</p>",
        "id": 207111442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597646905
    },
    {
        "content": "<p>my ballpark estimate is that today with <code>{ }</code> default we use <code>{ }</code> 99% of the time and prefer <code>{{ }}</code> about 1% of the time, while if <code>{{ }}</code> was the default then we would use it 90% of the time and would find reasons to use <code>{ }</code> 10% of the time</p>",
        "id": 207111543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597647041
    },
    {
        "content": "<p>I'm also talking about things like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"c1\">-- x is implicit</span>\n</code></pre></div>\n\n\n<p>but I realise that this is somewhat off topic in this thread.</p>\n<p>These statements are annoying when you don't have <code>hx</code> yet, and <code>-x \\in p</code> is also not exactly the expected type.</p>",
        "id": 207111580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597647121
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fn_ub</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"n\">def</span> <span class=\"n\">fn_has_ub</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">fn_ub</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fn_has_ub</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">fn_has_ub</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fn_has_ub</span><span class=\"o\">,</span> <span class=\"n\">fn_ub</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n<span class=\"c1\">-- END</span>\n</code></pre></div>\n\n\n<p>If I change <code>simp only [fn_has_ub, fn_ub] at h</code> to <code>simp only [fn_has_ub] at h,simp only [fn_ub] at h,</code> it will told me:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">unnamed_1338</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">29</span>\n<span class=\"n\">simplify</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">simplify</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Exists</span> <span class=\"o\">(</span><span class=\"n\">fn_ub</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 207138331,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1597668394
    },
    {
        "content": "<p>If this is not an error in the mathematics in Lean book, can I request that we move this to a new thread?</p>",
        "id": 207139468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597668988
    },
    {
        "content": "<p>I am doing my late-morning Zulip catch-up, so I don't know if this moved to a new thread. BA long time ago I suggested exactly this change to Leo, and he tried it and said that lots of things broke with the change. IIRC he came to the conclusion that neither was clearly the more natural default. This is not an argument against trying it again and seeing what happens. It's just a (vaguely remembered) data point.</p>",
        "id": 207159634,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1597679069
    },
    {
        "content": "<p>I think normal implicit is a better default, but there are plenty of cases where strict implicit is desirable. If you like to write <code>inv_inj.mpr</code> or more generally<code>any_proof_of_an_iff_without_explicit_arguments.mp</code>, then you have a hard time with strict implicit arguments.</p>",
        "id": 207160463,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597679434
    }
]