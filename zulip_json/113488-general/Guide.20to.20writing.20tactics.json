[
    {
        "content": "<p>I've spent the last few weeks learning to write tactics.  I learned a lot by trial and error, and decided to write up what I've learned in a Guide to Writing Tactics.  I'd welcome feedback on this, especially corrections of any errors I've made.<br>\n  -Dan Velleman<br>\n<a href=\"/user_uploads/3121/mqEJI5ZdyytcJnb1L3wWGhQD/TacticGuide.pdf\">TacticGuide.pdf</a></p>",
        "id": 268056692,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1642186655
    },
    {
        "content": "<p>First remark without reading any word: it would be much nicer with syntax highlighting.</p>",
        "id": 268057243,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642186868
    },
    {
        "content": "<p>In section 1, it is not true that <code>let</code> cannot stand on its own, but the syntax is slightly different. In a <code>do</code> block it has the syntax <code>let x : T := e,</code> and outside a <code>do</code> block it is <code>let x : T := e in e'</code></p>",
        "id": 268057302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642186889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Guide.20to.20writing.20tactics/near/268057243\">said</a>:</p>\n<blockquote>\n<p>First remark without reading any word: it would be much nicer with syntax highlighting.</p>\n</blockquote>\n<p>I've wondered it before, how to get proper Lean syntax highlight in LaTex?</p>",
        "id": 268057645,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642187023
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/master/extras/latex/lstlean.md\">https://github.com/leanprover-community/lean/blob/master/extras/latex/lstlean.md</a></p>",
        "id": 268057814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642187096
    },
    {
        "content": "<p>What I meant by \"cannot stand on its own\" is that it has to be followed by either \", e'\" or \"in e'\".  The example I give with if-then-else illustrates the point I was trying to make, but perhaps it isn't clear enough.</p>",
        "id": 268057930,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1642187146
    },
    {
        "content": "<p>Could this be the start of a new book?</p>",
        "id": 268058073,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1642187209
    },
    {
        "content": "<blockquote>\n<p>Think of a tactic string as a box that contains a string, together with all of the other information needed to deal with the complications described earlier that arise when one tactic calls another. </p>\n</blockquote>\n<p>This should somehow be adjusted to reflect that <code>tactic string</code> is a function that can be called, not a value to be unwrapped. You can call a tactic multiple times and get different results</p>",
        "id": 268058268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642187300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366057\">Eric Taucher</span> <a href=\"#narrow/stream/113488-general/topic/Guide.20to.20writing.20tactics/near/268058073\">said</a>:</p>\n<blockquote>\n<p>Could this be the start of a new book?</p>\n</blockquote>\n<p>There's always the old book: <a href=\"https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf\">https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf</a></p>\n<p>There's also Rob Lewis' videos at <a href=\"https://www.youtube.com/watch?v=o6oUjcE6Nz4&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N&amp;index=19\">https://www.youtube.com/watch?v=o6oUjcE6Nz4&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N&amp;index=19</a> (and see other links in the description)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"o6oUjcE6Nz4\" href=\"https://www.youtube.com/watch?v=o6oUjcE6Nz4&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N&amp;index=19\"><img src=\"https://uploads.zulipusercontent.net/91bdd8086a19f2547ba6eb478268759aecf3a000/68747470733a2f2f692e7974696d672e636f6d2f76692f6f366f556a6345364e7a342f64656661756c742e6a7067\"></a></div>",
        "id": 268058565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642187451
    },
    {
        "content": "<p>The discussion about backtick names reminds me of a recent run-in I had with the computer modern backtick character, which looks way too much like an apostrophe. I suggest changing the font to something that makes this more visually distinctive</p>",
        "id": 268058810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642187581
    },
    {
        "content": "<p>I'm not sure I understand the comment about <code>tactic string</code>.  The tactic itself is a function that can be called multiple times with different results.  But what it returns is like a box with a string (and other stuff) inside, isn't it?  Isn't <code>tactic string</code> specifying the type of what is returned?</p>",
        "id": 268058823,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1642187589
    },
    {
        "content": "<p>the \"box containing a string\" is actually <code>interaction_monad.result tactic_state string</code>, and <code>tactic string</code> is defined as <code>tactic_state -&gt; interaction_monad.result tactic_state string</code></p>",
        "id": 268058904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642187638
    },
    {
        "content": "<p>That is, <code>tactic string</code> is literally a function taking an opaque object of type <code>tactic_state</code> into some kind of box containing a new <code>tactic_state</code> and a <code>string</code></p>",
        "id": 268059022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642187697
    },
    {
        "content": "<p>This is relevant in the implementation of functions like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.try/src\">src#tactic.try</a></p>",
        "id": 268059070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642187729
    },
    {
        "content": "<p>I've quickly read the whole thing. It's nice but I don't see much that isn't covered in our standard tutorial <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a></p>",
        "id": 268059088,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642187745
    },
    {
        "content": "<p>Thanks Mario.  That makes sense.</p>",
        "id": 268059419,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1642187931
    },
    {
        "content": "<p>Lots of great material on this thread. Thanks everyone!<br>\nAnd Thanks Dan, I love reading/learning the same subject from various perspectives <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 268061103,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642188776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Guide.20to.20writing.20tactics/near/268058565\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"366057\">Eric Taucher</span> <a href=\"#narrow/stream/113488-general/topic/Guide.20to.20writing.20tactics/near/268058073\">said</a>:</p>\n<blockquote>\n<p>Could this be the start of a new book?</p>\n</blockquote>\n<p>There's always the old book: </p>\n</blockquote>\n<p>I knew someone would think that, I didn't expect it would be you. Dan knows what I am talking about.</p>",
        "id": 268061650,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1642189040
    },
    {
        "content": "<p>Continuing the discussion of <code>tactic string</code>:  I take it that a more accurate explanation of the meaning of <code>s \\leftarrow T</code> would be something like:  Run T.  Apply the returned tactic string to the current proof state to get a box containing the new state and a string.  Remove the string from the box and assign it to s, and pass the new state on to the next step?</p>",
        "id": 268062040,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1642189218
    },
    {
        "content": "<p>\"Run <code>T</code>\" only makes sense with the current proof state. A term of type <code>tactic s</code> is like a function from <code>tactic_state</code> to <code>s × tactic_state</code> (with the possibility of failure, as discussed).</p>",
        "id": 268062298,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642189370
    },
    {
        "content": "<p>So the meaning of <code>s ← T</code> is \"run <code>T</code> on the current proof state. Unbox the result; assign the string component to <code>s</code>, and update the proof state to the new one returned by <code>T</code>.\"</p>",
        "id": 268062444,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642189445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366057\">Eric Taucher</span> <a href=\"#narrow/stream/113488-general/topic/Guide.20to.20writing.20tactics/near/268061650\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Guide.20to.20writing.20tactics/near/268058565\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"366057\">Eric Taucher</span> <a href=\"#narrow/stream/113488-general/topic/Guide.20to.20writing.20tactics/near/268058073\">said</a>:</p>\n<blockquote>\n<p>Could this be the start of a new book?</p>\n</blockquote>\n<p>There's always the old book: </p>\n</blockquote>\n<p>I knew someone would think that, I didn't expect it would be you. Dan knows what I am talking about.</p>\n</blockquote>\n<p>Oh you mean Dan's old book :-) Yeah I was just pointing out the abandoned \"Programming in Lean\" book which nobody ever talks about any more but which has some info about tactic writing. Sorry for the crossed wires!</p>",
        "id": 268062469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642189463
    },
    {
        "content": "<p>Or \"pass on the proof state to the next step\" instead of \"update,\" if you prefer!</p>",
        "id": 268062529,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642189499
    },
    {
        "content": "<p>PiL was the book which taught me what a monad was, which is pretty much the limit of my understanding of what <code>tactic X</code> means.</p>",
        "id": 268062817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642189669
    },
    {
        "content": "<p>I really like this document! It's the first thing I've read which clearly explains the description between pre-expressions and expressions.</p>",
        "id": 268106051,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1642224071
    },
    {
        "content": "<p>Here's an updated version with syntax highlighting (thanks Mario for the link to Jeremy's lstlean file), corrections to the explanation of <code>tactic string</code> (thanks Mario and Rob for explaining this; I hope I have it right now), and some additional material on how to call tactics in the library.<br>\n<a href=\"/user_uploads/3121/9Zt_fQ_AbwyDrz_EAIQLBlNk/TacticGuidell.pdf\">TacticGuidell.pdf</a></p>",
        "id": 268148283,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1642282350
    },
    {
        "content": "<p>OK, final version, with an illustration of the use of &lt;|&gt; at the end.<br>\n<a href=\"/user_uploads/3121/sTt0HtbubzJwl1ZYkLpLRetd/TacticGuide.pdf\">TacticGuide.pdf</a></p>",
        "id": 268181286,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1642335464
    }
]