[
    {
        "content": "<p>What's the functional difference between the following declarations, and how do you go about choosing which to use?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n<span class=\"kn\">abbreviation</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n</code></pre></div>",
        "id": 198981547,
        "sender_full_name": "Billy Price",
        "timestamp": 1590639859
    },
    {
        "content": "<p>Default to the <code>def</code></p>",
        "id": 198981555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590639892
    },
    {
        "content": "<p>Use a notation when you need, well, notation</p>",
        "id": 198981568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590639917
    },
    {
        "content": "<p>never use a <code>notation</code> abbreviating something more complicated than the application of a constant to some variables, because it's not actually abbreviating anything internally</p>",
        "id": 198981637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590639980
    },
    {
        "content": "<p><code>abbreviation</code> is something like a reducible definition that is eagerly unfolded. I believe it has special kernel support, but for the longest time there was only one example of an abbreviation being needed (and it was implemented in core using tactics to create the definition), so adding a keyword for it was probably overkill. I have never seen a genuine use for it</p>",
        "id": 198981648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590640074
    },
    {
        "content": "<p>You should also add <code>@[reducible] def foo</code> and <code>@[irreducible] def foo</code> to your list. A reducible def is unfolded more eagerly by tactics, in particular <code>rw</code> and <code>simp</code> will unfold reducible defs but not semireducible (regular) defs. This makes them somewhat \"transparent\". An example of a reducible def is <code>gt</code>, which is supposed to be treated \"basically the same\" as <code>lt</code>. However they aren't perfect, and mathlib bans the use of <code>gt</code> because the difference sometimes leaks and simp lemmas don't fire, etc. I would recommend avoiding them in favor of a notation, which is \"unfolded\" immediately at parse time.</p>\n<p>Irreducible defs are used when you want the usual unification to not unfold the definition at all. It's not completely airtight because you can still <code>dunfold</code> and <code>delta</code> to unfold an irreducible def, and actually there is no way to get a completely airtight opaque definition in DTT (as implemented by lean). (I believe lean 4 is changing this with <code>constant</code> declarations.)</p>",
        "id": 198981871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590640472
    },
    {
        "content": "<p>Finally, there is <code>theorem</code> (or its synonym <code>lemma</code>), which acts like an irreducible def, but also elaborates the body asynchronously. This is primarily intended for proofs of propositions (and I believe the linter will yell at you if you mark a non-proposition as <code>theorem</code>). Again, you can still unfold the theorem proof using <code>delta</code>, but this requires some synchronization behind the scenes and it's not recommended.</p>",
        "id": 198981962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590640660
    },
    {
        "content": "<p>Thanks, that's very helpful! I think I understand what you mean. I had something like <code>@[simp] def subst_nth : nat -&gt; ...</code>and <code>@[simp] def subst := subst_nth 0</code>, and I noticed that I had to apply <code>simp</code> twice in my proofs. Then I noticed I could use <code>abbreviation</code> and just do one simp. So now, as I understand, I should do <code>@[simp] def subst_nth : nat -&gt; ...</code> and <code>@[reducible] def subst := subst_nth 0</code>?</p>",
        "id": 198982592,
        "sender_full_name": "Billy Price",
        "timestamp": 1590641693
    },
    {
        "content": "<p>You shouldn't have to call <code>simp</code> twice in a row, although it happens occasionally, usually due to a bug or edge case</p>",
        "id": 198982706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590641843
    },
    {
        "content": "<p>I may be misremembering</p>",
        "id": 198982718,
        "sender_full_name": "Billy Price",
        "timestamp": 1590641873
    },
    {
        "content": "<p>Having <code>@[simp]</code> on a definition that is not from the equation compiler is a bit odd, as it means that the term will always be eagerly expanded by simp</p>",
        "id": 198982760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590641910
    },
    {
        "content": "<p>I just picked it up from somewhere - should I just be using reducible everywhere?</p>",
        "id": 198982770,
        "sender_full_name": "Billy Price",
        "timestamp": 1590641943
    },
    {
        "content": "<p><code>@[reducible]</code> is not a replacement for this, as it means that simp will see through the definition but will not actually rewrite it, and other tactics may get caught up on it</p>",
        "id": 198982775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590641952
    },
    {
        "content": "<p>I would say use <code>@[reducible]</code> sparingly</p>",
        "id": 198982777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590641961
    },
    {
        "content": "<p>Try to get lean to see what you see. That prevents miscommunication and generally speeds things up because things can get out of hand behind your back if you aren't careful</p>",
        "id": 198982839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590642037
    },
    {
        "content": "<p>Oh okay I misunderstood the point of <code>@[reducible]</code>- how do I get lean to actually rewrite it for me automatically - or when I request it to?</p>",
        "id": 198982853,
        "sender_full_name": "Billy Price",
        "timestamp": 1590642069
    },
    {
        "content": "<p><code>@[simp]</code> does that mostly (either on the definition, as a local attribute, or in the simp bracket list)</p>",
        "id": 198982860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590642109
    },
    {
        "content": "<p>but it is generally best to mark \"definitional equations\" and simplification lemmas like <code>0 + x = x</code> as simp lemmas</p>",
        "id": 198982909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590642170
    },
    {
        "content": "<p>especially for definitions by recursion</p>",
        "id": 198982920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590642204
    },
    {
        "content": "<p>Why is it odd to use it outside an equational context?</p>",
        "id": 198982922,
        "sender_full_name": "Billy Price",
        "timestamp": 1590642214
    },
    {
        "content": "<p>If simp is supposed to always rewrite the definition away, then maybe you didn't want the definition in the first place</p>",
        "id": 198982969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590642252
    },
    {
        "content": "<p>since it seems to be getting in your way enough that you thought to make a blanket rule \"this definition is always unwanted\"</p>",
        "id": 198982973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590642281
    },
    {
        "content": "<p>in which case you might consider going for a <code>notation</code> instead</p>",
        "id": 198982988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590642316
    },
    {
        "content": "<p>If you want it to be rewritten within a section, for example because you are proving basic properties about it by induction and everything requires unfolding the definition, then use a <code>local attribute [simp]</code></p>",
        "id": 198983033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590642370
    },
    {
        "content": "<p>because it's not that the definition is unwanted, it's just that you are proving the basic API, and outside the section you will want the definition to be treated mostly atomically, modulo the theorems that have been proven about it</p>",
        "id": 198983055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590642421
    },
    {
        "content": "<p>But say I'm making a free-variables function. I still want to \"unfold\" the definition and get the resulting set of free variables outside the \"basic API\" section. Why would I want to treat it atomically?</p>",
        "id": 198983125,
        "sender_full_name": "Billy Price",
        "timestamp": 1590642557
    },
    {
        "content": "<p>why would you want to unfold the free variables function? You want equational lemmas saying \"the free variables of <code>forall x, phi</code> are the free variables of <code>phi</code> minus <code>{x}</code>\" and so on, but you wouldn't want to unfold <code>x \\in FV phi</code> to <code>x \\in term.rec &lt;unreadable mess&gt;</code>.</p>",
        "id": 198983187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590642665
    },
    {
        "content": "<p><code>simp</code> on <code>x \\in FV phi</code> should do nothing</p>",
        "id": 198983244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590642726
    },
    {
        "content": "<p>because that expression is already the most simple and compact way of saying what it says</p>",
        "id": 198983249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590642751
    },
    {
        "content": "<p>If you have a particular formula, like <code>FV (forall x, x = y /\\ y = 0)</code>, then equational lemmas will trigger on it and simp will be able to reduce it to <code>{y}</code></p>",
        "id": 198983310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590642844
    },
    {
        "content": "<p>equational lemmas which just unfold any given definition - regardless of tag?</p>",
        "id": 198983579,
        "sender_full_name": "Billy Price",
        "timestamp": 1590643230
    },
    {
        "content": "<p>I mean theorems of the form <code>FV (forall x, phi) = FV phi - {x}</code></p>",
        "id": 198983591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590643262
    },
    {
        "content": "<p>which should be marked <code>@[simp]</code></p>",
        "id": 198983607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590643284
    },
    {
        "content": "<p>If you write a definition using the equation compiler, these may well be the branches in the definition, in which case you can just mark the definition itself as <code>@[simp]</code> and it will be passed along to these equations</p>",
        "id": 198983664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590643345
    },
    {
        "content": "<p>but you can also write the equations yourself, in particular if the equations you want to simp with are different from the equations you used in the definition</p>",
        "id": 198983670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590643370
    },
    {
        "content": "<p>Semi-related, why does this notation compile but when I use it I get \"invalid expression\" on the right <code>&gt;</code>.</p>\n<p><code>notation '&lt;' a ',' b '&gt;' := pair a b </code></p>\n<p>^^^ I've replaced the back ticks with single quotes so it renders properly</p>",
        "id": 198994007,
        "sender_full_name": "Billy Price",
        "timestamp": 1590653772
    },
    {
        "content": "<p>unless those are fancy unicode symbols you are probably trampling on another notation</p>",
        "id": 198994475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590654136
    },
    {
        "content": "<p>btw you can quote backticks with more backticks <code> ``like `this` `` </code></p>",
        "id": 198994568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590654211
    },
    {
        "content": "<p>What's the difference between trampling on another notation and overriding?</p>",
        "id": 198996159,
        "sender_full_name": "Billy Price",
        "timestamp": 1590655334
    },
    {
        "content": "<p>Maybe you got overrode?</p>",
        "id": 198997236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590656115
    }
]