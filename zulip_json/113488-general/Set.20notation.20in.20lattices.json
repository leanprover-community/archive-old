[
    {
        "content": "<p>I created a to_set_notation tactic (by modifying to_additive) and I am thinking that it may be something that we want in mathlib. The motivation is the following: let's say that we have a subtype of <code>set α</code>, for example the recently created subtype of measurable sets. We can then prove that it is a boolean algebra. But then what we get is a lot of lemmas about inf, sup, Sup, bot, etc. Since intuitively the elements of the type are sets, we would like to have instead lemmas about inter, union, Union, empty, etc. In particular, we cannot even write the Union of such elements: it's not defined.</p>\n<p>We could do the same as with mul/add, and have a tactic that translates all the lemmas about one notation to the other. We would prove that the measurable sets are a <code>set_boolean_algebra</code> instead of a <code>boolean_algebra</code> and have set notation available instead of lattice notation. Writing the tactic was incredibly easy, due to the fact that the to_additive tactic is superbly general: I just had to change the dictionary used to translate names. There is some work needed to add a <code>[to_set_notation]</code> tag to all lemmas in the order folder, but that's it. I've done it up to boolean algebra to see if it worked well, and the only minor issue is that I need to find new names for the set versions of compl and sdiff (which already means set difference...).</p>\n<p>Of course, an alternative solution is to drop set notation and use only inf and sup. I'd love to hear you thoughts on that!</p>",
        "id": 241639263,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1622903188
    },
    {
        "content": "<p>Note that the original motivation for the instances on<code>subtype measurable_set</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_set.subtype.boolean_algebra\">docs#measurable_set.subtype.boolean_algebra</a>) came from absorbing bits of formal-ml, and there instead of using set notation, \"prop\" notation (<code>∧</code> <code>∨</code> <code>¬</code>) is used, which seems to match how boolean algebras are usually written. In that repo this is a bit of a hack because those notations are not typeclasses but directly associated with <code>and</code>, <code>or</code>, and <code>not</code>, but if the motivation was there I think that could be adjusted.</p>\n<p>I think in general either lean or mathlib needs a better approach to \"these things are all the same but mathematicians like using different symbols for them\"</p>",
        "id": 241640609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622905192
    },
    {
        "content": "<p>Yes, I saw that formal-ml uses prop notation; I prefer my events with set notation though :) . But personal preferences aside, I agree that it is not a very elegant solution. I was thinking that it was an easy way to do it and that it could be useful in that case if using set notation, and also for example to avoid stating all set lemmas again for finset</p>",
        "id": 241640916,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1622905582
    },
    {
        "content": "<p>The finset.basic file contains many lemmas that are consequences of a lattice structure, but are restated to use set notation.</p>",
        "id": 241641952,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1622907135
    },
    {
        "content": "<p>I wonder if we can make <code>union</code> reducible to the point that there is no need for both version of the lemma, and whether that's desirable - it would mean that after a <code>rw sup_comm</code>, <code>unions</code> would turn into <code>sup</code>s</p>",
        "id": 241642312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622907666
    },
    {
        "content": "<p>And now that I think of it, the file <code>data.set.basic</code> imports <code>order.boolean_algebra</code> and then basically states again every lemma in the order files to adapt them to set notation.</p>",
        "id": 241642316,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1622907681
    },
    {
        "content": "<p>I think something like this is worth trying in a PR. There have been a few long threads about set vs lattice notation here before, e.g. <a href=\"#narrow/stream/144837-PR-reviews/topic/3083.20finset.20lattice/near/200940737\">this one</a> from last year, but I guess we never agreed on a course of action.</p>",
        "id": 241643455,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622909250
    },
    {
        "content": "<p>Ok, I'll make it into a PR. Right now the tactic is a copy-and-paste of to_additive, so there is some work needed before it's PR worthy. And given how much of mathlib is affected by the files I will modify, I expect a lot of errors.</p>",
        "id": 241648831,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1622916418
    },
    {
        "content": "<p>I think we should just abandon set notation entirely. It's not like being able to type <code>\\subseteq</code> instead of <code>\\le</code> is making life easier for anyone, and as far as I can tell the slight notation familiarity is the only advantage. It would be a pretty boring life if we could only talk about bare sets, and the separate notation classes are just useless burden for doing anything more interesting.</p>",
        "id": 241664971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622942296
    },
    {
        "content": "<p>There will just be some coercions to make more explicit, typically for subgroups which are then both less than G in terms of carriers and in terms of subgroups.</p>",
        "id": 241676573,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622961639
    },
    {
        "content": "<p>You can write <code>\\ss</code> for <code>\\subseteq</code> if you want to save a few keystrokes!<br>\nI would be perfectly happy myself with using inf, le and sup for everything, but what I strongly dislike is the current situation in which some things use set notation (sets, finsets), and at the same time have lattice instances, and the lemmas defined using set notation are incompatible with the ones available due to the instance. Also the business with subtypes not retaining the notation used by the type is bothering me.</p>\n<p>I would be personally happy with having only one notation, but I am not sure that it is wise. One thing I liked about lean/mathlib when starting to learn it was that it felt  not too far from math I could write on paper, and that involves being able to use the same notations. Now that I am used to it I don't care about a change in notation compared to paper math, but it would be one more hurdle for new people.</p>\n<p>Overall, my point of view is that since set notation is there but not very convenient, I might as well try to ease its use. And if set notation goes away soon I won't regret spending time on it, since it's actually not a lot of work.</p>",
        "id": 241679322,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1622966415
    },
    {
        "content": "<p>How about <code>open_locale set_notation</code>?</p>",
        "id": 241679358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622966518
    },
    {
        "content": "<p>What would having that locale open do?</p>",
        "id": 241679878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622967279
    },
    {
        "content": "<p>Note that there are some cases where <code>subset</code> does mean something different than <code>le</code>, like <code>list.subset</code></p>",
        "id": 241679888,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622967313
    },
    {
        "content": "<p>What about using <code>\\inter</code> and <code>\\union</code> in lattices? Using <code>\\subset</code> everywhere we use <code>\\le</code> would definitely be weird, but <code>\\inf</code> and <code>\\sup</code> are symbols that I never saw before using Lean.</p>",
        "id": 241680021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622967538
    },
    {
        "content": "<p>And it would be easier for beginner to simply get use to the fact that <code>\\le</code> can also mean <code>\\subset</code> than using totally new symbols for super familiar operations of union and intersection.</p>",
        "id": 241680046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622967599
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 241680233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622967838
    },
    {
        "content": "<p>Is this something we can do better in lean4, by having set notation automatically used instead of lattice notation if a custom deelaborator finds a <code>has_mem</code> for the type in question?</p>",
        "id": 241681100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622969110
    },
    {
        "content": "<p>Currently notation printing is keyed by the head symbol in lean3 so there's no way to have the pretty printer print <code>@has_inf.inf (set X) _</code> differently to a general <code>has_inf.inf</code>, but that feels like the sort of place where this should be handled.</p>",
        "id": 241681166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622969227
    },
    {
        "content": "<p>You'd still have the awkwardness where you have to reach for <code>inf_comm</code> instead of <code>inter_comm</code>, but with that approach your goal state would always show things in terms of <code>inter</code> and never <code>inf</code>.</p>",
        "id": 241681182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622969278
    }
]