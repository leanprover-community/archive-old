[
    {
        "content": "<p>Here's a self-contained extract from <code>analysis/topology/topological.space_lean</code>:</p>",
        "id": 125071940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700105
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_open_Union_orig</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_open_sUnion</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">t</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">i</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_open_Union&#39;</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">is_open_sUnion</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">Ht</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Ht</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">Hi</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">Hi</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_open_Union&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_open_sUnion</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">t</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"c1\">-- doesn&#39;t compile</span>\n</pre></div>",
        "id": 125071981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700139
    },
    {
        "content": "<p>well, the first lemma is the extract -- it's called <code>is_open_Union</code> in the actual file.</p>",
        "id": 125071983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700164
    },
    {
        "content": "<p>I should perhaps say <code>lemma is_open_sUnion {s : set (set α)} (h : ∀t ∈ s, is_open t) : is_open (⋃₀ s)</code></p>",
        "id": 125071988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700194
    },
    {
        "content": "<p>So I realised I didn't really understand the mathlib proof of <code>is_open_Union_orig</code> (which is the proof given in the extract above, with its <code>heq</code>)</p>",
        "id": 125071992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700235
    },
    {
        "content": "<p>so I proved the lemma \"in the same way\", in tactic mode</p>",
        "id": 125072033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700250
    },
    {
        "content": "<p>and that's <code>is_open_Union'</code></p>",
        "id": 125072034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700259
    },
    {
        "content": "<p>and everything works fine with eq</p>",
        "id": 125072035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700278
    },
    {
        "content": "<p>Oh -- got it:</p>",
        "id": 125072043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700320
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">is_open_Union&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_open_sUnion</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">t</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">i</span>\n</pre></div>",
        "id": 125072045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700346
    },
    {
        "content": "<p>What's with this <code>heq</code> in the mathlib version?</p>",
        "id": 125072085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700375
    },
    {
        "content": "<p>Oh!</p>",
        "id": 125072130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700494
    },
    {
        "content": "<p>Got it :-)</p>",
        "id": 125072131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700496
    },
    {
        "content": "<p><code>heq</code> has nothing to do with <code>heq</code>, it's just a variable name :-)</p>",
        "id": 125072132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700509
    },
    {
        "content": "<p>Oh OK, so I do understand this particular use of heq, we're calling a variable by the same name as a Lean function :-)</p>",
        "id": 125072138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523700582
    }
]