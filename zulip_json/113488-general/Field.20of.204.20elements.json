[
    {
        "content": "<p>Does the field of 4 elements have its place in mathlib? I am using it in my little project as a ring that is not generated by 1, and the decidability was quite useful; if I PR my use case to mathlib, do I need to replace it by a more \"regular\" ring such as ZxZ or Z[X]?</p>",
        "id": 159196230,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550873842
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">F4</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"n\">o</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">F4</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">F4</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">},</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">F4</span> <span class=\"bp\">→</span> <span class=\"n\">F4</span> <span class=\"bp\">→</span> <span class=\"n\">F4</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">o</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">o</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">o</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">o</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">o</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">z</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">F4</span> <span class=\"bp\">→</span> <span class=\"n\">F4</span> <span class=\"bp\">→</span> <span class=\"n\">F4</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">o</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">o</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">o</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"n\">def</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">F4</span> <span class=\"bp\">→</span> <span class=\"n\">F4</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"n\">o</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">discrete_field</span> <span class=\"n\">F4</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">o</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">inv</span><span class=\"o\">,</span>\n  <span class=\"n\">has_decidable_eq</span> <span class=\"o\">:=</span> <span class=\"n\">F4</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact_dec_trivial</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">F4</span>\n</pre></div>",
        "id": 159196461,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550874031
    },
    {
        "content": "<p>You can prove <code>discrete_field</code> constructively for <code>adjoin_root</code> using euclidean division I guess, or just for finite fields using a search.</p>",
        "id": 159198466,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550875839
    },
    {
        "content": "<p>I think there's a place in mathlib for the field with q elements, and one could define it as the splitting field of X^q-X over Z/pZ if q is a power of p</p>",
        "id": 159199507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550876952
    },
    {
        "content": "<p>yeah but specifically 4 elements</p>",
        "id": 159199528,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550876994
    },
    {
        "content": "<p>insert q= 4?</p>",
        "id": 159201023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550878563
    },
    {
        "content": "<p>that seems too much work for something not with that purpose</p>",
        "id": 159201290,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550878906
    },
    {
        "content": "<p>but this seems like a lot of case analysis for a more abstract thing</p>",
        "id": 159201350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550878956
    },
    {
        "content": "<p>If you just need to know a field with 4 elements exists, that's definitely part of a more general theorem</p>",
        "id": 159201390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550879027
    },
    {
        "content": "<p>no I just want a simple ring that is not generated by 1</p>",
        "id": 159201433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550879043
    },
    {
        "content": "<p>simple as in not complicated</p>",
        "id": 159201443,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550879052
    },
    {
        "content": "<p>ring? How about <code>zmod 2 x zmod 2</code></p>",
        "id": 159201452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550879072
    },
    {
        "content": "<p>or <code>rat</code> or <code>real</code></p>",
        "id": 159201500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550879134
    },
    {
        "content": "<p>and you need to be able to prove that it is not generated by 1</p>",
        "id": 159201705,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550879296
    },
    {
        "content": "<p>sqrt 2 is not in Q</p>",
        "id": 159201724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550879316
    },
    {
        "content": "<p>sqrt 2 is easier than 1/2?</p>",
        "id": 159201845,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550879406
    },
    {
        "content": "<p>I wasn't sure which \"generated\" you meant. 1/2 works too</p>",
        "id": 159201881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550879464
    },
    {
        "content": "<p>I recall Kevin looking for a short proof that 1/2 is not an integer. I think noting it has denominator 2 works</p>",
        "id": 159201910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550879497
    },
    {
        "content": "<p>or 0 &lt; 1/2 &lt;1</p>",
        "id": 159201925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550879521
    },
    {
        "content": "<p>lemme try that later</p>",
        "id": 159202002,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550879567
    },
    {
        "content": "<p>Q is not generated by 1 because Z is a subring and 1/2 is not an integer</p>",
        "id": 159202402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550879982
    },
    {
        "content": "<p>The complexes are not generated by 1 because the reals are a subring and i is not real, maybe that's easier</p>",
        "id": 159202524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550880090
    },
    {
        "content": "<p>yeah but are they in mathlib?</p>",
        "id": 159202531,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550880103
    },
    {
        "content": "<p>We usually don'r state such theorems explicitly, but sqrt 2 not in Q is an exception</p>",
        "id": 159202629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550880181
    },
    {
        "content": "<p>oh brilliant</p>",
        "id": 159202637,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550880187
    },
    {
        "content": "<p>i not real also sound like a good candidate</p>",
        "id": 159202649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550880205
    },
    {
        "content": "<p>You mean the fact that the reals are a subring? Everything else is. Why do you want examples anyway? It's theorems we need :-)</p>",
        "id": 159202656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550880230
    },
    {
        "content": "<p>That's my point. Most of these are just \"examples\" so they don't go in mathlib</p>",
        "id": 159202703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550880254
    },
    {
        "content": "<p>Lack of examples makes maths UG example sheets harder to do</p>",
        "id": 159202719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550880295
    },
    {
        "content": "<p>There are a few cases of examples that are actually useful for theorems, and I think having simple things like this is good</p>",
        "id": 159202720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550880297
    },
    {
        "content": "<p>that's a good thing, it means the kids can't cheat :)</p>",
        "id": 159202743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550880319
    },
    {
        "content": "<p>I consider example making part of the educator's job</p>",
        "id": 159202818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550880394
    },
    {
        "content": "<p>we have theorems about irrational numbers but not rational numbers?</p>",
        "id": 159205814,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550883953
    },
    {
        "content": "<p>thanks, sqrt 2 worked like a charm! <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 159205958,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550884183
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">is_supported_pure</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_supported</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">suffices</span> <span class=\"n\">is_supported</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">⟨</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hps</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">subset_closure</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hps</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">hps</span> <span class=\"o\">:</span> <span class=\"n\">is_supported</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_supported</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">q</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">hx</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lift_one</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lift_neg</span><span class=\"o\">,</span> <span class=\"n\">lift_one</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_neg</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hzs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lift_mul</span><span class=\"o\">,</span> <span class=\"n\">lift_of</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">hzs</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lift_add</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">hps</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lift_of</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">irr_sqrt_two</span> <span class=\"n\">this</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159205959,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550884185
    },
    {
        "content": "<p>what is <code>is_supported pure</code>?</p>",
        "id": 159206027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550884258
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_supported</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">free_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 159206044,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550884312
    }
]