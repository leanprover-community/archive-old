[
    {
        "content": "<p>It looks like <code>set</code> lemmas can rewrite goals with predicates in them. Here's a MWE minimized from <a href=\"https://github.com/leanprover-community/mathlib/pull/16435\">#16435</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.bot_eq_empty</span><span class=\"o\">,</span> <span class=\"c1\">-- Why does this work?!?</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>cc <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 298161419,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662830493
    },
    {
        "content": "<p>Sounds like the same problem as the with_bot lemmas applying to option</p>",
        "id": 298178937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662844437
    },
    {
        "content": "<p>Here is a sort of \"minimized\" example, not involving type classes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">f_def</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">f_def</span><span class=\"o\">,</span> <span class=\"c1\">-- succeeds; is that expected?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 298181453,
        "sender_full_name": "Reid Barton",
        "timestamp": 1662846894
    },
    {
        "content": "<p>Here's an example as I ran into it, just to point out how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.bot_eq_empty\">docs#set.bot_eq_empty</a> being a simp lemma leads to a breaking of the set API:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- simp only [pi.bot_apply, set.bot_eq_empty, eq_iff_iff, iff_false]</span>\n  <span class=\"c1\">-- ⊢ ¬∅ y</span>\n  <span class=\"c1\">-- (but we shouldn't see a `∅ y` term!)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">false.elim</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 298181964,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1662847389
    },
    {
        "content": "<p>I wonder if this has anything to do with the fact that implicit arguments are unified with semireducible transparency rather than reducible transparency? This doesn't explain Reid's example though.</p>",
        "id": 298183116,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1662848626
    },
    {
        "content": "<p>Kyle's and Yaël's example are indeed due to the semireducible upgrade.</p>",
        "id": 298388198,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662991517
    },
    {
        "content": "<p>I'm not sure where Reid sees an issue in his example; note that <code>1 + 1 = 2</code> reducibly.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tactic.reflexivity</span> <span class=\"n\">tactic.transparency.reducible</span>\n</code></pre></div>",
        "id": 298388564,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662991644
    },
    {
        "content": "<p>Oh I just assumed that this needed to unfold some definition.</p>",
        "id": 298409945,
        "sender_full_name": "Reid Barton",
        "timestamp": 1662997967
    },
    {
        "content": "<p>Which implicit argument is being made semireducible that's causing the issue?</p>",
        "id": 298426844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663003279
    },
    {
        "content": "<p>The arguments of <code>has_bot.bot</code>, I assume</p>",
        "id": 298429107,
        "sender_full_name": "Reid Barton",
        "timestamp": 1663004015
    },
    {
        "content": "<p><code>⊥</code> has two implicit arguments: <code>set α</code> which is unfortunately  defeq to <code>α → Prop</code>, and <code>(by apply_instance : has_bot (set α))</code> which is defeq to <code>(by apply_instance : has_bot (α → Prop))</code>.</p>",
        "id": 298429120,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663004021
    },
    {
        "content": "<p>Would a gadget to tell simp not to reduce arguments help?</p>",
        "id": 298433705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663005575
    },
    {
        "content": "<p>The gadget is called \"make set a structure\". <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 298460298,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663009264
    },
    {
        "content": "<p>In Lean 4, simp will actually not apply that lemma because the discrimination tree filters it out.  <code>rw</code> still has the issue though.</p>",
        "id": 298460477,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663009326
    },
    {
        "content": "<p>I assume it would be quite a bit of work to make set a structure... but given the API is very developed, maybe  not that much work?</p>",
        "id": 300133731,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663849265
    },
    {
        "content": "<p>Like essentially anywhere where people apply a set as a predicate directly would break. But I assume in most places that doesn't happen.</p>",
        "id": 300133817,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663849302
    },
    {
        "content": "<p>You're not even supposed to do so anyway, so maybe this will actually be doable!</p>",
        "id": 300134045,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663849377
    },
    {
        "content": "<p>Although it will probably involve messing with the C++ code since set notation has its own custom parser.</p>",
        "id": 300134099,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663849401
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.boolean_algebra\">docs#set.boolean_algebra</a> actually derives the instance from <code>α → Prop</code>. And I suspect this will be the same in other places too.</p>",
        "id": 300134172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663849433
    },
    {
        "content": "<p>Making set a structure would mean that <code>set_of (\\mem s) = s</code> is no longer true by definition</p>",
        "id": 300134429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663849558
    },
    {
        "content": "<p>It would be true with definitional structure eta, right?</p>",
        "id": 300134572,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663849606
    },
    {
        "content": "<p>What is definitional structure eta?</p>",
        "id": 300135641,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663849985
    },
    {
        "content": "<p>Older discussion, btw: <a href=\"#narrow/stream/113488-general/topic/with_top.20irreducible\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/with_top.20irreducible</a></p>",
        "id": 300135764,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663850032
    },
    {
        "content": "<p>If set was a structure, maybe you could also change the definition of <code>set_like</code> so that <code>set</code> and <code>finset</code> both had <code>set_like</code> instances...</p>",
        "id": 300135843,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663850045
    },
    {
        "content": "<p>If you have an element <code>x</code> of some structure type, the equality <code>(x.1, x.2, ...) = x</code>, so constructing a new structure from the fields is just the original <code>x</code>, is called \"eta reduction\". Lean 4 will add this as a definitional equality, fixing many small annoyances.</p>",
        "id": 300136215,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663850182
    },
    {
        "content": "<p>very nice</p>",
        "id": 300136255,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663850200
    }
]