[
    {
        "content": "<p>Hi, is it possible to make a new declaration created with <code>add_decl</code> protected? private? Given a <code>name</code>, is it possible to find out whether the corresponding declaration is public/protected/private?</p>",
        "id": 173356009,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1565943454
    },
    {
        "content": "<p>BTW, what is the difference between protected and private in Lean?</p>",
        "id": 173356123,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1565943604
    },
    {
        "content": "<p><code>protected</code> means you can't refer to it without the namespace, i.e. you have to write <code>foo.bar</code> even if you have <code>foo</code> open. <code>private</code> means that you cannot use that lemma outside of that file (or possibly section or something like that).</p>",
        "id": 173356218,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565943762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Can I mark a new decl created with <code>add_decl</code> as <code>protected</code>?</p>",
        "id": 173356349,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1565943929
    },
    {
        "content": "<p>I don't know.</p>",
        "id": 173356358,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565943945
    },
    {
        "content": "<p>I want to auto sync this property in <code>to_additive</code></p>",
        "id": 173356361,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1565943952
    },
    {
        "content": "<p>if there isn't an obvious option, I would guess the answer is no</p>",
        "id": 173356364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565943959
    },
    {
        "content": "<p>we can probably fix that in community lean</p>",
        "id": 173356420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565944016
    },
    {
        "content": "<p>Do you plan to drop support for lean-3.4 in mathlib anytime soon?</p>",
        "id": 173356788,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1565944449
    },
    {
        "content": "<p>If no, then I couldn't use this feature even if it was implemented in the community lean.</p>",
        "id": 173356880,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1565944569
    },
    {
        "content": "<p>meh, I think we are just waiting for a reason to break backward compatibility</p>",
        "id": 173356998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565944740
    },
    {
        "content": "<p>it's sort of a chicken and egg problem if fixes aren't made because of this</p>",
        "id": 173357034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565944778
    },
    {
        "content": "<p>Then I should make it compile at my computer (Fedora 30)</p>",
        "id": 173357120,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1565944875
    },
    {
        "content": "<p>My undergraduates do lots of random one off projects that aren't destined for mathlib -- some of them don't have a clue which version of lean they're running. They just run the one I install on their laptops and never upgrade. They don't have to do any maintenance and it just works. They would be candidate users for lean 3.5. for me the main thing is simply that they engage with Lean</p>",
        "id": 173377445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565965546
    }
]