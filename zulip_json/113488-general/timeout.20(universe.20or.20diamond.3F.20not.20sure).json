[
    {
        "content": "<p>Here's something <span class=\"user-mention\" data-user-id=\"464700\">@David Ang</span> pointed out on the Discord. <code>units_mod.fintype</code> and <code>units_mod.fintype'</code> are identical modulo an extra <code>id</code>. They both compile fine and give defeq answers. However if I generalise the <code>units.fg</code> instance to allow <code>K : Type u</code> then the first instance still compiles but the second one starts timing out. I feel like I've been getting quite good at these issues recently but here I'm lost; I'm not sure whether I should be looking for a diamond, or whether this is a universe issue.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.number_field</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">number_field</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">n</span><span class=\"bp\">`‚¨ù`</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">zpow_group_hom</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">‚Üí*</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">quotient_group.fintype_of_fg</span> <span class=\"o\">[</span><span class=\"n\">group.fg</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">$</span> <span class=\"n\">G</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">‚¨ù</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.choice</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- avoiding sorrying data</span>\n\n<span class=\"c1\">-- change {K : Type} to {K : Type u} and units_mod.fintype' times out</span>\n<span class=\"kd\">instance</span> <span class=\"n\">units.fg</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group.fg</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">units_mod.fintype</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">‚¨ù</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">quotient_group.fintype_of_fg</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"bp\">@</span><span class=\"n\">units.fg</span> <span class=\"n\">L</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- the same but without an id</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">units_mod.fintype'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">‚¨ù</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">quotient_group.fintype_of_fg</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units.fg</span> <span class=\"n\">L</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">units_mod.fintype</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">units_mod.fintype'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 272718519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645465855
    },
    {
        "content": "<p>by the way the <code>id</code> there is doing a weird thing, it's applying directly to <code>@units.fg</code>, not <code>@units.fg L _ _</code></p>",
        "id": 272718765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645466011
    },
    {
        "content": "<p>and since <code>id</code>  is not reducible you should expect it to change the results of all the typeclass searches in those <code>_</code></p>",
        "id": 272718865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645466075
    },
    {
        "content": "<p>although that doesn't really solve the question</p>",
        "id": 272718876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645466087
    },
    {
        "content": "<p>oh yeah, thanks; putting in the brackets doesn't change anything though.</p>",
        "id": 272718944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645466146
    },
    {
        "content": "<p>With <code>trace.class_instances true</code> the traces for <code>units_mod.fintype</code> and <code>units_mod.fintype'</code> are identical (over 5800 lines of it).</p>",
        "id": 272719515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645466465
    },
    {
        "content": "<p>My guess is something in defeq checking</p>",
        "id": 272719595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645466523
    },
    {
        "content": "<p>Hm, there is a type mismatch:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">--- src/expected.txt    2022-02-21 13:06:48.514253485 -0500</span><span class=\"w\"></span>\n<span class=\"gi\">+++ src/produced.txt    2022-02-21 13:06:58.170170784 -0500</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -1,140 +1,93 @@</span><span class=\"w\"></span>\n<span class=\"w\"> </span>@group.fg.{0}<span class=\"w\"></span>\n<span class=\"w\"> </span>    (@units.{0}<span class=\"w\"></span>\n<span class=\"w\"> </span>       (@coe_sort.{1 2} ...)<span class=\"w\"></span>\n<span class=\"w\"> </span>       (@ring.to_monoid.{0}...))<span class=\"w\"></span>\n<span class=\"gd\">-    (@comm_group.to_group.{0}</span><span class=\"w\"></span>\n<span class=\"gd\">-       (@units.{0}</span><span class=\"w\"></span>\n<span class=\"gd\">-          (@coe_sort.{1 2}</span><span class=\"w\"></span>\n<span class=\"gi\">+    (@units.group.{0}</span><span class=\"w\"></span>\n<span class=\"gi\">+       (@coe_sort.{1 2}</span><span class=\"w\"></span>\n<span class=\"gi\">+          (@subalgebra.{0 0} int L (@comm_ring.to_comm_semiring.{0} int int.comm_ring)</span><span class=\"w\"></span>\n<span class=\"gi\">+             (@ring.to_semiring.{0} L</span><span class=\"w\"></span>\n<span class=\"gi\">+                (@comm_ring.to_ring.{0} L</span><span class=\"w\"></span>\n<span class=\"gi\">+                   (@euclidean_domain.to_comm_ring.{0} L (@field.to_euclidean_domain.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gi\">+             (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gi\">+          Type</span><span class=\"w\"></span>\n<span class=\"gi\">+          (@set_like.has_coe_to_sort.{0 0}</span><span class=\"w\"></span>\n<span class=\"w\"> </span>             (@subalgebra.{0 0} int L (@comm_ring.to_comm_semiring.{0} int int.comm_ring)<span class=\"w\"></span>\n<span class=\"w\"> </span>                (@ring.to_semiring.{0} L<span class=\"w\"></span>\n<span class=\"w\"> </span>                   (@comm_ring.to_ring.{0} L<span class=\"w\"></span>\n<span class=\"w\"> </span>                      (@euclidean_domain.to_comm_ring.{0} L (@field.to_euclidean_domain.{0} L _inst_2))))<span class=\"w\"></span>\n<span class=\"w\"> </span>                (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2))))<span class=\"w\"></span>\n<span class=\"gd\">-             Type</span><span class=\"w\"></span>\n<span class=\"gd\">-             (@set_like.has_coe_to_sort.{0 0}</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@subalgebra.{0 0} int L (@comm_ring.to_comm_semiring.{0} int int.comm_ring)</span><span class=\"w\"></span>\n<span class=\"gd\">-                   (@ring.to_semiring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                      (@comm_ring.to_ring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                         (@euclidean_domain.to_comm_ring.{0} L (@field.to_euclidean_domain.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                   (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                L</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@subalgebra.set_like.{0 0} int L (@comm_ring.to_comm_semiring.{0} int int.comm_ring)</span><span class=\"w\"></span>\n<span class=\"gd\">-                   (@ring.to_semiring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                      (@comm_ring.to_ring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                         (@euclidean_domain.to_comm_ring.{0} L (@field.to_euclidean_domain.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                   (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2)))))</span><span class=\"w\"></span>\n<span class=\"gd\">-             (@number_field.ring_of_integers.{0} L _inst_2))</span><span class=\"w\"></span>\n<span class=\"gd\">-          (@ring.to_monoid.{0}</span><span class=\"w\"></span>\n<span class=\"gd\">-             (@coe_sort.{1 2}</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@subalgebra.{0 0} int L (@comm_ring.to_comm_semiring.{0} int int.comm_ring)</span><span class=\"w\"></span>\n<span class=\"gd\">-                   (@ring.to_semiring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                      (@comm_ring.to_ring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                         (@euclidean_domain.to_comm_ring.{0} L (@field.to_euclidean_domain.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                   (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                Type</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@set_like.has_coe_to_sort.{0 0}</span><span class=\"w\"></span>\n<span class=\"gd\">-                   (@subalgebra.{0 0} int L (@comm_ring.to_comm_semiring.{0} int int.comm_ring)</span><span class=\"w\"></span>\n<span class=\"gd\">-                      (@ring.to_semiring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                         (@comm_ring.to_ring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                            (@euclidean_domain.to_comm_ring.{0} L (@field.to_euclidean_domain.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                      (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                   L</span><span class=\"w\"></span>\n<span class=\"gd\">-                   (@subalgebra.set_like.{0 0} int L (@comm_ring.to_comm_semiring.{0} int int.comm_ring)</span><span class=\"w\"></span>\n<span class=\"gd\">-                      (@ring.to_semiring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                         (@comm_ring.to_ring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                            (@euclidean_domain.to_comm_ring.{0} L (@field.to_euclidean_domain.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                      (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2)))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@number_field.ring_of_integers.{0} L _inst_2))</span><span class=\"w\"></span>\n<span class=\"gd\">-             (@subalgebra.to_ring.{0 0} int L int.comm_ring</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2))</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2)))</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@number_field.ring_of_integers.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-       (@units.comm_group.{0}</span><span class=\"w\"></span>\n<span class=\"gi\">+             L</span><span class=\"w\"></span>\n<span class=\"gi\">+             (@subalgebra.set_like.{0 0} int L (@comm_ring.to_comm_semiring.{0} int int.comm_ring)</span><span class=\"w\"></span>\n<span class=\"gi\">+                (@ring.to_semiring.{0} L</span><span class=\"w\"></span>\n<span class=\"gi\">+                   (@comm_ring.to_ring.{0} L</span><span class=\"w\"></span>\n<span class=\"gi\">+                      (@euclidean_domain.to_comm_ring.{0} L (@field.to_euclidean_domain.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gi\">+                (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2)))))</span><span class=\"w\"></span>\n<span class=\"gi\">+          (@number_field.ring_of_integers.{0} L _inst_2))</span><span class=\"w\"></span>\n<span class=\"gi\">+       (@ring.to_monoid.{0}</span><span class=\"w\"></span>\n<span class=\"w\"> </span>          (@coe_sort.{1 2} ...)<span class=\"w\"></span>\n<span class=\"gd\">-          (@comm_ring.to_comm_monoid.{0}</span><span class=\"w\"></span>\n<span class=\"gd\">-             (@coe_sort.{1 2}</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@subalgebra.{0 0} int L (@comm_ring.to_comm_semiring.{0} int int.comm_ring)</span><span class=\"w\"></span>\n<span class=\"gd\">-                   (@ring.to_semiring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                      (@comm_ring.to_ring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                         (@euclidean_domain.to_comm_ring.{0} L (@field.to_euclidean_domain.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                   (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                Type</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@set_like.has_coe_to_sort.{0 0}</span><span class=\"w\"></span>\n<span class=\"gd\">-                   (@subalgebra.{0 0} int L (@comm_ring.to_comm_semiring.{0} int int.comm_ring)</span><span class=\"w\"></span>\n<span class=\"gd\">-                      (@ring.to_semiring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                         (@comm_ring.to_ring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                            (@euclidean_domain.to_comm_ring.{0} L (@field.to_euclidean_domain.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                      (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                   L</span><span class=\"w\"></span>\n<span class=\"gd\">-                   (@subalgebra.set_like.{0 0} int L (@comm_ring.to_comm_semiring.{0} int int.comm_ring)</span><span class=\"w\"></span>\n<span class=\"gd\">-                      (@ring.to_semiring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                         (@comm_ring.to_ring.{0} L</span><span class=\"w\"></span>\n<span class=\"gd\">-                            (@euclidean_domain.to_comm_ring.{0} L (@field.to_euclidean_domain.{0} L _inst_2))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                      (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2)))))</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@number_field.ring_of_integers.{0} L _inst_2))</span><span class=\"w\"></span>\n<span class=\"gd\">-             (@subalgebra.to_comm_ring.{0 0} int L int.comm_ring</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@euclidean_domain.to_comm_ring.{0} L (@field.to_euclidean_domain.{0} L _inst_2))</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2)))</span><span class=\"w\"></span>\n<span class=\"gd\">-                (@number_field.ring_of_integers.{0} L _inst_2)))))</span><span class=\"w\"></span>\n<span class=\"gi\">+          (@subalgebra.to_ring.{0 0} int L int.comm_ring</span><span class=\"w\"></span>\n<span class=\"gi\">+             (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2))</span><span class=\"w\"></span>\n<span class=\"gi\">+             (@algebra_int.{0} L (@division_ring.to_ring.{0} L (@field.to_division_ring.{0} L _inst_2)))</span><span class=\"w\"></span>\n<span class=\"gi\">+             (@number_field.ring_of_integers.{0} L _inst_2))))</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272720352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645467041
    },
    {
        "content": "<p>so somewhere in that monstrosity is an expensive defeq test</p>",
        "id": 272720427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645467101
    },
    {
        "content": "<p>I found something like this and extracted two terms and checked they were equal with <code>rfl</code> and it was really quick</p>",
        "id": 272720717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645467311
    },
    {
        "content": "<p>For context, I'm comparing the goal to the <code>have</code> in this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- to ensure that units.fg is not getting unfolded</span>\n<span class=\"kd\">constant</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">units.fg</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group.fg</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span>\n\n<span class=\"c1\">-- the same but without an id</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">‚¨ù</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">quotient_group.fintype_of_fg</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">units.fg</span> <span class=\"n\">L</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">units.fg</span> <span class=\"n\">L</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272720731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645467321
    },
    {
        "content": "<p>if you use <code>exact this</code> it is quick, and if you use <code>@units.fg.{0} L _ _</code> it is also quick</p>",
        "id": 272720775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645467359
    },
    {
        "content": "<p>so I think it has something to do with solving that equation while <code>units.fg.{?u}</code> still has a metavariable</p>",
        "id": 272720844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645467391
    },
    {
        "content": "<p>even though applying it to <code>L</code> will solve the metavariable</p>",
        "id": 272720862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645467413
    },
    {
        "content": "<p>Aah yes, the two humungous terms of type <code>comm_group (‚Ü•(ùìû L))À£</code> which I had were when we were in Type 0.</p>",
        "id": 272720928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645467472
    },
    {
        "content": "<p>If I tell Lean the universe level of <code>units.fg</code> it works. This really surprises me; I guess I don't know how Lean is solving universe variables (in the sense that this proves that it's not looking at L and saying \"aah yes, let's use u=0\"). Note we're <code>id</code>-free here.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.number_field</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">number_field</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">n</span><span class=\"bp\">`‚¨ù`</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">zpow_group_hom</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">‚Üí*</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">quotient_group.fintype_of_fg</span> <span class=\"o\">[</span><span class=\"n\">group.fg</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">$</span> <span class=\"n\">G</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">‚¨ù</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.choice</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- avoiding sorrying data</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">units.fg</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group.fg</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- works!</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">units_mod.fintype'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">‚¨ù</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">quotient_group.fintype_of_fg</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units.fg.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Now remove `.{0}` in `units.fg` and it fails</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">units_mod.fintype</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">‚¨ù</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">quotient_group.fintype_of_fg</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units.fg</span> <span class=\"n\">L</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 272724553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645470052
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- make field explicit in units.fg</span>\n<span class=\"kd\">instance</span> <span class=\"n\">units.fg</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group.fg</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- works very quickly</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">units_mod.fintype''</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">‚¨ù</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">quotient_group.fintype_of_fg</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units.fg.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- works but takes quite a long time</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">units_mod.fintype'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">‚¨ù</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">quotient_group.fintype_of_fg</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">units.fg.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- times out without universe hint</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">units_mod.fintype</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">‚¨ù</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">quotient_group.fintype_of_fg.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units.fg</span> <span class=\"n\">L</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- times out without universe hint</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">units_mod.fintype</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">‚¨ù</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">quotient_group.fintype_of_fg.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">units.fg</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 272725499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645470583
    }
]