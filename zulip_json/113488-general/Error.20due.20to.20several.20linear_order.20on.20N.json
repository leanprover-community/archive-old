[
    {
        "content": "<p>In the following code, I have an error at the last line of the lemma. It is apparently due to the two max involved (in <code>h</code> and in the goal) being defined through different <code>linear_order</code> on N. I am not exactly sure of what happens there. How do I go around that difficulty?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.intervals</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical.prop_decidable</span>\n\n<span class=\"sd\">/-- A set `s` is sup-closed if for all `t₁, t₂ ∈ s`, `t₁ ⊔ t₂ ∈ s`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">sup_closed</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"n\">t1</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">t2</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">t1</span> <span class=\"bp\">⊔</span> <span class=\"n\">t2</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sup_closed_tail_finset_set</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sup_closed</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">finset.Ico</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">+</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">⟨</span><span class=\"n\">r1</span><span class=\"o\">,</span> <span class=\"n\">hs1</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">r2</span><span class=\"o\">,</span> <span class=\"n\">hs2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">r1</span> <span class=\"bp\">⊔</span> <span class=\"n\">r2</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span><span class=\"n\">add_zero</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sup_eq_union</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">hs1</span><span class=\"o\">,</span> <span class=\"n\">hs2</span><span class=\"o\">,</span> <span class=\"n\">sup_eq_max</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">max_add_add_left</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">max_add_add_right</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">finset.Ico.union'</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"n\">r1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"n\">r2</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">min_self</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- error caused by two different linear_order on ℕ</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223036502,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610879765
    },
    {
        "content": "<p>The example you posted works for me?</p>",
        "id": 223036582,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1610879889
    },
    {
        "content": "<p>Do you perhaps have <code>open_locale classical</code> in your file?</p>",
        "id": 223036584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610879908
    },
    {
        "content": "<p>I added the line that apparently causes the error : <code>local attribute [instance] classical.prop_decidable</code></p>",
        "id": 223036641,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610880010
    },
    {
        "content": "<p>but if I remove that from my original file, I get errors in many other theorems. Should I add decidable hypotheses to all lemma instead of having that line on top of the file?</p>",
        "id": 223036707,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610880140
    },
    {
        "content": "<p><code>open_locale classical</code> is better, because it adjusts more carefully the priorities.</p>",
        "id": 223036770,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610880262
    },
    {
        "content": "<p>Your snippet works with <code>open_locale classical</code>, and hopefully the rest of your file should also work.</p>",
        "id": 223036773,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610880287
    },
    {
        "content": "<p>I get errors at different places, of the same type, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">semilattice_sup_bot.to_semilattice_sup</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">semilattice_sup_bot.to_semilattice_sup</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 223036832,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610880404
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with <code>open_locale classical</code>?</p>",
        "id": 223036904,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610880497
    },
    {
        "content": "<p>I'll try and make one, but it will take a while. That error is in the middle of a lemma near the end of a big new file with long proofs :)</p>",
        "id": 223036928,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610880599
    },
    {
        "content": "<p>Otherwise, you can post a gist to your file</p>",
        "id": 223037023,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610880729
    },
    {
        "content": "<p>It's in that file : <a href=\"https://github.com/leanprover-community/mathlib/blob/independence/src/measure_theory/independence.lean\">https://github.com/leanprover-community/mathlib/blob/independence/src/measure_theory/independence.lean</a></p>",
        "id": 223037175,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610881032
    },
    {
        "content": "<p>but I'll try and extract something short</p>",
        "id": 223037221,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610881089
    },
    {
        "content": "<p>Are the errors like </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>invalid field notation, 'smul_finite' is not a valid \"field\" because environment does not contain 'measure_theory.measure.smul_finite'\n  μ\nwhich has type\n  measure α\n</code></pre></div>\n<p>expected (in <code>indep2_of_indep2_sets_of_pi_system_aux</code>)? Is this related?</p>",
        "id": 223037346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610881323
    },
    {
        "content": "<p>That function should exist on that branch. There are two new lemma outside of independence.lean</p>",
        "id": 223037404,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610881400
    },
    {
        "content": "<p>in measure_space.lean</p>",
        "id": 223037467,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610881470
    },
    {
        "content": "<p>Then maybe you should give a mathlib branch to look at and not a gist. It's <code>independence</code>, right?</p>",
        "id": 223037468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610881470
    },
    {
        "content": "<p>yes it is</p>",
        "id": 223037477,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610881493
    },
    {
        "content": "<p>In short, the situation is that all was working well until I merged master into the branch a few days ago. And now I am trying to understand what changed.</p>",
        "id": 223037567,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610881589
    },
    {
        "content": "<p>The issue seems to be that because <code>finset</code> is constructive (i.e. often wants a proof of decidable equality), and your finite sets of naturals sometimes seem to sometimes have the actual proof of decidable equality and sometimes the magic (classical) one. Her's a fix for <code>aux_t1_inter_t2</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux_t1_inter_t2</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">finset.range</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">finset.Ico</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">p1</span><span class=\"o\">),</span> <span class=\"n\">f1</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">p2</span><span class=\"o\">),</span> <span class=\"n\">f2</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n      <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">set.univ</span> <span class=\"bp\">∩</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">set.univ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.Inter_inter_Inter_eq_Inter_ite</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_congr</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">∪</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp1</span><span class=\"o\">,</span> <span class=\"n\">hp2</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">finset.Ico.zero_bot</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">finset.Ico.zero_bot</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span><span class=\"n\">add_zero</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">finset.Ico.union_consecutive</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">h_le</span> <span class=\"o\">},</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">ext1</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">h_congr</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">ext1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr'</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">h_congr</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">haa'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">congr'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I am not offering an explanation as to what has changed, just a workaround.</p>",
        "id": 223037943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610882074
    },
    {
        "content": "<p>I am changing <code>refl</code> to <code>congr'</code> and <code>exact</code> to <code>convert</code> because these tactics know that by proof irrelevance it often doesn't matter which algorithm we are using (the concrete one or the one that doesn't actually exist).</p>",
        "id": 223037965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610882126
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">is_measurable.ite</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hf1m</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">is_measurable.univ</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">is_measurable.ite</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hf2m</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">is_measurable.univ</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>fixes <code>head_n_indep_tail_n_pi_systems</code>. This is a very impressive looking piece of work by the way! Many thanks!</p>",
        "id": 223038016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610882175
    },
    {
        "content": "<p>Thanks a lot for the help! I never used <code>convert</code> until now. I'll read its doc. There are so many tactics I am still not aware of.</p>",
        "id": 223038033,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610882254
    },
    {
        "content": "<p>and adding <code>by convert</code> fixes your last error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">h_pi_head</span> <span class=\"o\">:</span> <span class=\"n\">is_pi_system</span> <span class=\"n\">p_head</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">is_pi_system_pi_system_Union_Inter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_measurable'</span><span class=\"o\">)</span> <span class=\"n\">h_pi</span> <span class=\"o\">{</span><span class=\"n\">finset.range</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">sup_closed_singleton</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">N</span><span class=\"o\">)),</span>\n<span class=\"bp\">...</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_pi_tail</span> <span class=\"o\">:</span> <span class=\"n\">is_pi_system</span> <span class=\"n\">p_tail</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">is_pi_system_pi_system_Union_Inter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_measurable'</span><span class=\"o\">)</span> <span class=\"n\">h_pi</span> <span class=\"n\">S_tail</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">sup_closed_tail_finset_set</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 223038076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610882287
    },
    {
        "content": "<p>Shall I just push to the branch? I am not answering your question, I am just solving the problem at hand.</p>",
        "id": 223038083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610882308
    },
    {
        "content": "<p>This is just a trick I've seen before.</p>",
        "id": 223038093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610882334
    },
    {
        "content": "<p>Yes if you could push these, that would be great!</p>",
        "id": 223038110,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610882370
    },
    {
        "content": "<p>Are there errors in other files? I didn't check.</p>",
        "id": 223038113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610882380
    },
    {
        "content": "<p>no, the others are fine.</p>",
        "id": 223038119,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610882393
    },
    {
        "content": "<p>OK I pushed -- <code>independence.lean</code> is compiling again with <code>open_locale classical</code>.</p>",
        "id": 223038176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610882436
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 223038184,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610882473
    },
    {
        "content": "<p>Many thanks for this work! This looks like a very impressive addition to mathlib. I'm happy to help!</p>",
        "id": 223038186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610882492
    }
]