[
    {
        "content": "<p>forgive me for perhaps not using the correct terminology. what i want to know is similar to below:</p>\n<div class=\"codehilite\"><pre><span></span>lemma type_something_injectivity: ∀ {T1 T2:Type} {l1:list T1} {l2:list T2},\n  l1 == l2 -&gt;\n  T1 = T2\n:= begin\n  ???\nend\n</pre></div>\n\n\n<p>Is the above provable?</p>\n<p>More specifically, I have some inductive type <code>vexp: forall (T:Type 0), T -&gt; Type 1</code>, and I want to know that <code>vexp T1 v1 == vexp T2 v2 -&gt; T1 = T2 and v1 == v2</code></p>\n<p>does this make sense?</p>",
        "id": 125994740,
        "sender_full_name": "Scott Buckley",
        "timestamp": 1525269728
    },
    {
        "content": "<p>Yes it makes sense to ask this question, and the answer is that it is usually independent in lean and sometimes provably false</p>",
        "id": 125998623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525274886
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import logic.function\n\ninductive noninj (T : set Type) : Type\n| mk : noninj\n\nexample : ¬ (∀ x y, noninj x = noninj y → x = y) :=\nfunction.cantor_injective _\n</pre></div>",
        "id": 125998731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525275057
    },
    {
        "content": "<p>I thought that may be the case, however I couldn't understand why, but your example makes it clear. Thanks very much! :)</p>",
        "id": 126023472,
        "sender_full_name": "Scott Buckley",
        "timestamp": 1525311482
    }
]