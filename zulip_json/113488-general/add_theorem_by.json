[
    {
        "content": "<p>Why does this fail?</p>\n<div class=\"codehilite\"><pre><span></span>meta  def  foo : tactic unit :=\ndo tactic.add_theorem_by `bar [] (expr.const `unit []) (do tactic.constructor, return ()),\ntactic.add_theorem_by `baz [] (expr.const `unit []) (do\nbar ‚Üê tactic.get_local `bar,\ntactic.exact bar,\nreturn ()),\nreturn ()\n</pre></div>",
        "id": 124151486,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1521898244
    },
    {
        "content": "<p>What error do you get?</p>",
        "id": 124151531,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521898329
    },
    {
        "content": "<p>\"get_local tactic failed, unknown 'bar'\"</p>",
        "id": 124151537,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1521898440
    },
    {
        "content": "<p>Ah I see! You need <code>resolve_name</code></p>",
        "id": 124151623,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521898612
    },
    {
        "content": "<p><code>get_local</code> is only for local constants</p>",
        "id": 124151626,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521898624
    },
    {
        "content": "<p>Is there a resource for more beautiful fresh local names than <code>mk_fresh_name</code>?</p>",
        "id": 124151804,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1521899085
    },
    {
        "content": "<p>yes, I think it is called <code>get_unused_name</code></p>",
        "id": 124151860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521899226
    }
]