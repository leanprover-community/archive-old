[
    {
        "content": "<p>How do I prove this in a one-liner:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comm_ring_of_injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">comm_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"err\">›</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168117263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560501388
    },
    {
        "content": "<p>I was hoping that <code>all_goals { intros, apply inj, simp [zero, one, mul, add, neg] },</code> would close most of the goals. But it doesn't...</p>",
        "id": 168118699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560502822
    },
    {
        "content": "<p>I guess we have some instance that says that a subgroup of a group is a group. Maybe there is some analogous instance that a subring of a ring is a ring. So you could just use this instance and then <code>transfer</code> the structure over to alpha via the canonical bijection.</p>",
        "id": 168118955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560503065
    },
    {
        "content": "<p>I was hoping there would be a 1-line tactic proof that works with the current state of mathlib... <code>transfer</code> doesn't currently work.</p>",
        "id": 168119402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560503590
    },
    {
        "content": "<p>Oh well, stick it on the list at <a href=\"https://github.com/leanprover-community/mathlib/issues/408\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/408\">https://github.com/leanprover-community/mathlib/issues/408</a></p>",
        "id": 168119505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560503680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> How would you prove this?</p>",
        "id": 168145955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560526733
    },
    {
        "content": "<p>lemme see...</p>",
        "id": 168148914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560528769
    },
    {
        "content": "<p>I can't prove it. It's because of <code>+</code> being elaborated differently in the two different contexts.</p>",
        "id": 168151265,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560530500
    },
    {
        "content": "<p>Huh? This should be provable, right?</p>",
        "id": 168153162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560531889
    },
    {
        "content": "<p>like I can't prove it using tactics</p>",
        "id": 168153371,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560532044
    },
    {
        "content": "<p>Any proof is fine... but I expected/hoped that a tactic proof would be way shorter than a term-mode proof</p>",
        "id": 168153927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560532440
    },
    {
        "content": "<p>as in I can't prove it using a few lines</p>",
        "id": 168153980,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560532460
    },
    {
        "content": "<p>What exactly is the elaboration issue?</p>",
        "id": 168154138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560532584
    },
    {
        "content": "<p>in <code>add</code>, the <code>+</code> is <code>@has_add.add \\a _inst_3</code> or something like that</p>",
        "id": 168154459,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560532886
    },
    {
        "content": "<p>but in the goals it is <code>@has_add.add \\a (semigroup.to_has_add ...)</code> etc</p>",
        "id": 168154476,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560532912
    },
    {
        "content": "<p>Hmm, that's sad...</p>",
        "id": 168154720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560533135
    },
    {
        "content": "<p>I also need the dual version, with a surjective map...</p>",
        "id": 168154779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560533166
    },
    {
        "content": "<p>I guess I will just manually proof all the goals</p>",
        "id": 168154797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560533180
    },
    {
        "content": "<p>I'm just now sort of getting an inkling of why everyone wants a beefed up <code>transfer</code>, since I rarely deal in very abstract types. But I'm unsure of why people think a 1-line proof is possible. For any map between two types equipped with a ring instance you will always have to prove that it is a ring homomorphism, right? Isn't isomorphism in the context of rings an equivalence relation, so you could use the same machinery to reason about them? (sorry if this observation sounds incredibly stupid to those who have spent much more time thinking about this sort of thing)</p>",
        "id": 168155802,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1560533981
    },
    {
        "content": "<p>Mathematicians look at the question and cannot see what the issue is.</p>",
        "id": 168156050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560534148
    },
    {
        "content": "<p>alpha is a subset of beta closed under all the operations and it will inherit all of the axioms automatically -- of course it's a ring. What frustrates us is that apparently this is not obvious to computer scientists.</p>",
        "id": 168156117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560534219
    },
    {
        "content": "<p>Johan's assumptions identify alpha with a subtype of beta in a way which preserves everything of interest, so whatever is there left to check?</p>",
        "id": 168156229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560534289
    },
    {
        "content": "<p>Mathematicians have a zero-line proof that alpha is a ring. In a maths lecture you would just deduce it immediately.</p>",
        "id": 168156275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560534331
    },
    {
        "content": "<p>For example <code>f (x + y) = f x + f y</code> and injectivity of <code>f</code> immediately imply associativity of alpha's + because we imagine alpha as literally being a subset of beta with the induced +.</p>",
        "id": 168156380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560534432
    },
    {
        "content": "<p>Here is the one-line maths proof:<br>\n\"All the data is there, and <code>f</code> is structure preserving. The ring axioms are universal formulas in the language of rings. Since <code>f</code> is injective this means we are done.\"</p>",
        "id": 168157029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560534915
    },
    {
        "content": "<p>The Lean proof should be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">inj</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 168157150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560535004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <code>erw</code> helps. This is what I've got for the surjective variant:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">comm_ring_of_surjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sur</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">comm_ring</span> <span class=\"n\">α&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_zero</span> <span class=\"n\">α&#39;</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_one</span> <span class=\"n\">α&#39;</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_add</span> <span class=\"n\">α&#39;</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_mul</span> <span class=\"n\">α&#39;</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_neg</span> <span class=\"n\">α&#39;</span><span class=\"err\">›</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">sur</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">sur</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">sur</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"err\">←</span> <span class=\"n\">zero</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">erw</span> <span class=\"err\">←</span> <span class=\"n\">one</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">erw</span> <span class=\"err\">←</span> <span class=\"n\">add</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">erw</span> <span class=\"err\">←</span> <span class=\"n\">mul</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">erw</span> <span class=\"err\">←</span> <span class=\"n\">neg</span> <span class=\"o\">},</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168159057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560536463
    },
    {
        "content": "<p>so we should have <code>esimp</code></p>",
        "id": 168163715,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560539999
    },
    {
        "content": "<p>Sounds eslow</p>",
        "id": 168164104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560540283
    },
    {
        "content": "<p>I never could understand how <code>erw</code> is different from <code>rw</code>.</p>",
        "id": 168164593,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1560540663
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comm_ring_of_injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">comm_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"err\">›</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">inj</span><span class=\"o\">,</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">zero</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">erw</span> <span class=\"n\">one</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">erw</span> <span class=\"n\">add</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">erw</span> <span class=\"n\">mul</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">erw</span> <span class=\"n\">neg</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168170752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560545497
    },
    {
        "content": "<p>Yep, I also found that one.</p>",
        "id": 168170941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560545665
    },
    {
        "content": "<p>It's sad that it seems a bit slow...</p>",
        "id": 168170948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560545680
    },
    {
        "content": "<p>But it works (-;</p>",
        "id": 168170958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560545692
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"c1\">-- elaboration of comm_ring_of_injective took 493ms</span>\n<span class=\"n\">def</span> <span class=\"n\">comm_ring_of_injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">comm_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"err\">‹</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"err\">›</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">inj</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">mul</span> <span class=\"o\">},</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">add</span> <span class=\"o\">},</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">mul</span> <span class=\"o\">},</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">neg</span> <span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">zero</span> <span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">one</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">add_left_neg</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168171158,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560545886
    },
    {
        "content": "<blockquote>\n<p>I never could understand how <code>erw</code> is different from <code>rw</code>.</p>\n</blockquote>\n<p>The source is quite transparent about this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">rewrite</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">rw_rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">propagate_tags</span> <span class=\"o\">(</span><span class=\"n\">rw_core</span> <span class=\"n\">q</span> <span class=\"n\">l</span> <span class=\"n\">cfg</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">erewrite</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">rw_rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">md</span> <span class=\"o\">:=</span> <span class=\"n\">semireducible</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">propagate_tags</span> <span class=\"o\">(</span><span class=\"n\">rw_core</span> <span class=\"n\">q</span> <span class=\"n\">l</span> <span class=\"n\">cfg</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>The difference is that <code>rewrite_core</code> is allowed to peek into <code>semireducible</code> definitions, where <code>reducible</code> is the default. This means you need to do less explicit unfolding for your rewrites to succeed, but because more definitions are exposed and unification is expensive, <code>erw</code> can be an order of magnitude slower.</p>",
        "id": 168191443,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1560574134
    }
]