[
    {
        "content": "<p>The last lemma here is hard to prove, and really should be defeq for type class inference to be useful. Is this a bug or user error? I think the use of macros maybe breaks it, since <code>B.to_A</code> is defined using a macro and not <code>A.mk _</code>, but I don't really know what I'm talking about.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"k\">show</span> <span class=\"n\">C</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_C</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"k\">show</span> <span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 158396821,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550013204
    },
    {
        "content": "<blockquote>\n<p>think the use of macros maybe breaks it, since B.to_A is defined using a macro and not <code>A.mk _</code></p>\n</blockquote>\n<p>That's not it. When you have <code>extends A a</code>, that gives <code>B</code> a <code>to_A</code> field of type <code>A a</code></p>",
        "id": 158399571,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550015966
    },
    {
        "content": "<p>In the example, where is the <code>C</code> instance coming from?</p>",
        "id": 158399659,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550016009
    },
    {
        "content": "<p>In real life <code>B</code> is euclidean domain, <code>C</code> is integral domain and <code>A</code> is comm ring more or less. I'm getting rid of <code>nonzero_comm_ring </code>and replacing it with <code>zero_ne_one_class'</code> as discussed in</p>",
        "id": 158399791,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550016130
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/semiring.20polynomials\" title=\"#narrow/stream/116395-maths/topic/semiring.20polynomials\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/semiring.20polynomials</a></p>",
        "id": 158399801,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550016145
    },
    {
        "content": "<p>I guess the difference is an eta expansion somewhere. This one works.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">a</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A&#39;</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 158401174,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550017699
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"n\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"k\">show</span> <span class=\"n\">C</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_C</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"k\">show</span> <span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">unfreezeI</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"bp\">_</span><span class=\"n\">to_A</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 158401405,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550017967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> a surprising solution to your question:</p>",
        "id": 158401630,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550018253
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"n\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"n\">α</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_C</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 158401632,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550018255
    },
    {
        "content": "<p>the solution is old_structure_cmd</p>",
        "id": 158401635,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550018261
    },
    {
        "content": "<p>could this be the solution for the snailish elaboration of polynomials?</p>",
        "id": 158401830,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550018470
    },
    {
        "content": "<p>Will the old structure command still be there in Lean 4?</p>",
        "id": 158417857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550040835
    },
    {
        "content": "<p>I'm not sure. This does look like a major problem with new structures right now. <code>old_structure_cmd</code> works in this example, but breaks in my use case, and I haven't managed to minimise that yet.</p>",
        "id": 158433619,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550058458
    },
    {
        "content": "<p>I'm not sure why this is essential. Mostly we only need that projections work out to defeq, not the instances themselves</p>",
        "id": 158459437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550078702
    },
    {
        "content": "<p>it's actually pretty hard to get instances to work out since you almost always end up doing an unpacking and rebuilding step that would require eta for structures to undo</p>",
        "id": 158459545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550078769
    },
    {
        "content": "<blockquote>\n<p>I'm not sure why this is essential. Mostly we only need that projections work out to defeq, not the instances themselves</p>\n</blockquote>\n<p>This is why it's essential. There are more functions defined on a class than just it's projections</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">a&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">a&#39;</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">a&#39;</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"c1\">-- doesn&#39;t work</span>\n</pre></div>",
        "id": 158605429,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550227308
    },
    {
        "content": "<p>it does work by defeq though</p>",
        "id": 158605787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550227763
    },
    {
        "content": "<p>i.e. just <code>h</code> proves this</p>",
        "id": 158605794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550227777
    },
    {
        "content": "<p>Yeah, but that's not always convenient.</p>",
        "id": 158605869,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550227861
    },
    {
        "content": "<p>I'm not sure there is any good solution unless we unpack and repack the argument in <code>B.to_A</code></p>",
        "id": 158605937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550227930
    },
    {
        "content": "<p>Like old structures?</p>",
        "id": 158605966,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550227972
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">a&#39;</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_A&#39;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">a&#39;</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_A</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 158605972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550227980
    },
    {
        "content": "<p>old structures have to do this because they don't have a field for it</p>",
        "id": 158605994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550227999
    },
    {
        "content": "<p>so it really is a pack/unpack</p>",
        "id": 158606002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550228012
    },
    {
        "content": "<p>here it's an entirely superfluous pack/unpack</p>",
        "id": 158606007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550228024
    },
    {
        "content": "<p>Does this mean it is impossible to do classes that extend each other in complex ways using new structures. Something like <code>monoid</code>, <code>comm_monoid</code>, <code>group</code>, <code>comm_group</code> seems difficult to do with new structures without this issue.</p>",
        "id": 158606088,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550228117
    },
    {
        "content": "<p>no, it just means that functions with dependencies like this will be difficult to work with</p>",
        "id": 158606194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550228256
    },
    {
        "content": "<p>But that's quite a lot of functions though right?</p>",
        "id": 158606248,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550228285
    },
    {
        "content": "<p>I don't think so...</p>",
        "id": 158606253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550228292
    },
    {
        "content": "<p>Isn't it more or less any function on a monoid other than <code>mul</code></p>",
        "id": 158606269,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550228331
    },
    {
        "content": "<p>Functions are almost always defined in terms of projections out of the structure instance</p>",
        "id": 158606274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550228341
    },
    {
        "content": "<p>including <code>a'</code> in the example</p>",
        "id": 158606283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550228350
    },
    {
        "content": "<p>so the rule is that these need to be defeq</p>",
        "id": 158606290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550228372
    },
    {
        "content": "<p>If you want to never use <code>rw</code></p>",
        "id": 158606296,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550228386
    },
    {
        "content": "<p>you can have rw take a variable for this argument</p>",
        "id": 158606347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550228408
    },
    {
        "content": "<p>Alternatively, structure eta</p>",
        "id": 158606366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550228461
    },
    {
        "content": "<p>I think that my model of a \"generic class\" is something like a perfectoid space, and Mario's might be something very different.</p>",
        "id": 158606440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550228529
    },
    {
        "content": "<p>Here's what I had to change to the proof that ED -&gt; PID to <code>principal := λ S, @is_principal.mk _ (id _) _</code>.</p>",
        "id": 158606444,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550228539
    },
    {
        "content": "<p>Otherwise it uses a non defeq <code>comm_ring</code> instance</p>",
        "id": 158606448,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550228560
    },
    {
        "content": "<p>It happens enough to be very annoying.</p>",
        "id": 158606536,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550228663
    }
]