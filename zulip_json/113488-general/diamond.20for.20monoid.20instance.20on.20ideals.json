[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> seems to have found a diamond in recent mathlib; she bumped her adeles project and some of her code stopped working; mathlib is finding two instances of a monoid structure on ideals of the integers of a number field. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.number_field</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.dedekind_domain</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">number_field</span>\n\n<span class=\"c1\">-- X and Y both have type `monoid (ideal ↥(ring_of_integers K))`</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_monoid</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule.semiring</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span>\n          <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">number_field.ring_of_integers_algebra</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_1</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.id</span> <span class=\"n\">K</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">K</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))))))</span>\n\n<span class=\"c1\">-- depends on `ideal.cancel_comm_monoid_with_zero` so noncomputable</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_monoid</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_monoid_with_zero.to_monoid_with_zero</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cancel_comm_monoid_with_zero.to_comm_monoid_with_zero</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ideal.cancel_comm_monoid_with_zero</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_of_integers</span> <span class=\"n\">K</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span>\n             <span class=\"n\">_</span>\n             <span class=\"n\">_</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>One is computable, the other isn't. She's worked around the issue with some cunning priority-setting but because the code used to work this is probably a consequence of a relatively recent commit.<br>\nThe fix was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"n\">comm_monoid_with_zero.to_monoid_with_zero</span>\n</code></pre></div>",
        "id": 269574250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643291527
    },
    {
        "content": "<p>I wonder if this is due to my ring of integers algebra instance? (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/number_field.ring_of_integers_algebra\">docs#number_field.ring_of_integers_algebra</a>). what happens if she turns it off?</p>",
        "id": 269574894,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643291821
    },
    {
        "content": "<p>(also, it seems the pretty-printing bug from the widget has spread to the docs website :()</p>",
        "id": 269574964,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643291851
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> . Yes, it seems it was caused by the <code>ring_of_integers_algebra</code> instance; I commented it out and the error went away (Is this what you meant by \"turning it off\"?).</p>",
        "id": 269607642,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1643304656
    },
    {
        "content": "<p>You can also do <code>local attribute [-instance] ring_of_integers_algebra</code> within a file or section to turn an instance of locally but still have it availiable elsewhere</p>",
        "id": 269608173,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643304870
    },
    {
        "content": "<p>you should able to just do <code>attribute [-instance] ring_of_integers_algebra</code>. I added it for a reason I later realised was mathematically wrong, so if it's causing diamonds I think we should definitely consider either fully removing it or just making a <code>def</code>.</p>",
        "id": 269608192,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643304874
    },
    {
        "content": "<p>How exactly is the diamond related to that algebra instance?</p>",
        "id": 269608465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643304989
    },
    {
        "content": "<p><code>algebra K K</code> inducing <code>algebra O K O K</code>, it seems</p>",
        "id": 269608708,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643305094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/diamond.20for.20monoid.20instance.20on.20ideals/near/269608192\">said</a>:</p>\n<blockquote>\n<p>you should able to just do <code>attribute [-instance] ring_of_integers_algebra</code>. </p>\n</blockquote>\n<p>Thanks! I didn't know about this.</p>",
        "id": 269608862,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1643305165
    },
    {
        "content": "<p>I think this diamond with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.algebra'\">docs#subalgebra.algebra'</a> is fundamentally the same problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">algebra.id</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">subalgebra.algebra'</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">algebra.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">algebra.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">subtype.mk</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which is the fact that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.coe_eta\">docs#subtype.coe_eta</a> is not true definitionally (until Lean 4).</p>",
        "id": 273414112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645981612
    },
    {
        "content": "<p>can we hack definitional eta into Lean3 whilst we wait for mathport? or is this just ridiculous?</p>",
        "id": 273414255,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645981797
    },
    {
        "content": "<p>This seems to be caused by <a href=\"#narrow/stream/113488-general/topic/instance.20diamond.20in.20algebra.2Eid.20for.20subtypes/near/273414112\">a diamond in subtypes with<code>algebra.id</code></a> (moved out of this thread)</p>",
        "id": 273416482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645984624
    }
]