[
    {
        "content": "<p>I have tried to work this down to a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. Deleting any line or inserting empty lines will remove this bug. It might be only on my VSCode and extension version. Unclear.</p>\n<p>In a new file, paste the following. Place your cursor on the comma indicated. The goal shown has nothing to do with the lemma being proved at that point.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring_exp</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- example : (∑ x, ∑ y, A 0 x * (-1) ^ (x : ℕ) * A 1 (x.succ_above y) * (-1) ^ (y : ℕ)) =</span>\n<span class=\"c1\">--           -(∑ x, ∑ y, A 1 x * (-1) ^ (x : ℕ) * A 0 (x.succ_above y) * (-1) ^ (y : ℕ)) :=</span>\n<span class=\"c1\">-- begin</span>\n<span class=\"c1\">--   simp_rw ←finset.sum_neg_distrib,</span>\n<span class=\"c1\">--   ring_exp,</span>\n<span class=\"c1\">--   rw fin.sum_univ_cast_succ,</span>\n<span class=\"c1\">--   rw @fin.sum_univ_cast_succ _ _ (n + 1),</span>\n<span class=\"c1\">--   congr,</span>\n<span class=\"c1\">--   ext x,</span>\n<span class=\"c1\">--   congr&#39; 1 with y,</span>\n<span class=\"c1\">--   simp,</span>\n<span class=\"c1\">--   swap,</span>\n<span class=\"c1\">--   ext y,</span>\n<span class=\"c1\">--   simp,</span>\n<span class=\"c1\">-- end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inv_ite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hinv</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">involutive</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">apply_ite</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">not_not</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">hinv</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inv_ite</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">neg_involutive</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">lt_trichotomy</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">hne</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_lt</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">if_neg</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">not_not</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inv_ite</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">neg_involutive</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">lt_trichotomy</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">hne</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_lt</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">if_neg</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">not_not</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">ite</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">apply_ite</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">test</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">vne_of_ne</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_ne</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span><span class=\"o\">],</span> <span class=\"c1\">--place cursor on terminal comma</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209444156,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599599122
    },
    {
        "content": "<p><a href=\"user_uploads/3121/MYFe3z6khcHihlxnB6HmR831/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/3121/MYFe3z6khcHihlxnB6HmR831/image.png\" title=\"image.png\"><img src=\"user_uploads/3121/MYFe3z6khcHihlxnB6HmR831/image.png\"></a></div>",
        "id": 209444215,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599599155
    },
    {
        "content": "<p>I can reproduce this in emacs, so I think it's a Lean server mode bug. It seems to be very sensitive to the exact positions involved.</p>",
        "id": 209453340,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599605238
    },
    {
        "content": "<p>Oooh wow, if it is reproducable in emacs...</p>",
        "id": 209470781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599625425
    },
    {
        "content": "<p>I mean, then it must be a <em>feature</em> instead of a <em>bug</em>, right?</p>",
        "id": 209470820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599625445
    },
    {
        "content": "<p>My guess is that it has something to do with congr' 1 with x.</p>",
        "id": 209502864,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599653946
    },
    {
        "content": "<p>Because adding more lines to the last proof retains the bug</p>",
        "id": 209502897,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599653965
    },
    {
        "content": "<p>This looks like a problem with the pattern <code> `[ ... ] </code> used in the definition on <code>tactic.congr'</code>.</p>",
        "id": 209569135,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1599685810
    },
    {
        "content": "<p>Note that the bug only happens on line 65, column 33, which is exactly the place where the first <code> `[ ... ] </code> occurs in the definition of <code>tactic.congr'</code>.</p>",
        "id": 209569264,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1599685909
    },
    {
        "content": "<p>and indeed, it also happens on line 66, column 17, which is another occurrence of <code> `[ ... ] </code>.</p>",
        "id": 209569512,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1599686047
    },
    {
        "content": "<p>wow, how did you notice that? o.O</p>",
        "id": 209574232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599688953
    },
    {
        "content": "<p>Mostly by minimizing the example further (emptying lines above the occurrence), trying to replace it with a simpler tactic (the bug still happened with <code>tactic.congr'</code> instead of <code>congr'</code>), and then suspiciously it didn't happen when I defined <code>tactic.congr2</code> with the same implementation as <code>tactic.congr'</code>.</p>",
        "id": 209576359,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1599690535
    },
    {
        "content": "<p>Whut? This is really sick... Kudos to Floris!</p>",
        "id": 209588140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599701829
    },
    {
        "content": "<p>(Lean issue: <a href=\"https://github.com/leanprover-community/lean/issues/468\">lean#468</a>)</p>",
        "id": 216533403,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605217515
    }
]