[
    {
        "content": "<p>We currently have a function <code>fin.pred_above p i h</code>, which sends <code>fin (n+1)</code> to <code>fin n</code>, by subtracting one if <code>p &lt; i</code>.</p>\n<p>It's set up to take a proof that <code>h : p \\ne i</code>. This seems really strange to me --- more natural would be to have a total function, which just sends both <code>p</code> and <code>p+1</code> to <code>p</code>.</p>\n<p>Would anyone object if I tried to make this change? (Or know what would go horribly wrong elsewhere?)</p>",
        "id": 225517647,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612775473
    },
    {
        "content": "<p>I've also noticed this. I think this is a good idea. But I guess you need to think about <code>n = 0</code>.</p>",
        "id": 225518588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612776027
    },
    {
        "content": "<p>Indeed. But I think that is only a matter of choosing between a hypothesis <code>0 &lt; n</code>, or sending <code>fin (n+2)</code> to <code>fin (n+1)</code>.</p>",
        "id": 225519075,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612776351
    },
    {
        "content": "<p>My inclination is to use the former, to avoid DTT hell.</p>",
        "id": 225519147,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612776377
    },
    {
        "content": "<p>yup, agreed</p>",
        "id": 225519151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612776386
    },
    {
        "content": "<p>In either case it's still a \"total function\".</p>",
        "id": 225519155,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612776388
    },
    {
        "content": "<p>We could even consider using <code>[fact (0 &lt; n)]</code></p>",
        "id": 225519175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612776404
    },
    {
        "content": "<p>It looks like <code>pred_above</code> is not actually used much, so I might just go for it.</p>",
        "id": 225519178,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612776405
    },
    {
        "content": "<p><del>I think a better approach is to have <code>p : fin n</code>, and <code>i : fin (n+1)</code>, and then subtract one if <code>p &lt; i</code>. That ensures both that <code>n \\ne 0</code>, and that subtraction actually occurs somewhere.</del></p>",
        "id": 225520283,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612777098
    },
    {
        "content": "<p>The one downside to this is that you lose the \"injectivity\" of <code>fin.pred_above</code>.</p>",
        "id": 225562945,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612799246
    },
    {
        "content": "<p>And if one was to change <code>fin.pred_above</code>, what about <code>fin.succ_above</code>?</p>",
        "id": 225562975,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612799263
    },
    {
        "content": "<p>I agree that this should be made total (at the very least, the total version should exist).</p>\n<p>You don't really lose the \"injectivity\", it will still hold under the assumptions that your input is not equal to <code>i</code>, and these inequalities must also appear in any current statement of \"injectivity\".</p>",
        "id": 225567757,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612801187
    },
    {
        "content": "<p>As far as I can see, <code>fin.succ_above</code> is already as it should be.</p>",
        "id": 225612682,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612820459
    },
    {
        "content": "<p>I got hung up last night on some lemmas about insert_nth and remove_nth that used <code>pred_above</code>, but I think I see how to handle them now.</p>",
        "id": 225612742,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612820494
    },
    {
        "content": "<p>What exactly do you suggest to do with <code>n = 0</code>?</p>",
        "id": 225734003,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612895041
    },
    {
        "content": "<p>I've made a PR now, as <a href=\"https://github.com/leanprover-community/mathlib/issues/6125\">#6125</a>. To handle <code>n = 0</code>, the change I've made is that <code>p : fin n</code> while <code>i : fin (n + 1)</code>, and <code>p.pred_above i</code> produces something in <code>fin n</code>. Notice in particular that the original <code>pred_above</code> allowed <code>p : fin (n+1)</code>. (This is fine if we insist <code>p \\ne i</code>, but not if we want a total function, and this is also what causes the problem at <code>n = 0</code>.)</p>",
        "id": 225766819,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612909320
    },
    {
        "content": "<p>5^3*7^2</p>",
        "id": 225769823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612911178
    }
]