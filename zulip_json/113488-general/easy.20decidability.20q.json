[
    {
        "content": "<p>Is this provable:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">multiset</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>and if so, is there a cheap proof? I tried doing it by hand and ended up with a horrible heq goal :-/</p>",
        "id": 129492071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531336326
    },
    {
        "content": "<p>yes it is provable</p>",
        "id": 129492098,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531336373
    },
    {
        "content": "<p>might want to destruct <code>C</code></p>",
        "id": 129492116,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531336393
    },
    {
        "content": "<p>Isn't membership in multisets decidable? You combine that fact with decidability of existentials on finite ranges</p>",
        "id": 129492249,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531336513
    },
    {
        "content": "<p>If I use lists I end up with</p>\n<div class=\"codehilite\"><pre><span></span>C1 C2 : list ℕ,\nCrel : setoid.r C1 C2\n⊢ eq.rec\n      (list.rec (is_false _)\n         (λ (n : ℕ) (L : list ℕ),\n            decidable.rec\n              (λ (D : ¬∃ (a : ℕ), a ≥ 4 ∧ a ∈ ↑L),\n                 dite (3 &lt; n) (λ (h : 3 &lt; n), is_true _) (λ (h : ¬3 &lt; n), is_false _))\n              (λ (D : ∃ (a : ℕ), a ≥ 4 ∧ a ∈ ↑L), is_true _))\n         C1)\n      _ =\n    list.rec (is_false _)\n      (λ (n : ℕ) (L : list ℕ),\n         decidable.rec\n           (λ (D : ¬∃ (a : ℕ), a ≥ 4 ∧ a ∈ ↑L),\n              dite (3 &lt; n) (λ (h : 3 &lt; n), is_true _) (λ (h : ¬3 &lt; n), is_false _))\n           (λ (D : ∃ (a : ℕ), a ≥ 4 ∧ a ∈ ↑L), is_true _))\n      C2\n</pre></div>",
        "id": 129492333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531336598
    },
    {
        "content": "<p>If I use <code>multiset.rec</code> I end up with</p>\n<div class=\"codehilite\"><pre><span></span>a a&#39; : ℕ,\nm : multiset ℕ,\nb : decidable (∃ (a : ℕ), a ≥ 4 ∧ a ∈ m)\n⊢ decidable.rec\n      (λ (H : ¬∃ (a : ℕ), a ≥ 4 ∧ a ∈ a&#39; :: m),\n         dite (3 &lt; a) (λ (h : 3 &lt; a), is_true _) (λ (h : ¬3 &lt; a), is_false _))\n      (λ (H : ∃ (a : ℕ), a ≥ 4 ∧ a ∈ a&#39; :: m), is_true _)\n      (decidable.rec\n         (λ (H : ¬∃ (a : ℕ), a ≥ 4 ∧ a ∈ m),\n            dite (3 &lt; a&#39;) (λ (h : 3 &lt; a&#39;), is_true _) (λ (h : ¬3 &lt; a&#39;), is_false _))\n         (λ (H : ∃ (a : ℕ), a ≥ 4 ∧ a ∈ m), is_true _)\n         b) ==\n    decidable.rec\n      (λ (H : ¬∃ (a_1 : ℕ), a_1 ≥ 4 ∧ a_1 ∈ a :: m),\n         dite (3 &lt; a&#39;) (λ (h : 3 &lt; a&#39;), is_true _) (λ (h : ¬3 &lt; a&#39;), is_false _))\n      (λ (H : ∃ (a_1 : ℕ), a_1 ≥ 4 ∧ a_1 ∈ a :: m), is_true _)\n      (decidable.rec\n         (λ (H : ¬∃ (a : ℕ), a ≥ 4 ∧ a ∈ m),\n            dite (3 &lt; a) (λ (h : 3 &lt; a), is_true _) (λ (h : ¬3 &lt; a), is_false _))\n         (λ (H : ∃ (a : ℕ), a ≥ 4 ∧ a ∈ m), is_true _)\n         b)\n</pre></div>",
        "id": 129492409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531336721
    },
    {
        "content": "<p>I assume I'm doing something wrong.</p>",
        "id": 129492413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531336726
    },
    {
        "content": "<p>I think there might be some lemmas that one could use</p>",
        "id": 129492442,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531336778
    },
    {
        "content": "<p>bounded existential</p>",
        "id": 129492448,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531336784
    },
    {
        "content": "<blockquote>\n<p>Isn't membership in multisets decidable? You combine that fact with decidability of existentials on finite ranges</p>\n</blockquote>\n<p><code>example (D : multiset ℕ) (d : ℕ) : decidable (d ∈ D) := by apply_instance </code> works</p>",
        "id": 129492681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531337045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> shouldn't you be watching the world cup?</p>",
        "id": 129492691,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531337065
    },
    {
        "content": "<p>Oh, has it started?</p>",
        "id": 129492692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531337075
    },
    {
        "content": "<p>:o</p>",
        "id": 129492694,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531337084
    },
    {
        "content": "<p>it's already 67 minutes</p>",
        "id": 129492696,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531337094
    },
    {
        "content": "<p>You can try this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">suffices</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span><span class=\"o\">),</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">resetI</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">decidable_of_iff</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">exists_congr</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 129492939,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531337447
    },
    {
        "content": "<p>well you want P to be decidable</p>",
        "id": 129492951,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531337471
    },
    {
        "content": "<p>Yes, that's right</p>",
        "id": 129493047,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531337557
    },
    {
        "content": "<p>I don't understand how to use this code. If I comment out the instance then there's an error in the final <code>apply_instance</code> but if I look at what needs to be proved at that point it seems to be <code>decidable (∃ (a : ℕ) (H : a ∈ C), a ≥ 4)</code> which is exactly my question I think?</p>",
        "id": 129493435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531338104
    },
    {
        "content": "<p>Ok, one second I'm filling in that instance</p>",
        "id": 129494162,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531338799
    },
    {
        "content": "<p>Add this before Simon'd code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">decidable_exists_multiset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">s</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">decidable_exists_mem</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">subsingleton</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 129494757,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531339378
    },
    {
        "content": "<p>Nice! that's better than what I have</p>",
        "id": 129494794,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531339441
    },
    {
        "content": "<p>It would be worth pushing to mathlib I think along with a <code>finset</code> counterpart and decidable universals for both</p>",
        "id": 129494850,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531339477
    },
    {
        "content": "<p>Will do.</p>",
        "id": 129494880,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531339511
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 129494979,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531339626
    },
    {
        "content": "<p>Thanks to both of you! I cannot believe how much trouble Ellen's dots and boxes project is causing me :-)</p>",
        "id": 129500464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531344408
    },
    {
        "content": "<p>What's that project?</p>",
        "id": 129500565,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531344543
    },
    {
        "content": "<p>She's formalizing some of the theory of dots and boxes</p>",
        "id": 129500822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531344926
    }
]