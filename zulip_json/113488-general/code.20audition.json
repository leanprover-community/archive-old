[
    {
        "content": "<p>I'm trying out lean, and I think it would be helpful if I can have some comments on my code. It compiles with lean 3.11.0. I'm mainly looking for advise on how to make things better. For example, I'm not really sure that I like my definition of <code>fold</code>, and I certainly don't like my definition of <code>assoc_concat</code>. </p>\n<p>What I don't like about <code>fold</code> is that I refer to weird variables that are generated by lean. What I don't like about <code>assoc_concat</code> is that I have to do this calculation with a few reflexivity paths. I would have assumed that lean can calculate those automatically, but I wasn't able to make it do a direct <code>rewrite</code>.</p>\n<p>Thank you in advance for your advice.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">unit</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">nil</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">fold</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">b</span><span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">μ</span> <span class=\"n\">x_a</span> <span class=\"n\">x_ih</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">length</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">refine</span> <span class=\"n\">fold</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">sum_list_ℕ</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">refine</span> <span class=\"n\">fold</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">concat</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">refine</span> <span class=\"n\">fold</span> <span class=\"n\">id</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">flatten</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">exact</span> <span class=\"n\">fold</span> <span class=\"n\">nil</span> <span class=\"n\">concat</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">reverse</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nil</span><span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">concat</span> <span class=\"n\">x_ih</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">x_a</span><span class=\"o\">)}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">assoc_concat</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">reflexivity</span><span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"k\">calc</span>\n    <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x_a</span> <span class=\"n\">x_a_1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">x_a</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x_a_1</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">reflexivity</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">x_a</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x_a_1</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">x_ih</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x_a</span> <span class=\"n\">x_a_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">reflexivity</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">3</span> <span class=\"n\">nil</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">5</span> <span class=\"n\">nil</span><span class=\"o\">))</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">sum_list_ℕ</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">3</span> <span class=\"n\">nil</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">5</span> <span class=\"n\">nil</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 197538100,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589454624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> You can typically name new variables using <code>with foo bar</code>. So <code>induction x with x ih</code>.</p>",
        "id": 197538952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589455236
    },
    {
        "content": "<p>Ah, that's helpful! Thanks!</p>",
        "id": 197539012,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589455298
    },
    {
        "content": "<p>I think <code>concat_assoc</code> would typically be written using the equation compiler. I think the syntax is actually quite similar to Agda?</p>",
        "id": 197539456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589455640
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">statement</span> <span class=\"n\">blabla</span>\n<span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 197539476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589455660
    },
    {
        "content": "<p>But it means you'll have to move <code>x y z</code> to the right of the <code>:</code>.</p>",
        "id": 197539553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589455695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> Also... minor point, it seems that our naming conventions are slightly different. In mathlib it would be <code>concat_assoc</code> instead of <code>assoc_concat</code>.</p>",
        "id": 197539596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589455748
    },
    {
        "content": "<p>Here's a quick attempt to make things a little more \"canonical Lean.\" I didn't go through all the declarations but tried to leave some comments.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> we generally don&#39;t write definitions in tactic mode.</span>\n<span class=\"cm\">it&#39;s not a problem using tactics like intro and exact,</span>\n<span class=\"cm\">but more complicated tactics can produce terms that are hard to work with. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">unit</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">nil</span>\n\n<span class=\"c1\">-- or:</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def unit {A : Type} : A → list A :=</span>\n<span class=\"cm\">λ a, cons a nil</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> we usually write recursive definitions using pattern matching -/</span>\n<span class=\"n\">def</span> <span class=\"n\">fold</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">fold</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> but if you really want to do this, you should name the variables from `induction` -/</span>\n<span class=\"n\">def</span> <span class=\"n\">fold&#39;</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"bp\">_</span> <span class=\"n\">b&#39;</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">b</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"n\">b&#39;</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> the $ lets us avoid parentheses around the last argument -/</span>\n<span class=\"n\">def</span> <span class=\"n\">length</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">fold</span> <span class=\"mi\">0</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sum_list_ℕ</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">refine</span> <span class=\"n\">fold</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">concat</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">refine</span> <span class=\"n\">fold</span> <span class=\"n\">id</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> if your proof / definition is just a term, there&#39;s definitely no reason for tactic mode -/</span>\n<span class=\"n\">def</span> <span class=\"n\">flatten</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"c1\">--begin</span>\n<span class=\"c1\">--exact</span>\n<span class=\"n\">fold</span> <span class=\"n\">nil</span> <span class=\"n\">concat</span>\n<span class=\"c1\">--end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nil</span><span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">concat</span> <span class=\"n\">x_ih</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">x_a</span><span class=\"o\">)}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> declarations whose type is a Prop are usually declared with `theorem` instead of `def` -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">assoc_concat</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"k\">calc</span>\n    <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x_a</span> <span class=\"n\">x_a_1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">x_a</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x_a_1</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">x_a</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x_a_1</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">x_ih</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x_a</span> <span class=\"n\">x_a_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">3</span> <span class=\"n\">nil</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">5</span> <span class=\"n\">nil</span><span class=\"o\">))</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">sum_list_ℕ</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">3</span> <span class=\"n\">nil</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">5</span> <span class=\"n\">nil</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 197539699,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589455829
    },
    {
        "content": "<p>Also, do you want to do everything in tactic mode? Things like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">statement</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">foobar</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>can just be turned into </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">statement</span> <span class=\"o\">:=</span>\n<span class=\"n\">foobar</span>\n</code></pre></div>",
        "id": 197539727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589455851
    },
    {
        "content": "<p>If you like type classes</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sum_list_ℕ</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">refine</span> <span class=\"n\">fold</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>could become</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sum</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">refine</span> <span class=\"n\">fold</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197539874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589455943
    },
    {
        "content": "<p>Here's an equation compiler version of <code>assoc_concat</code>, although whether this is canonical or not depends on who you ask. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">assoc_concat&#39;</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">l</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">assoc_concat&#39;</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 197540042,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589456089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> Note that Lean has \"poor man's holes\" compared to Agda.<br>\nIf you write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sum</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">fold</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"c1\">-- &lt;- put cursor before the _</span>\n</code></pre></div>\n\n\n<p>then the editor will tell you the expected type.</p>",
        "id": 197540200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589456236
    },
    {
        "content": "<p>That is super useful, thank you both! </p>\n<p>I especially like the definitions by pattern matching. Makes me feel more at home :)</p>",
        "id": 197540373,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589456385
    },
    {
        "content": "<p>That's great (-;</p>",
        "id": 197540510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589456498
    },
    {
        "content": "<p>We like it when people feel at home</p>",
        "id": 197540514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589456504
    },
    {
        "content": "<p>And a slightly less verbose <code>assoc_concat</code>, keeping the same idea as your proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">assoc_concat&#39;</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)),</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">assoc_concat&#39;</span>\n</code></pre></div>",
        "id": 197540654,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589456592
    },
    {
        "content": "<p>So in HoTT, I would write something like \"the action on paths of the function <code>(cons a)</code> to <code>assoc_concat x y z</code>\". But in Lean you never apply a function to an equality, do you?</p>",
        "id": 197540856,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589456745
    },
    {
        "content": "<p>There's <code>congr_arg</code></p>",
        "id": 197542821,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589457960
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/core/init/logic.html#congr_arg\">https://leanprover-community.github.io/mathlib_docs/core/init/logic.html#congr_arg</a></p>",
        "id": 197542913,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589457994
    },
    {
        "content": "<p>Indeed you should be able to use it in place of <code>rw</code>.</p>",
        "id": 197542959,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589458017
    },
    {
        "content": "<p>You can, but you need to give a little bit to help the HO unification.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">assoc_concat&#39;</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">assoc_concat&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 197543854,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589458505
    },
    {
        "content": "<p>Another point that I didn't see mentioned yet: we typically try to write universe-polymorphic declarations and avoid unnecessary restriction to <code>Type</code> (<code>Type</code> is short for <code>Type 0</code>).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Linked list with elements of type `A`.  -/</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- List containing just the single element `a`. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">unit</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">nil</span>\n\n<span class=\"c1\">-- ...</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 197545153,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589459429
    },
    {
        "content": "<p>What is precisely the advantage of a <code>$</code> over parentheses?</p>",
        "id": 197547880,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589460923
    },
    {
        "content": "<p>Clarity.</p>",
        "id": 197547915,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1589460949
    },
    {
        "content": "<p>It saves a character; sometimes it's easier to see \"everything that follows is the last argument\" than to count/match parens. It's mostly personal preference.</p>",
        "id": 197548291,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589461108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/code.20audition/near/197540654\">said</a>:</p>\n<blockquote>\n<p>And a slightly less verbose <code>assoc_concat</code>, keeping the same idea as your proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">assoc_concat&#39;</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)),</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">assoc_concat&#39;</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Another question :) Why does this work, but the following doesn't. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">assoc_concat&#39;</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">assoc_concat&#39;</span>\n</code></pre></div>",
        "id": 197548633,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589461268
    },
    {
        "content": "<p>The <code>rw</code> tactic doesn't really do definitional unfolding. It will look for a subterm that syntactically matches the LHS of <code>assoc_concat</code>.</p>",
        "id": 197552842,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589462660
    },
    {
        "content": "<p>If you use <code>show</code>, you tell Lean to convert the goal to something definitionally equal, where the LHS of <code>assoc_concat</code> does appear syntactically. So then you can rewrite.</p>",
        "id": 197552929,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589462699
    },
    {
        "content": "<p>Another newbie question. What do I have to do in a <code>calc</code> if my equation holds, but it goes the other way (i.e. I need the inverse of the equality)?</p>",
        "id": 197555315,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589463711
    },
    {
        "content": "<p>Do you mean that you have a goal <code>a=b</code> and a proof of <code>b=a</code> and you want to stitch them together?</p>",
        "id": 197555957,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589463898
    },
    {
        "content": "<p>in tactic mode, <code>symmetry</code> will change the goal and <code>symmetry at h</code> will change the hypothesis</p>",
        "id": 197556002,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589463918
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,}</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 197556212,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589464008
    },
    {
        "content": "<p>Yeah, that's what I wanted. I have a proof <code>p:b=a</code> and I need <code>a=b</code> somewhere in my calculation. Actually... lean just accepts <code>by rw p</code>. It is quite amazing!</p>",
        "id": 197556282,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589464046
    },
    {
        "content": "<p>Oh, that's good to know too, that you can say <code>by {stuff, more stuff}</code> in a <code>calc</code> part of the proof. Thanks!</p>",
        "id": 197556343,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589464078
    },
    {
        "content": "<p>or just <code>: h1.symm</code></p>",
        "id": 197556448,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589464115
    },
    {
        "content": "<p>in my head I pretend that <code>rw</code> applies a depth-limited version of <code>refl</code> afterward. I don't know how far from literally true that is</p>",
        "id": 197556481,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589464137
    },
    {
        "content": "<p>Thanks to everyone here it wasn't much effort to prove a few basic things about lists <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span> </p>\n<p>Now the next thing to worry about... will it compile with lean 3.12.0 <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> This is a short tutorial on lean for the Logic in Computer Science course at the university</span>\n<span class=\"cm\">of Ljubljana. -/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">logika_v_racunalnistvu</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> We typically want to be universe polymorphic in lean, so we introduce a universe variable u. -/</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Definitions of inductive types are made using the inductive keyword. Different constructors</span>\n<span class=\"cm\">   are separated by |. -/</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> We open the namespace list, so that we can use nil and cons directly. -/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> We will now define some basic operations on lists. -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Direct definitions are made using the definition keyword, followed by := -/</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">unit</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">nil</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> A shorthand for definition is def, which may also be used. -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Since the type of lists is an inductive type, we can make inductive definitions on list</span>\n<span class=\"cm\">using pattern matching. The syntax is analogous to the syntax of the inductive type itself.</span>\n<span class=\"cm\">Note that in pattern matching definitions, we don&#39;t use := at the end of the specification. -/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fold</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">fold</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">functor_list</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">length</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">fold</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sum_list_ℕ</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">fold</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">concat</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">fold</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">flatten</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">fold</span> <span class=\"n\">nil</span> <span class=\"n\">concat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> We have now finished defining our basic operations on lists. Let us check by some examples</span>\n<span class=\"cm\">   that the operations indeed do what they are supposed to do. With your mouse, hover over the</span>\n<span class=\"cm\">   #reduce keyword to see what each term reduces to. -/</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">3</span> <span class=\"n\">nil</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">5</span> <span class=\"n\">nil</span><span class=\"o\">))</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">sum_list_ℕ</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">3</span> <span class=\"n\">nil</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">5</span> <span class=\"n\">nil</span><span class=\"o\">)))</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">3</span> <span class=\"n\">nil</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">5</span> <span class=\"n\">nil</span><span class=\"o\">)))</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Of course, if you really want to know that your operations behave as expected, you should</span>\n<span class=\"cm\">   prove the relevant properties about them. This is what we will do next. -/</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">identity_law_functor_list</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">functor_list</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">functor_list</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">id</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">identity_law_functor_list</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">composition_law_functor_list</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">functor_list</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">functor_list</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">functor_list</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">composition_law_functor_list</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">functor_list</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> We begin with the properties concatenation. Concatenation of lists is an associative</span>\n<span class=\"cm\">   operation, and it satisfies the left and right unit laws.universe</span>\n\n<span class=\"cm\">   In order to prove associativity, we note that since concatenation is defined by induction</span>\n<span class=\"cm\">   on the left argument, we will again use induction on the left argument to prove this</span>\n<span class=\"cm\">   propoerty. The proof is presented by pattern matching.</span>\n\n<span class=\"cm\">   In the proof we will use the built-in equation compiler. We just calculate as if we were</span>\n<span class=\"cm\">   working on a sheet of paper, and each time we mention the reason why the equality holds. -/</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">assoc_concat</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span>\n        <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">l</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">reflexivity</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">assoc_concat</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">reflexivity</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">left_unit_law_concat</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">concat</span> <span class=\"n\">nil</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">right_unit_law_concat</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">show</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">right_unit_law_concat</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Next, we prove the elementary properties of the length function. -/</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">length_nil</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nil</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">length_unit</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n    <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">length_concat</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">nil</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">zero_add</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">nil</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">length_nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">length_concat</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_add</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Next, we prove the elemenatary properties of the flatten function. -/</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">flatten_unit</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"n\">right_unit_law_concat</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">length_flatten</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">)),</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum_list_ℕ</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">length</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n        <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">length_concat</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">sum_list_ℕ</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">length</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">length_flatten</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">sum_list_ℕ</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">flatten_concat</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">)),</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">flatten_concat</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">assoc_concat</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">flatten_flatten</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">))),</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n        <span class=\"bp\">=</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">flatten_concat</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">flatten_flatten</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Next, we prove the elementary properties of list reversal. -/</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">unit_reverse</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">unit</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">length_reverse</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n        <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">length_concat</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">length_unit</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">length_reverse</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">reverse_concat</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">nil</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">reverse</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">reflexivity</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">right_unit_law_concat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">reverse_concat</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">assoc_concat</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">reverse_flatten</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">)),</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n        <span class=\"bp\">=</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">reverse_concat</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">reverse_flatten</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">flatten_unit</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">flatten_concat</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">functor_list</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">reverse_reverse</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n    <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n        <span class=\"bp\">=</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">reverse_concat</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">unit_reverse</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">reverse_reverse</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">logika_v_racunalnistvu</span>\n</code></pre></div>",
        "id": 197583161,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589474520
    },
    {
        "content": "<p>Nice! Note that lean has all the nice functional programming trigraphs for functors and monads... I don't know if you like those (-;</p>",
        "id": 197584095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589474906
    },
    {
        "content": "<p>You'll need the <code>functor</code> and <code>monad</code> type classes.</p>",
        "id": 197584117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589474918
    },
    {
        "content": "<p>(But I don't know if you want to mention and/or use type classes in this tutorial.)</p>",
        "id": 197584142,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589474935
    },
    {
        "content": "<p>Looks nice! You might also want to mention explicitly that in recursive definitions, arguments to the left of the colon are fixed and not written at the recursive calls.</p>",
        "id": 197584155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589474942
    },
    {
        "content": "<p>Cool, I don't know what trigraphs are, but I know what a monad is :)</p>",
        "id": 197584162,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589474944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> That's a good thing to mention to the students. Thanks!</p>",
        "id": 197584323,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589475014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> Things like <code>&lt;$&gt;</code> and <code>&gt;&gt;=</code></p>",
        "id": 197584473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589475102
    },
    {
        "content": "<p>Aren't those standard? I dunno...</p>",
        "id": 197584514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589475121
    },
    {
        "content": "<p>they're the same as the haskell ones</p>",
        "id": 197584596,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589475142
    },
    {
        "content": "<p>Maybe, but I don't know these either. I'm not a programmer :)</p>",
        "id": 197584614,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589475154
    },
    {
        "content": "<p>More importantly it has <code>do</code> notation... ah.</p>",
        "id": 197584626,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589475160
    },
    {
        "content": "<p>But are you saying that lean can automatically handle the functoriality of the list operator?</p>",
        "id": 197584784,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589475236
    },
    {
        "content": "<p>No, but it gives you nice notation</p>",
        "id": 197585553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589475563
    },
    {
        "content": "<p>Doesn't Agda have that?</p>",
        "id": 197585565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589475567
    },
    {
        "content": "<p>Not that I know of</p>",
        "id": 197585724,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589475621
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Monad_(functional_programming)#Definition\">https://en.wikipedia.org/wiki/Monad_(functional_programming)#Definition</a></p>",
        "id": 197585747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589475632
    },
    {
        "content": "<p>Also uses that notation</p>",
        "id": 197585758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589475637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253568\">Egbert Rijke</span> <a href=\"#narrow/stream/113488-general/topic/code.20audition/near/197556282\">said</a>:</p>\n<blockquote>\n<p>Yeah, that's what I wanted. I have a proof <code>p:b=a</code> and I need <code>a=b</code> somewhere in my calculation. Actually... lean just accepts <code>by rw p</code>. It is quite amazing!</p>\n</blockquote>\n<p>In the middle of a <code>calc</code> block you see things like <code>... = b : sorry</code> and at the <code>sorry</code> the goal is <code>a = b</code>. If you have <code>p : b = a</code> then replacing the <code>sorry</code> with <code>by rw p</code> will work because the goal <code>a = b</code> will be rewritten to <code>a = a</code> which will then be closed with <code>refl</code> because <code>rw</code> tries <code>refl</code> after every invocation. But you can't just replace <code>sorry</code> with <code>p</code>, although you could replace it with <code>eq.symm p</code>; moreover, because the type of <code>p</code> is <code>eq a b</code>, you could also replace it with <code>p.symm</code>.</p>",
        "id": 197609107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589486089
    }
]