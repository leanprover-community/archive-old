[
    {
        "content": "<p>Is <code>tidy</code> considered a terminating tactic? <a href=\"https://github.com/leanprover-community/mathlib/pull/15389/files/9ebe54c697b0c1165a203db78e5eca94a8033ee6#diff-7a8472e52cb49fd874716f00c555dd1171780c533169748523156bc57388110f\">https://github.com/leanprover-community/mathlib/pull/15389/files/9ebe54c697b0c1165a203db78e5eca94a8033ee6#diff-7a8472e52cb49fd874716f00c555dd1171780c533169748523156bc57388110f</a> is the second time I hear that \"<code>tidy</code> has nonterminal simps in it\" recently and this makes no sense to me given that I see <code>tidy</code> as a terminating tactic.</p>",
        "id": 293186644,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660335500
    },
    {
        "content": "<p>yes, nonterminal tidy is bad for the same reason as nonterminal simp</p>",
        "id": 293197211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660340339
    },
    {
        "content": "<p>in particular, it uses simp so using it nonterminally is also using simp nonterminally</p>",
        "id": 293197262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660340367
    },
    {
        "content": "<p>if you use <code>tidy</code> terminally then it doesn't matter whether <code>simp</code> is called in the middle of tactic execution</p>",
        "id": 293197379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660340407
    },
    {
        "content": "<p>Okay, that's what I thought too! cc <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span></p>",
        "id": 293197466,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660340463
    },
    {
        "content": "<p>I think tidy is more or less just repeatedly applying intros, ext, dsimp (at *) and/or simp (at *) in some order.</p>",
        "id": 293199639,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660341457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Terminal.20tidy/near/293199639\">said</a>:</p>\n<blockquote>\n<p>I think tidy is more or less just repeatedly applying intros, ext, dsimp (at *) and/or simp (at *) in some order.</p>\n</blockquote>\n<p>Yeah this is what I was worried about - a terminal tidy then can be doing <code>simp, intros, simp</code>, for instance, which means you're doing nonterminal simps</p>",
        "id": 293202203,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1660342759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Terminal.20tidy/near/293197379\">said</a>:</p>\n<blockquote>\n<p>if you use <code>tidy</code> terminally then it doesn't matter whether <code>simp</code> is called in the middle of tactic execution</p>\n</blockquote>\n<p>Why doesn't this matter? Doesn't it cause the exact same issues as nonterminal simps - adding new lemmas to the simp list can cause a tidy which previously succeeded to now fail</p>",
        "id": 293202437,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1660342882
    },
    {
        "content": "<p>If you want to ban any tactic invokation that may fail in the future, you're going to have a rough time. Terminal simps are allowed because, <em>even if they break</em>, the goal before the invokation is \"obvious\" by design, hence the invokation won't be hard to fix.</p>",
        "id": 293203013,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660343172
    },
    {
        "content": "<p>In that regard, terminal tidies are just the same, because solving a goal with <code>tidy</code> means that it was \"obvious\" to start with.</p>",
        "id": 293203121,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660343255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/Terminal.20tidy/near/293202203\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Terminal.20tidy/near/293199639\">said</a>:</p>\n<blockquote>\n<p>I think tidy is more or less just repeatedly applying intros, ext, dsimp (at *) and/or simp (at *) in some order.</p>\n</blockquote>\n<p>Yeah this is what I was worried about - a terminal tidy then can be doing <code>simp, intros, simp</code>, for instance, which means you're doing nonterminal simps</p>\n</blockquote>\n<p>Moreover, unlike the situation of manually writing <code>simp, intros, simp</code>, if simp changes, tidy will likely be able to “fix itself” so the proofs are less brittle</p>",
        "id": 293207933,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1660346117
    },
    {
        "content": "<p>Right, this is the point. A tactic isn't a fixed sequence of steps, it can react to the changes in behavior and do something else</p>",
        "id": 293210713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660348501
    },
    {
        "content": "<p>the danger behind nonterminal simp is when you have something \"rigid\", that requires a specific goal, coming after something \"fancy\", with changing behavior</p>",
        "id": 293210812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660348601
    },
    {
        "content": "<p>\"rigid\" after \"rigid\" and \"fancy\" after \"rigid\" is no problem because there are not many proof changes, while \"fancy\" after \"fancy\" is okay because the second fancy tactic adapts to any changes in the first one</p>",
        "id": 293210921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660348700
    },
    {
        "content": "<p>the only problematic one is \"rigid\" after \"fancy\" since the rigid proof can't adapt to the change</p>",
        "id": 293210953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660348738
    },
    {
        "content": "<p>So does this mean the points here about avoiding tidy in mathlib proofs are no longer applicable? <a href=\"#narrow/stream/113488-general/topic/.60tidy.60.20in.20mathlib.20proofs\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60tidy.60.20in.20mathlib.20proofs</a></p>",
        "id": 293276813,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1660397092
    },
    {
        "content": "<p>I think that's a different issue: <code>tidy</code> is a slow tactic so replacing it with the generated proof is often an improvement</p>",
        "id": 293276966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660397171
    },
    {
        "content": "<p>but the generated proof is more brittle to changes</p>",
        "id": 293276994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660397193
    },
    {
        "content": "<p>well, it's not entirely unrelated: the fact that <code>tidy</code> is slow is correlated with the fact that it's also very adaptable to changes in the library</p>",
        "id": 293277217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660397307
    },
    {
        "content": "<p>Perhaps I'm just overly cautious about this then, since I've spent a lot of time fixing broken tidy proofs!</p>",
        "id": 293277535,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1660397486
    },
    {
        "content": "<p>what do you mean by \"broken tidy proof\"? Is it a <code>tidy</code> invocation itself that no longer works, or a tidy-generated script that fails?</p>",
        "id": 293279931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660398891
    },
    {
        "content": "<p>If I ever use <code>tidy</code> in a proof then the next thing I do is <code>tidy?</code> and then try to write a sensible proof given the output. There are of course secret <code>tidy</code> proofs in category theory, where people don't fill in terms when making a structure and <code>. obviously</code> kicks in, invokving <code>tidy</code>.</p>",
        "id": 293284797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660401867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Terminal.20tidy/near/293279931\">said</a>:</p>\n<blockquote>\n<p>what do you mean by \"broken tidy proof\"? Is it a <code>tidy</code> invocation itself that no longer works, or a tidy-generated script that fails?</p>\n</blockquote>\n<p>A <code>tidy</code> invocation that no longer works</p>",
        "id": 293313651,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1660418221
    }
]