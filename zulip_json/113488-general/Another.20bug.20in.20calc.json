[
    {
        "content": "<p>The following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">trivial</span>\n<span class=\"bp\">...</span> <span class=\"bp\">⊆</span> <span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">subset.rfl</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 230216906,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615702686
    },
    {
        "content": "<p><code>trans_rel_left</code> appears to only work on relations on the same type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">trans_rel_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 230218098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615704247
    },
    {
        "content": "<p>I didn't even know that calc allowed things like <code>a \\in b \\subset c</code> as trans rules</p>",
        "id": 230218115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615704295
    },
    {
        "content": "<p>(I suspect the author of <code>calc</code> also didn't)</p>",
        "id": 230218144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615704327
    },
    {
        "content": "<p>Thanks! I'll look into fixing this tomorrow or on Monday.</p>",
        "id": 230220874,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615707635
    }
]