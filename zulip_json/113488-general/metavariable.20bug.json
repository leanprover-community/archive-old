[
    {
        "content": "<p>I tried to get a mathlib-free version but I need <code>swap</code> which is apparently not in core. The below code looks really innocent but honestly you might want to look away instead of at the tactic state after the dsimp.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.interactive</span> <span class=\"c1\">-- needed for `swap`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hU</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- this causes the problem</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271945516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644916430
    },
    {
        "content": "<p>just <code>dsimp</code> does very little on the goal and is accepted. <code>dsimp at *</code> does much more unfolding on the goal and, naively looking at the goal state only, doesn't touch anything but the goal too (but is not accepted).</p>",
        "id": 271971846,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644931017
    },
    {
        "content": "<p>More digging: if I extract the goal before <code>split</code>, the bug doesn't show up anymore:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- this no longer causes the problem</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271975997,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644933146
    },
    {
        "content": "<p>So maybe the bug is either in <code>intro</code>, <code>cases</code> or <code>dsimp</code></p>",
        "id": 271976903,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644933578
    },
    {
        "content": "<p>This is the code that runs for the wildcard location of <code>dsimp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">do</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">revert_all</span><span class=\"o\">,</span>\n     <span class=\"n\">dsimp_target</span> <span class=\"n\">s</span> <span class=\"n\">u</span> <span class=\"o\">{</span><span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"bp\">..</span><span class=\"n\">cfg</span><span class=\"o\">},</span>\n     <span class=\"n\">intron</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>If I change the order, as in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">do</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">revert_all</span><span class=\"o\">,</span>\n     <span class=\"n\">intron</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n     <span class=\"n\">dsimp_target</span> <span class=\"n\">s</span> <span class=\"n\">u</span> <span class=\"o\">{</span><span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"bp\">..</span><span class=\"n\">cfg</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>The problem disappears. Is this approach problematic?</p>",
        "id": 271992230,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644939821
    },
    {
        "content": "<p>Doing revert and then intro is a no-op, the point of those lines is to move all hypotheses into the goal, dsimp the resulting thing and then extract all the hypotheses again. Maybe there is a better way to accomplish this though</p>",
        "id": 271992585,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644939978
    },
    {
        "content": "<p>It would be good to look at the git history why the wildcard case is special cased, and see if the mathlib build breaks if it is removed</p>",
        "id": 271992995,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644940169
    },
    {
        "content": "<p>Hm, from the fact that it says \"goals accomplished\" but the kernel rejects it, can we conclude that the current way to do it is actually inconsistent?</p>",
        "id": 271993057,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644940198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/metavariable.20bug/near/271992995\">said</a>:</p>\n<blockquote>\n<p>It would be good to look at the git history why the wildcard case is special cased, and see if the mathlib build breaks if it is removed</p>\n</blockquote>\n<p>There's a comment on the wildcard code saying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Remark: we cannot revert frozen local instances.</span>\n<span class=\"cm\">     We disable zeta expansion because to prevent `intron n` from failing.</span>\n<span class=\"cm\">     Another option is to put a \"marker\" at the current target, and</span>\n<span class=\"cm\">     implement `intro_upto_marker`. -/</span>\n</code></pre></div>",
        "id": 271993151,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644940224
    },
    {
        "content": "<p>I'd guess that there is in fact a deeper bug that should be found</p>",
        "id": 271993188,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644940243
    },
    {
        "content": "<p>I don't think the comment makes too much difference, even with zeta expansion enabled the bug still occurs</p>",
        "id": 271993284,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644940269
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.dsimplify</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- rw id,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- this causes the problem</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is the best MWE I have</p>",
        "id": 271993359,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644940298
    },
    {
        "content": "<p>It seems to me that <code>dsimp</code> is removing an <code>id</code> application that is necessary to tell lean the types of everything involved</p>",
        "id": 271993594,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644940369
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.dsimplify</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- this causes the problem</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is just a tad smaller, but doesn't remove anything significant</p>",
        "id": 271993735,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644940425
    },
    {
        "content": "<p>This is <code>dsimp_target</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">dsimp_target</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">simp_lemmas</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">dsimp_config</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get_simp_lemmas_or_default</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">instantiate_mvars</span><span class=\"o\">,</span>\n  <span class=\"n\">s.dsimplify</span> <span class=\"n\">u</span> <span class=\"n\">t</span> <span class=\"n\">cfg</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">unsafe_change</span>\n</code></pre></div>\n<p>And this is <code>unsafe_change</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Change the target of the main goal.</span>\n<span class=\"sd\">   The input expression must be definitionally equal to the current target.</span>\n<span class=\"sd\">   The tactic does not check whether `e`</span>\n<span class=\"sd\">   is definitionally equal to the current target. The error will only be detected by the kernel type checker. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">unsafe_change</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">change</span> <span class=\"n\">e</span> <span class=\"n\">ff</span>\n</code></pre></div>",
        "id": 271994674,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644940754
    },
    {
        "content": "<p>Even using safe change (<code>change e tt</code>)  it has the same behaviour</p>",
        "id": 271995144,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644940901
    },
    {
        "content": "<p>So if <code>change e tt</code> is resulting on \"goals accomplished\", then is it safe to conclude that such change type checks at that point?</p>",
        "id": 271996332,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644941333
    },
    {
        "content": "<p>If not, then we might need to dive in C code to find the bug</p>",
        "id": 271996503,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644941395
    },
    {
        "content": "<p>Weirdly enough running <code>recover</code> or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">trace</span> <span class=\"n\">result</span>\n</code></pre></div>\n<p>after the last exact line makes the proof succeed</p>",
        "id": 271997610,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644941793
    },
    {
        "content": "<p>Okay this is beyond my understanding. I can only hope it won't happen in Lean 4 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 271999383,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644942522
    },
    {
        "content": "<p>Even smaller <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- this causes the problem</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272005830,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644945010
    },
    {
        "content": "<p>This is a very weird bug. Calling <code>(() &lt;$ tactic.result),</code> alone fixes the issue, so it's almost certainly a bug in the C++ code</p>",
        "id": 272072902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644986362
    },
    {
        "content": "<p>Oh, this is even more fun:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- this causes the problem</span>\n  <span class=\"c1\">-- result, -- (1)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- result, -- (2)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>You get an error iff (2) is enabled and (1) is disabled</p>",
        "id": 272073248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644986841
    }
]