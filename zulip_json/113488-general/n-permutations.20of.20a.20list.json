[
    {
        "content": "<p>We already have <code>list.permutations : list A -&gt; list (list A)</code>.  Is there a version of this that takes an argument  <code>n : nat</code> and gives all possible <del>n-permutations </del> <strong>n-combinations</strong> (sublists of size <code>n</code> without ordering)?  Should I be using <code>list.sublists</code> and then filtering for the ones with length <code>n</code>?</p>\n<p>Edit: I changed permutations to combinations.</p>",
        "id": 205410240,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1596054847
    },
    {
        "content": "<p>sublists and permutations are not the same thing. Are reorderings being considered?</p>",
        "id": 205410712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596055151
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"n\">def</span> <span class=\"n\">n_sublists_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">[]</span> <span class=\"bp\">::</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">n_sublists_aux</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n_sublists_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">n_sublists</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n_sublists_aux</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">id</span> <span class=\"o\">[]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">n_sublists</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">]</span>\n<span class=\"c1\">-- [[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n</code></pre></div>",
        "id": 205411691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596055698
    },
    {
        "content": "<p>I leave the proof of correctness as an exercise for the reader</p>",
        "id": 205411735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596055723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/n-permutations.20of.20a.20list/near/205411735\">said</a>:</p>\n<blockquote>\n<p>I leave the proof of correctness as an exercise for the reader</p>\n</blockquote>\n<p>This is also my favorite tactic.</p>",
        "id": 205411849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596055797
    },
    {
        "content": "<p><code>by laziness</code></p>",
        "id": 205411987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596055852
    },
    {
        "content": "<p>Yeah, I meant combinations. I fixed the question.</p>",
        "id": 205412038,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1596055882
    },
    {
        "content": "<p>I think it would be nice to have a function for n-combinations as well as n-permutaions in mathlib?</p>",
        "id": 205412434,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1596056112
    },
    {
        "content": "<p>Yes, that function should be in <code>data.list.defs</code></p>",
        "id": 205413925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596056964
    }
]