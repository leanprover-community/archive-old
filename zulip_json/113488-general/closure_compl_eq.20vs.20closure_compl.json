[
    {
        "content": "<p><a href=\"/user_uploads/3121/799w6_d5y5HxDNH8PGRRdgyJ/2018-10-02-6.png\" target=\"_blank\" title=\"2018-10-02-6.png\">closure_compl_eq vs closure_compl</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/799w6_d5y5HxDNH8PGRRdgyJ/2018-10-02-6.png\" target=\"_blank\" title=\"closure_compl_eq vs closure_compl\"><img src=\"/user_uploads/3121/799w6_d5y5HxDNH8PGRRdgyJ/2018-10-02-6.png\"></a></div><p><a href=\"https://github.com/leanprover/mathlib/blob/master/analysis/topology/topological_space.lean#L261-L271\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/analysis/topology/topological_space.lean#L261-L271\">https://github.com/leanprover/mathlib/blob/master/analysis/topology/topological_space.lean#L261-L271</a></p>",
        "id": 135058320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538508647
    },
    {
        "content": "<p>lemme <code>blame</code> this...</p>",
        "id": 135058346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538508671
    },
    {
        "content": "<p>it's <a href=\"https://github.com/leanprover/mathlib/commit/afefdcbb46f85e471ca258373d33e92a9d2dd61c#diff-6e52fa1a2004f6ddfddb7023e1ec2709R243\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/afefdcbb46f85e471ca258373d33e92a9d2dd61c#diff-6e52fa1a2004f6ddfddb7023e1ec2709R243\">this change</a> that moved the latter theorem from <code>topology/topological_space.lean</code> to <code>analysis/topology/topological_space.lean</code></p>",
        "id": 135058452,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538508756
    },
    {
        "content": "<p>oh wow, there are actually adjacent!</p>",
        "id": 135058454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538508759
    },
    {
        "content": "<p>actually, below and above these theorems:</p>",
        "id": 135058529,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538508841
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">interior_compl_eq</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">closure_eq_compl_interior_compl</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">closure_compl_eq</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">interior</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">closure_eq_compl_interior_compl</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">closure_compl</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">interior</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span>\n  <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">closure_subset_iff_subset_of_is_closed</span><span class=\"o\">,</span> <span class=\"n\">compl_subset_compl</span><span class=\"o\">,</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"o\">])</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">compl_subset_comm</span><span class=\"o\">,</span> <span class=\"n\">subset_interior_iff_subset_of_open</span><span class=\"o\">,</span> <span class=\"n\">compl_subset_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subset_closure</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_open_compl_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">is_closed_closure</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">interior_compl</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">closure_compl</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 135058578,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538508852
    },
    {
        "content": "<p>just like a sandwich</p>",
        "id": 135058582,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538508859
    },
    {
        "content": "<p>gone <a href=\"https://github.com/leanprover/mathlib/commit/fff12f5889c7cd5a9169b42433eb14f3b53e7614\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/fff12f5889c7cd5a9169b42433eb14f3b53e7614\">https://github.com/leanprover/mathlib/commit/fff12f5889c7cd5a9169b42433eb14f3b53e7614</a></p>",
        "id": 135061762,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1538512079
    },
    {
        "content": "<p>I'm quite surprised they have no dependencies...</p>",
        "id": 135061814,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538512117
    },
    {
        "content": "<p>I guess one could try and use meta magic to search for theorems with two distinct names?</p>",
        "id": 135085888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538551040
    },
    {
        "content": "<p>In principle this is very easy</p>",
        "id": 135086020,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538551225
    }
]