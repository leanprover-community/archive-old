[
    {
        "content": "<p>Not sure if this is a bug, but perhaps the error message could be improved?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">mul_right_inj'</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>There's a red underline under <code>example</code>, with the message \"function expected at <code>rat.cast_zero _inst_2</code>\".  I still get \"goals accomplished\" at the end, so maybe nothing is actually broken?</p>",
        "id": 213731680,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603063988
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 213731743,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603064143
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 213731751,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603064162
    },
    {
        "content": "<p>I think <code>norm_num</code> is generating a bad term. If I use <code>by show_term { norm_num }</code> in the proof of <code>h'</code> then I see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">id</span>\n   <span class=\"o\">(</span><span class=\"n\">eq_true_intro</span>\n      <span class=\"o\">(</span><span class=\"n\">norm_num.rat_cast_ne</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n         <span class=\"o\">(</span><span class=\"n\">norm_num.rat_cast_div</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"n\">rat.cast_one</span> <span class=\"o\">(</span><span class=\"n\">norm_num.rat_cast_bit1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"n\">rat.cast_one</span><span class=\"o\">))</span>\n         <span class=\"o\">(</span><span class=\"n\">rat.cast_zero</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"n\">zero_lt_one</span> <span class=\"o\">(</span><span class=\"n\">bit1_pos'</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">))))))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n\n<p>But <code>#check @rat.cast_zero</code> returns <code>rat.cast_zero : ∀ {α : Type u_2} [_inst_1 : division_ring α], ↑0 = 0</code> which doesn't take any explicit arguments.</p>",
        "id": 213731909,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603064404
    },
    {
        "content": "<p>In particular, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">id</span>\n   <span class=\"o\">(</span><span class=\"n\">eq_true_intro</span>\n      <span class=\"o\">(</span><span class=\"n\">norm_num.rat_cast_ne</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n         <span class=\"o\">(</span><span class=\"n\">norm_num.rat_cast_div</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"n\">rat.cast_one</span> <span class=\"o\">(</span><span class=\"n\">norm_num.rat_cast_bit1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"n\">rat.cast_one</span><span class=\"o\">))</span>\n         <span class=\"o\">(</span><span class=\"n\">rat.cast_zero</span><span class=\"o\">)</span> <span class=\"c1\">-- deleted the `_inst_2`</span>\n         <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"n\">zero_lt_one</span> <span class=\"o\">(</span><span class=\"n\">bit1_pos'</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">))))))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">mul_right_inj'</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213731925,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603064484
    },
    {
        "content": "<p>Interesting!  So thanks to your discovery, here's a minimized version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 213732168,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603064898
    },
    {
        "content": "<p>I thought that this issue would be created by <a href=\"https://github.com/leanprover-community/mathlib/issues/4626\">#4626</a>, but that hasn't been merged yet :) Maybe that issue happens to solve it? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 213732230,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603065007
    },
    {
        "content": "<p>No, I thought of that but I checked it on the new branch too!</p>",
        "id": 213732240,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603065047
    },
    {
        "content": "<p>If I delete the <code>cz_inst</code> on <a href=\"https://github.com/leanprover-community/mathlib/blob/61e1111d5d3a3420c68f2d7c69bfb5ffcd1091f4/src/tactic/norm_num.lean#L905\">this line</a> then it seems to fix this example. I have no clue if this is correct though.</p>",
        "id": 213732598,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603065673
    },
    {
        "content": "<p>The <code>norm_num</code> test suite still passes with this change too. If Mario doesn't object, I'll make a PR after <a href=\"https://github.com/leanprover-community/mathlib/issues/4626\">#4626</a> lands.</p>",
        "id": 213733063,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603066496
    },
    {
        "content": "<p>Yes, that looks almost certainly like a typo. In your PR, please also add some tests!</p>",
        "id": 213733178,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603066713
    },
    {
        "content": "<p>LGTM</p>",
        "id": 213741954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603081164
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4682\">#4682</a></p>",
        "id": 213743059,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603082810
    }
]