[
    {
        "content": "<p>I'm currently working with equality elimination, and I frequently use patterns like <code>(eq::l)</code> when equality constraints are encoded as lists. I found that this interferes with the <code>calc</code> enviroment in weird ways.  Here's the minimal example I found so far: </p>\n<div class=\"codehilite\"><pre><span></span>lemma foo : ∀ x : list unit, unit\n| []      := ()\n| (eq::_) :=\n  begin\n    have h0 : 0 = 0 :=\n    (calc 0\n        = 0 : rfl\n    ... = 0 : rfl)\n  end\n\ninvalid occurrence of field notation\nstate:\nfoo : list unit → unit,\neq : unit,\n_x : list unit\n⊢ unit\n</pre></div>\n\n\n<p>The problem here seems to be that Lean isn't taking <code>eq</code> in the pattern as an arbitrary term of type <code>unit</code>, but as the actual <code>eq : Π {α : Sort u_1}, α → α → Prop</code> (the problem goes away when I rename it to something like <code>x</code>).  But this is strange since if Lean considered <code>eq</code> to be the latter, it would usually give a typechecking error and inform you that this <code>eq</code> cannot occur in a list of units. That's precisely what it does when there is, say, a <code>tt</code> in its place.</p>",
        "id": 160631409,
        "sender_full_name": "Seul Baek",
        "timestamp": 1552446953
    }
]