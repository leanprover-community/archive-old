[
    {
        "content": "<p>The question is about type classes I am not that familiar with: Do we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1\\neq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> in a comm_cancel_monoid_with_zero which is also a normalized_gcd_monoid? The problem arose trying to prove a multiset version of lcm_eq_zero_iff. Here is my current attempt and the remaining sorry is to prove <code>1=0\\to false</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.gcd_monoid.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.multiset.lattice</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">multiset</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_cancel_monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normalized_gcd_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lcm_eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.lcm</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">s.induction_on</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">slcm</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_cons</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lcm_cons</span><span class=\"o\">,</span> <span class=\"n\">lcm_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h.symm</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">slcm</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zero_dvd_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">dvd_lcm</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">multiset</span>\n</code></pre></div>",
        "id": 261366310,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1636817961
    },
    {
        "content": "<p>You need <code>nontrivial α</code>, then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/one_ne_zero\">docs#one_ne_zero</a> will do the job. It doesn't seem that <code>normalized_gcd_monoid α</code> implies <code>nontrivial α</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.gcd_monoid.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_cancel_monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normalized_gcd_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>so you might just add <code>[nontrivial α]</code> to your lemma.</p>",
        "id": 261366558,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636818318
    },
    {
        "content": "<p>Thanks, that does the job.</p>",
        "id": 261366679,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1636818537
    },
    {
        "content": "<p>Your original statement is false:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.gcd_monoid.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.with_zero</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.punit_instances</span>\n\n<span class=\"c1\">-- PR'd in #10312</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_cancel_monoid_with_zero</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_left_cancel_of_ne_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_right_cancel_of_ne_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">_</span> <span class=\"n\">punit.comm_ring</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">gcd_monoid</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">gcd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">,</span>\n  <span class=\"n\">lcm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">punit.star</span><span class=\"o\">,</span>\n  <span class=\"n\">gcd_dvd_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">punit.star</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">gcd_dvd_right</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">punit.star</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">dvd_gcd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">punit.star</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">gcd_mul_lcm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">lcm_zero_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">lcm_zero_right</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">normalized_gcd_monoid</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_unit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_unit_zero</span> <span class=\"o\">:=</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_unit_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_unit_coe_units</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">normalize_gcd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">normalize_lcm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">punit.gcd_monoid</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- false</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_cancel_monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"bp\">∀</span> <span class=\"o\">[</span><span class=\"n\">normalized_gcd_monoid</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">unit</span> <span class=\"o\">(</span><span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Those instances should be in mathlib but seem not to be</p>",
        "id": 261366868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636818833
    },
    {
        "content": "<p>Surely you can generalize that to <code>subsingleton α</code>. But do we want all those \"trivial\" typeclasses?</p>",
        "id": 261366932,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636818890
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/punit.comm_ring\">docs#punit.comm_ring</a></p>",
        "id": 261366944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636818909
    },
    {
        "content": "<p>So I feel like we should have the full set</p>",
        "id": 261366949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636818915
    },
    {
        "content": "<p>Oh okay.</p>",
        "id": 261366950,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636818915
    },
    {
        "content": "<p>Deriving data from <code>subsingleton α</code> is a recipe for diamonds</p>",
        "id": 261366955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636818927
    },
    {
        "content": "<p>PR'd as <a href=\"https://github.com/leanprover-community/mathlib/issues/10312\">#10312</a>, thankfully I didn't have to fix any import issues</p>",
        "id": 261367760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636819913
    },
    {
        "content": "<p>Thanks. Using this, in <a href=\"https://github.com/leanprover-community/mathlib/issues/10249\">#10249</a> I was now able to define the exponent of a finite group and prove that it is the lcm of its orders.</p>",
        "id": 261368224,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1636820578
    },
    {
        "content": "<p>One more reason to have instances on <code>punit</code>: this way we show that these typeclasses do not imply <code>[nontrivial α]</code>.</p>",
        "id": 261371109,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636824572
    },
    {
        "content": "<p>I wonder if it would be valuable to have a linter that requires every typeclass either has a punit instance, implies <code>nontrivial α</code>, or is no-linted</p>",
        "id": 261371472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636825155
    }
]