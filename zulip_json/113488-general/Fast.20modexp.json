[
    {
        "content": "<p>For the Miller-Rabin project with Sean, it would be nice if there were an efficient way to compute whether a number is an efficient Miller-Rabin witness to a given base. Currently, it seems the bottleneck is that modular exponentiation is naively evaluated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1234565432124</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">10000000000009</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">12327261237214456</span><span class=\"o\">)</span> <span class=\"c1\">-- fast</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1234324</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">1000000009</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1239382</span><span class=\"o\">)</span> <span class=\"c1\">-- about 1 sec</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1234324</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">1000000009</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">12393825</span><span class=\"o\">)</span> <span class=\"c1\">-- about 10 sec</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1234324</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">1000000009</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">123938256</span><span class=\"o\">)</span> <span class=\"c1\">-- excessive memory consumption detected at 'vm'</span>\n</code></pre></div>\n<p>What do you all think will be the best approach for getting #eval to do a fast modexp?</p>",
        "id": 273757062,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1646197981
    },
    {
        "content": "<p>There's a Miller-Rabin project?? You know #eval can't be used in proofs, right?</p>",
        "id": 273757631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646198606
    },
    {
        "content": "<p>Yes, I know eval can't be used in proofs. It's a research apprenticeship program, and Sean is my mentee. For the sake of the poster session at the end of term, it would be nice to make a graph showing the relative performance of the Miller-Rabin test we're implementing and norm_num</p>",
        "id": 273757910,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1646198816
    },
    {
        "content": "<p>The PR is here <a href=\"https://github.com/leanprover-community/mathlib/pull/12254\">#12254</a></p>",
        "id": 273757935,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1646198851
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">binpow</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.binary_rec</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">ih2</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"bp\">*</span> <span class=\"n\">ih</span> <span class=\"k\">in</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">ih2</span><span class=\"o\">)</span> <span class=\"n\">ih2</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1234565432124</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">10000000000009</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">12327261237214456</span><span class=\"o\">)</span> <span class=\"c1\">-- fast</span>\n<span class=\"k\">#eval</span> <span class=\"n\">binpow</span> <span class=\"o\">(</span><span class=\"mi\">1234324</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">1000000009</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1239382</span><span class=\"o\">)</span> <span class=\"c1\">-- fast</span>\n<span class=\"k\">#eval</span> <span class=\"n\">binpow</span> <span class=\"o\">(</span><span class=\"mi\">1234324</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">1000000009</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">12393825</span><span class=\"o\">)</span> <span class=\"c1\">-- fast</span>\n<span class=\"k\">#eval</span> <span class=\"n\">binpow</span> <span class=\"o\">(</span><span class=\"mi\">1234324</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">1000000009</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">123938256</span><span class=\"o\">)</span> <span class=\"c1\">-- fast</span>\n</code></pre></div>",
        "id": 273759611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646200515
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 273759704,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1646200569
    },
    {
        "content": "<p>The simplest solution is to write a <code>modexp</code> function with the right performance characteristics. If you're working in Lean 4 (or plan to), I believe (I haven't used it yet) writing <code>csimp</code> lemmas will let you specify rewrite rules for the compiler to transform your <code>^</code> expression into a call to your optimized function</p>",
        "id": 273759705,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1646200570
    },
    {
        "content": "<p>the issue is that the default implementation of <code>monoid.pow</code> is <code>npow_rec</code> which works by unary recursion. The main downside of making <code>binpow</code> the default is that it has different defeqs</p>",
        "id": 273759712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646200598
    },
    {
        "content": "<p>By the way, <code>norm_num</code> always uses binary recursion for implementing <code>^</code>, so it might even be able to beat the <code>#eval</code> implementation for large enough exponent</p>",
        "id": 273759841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646200774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span>, I updated the code snippet to fix a bug</p>",
        "id": 273760126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646200911
    },
    {
        "content": "<p>We should probably give <code>fin</code> and <code>zmod</code> (and <code>nat</code> and <code>int</code>) the fast <code>npow</code> implementation then.</p>",
        "id": 273779475,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646214061
    },
    {
        "content": "<p>should we make it the default for all monoids?</p>",
        "id": 273784291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646216660
    },
    {
        "content": "<p>That seems like a good idea.</p>",
        "id": 273784914,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646216972
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.comm_ring\">docs#fin.comm_ring</a> using the default power? (Edit: yes)</p>",
        "id": 284571878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654065078
    },
    {
        "content": "<p>The implementation I expected was the one that makes <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.coe_pow\">docs#fin.coe_pow</a> defeq, but that lemma doesn't even exist!</p>",
        "id": 284572755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654065897
    }
]