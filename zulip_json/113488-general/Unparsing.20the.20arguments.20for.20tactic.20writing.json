[
    {
        "content": "<p>I have a project which uses requires me to simplify several expressions of the form <code>mv_polynomial.coeff ...</code>. Currently, I just call something like<br>\n<code>simp [mv_polynomial.smul_eq_C_mul, mv_polynomial.X_pow_eq_single, finsupp.single_eq_single_iff]</code><br>\nIn multiple locations.</p>\n<p>I'm trying to write a tactic to automate this, ideally I would like to start with something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">coeff_simplify</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">tactic.interactive.simp</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial.smul_eq_C_mul</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.X_pow_eq_single</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.coeff_monomial</span><span class=\"o\">,</span> <span class=\"n\">finsupp.single_eq_single_iff</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but this doesn't work - simp expects several parse types as inputs which prevent this tactic definition from working. Is there any quick way to tell this tactic definition that I just want it to do the same thing as <code>simp [... my_lemmas ...]</code>?</p>",
        "id": 231262853,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1616387688
    },
    {
        "content": "<p>The really cheap way is to write <code>`[simp [lemma1, lemma2]]</code>.</p>",
        "id": 231263631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616388641
    },
    {
        "content": "<p>The <code>`[...]</code> notation packages up interactive tactics.</p>",
        "id": 231263641,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616388660
    },
    {
        "content": "<p>Once you're in the non-interactive world, it's probably better to use the non-interactive tactics, however, so use <code>tactic.simp</code> rather than <code>tactic.interactive.simp</code>, etc.</p>",
        "id": 231263665,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616388715
    },
    {
        "content": "<p>Rather than \"by-hand\" building the set of lemmas you want to pass to <code>simp</code>, you may find it easiest (and cleaner!) to create a custom attribute, tag the relevant lemmas, and then use the version of <code>tactic.simp</code> that lets you pass lemmas by an attribute name.</p>",
        "id": 231263732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616388766
    },
    {
        "content": "<p>(Then you're only passing a <code>name</code>, rather than building some <code>expr</code> objects.)</p>",
        "id": 231263735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616388781
    }
]