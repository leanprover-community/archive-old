[
    {
        "content": "<p>Is there a shorter way to prove this and why isn't <code>rfl</code> working? Is it because the type of the lhs is <code>with_bot ℕ</code> and the rhs is <code>option ℕ</code>? (The types are defeq)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_group</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- doesn&#39;t work</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n  <span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">linear_ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n  <span class=\"n\">decidable_linear_ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n</pre></div>",
        "id": 128969240,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530544386
    },
    {
        "content": "<p>Looked a little deeper and it seems <code>(0 : with_bot ℕ)</code> is defeq to <code>some (1 : multplicative ℕ)</code>. I feel like perhaps the fact that this lemma is not <code>rfl</code> means the definition ought to be changed.</p>",
        "id": 128970431,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530545559
    },
    {
        "content": "<p>Oh, this is weird! It is in fact the case that <code>(0 : with_bot ℕ) = some 0</code>, but the tactics are very confused about it. Here's <code>simp</code> proving that they are different, and then the kernel says it's a wrong proof:</p>\n<div class=\"codehilite\"><pre><span></span>example : (0 : with_bot ℕ) ≠ (some 0 : option ℕ) :=\nshow some _ ≠ some 0, begin\n  simp [multiplicative.monoid],\nend\n</pre></div>",
        "id": 128986937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530564978
    },
    {
        "content": "<p>I will add a lemma for it</p>",
        "id": 128986953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530565008
    },
    {
        "content": "<p>as a slight hack, you can instead prove it by <code>dec_trivial</code></p>",
        "id": 128986995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530565069
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\n⊢ has_zero (with_bot ℕ)\n</pre></div>\n\n\n<p>-- am I missing an import?</p>",
        "id": 128987480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530565603
    },
    {
        "content": "<p><code>algebra.ordered_group</code></p>",
        "id": 128987708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530565893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Minimized:</p>\n<div class=\"codehilite\"><pre><span></span>def nat2 := nat\ninstance : has_one nat2 := ⟨(0 : ℕ)⟩\nexample : (0 : ℕ) ≠ (1 : nat2) := by simp\n</pre></div>",
        "id": 128988232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530566590
    },
    {
        "content": "<p>In this example <code>example : (0 : ℕ) = (1 : nat2) := rfl</code> also fails</p>",
        "id": 128988318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530566685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks, this seems to be an imprecise term pattern match at <a href=\"https://github.com/leanprover/lean/blob/master/src/library/type_context.cpp#L2906-L2907\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/src/library/type_context.cpp#L2906-L2907\">https://github.com/leanprover/lean/blob/master/src/library/type_context.cpp#L2906-L2907</a></p>",
        "id": 128988873,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1530567382
    },
    {
        "content": "<p>Ooh, that's a tricky one. I'd hate for you to have to do defeq checks constantly there out of paranoia for tricks like I showed...</p>",
        "id": 128988933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530567478
    },
    {
        "content": "<p>Yeah. It's probably not a good idea in general to declare instances on semireducible defs like <code>multiplicative</code>. Is it feasible to change that?</p>",
        "id": 128989538,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1530568148
    },
    {
        "content": "<p>Not really, I mean that is the point</p>",
        "id": 128989548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530568174
    },
    {
        "content": "<p>Sorry, I meant making it irreducible or a newtype.</p>",
        "id": 128989559,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1530568198
    },
    {
        "content": "<p>Probably not. An important aspect of the semireducible part is that you can prove multiplicative versions of additive theorems by defeq</p>",
        "id": 128989625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530568252
    },
    {
        "content": "<p>It's fine as long as it gives way to a sufficiently forceful \"unfold\", but I'm not sure irreducible will</p>",
        "id": 128989657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530568315
    },
    {
        "content": "<p>I would say that users should avoid having things of type <code>multiplicative A</code> in their goal at all</p>",
        "id": 128989728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530568375
    },
    {
        "content": "<p>so I think I will change the definition of the <code>with_bot</code> instance so that it unfolds directly rather than showing the multiplicative stuff</p>",
        "id": 128989802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530568447
    },
    {
        "content": "<p>fixed</p>",
        "id": 128992229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530572171
    }
]