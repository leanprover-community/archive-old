[
    {
        "content": "<p>Hi guys,</p>\n<p>A colleague at work (I'm working part-time in a tech company, Skyscanner) asked about dependent types &amp; formal methods. After a bit of a chat he wanted to see an example implementation of some real-world algorithm with correctness guarantees, something like a selection sort would be great, but I would take anything \"real enough but not too hard\", e.g. binary search.</p>\n<p>I've had a look at \"programming in lean\", but that's all I got:</p>\n<blockquote>\n<p>This chapter will have to assume some familiarity with Lean as a proof assistant. Give some natural examples, for example, proving properties of functions of lists, sorting routines, properties of the extended gcd. Discuss two styles: separating functions and properties, and combining them, using subtypes.</p>\n</blockquote>",
        "id": 124411849,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522414215
    },
    {
        "content": "<p>There are the sort functions in mathlib: <a href=\"https://github.com/leanprover/mathlib/blob/master/data/list/sort.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/data/list/sort.lean\">https://github.com/leanprover/mathlib/blob/master/data/list/sort.lean</a><br>\nIs this what you are looking for?</p>",
        "id": 124412107,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522414836
    },
    {
        "content": "<p>Thanks, this looks useful. It's perhaps a little bit too general (for the purpose of exposition I'd probably want to restrict myself to lists of nats and natural order of nats), and some of the methods are a little bit advanced (tactics, etc.), so I might want to change things a little bit.</p>\n<p>There's one thing I seem to be missing, this doesn't show that the sorted list contains the same elements? Or does it?:</p>\n<div class=\"codehilite\"><pre><span></span>theorem sorted_insertion_sort : ∀ l, sorted r (insertion_sort l)\n| [] := sorted_nil\n| (a :: l) := sorted_ordered_insert totr transr a _ (sorted_insertion_sort l)\n</pre></div>",
        "id": 124413001,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522416663
    },
    {
        "content": "<p>Also, could we not have this directly in the type signature of insertion_sort? Something like<br>\n\"insertion sort is a function which takes a list and returns another list, which is both sorted and has the same elements as the original list\"</p>\n<blockquote>\n<p>l : list -&gt; q : list \\and sorted q \\and same_elements_list l q</p>\n</blockquote>\n<p>Put it this way, as a programmer I'd probably never care about these proofs, but maybe it would be nice to see them in the type signature?</p>",
        "id": 124413164,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522416993
    },
    {
        "content": "<p>Or maybe put it differently: let's say that I'd like to encode all the intended behaviour in the type signature and let a code monkey code the whole thing up, but for me to still have a guarantee that the monkey could never screw anything up (correctness-wise).</p>",
        "id": 124413278,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522417263
    },
    {
        "content": "<p>I don't follow, why would you want that in the type signature of insertion sort when you could prove those properties in separate lemmas. If you put it in the type signature it makes using <code>insertion_sort</code> cumbersome</p>",
        "id": 124416003,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522422439
    },
    {
        "content": "<p>as in if it was in the type signature whenever i call <code>insertion_sort</code> i have to remember it returns a tuple, and i only care about the first element (i.e. the sorted list it returns, if it had the type signature you propose)</p>",
        "id": 124416056,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522422521
    },
    {
        "content": "<p>There is a second lemma that I think you missed: <code>perm_insertion_sort</code> says that the resulting list is a permutation of the original, meaning it has the same elements in the same multiplicity.</p>",
        "id": 124419195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522428056
    },
    {
        "content": "<p>The whole volume 3 of Software Foundations is now devoted to such things: <a href=\"https://softwarefoundations.cis.upenn.edu/vfa-current/toc.html\" target=\"_blank\" title=\"https://softwarefoundations.cis.upenn.edu/vfa-current/toc.html\">https://softwarefoundations.cis.upenn.edu/vfa-current/toc.html</a></p>",
        "id": 124419610,
        "sender_full_name": "Ching-Tsun Chou",
        "timestamp": 1522428739
    },
    {
        "content": "<p>As Andrew says, it is possible to encode the proofs in the type. Here are some reasons this is less good:</p>\n<ul>\n<li>You have to prove the facts at the same time as constructing the function. Sometimes this is easy, sometimes you need a different kind of recursion for the proof.</li>\n<li>The set of properties your definition satisfies is open ended. Unlike other programming languages, the facts of a program are not limited to the things listed in the type.</li>\n<li>When writing a program for execution the primary focus is on clarity and speed or algorithmic complexity. Having proofs mixed up with that makes the program logic harder to follow, since you have to know the compiler well enough to know what to ignore and what is optimized away.</li>\n</ul>",
        "id": 124419619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522428764
    },
    {
        "content": "<p>Fair enough guys, I find Mario's and Andrew's points entirely convincing, and of course I missed the lemma! I'll most likely still try to write a less generic implementation of one of those sorting algorithms. Good practice and hopefully something I'll be able to explain to my colleague.</p>",
        "id": 124421218,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522431300
    },
    {
        "content": "<p>Another possibility for simpler verified programs is the functions in <code>list.basic</code>. There are lots of interesting examples of simple list functions and proofs that they have the expected properties. For example, <code>list.filter</code> has a two-line definition, and its proof of correctness is <code>list.mem_filter</code> (among others; that doesn't uniquely define the function).</p>",
        "id": 124421994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522432347
    }
]