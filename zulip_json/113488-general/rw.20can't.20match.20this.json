[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@has_mem.mem.{u u} α α\n    (@zfc.has_zmem.to_has_mem.{u} α (@zfc.has_comprehension.to_has_zmem.{u} α has_comprehension))\n    ?m_1\n    (@zfc.comprehension.{u} α has_comprehension ?m_2 ?m_3)\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>@has_mem.mem.{u u} α α (@zfc.has_zmem.to_has_mem.{u} α (@zfc.has_zmem.mk.{u} α to_has_mem)) x\n    (@zfc.comprehension.{u} α has_comprehension infinity (λ (x : α), false))\n</pre></div>",
        "id": 123765206,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521144652
    },
    {
        "content": "<p>hmm, the situation is quite complicated</p>",
        "id": 123765219,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521144674
    },
    {
        "content": "<p>Question?</p>",
        "id": 123765285,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521144748
    },
    {
        "content": "<p>I've filled in more holes</p>",
        "id": 123765301,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521144799
    },
    {
        "content": "<p>now <code>rw</code> can't match this:</p>\n<div class=\"codehilite\"><pre><span></span>@has_mem.mem.{u u} α α\n    (@zfc.has_zmem.to_has_mem.{u} α (@zfc.has_comprehension.to_has_zmem.{u} α has_comprehension))\n    x\n    (@zfc.comprehension.{u} α has_comprehension infinity (λ (x : α), false))\n</pre></div>",
        "id": 123765305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521144807
    },
    {
        "content": "<p>where the goal contains:</p>\n<div class=\"codehilite\"><pre><span></span>@has_mem.mem.{u u} α α (@zfc.has_zmem.to_has_mem.{u} α (@zfc.has_zmem.mk.{u} α to_has_mem)) x\n    (@zfc.comprehension.{u} α has_comprehension infinity (λ (x : α), false))\n</pre></div>",
        "id": 123765307,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521144816
    },
    {
        "content": "<p>If I'm analyzing correctly, it would be a failure to match this with this:</p>\n<div class=\"codehilite\"><pre><span></span>@zfc.has_comprehension.to_has_zmem.{u} α has_comprehension\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>@zfc.has_zmem.mk.{u} α to_has_mem\n</pre></div>",
        "id": 123765363,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521144868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> question: do you see any way to fix it?</p>",
        "id": 123765368,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521144893
    },
    {
        "content": "<p>What are you trying to do?</p>",
        "id": 123765379,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521144918
    },
    {
        "content": "<p>rewrite <code>hx : x ∈ comprehension infinity (λ (x : α), false)</code></p>",
        "id": 123765444,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521144983
    },
    {
        "content": "<p>What is the rule that you're using?</p>",
        "id": 123765470,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521145050
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>∀ A p x, x ∈ comprehension A p ↔ x ∈ A ∧ p x\n</pre></div>",
        "id": 123765517,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521145083
    },
    {
        "content": "<p>Why do you have <code>(@zfc.has_zmem.mk.{u} α to_has_mem)</code>?</p>",
        "id": 123765631,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521145222
    },
    {
        "content": "<p>And where does <code>to_has_mem</code> come from?</p>",
        "id": 123765654,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521145269
    },
    {
        "content": "<p>I'm in the middle of a structure doing things like this</p>",
        "id": 123765655,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521145271
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>(has_zempty : has_zempty α :=\n  { emptyc := @@comprehension has_comprehension infinity (λ x, false),\n    empty_not_zmem := λ x hx, begin simp [∅] at hx, rw [@@zmem_comprehension_iff has_comprehension infinity (λ (x : α), false) x] at hx, end })\n</pre></div>",
        "id": 123765659,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521145274
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>class has_zmem extends has_mem α α\n\nclass has_zempty extends has_zmem α, has_emptyc α :=\n(empty_not_zmem : ∀ x, x ∉ (∅:α))\n</pre></div>",
        "id": 123765723,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521145367
    },
    {
        "content": "<p>Try extracting </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span> <span class=\"n\">emptyc</span> <span class=\"o\">:=</span> <span class=\"bp\">@@</span><span class=\"n\">comprehension</span> <span class=\"n\">has_comprehension</span> <span class=\"n\">infinity</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">),</span>\n    <span class=\"n\">empty_not_zmem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"err\">∅</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@@</span><span class=\"n\">zmem_comprehension_iff</span> <span class=\"n\">has_comprehension</span> <span class=\"n\">infinity</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kn\">end</span> <span class=\"o\">})</span>\n</pre></div>\n\n\n<p>into a separate definition</p>",
        "id": 123765725,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521145372
    },
    {
        "content": "<p>thanks</p>",
        "id": 123765947,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521145763
    }
]