[
    {
        "content": "<p>Is there a way to make projection notation work in the following example?  I'm using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bounded_continuous_function.to_Lp\">docs#bounded_continuous_function.to_Lp</a>, which doesn't have an explicit argument of a <code>bounded_continuous_function α ℝ</code>.  It is a linear map from <code>bounded_continuous_function α ℝ</code> to some other module, so it can be coerced to a function from <code>bounded_continuous_function α ℝ</code> to that other module, and after the coercion it does have the right kind of explicit argument.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.lp_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">fact_one_le_two_ennreal</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_measure</span> <span class=\"n\">μ</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function</span> <span class=\"n\">α</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">bounded_continuous_function.to_Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">μ</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> fails:</span>\n<span class=\"cm\">invalid field notation, function 'bounded_continuous_function.to_Lp' does not have explicit argument with type (bounded_continuous_function ...)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function</span> <span class=\"n\">α</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">f.to_Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">μ</span> <span class=\"n\">ℝ</span>\n</code></pre></div>",
        "id": 237008624,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1619910798
    },
    {
        "content": "<p>I think dot notation can only see through coe_fn if the definition has no explicit arguments</p>",
        "id": 237009115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619911318
    },
    {
        "content": "<p>Which obviously in this case isn't an option</p>",
        "id": 237009209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619911405
    },
    {
        "content": "<p>But maybe there's no good reason for this and we could change lean?</p>",
        "id": 237009217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619911424
    },
    {
        "content": "<p>Well, vote in favour from me!</p>",
        "id": 237009491,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1619911710
    }
]