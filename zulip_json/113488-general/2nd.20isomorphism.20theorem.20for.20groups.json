[
    {
        "content": "<p>I needed the 2nd isomorphism theorem for groups (the one that says <code>HN/N ≃* H/(H ∩ N)</code>) to formalise the classical proof of Jordan–Hölder. I couldn't find this (or even a definition of <code>HN</code>) in mathlib so I wrote one up. The main results look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- To go in group_theory.subgroup</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">subgroup</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The internal product `HN` of a subgroup `H` and a normal subgroup `N` is a subgroup. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">prod_normal</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">N.normal</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">},</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subgroup</span>\n\n<span class=\"c1\">-- To go in group_theory.quotient_group</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">quotient_group</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The second isomorphism theorem: given two subgroups `H` and `N` of a group `G`, where `N`</span>\n<span class=\"cm\">is normal, defines an isomorphism between `H/(H ∩ N)` and `(HN)/N`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">quotient_inf_equiv_prod_normal_quotient</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">N.normal</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient</span> <span class=\"o\">((</span><span class=\"n\">H</span> <span class=\"bp\">⊓</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">H.subtype</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">N.comap</span> <span class=\"o\">(</span><span class=\"n\">H.prod_normal</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_equiv.trans</span> <span class=\"o\">(</span><span class=\"n\">equiv_quotient_of_eq</span> <span class=\"n\">ker_φ.symm</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">quotient_ker_equiv_of_surjective</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">H</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">φ_surjective</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">quotient_group</span>\n</code></pre></div>\n<p>I was wondering if this is in the right form for mathlib and whether I should make a pull request.</p>",
        "id": 225876708,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1612978529
    },
    {
        "content": "<p>I can believe that this is missing. The code looks right for mathlib.</p>",
        "id": 225883037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612980955
    },
    {
        "content": "<p>I haven't thought this through, but one idea would be to replace the defn of <code>prod_normal</code> by the subgroup generated by elements of the form <code>h * n</code>. You can then drop the <code>[N.normal]</code> condition. Afterwards, you can write a lemma that says that in case <code>N</code> is normal, the resulting subgroup has the \"special\" form that is currently your definition.</p>",
        "id": 225883738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612981295
    },
    {
        "content": "<p>One remark: <code>{ g | ∃ (h ∈ H) (n ∈ N), g = h * n }</code> can be written as <code>H * N</code> if you import <code>data.set.pointwise</code>. See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_mul\">docs#set.has_mul</a>. That might be useful.</p>",
        "id": 225883742,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612981298
    },
    {
        "content": "<p>But you need to cast <code>H</code> and <code>N</code> to sets to do that.</p>",
        "id": 225883833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612981327
    },
    {
        "content": "<p>Oh yes, you're right. So maybe that's not so nice.</p>",
        "id": 225883868,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612981344
    },
    {
        "content": "<p>I didn't think this through, but is <code>subgroup.closure ((H : set G) * N)</code> an associative multiplication on <code>subgroup G</code>?</p>",
        "id": 225883950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612981384
    },
    {
        "content": "<p>If so, that would turn <code>subgroup G</code> into a monoid, which seems like a useful thing to have.</p>",
        "id": 225883982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612981402
    },
    {
        "content": "<p>That sounds right.</p>",
        "id": 225884041,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612981435
    },
    {
        "content": "<p>We could add a <code>has_mul</code> on <code>subgroup</code> to do this, as long as it doesn't have any conflicting meaning in the literature</p>",
        "id": 225884186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612981478
    },
    {
        "content": "<p>I think <code>has_mul</code> is certainly fine. But I'm wondering if we can get more out of this.</p>",
        "id": 225884911,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612981788
    },
    {
        "content": "<p><del>The problem with <code>has_mul</code> would be that <code>H * N</code> is only a subgroup when at least one of the two is normal.</del> Nevermind, I see that taking the closure would fix this.</p>",
        "id": 225886947,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1612982514
    },
    {
        "content": "<p>I'll have a go at defining <code>has_mul</code> and changing the results accordingly.</p>",
        "id": 225887512,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1612982740
    },
    {
        "content": "<p>The only issue I guess is that I've seen <code>HK</code> to mean both the subset of products, and the subgroup they generate. But here this is perfect because if people want a subset and then multiply there.</p>",
        "id": 225893624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612985124
    },
    {
        "content": "<p>I'm managed to prove the monoid structure and have some lemmas that show that <code>H * N</code> is just <code>HN</code> when <code>N</code> is normal. They look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.pointwise</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">subgroup</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Two subgroups `H` and `K` can be multiplied to form another one. The result</span>\n<span class=\"sd\">is the smallest subgroup that contains `{ h * k | h ∈ H, k ∈ K }`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">subgroup_mul</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">H</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">*</span> <span class=\"n\">K</span><span class=\"o\">)⟩</span>\n\n<span class=\"sd\">/-- The carrier of `H * N` is just `↑H * ↑N` when `N` is normal. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_normal</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">N.normal</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- The carrier of `N * H` is just `↑N * ↑H` when `N` is normal. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">normal_mul</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">N.normal</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- Subgroups form a monoid under multiplication. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'll first make a pull request for this.</p>",
        "id": 225915425,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1612994345
    },
    {
        "content": "<p>Isn't the proposed <code>has_mul</code> precisely the current <code>sup</code> operator on submodules, based on the statement of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.mem_sup\">docs#subgroup.mem_sup</a>?</p>",
        "id": 225935726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613004996
    },
    {
        "content": "<p>as somebody new to lean, locating the definition of <code>sup</code> for subgroups starting from that lemma was a bit of an exercise, but after opening 6 of the proof widgets in vscode I got a link to <code>subgroup.complete_lattice</code>, which uses <code>complete_lattice_of_Inf</code>, which defines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sup</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n</code></pre></div>\n<p>which I believe is the closure of the product.</p>\n<p>(I may have misunderstood what you meant, but the <code>mem_sup</code> theorem is specific to <code>comm_group</code>, where every subgroup is normal)</p>",
        "id": 225939298,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1613008274
    },
    {
        "content": "<p>If you're in vscode, you can also F12 (or right-click Go To Definition) to go to the file</p>",
        "id": 225939414,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613008377
    },
    {
        "content": "<p>right, but that takes me to the <code>has_sup</code> class</p>",
        "id": 225939541,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1613008518
    },
    {
        "content": "<p>You did better than me, I just guessed what the definition was based on what was proved for comm_group!</p>",
        "id": 225939564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613008549
    },
    {
        "content": "<p>oh right, I guess it would be surprising to have any other definition of sup, especially in light of that lemma</p>",
        "id": 225940781,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1613009647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/2nd.20isomorphism.20theorem.20for.20groups/near/225935726\">said</a>:</p>\n<blockquote>\n<p>Isn't the proposed <code>has_mul</code> precisely the current <code>sup</code> operator on submodules, based on the statement of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.mem_sup\">docs#subgroup.mem_sup</a>?</p>\n</blockquote>\n<p>Yup, that seems right. Good catch</p>",
        "id": 225950751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613021863
    },
    {
        "content": "<p>Don't lattice theory people regard the 2nd iso theorem as a special case of the <a href=\"https://en.wikipedia.org/wiki/Modular_lattice#Diamond_isomorphism_theorem\">diamond isomorphism theorem</a> for modular lattices?</p>",
        "id": 225971483,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613039159
    },
    {
        "content": "<p>I guess in this case it's not strictly a special case since subgroups don't form a modular lattice but I wonder if we could / should use a normal closure or something to factor this through the diamond isomorphism theorem for the modular lattice of normal subgroups.</p>",
        "id": 225971629,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613039256
    },
    {
        "content": "<p>Thinking about it a bit more, it probably just complicates things to try and use the DIT but looking now, I'm impressed that we do actually have this in Mathlib <a href=\"https://leanprover-community.github.io/mathlib_docs/order/modular_lattice.html\">here</a></p>",
        "id": 225972196,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613039650
    },
    {
        "content": "<p>I wonder if someone should add a <code>Tag</code> in the docstring for <code>modular_lattice.lean</code> saying \"second isomorphism theorem\".</p>",
        "id": 225972441,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613039826
    },
    {
        "content": "<p>What is the purpose of the \"tag\"s?</p>",
        "id": 225976312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613042227
    },
    {
        "content": "<p>I don't know if they have a well-defined purpose. I see them a place for strings that I think will help somebody doing a free text search for something (and which deserve to have a file-level scope). I think <code>modular_lattice.lean</code> deserves to show up if someone searches for \"second isomorphism theorem\".</p>",
        "id": 225978484,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1613043787
    }
]