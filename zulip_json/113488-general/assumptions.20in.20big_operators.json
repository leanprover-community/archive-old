[
    {
        "content": "<p>I was browsing through big_operators and found:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_nat_cast</span>\n<span class=\"c1\">-- gives</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_nat_cast</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">sum_hom</span> <span class=\"n\">coe</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Is this bad? I assume <code>[_inst_1 : comm_monoid β] [_inst_2 : add_comm_monoid β]</code> is not intended.</p>",
        "id": 135034421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538485958
    },
    {
        "content": "<p>How does Lean know that the up-arrows mean \"coerce to beta\"?</p>",
        "id": 135035071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538486499
    },
    {
        "content": "<p>I don't know. Probably <code>nat.cast</code></p>",
        "id": 135035165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538486573
    },
    {
        "content": "<p>Johan just posted the output of <code>#print</code>. In the actual theorem, the type is given explicitly</p>",
        "id": 135035363,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538486753
    },
    {
        "content": "<p>Sorry, I could have been clearer about that...</p>",
        "id": 135035637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538487000
    },
    {
        "content": "<p>Is there a way to see if this happens more often in mathlib?</p>",
        "id": 135035695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538487019
    },
    {
        "content": "<p>Chris, you can probably use your tools to figure out if this theorem is actually ever used.</p>",
        "id": 135035707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538487039
    },
    {
        "content": "<p>I predict it isn't. Because otherwise this double instance problem would have been noticed before.</p>",
        "id": 135035716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538487057
    },
    {
        "content": "<p>I'm not sure. As  I already pointed out, there are theorems with redundant instances in mathlib</p>",
        "id": 135035754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538487101
    },
    {
        "content": "<blockquote>\n<p>Johan just posted the output of <code>#print</code>. In the actual theorem, the type is given explicitly</p>\n</blockquote>\n<p>Oh -- I'm an idiot. Thanks Chris.</p>",
        "id": 135035756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538487103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> hmmm... can your tools help to discover this? Of course not very automatically. But maybe generate a list of all theorems that assume <code>[blah X]</code> and <code>[add_blah X]</code>. I guess it almost never happens that this is intended.</p>",
        "id": 135036066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538487362
    },
    {
        "content": "<p>doing this is in my long TODO list, but it's very low priority</p>",
        "id": 135036552,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538487693
    },
    {
        "content": "<p>Searching <code>sum_nat_cast</code> in VScode tells me it's used once in <code>probability mass function</code>. It's casting to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">R</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> there, so no problems synthesizing the <code>comm_monoid</code> instance. It is a mistake though and should be changed.</p>",
        "id": 135036869,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538487983
    }
]