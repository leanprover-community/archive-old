[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- :-)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- :-(</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">mul_comm</span> <span class=\"n\">mul_assoc</span> <span class=\"c1\">-- doesn&#39;t help</span>\n</pre></div>\n\n\n<p>Is there a way of making <code>simp</code> or some other tactic prove tedious <code>mul_assoc</code>/<code>mul_comm</code> lemmas for my <code>mynat</code>-builders? The second example fails and the first succeeds.</p>",
        "id": 179479168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572470701
    },
    {
        "content": "<p>Use <code>mul_left_comm</code> as well</p>",
        "id": 179481917,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572472722
    }
]