[
    {
        "content": "<p>Here's the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">topological_space_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">f.is_open</span> <span class=\"bp\">=</span> <span class=\"n\">g.is_open</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I don't understand how this proof works.First,  why do you need to pattern match the topological_spaces? Also, since a and b aren't used, why can't they be _ ? I'm trying to rewrite this proof in a longer style, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">topological_space_eq'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">f.is_open</span> <span class=\"bp\">=</span> <span class=\"n\">g.is_open</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">topological_spaces</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">open_eq</span> <span class=\"o\">:</span> <span class=\"n\">f.is_open</span> <span class=\"bp\">=</span> <span class=\"n\">g.is_open</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but that doesn't work. Any tips?</p>",
        "id": 264566008,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639233821
    },
    {
        "content": "<p>You should do <code>subst a</code> before the last line.</p>",
        "id": 264566087,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639233908
    },
    {
        "content": "<p>(I guess, <code>open_eq</code> becomes <code>a = b</code> after both <code>cases</code>, otherwise you need <code>change</code> or <code>dsimp</code> before <code>subst</code>)</p>",
        "id": 264566107,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639233945
    },
    {
        "content": "<p>Note that the original proof also matches <code>f.is_open = g.is_open</code> with <code>rfl</code>, which does the <code>subst open_eq</code> for you.</p>",
        "id": 264566176,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639233995
    },
    {
        "content": "<p>I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">topological_space_eq'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">f.is_open</span> <span class=\"bp\">=</span> <span class=\"n\">g.is_open</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">topological_spaces</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">open_eq</span> <span class=\"o\">:</span> <span class=\"n\">f.is_open</span> <span class=\"bp\">=</span> <span class=\"n\">g.is_open</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">open_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but that still doesn't work. How does equality of structures work? Shouldn't there be a goal where I have to prove that every field in one of the structure instances is equal to the corresponding field in the other structure instance?</p>",
        "id": 264566291,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639234191
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">topological_space_eq'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">f.is_open</span> <span class=\"bp\">=</span> <span class=\"n\">g.is_open</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">open_eq</span> <span class=\"o\">:</span> <span class=\"n\">f.is_open</span> <span class=\"bp\">=</span> <span class=\"n\">g.is_open</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">open_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">open_eq</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This works</p>",
        "id": 264566382,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639234301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416322\">Bernd Losert</span> <a href=\"#narrow/stream/113488-general/topic/confused.20about.20topological_space_eq/near/264566291\">said</a>:</p>\n<blockquote>\n<p>How does equality of structures work? Shouldn't there be a goal where I have to prove that every field in one of the structure instances is equal to the corresponding field in the other structure instance?</p>\n</blockquote>\n<p>Equality is a built-in notion. This very lemma is how you prove that it can be characterized in the way you suggest.<br>\nHowever, since the other three fields are proofs about <code>is_open</code>, they will be equal to the corresponding fields automatically.</p>",
        "id": 264566498,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639234443
    }
]