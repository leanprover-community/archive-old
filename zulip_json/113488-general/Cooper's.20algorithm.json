[
    {
        "content": "<p>I've implemented Cooper's algorithm for linear integer arithmetic as a Lean tactic (<a href=\"https://github.com/skbaek/qelim\" target=\"_blank\" title=\"https://github.com/skbaek/qelim\">https://github.com/skbaek/qelim</a>). It's still quite limited, but it should work for simple goals.</p>\n<ul>\n<li><code>cooper</code> is the completely verified tactic that is proof-producing all the way. Unfortunately, it is unusably slow.</li>\n<li><code>cooper_vm</code> is the partially verified tactic whose first step (replacing the original goal with the new quantifier-eliminated goal) is proof-producing. The second step (evaluating the new goal to a tautology) is trusted.</li>\n<li>The tactics assume sentential goals, so you'll have to generalize variables and hypotheses before calling it.</li>\n<li>The implementation is based on Tobias Nipkow's paper (<a href=\"http://www21.in.tum.de/~nipkow/pubs/jar10.pdf\" target=\"_blank\" title=\"http://www21.in.tum.de/~nipkow/pubs/jar10.pdf\">http://www21.in.tum.de/~nipkow/pubs/jar10.pdf</a>).</li>\n<li>I've added a few test cases (qelim/lia/cooper/tests.lean) from John Harrison's book.</li>\n<li>Right now I'm having trouble making absolute paths work. All references to mathlib are relative.</li>\n</ul>",
        "id": 126812643,
        "sender_full_name": "Seul Baek",
        "timestamp": 1526775541
    },
    {
        "content": "<p>Hey! Seul's here! And he brings gifts</p>",
        "id": 126812751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526775761
    },
    {
        "content": "<p>I notice that your <code>atom</code> type uses <code>int</code>. This will kill your efficiency, if you are doing kernel evaluation. You should use <code>znum</code> instead</p>",
        "id": 126813048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526776446
    },
    {
        "content": "<p>Re: paths, do you have a <code>leanpkg.toml</code> file in your project? I don't see one, but it's important for making file resolution work</p>",
        "id": 126813108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526776681
    },
    {
        "content": "<p>For others who may not be aware: this is basically the <code>omega</code> tactic everyone's been talking about, although Cooper's is a slightly different algorithm for the same problem</p>",
        "id": 126813252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526776980
    },
    {
        "content": "<p>Thanks for releasing this! It looks like it was quite a substantial effort, with the first commit being a few months ago. I definitely want to spend some time looking over it!</p>",
        "id": 126817604,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526787351
    },
    {
        "content": "<blockquote>\n<p>I notice that your <code>atom</code> type uses <code>int</code>. This will kill your efficiency, if you are doing kernel evaluation. You should use <code>znum</code> instead</p>\n</blockquote>\n<p>Thanks for the suggestion! Maybe this is what's making <code>cooper</code> so much slower than <code>cooper_vm</code>.</p>",
        "id": 126844501,
        "sender_full_name": "Seul Baek",
        "timestamp": 1526850574
    },
    {
        "content": "<blockquote>\n<p>Re: paths, do you have a <code>leanpkg.toml</code> file in your project? I don't see one, but it's important for making file resolution work</p>\n</blockquote>\n<p>I'm actually having problems with mathlib itself—when I clone mathlib it won't work as is, because Lean doesn't like its absolute paths for some reason. It works after I manually relativize them.  This is strange because mathlib does have a <code>leanpkg.toml</code> file.</p>",
        "id": 126844596,
        "sender_full_name": "Seul Baek",
        "timestamp": 1526850792
    },
    {
        "content": "<p>You want to make mathlib a dependency for your project</p>",
        "id": 126844646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526850947
    },
    {
        "content": "<p>if you use leanpkg and add mathlib as a dependency then it should sort out everything for you</p>",
        "id": 126844687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526850974
    },
    {
        "content": "<p>see section 1.4.3 of the reference manual</p>",
        "id": 126844697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526851049
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/using_lean.html#using-the-package-manager\" target=\"_blank\" title=\"https://leanprover.github.io/reference/using_lean.html#using-the-package-manager\">https://leanprover.github.io/reference/using_lean.html#using-the-package-manager</a></p>",
        "id": 126844698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526851050
    },
    {
        "content": "<p>I am really grateful for your work by the way, and maybe <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> will be even more grateful -- Patrick maybe this solves some of your nat woes?</p>",
        "id": 126844748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526851088
    },
    {
        "content": "<p>I hope it can help me. I need to find some time to try it.</p>",
        "id": 126864044,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894292
    },
    {
        "content": "<p>Maybe I'm not trying very hard to find this time because I'm afraid I'll be disappointed</p>",
        "id": 126864048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894318
    },
    {
        "content": "<p>Any hint about how to actually import that cooper thing?</p>",
        "id": 126865859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526897865
    },
    {
        "content": "<p>I tried <code>leanpkg add skbaek/qelim</code> and then import</p>",
        "id": 126865899,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526897890
    },
    {
        "content": "<p>I tried adding a <code>leanpkg.toml</code> to it</p>",
        "id": 126865902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526897909
    },
    {
        "content": "<p>But <code>import lia.cooper.main</code> doesn't work</p>",
        "id": 126865905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526897933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Did you manage to import this tactic?</p>",
        "id": 126866474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526899012
    },
    {
        "content": "<p>I haven't attempted it, no</p>",
        "id": 126866481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526899036
    },
    {
        "content": "<p>You could just copy the files into your project</p>",
        "id": 126866527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526899093
    },
    {
        "content": "<p>Then all mathlib imports fail...</p>",
        "id": 126866593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526899225
    },
    {
        "content": "<p>I guess we need to wait a bit more until this can be tested</p>",
        "id": 126866594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526899243
    },
    {
        "content": "<p>I figured out what was wrong and added a .toml file. Now you can install and use the repo using leanpkg.</p>",
        "id": 127217640,
        "sender_full_name": "Seul Baek",
        "timestamp": 1527534171
    },
    {
        "content": "<p>This is cool!</p>",
        "id": 127218789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527536521
    },
    {
        "content": "<p>Is it planned to merge this into mathlib? Or will it remain a separate lib?</p>",
        "id": 127218832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527536547
    },
    {
        "content": "<p>I'm not sure what the planning is in general: a monolithic lib, or distributed libs</p>",
        "id": 127218837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527536579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116585\">@Seul Baek</span>  Do you have any example of use? I can now import the lib, but haven't yet managed to proved anything using Cooper</p>",
        "id": 127219807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527538406
    },
    {
        "content": "<p>actually I can prove stuff about integers (that <code>ring</code> also proves),  so maybe I misunderstood the scope of this tactic. I thought it would work on natural numbers</p>",
        "id": 127220285,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527539462
    },
    {
        "content": "<p>With nat I always get <code>type error at eval_expr, argument has type  ℕ but is expected to have type  ℤ</code></p>",
        "id": 127220332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527539544
    },
    {
        "content": "<p>The core tactic is designed to work on <code>int</code>. There are some missing preprocessing steps to prove natural number theorems</p>",
        "id": 127220429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527539796
    },
    {
        "content": "<p>Of course a nat quantifier is the same as an int quantifier with the additional assumption 0 &lt;= n</p>",
        "id": 127220432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527539826
    },
    {
        "content": "<p>What do you get in addition to <code>ring</code> then?</p>",
        "id": 127220439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527539862
    },
    {
        "content": "<p>I think Seul's tactic is still more of a backend thing</p>",
        "id": 127220443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527539869
    },
    {
        "content": "<p>it needs a front end to generalize and revert quantifiers, and convert nats to ints</p>",
        "id": 127220482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527539904
    },
    {
        "content": "<p>Do you know whether he's working on this?</p>",
        "id": 127220487,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527539950
    },
    {
        "content": "<p><code>ring</code> will not be able to prove that <code>\\forall n : int, n &lt;= 0 \\/ n &gt;= 1</code> for example</p>",
        "id": 127220488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527539951
    },
    {
        "content": "<p>Or <code>3 | n -&gt; 5 | n -&gt; 15 | n</code></p>",
        "id": 127220495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527539985
    },
    {
        "content": "<p>or <code>3 | n -&gt; n &gt; 0 -&gt; n*n - n &gt; 0</code></p>",
        "id": 127220537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527540031
    },
    {
        "content": "<p>oh wait actually that last one might not work because of the square</p>",
        "id": 127220544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527540083
    },
    {
        "content": "<p>This sounds pretty nice</p>",
        "id": 127220546,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527540114
    },
    {
        "content": "<p>but more importantly, it allows full quantifier alternation</p>",
        "id": 127220587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527540131
    },
    {
        "content": "<p>But Lean doesn't let me state the divisibility stuff</p>",
        "id": 127220588,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527540133
    },
    {
        "content": "<p>type <code>3 \\| n</code></p>",
        "id": 127220590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527540144
    },
    {
        "content": "<p>Oh, Johan will like this unicode trickery</p>",
        "id": 127220601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527540194
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"err\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">15</span> <span class=\"err\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cooper</span>\n</pre></div>\n\n\n<p>doesn't work though</p>",
        "id": 127220609,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527540240
    },
    {
        "content": "<p>looking at the code, it's pretty sparse on extended syntax</p>",
        "id": 127221407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527541852
    },
    {
        "content": "<p>you have to use exists <del>and forall</del> and times and le</p>",
        "id": 127221412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527541865
    },
    {
        "content": "<p>I'm not even sure equality is supported</p>",
        "id": 127221417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527541873
    },
    {
        "content": "<p>so you would have to write <code>\\ex k, 3 * k &lt;= n /\\ n &lt;= 3 * k</code> instead of <code>3 | n</code></p>",
        "id": 127221426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527541903
    },
    {
        "content": "<p>I thought everything is decidable</p>",
        "id": 127221537,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527542081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I'm not sure what'd be the best way to integrate this to other libraries in the long term.  It'll stay separate for the short term for convenience of further development.</p>",
        "id": 127221538,
        "sender_full_name": "Seul Baek",
        "timestamp": 1527542088
    },
    {
        "content": "<p>actually I take it back, forall is also not supported</p>",
        "id": 127221553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527542140
    },
    {
        "content": "<p>you have to use negation and exists</p>",
        "id": 127221555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527542149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  It should definitely be possible to write a preprocessor for nat, although I'm not working on it at the moment. I'm trying to first replace <code>int</code> with <code>znum</code> to improve efficiency.</p>",
        "id": 127221653,
        "sender_full_name": "Seul Baek",
        "timestamp": 1527542308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> forall and equality are indirectly supported by the rewriting step before calling the main quantifier elimination tactic. E.g., <code>cooper_vm</code> works for <code>forall (x: int), exists (y : int), x = 1 + y</code></p>",
        "id": 127221777,
        "sender_full_name": "Seul Baek",
        "timestamp": 1527542550
    },
    {
        "content": "<p>oh, I see it</p>",
        "id": 127221833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527542675
    },
    {
        "content": "<p>I guess you should add the definition of dvd in that list</p>",
        "id": 127221835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527542695
    },
    {
        "content": "<p>You mean the list of indirectly supported relations?</p>",
        "id": 127221944,
        "sender_full_name": "Seul Baek",
        "timestamp": 1527542909
    },
    {
        "content": "<p>yes</p>",
        "id": 127221945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527542914
    },
    {
        "content": "<p>as a simp lemma in the preprocessing</p>",
        "id": 127221947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527542927
    },
    {
        "content": "<p>something like <code>a | b &lt;-&gt; ∃ c, b = a * c</code></p>",
        "id": 127221959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527542949
    },
    {
        "content": "<p>surprisingly not stated as a theorem that I can see, but easy to prove by refl</p>",
        "id": 127221977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527542981
    },
    {
        "content": "<p>Yes, I think it should be possible to do this even more directly (w/o preprocessing), since the internal syntax already includes dvd</p>",
        "id": 127222107,
        "sender_full_name": "Seul Baek",
        "timestamp": 1527543161
    },
    {
        "content": "<p>Thanks Seul and Mario. I'll wait a bit more then (a tactic handling ℕ crazyness is what I really need).</p>",
        "id": 127241177,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527583590
    },
    {
        "content": "<blockquote>\n<p>surprisingly not stated as a theorem that I can see, but easy to prove by refl</p>\n</blockquote>\n<p>Hey wait a minute! I asked for the name of a theorem recently (if a structure is made with a : A and b : B then  (<a href=\"http://structure.mk\" target=\"_blank\" title=\"http://structure.mk\">structure.mk</a> a b).a = a) and you said \"oh that's true by refl so it doesn't have a name\"</p>",
        "id": 127246452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527592937
    },
    {
        "content": "<p>What's the algorithm for determining whether an equality whose proofs is rfl gets blessed with a name?</p>",
        "id": 127246465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527592992
    },
    {
        "content": "<p>It doesn't usually matter, Seul is writing a tactic so he needs to have names for his automation. It's fine even if he just declares a local theorem with a particular statement he can rely on.</p>",
        "id": 127246748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527593470
    },
    {
        "content": "<p>For example there are lots of theorems in <code>tactic.ring</code> that are like this - they have very particular statements to make it easy for the automation, but no one would ever use those theorems otherwise</p>",
        "id": 127246755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527593520
    },
    {
        "content": "<p>But the other day I said \"I want to do this rewrite and it's refl but I want to know the name anyway\" and your response was \"use show\"</p>",
        "id": 127246826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593628
    },
    {
        "content": "<p>and I bought this at the time</p>",
        "id": 127246833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593637
    },
    {
        "content": "<p>but this response stinks</p>",
        "id": 127246834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593640
    },
    {
        "content": "<p>But it's also common for definitional expansions to have a name, particularly when the definition is hidden in a typeclass</p>",
        "id": 127246876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527593656
    },
    {
        "content": "<p>because I have to keep changing things to definitionally equal things in my head</p>",
        "id": 127246878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593660
    },
    {
        "content": "<p>and I am sitting at a computer</p>",
        "id": 127246879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593664
    },
    {
        "content": "<p>for example <code>finset.subset_iff</code></p>",
        "id": 127246885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527593681
    },
    {
        "content": "<p>can I do targetted dsimp?</p>",
        "id": 127246889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593689
    },
    {
        "content": "<p>This is a new thread. Hang on</p>",
        "id": 127246896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527593703
    }
]