[
    {
        "content": "<p>This instance would be possible if <code>fintype</code> took a sort instead of a Type. Is it worth changing?<br>\n<code>instance (p : fin 3 → Prop) [decidable_pred p] : fintype (Π a, p a → fin 3) := by apply_instance</code></p>",
        "id": 130982613,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533566434
    },
    {
        "content": "<p>I thought about it, I have also seen this come up, but I don't know a clean way to do it without making lots of later stuff harder</p>",
        "id": 130982981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533566695
    },
    {
        "content": "<p>What would be harder?</p>",
        "id": 130983001,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533566711
    },
    {
        "content": "<p>you have to ulift somewhere, and this will affect proofs that don't care about Prop</p>",
        "id": 130983027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533566738
    },
    {
        "content": "<p>of course another way to solve the particular problem you show is to have a second pi instance for Props</p>",
        "id": 130983244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533566919
    },
    {
        "content": "<p>I forgot that <code>list</code> didn't take a <code>Sort</code>.</p>",
        "id": 130983543,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533567190
    },
    {
        "content": "<p>Actually, I'm not sure it can be done at all, assuming that <code>list</code> and <code>finset</code> stay as is</p>",
        "id": 130983761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533567370
    },
    {
        "content": "<p>What would be the type of <code>fintype</code>? If it is <code>Sort u -&gt; Type u</code> then it bumps the universe level in unwanted circumstances (i.e. <code>fintype nat : Type 1</code>), and if it is <code>Sort u -&gt; Sort (max 1 u)</code> then you can't define it</p>",
        "id": 130983876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533567475
    },
    {
        "content": "<p>since <code>Sort (max 1 u) = Sort (?+1)</code> is unsolvable (you would need a <code>pred u</code> function but that doesn't exist)</p>",
        "id": 130984035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533567593
    },
    {
        "content": "<p>Is there any reason not to just make everything a Sort, just in case some random thing like this comes up where it's useful?</p>",
        "id": 130990940,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533574929
    },
    {
        "content": "<p>I think the main thing has to do with elimination. If your type is<code>Sort 0</code>, there's a special case that you can only eliminate to <code>Sort 0</code>. Otherwise, in <code>Sort 1</code>, you can eliminate anywhere you like.</p>",
        "id": 130994870,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533578938
    },
    {
        "content": "<p>Btw, your instance type checks for me. Are you sure your issues have to do with universes?</p>",
        "id": 130995291,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533579384
    },
    {
        "content": "<p>It type checks, but it can't synthesize the instance</p>",
        "id": 130995344,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533579479
    },
    {
        "content": "<p>But if there was an instance saying <code>Pi p : Prop, fintype p</code> it would synthesize the instance from <code>pi.fintype</code></p>",
        "id": 130995413,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533579541
    },
    {
        "content": "<p>I think you could make it work with an instance like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">fintype&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 130996568,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533580886
    },
    {
        "content": "<blockquote>\n<p>I think the main thing has to do with elimination. If your type is<code>Sort 0</code>, there's a special case that you can only eliminate to <code>Sort 0</code>. Otherwise, in <code>Sort 1</code>, you can eliminate anywhere you like.</p>\n</blockquote>\n<p>So that makes sense for making inductive types Types rather than sorts, but for functions defined on an arbitrary Type, I don't see a downside.</p>",
        "id": 130996873,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533581224
    },
    {
        "content": "<p>I should probably PR both of these</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">decidable_eq_pfun_fintype</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">hp</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">hp</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">hp</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span>\n<span class=\"k\">else</span> <span class=\"n\">is_true</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">fintype_pfun</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">hp</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">hp</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">funext_iff</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 130997539,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533581955
    },
    {
        "content": "<blockquote>\n<p>but for functions defined on an arbitrary Type, I don't see a downside.</p>\n</blockquote>\n<p>I agree. Although, I find that universe constraints have a way of propagating to infect every definition once you have one. Being more polymorphic seems easier said than done.</p>",
        "id": 130998223,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533582666
    }
]