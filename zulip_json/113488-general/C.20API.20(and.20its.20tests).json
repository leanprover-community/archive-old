[
    {
        "content": "<p>I've been playing with the C-API (src/api/lean*.h) and feel that the tests may not be up to date wrt. to the current lean code base.<br>\nShould the code in src/tests/shared/ on master build and/or work?<br>\nLooking at env.c for instance it has \"import standard open nat definition double (a : nat) := a + a check double 4 eval double 4\" -- but that is missing # signs in front of check and eval for current syntax, and I can't find a standard module to import ...</p>",
        "id": 173862128,
        "sender_full_name": "Utz-Uwe Haus",
        "timestamp": 1566462075
    },
    {
        "content": "<p>The last commit in <code>src/tests/shared</code> was in 2017 and was \"remove standard.lean (unused, and confusing given stdlib)\".</p>",
        "id": 173863427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566463374
    },
    {
        "content": "<p>This old blog post <a href=\"https://homotopytypetheory.org/2015/12/02/the-proof-assistant-lean/\" target=\"_blank\" title=\"https://homotopytypetheory.org/2015/12/02/the-proof-assistant-lean/\">https://homotopytypetheory.org/2015/12/02/the-proof-assistant-lean/</a> seems to indicate that in Lean 1 or 2, <code>#check</code> was indeed <code>check</code>. So it seems like you're looking at super-old code which has not been brought up to date with Lean 3.</p>",
        "id": 173863737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566463617
    },
    {
        "content": "<p>That is what I guessed.<br>\nStill, reading the C api headers it seems that</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">lean_exception</span> <span class=\"n\">ex</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"n\">lean_env</span> <span class=\"n\">env</span><span class=\"p\">;</span>\n  <span class=\"n\">lean_options</span> <span class=\"n\">o</span><span class=\"p\">;</span>\n  <span class=\"n\">lean_ios</span> <span class=\"n\">ios</span><span class=\"p\">;</span>\n\n  <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">lean_options_mk_empty</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">ex</span><span class=\"p\">));</span>\n  <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">lean_ios_mk_std</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">ios</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">ex</span><span class=\"p\">));</span>\n  <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">lean_env_mk_std</span><span class=\"p\">(</span><span class=\"n\">LEAN_TRUST_HIGH</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">ex</span><span class=\"p\">));</span>\n  <span class=\"n\">lean_env</span> <span class=\"n\">new_env</span><span class=\"p\">;</span>\n  <span class=\"n\">lean_ios</span> <span class=\"n\">new_ios</span><span class=\"p\">;</span>\n  <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">lean_parse_commands</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">ios</span><span class=\"p\">,</span>\n                            <span class=\"s\">&quot;import init&quot;</span><span class=\"p\">,</span>\n                            <span class=\"o\">&amp;</span><span class=\"n\">new_env</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">new_ios</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">ex</span><span class=\"p\">));</span>\n</pre></div>\n\n\n<p>should not give me a \"no log tree in scope\" exception.<br>\nWhat am I missing?</p>",
        "id": 173866178,
        "sender_full_name": "Utz-Uwe Haus",
        "timestamp": 1566466156
    },
    {
        "content": "<p>My guess is you are missing Lean 4...</p>",
        "id": 173866841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566466688
    },
    {
        "content": "<p>:)<br>\nSeriously, I would be happy without a 'convenient' C++ interface -- the C one seems good enough for what I have in mind for now, but it needs to work.</p>",
        "id": 173869078,
        "sender_full_name": "Utz-Uwe Haus",
        "timestamp": 1566468864
    },
    {
        "content": "<p>Not sure if this is helpful, but there is a Javascript interface <a href=\"https://github.com/leanprover/lean-client-js\" target=\"_blank\" title=\"https://github.com/leanprover/lean-client-js\">https://github.com/leanprover/lean-client-js</a> It's what the VScode extension uses, so presumably it works a bit better.</p>",
        "id": 173878544,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566477709
    },
    {
        "content": "<p>That is using the lean server socket interface, not <code>libleanshared.dylib</code></p>",
        "id": 173878660,
        "sender_full_name": "Utz-Uwe Haus",
        "timestamp": 1566477810
    },
    {
        "content": "<p>I guess I'll dig into how the lean server is implemented -- I'm hopeful it's only a minor glitch in the implementation of the C API <code>lean_env_mk_std</code> function.</p>",
        "id": 173878763,
        "sender_full_name": "Utz-Uwe Haus",
        "timestamp": 1566477884
    }
]