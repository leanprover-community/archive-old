[
    {
        "content": "<p>I'm getting a confusing deterministic timeout - with the last line of my proof there's a timeout but without it there isn't, and if I reorder the proof to have a different last line, still the last line gives a timeout. I haven't used anything like simp or tidy, and I'm pretty sure there shouldn't be any difficult typeclass searches either. What sort of thing could I do to figure out why it's timing out? (I can't really post an MWE since it's on top of thousands of lines of topos code but the proof is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sheaf_exponential</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">exp</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">unique_extend</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">B</span> <span class=\"n\">B&#39;</span> <span class=\"n\">m</span> <span class=\"n\">f&#39;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dense_prod_map_id</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">j</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">m</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">‚ü®‚ü®‚ü®</span><span class=\"n\">cchat</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">f&#39;</span> <span class=\"o\">},</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"err\">‚â´</span> <span class=\"n\">unhat</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left_symm</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚ü®</span><span class=\"n\">unhat</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 195833392,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588250797
    },
    {
        "content": "<p>I'm not sure if it makes a difference but the proof of <code>dense_prod_map_id</code> is currently sorry</p>",
        "id": 195833617,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588250946
    },
    {
        "content": "<p>and without the final line of the proof, it's very quick to show me the tactic state</p>",
        "id": 195833653,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588250973
    },
    {
        "content": "<p>are there other fields of <code>sheaf</code> you haven't provided?</p>",
        "id": 195833884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251104
    },
    {
        "content": "<p>Nope</p>",
        "id": 195833898,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251112
    },
    {
        "content": "<p>You can try turning on various trace flags, and see whether anything looks obviously out of control. Otherwise, I am afraid it's not easy to tell what's going on</p>",
        "id": 195834909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251686
    },
    {
        "content": "<p>One possibility is that you actually have a type error and Lean is going on an unfolding spree to see if it can be reduced away</p>",
        "id": 195835003,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251719
    },
    {
        "content": "<p>Are there any trace flags I should try first? <code>trace.class_instances</code> didn't seem out of control</p>",
        "id": 195835097,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195835003\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195835003\">said</a>:</p>\n<blockquote>\n<p>One possibility is that you actually have a type error and Lean is going on an unfolding spree to see if it can be reduced away</p>\n</blockquote>\n<p>This makes sense, but if I reorder the proof (eg changing the <code>have z</code> to a <code>suffices</code>) there's no type error for the alternative last line</p>",
        "id": 195835237,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251818
    },
    {
        "content": "<p>For clarity, by reordered proof I mean:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sheaf_exponential</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">exp</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">unique_extend</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">B</span> <span class=\"n\">B&#39;</span> <span class=\"n\">m</span> <span class=\"n\">f&#39;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dense_prod_map_id</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">j</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">m</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">‚ü®‚ü®‚ü®</span><span class=\"n\">cchat</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">f&#39;</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n      <span class=\"n\">suffices</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"err\">‚â´</span> <span class=\"n\">unhat</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚ü®</span><span class=\"n\">unhat</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n        <span class=\"n\">congr</span><span class=\"o\">,</span>\n        <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left_symm</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n    <span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 195835283,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251841
    },
    {
        "content": "<p>In both cases commenting out the last line (in the latter case, just the <code>ha</code>) tells me quickly that the goal isn't solved and there's no other errors</p>",
        "id": 195835390,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251885
    },
    {
        "content": "<p>maybe <code>set_option trace.type_context.is_def_eq true</code></p>",
        "id": 195835402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251898
    },
    {
        "content": "<p>Doesn't seem to be crazy, one of the rw gives a pretty long trace but most of it says success</p>",
        "id": 195835923,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588252140
    },
    {
        "content": "<p>Post a MWE anyway. Seriously. Of the form \"download this branch of this repo, and look at this line in this file\". When people did this in the past I just thought they were taking the mickey. But now with leanproject it's much easier.</p>",
        "id": 195836978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588252732
    },
    {
        "content": "<p>Well, something must be happening where Lean starts taking time.</p>",
        "id": 195837143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588252812
    },
    {
        "content": "<p>In the past I have occasionally resorted to running Lean in a debugger, then stopping it at a random point and looking at the trace</p>",
        "id": 195837169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588252828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195836978\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195836978\">said</a>:</p>\n<blockquote>\n<p>Post a MWE anyway. Seriously. Of the form \"download this branch of repo, and look at this line in this file\". When people did this in the past I just thought they were taking the mickey. But now with leanproject it's much easier.</p>\n</blockquote>\n<p>The final line in <a href=\"https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean\" title=\"https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean\">https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean</a> - download the sheaf branch of the repo. (It's not particularly minimal)</p>",
        "id": 195837876,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588253209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195837169\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195837169\">said</a>:</p>\n<blockquote>\n<p>In the past I have occasionally resorted to running Lean in a debugger, then stopping it at a random point and looking at the trace</p>\n</blockquote>\n<p>How could I do this?</p>",
        "id": 195860476,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588262199
    },
    {
        "content": "<p>If I add another line (eg simp) before the <code>end</code>, it says the tactic state is <code>goals accomplished</code> and the simp fails with match failed, no goals; and this happens quickly</p>",
        "id": 195866461,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588264744
    },
    {
        "content": "<p>My guess is that you should try to fill in the sorry of <code>dense_prod_map_id</code>: it is not a Prop, so what you put in there is important.</p>\n<p>By the way, all these classes (<code>dense</code>, <code>closed</code>) are not Props because <code>is_iso</code> is not Prop either. Does it really create problems to turn <code>is_iso</code> into a Prop, just requiring the existence of an inverse -- and having a convenience function <code>is_iso.inverse</code> that would pull the inverse out of choice?</p>",
        "id": 195869576,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588265864
    },
    {
        "content": "<p>This is the big \"category_theory uses data, not Props\" question...</p>",
        "id": 195869737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588265915
    },
    {
        "content": "<p>The same thing with <code>has_limits</code> etc...</p>",
        "id": 195869849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588265954
    },
    {
        "content": "<p>Yeah I think it has to be all or nothing - we've got to have everything as a Prop or everything as data otherwise things won't play well with each other</p>",
        "id": 195870021,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266008
    },
    {
        "content": "<p>If the data is not unique, then I understand you need to keep the data and record the way it is constructed. But when the data is unique like the inverse, I don't see the point.</p>",
        "id": 195870328,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588266124
    },
    {
        "content": "<p>In some cases, the data might only be unique up to (unique) isomorphism, but also in category theory (and topos theory) we often try to avoid using choice, so just the existence of a unique object isn't enough</p>",
        "id": 195870702,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266318
    },
    {
        "content": "<p>It's also reasonably common to take \"has limits\" in category theory to mean \"we are given a particular choice of limit for every diagram\", which matches lean's current definition</p>",
        "id": 195870863,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266384
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/0Z1rlCc5VdNPOiDKBmBv2RPo/image.png\" title=\"image.png\">eg just after Lemma A1.2.1 in the Elephant</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0Z1rlCc5VdNPOiDKBmBv2RPo/image.png\" title=\"eg just after Lemma A1.2.1 in the Elephant\"><img src=\"/user_uploads/3121/0Z1rlCc5VdNPOiDKBmBv2RPo/image.png\"></a></div>",
        "id": 195870981,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266436
    },
    {
        "content": "<p>Only very picky people and theorem provers would consider \"having limits\" to mean a choice of limits.</p>",
        "id": 195871331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588266598
    },
    {
        "content": "<p>I won't tell PTJ you called him picky :P</p>",
        "id": 195871532,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266694
    },
    {
        "content": "<p>I'm pretty sure this is the convention in MM as well</p>",
        "id": 195871547,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266702
    },
    {
        "content": "<p>metamath?</p>",
        "id": 195871637,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588266739
    },
    {
        "content": "<p>Maclane-Moerdijk</p>",
        "id": 195871653,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266745
    },
    {
        "content": "<p>I think this is mainly in the eye of the beholder</p>",
        "id": 195871693,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588266771
    },
    {
        "content": "<p>Just like, \"obviously\", most category theory texts mean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">U</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span></span></span></span></span>-small category for some universe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">U</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span></span></span></span></span> even if they never mention universes</p>",
        "id": 195871885,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588266869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195871693\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195871693\">said</a>:</p>\n<blockquote>\n<p>I think this is mainly in the eye of the beholder</p>\n</blockquote>\n<p>Maybe, but it is explicitly discussed and mentioned in the Elephant</p>",
        "id": 195871917,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266896
    },
    {
        "content": "<p>My guess is these picky people have to rely on the fact that there is nobody even pickier who wants to dismantle their position</p>",
        "id": 195871956,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588266913
    },
    {
        "content": "<p>So I tried some preliminary investigations:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">...</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ZZZ</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">cchat</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">unhat</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">at</span> <span class=\"n\">ZZZ</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">ZZZ</span><span class=\"o\">,</span>\n    <span class=\"n\">dunfold</span> <span class=\"n\">exp_transpose</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195876596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588269116
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ZZZ</span> <span class=\"o\">:</span> <span class=\"err\">‚áë</span><span class=\"o\">(</span><span class=\"n\">is_left_adjoint</span><span class=\"bp\">.</span><span class=\"n\">adj</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"n\">B</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">‚áë</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">is_left_adjoint</span><span class=\"bp\">.</span><span class=\"n\">adj</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"n\">B</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"err\">‚ä¢</span> <span class=\"err\">‚áë</span><span class=\"o\">(</span><span class=\"n\">is_left_adjoint</span><span class=\"bp\">.</span><span class=\"n\">adj</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"n\">B</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">‚áë</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">is_left_adjoint</span><span class=\"bp\">.</span><span class=\"n\">adj</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"n\">B</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 195876726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588269174
    },
    {
        "content": "<p>and <code>exact ZZZ</code> or <code>convert ZZZ</code> causes the timeout</p>",
        "id": 195876757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588269186
    },
    {
        "content": "<p>So of course when you <code>set_option pp.all true</code> you find that the terms are different.</p>",
        "id": 195876813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588269213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195835283\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195835283\">said</a>:</p>\n<blockquote>\n<p>For clarity, by reordered proof I mean:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sheaf_exponential</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">exp</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">unique_extend</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">B</span> <span class=\"n\">B&#39;</span> <span class=\"n\">m</span> <span class=\"n\">f&#39;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dense_prod_map_id</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">j</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">m</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">‚ü®‚ü®‚ü®</span><span class=\"n\">cchat</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">f&#39;</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n      <span class=\"n\">suffices</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"err\">‚â´</span> <span class=\"n\">unhat</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚ü®</span><span class=\"n\">unhat</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n        <span class=\"n\">congr</span><span class=\"o\">,</span>\n        <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left_symm</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n    <span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Yeah I get a timeout as well with exact ZZZ, but with the re-ordered version of the code that version doesn't give a type error</p>",
        "id": 195876931,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588269265
    },
    {
        "content": "<p>and that doesn't explain why it's fine if you put a simp afterwards</p>",
        "id": 195876945,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588269275
    },
    {
        "content": "<p>My current hypothesis is that Sebastian's right, and the problem happens when lean is trying to make the bytecode, so I'm currently filling in the sorry</p>",
        "id": 195877025,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588269311
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/7eb4998162960f7c0e1f975c8d199a71\" title=\"https://gist.github.com/kbuzzard/7eb4998162960f7c0e1f975c8d199a71\">ZZZ</a> vs <a href=\"https://gist.github.com/kbuzzard/81c432ac5a5282a4baf3ce789e358519\" title=\"https://gist.github.com/kbuzzard/81c432ac5a5282a4baf3ce789e358519\">goal</a>; <a href=\"https://gist.github.com/kbuzzard/8cd788951b49a3ff536c3dce71e085e0\" title=\"https://gist.github.com/kbuzzard/8cd788951b49a3ff536c3dce71e085e0\">diff</a></p>",
        "id": 195877247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588269412
    },
    {
        "content": "<p>Looking at the first diff, that's defeq by how I defined <code>exp</code></p>",
        "id": 195877334,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588269457
    },
    {
        "content": "<p>There are no sorrys in ZZZ or the goal though</p>",
        "id": 195878290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588269884
    },
    {
        "content": "<p>Hmm</p>",
        "id": 195878382,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588269935
    },
    {
        "content": "<p>Oh this is interesting</p>",
        "id": 195878861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588270155
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sheaf_exponential</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">exp</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">unique_extend</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">B</span> <span class=\"n\">B&#39;</span> <span class=\"n\">m</span> <span class=\"n\">f&#39;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dense_prod_map_id</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">j</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">m</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">‚ü®‚ü®‚ü®</span><span class=\"n\">cchat</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">f&#39;</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n      <span class=\"n\">suffices</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"err\">‚â´</span> <span class=\"n\">unhat</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚ü®</span><span class=\"n\">unhat</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n        <span class=\"n\">congr</span><span class=\"o\">,</span>\n        <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left_symm</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 195879038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588270212
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Tactic</span> <span class=\"n\">State</span>\n<span class=\"n\">goals</span> <span class=\"n\">accomplished</span>\n<span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">184</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">no</span> <span class=\"n\">goals</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">solved</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">no</span> <span class=\"n\">goals</span>\n</code></pre></div>",
        "id": 195879090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588270235
    },
    {
        "content": "<p>the error is on the sorry, complaining that I'm apologising when I'm all done.</p>",
        "id": 195879130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588270257
    },
    {
        "content": "<p>Right - this is the same as the simp thing I saw earlier</p>",
        "id": 195879171,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588270275
    },
    {
        "content": "<p>Really weird!</p>",
        "id": 195879176,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588270277
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sheaf_exponential</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">exp</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">unique_extend</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">B</span> <span class=\"n\">B&#39;</span> <span class=\"n\">m</span> <span class=\"n\">f&#39;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dense_prod_map_id</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">j</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">m</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">‚ü®‚ü®‚ü®</span><span class=\"n\">cchat</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">f&#39;</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n      <span class=\"n\">suffices</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"err\">‚â´</span> <span class=\"n\">unhat</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚ü®</span><span class=\"n\">unhat</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n        <span class=\"n\">congr</span><span class=\"o\">,</span>\n        <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left_symm</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>same error</p>",
        "id": 195879180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588270279
    },
    {
        "content": "<p>I've seen Lean in sort of this state before -- there are hidden goals. There's a tactic which makes them come out</p>",
        "id": 195879226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588270305
    },
    {
        "content": "<p>But I don't think there are hidden goals! In all the code I've written I haven't used any <code>. obviously</code> or anything</p>",
        "id": 195879347,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588270346
    },
    {
        "content": "<p>Sometimes a tactic just leaves some hidden goals behind by accident</p>",
        "id": 195879486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588270418
    },
    {
        "content": "<p>True</p>",
        "id": 195879497,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588270423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195877025\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195877025\">said</a>:</p>\n<blockquote>\n<p>My current hypothesis is that Sebastian's right, and the problem happens when lean is trying to make the bytecode, so I'm currently filling in the sorry</p>\n</blockquote>\n<p>You probably mean S√©bastien here. I don't know why Zulip doesn't use accents here, but the ASCII version is already enough to disambiguate between Sebastian working on Lean4 and Sebastien working on calculus and analytic functions</p>",
        "id": 195880019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588270658
    },
    {
        "content": "<p>I can't remember the name of the tactic which makes the hidden goals appear :-(</p>",
        "id": 195880055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588270676
    },
    {
        "content": "<p><code>recover</code>?</p>",
        "id": 195880115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588270686
    },
    {
        "content": "<p>Yeah that's the one. OK I am going back to blaming the sorried data. The problem isn't the <code>exact</code>, it's when Lean is putting everything together afterwards.</p>",
        "id": 195880263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588270744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195880019\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195880019\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195877025\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195877025\">said</a>:</p>\n<blockquote>\n<p>My current hypothesis is that Sebastian's right, and the problem happens when lean is trying to make the bytecode, so I'm currently filling in the sorry</p>\n</blockquote>\n<p>You probably mean S√©bastien here. I don't know why Zulip doesn't use accents here, but the ASCII version is already enough to disambiguate between Sebastian working on Lean4 and Sebastien working on calculus and analytic functions</p>\n</blockquote>\n<p>Oops, yeah, thanks!</p>",
        "id": 195880299,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588270760
    },
    {
        "content": "<p>Or as I call them, Sebasti‚àÄn and Sebasti‚àÉn.</p>",
        "id": 195880443,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588270808
    },
    {
        "content": "<p>Maybe it should be renamed <code>#recover</code>; it's not intended for leaving in proof scripts because it's pretty expensive and usually indicates a bug in another tactic</p>",
        "id": 195880444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588270809
    },
    {
        "content": "<p>Another Mario has appeared on the chat, so maybe I need to start going by M√°rio</p>",
        "id": 195880741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588270946
    },
    {
        "content": "<p>We lost track of how many Kevin we have a long time ago.</p>",
        "id": 195880831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588270986
    },
    {
        "content": "<p>Hopefully I'll be safe for a while</p>",
        "id": 195880853,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588270996
    },
    {
        "content": "<p>Or maybe I should hope for the opposite</p>",
        "id": 195880883,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588271009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195860476\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195860476\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195837169\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195837169\">said</a>:</p>\n<blockquote>\n<p>In the past I have occasionally resorted to running Lean in a debugger, then stopping it at a random point and looking at the trace</p>\n</blockquote>\n<p>How could I do this?</p>\n</blockquote>\n<p>Depends on your platform I suppose, but I just run lean inside gdb</p>",
        "id": 195889897,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588275118
    },
    {
        "content": "<p>from the command line</p>",
        "id": 195889902,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588275121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195880263\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195880263\">said</a>:</p>\n<blockquote>\n<p>Yeah that's the one. OK I am going back to blaming the sorried data. The problem isn't the <code>exact</code>, it's when Lean is putting everything together afterwards.</p>\n</blockquote>\n<p>This isn't it... I filled in the sorry</p>",
        "id": 195893897,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588277029
    },
    {
        "content": "<p>For those experimenting, I've pushed the updated version - same file</p>",
        "id": 195894018,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588277092
    },
    {
        "content": "<p>Further confusing this, I've got two other defs which construct a <code>sheaf</code> and they don't have the same problem...</p>",
        "id": 195991945,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588357072
    },
    {
        "content": "<p>This is worth more investigation. I've had quite a busy day today and I've got another one tomorrow but I hope to find the time to look at this again, it's not like anything I've seen before which is why I find it interesting. Can you make a branch with the error so it doesn't get lost?</p>",
        "id": 195994444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588358495
    },
    {
        "content": "<p>Will do!</p>",
        "id": 196002780,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588363007
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/FUoycAJfx3fzKgMdUGrjZTu3/Screencast-2020-05-01-203515.mp4\" title=\"Screencast-2020-05-01-203515.mp4\">Screencast-2020-05-01-203515.mp4</a></p>",
        "id": 196002800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588363021
    },
    {
        "content": "<p>If anyone knows of any workarounds that might work I'd find that useful as well</p>",
        "id": 196002805,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588363023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  what is going on here?</p>",
        "id": 196002878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588363075
    },
    {
        "content": "<p>Sometimes it takes forever to time out, sometimes it's quick, but it never works</p>",
        "id": 196002988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588363119
    },
    {
        "content": "<p>Restarting Lean just makes it think forever and then time out with the  error</p>\n<div class=\"codehilite\"><pre><span></span><code>excessive memory consumption detected at &#39;expression equality test&#39; (potential solution: increase memory consumption threshold)\n</code></pre></div>",
        "id": 196003814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588363608
    },
    {
        "content": "<p>I am guessing the term is bad in some way, and the kernel has decided to unfold everything as a result</p>",
        "id": 196025676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588381921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195879130\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195879130\">said</a>:</p>\n<blockquote>\n<p>the error is on the sorry, complaining that I'm apologising when I'm all done.</p>\n</blockquote>\n<p>How does that explain this?</p>",
        "id": 196025757,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588382015
    },
    {
        "content": "<p>Writing <code>sorry</code> when there are no goals is an error, right?</p>",
        "id": 196025804,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588382053
    },
    {
        "content": "<p>I didn't follow what Kevin was seeing in his video.</p>",
        "id": 196025808,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588382065
    },
    {
        "content": "<p>In particular, it looks like the tactic block is succeeding but then the resulting term is somehow defective.</p>",
        "id": 196025829,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588382121
    },
    {
        "content": "<p>I suggested <code>set_option trace.type_context.is_def_eq true</code> before but I think it really should have been the one with <code>detail</code>.</p>",
        "id": 196026020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588382437
    },
    {
        "content": "<p>Try turning that on and running lean on your file from the command line</p>",
        "id": 196026023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588382449
    },
    {
        "content": "<p>I used these flags today and I think <code>is_def_eq</code> only displays the unification problems, not the trace of trying to solve them.</p>",
        "id": 196026044,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588382516
    },
    {
        "content": "<p>I didn't realise the <code>def</code> was underlined blue! That's the one with the long trace - and it fits with the idea that there's an issue creating the term</p>",
        "id": 196051962,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588426558
    },
    {
        "content": "<p>I can't figure out what the issue is though</p>",
        "id": 196052002,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588426566
    },
    {
        "content": "<p>Here's the trace: <a href=\"https://gist.github.com/b-mehta/88525a9eb2c41c23e414d9bb30c650fb\" title=\"https://gist.github.com/b-mehta/88525a9eb2c41c23e414d9bb30c650fb\">https://gist.github.com/b-mehta/88525a9eb2c41c23e414d9bb30c650fb</a></p>",
        "id": 196052012,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588426613
    },
    {
        "content": "<p>The question is whether, when you run Lean from the command line, you get trace output continuously or whether it just stops at some point.</p>",
        "id": 196052027,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588426655
    },
    {
        "content": "<p>If it just stops, clearly it is doing something and the game is to figure out what trace option will make it print more stuff.</p>",
        "id": 196052035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588426673
    },
    {
        "content": "<p>In vscode it stops and says deterministic timeout, I'm running on command line now</p>",
        "id": 196052096,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588426759
    },
    {
        "content": "<p>Ah! It runs for a while and then stops</p>",
        "id": 196052417,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588427267
    },
    {
        "content": "<p>and my memory  gets filled up</p>",
        "id": 196052482,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588427357
    },
    {
        "content": "<p>Is there a list of what each trace option does?</p>",
        "id": 196052955,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588427886
    },
    {
        "content": "<p>Well, there's the autocomplete menu...</p>",
        "id": 196053542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588428756
    },
    {
        "content": "<p>I would just run it in a debugger at this point</p>",
        "id": 196053548,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588428774
    },
    {
        "content": "<p>The autocomplete menu doesn't give information about what the difference between each trace option is though</p>",
        "id": 196053563,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588428800
    },
    {
        "content": "<p>oh, I guess only some things are documented then</p>",
        "id": 196053569,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588428824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/196053548\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/196053548\">said</a>:</p>\n<blockquote>\n<p>I would just run it in a debugger at this point</p>\n</blockquote>\n<p>How do I go about doing this? I'm not familiar with gdb</p>",
        "id": 196053571,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588428826
    },
    {
        "content": "<p>Probably something like <code>gdb --args lean myfile.lean</code>, then type <code>r</code> and ctrl-C when it starts thinking for a long time</p>",
        "id": 196053650,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588428896
    },
    {
        "content": "<p>then <code>bt</code> to see the stack trace</p>",
        "id": 196053665,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588428921
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">$</span> <span class=\"n\">gdb</span> <span class=\"c1\">--args lean ./src/sheaf.lean</span>\n<span class=\"n\">GNU</span> <span class=\"n\">gdb</span> <span class=\"o\">(</span><span class=\"n\">GDB</span><span class=\"o\">)</span> <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">3</span>\n<span class=\"n\">Copyright</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"mi\">2019</span> <span class=\"n\">Free</span> <span class=\"n\">Software</span> <span class=\"n\">Foundation</span><span class=\"o\">,</span> <span class=\"n\">Inc</span><span class=\"bp\">.</span>\n<span class=\"n\">License</span> <span class=\"n\">GPLv3</span><span class=\"bp\">+</span><span class=\"o\">:</span> <span class=\"n\">GNU</span> <span class=\"n\">GPL</span> <span class=\"n\">version</span> <span class=\"mi\">3</span> <span class=\"n\">or</span> <span class=\"n\">later</span> <span class=\"bp\">&lt;</span><span class=\"n\">http</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">gnu</span><span class=\"bp\">.</span><span class=\"n\">org</span><span class=\"bp\">/</span><span class=\"n\">licenses</span><span class=\"bp\">/</span><span class=\"n\">gpl</span><span class=\"bp\">.</span><span class=\"n\">html</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">free</span> <span class=\"n\">software</span><span class=\"o\">:</span> <span class=\"n\">you</span> <span class=\"n\">are</span> <span class=\"n\">free</span> <span class=\"n\">to</span> <span class=\"n\">change</span> <span class=\"n\">and</span> <span class=\"n\">redistribute</span> <span class=\"n\">it</span><span class=\"bp\">.</span>\n<span class=\"n\">There</span> <span class=\"n\">is</span> <span class=\"n\">NO</span> <span class=\"n\">WARRANTY</span><span class=\"o\">,</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">extent</span> <span class=\"n\">permitted</span> <span class=\"k\">by</span> <span class=\"n\">law</span><span class=\"bp\">.</span>\n<span class=\"kt\">Type</span> <span class=\"s2\">&quot;show copying&quot;</span> <span class=\"n\">and</span> <span class=\"s2\">&quot;show warranty&quot;</span> <span class=\"n\">for</span> <span class=\"n\">details</span><span class=\"bp\">.</span>\n<span class=\"n\">This</span> <span class=\"n\">GDB</span> <span class=\"n\">was</span> <span class=\"n\">configured</span> <span class=\"n\">as</span> <span class=\"s2\">&quot;x86_64-apple-darwin17.7.0&quot;</span><span class=\"bp\">.</span>\n<span class=\"kt\">Type</span> <span class=\"s2\">&quot;show configuration&quot;</span> <span class=\"n\">for</span> <span class=\"n\">configuration</span> <span class=\"n\">details</span><span class=\"bp\">.</span>\n<span class=\"n\">For</span> <span class=\"n\">bug</span> <span class=\"n\">reporting</span> <span class=\"n\">instructions</span><span class=\"o\">,</span> <span class=\"n\">please</span> <span class=\"n\">see</span><span class=\"o\">:</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">http</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">www</span><span class=\"bp\">.</span><span class=\"n\">gnu</span><span class=\"bp\">.</span><span class=\"n\">org</span><span class=\"bp\">/</span><span class=\"n\">software</span><span class=\"bp\">/</span><span class=\"n\">gdb</span><span class=\"bp\">/</span><span class=\"n\">bugs</span><span class=\"bp\">/&gt;.</span>\n<span class=\"n\">Find</span> <span class=\"n\">the</span> <span class=\"n\">GDB</span> <span class=\"n\">manual</span> <span class=\"n\">and</span> <span class=\"n\">other</span> <span class=\"n\">documentation</span> <span class=\"n\">resources</span> <span class=\"n\">online</span> <span class=\"n\">at</span><span class=\"o\">:</span>\n    <span class=\"bp\">&lt;</span><span class=\"n\">http</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">www</span><span class=\"bp\">.</span><span class=\"n\">gnu</span><span class=\"bp\">.</span><span class=\"n\">org</span><span class=\"bp\">/</span><span class=\"n\">software</span><span class=\"bp\">/</span><span class=\"n\">gdb</span><span class=\"bp\">/</span><span class=\"n\">documentation</span><span class=\"bp\">/&gt;.</span>\n\n<span class=\"n\">For</span> <span class=\"kn\">help</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"s2\">&quot;help&quot;</span><span class=\"bp\">.</span>\n<span class=\"kt\">Type</span> <span class=\"s2\">&quot;apropos word&quot;</span> <span class=\"n\">to</span> <span class=\"n\">search</span> <span class=\"n\">for</span> <span class=\"n\">commands</span> <span class=\"n\">related</span> <span class=\"n\">to</span> <span class=\"s2\">&quot;word&quot;</span><span class=\"bp\">...</span>\n<span class=\"n\">Reading</span> <span class=\"n\">symbols</span> <span class=\"k\">from</span> <span class=\"n\">lean</span><span class=\"bp\">...</span>\n\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"kn\">open</span> <span class=\"n\">OSO</span> <span class=\"n\">archive</span> <span class=\"n\">file</span> <span class=\"s2\">&quot;/Users/travis/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib/liballoc-089d48ff1bba5f70.rlib&quot;</span>\n\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"kn\">open</span> <span class=\"n\">OSO</span> <span class=\"n\">archive</span> <span class=\"n\">file</span> <span class=\"s2\">&quot;/Users/travis/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib/libbacktrace_sys-b0895307a49d7b98.rlib&quot;</span>\n\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"kn\">open</span> <span class=\"n\">OSO</span> <span class=\"n\">archive</span> <span class=\"n\">file</span> <span class=\"s2\">&quot;/Users/travis/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib/libcompiler_builtins-35232c4af1148867.rlib&quot;</span>\n\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"kn\">open</span> <span class=\"n\">OSO</span> <span class=\"n\">archive</span> <span class=\"n\">file</span> <span class=\"s2\">&quot;/Users/travis/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib/libcore-f948d62f596dcd3d.rlib&quot;</span>\n\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"kn\">open</span> <span class=\"n\">OSO</span> <span class=\"n\">archive</span> <span class=\"n\">file</span> <span class=\"s2\">&quot;/Users/travis/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib/libpanic_unwind-cb02f3c2aa14313b.rlib&quot;</span>\n\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"kn\">open</span> <span class=\"n\">OSO</span> <span class=\"n\">archive</span> <span class=\"n\">file</span> <span class=\"s2\">&quot;/Users/travis/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib/librustc_demangle-136c67c44acb8989.rlib&quot;</span>\n\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"kn\">open</span> <span class=\"n\">OSO</span> <span class=\"n\">archive</span> <span class=\"n\">file</span> <span class=\"s2\">&quot;/Users/travis/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib/libstd-d4fbe66ddea5f3ce.rlib&quot;</span>\n\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"kn\">open</span> <span class=\"n\">OSO</span> <span class=\"n\">archive</span> <span class=\"n\">file</span> <span class=\"s2\">&quot;/Users/travis/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib/libunwind-5751ec7e6e80fbea.rlib&quot;</span>\n<span class=\"o\">(</span><span class=\"n\">No</span> <span class=\"n\">debugging</span> <span class=\"n\">symbols</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">lean</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 196053757,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588429075
    },
    {
        "content": "<p>that's probably okay, type <code>r</code> anyways</p>",
        "id": 196053899,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588429261
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n<span class=\"n\">Starting</span> <span class=\"n\">program</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">bmehta</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"bp\">./</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"n\">Unable</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">Mach</span> <span class=\"n\">task</span> <span class=\"n\">port</span> <span class=\"n\">for</span> <span class=\"n\">process</span><span class=\"bp\">-</span><span class=\"n\">id</span> <span class=\"mi\">31753</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">os</span><span class=\"bp\">/</span><span class=\"n\">kern</span><span class=\"o\">)</span> <span class=\"n\">failure</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x5</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n <span class=\"o\">(</span><span class=\"n\">please</span> <span class=\"kn\">check</span> <span class=\"n\">gdb</span> <span class=\"n\">is</span> <span class=\"n\">codesigned</span> <span class=\"bp\">-</span> <span class=\"n\">see</span> <span class=\"n\">taskgated</span><span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 196053911,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588429279
    },
    {
        "content": "<p>oh maybe your OS is broken</p>",
        "id": 196053920,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588429307
    },
    {
        "content": "<p>Rough luck</p>",
        "id": 196053921,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588429311
    },
    {
        "content": "<p>uh oh</p>",
        "id": 196053961,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588429329
    },
    {
        "content": "<p>I mean, this error is probably by design</p>",
        "id": 196053978,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588429367
    },
    {
        "content": "<p>but it seems to be preventing you from what you want to do</p>",
        "id": 196054148,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588429588
    },
    {
        "content": "<p>Is there some way you can make Lean's life easier by breaking up the definition?</p>",
        "id": 196054540,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588430175
    },
    {
        "content": "<p>You can (and need to) codesign gdb on osx, there should be instructions online.</p>",
        "id": 196054901,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588430830
    },
    {
        "content": "<p>I tried to get <code>gdb</code> running on macOS and had no luck. You can use <code>lldb</code> though. The steps are very similar to what Reid suggested with <code>gdb</code>.</p>",
        "id": 196056895,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588433548
    },
    {
        "content": "<p>The <code>lldb</code> experience is a bit inferior right now since you can't use <a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/bin/lean-gdb.py\" title=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/bin/lean-gdb.py\">this pretty-printing script</a>.</p>",
        "id": 196057023,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588433750
    },
    {
        "content": "<p>Ah thanks Bryan, I should have remembered that lldb is OSX for gdb.</p>",
        "id": 196057258,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588434107
    },
    {
        "content": "<p>What didn't work for you <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> ? The codesigning  or something else? I just followed <a href=\"https://gist.github.com/hlissner/898b7dfc0a3b63824a70e15cd0180154\" title=\"https://gist.github.com/hlissner/898b7dfc0a3b63824a70e15cd0180154\">https://gist.github.com/hlissner/898b7dfc0a3b63824a70e15cd0180154</a> and it worked (I had to sudo killall taskgated in step 9) but other than that my gdb no longer complains.</p>",
        "id": 196057390,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588434286
    },
    {
        "content": "<p>I'm using 10.14 so when I went through this in July, I tried the 10.12 and later instructions that are linked at the top of that gist. I don't remember what failed exactly, but it seems like there are various modifications people suggest in the comments which I might try <del>now</del> eventually.</p>",
        "id": 196057605,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588434619
    },
    {
        "content": "<p>Ah, 10.13 here.</p>",
        "id": 196057683,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588434738
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">$</span> <span class=\"n\">lldb</span> <span class=\"c1\">-- lean ./src/sheaf.lean</span>\n<span class=\"o\">(</span><span class=\"n\">lldb</span><span class=\"o\">)</span> <span class=\"n\">target</span> <span class=\"n\">create</span> <span class=\"s2\">&quot;lean&quot;</span>\n<span class=\"n\">Current</span> <span class=\"n\">executable</span> <span class=\"n\">set</span> <span class=\"n\">to</span> <span class=\"err\">&#39;</span><span class=\"n\">lean&#39;</span> <span class=\"o\">(</span><span class=\"n\">x86_64</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"o\">(</span><span class=\"n\">lldb</span><span class=\"o\">)</span> <span class=\"n\">settings</span> <span class=\"n\">set</span> <span class=\"c1\">-- target.run-args  &quot;./src/sheaf.lean&quot;</span>\n<span class=\"o\">(</span><span class=\"n\">lldb</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n<span class=\"n\">Process</span> <span class=\"mi\">36768</span> <span class=\"n\">launched</span><span class=\"o\">:</span> <span class=\"err\">&#39;</span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">bmehta</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean&#39;</span> <span class=\"o\">(</span><span class=\"n\">x86_64</span><span class=\"o\">)</span>\n<span class=\"n\">Process</span> <span class=\"mi\">36768</span> <span class=\"n\">stopped</span>\n<span class=\"bp\">*</span> <span class=\"n\">thread</span> <span class=\"bp\">#</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">stop</span> <span class=\"n\">reason</span> <span class=\"bp\">=</span> <span class=\"n\">exec</span>\n    <span class=\"n\">frame</span> <span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"n\">x0000000100c5f19c</span> <span class=\"n\">dyld</span><span class=\"bp\">`_</span><span class=\"n\">dyld_start</span>\n</code></pre></div>\n\n\n<p>Presumably I'm misunderstanding how to do something here...</p>",
        "id": 196058185,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588435376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195994444\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195994444\">said</a>:</p>\n<blockquote>\n<p>This is worth more investigation. I've had quite a busy day today and I've got another one tomorrow but I hope to find the time to look at this again, it's not like anything I've seen before which is why I find it interesting. Can you make a branch with the error so it doesn't get lost?</p>\n</blockquote>\n<p>I'll move my work to a different branch, and keep that branch fixed. That is, the error is (and will remain) <a href=\"https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean#L261\" title=\"https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean#L261\">https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean#L261</a></p>",
        "id": 196058296,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588435522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> enter <code>r</code> again after that. For whatever reason <code>lldb</code> immediately pauses the program when it starts.</p>",
        "id": 196058362,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588435565
    },
    {
        "content": "<p>or <code>c</code> maybe?</p>",
        "id": 196058465,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588435718
    },
    {
        "content": "<p>AFAIR, debugging through <code>elan</code> is a bad idea</p>",
        "id": 196058552,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588435818
    },
    {
        "content": "<p>Try <code>elan run lldb -- lean ...</code> instead</p>",
        "id": 196058564,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588435859
    },
    {
        "content": "<p>Oh hmm, that makes sense but I also seem to recall it just working for me. But maybe I invoked the lean binary directly, not sure.</p>",
        "id": 196058575,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588435871
    },
    {
        "content": "<p>It might work, but for one, you can't start \"lean\" (actually elan) using <code>s</code> and then set a breakpoint on a Lean function, since you're still in the wrong process.</p>",
        "id": 196058637,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588435936
    },
    {
        "content": "<p>Or set a breakpoint before <code>s</code> or <code>r</code>, in fact</p>",
        "id": 196058661,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588435971
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">$</span> <span class=\"n\">elan</span> <span class=\"n\">run</span> <span class=\"n\">lldb</span> <span class=\"c1\">-- lean src/sheaf.lean</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">toolchain</span> <span class=\"err\">&#39;</span><span class=\"n\">lldb&#39;</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">installed</span>\n</code></pre></div>",
        "id": 196058741,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588436098
    },
    {
        "content": "<p><code>elan</code> requires you to enter the name of the toolchain you want to use e.g. <code>stable</code> or <code>nightly</code> or <code>leanprover-community-lean-3.9.0</code> before the command. I think you may be better off giving the path to the Lean binary though. You can find that out using <code>elan which lean</code>.</p>",
        "id": 196058840,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588436240
    },
    {
        "content": "<p>Does elan <code>exec</code> lean?</p>",
        "id": 196058847,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588436261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/196058362\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/196058362\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> enter <code>r</code> again after that. For whatever reason <code>lldb</code> immediately pauses the program when it starts.</p>\n</blockquote>\n<p>This worked for me! Not entirely sure what to do with this though</p>",
        "id": 196058927,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588436360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/196053650\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/196053650\">said</a>:</p>\n<blockquote>\n<p>Probably something like <code>gdb --args lean myfile.lean</code>, then type <code>r</code> and ctrl-C when it starts thinking for a long time</p>\n</blockquote>\n<p>Here's the output from this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">sheaf&#39;</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">sheaf&#39;</span> <span class=\"n\">C</span> <span class=\"n\">j</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]:</span> <span class=\"n\">sheaf&#39;</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">sheaf&#39;</span>\n<span class=\"n\">r</span>\n<span class=\"n\">Process</span> <span class=\"mi\">64955</span> <span class=\"n\">stopped</span>\n<span class=\"bp\">*</span> <span class=\"n\">thread</span> <span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">queue</span> <span class=\"bp\">=</span> <span class=\"err\">&#39;</span><span class=\"n\">com</span><span class=\"bp\">.</span><span class=\"n\">apple</span><span class=\"bp\">.</span><span class=\"n\">main</span><span class=\"bp\">-</span><span class=\"n\">thread&#39;</span><span class=\"o\">,</span> <span class=\"n\">stop</span> <span class=\"n\">reason</span> <span class=\"bp\">=</span> <span class=\"n\">signal</span> <span class=\"n\">SIGSTOP</span>\n    <span class=\"n\">frame</span> <span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"n\">x00007fff6c473a16</span> <span class=\"n\">libsystem_kernel</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"bp\">`__</span><span class=\"n\">psynch_cvwait</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span>\n<span class=\"n\">libsystem_kernel</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"bp\">`__</span><span class=\"n\">psynch_cvwait</span><span class=\"o\">:</span>\n<span class=\"bp\">-&gt;</span>  <span class=\"mi\">0</span><span class=\"n\">x7fff6c473a16</span> <span class=\"bp\">&lt;+</span><span class=\"mi\">10</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span> <span class=\"n\">jae</span>    <span class=\"mi\">0</span><span class=\"n\">x7fff6c473a20</span>            <span class=\"bp\">;</span> <span class=\"bp\">&lt;+</span><span class=\"mi\">20</span><span class=\"bp\">&gt;</span>\n    <span class=\"mi\">0</span><span class=\"n\">x7fff6c473a18</span> <span class=\"bp\">&lt;+</span><span class=\"mi\">12</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span> <span class=\"n\">movq</span>   <span class=\"err\">%</span><span class=\"n\">rax</span><span class=\"o\">,</span> <span class=\"err\">%</span><span class=\"n\">rdi</span>\n    <span class=\"mi\">0</span><span class=\"n\">x7fff6c473a1b</span> <span class=\"bp\">&lt;+</span><span class=\"mi\">15</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span> <span class=\"n\">jmp</span>    <span class=\"mi\">0</span><span class=\"n\">x7fff6c46aae9</span>            <span class=\"bp\">;</span> <span class=\"n\">cerror_nocancel</span>\n    <span class=\"mi\">0</span><span class=\"n\">x7fff6c473a20</span> <span class=\"bp\">&lt;+</span><span class=\"mi\">20</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span> <span class=\"n\">retq</span>\n<span class=\"n\">Target</span> <span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">)</span> <span class=\"n\">stopped</span><span class=\"bp\">.</span>\n<span class=\"o\">(</span><span class=\"n\">lldb</span><span class=\"o\">)</span> <span class=\"n\">bt</span>\n<span class=\"bp\">*</span> <span class=\"n\">thread</span> <span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">queue</span> <span class=\"bp\">=</span> <span class=\"err\">&#39;</span><span class=\"n\">com</span><span class=\"bp\">.</span><span class=\"n\">apple</span><span class=\"bp\">.</span><span class=\"n\">main</span><span class=\"bp\">-</span><span class=\"n\">thread&#39;</span><span class=\"o\">,</span> <span class=\"n\">stop</span> <span class=\"n\">reason</span> <span class=\"bp\">=</span> <span class=\"n\">signal</span> <span class=\"n\">SIGSTOP</span>\n  <span class=\"bp\">*</span> <span class=\"n\">frame</span> <span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"n\">x00007fff6c473a16</span> <span class=\"n\">libsystem_kernel</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"bp\">`__</span><span class=\"n\">psynch_cvwait</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span>\n    <span class=\"n\">frame</span> <span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"n\">x00007fff6c63c589</span> <span class=\"n\">libsystem_pthread</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"bp\">`_</span><span class=\"n\">pthread_cond_wait</span> <span class=\"bp\">+</span> <span class=\"mi\">732</span>\n    <span class=\"n\">frame</span> <span class=\"bp\">#</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"n\">x00007fff6a277cb0</span> <span class=\"n\">libc</span><span class=\"bp\">++.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"bp\">`</span><span class=\"n\">std</span><span class=\"bp\">::__</span><span class=\"mi\">1</span><span class=\"bp\">::</span><span class=\"n\">condition_variable</span><span class=\"bp\">::</span><span class=\"n\">wait</span><span class=\"o\">(</span><span class=\"n\">std</span><span class=\"bp\">::__</span><span class=\"mi\">1</span><span class=\"bp\">::</span><span class=\"n\">unique_lock</span><span class=\"bp\">&lt;</span><span class=\"n\">std</span><span class=\"bp\">::__</span><span class=\"mi\">1</span><span class=\"bp\">::</span><span class=\"n\">mutex</span><span class=\"bp\">&gt;&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">18</span>\n    <span class=\"n\">frame</span> <span class=\"bp\">#</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"n\">x0000000100230dab</span> <span class=\"n\">lean</span><span class=\"bp\">`</span><span class=\"n\">lean</span><span class=\"bp\">::</span><span class=\"n\">mt_task_queue</span><span class=\"bp\">::</span><span class=\"n\">wait_for_finish</span><span class=\"o\">(</span><span class=\"n\">std</span><span class=\"bp\">::__</span><span class=\"mi\">1</span><span class=\"bp\">::</span><span class=\"n\">shared_ptr</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"bp\">::</span><span class=\"n\">gtask_cell</span><span class=\"bp\">&gt;</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">523</span>\n    <span class=\"n\">frame</span> <span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"n\">x00000001000055ca</span> <span class=\"n\">lean</span><span class=\"bp\">`</span><span class=\"n\">main</span> <span class=\"bp\">+</span> <span class=\"mi\">9914</span>\n    <span class=\"n\">frame</span> <span class=\"bp\">#</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"n\">x00007fff6c323015</span> <span class=\"n\">libdyld</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"bp\">`</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"n\">frame</span> <span class=\"bp\">#</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"n\">x00007fff6c323015</span> <span class=\"n\">libdyld</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"bp\">`</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"o\">(</span><span class=\"n\">lldb</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 196058937,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588436382
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 196058983,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588436415
    },
    {
        "content": "<p>Ah, <code>elan run</code> doesn't actually change the path, that's disappointing. We're planning to use it for Lean 4 development, so I hoped I could invoke gdb that way. <code>gdb/lldb $(elan which lean)</code> should work, however.</p>",
        "id": 196059035,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588436522
    },
    {
        "content": "<p>Apologies for the presumably stupid questions, this sort of thing is very much outside my wheelhouse</p>",
        "id": 196059160,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588436658
    },
    {
        "content": "<p>Seems like lldb is showing you the wrong thread. This just worked for me on linux...</p>",
        "id": 196059240,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588436819
    },
    {
        "content": "<p>Okay, I managed to build your project and get a stack trace, and it's 400 levels deep in is_def_eq stuff</p>",
        "id": 196060511,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588438794
    },
    {
        "content": "<p>It's possible I didn't wait long enough before interrupting it though</p>",
        "id": 196060554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588438804
    },
    {
        "content": "<p>I kept the <code>type_context.is_def_eq_detail</code>, and interrupted when it stopped printing lines</p>",
        "id": 196060705,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588438964
    },
    {
        "content": "<p>there were ~3612 lines</p>",
        "id": 196060714,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588438990
    },
    {
        "content": "<p>Specifically there's a lot of <code>lean::type_checker::is_def_eq_core(lean::expr const&amp;, lean::expr const&amp;)</code> involved</p>",
        "id": 196060720,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588438997
    },
    {
        "content": "<p>It's all inside <code>lean::abstract_nested_proofs_fn::visit(lean::expr const&amp;)</code></p>",
        "id": 196060738,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588439038
    },
    {
        "content": "<p>Is this the kernel or the elaborator?</p>",
        "id": 196060783,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588439066
    },
    {
        "content": "<p>I have no idea</p>",
        "id": 196060808,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588439134
    },
    {
        "content": "<p>Looks like it is the kernel</p>",
        "id": 196061551,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588440239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/196058296\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/196058296\">said</a>:<br>\nI'll move my work to a different branch, and keep that branch fixed. That is, the error is (and will remain) <a href=\"https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean#L261\" title=\"https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean#L261\">https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean#L261</a></p>\n<p>By the way, this is what tags are for, rather than branches - branches are inherently mutable and tags are inherently immutable</p>",
        "id": 196086334,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1588485034
    },
    {
        "content": "<p>TIL, thanks</p>",
        "id": 196102364,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588510795
    },
    {
        "content": "<p>I've got the proof to work! I'm not entirely sure what fixed it, but here's my current guess: <code>sheaf</code> is defined like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">sheaf&#39;</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">unique_extend</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"n\">B&#39;</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">B&#39;</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">f&#39;</span> <span class=\"o\">[</span><span class=\"n\">closure</span><span class=\"bp\">.</span><span class=\"n\">dense</span> <span class=\"n\">j</span> <span class=\"n\">m</span><span class=\"o\">],</span> <span class=\"n\">unique</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">A</span> <span class=\"bp\">//</span> <span class=\"n\">m</span> <span class=\"err\">‚â´</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span><span class=\"o\">})</span>\n\n<span class=\"n\">def</span> <span class=\"n\">forget_sheaf</span> <span class=\"o\">:</span> <span class=\"n\">sheaf&#39;</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">j</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">sheaf&#39;</span><span class=\"bp\">.</span><span class=\"n\">A</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sheaf</span> <span class=\"o\">:=</span> <span class=\"n\">induced_category</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">forget_sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">sheaf_category</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">induced_category</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"bp\">_</span>\n<span class=\"n\">def</span> <span class=\"n\">forget</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">induced_functor</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>The change I made was to have a named constructor and deconstructors for <code>sheaf</code>, and then make <code>sheaf</code> irreducible</p>",
        "id": 196127035,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588546133
    },
    {
        "content": "<p>Weird/interesting</p>",
        "id": 196128052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588547853
    },
    {
        "content": "<p>We could just make <code>induced_category</code> itself do that, I suppose</p>",
        "id": 196128097,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588547886
    },
    {
        "content": "<p>but I don't see why it would have mattered</p>",
        "id": 196128098,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588547892
    },
    {
        "content": "<p>I can't say for sure that that was the cause but I think it was this. I also have a suspicion that there was some weirdness going on with my (local) cartesian closed instances but I couldn't confirm it...</p>",
        "id": 196129923,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588551011
    },
    {
        "content": "<p>I'm getting essentially the same problem as in the original post here, but in a very different context. Specifically, the end of the proof seems to work fine, but I get a deterministic timeout on the lemma statement and nowhere else. Putting a sorry before the <code>end</code> says no goals, and there's no timeout. <code>recover</code> gives nothing helpful. The statement isn't building any data - it's a proof of <code>function.surjective</code>, and it's a <code>lemma</code>.  Further, importing this file gives a timeout at the import line, and anything transitively imported through it doesn't appear (that is, A is imported by B which is imported by C, and B has this weird proof; imports from A aren't recognised in C), but again adding a sorry before the end of the proof makes the transitive imports work again.</p>",
        "id": 224824551,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612236641
    },
    {
        "content": "<p>I haven't been able to minimise, but you can replicate this with <a href=\"https://github.com/leanprover-community/mathlib/blob/really-flat/src/category_theory/limits/filtered_colimit_commutes_finite_limit2.lean\">https://github.com/leanprover-community/mathlib/blob/really-flat/src/category_theory/limits/filtered_colimit_commutes_finite_limit2.lean</a></p>",
        "id": 224824556,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612236660
    },
    {
        "content": "<p>and you can get the import weirdness by looking in <a href=\"https://github.com/leanprover-community/mathlib/blob/really-flat/src/category_theory/limits/flat.lean\">https://github.com/leanprover-community/mathlib/blob/really-flat/src/category_theory/limits/flat.lean</a> on that same branch</p>",
        "id": 224824583,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612236713
    },
    {
        "content": "<p>Wait, the import strangeness isn't happening for me now...</p>",
        "id": 224824773,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612236822
    },
    {
        "content": "<p>oh it's happening again, I think there were old oleans</p>",
        "id": 224824865,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612236897
    },
    {
        "content": "<p>but building the file using <code>lean --make</code> doesn't give a timeout</p>",
        "id": 224824910,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612236942
    },
    {
        "content": "<p>I don't have any problems with the <code>really-flat</code> branch -- i.e. I can't reproduce. I checked it out, got oleans from azure, built <code>category_theory.limits.filtered_colimit_commutes_finite_limit2</code> on the command line, opened it in VS Code and I see no errors either in the command line build or on VS Code. Maybe nuke all olean files, get them from azure and then build?</p>",
        "id": 224873025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612273838
    },
    {
        "content": "<p>Similarly I have no problems with <code>category_theory.limits.flat</code>, no warnings or errors in VS Code. This is commit <code>61a478271e967097e3d82819b2f6f7e8c04f2932</code>. Hopefully happiness is just around the corner for you :-)</p>",
        "id": 224873232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612273937
    },
    {
        "content": "<p>Huh, I guess what's happening is that azure builds them from command line where the timeout doesn't happen, and if you download the oleans it all works fine</p>",
        "id": 224873523,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612274068
    }
]