[
    {
        "content": "<p>My universe issue with perfectoid spaces has become: if I have <code>X : Type u</code> and <code>(Y : Type v) [group Y]</code> and an injection <code>f : X -&gt; Y</code> then I want a <em>group</em> <code>G : Type u</code> and an injection <code>i:X -&gt; G</code> and an injective group homomorphism <code>j:G -&gt; Y</code> with <code>ji=f</code>. Morally I want <code>G</code> to be \"the subgroup of <code>Y</code> generated by the image of <code>f</code>, except in universe <code>u</code>\". How does one construct that sort of thing? I've never worried about this sort of question before.</p>",
        "id": 129944915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532021545
    },
    {
        "content": "<p>I guess that WLOG <code>Y</code> is generated, as a group, by the image of <code>f</code>, and then <code>j</code> would be a bijection -- but I don't know if this helps.</p>",
        "id": 129945009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532021646
    },
    {
        "content": "<p>Well, in this case, you can take the free group on X modulo whatever relations are true after applying <code>f</code>.</p>",
        "id": 129945114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1532021792
    },
    {
        "content": "<p>Oh that'll do for me. Are free groups in Lean?</p>",
        "id": 129945232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532021931
    },
    {
        "content": "<p>Actually everything is abelian</p>",
        "id": 129945235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532021941
    },
    {
        "content": "<p>but making a free group as a subset of maps from X to the integers, for example -- would that bump up the universe level by 1?</p>",
        "id": 129945264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532021992
    },
    {
        "content": "<p>No, only quantifying over types (belong to the same universe as X) would do that.</p>",
        "id": 129945350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1532022063
    },
    {
        "content": "<p>yes you're right. Thanks Reid -- this is perfect!</p>",
        "id": 129945374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532022113
    },
    {
        "content": "<p>Kevin, so you could use <code>finsupp</code> for the free groups. The would be additive, so you need to extract a multiplicative group out of it afterwards...</p>",
        "id": 129947066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532023977
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/group_theory/free_group.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/group_theory/free_group.lean\">https://github.com/leanprover/mathlib/blob/master/group_theory/free_group.lean</a></p>",
        "id": 129947558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532024569
    },
    {
        "content": "<p>But that's non-abelian...</p>",
        "id": 129948130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532025221
    },
    {
        "content": "<p>indeed</p>",
        "id": 129948135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532025233
    }
]