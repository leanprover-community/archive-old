[
    {
        "content": "<p>Is it possible to convert a <code>finset</code> into a type in an arbitrary (possibly smaller) universe, in the following sense:</p>\n<div class=\"codehilite\"><pre><span></span>universes u v\n\ndef finset.index_type {α : Type u} (s : finset α) : Type v := sorry\ndef finset.index_equiv {α : Type u} (s : finset α) : s.index_type ≃ { a // a ∈ s } := sorry\n</pre></div>\n\n\n<p>If we replace the return type with <code>Type u</code> it is of course possible:</p>\n<div class=\"codehilite\"><pre><span></span>def finset.index_type {α : Type u} (s : finset α) : Type u := { a // a ∈ s }\ndef finset.index_equiv {α : Type u} (s : finset α) : s.index_type ≃ { a // a ∈ s } := by refl\n</pre></div>\n\n\n<p>But my intuition is that since we know <code>s</code> is finite, we should be able to change universes willy-nilly. Any ideas?</p>",
        "id": 172566084,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565076253
    },
    {
        "content": "<p>I want to do something like define <code>index_type</code> as <code>fin n</code> for the appropriate <code>n</code>, but then ....  use <code>trunc</code> in some clever way to allow defining the equivalence.</p>",
        "id": 172566183,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565076389
    },
    {
        "content": "<p>Can't you make an inductive type?</p>",
        "id": 172566213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565076453
    },
    {
        "content": "<p>Let me try</p>",
        "id": 172566215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565076464
    },
    {
        "content": "<p>Hmm, no, that will always land in <code>Type (max u v)</code> I guess</p>",
        "id": 172566370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565076635
    },
    {
        "content": "<p>So why don't you define it as <code>fin s.card</code>?</p>",
        "id": 172566380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565076654
    },
    {
        "content": "<p><code>fin s.card</code>?</p>",
        "id": 172566491,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565076787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Should the equivalence be somehow \"canonical\"? Or do you just want to choose one and work with it?</p>",
        "id": 172566581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565076910
    },
    {
        "content": "<p>I guess, if you are allowed to choose a well ordering of <code>α</code> then it is possible.</p>",
        "id": 172566784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565077183
    },
    {
        "content": "<p>Otherwise I don't really see how to do this.</p>",
        "id": 172566791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565077192
    },
    {
        "content": "<p>It would be nice if it was computable. The defeq-ness might be handy</p>",
        "id": 172566795,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565077201
    },
    {
        "content": "<p><code>fintype.equiv_fin</code> will help to define the bijection for <code>s.card</code></p>",
        "id": 172566899,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565077293
    },
    {
        "content": "<p>Ah, thanks, <code>equiv_fin</code> should get me there.</p>",
        "id": 172568043,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565078660
    }
]