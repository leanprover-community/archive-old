[
    {
        "content": "<p>Here is something <code>nlinarith</code> can't do -- should it be able to do it?  Would it be easy to add?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">nlinarith</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">nlinarith</span>\n</code></pre></div>",
        "id": 209451124,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599603476
    },
    {
        "content": "<p>Also, today I learned: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>is not true by <code>rfl</code>?  (Instead there's a lemma.)</p>",
        "id": 209451866,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599604010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/something.20.60nlinarith.60.20can't.20do/near/209451124\">said</a>:</p>\n<blockquote>\n<p>Here is something <code>nlinarith</code> can't do -- should it be able to do it?  Would it be easy to add?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">nlinarith</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">nlinarith</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Something a little strange about this example: I had thought that that adding intermediate hypotheses solved by <code>ring</code> would not work, because <code>nlinarith</code> subsumes<code>ring</code>.  But in fact this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">nlinarith</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209452844,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599604807
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 209453014,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599604947
    },
    {
        "content": "<p>Makes sense, since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is defined by recursion on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</p>",
        "id": 209453034,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599604966
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4082\">#4082</a></p>",
        "id": 209507372,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599656805
    },
    {
        "content": "<p>Feel free to tag me in <code>linarith</code>/<code>nlinarith</code> questions btw, I almost missed this.</p>",
        "id": 209507404,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599656827
    },
    {
        "content": "<p>Thank you, this is great!</p>",
        "id": 209507944,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599657110
    },
    {
        "content": "<p>Remarkably, this will be merged before the <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20data.real.basic%0A%0A%2F--%20A%20statement%20%60P%20n%60%20is%20true%20for%20all%20%60n%60%20sufficiently%20large%2C%20if%20there%20exists%20a%20natural%20number%20%60M%60%2C%0Asuch%20that%20for%20%60n%20%E2%89%A5%20M%60%2C%20the%20statement%20%60P%20n%60%20is%20true.%20-%2F%0Adef%20for_sufficiently_large%20%28P%20%3A%20%E2%84%95%20%E2%86%92%20Prop%29%20%3A%20Prop%20%3A%3D%0A%E2%88%83%20%28M%20%3A%20%E2%84%95%29%2C%20%E2%88%80%20n%20%E2%89%A5%20M%2C%20P%20n%0A%0A%2F--%20The%20statement%20%60%28n%3A%E2%84%9D%29%20%5E%202%20%E2%89%A5%2012%20*%20n%20%2B%204%20%2B%20n%E2%81%BB%C2%B9%60%20is%20true%20for%20all%20%60n%60%20sufficiently%20large.%20-%2F%0Aexample%20%3A%20for_sufficiently_large%20%28%CE%BB%20n%2C%20%28n%3A%E2%84%9D%29%20%5E%202%20%E2%89%A5%2012%20*%20n%20%2B%204%20%2B%20n%E2%81%BB%C2%B9%29%20%3A%3D%0Abegin%0A%20%20use%2013%2C%0A%20%20intros%20n%20hn%2C%0A%0A%2F-%20Here%20and%20several%20times%20throughout%20the%20proof%2C%20we%20%22cast%22%20%28this%20is%20a%20computer-science%20term%29%20a%20natural%0Anumber%20%28like%20%60n%60%20or%20%6013%60%20or%20%601%60%29%20to%20a%20real%20number%2C%20by%20writing%20%60%28n%3A%E2%84%9D%29%60%20or%20similar.%20This%20lets%20us%20do%0Aoperations%20that%20wouldn't%20be%20possible%20while%20staying%20in%20the%20natural%20numbers%2C%20such%20as%20taking%20%60n%E2%81%BB%C2%B9%60.%0A%0AFor%20technical%20reasons%2C%20it's%20better%20to%20cast%20the%20first%20term%20in%20every%20equation%20you%20meet%2C%20rather%20than%0Awaiting%20to%20cast%20until%20the%20operation%20where%20it's%20needed.%20%20-%2F%0A%20%20have%20hn'%20%3A%20%28n%3A%E2%84%9D%29%20%E2%89%A5%2013%2C%0A%20%20%7B%20norm_cast%2C%0A%20%20%20%20exact%20hn%20%7D%2C%0A%0A%20%20have%20h_13%20%3A%20%2813%3A%E2%84%9D%29%20%3E%200%2C%0A%20%20%7B%20norm_num%20%7D%2C%0A%20%20have%20%3A%20%2813%3A%E2%84%9D%29%E2%81%BB%C2%B9%20%E2%89%A5%20n%E2%81%BB%C2%B9%2C%0A%20%20%7B%20--%20the%20following%20line%20found%20by%20the%20%60suggest%60%20tactic%3A%0A%20%20%20%20refine%20%28inv_le_inv%20_%20h_13%29.mpr%20hn'%2C%0A%20%20%20%20linarith%20%7D%2C%0A%20%20have%20%3A%20%281%3A%E2%84%9D%29%20%E2%89%A5%2013%E2%81%BB%C2%B9%2C%0A%20%20%7B%20cancel_denoms%20%7D%2C%0A%20%20calc%20%28n%3A%E2%84%9D%29%20%5E%202%20%3D%20n%20*%20n%20%3A%20by%20ring%0A%20%20...%20%E2%89%A5%2013%20*%20n%20%3A%20by%20nlinarith%20--%20actually%20this%20line%20and%20the%20next%20line%20are%20optional%2C%20%60nlinarith%60%20can%20do%20it%20all%20at%20once%0A%20%20...%20%E2%89%A5%2012%20*%20n%20%2B%2013%20%3A%20by%20nlinarith%0A%20%20...%20%E2%89%A5%2012%20*%20n%20%2B%204%20%2B%20n%E2%81%BB%C2%B9%20%3A%20by%20nlinarith%0Aend\">lecture I was preparing</a> when I discovered this gap.</p>",
        "id": 209531171,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599667126
    },
    {
        "content": "<p>(although it seems the web editor updates mathlib only once a day :-) )</p>",
        "id": 209532171,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599667583
    },
    {
        "content": "<p>I just triggered a web editor update which should be ready in 2 hours or so, in case you or your students want to use the new <code>nlinarith</code> there. (Sadly, the web editor build can't use <code>leanproject</code> yet.)</p>",
        "id": 209532189,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599667594
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>, I was not complaining, just marvelling!</p>",
        "id": 209532253,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599667621
    },
    {
        "content": "<p>No worries, I didn't take it that way! I'm glad folks are making use of the web editor, despite all its warts.</p>",
        "id": 209532489,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599667723
    },
    {
        "content": "<p>It's my first time using it in this way (to share a snippet with a newbie audience), but it seems perfect for the purpose.</p>",
        "id": 209532771,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599667858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Here's something <code>linarith</code> can't do; could it be made to do it?</p>\n<p>I'm continuing the thread from a couple of weeks ago because it seems similar -- it's something that <code>ring</code> can do, so it feels like it would be safe to tell <code>linarith</code> about it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"c1\">--fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n<span class=\"c1\">--works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Adapted from an open PR of <span class=\"user-mention\" data-user-id=\"203577\">@Malo Jaffré</span> (<a href=\"https://github.com/leanprover-community/mathlib/issues/4307\">#4307</a>).</p>",
        "id": 211537350,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601320792
    },
    {
        "content": "<p>This example if very officially out of scope for <code>linarith</code> (non-constant denominator).</p>",
        "id": 211537554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601320900
    },
    {
        "content": "<p><code>linarith</code> does a normalization of hypotheses which is very similar to <code>ring</code>, but not quite the same.  IANATW (I am not a tactic writer), but I don't see why the normalization of hypotheses can't be exactly the same as that done by <code>ring</code>.</p>",
        "id": 211537862,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601321044
    },
    {
        "content": "<p>Here's what the <code>ring</code> converts the problem to (and it works):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 211537968,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601321102
    },
    {
        "content": "<p>also, it seems to work in Coq :)</p>\n<div class=\"codehilite\" data-code-language=\"Coq\"><pre><span></span><code><span class=\"kn\">Require</span> <span class=\"kn\">Import</span> <span class=\"n\">Psatz</span> <span class=\"n\">Rbase</span><span class=\"o\">.</span>\n<span class=\"kn\">Open</span> <span class=\"kn\">Scope</span> <span class=\"n\">R_scope</span><span class=\"o\">.</span>\n\n<span class=\"kn\">Lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">/</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">c</span> <span class=\"o\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">a</span><span class=\"o\">.</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span>\n  <span class=\"n\">lra</span><span class=\"o\">.</span>\n<span class=\"kn\">Qed</span><span class=\"o\">.</span>\n</code></pre></div>",
        "id": 211538779,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601321511
    },
    {
        "content": "<p>Mmm. It's possible, I'm not sure if it's a tiny change to the linarith parser or a medium change.</p>",
        "id": 211539671,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601321958
    },
    {
        "content": "<p>This needs a medium change to the parsing step. As much as I hate that <code>lra</code> can do something <code>linarith</code> can't, it'll have to wait, unless this is blocking something big.</p>",
        "id": 211611090,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601380973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/something.20.60nlinarith.60.20can't.20do/near/211537862\">said</a>:</p>\n<blockquote>\n<p><code>linarith</code> does a normalization of hypotheses which is very similar to <code>ring</code>, but not quite the same.  IANATW (I am not a tactic writer), but I don't see why the normalization of hypotheses can't be exactly the same as that done by <code>ring</code>.</p>\n</blockquote>\n<p><code>linarith</code> doesn't use <code>ring</code> as a normalizer because it's expensive to do verified preprocessing. The normalization doesn't have to be proof producing since the rest of <code>linarith</code> produces and checks a certificate. So the parsing stage (\"figure out the linear structure of this expression\") is much lighter weight.</p>",
        "id": 211611389,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601381162
    },
    {
        "content": "<p>But the data structure it parses into is (unsurprisingly) badly suited for division.</p>",
        "id": 211611518,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601381241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/something.20.60nlinarith.60.20can't.20do/near/211611389\">said</a>:</p>\n<blockquote>\n<p><code>linarith</code> doesn't use <code>ring</code> as a normalizer because it's expensive to do verified preprocessing. The normalization doesn't have to be proof producing since the rest of <code>linarith</code> produces and checks a certificate. So the parsing stage (\"figure out the linear structure of this expression\") is much lighter weight.</p>\n</blockquote>\n<p>Thanks, very interesting!</p>",
        "id": 211623430,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601387553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/something.20.60nlinarith.60.20can't.20do/near/211611090\">said</a>:</p>\n<blockquote>\n<p>As much as I hate that <code>lra</code> can do something <code>linarith</code> can't, it'll have to wait, unless this is blocking something big.</p>\n</blockquote>\n<p>One can use the workaround <code>ring at ...., linarith</code> forever, so it can certainly wait :)</p>",
        "id": 211623492,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601387593
    }
]