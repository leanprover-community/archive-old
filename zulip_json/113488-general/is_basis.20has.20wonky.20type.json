[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">is_basis</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Is that OK? We ask for a type <code>R</code>, and then much later on we ask for the ring structure on R. I would have had the map <code>iota -&gt; M</code> at the very end, and indeed the definition could probably easily be \"fixed\" by moving the variable order around in <code>linear_algebra.basis</code>. But does it matter?</p>",
        "id": 231225570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616343544
    },
    {
        "content": "<p>If we care about this, a linter might be a good idea</p>",
        "id": 231226347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616344410
    },
    {
        "content": "<p>It's very hard to know what order your variables are going to end up in without inserting <code>#check</code> all the time</p>",
        "id": 231226357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616344439
    },
    {
        "content": "<p>I guess as a concrete example of a problem with that definition, <code>(set_of (is_basis R) : set M)</code> doesn't work without adding a lambda</p>",
        "id": 231226463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616344519
    },
    {
        "content": "<p>I don't think it matters. Certainly we haven't been very consistent about any particular ordering, although it's fairly common to have all the types and then all the instances and then other stuff</p>",
        "id": 231236772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616355810
    },
    {
        "content": "<p>Actually it does matter a bit in this case since the function is an explicit argument, which means if you use <code>is_basis</code> unapplied then <code>R</code> is inferred but not <code>ring R</code></p>",
        "id": 231236842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616355883
    },
    {
        "content": "<p>I think we should at least keep typeclasses and implicit type arguments before explicit arguments</p>",
        "id": 231236892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616355935
    },
    {
        "content": "<p>Unless we have <code>(R : Type*) [ring R]</code></p>",
        "id": 231255939,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616378963
    }
]