[
    {
        "content": "<p>I'm trying to do some basic proofs/programming involving an abstract syntax for a language that requires some mutual inductive types and indirect recursion.  In order to work with these effectively, I need to use well-founded recursion.  As a consequence, I really need a tactic for discharging some pretty straightforward theorems of linear arithmetic that arise from reasoning about <code>sizeof</code>-based measure functions.</p>\n<p>Up until now, I've been using <code>tactic.linarith</code> from mathlib.  However, when including mathlib in my project, I run into persistent problems with lean reporting <code>excessive memory usage</code> errors and the flycheck emacs mode crapping out and disabling itself, and making the editor rather unresponsive.  It's unpredictable, but I typically get less than an hour's worth of work done before I have to shutdown my emacs and restart, which is intensely annoying.  I haven't found a feasible workaround yet.  Running <code>leanpkg build</code> from the command line seems to help for a time, but the problem eventually resurfaces for reasons I don't understand.</p>\n<p>So, the questions: is there an alternate linear arithmetic tactic I can use that has a smaller footprint than mathlib? Do other people experience similar problems to the ones I'm describing? How do you deal with them?</p>",
        "id": 161972761,
        "sender_full_name": "Rob Dockins",
        "timestamp": 1553793029
    },
    {
        "content": "<p>Hi Rob! Right now, every contribution that I know of goes into mathlib. The good news is that there is now a nightly build of mathlib that you can fetch using a script called <code>update-mathlib</code> which you can get by following the instructions here: <a href=\"https://github.com/leanprover-community/mathlib#obtaining-binaries\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib#obtaining-binaries\">https://github.com/leanprover-community/mathlib#obtaining-binaries</a></p>",
        "id": 161973116,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553793244
    },
    {
        "content": "<p>It is still a new feature of mathlib so please let us know if you find any issue or if there's a better way it could function.</p>",
        "id": 161973183,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553793299
    },
    {
        "content": "<p>Also, a tactic like Coq's <code>omega</code> (also called <code>omega</code>) is in the process of being merged to mathlib so you might be happier with it than with <code>linarith</code>.</p>",
        "id": 161973414,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553793449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I'm not sure that's related. <code>leanpkg build</code> will achieve everything that <code>update-mathlib</code> does (except saving time). If it doesn't fix this issue then <code>update-mathlib</code> won't help.</p>",
        "id": 161973426,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1553793455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"201488\">@Rob Dockins</span> can you tell if the problem is <code>linarith</code>-specific, or do you think it's more general to <code>mathlib</code>? Just having <code>mathlib</code> loaded/importing files from there shouldn't cause memory issues. If that's what's happening then there's something odd with your setup.</p>",
        "id": 161973572,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1553793553
    },
    {
        "content": "<p>That is a common issue that building too much of mathlib because of a new import will cause emacs to misbehave. After calling <code>leanpkg build</code>, the issue might resurface if you import a module that hasn't been compiled yet.</p>",
        "id": 161973622,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553793600
    },
    {
        "content": "<p>It's really hard to tell, honestly.  I get the impression that it is more related to lean going off and doing background recompiles and such, rather than being related to the tactic itself, but that's just a guess...</p>",
        "id": 161973792,
        "sender_full_name": "Rob Dockins",
        "timestamp": 1553793700
    },
    {
        "content": "<p>So, <code>leanpkg build</code> doesn't just build the entire mathlib tree?  Would using the binaries as you suggested prevent recompilation?</p>",
        "id": 161973906,
        "sender_full_name": "Rob Dockins",
        "timestamp": 1553793782
    },
    {
        "content": "<p>Ah. I haven't used emacs for Lean in a long time, so I'm not sure of the details there. Rather than restarting emacs, you should be able to restart the Lean server, which could at least make debugging smoother.</p>",
        "id": 161973953,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1553793834
    },
    {
        "content": "<p>Running <code>lean --make</code> in the root directory should build all of mathlib, if you don't want to fetch the prebuilt binaries.</p>",
        "id": 161974032,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1553793877
    },
    {
        "content": "<p><code>leanpkg build</code> will only build as much of mathlib as you import in your project.</p>",
        "id": 161974098,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553793943
    },
    {
        "content": "<p>Unfortunately, restarting lean doesn't seem to help for long, it will pretty much immediately go back to doing whatever it was doing before and run out of memory again.  And once emacs gets into it's weird state, it's very hard to get it to clean itself up again.</p>\n<p>OK, I'll try to build it all first, see if that helps.</p>",
        "id": 161974129,
        "sender_full_name": "Rob Dockins",
        "timestamp": 1553793962
    },
    {
        "content": "<p>We've recently started using <code>update-mathlib</code> on our project, and it saves us a lot of headaches and wasted time.</p>",
        "id": 161974622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553794252
    },
    {
        "content": "<p>Yeah I never have issues with anything compiling lean or mathlib any more. Elan takes care of lean and update-mathlib takes care of mathlib</p>",
        "id": 161986571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553802681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Do you often have to invoke <code>update-mathlib</code> explicitly or does it mostly get called by git hooks?</p>",
        "id": 161987596,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553803374
    },
    {
        "content": "<p>So far I've been calling it explicitly.</p>",
        "id": 161992837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553807226
    },
    {
        "content": "<p>Since when ought it be called by git hooks?</p>",
        "id": 161992844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553807238
    },
    {
        "content": "<p>If that is recent, maybe we just haven't given it the chance yet.</p>",
        "id": 161992854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553807251
    },
    {
        "content": "<p>It won't be called by git hooks if you don't ask for it. You need to call <a href=\"https://github.com/leanprover-community/mathlib/blob/master/scripts/setup-lean-git-hooks.sh\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/scripts/setup-lean-git-hooks.sh\">https://github.com/leanprover-community/mathlib/blob/master/scripts/setup-lean-git-hooks.sh</a></p>",
        "id": 161993168,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553807508
    },
    {
        "content": "<p>After using <a href=\"https://github.com/leanprover-community/mathlib/blob/master/scripts/setup-dev-scripts.sh\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/scripts/setup-dev-scripts.sh\">https://github.com/leanprover-community/mathlib/blob/master/scripts/setup-dev-scripts.sh</a> of course</p>",
        "id": 161993229,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553807525
    },
    {
        "content": "<p>FWIW, things seem to be more stable for me after doing a complete build using <code>lean --make</code>.</p>\n<p>I have also learned what might be an important lesson, which is to be very careful not to input stray characters in buffers of the lean standard library source after using <code>M-.</code> to follow a definition, as this will kick off a whole bunch of useless work.</p>",
        "id": 161994912,
        "sender_full_name": "Rob Dockins",
        "timestamp": 1553808948
    },
    {
        "content": "<p>Yes thatâ€™s true. For that reason, I have directory local variables for that directory to put lean buffers in view mode</p>",
        "id": 162000639,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553814067
    },
    {
        "content": "<p>Yes, you have to be super-super-careful once you have compiled .olean files. The moment you change the timestamp for some file low down in the hierarachy, Lean notices that the timestamp of the olean file is too old and this triggers recompilation of everything (and the olean files don't get rewritten, so you are in a far more borked situation than before the edit, you're forever recompiling).</p>",
        "id": 162002374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553815643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Can you say a bit more about how to set up those directory local variables?  I'd like to do the same.</p>",
        "id": 162006818,
        "sender_full_name": "Rob Dockins",
        "timestamp": 1553820380
    },
    {
        "content": "<p>at the root of my projects, I add a <code>.dir-locals.el</code> file in which I have the line:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">((</span><span class=\"s\">&quot;_target/&quot;</span> <span class=\"o\">.</span> <span class=\"p\">((</span><span class=\"nv\">lean-mode</span> <span class=\"o\">.</span> <span class=\"p\">((</span><span class=\"nf\">eval</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"nv\">view-mode</span><span class=\"p\">)))))))</span>\n</pre></div>\n\n\n<p>It seems I no longer have the same for the core library but you can make a similar file at the root of <code>~/.elan/toolchains/3.4.2/lib/lean/library/</code> (if you use <code>elan</code>). The code should be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">((</span><span class=\"s\">&quot;./&quot;</span> <span class=\"o\">.</span> <span class=\"p\">((</span><span class=\"nv\">lean-mode</span> <span class=\"o\">.</span> <span class=\"p\">((</span><span class=\"nf\">eval</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"nv\">view-mode</span><span class=\"p\">)))))))</span>\n</pre></div>",
        "id": 162009434,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553823631
    }
]