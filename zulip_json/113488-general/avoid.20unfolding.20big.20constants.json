[
    {
        "content": "<p>well, i still need some mathlib so it's not like I can use lean 4 for my project... anyway in the orange bar hell thread it's already been established that the 2147483648 constant is the culprit so... are there any workarounds to avoid unfolding that constant without breaking my favorite tactics (norm_num, simp, linarith, ring)?</p>",
        "id": 262967290,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638161987
    },
    {
        "content": "<p>or should I use <code>num</code> instead of <code>nat</code>? I think there might be some lemmas to transform lemmas about nat into lemmas about num?</p>",
        "id": 262967449,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638162093
    },
    {
        "content": "<p>I haven't looked at what you're doing, but does just writing <code>2^31</code> help?</p>",
        "id": 262967503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638162126
    },
    {
        "content": "<p>sorry to be the bearer of bad news. I did a simple find and replace, it didn't help</p>",
        "id": 262967692,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638162426
    },
    {
        "content": "<p>ah well it helped lol, still somewhat slow but at least it didn't take forever... OOPS SPOKE TOO SOON I GOT A DEEP RECURSION ERROR</p>",
        "id": 262967744,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638162509
    },
    {
        "content": "<p>(the code is in the orange bar thread, I pasted exactly the bottleneck without anything extraneous so you might want to take a whack at it)</p>",
        "id": 262967784,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638162592
    },
    {
        "content": "<blockquote>\n<p>deep recursion was detected at 'expression equality test' (potential solution: increase stack space in your system)</p>\n</blockquote>",
        "id": 262967893,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638162725
    },
    {
        "content": "<p>One thing I would suggest would be to get rid of all the <code>clear_except</code> tactic lines, those only slow down the elaboration, since each call requires the tactic to iterate through the hypotheses and clear them away.</p>",
        "id": 262968239,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638163222
    },
    {
        "content": "<p>Does it get faster if you make the constants not really big (but still big enough for the proof to be valid of course)?</p>",
        "id": 262968478,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638163583
    },
    {
        "content": "<p>I don't think we have any good general techniques for what I am assuming is the issue here (something is causing Lean to do a calculation involving these big numbers). I would try to avoid <code>exact</code> and instead apply lemmas to leave goals that can be closed by <code>norm_num</code>. There are also more drastic options like using <code>irreducible</code>.</p>",
        "id": 262968870,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638164179
    },
    {
        "content": "<p>One option is to just start the proof of <code>split2</code> with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">lb</span> <span class=\"o\">:</span> <span class=\"n\">get_left_bound</span> <span class=\"n\">word_size_t.i32</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"mi\">30</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">get_left_bound</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">ub</span> <span class=\"o\">:</span> <span class=\"mi\">30</span> <span class=\"bp\">&lt;</span> <span class=\"n\">get_right_bound</span> <span class=\"n\">word_size_t.i32</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">get_right_bound</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">lb.trans</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lt_trans</span> <span class=\"n\">_</span> <span class=\"n\">ub</span><span class=\"o\">⟩,</span>\n</code></pre></div>",
        "id": 262968893,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638164251
    },
    {
        "content": "<p>to get rid of your large numbers asap</p>",
        "id": 262968897,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638164266
    },
    {
        "content": "<p>or 600 or whatever it is that you actually hit</p>",
        "id": 262968936,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638164285
    },
    {
        "content": "<p>I agree, in particular <code>simp only [get_right_bound, get_left_bound, within_bounds]</code> looks like a mistake, you exactly want to avoid seeing these big numbers</p>",
        "id": 262968945,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638164296
    },
    {
        "content": "<p>If you profile your existing proof, none of the <code>norm_num</code> on their own take that much time. I think there's some larger issue finalizing the whole tactic block, because even <code>sorry</code>ing the final goal makes my tactic proof grind to a halt</p>",
        "id": 262968959,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638164337
    },
    {
        "content": "<p>However, just because you don't see them doesn't mean that Lean won't unfold these definitions to check some definitional equality, unfortunately</p>",
        "id": 262968963,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638164340
    },
    {
        "content": "<p>ok this looks like something dumb</p>",
        "id": 262971001,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638167053
    },
    {
        "content": "<p>This is slow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">word_size_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">char</span>\n<span class=\"bp\">|</span> <span class=\"n\">i32</span>\n<span class=\"bp\">|</span> <span class=\"n\">i64</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get_right_bound</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"n\">word_size_t.char</span> <span class=\"o\">:=</span> <span class=\"mi\">128</span>\n<span class=\"bp\">|</span> <span class=\"n\">word_size_t.i32</span> <span class=\"o\">:=</span> <span class=\"mi\">2147483648</span>\n<span class=\"bp\">|</span> <span class=\"n\">word_size_t.i64</span> <span class=\"o\">:=</span> <span class=\"mi\">9223372036854775808</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">moo</span> <span class=\"o\">:</span> <span class=\"n\">get_right_bound</span> <span class=\"n\">word_size_t.i32</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">30</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">get_right_bound</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">split2</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">input.length</span> <span class=\"bp\">≤</span> <span class=\"mi\">30</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">input.length</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">get_right_bound</span> <span class=\"n\">word_size_t.i32</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">int.coe_nat_le.mpr</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"n\">moo</span>\n</code></pre></div>",
        "id": 262971009,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638167089
    },
    {
        "content": "<p>but this is fast:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">word_size_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">char</span>\n<span class=\"bp\">|</span> <span class=\"n\">i32</span>\n<span class=\"bp\">|</span> <span class=\"n\">i64</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get_right_bound</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"n\">word_size_t.char</span> <span class=\"o\">:=</span> <span class=\"mi\">128</span>\n<span class=\"bp\">|</span> <span class=\"n\">word_size_t.i32</span> <span class=\"o\">:=</span> <span class=\"mi\">2147483648</span>\n<span class=\"bp\">|</span> <span class=\"n\">word_size_t.i64</span> <span class=\"o\">:=</span> <span class=\"mi\">9223372036854775808</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">moo</span> <span class=\"o\">:</span> <span class=\"mi\">30</span> <span class=\"bp\">&lt;</span> <span class=\"n\">get_right_bound</span> <span class=\"n\">word_size_t.i32</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">get_right_bound</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">split2</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">input.length</span> <span class=\"bp\">≤</span> <span class=\"mi\">30</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">input.length</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">get_right_bound</span> <span class=\"n\">word_size_t.i32</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">int.coe_nat_le.mpr</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"n\">moo</span>\n</code></pre></div>",
        "id": 262971033,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638167121
    },
    {
        "content": "<p>so, it kind of looks as though the kernel is trying to test defeq of <code>(&lt;) x y</code> and <code>(&gt;) y x</code> by starting with the last arguments <code>x =?= y</code>, which isn't obviously false even when one of <code>x</code>, <code>y</code> is small because of the <code>bit0</code>/<code>bit1</code> encoding</p>",
        "id": 262971178,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638167402
    },
    {
        "content": "<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10000000007</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">L'</span> <span class=\"o\">:</span> <span class=\"mi\">10000000007</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">L</span> <span class=\"c1\">-- deep recursion</span>\n</code></pre></div>\n<p>It doesn't happen with <code>nat</code>, or with <code>&lt;=</code>, so probably related to some kernel reduction heuristic?</p>",
        "id": 262971760,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638168110
    },
    {
        "content": "<p>ah I see, my theory from before didn't make sense, instead it's trying to reduce <code>x &lt; y</code> (rather than <code>y &gt; x</code>), which can go on for some time because it is a <a href=\"https://github.com/leanprover-community/lean/blob/4887d8a30621941c883f208e151e61ab268c006d/library/init/data/int/order.lean#L13-L21\">reflection-style definition</a>, and I guess it doesn't happen for <code>&lt;=</code> because the definition height is low enough compared to <code>&gt;=</code> or something?</p>",
        "id": 262972146,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638168643
    },
    {
        "content": "<p>Maybe <code>&gt;=</code> and <code>&gt;</code> should be made <code>abbreviations</code> so they get the kernel reduction hint?</p>",
        "id": 262972151,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638168657
    },
    {
        "content": "<p>Also it might be better to make <code>int.le</code> and <code>int.lt</code> into inductive props so they don't reduce (like <code>nat.le</code>)</p>",
        "id": 262972273,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638168832
    },
    {
        "content": "<p>Yep, <code>int.le</code> and <code>int.lt</code> applied to large integer literals are timebombs because they are defeq to <code>true</code> or <code>false</code> so anything that tries to <code>whnf</code> them will die</p>",
        "id": 262974593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638171464
    },
    {
        "content": "<p>haha i finally found a workaround... i would like to share this workaround in case someone needs it...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">two_exists</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">two</span> <span class=\"o\">:=</span> <span class=\"n\">Exists.some</span> <span class=\"n\">two_exists</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">two_is_two</span> <span class=\"o\">:</span> <span class=\"n\">two</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Exists.some_spec</span> <span class=\"n\">two_exists</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>now every definition that relies on <code>two</code> is uncomputable but... i don't mind? it doesn't really matter for my use case</p>",
        "id": 263006940,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638192035
    },
    {
        "content": "<p>All the best twos are noncomputable</p>",
        "id": 263007201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638192195
    },
    {
        "content": "<p><code>@[irreducible] def two : ℤ := 2</code> should have the same effect without being noncomputable, and you can prove <code>two_is_two</code> using <code>by rw [two]</code>.</p>",
        "id": 263007830,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638192527
    },
    {
        "content": "<p>This actually doesn't work in the example I gave above</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[irreducible]</span> <span class=\"kd\">def</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"mi\">10000000007</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">two</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">L'</span> <span class=\"o\">:</span> <span class=\"n\">two</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">L</span>  <span class=\"c1\">-- still slow</span>\n</code></pre></div>",
        "id": 263008906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638193027
    },
    {
        "content": "<p>But the noncomputable version does?</p>",
        "id": 263009160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638193141
    },
    {
        "content": "<p>yeah @[irreducible] only affects elaboration, however the step after elaboration is actually the bottleneck <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> the noncomputable version fixes the issue</p>",
        "id": 263009203,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638193169
    },
    {
        "content": "<p>bizarre workaround but if it works it works</p>",
        "id": 263009309,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638193208
    },
    {
        "content": "<p>Ah, right.  So it's the kernel that takes too long.  Bad news: then the irreducible won't help in Lean 3.  Good news: it will in Lean 4.</p>",
        "id": 263009455,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638193323
    }
]