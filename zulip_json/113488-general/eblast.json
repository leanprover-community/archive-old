[
    {
        "content": "<p>I was quite amused to learn that <code>eblast</code> could do essentially all of last week's homework assignment for Jeremy's ITP course (I think <code>finish</code> is, for all practical purposes, stronger, and indeed suffices to replace all calls to <code>eblast</code> below, but I think this is neat demonstration of how far the out-of-the-box SMT tools can get you): </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span>\n\n<span class=\"n\">class</span> <span class=\"n\">lattice&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_inf</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_sup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inf_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inf_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">sup_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"err\">⊔</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sup_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">y</span> <span class=\"err\">⊔</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊔</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">inf_absorb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sup_absorb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">lattice&#39;</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span>\n  <span class=\"n\">inf_comm</span> <span class=\"n\">inf_assoc</span> <span class=\"n\">sup_comm</span> <span class=\"n\">sup_assoc</span> <span class=\"n\">inf_absorb</span> <span class=\"n\">sup_absorb</span>\n\n<span class=\"c1\">-- inside the namespace, you can refer to the axioms without a prefix</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lattice&#39;</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- the footnote on Wikipedia tells you how to prove this!</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">sup_idem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}</span> <span class=\"c1\">-- :^)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">inf_idem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">lattice&#39;</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">le_unfold</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">le_def</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_def</span><span class=\"o\">,</span> <span class=\"n\">inf_idem</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- you can use `rw le_def at *` to unfold the definition everywhere</span>\n\n<span class=\"c1\">-- Wikipedia also tells you how to prove this one:</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">le_def&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">le_trans</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">le_sup_left</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">le_sup_right</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">sup_le</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">inf_le_left</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">inf_le_right</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">le_inf</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">lattice&#39;</span>\n</pre></div>",
        "id": 160122443,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1551897840
    },
    {
        "content": "<p>I would really love to understand better what finish is doing. Do you understand this?</p>",
        "id": 160133384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551905528
    },
    {
        "content": "<p>The person to ask is really <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>, but from what I can tell from looking at the source, it is essentially <code>eblast</code> (where <code>ematch</code> is iterated only up to 20 times,  each time followed by <code>cc</code>) wrapped with preprocessing and a tableaux prover.</p>\n<p>The preprocessor negates the goal and normalizes the hypotheses by calling <code>simp</code> and pushing negations inwards. It also splits conjunctions and cases on existentials.</p>\n<p>The final step is <code>auto.done</code>, which first tries <code>contradiction</code> (if your goal is provable using just classical propositional logic then after the preprocessing, this should close it). Otherwise, it essentially runs <code>eblast</code>, which heuristically instantiates <code>ematch</code> lemmas, hoping that enough is in context for <code>cc</code> to close the goal.</p>",
        "id": 160150187,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1551913972
    },
    {
        "content": "<p>(also, <code>finish</code> only parses a list of <code>simp</code> lemmas, while <code>[smt] eblast_using</code> will parse a list of <code>texpr</code>s).</p>",
        "id": 160150889,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1551914625
    },
    {
        "content": "<p>It's a real pity about the bug in eblast, that causes it to choke on any goals which have two instances of a typeclass, parametrised by different types (e.g. <code>ring A</code> and <code>ring B</code>). <code>eblast</code> is super powerful, and would prove a tonne of stuff, e.g. in category theory, but unusable in the presence of non-trivial type classes.</p>",
        "id": 160154103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551917685
    },
    {
        "content": "<p>Hopefully someday someone writes a new version of it!</p>",
        "id": 160154108,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551917695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> could you comment on how this built-in SMT support compares with the <a href=\"https://github.com/leanprover/smt2_interface\" target=\"_blank\" title=\"https://github.com/leanprover/smt2_interface\">https://github.com/leanprover/smt2_interface</a> ?</p>",
        "id": 163371687,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555327885
    },
    {
        "content": "<p>I am not an expert, but I think the built-in SMT support is not quite an SMT solver, while <code>smt2_interface</code> implements a translation from Lean into first-order logic to send out to external SMT solvers, querying them for <code>sat</code> or <code>unsat</code>. I don't think they reconstruct Lean proofs from the proof traces produced by the external solvers, so they add an axiom that lets them treat external solvers like Z3 as oracles.</p>",
        "id": 163383513,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1555338089
    },
    {
        "content": "<p>Thanks for the comment <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span>. I tried this example, which follows the style of yours (I think). I suppose I wouldn't actually expect it to work since I'm mostly shooting in the dark, but the debugging message is not particularly informative.  Is this very far off working do you think?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">cos</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">cos_values</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">abs_values</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">cosine_shift</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>solve1 tactic failed, focused goal has not been solved\nstate:\nx : ℝ\n⊢ cos x + 2 ≠ 0\n</pre></div>",
        "id": 163463863,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555417410
    },
    {
        "content": "<p>For the record I could successfully check the example with z3.</p>\n<div class=\"codehilite\"><pre><span></span>(set-logic AUFLIRA)\n(declare-fun cos ( Real ) Real)\n(set-option :numeral-as-real true)\n;; Two basic rules that should combine to give us our conclusion\n(assert (forall (( X Real )) (and (&lt;= (cos  X) 1) (&gt;= (cos  X ) (- 1)))))\n(assert (forall (( A Real ) ( B Real )) (=&gt; (&gt; (abs A) (abs B)) (not (= (+ A B) 0)))))\n;; negate the desired conclusion because we want to check for unsatisfiablity\n(assert (forall (( X Real )) (= (+ (cos X) 2) 0)))\n(check-sat)\n(exit)\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>$ z3 -smt2 cosine_variant.smt2\nunsat\n</pre></div>",
        "id": 163463983,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555417511
    },
    {
        "content": "<p>There seems to only be one mention of eblast in mathlib, but I found this set of examples from a 2017 presentation: <a href=\"https://github.com/leanprover/presentations/tree/c2094a9da1fecf065fbf7b70a93ce90747cdfe1a/20170116_POPL/smt\" target=\"_blank\" title=\"https://github.com/leanprover/presentations/tree/c2094a9da1fecf065fbf7b70a93ce90747cdfe1a/20170116_POPL/smt\">https://github.com/leanprover/presentations/tree/c2094a9da1fecf065fbf7b70a93ce90747cdfe1a/20170116_POPL/smt</a> -- aside from a bit of code drift that seems like a helpful guide...</p>",
        "id": 163465414,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555418756
    },
    {
        "content": "<p><code>eblast</code> is <code>ematch, close</code> on a loop, so you can replace it with <code>ematch, ematch, ...</code> to see which lemmas it instantiates</p>",
        "id": 163465464,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1555418769
    },
    {
        "content": "<p>I turned on tracing with <code>set_option trace.smt.ematch true</code> and got this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">abs_values</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">abs</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">cos_values</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">abs</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_antisymm&#39;</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n<span class=\"o\">(:</span><span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">:)</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_trans</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_trans</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span>\n<span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_antisymm&#39;</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span>\n<span class=\"o\">(:</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">:)</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_refl</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_refl</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">4</span>\n<span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_trans</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span>\n<span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_trans</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_trans</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">4</span>\n<span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_trans</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_trans</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">4</span>\n<span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_trans</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_antisymm&#39;</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span>\n<span class=\"o\">(:</span><span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">:)</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">le_antisymm&#39;</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">4</span>\n<span class=\"o\">(:</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">:)</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">cos</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 163465502,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555418824
    },
    {
        "content": "<p>right, so <code>ematch</code> just writes all these things down and then prays that <code>close</code> (which is just <code>cc</code>) can chain together these facts to close the goal</p>",
        "id": 163465598,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1555418923
    },
    {
        "content": "<p>there's an option to ask Z3 to produce a proof---maybe you'll see the discrepancy there</p>",
        "id": 163465638,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1555418965
    },
    {
        "content": "<p>huh, OK!</p>",
        "id": 163465644,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555418976
    },
    {
        "content": "<p>Well here's the z3 proof, I'm not having a moment of clarity reviewing it. </p>\n<div class=\"codehilite\"><pre><span></span>(proof\n(let (($x160 (forall ((X Real) )(! (let (($x154 (&gt;= (- 2.0) (- 1.0))))\n (let (($x151 (&lt;= (- 2.0) 1.0)))\n (and $x151 $x154))) :qid k!6))\n ))\n (let (($x178 (forall ((X Real) )(! false :qid k!6))\n ))\n (let ((?x179 (lambda ((X Real) )(let ((@x173 (monotonicity (rewrite (= (&lt;= (- 2.0) 1.0) true)) (rewrite (= (&gt;= (- 2.0) (- 1.0)) false)) (= (and (&lt;= (- 2.0) 1.0) (&gt;= (- 2.0) (- 1.0))) (and true false)))))\n (trans @x173 (rewrite (= (and true false) false)) (= (and (&lt;= (- 2.0) 1.0) (&gt;= (- 2.0) (- 1.0))) false))))\n ))\n (let ((@x186 (trans (quant-intro (proof-bind ?x179) (= $x160 $x178)) (elim-unused (= $x178 false)) (= $x160 false))))\n (let (($x40 (forall ((X Real) )(! (let ((?x23 (cos X)))\n (let (($x34 (&gt;= ?x23 (- 1.0))))\n (let (($x25 (&lt;= ?x23 1.0)))\n (and $x25 $x34)))) :qid k!6))\n ))\n (let ((?x161 (lambda ((X Real) )(let (($x154 (&gt;= (- 2.0) (- 1.0))))\n (let (($x151 (&lt;= (- 2.0) 1.0)))\n (let (($x157 (and $x151 $x154)))\n (let ((?x23 (cos X)))\n (let (($x34 (&gt;= ?x23 (- 1.0))))\n (let (($x25 (&lt;= ?x23 1.0)))\n (let (($x37 (and $x25 $x34)))\n (let (($x136 (= ?x23 (- 2.0))))\n (let (($x141 (forall ((X Real) )(! (let ((?x23 (cos X)))\n (= ?x23 (- 2.0))) :qid k!9))\n ))\n (let (($x127 (forall ((X Real) )(! (= (+ (cos X) 2.0) 0.0) :qid k!9))\n ))\n (let ((?x142 (lambda ((X Real) )(let (($x126 (= (+ (cos X) 2.0) 0.0)))\n (let ((@x134 (monotonicity (rewrite (= (+ (cos X) 2.0) (+ 2.0 (cos X)))) (= $x126 (= (+ 2.0 (cos X)) 0.0)))))\n (trans @x134 (rewrite (= (= (+ 2.0 (cos X)) 0.0) (= (cos X) (- 2.0)))) (= $x126 (= (cos X) (- 2.0)))))))\n ))\n (let ((@x146 (mp (asserted $x127) (quant-intro (proof-bind ?x142) (= $x127 $x141)) $x141)))\n (let ((@x156 (monotonicity (unit-resolution ((_ quant-inst X) (or (not $x141) $x136)) @x146 $x136) (= $x34 $x154))))\n (let ((@x153 (monotonicity (unit-resolution ((_ quant-inst X) (or (not $x141) $x136)) @x146 $x136) (= $x25 $x151))))\n (monotonicity @x153 @x156 (= $x37 $x157)))))))))))))))))\n ))\n (let (($x29 (forall ((X Real) )(! (let ((?x23 (cos X)))\n (let (($x25 (&lt;= ?x23 1.0)))\n (and $x25 (&gt;= ?x23 (- 1.0))))) :qid k!6))\n ))\n (let ((?x41 (lambda ((X Real) )(let ((?x23 (cos X)))\n (let (($x34 (&gt;= ?x23 (- 1.0))))\n (let (($x25 (&lt;= ?x23 1.0)))\n (let (($x37 (and $x25 $x34)))\n (let ((@x36 (monotonicity (rewrite (= (- 1.0) (- 1.0))) (= (&gt;= ?x23 (- 1.0)) $x34))))\n (monotonicity @x36 (= (and $x25 (&gt;= ?x23 (- 1.0))) $x37))))))))\n ))\n (let ((@x45 (mp (asserted $x29) (quant-intro (proof-bind ?x41) (= $x29 $x40)) $x40)))\n (mp (mp @x45 (quant-intro (proof-bind ?x161) (= $x40 $x160)) $x160) @x186 false)))))))))))\n</pre></div>",
        "id": 163466523,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555419675
    },
    {
        "content": "<p>it's probably doing something like, derive false from <code>cos x &lt;= -2</code> and <code>cos x &gt;= -1</code></p>\n<p>from the <code>ematch</code> trace, we can see that <code>ematch</code> doesn't know how to move <code>1</code> to the other side of an inequality (and probably doesn't know how to derive the above contradiction either). I don't think it's very good at this kind of arithmetic; from playing around with it, it looks like marking <code>add_le_add_right</code> or the like as <code>@[ematch]</code> drastically slows down each <code>ematch</code> round</p>",
        "id": 163480087,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1555428823
    },
    {
        "content": "<p>Thanks for having a further look <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span>. It sounds like automating a proof inside Lean might need another reasoner that would take the final output from <code>ematch</code> and fiddle around with the arithmetic a bit.  However, I also noticed that the <code>ematch</code> trace for this example doesn't have much to say about <code>2</code>, or <code>-1</code> whereas it comes up with lots of things to say about <code>1</code> and <code>cos x</code>.  In this regard even having another \"finisher\" would <em>not</em> be enough.</p>\n<p>Incidentally I find the proof produced by <code>veriT</code> a bit easier to read than the <code>z3</code> proof, so I've copied it below.  <code>veriT</code> required one extra hint <code>(assert (= C (cos A)))</code> to get started, but it doesn't do much with that.</p>\n<div class=\"codehilite\"><pre><span></span>(set-logic AUFLIRA)\n(declare-fun cos ( Real ) Real)\n(declare-fun A () Real)\n(declare-fun C () Real)\n(assert (= C (cos A)))\n(assert (forall (( X Real )) (and (&lt;= (cos  X) 1) (&gt;= (cos  X ) (- 1)))))\n(assert (forall (( A Real ) ( B Real )) (=&gt; (&gt; (abs A) (abs B)) (not (= (+ A B) 0)))))\n(assert (forall (( X Real )) (= (+ (cos X) 2) 0)))\n(check-sat)\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>1:(input ((= C (cos A))))\n2:(input ((forall  (X Real) (and (&lt;= (cos X) 1) (&gt;= (cos X) (- 1))))))\n3:(input ((forall  (A Real) (B Real) (=&gt; (&gt; (abs A) (abs B)) (not (= 0 (+ A B)))))))\n4:(input ((forall  (X Real) (= 0 (+ (cos X) 2)))))\n5:(tmp_betared ((forall  (@vr0 Real) (and (&lt;= (cos @vr0) 1) (&gt;= (cos @vr0) (- 1))))) 2)\n6:(tmp_betared ((forall  (@vr1 Real) (@vr2 Real) (=&gt; (&gt; (abs @vr1) (abs @vr2)) (not (= 0 (+ @vr1 @vr2)))))) 3)\n7:(tmp_betared ((forall  (@vr3 Real) (= 0 (+ (cos @vr3) 2)))) 4)\n8:(tmp_qnt_tidy ((forall  (@vr4 Real) (and (&lt;= (cos @vr4) 1) (&gt;= (cos @vr4) (- 1))))) 5)\n9:(tmp_qnt_tidy ((forall  (@vr4 Real) (@vr5 Real) (=&gt; (&gt; (abs @vr4) (abs @vr5)) (not (= 0 (+ @vr4 @vr5)))))) 6)\n10:(tmp_qnt_tidy ((forall  (@vr4 Real) (= 0 (+ (cos @vr4) 2)))) 7)\n11:(forall_inst ((or (not (forall  (@vr4 Real) (= 0 (+ (cos @vr4) 2)))) (= 0 (+ (cos A) 2)))))\n12:(forall_inst ((or (not (forall  (@vr4 Real) (and (&lt;= (cos @vr4) 1) (&gt;= (cos @vr4) (- 1))))) (and (&lt;= (cos A) 1) (&gt;= (cos A) (- 1))))))\n13:(or ((not (forall  (@vr4 Real) (= 0 (+ (cos @vr4) 2)))) (= 0 (+ (cos A) 2))) 11)\n14:(resolution ((= 0 (+ (cos A) 2))) 13 10)\n15:(and_pos ((not (and (&lt;= (cos A) 1) (&gt;= (cos A) (- 1)))) (&lt;= (cos A) 1)) 0)\n16:(and_pos ((not (and (&lt;= (cos A) 1) (&gt;= (cos A) (- 1)))) (&gt;= (cos A) (- 1))) 1)\n17:(or ((not (forall  (@vr4 Real) (and (&lt;= (cos @vr4) 1) (&gt;= (cos @vr4) (- 1))))) (and (&lt;= (cos A) 1) (&gt;= (cos A) (- 1)))) 12)\n18:(resolution ((and (&lt;= (cos A) 1) (&gt;= (cos A) (- 1)))) 17 8)\n19:(resolution ((&lt;= (cos A) 1)) 15 18)\n20:(resolution ((&gt;= (cos A) (- 1))) 16 18)\n21:(la_generic ((not (&gt;= (cos A) (- 1))) (not (= 0 (+ (cos A) 2)))))\n22:(resolution () 21 14 20)\n</pre></div>",
        "id": 163548319,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555496592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> would the alternative approach you mentioned at <a href=\"https://github.com/leanprover/lean/issues/1940\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1940\">https://github.com/leanprover/lean/issues/1940</a> be relevant to the problem here?</p>",
        "id": 163548754,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555497069
    },
    {
        "content": "<p>Am I correct in thinking that that's the code you have at <a href=\"https://github.com/semorrison/lean-rewrite-search\" target=\"_blank\" title=\"https://github.com/semorrison/lean-rewrite-search\">https://github.com/semorrison/lean-rewrite-search</a> ?</p>",
        "id": 163549505,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555497872
    },
    {
        "content": "<p>a pleasant example, from one of Pitt's linear algebra prelims:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">adj_adj</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adj</span> <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"kn\">theorem</span> <span class=\"n\">adj_antimul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">adj</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">adj</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">adj</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span><span class=\"n\">def</span> <span class=\"n\">is_unitary</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">adj</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">mul_assoc</span> <span class=\"c1\">-- sadly necessary</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">normal_of_adjoint_eq_unitary_self</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_unitary</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">adj</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">T</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 163605299,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1555538927
    },
    {
        "content": "<p><del>i'm very pleased that it even knows to insert the <code>1</code> and rewrite backwards using <code>is_unitary</code></del> oops, it only needs to reassociate and then rewrite with <code>is_unitary</code></p>",
        "id": 163605334,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1555538979
    },
    {
        "content": "<p>You should have seen the automatic theorem provers in action at AITP last week :-)</p>",
        "id": 163605358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555539002
    },
    {
        "content": "<p>But IIRC Lean is supposed to be bridging the gap between ATPs and ITPs so this is definitely a step in the right direction :-)</p>",
        "id": 163605439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555539049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122022\">@Joseph Corneli</span>, no, <code>rewrite_search</code> will not do anything for your <code>cos x + 2 ≠ 0</code> problem. It searches (rather well, sometimes!) for chains of rewrites.</p>",
        "id": 164496228,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1556578990
    },
    {
        "content": "<p>Likely <code>normal_of_adjoint_eq_unitary_self</code> could be done, but I haven't checked.</p>",
        "id": 164496238,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1556579007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> thanks. I was just starting to read the description of rewrite search in the repo today.</p>",
        "id": 164622326,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1556716676
    },
    {
        "content": "<p>I also read the Selsam and de Moura paper about congruence closure in ITT. That's maybe a closer comparison?</p>",
        "id": 164622843,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1556717223
    }
]