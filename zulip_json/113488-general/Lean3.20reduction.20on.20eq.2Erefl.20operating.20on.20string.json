[
    {
        "content": "<p>Using 3.4.2 stable, i get a deterministic time out on reducing <code>stringEqRefl</code> below, but <code>natEqRefl</code> reduces as anticipated. Why is this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">natEqRefl</span> <span class=\"o\">:</span> <span class=\"mi\">23</span> <span class=\"bp\">=</span> <span class=\"mi\">23</span> <span class=\"o\">:=</span> <span class=\"n\">eq.refl</span> <span class=\"mi\">23</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">natEqRefl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">stringEqRefl</span> <span class=\"o\">:</span> <span class=\"s2\">\"foo\"</span> <span class=\"bp\">=</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:=</span> <span class=\"n\">eq.refl</span> <span class=\"s2\">\"foo\"</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">stringEqRefl</span>\n</code></pre></div>",
        "id": 274630784,
        "sender_full_name": "loki der quaeler",
        "timestamp": 1646787777
    },
    {
        "content": "<p>3.4.2 is very old</p>",
        "id": 274630932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646787899
    },
    {
        "content": "<p>(this happens in 3.40.0)</p>",
        "id": 274630956,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646787913
    },
    {
        "content": "<p>probably linked to <a href=\"https://github.com/leanprover-community/lean/pull/144\">lean#144</a></p>",
        "id": 274631343,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646788212
    },
    {
        "content": "<p>by this, even <code>#eval stringEqRefl</code> should be really slow for you, but it's blazing fast in modern versions</p>",
        "id": 274631375,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646788240
    },
    {
        "content": "<p>Lean tends to use the VM far more than the kernel</p>",
        "id": 274631385,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646788250
    },
    {
        "content": "<p>Another gremlin in the system \"related\" to this is that in VS Code, the line following the string flavored <code>def</code> gets indented one column, which not the <code>def</code> for  â„• (nor an equivalent for type bool).</p>\n<p><code>#eval stringEqRefl</code> returns quickly (in 3.40.0) with a:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">result</span> <span class=\"n\">type</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">an</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"bp\">'</span><span class=\"n\">has_repr'</span><span class=\"o\">,</span> <span class=\"n\">dumping</span> <span class=\"n\">internal</span> <span class=\"n\">representation</span>\n</code></pre></div>",
        "id": 274631452,
        "sender_full_name": "loki der quaeler",
        "timestamp": 1646788315
    },
    {
        "content": "<p>I don't know what you mean. And yes, that's expected - <code>Prop</code>s get erased in the VM</p>",
        "id": 274631671,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646788473
    },
    {
        "content": "<p>(The <code>#eval</code> returns (to my human senses) equivalently quickly in 3.4.2 as well.)  WRT the VS Code thing, it's two columns, not one:<br>\n<a href=\"/user_uploads/3121/g8Kg20PRUFMBYIwK4KBwnY-1/lean-vscode-string-column-indent.gif\">lean-vscode-string-column-indent.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/g8Kg20PRUFMBYIwK4KBwnY-1/lean-vscode-string-column-indent.gif\" title=\"lean-vscode-string-column-indent.gif\"><img src=\"/user_uploads/3121/g8Kg20PRUFMBYIwK4KBwnY-1/lean-vscode-string-column-indent.gif\"></a></div>",
        "id": 274632022,
        "sender_full_name": "loki der quaeler",
        "timestamp": 1646788745
    },
    {
        "content": "<p>huh, that is odd. also, I guess the <code>#eval</code> is only slow for large strings; I wonder how a 4000 char string would perform,a s mentioned in that issue</p>",
        "id": 274632313,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646788965
    },
    {
        "content": "<p>Is there any reason you're using 3.4.2 and not something closer to 3.40.0?</p>",
        "id": 274633211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646789836
    },
    {
        "content": "<p>purely because i'm not too bright. (i had asked <code>elan</code> to pull <code>leanprover/lean:stable</code> not realizing that <code>stable</code> pulled a newer version of 3)</p>",
        "id": 274635802,
        "sender_full_name": "loki der quaeler",
        "timestamp": 1646792381
    },
    {
        "content": "<p>You likely want to be using <code>leanprover-community/lean</code> instead</p>",
        "id": 274675590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646826118
    }
]