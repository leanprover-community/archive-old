[
    {
        "content": "<p>I made a change that created a (deterministic) timeout while working on PR <a href=\"https://github.com/leanprover-community/mathlib/issues/1319\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1319\">#1319</a>. Lean is not very good reporting this error message:</p>\n<ul>\n<li>Travis failed with the error <code>/home/travis/scripts/travis_long: fork: Cannot allocate memory</code>. This was almost certainly because it ran across the timeout</li>\n<li>When running <code>lean --make src/</code> the deterministic timeout failed silently. The first error message I received was in a file <em>importing</em> the file with the deterministic timeout (it did not create a <code>.olean</code> file for the file with the timeout).</li>\n<li>Suppose <code>A.lean</code> has a deterministic timeout and you open <code>B.lean</code> in VSCode. <code>B.lean</code> does not raise any errors, not even <code>imported file uses sorry</code>.</li>\n</ul>\n<p>This made it tricky to find the file with the deterministic timeout. This post is mostly a cautionary tale. But if anyone knows a good way to find which file has the timeout, I'm happy to hear it. (on Windows <code>lean</code> doesn't report which file it is currently compiling, that might help)</p>",
        "id": 174471163,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567097315
    },
    {
        "content": "<p>Using a Makefile to build mathlib might help</p>",
        "id": 174471771,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567097852
    },
    {
        "content": "<p>I have a Makefile for it somewhere on my drive</p>",
        "id": 174471788,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567097871
    },
    {
        "content": "<p>What is the difference of building mathlib with a Makefile and doing it without?</p>",
        "id": 174488342,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567109733
    },
    {
        "content": "<p>I thought you approved of automation? :-)</p>",
        "id": 174488429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567109780
    },
    {
        "content": "<p>Are we talking about the benefit of have to type only <code>make</code> instead of <code>leanpkg build</code>?</p>",
        "id": 174488473,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567109822
    },
    {
        "content": "<p>In this context, I'm suggesting that using <code>make</code> will let you see what file Lean is currently building. You should get a better idea of where the error is coming from</p>",
        "id": 174488585,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567109887
    },
    {
        "content": "<blockquote>\n<p>I thought you approved of automation? :-)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I'm not following</p>",
        "id": 174488607,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567109921
    },
    {
        "content": "<p>We can automate the use of <code>leanpkg</code> so we don't have to remember all those pesky extra inputs like <code>build</code></p>",
        "id": 174488632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567109949
    },
    {
        "content": "<p>Oh! You think <code>make</code> will solve the issue of Windows not printing out file names?</p>",
        "id": 174488651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567109972
    },
    {
        "content": "<p>I was just being daft.</p>",
        "id": 174488658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567109978
    },
    {
        "content": "<p>Haha! That's a more liberal use of the word \"automation\" than I'm used to</p>",
        "id": 174488737,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567110008
    },
    {
        "content": "<p>I'm a mathematician, what do I know about automation.</p>",
        "id": 174488754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567110023
    },
    {
        "content": "<blockquote>\n<p>In this context, I'm suggesting that using <code>make</code> will let you see what file Lean is currently building. You should get a better idea of where the error is coming from</p>\n</blockquote>\n<p>I am very interested in this. How do I get/generate said Makefile?</p>",
        "id": 174489811,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567110726
    },
    {
        "content": "<p>Here is the version I found: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nv\">SRCS</span> <span class=\"o\">=</span> <span class=\"k\">$(</span>wildcard */*.lean */*/*.lean */*/*/*.lean */*/*/*/*.lean<span class=\"k\">)</span>\n<span class=\"nv\">OBJS</span> <span class=\"o\">=</span> <span class=\"k\">$(</span>SRCS:.lean<span class=\"o\">=</span>.olean<span class=\"k\">)</span>\n<span class=\"nv\">DEPS</span> <span class=\"o\">=</span> <span class=\"k\">$(</span>SRCS:.lean<span class=\"o\">=</span>.depend<span class=\"k\">)</span>\n\n<span class=\"nf\">.PHONY</span><span class=\"o\">:</span> <span class=\"n\">all</span> <span class=\"n\">clean</span>\n\n<span class=\"nf\">all</span><span class=\"o\">:</span> <span class=\"k\">$(</span><span class=\"nv\">OBJS</span><span class=\"k\">)</span>\n\n<span class=\"nf\">depends</span><span class=\"o\">:</span> <span class=\"k\">$(</span><span class=\"nv\">DEPS</span><span class=\"k\">)</span>\n\n<span class=\"nf\">%.depend</span><span class=\"o\">:</span> %.<span class=\"n\">lean</span>\n    @echo <span class=\"k\">$(</span>&lt;:.lean<span class=\"o\">=</span>.olean<span class=\"k\">)</span>: <span class=\"sb\">`</span>~/lean/lean-master/bin/lean --deps $&lt; <span class=\"p\">|</span> python relative.py<span class=\"sb\">`</span>  &gt; <span class=\"nv\">$@</span>\n\n<span class=\"c\"># %.depend: ;</span>\n\n<span class=\"nf\">%.olean</span><span class=\"o\">:</span> %.<span class=\"n\">lean</span> %.<span class=\"n\">depend</span>\n    sccache lean --make $&lt;\n<span class=\"c\">#   sccache lean --make $&lt;</span>\n\n<span class=\"nf\">clean</span><span class=\"o\">:</span>\n    find . -name *.olean -delete\n    find . -name *.depend -delete\n\n<span class=\"nf\">.PRECIOUS</span><span class=\"o\">:</span> %.<span class=\"n\">depend</span>\n\n<span class=\"cp\">include $(DEPS)</span>\n</pre></div>\n\n\n<p>It could be better but it works well enough for me</p>",
        "id": 174490554,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567111262
    },
    {
        "content": "<p>Basically, it has a pass to generate dependencies and then uses those to build in the proper order</p>",
        "id": 174490584,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567111289
    },
    {
        "content": "<p>So I made a file <code>Makefile</code> with those contents in the <code>mathlib/</code> directory, but <code>make</code> isn't working. Any idea why?</p>\n<div class=\"codehilite\"><pre><span></span>Floris@MSI MINGW64 /d/projects/mathlib (use_localized)\n$ make\nMakefile:17: *** missing separator.  Stop.\n\nFloris@MSI MINGW64 /d/projects/mathlib (use_localized)\n$ make --version\nGNU Make 4.2.1\nBuilt for Windows32\nCopyright (C) 1988-2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n</pre></div>",
        "id": 174491671,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567112156
    },
    {
        "content": "<p>Shouldn't it say <code>leanpkg build</code> somewhere?</p>",
        "id": 174492730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567112792
    },
    {
        "content": "<p>Kevin... don't be so trivial</p>",
        "id": 174492757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567112811
    },
    {
        "content": "<p>FWIW I get the same error on Ubuntu</p>",
        "id": 174492931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567112924
    },
    {
        "content": "<p>Ok, I should have looked at the file a bit more closely. I need to make a couple of fixes</p>",
        "id": 174493619,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567113492
    },
    {
        "content": "<p>Here is the new version and a python script that needs to be next to the Makefile</p>\n<p><a href=\"/user_uploads/3121/h4LzJKbuYO48AoKokUKYotdv/Makefile\" target=\"_blank\" title=\"Makefile\">Makefile</a> <br>\n<a href=\"/user_uploads/3121/u4iwNEDoLvThHzIchaY7N25m/relative.py\" target=\"_blank\" title=\"relative.py\">relative.py</a></p>",
        "id": 174493728,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567113601
    },
    {
        "content": "<p>I'm getting a bunch of errors of the form</p>\n<div class=\"codehilite\"><pre><span></span>Traceback (most recent call last):\n  File &quot;relative.py&quot;, line 9, in &lt;module&gt;\n    print(os.path.relpath(x))\n  File &quot;C:\\Users\\Floris\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\ntpath.py&quot;, line 562, in relpath\n    path_drive, start_drive))\nValueError: path is on mount &#39;C:&#39;, start on mount &#39;D:&#39;\n</pre></div>\n\n\n<p>is that easy to fix?<br>\nThanks for all your efforts btw!</p>",
        "id": 174493970,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567113783
    },
    {
        "content": "<p>Here is Lean 4's <a href=\"https://github.com/leanprover/lean4/blob/master/library/relative.py\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/blob/master/library/relative.py\">relative.py</a> with maybe more cross-platform support</p>",
        "id": 174497165,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1567116839
    },
    {
        "content": "<p>I think it's the same file. They took it from me.</p>",
        "id": 174498933,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567118575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Do you have symbolic links mapping paths in <code>D:</code> to drive <code>C:</code>?</p>",
        "id": 174499029,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567118647
    },
    {
        "content": "<p>In <code>relative.py</code>, can you add a print statement just before the call to <code>relpath</code>? I'd like to see if something odd is going on in that path. Also, can you print the current directory?</p>",
        "id": 174499296,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567118897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I think the problem is that my mathlib is in <code>D:\\projects\\mathlib</code> and my standard library is here: <code>C:\\Users\\Floris\\.elan\\toolchains\\3.4.2\\lib\\lean\\library\\</code></p>\n<p>An example generated file is:</p>\n<div class=\"codehilite\"><pre><span></span>src/tactic/omega/nat/dnf.olean: src\\tactic\\omega\\clause.olean\n\n src\\tactic\\omega\\nat\\form.olean\n</pre></div>\n\n\n<p>note: it is missing the import of <code>lean\\library\\init\\default.olean</code>.</p>\n<p>If I print <code>x</code> first in your script, I get outputs like</p>\n<div class=\"codehilite\"><pre><span></span>D:\\projects\\mathlib\\src\\tactic\\omega\\nat\\form.olean\nC:\\Users\\Floris\\.elan\\toolchains\\3.4.2\\lib\\lean\\library\\init\\default.olean\n</pre></div>",
        "id": 174502074,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567121623
    },
    {
        "content": "<p>Maybe what we should do is add an if statement before the print to check if <code>x</code> is located in the current directory. We would just print it as is if not.</p>",
        "id": 174502159,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567121740
    },
    {
        "content": "<p>I do not have any (relevant) symbolic links IIRC. <br>\n<code>print(os.path.realpath(os.curdir))</code> gives <code> D:\\projects\\mathlib</code>.</p>",
        "id": 174502210,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567121767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> that version indeed has some cross-platform support, and seems to generate all the <code>.depend</code> files. Thanks!<br>\nHowever, in the <code>.depends</code> file it is not correctly replacing backslashes by slahes. Here is an example file generated by the the Lean 4 <code>relative.py</code>:</p>\n<div class=\"codehilite\"><pre><span></span>archive/cubing_a_cube.olean: ..\\..\\d\\projects\\mathlib\\src\\data\\real\\basic.olean\n ..\\..\\d\\projects\\mathlib\\src\\data\\set\\disjointed.olean\n ..\\..\\d\\projects\\mathlib\\src\\data\\set\\intervals.olean\n ..\\..\\d\\projects\\mathlib\\src\\set_theory\\cardinal.olean\n ..\\..\\c\\Users\\Floris\\.elan\\toolchains\\3.4.2\\lib\\lean\\library\\init\\default.olean\n</pre></div>",
        "id": 174502253,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567121847
    },
    {
        "content": "<p>What are the <code>.depend</code> files supposed to look like?<br>\nI managed to hack the Python script so forward slashes are used:</p>\n<div class=\"codehilite\"><pre><span></span>archive/cubing_a_cube.olean: ../../d/projects/mathlib/src/data/real/basic.olean\n ../../d/projects/mathlib/src/data/set/disjointed.olean\n ../../d/projects/mathlib/src/data/set/intervals.olean\n ../../d/projects/mathlib/src/set_theory/cardinal.olean\n ../../c/Users/Floris/.elan/toolchains/3.4.2/lib/lean/library/init/default.olean\n</pre></div>\n\n\n<p>but I still get the (weird) error message:</p>\n<div class=\"codehilite\"><pre><span></span>Floris@MSI MINGW64 /d/projects/mathlib (use_localized)\n$ make\n&#39;, needed by &#39;archive/cubing_a_cube.olean&#39;.  Stop./mathlib/src/data/real/basic.olean\n</pre></div>",
        "id": 174503074,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567122637
    },
    {
        "content": "<p>what if you put the paths in quotes? Also, those paths should be on the same line.</p>",
        "id": 174503252,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567122855
    },
    {
        "content": "<p>Quotes didn't help, but it did complain when the paths were not on the same line. After a lot of trial and error the following <code>relative.py</code> works for me. I also got errors when any core library paths were printed, so I don't print them.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"n\">mathlib</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">curdir</span><span class=\"p\">)</span>\n<span class=\"n\">mathlib</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^(\\w):&quot;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span> <span class=\"n\">mathlib</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">mathlib</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;/&#39;</span><span class=\"p\">:</span>\n  <span class=\"n\">mathlib</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;/&quot;</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"p\">:</span>\n  <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^(\\w):&quot;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">mathlib</span><span class=\"p\">):</span>\n    <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mathlib</span><span class=\"p\">):]</span>\n    <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot; &quot;</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n</pre></div>",
        "id": 174591095,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567208516
    },
    {
        "content": "<p>The error <code>excessive memory consumption detected at 'replace' (potential solution: increase memory consumption threshold)</code> is also not reported on the command line <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> (is that a Windows-specific thing?)<br>\nThe makefile helps a bit though: I can open all files that are slow to compile in VSCode.</p>",
        "id": 174603829,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567231272
    },
    {
        "content": "<blockquote>\n<p>I also got errors when any core library paths were printed, so I don't print them.</p>\n</blockquote>\n<p>That doesn't bode well for when you link various projects together.</p>",
        "id": 174620988,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567263321
    },
    {
        "content": "<blockquote>\n<p>I can open all files that are slow to compile in VSCode.</p>\n</blockquote>\n<p>You could call <code>lean</code> using <code>timeout</code>. Then <code>make</code> decides which ones take long.</p>",
        "id": 174621040,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567263379
    }
]