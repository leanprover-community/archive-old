[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> how hard would it be to add a command line switch to <code>lean --make</code> to suppress all sorry warnings and <code>#check</code> or <code>#print</code> output, leaving only errors? Those days we are breaking a lot the LFTCM2020 repository with mathlib upgrades and it's very painful to spot the error in a huge flood of warnings and checks.</p>",
        "id": 236292171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619506973
    },
    {
        "content": "<p>My workflow is:</p>\n<div class=\"codehilite\" data-code-language=\"code\"><pre><span></span><code>lean --make &gt;&gt; errors.txt\n</code></pre></div>\n<p>and then open the file <code>errors.txt</code> and look for <code>error</code>.</p>",
        "id": 236294019,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619508057
    },
    {
        "content": "<p>Sébastien, seeing the error in real time would be much faster.</p>",
        "id": 236294136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619508127
    },
    {
        "content": "<p>Of course!</p>",
        "id": 236294175,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619508159
    },
    {
        "content": "<p>When working on LTE I also wish for a <code>--suppress-warnings</code> option</p>",
        "id": 236296590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619509783
    },
    {
        "content": "<p>I guess for LTE the fix is to just get rid of all those <code>sorry</code>s <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 236297033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619510079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.20without.20warning/near/236294136\">said</a>:</p>\n<blockquote>\n<p>Sébastien, seeing the error in real time would be much faster.</p>\n</blockquote>\n<p>You can pipe the output of lean through grep or awk. I used to have a script for doing this to one of the metamath tools that had a lot of noisy diagnostics - I would filter out all the diagnostic messages I didn't care about and reformat the errors with color and priority to make them more obvious</p>",
        "id": 236305240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619514651
    },
    {
        "content": "<p>You can but unfortunately you then have to rely on the buffer being flushed. I've tried this and sometimes you just sit there with no output</p>",
        "id": 236311829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619518217
    },
    {
        "content": "<p>You can move further towards what you want with <code>lean --make 2&gt; /dev/null | grep -v sorry</code>.</p>\n<p>This works because the #print and #check commands write to stderr (file descriptor 2) , which we redirect with the <code>2&gt;</code>. Error and warning messages are on stdout so are not affected.</p>\n<p>Piping to grep has trade-offs: it consumes the progress messages (e.g. <code>parsing at line 700</code>) and you'll also have to potentially wait as <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> says, although that can be solved: e.g., on Ubuntu you can <code>sudo apt install expect</code> and then<br>\n<code>unbuffer lean --make 2&gt; /dev/null | grep -v sorry</code>.</p>",
        "id": 236403606,
        "sender_full_name": "Ben Toner",
        "timestamp": 1619555762
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 236408351,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619557424
    }
]