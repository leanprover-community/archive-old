[
    {
        "content": "<p>What is option.map_comp called? I can't find it :-/ Oh! Is it something to do with monads?</p>",
        "id": 161541947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553373900
    },
    {
        "content": "<p>Yes, it's <code>comp_map</code> (of class <code>is_lawful_functor</code>)</p>",
        "id": 161542429,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1553374767
    },
    {
        "content": "<p>Can I get this cheaply?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">with_zero</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">monad</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">with_zero</span>\n\n<span class=\"n\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">with_zero</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">map_id</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map_id</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">map_comp</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_lawful_functor</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">r</span> <span class=\"c1\">-- error involving &lt;$&gt;</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  type mismatch, term</span>\n<span class=\"cm\">    comp_map ?m_7 ?m_8 ?m_9</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    (?m_6 ∘ ?m_7) &lt;$&gt; ?m_8 = ?m_6 &lt;$&gt; ?m_7 &lt;$&gt; ?m_8</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    map (g ∘ f) r = map g (map f r)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">with_zero</span>\n</pre></div>\n\n\n<p>I have never had to deal with <code>&lt;$&gt;</code> before.</p>",
        "id": 161546436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553381516
    },
    {
        "content": "<p>Have you proved it's a lawful monad?</p>",
        "id": 161546612,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553381837
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">with_zero</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span>\n</pre></div>\n\n\n<p>This fixes it.</p>",
        "id": 161546613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553381879
    },
    {
        "content": "<p>I've proved it's a functor:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">with_zero</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 161546658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553381908
    },
    {
        "content": "<p>Or at least, someone did...</p>",
        "id": 161546659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553381915
    },
    {
        "content": "<p>Don't you need to prove it's a lawful functor?</p>",
        "id": 161546669,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553381948
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">with_zero</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">monad</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">with_zero</span>\n\n<span class=\"n\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">with_zero</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">map_id</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map_id</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">map_comp</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_lawful_functor</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">r</span> <span class=\"c1\">-- compiles fine</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_lawful_functor</span> <span class=\"n\">with_zero</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails!</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">with_zero</span>\n</pre></div>\n\n\n<p>Apparently not :P</p>",
        "id": 161546759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553382113
    },
    {
        "content": "<p>I've never played with this stuff before.</p>",
        "id": 161546803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553382126
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_lawful_functor</span> <span class=\"n\">option</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works!</span>\n</pre></div>",
        "id": 161547124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553382614
    },
    {
        "content": "<p>I am surprised things work out like this. Type class inference found an instance for <code>is_lawful_functor with_zero</code> when using <code>is_lawful_functor.comp_map</code> but not when I asked it explicitly.</p>",
        "id": 161547146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553382686
    },
    {
        "content": "<p>Am I supposed to be writing code like this in a library:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">with_zero</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">monad</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_lawful_functor</span> <span class=\"n\">with_zero</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">is_lawful_functor</span> <span class=\"n\">option</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_lawful_monad</span> <span class=\"n\">with_zero</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">is_lawful_monad</span> <span class=\"n\">option</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">with_zero</span>\n\n<span class=\"n\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">with_zero</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">map_id</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map_id</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">map_comp</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_lawful_functor</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">r</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">with_zero</span>\n</pre></div>\n\n\n<p>Or am I just supposed to use <code>is_lawful_functor.comp_map</code> whenever I want <code>with_zero.comp_map</code>?</p>",
        "id": 161547363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553383047
    },
    {
        "content": "<p>It's the same question Johan asked earlier with vector_subspace.zero_mem just equalling submodule.zero_mem.</p>",
        "id": 161547410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553383083
    },
    {
        "content": "<p>What about using <code>open is_lawful_functor</code> and stop worrying?</p>",
        "id": 161565856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553415189
    },
    {
        "content": "<p>Is that what I'm supposed to do?</p>",
        "id": 161566835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553417009
    },
    {
        "content": "<p>aargh functor is rubbish</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_const</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"err\">∘</span> <span class=\"n\">const</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p><code>functor.map</code> will only eat <code>f : alpha -&gt; beta</code> if alpha and beta live in the same universe :-(</p>",
        "id": 161567589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553418314
    },
    {
        "content": "<p>I don't think this is general enough for me after all</p>",
        "id": 161567597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553418356
    },
    {
        "content": "<p>So I'm back to the start.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">u₃</span>\n\n<span class=\"n\">def</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Is this in Lean or mathlib somewhere?</p>",
        "id": 161567857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553418821
    },
    {
        "content": "<p>I don't think it is, it should be in <code>data.option.basic</code></p>",
        "id": 161568259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553419457
    },
    {
        "content": "<p>You can't prove it using lawful functors, or at least I can't, because then the universes have to be the same.</p>",
        "id": 161568285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553419513
    },
    {
        "content": "<p>This is a known limitation of <code>functor</code></p>",
        "id": 161568297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553419547
    },
    {
        "content": "<p>this is why many monads have <code>map</code> functions separate from the notation</p>",
        "id": 161568343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553419569
    },
    {
        "content": "<p>You want this sort of thing to construct an equiv of monoids (with_zero G) from an equiv of groups (G)</p>",
        "id": 161568345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553419575
    },
    {
        "content": "<p>I guess it's just a semigroup equiv?</p>",
        "id": 161568359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553419604
    },
    {
        "content": "<p>A semigroup equiv of monoids is a monoid equiv, if I've understood this statement correctly</p>",
        "id": 161568381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553419654
    },
    {
        "content": "<p><code>with_zero</code> makes a semigroup into a monoid</p>",
        "id": 161568389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553419674
    },
    {
        "content": "<p>Aah I see. Yes.</p>",
        "id": 161568440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553419696
    },
    {
        "content": "<p>so the congr theorem should turn semigroup equivs into monoid equivs</p>",
        "id": 161568441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553419699
    },
    {
        "content": "<p>Right.</p>",
        "id": 161568443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553419705
    },
    {
        "content": "<p>Oh this is more congr?</p>",
        "id": 161568446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553419713
    },
    {
        "content": "<p>yeah, if you squint</p>",
        "id": 161568448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553419727
    },
    {
        "content": "<p>I'm learning to squint at congr.</p>",
        "id": 161568453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553419739
    },
    {
        "content": "<p><code>G ~= H -&gt; with_zero G ~= with_zero H</code></p>",
        "id": 161568462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553419745
    },
    {
        "content": "<p>yes, that's a congr alright.</p>",
        "id": 161568468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553419761
    },
    {
        "content": "<p>So what's the function called?</p>",
        "id": 161568473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553419772
    },
    {
        "content": "<p><code>with_zero_congr</code>?</p>",
        "id": 161568477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553419783
    },
    {
        "content": "<p>I don't think I'll tell you what I was going to call it.</p>",
        "id": 161568478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553419783
    },
    {
        "content": "<p>or maybe something with projection notation</p>",
        "id": 161568482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553419798
    },
    {
        "content": "<p>semigroup_equiv.with_zero_congr?</p>",
        "id": 161568540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553419827
    },
    {
        "content": "<p><code>semigroup_equiv.with_zero_congr</code> doesn't buy much</p>",
        "id": 161568542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553419829
    },
    {
        "content": "<p>Ohohoh I just sat down to code this and noticed that it is from groups to monoids -- the group law is <code>*</code>, so this extra zero isn't the monoid identity. Maybe it's from monoids to monoids.</p>",
        "id": 161583906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553441372
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_with_zero_monoid_equiv</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monoid_equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monoid_equiv</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">some</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left_inv</span> <span class=\"n\">x</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">some</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">x</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"n\">some</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mul_hom</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>My plan for the proof of <code>left_inv</code> was to use <code>with_zero.map_comp</code> and <code>with_zero.map_id</code> but there's barely any point.</p>",
        "id": 161584173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553441806
    }
]