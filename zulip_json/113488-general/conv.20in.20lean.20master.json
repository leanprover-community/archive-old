[
    {
        "content": "<p>I'm building mathlib with lean from the branch <code>dropDLO</code>, and I get some failures that seem completely unrelated to <code>decidable_linear_order</code>: some <code>conv in ...</code> expressions now fail to match.</p>",
        "id": 214359311,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603483329
    },
    {
        "content": "<p>With error like <code> error: find converter failed, pattern was not found</code></p>",
        "id": 214359341,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603483354
    },
    {
        "content": "<p>This sounds like a change I made to the conv <code>find</code> command</p>",
        "id": 214359353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603483359
    },
    {
        "content": "<p>Although if anything my changes should have resulted in that error message being replaced with a more useful one</p>",
        "id": 214359408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603483393
    },
    {
        "content": "<p>Have you tried building <code>mathlib</code> with lean master?</p>",
        "id": 214359451,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603483418
    },
    {
        "content": "<p>No</p>",
        "id": 214359560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603483460
    },
    {
        "content": "<p>Can you point me to a failed build log?</p>",
        "id": 214359584,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603483476
    },
    {
        "content": "<p>(this is the change I'm referring to: <a href=\"https://github.com/leanprover-community/lean/commit/adb4258b6a287d445237165811a967e6ab7c0327\">https://github.com/leanprover-community/lean/commit/adb4258b6a287d445237165811a967e6ab7c0327</a>)</p>",
        "id": 214359675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603483533
    },
    {
        "content": "<p>One of failing <code>conv</code>s is in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.prod_ne_zero/src\">src#cardinal.prod_ne_zero</a></p>",
        "id": 214359803,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603483581
    },
    {
        "content": "<p>I'm not sure how to easily get in a position to experiment  - does replacing that line with <code>conv { find (f _) {rw ← mk_out (f i) } }</code> produce a better error? Perhaps <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.conv/src\">src#tactic.interactive.conv</a> is hiding the real error...</p>",
        "id": 214360066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603483721
    },
    {
        "content": "<p>Can you just try to build mathlib with lean master?</p>",
        "id": 214360188,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603483803
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">445</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">find</span> <span class=\"n\">converter</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">pattern</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">cardinal</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 214360279,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603483849
    },
    {
        "content": "<p>I have no idea how to actually do that...</p>",
        "id": 214360451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603483927
    },
    {
        "content": "<p>If you're getting this from a CI build, can I do the equivalent of a <code>get-cache</code> to avoid needing to build it myself?</p>",
        "id": 214361003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603484228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> We should add it to some docs, and add a link to these docs from lean PR template.</p>\n<ol>\n<li>Build lean master using <code>cmake</code>.</li>\n<li>Install it to some directory.</li>\n<li>Run <code>elan toolchain link my-name PATH</code>.</li>\n<li>Put <code>my-name</code> into <code>leanpkg.toml</code></li>\n</ol>",
        "id": 214361060,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603484273
    },
    {
        "content": "<p>You can even skip step 2, and replace 4 by using <code>elan override</code>, for a one-off thing</p>",
        "id": 214361158,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603484325
    },
    {
        "content": "<p>In this case, I'll see if I can reproduce the issue with a copy of the new <code>find</code> in old lean</p>",
        "id": 214361361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603484481
    },
    {
        "content": "<p>Self-contained <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> in released lean:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.meta.interactive</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.meta.converter.conv</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic_result</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">capture</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">tactic_result</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">success</span> <span class=\"n\">r</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">success</span> <span class=\"o\">(</span><span class=\"n\">success</span> <span class=\"n\">r</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"n\">s'</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exception</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">success</span> <span class=\"o\">(</span><span class=\"n\">exception</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"n\">s'</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">resume</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic_result</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">conv</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean.parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive.types</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic_result</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">find2</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">parser.pexpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">itactic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target_lhs_rhs</span><span class=\"o\">,</span>\n   <span class=\"n\">pat</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pexpr_to_pattern</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n   <span class=\"n\">s</span>   <span class=\"bp\">←</span> <span class=\"n\">simp_lemmas.mk_default</span><span class=\"o\">,</span> <span class=\"c1\">-- to be able to use congruence lemmas @[congr]</span>\n   <span class=\"c1\">-- we have to thread the tactic state through `ext_simplify_core` manually</span>\n   <span class=\"n\">st</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.read</span><span class=\"o\">,</span>\n   <span class=\"o\">(</span><span class=\"n\">found_result</span><span class=\"o\">,</span> <span class=\"n\">new_lhs</span><span class=\"o\">,</span> <span class=\"n\">pr</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.ext_simplify_core</span>\n     <span class=\"o\">(</span><span class=\"n\">success</span> <span class=\"n\">ff</span> <span class=\"n\">st</span><span class=\"o\">)</span>  <span class=\"c1\">-- loop counter</span>\n     <span class=\"o\">{</span><span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">beta</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">single_pass</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">eta</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">proj</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n      <span class=\"n\">fail_if_unchanged</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">memoize</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">}</span>\n     <span class=\"n\">s</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">found_result</span> <span class=\"n\">s</span> <span class=\"n\">r</span> <span class=\"n\">p</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n       <span class=\"n\">found</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.resume</span> <span class=\"n\">found_result</span><span class=\"o\">,</span>\n       <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"n\">found</span><span class=\"o\">),</span>\n       <span class=\"n\">matched</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">tactic.match_pattern</span> <span class=\"n\">pat</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">return</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n       <span class=\"n\">guard</span> <span class=\"n\">matched</span><span class=\"o\">,</span>\n       <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.capture</span> <span class=\"o\">(</span><span class=\"n\">c.convert</span> <span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n       <span class=\"c1\">-- If an error occurs in conversion, capture it; `ext_simplify_core` will not</span>\n       <span class=\"c1\">-- propagate it.</span>\n       <span class=\"k\">match</span> <span class=\"n\">res</span> <span class=\"k\">with</span>\n       <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">success</span> <span class=\"n\">r</span> <span class=\"n\">s'</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">success</span> <span class=\"n\">tt</span> <span class=\"n\">s'</span><span class=\"o\">,</span>    <span class=\"n\">r.fst</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">r.snd</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n       <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exception</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">exception</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span>     <span class=\"n\">none</span><span class=\"o\">,</span>       <span class=\"n\">ff</span><span class=\"o\">)</span>\n       <span class=\"kd\">end</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">r</span> <span class=\"n\">p</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">tactic.failed</span><span class=\"o\">)</span>\n     <span class=\"n\">r</span> <span class=\"n\">lhs</span><span class=\"o\">,</span>\n  <span class=\"n\">found</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.resume</span> <span class=\"n\">found_result</span><span class=\"o\">,</span>\n  <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"n\">found</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"find converter failed, pattern was not found\"</span><span class=\"o\">,</span>\n  <span class=\"n\">update_lhs</span> <span class=\"n\">new_lhs</span> <span class=\"n\">pr</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">conv</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_ne_zero2</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span>\n    <span class=\"n\">find2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span>  <span class=\"c1\">-- find works</span>\n      <span class=\"c1\">-- rw ← mk_out (f i)</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n</div></div>",
        "id": 214362107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603484901
    },
    {
        "content": "<p>Does it work (I don't want to switch to another branch right now)?</p>",
        "id": 214362585,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603485144
    },
    {
        "content": "<p>No, I get the same problem (but you can run that in the web editor)</p>",
        "id": 214362619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603485171
    },
    {
        "content": "<p>Do you understand why it fails and the old <code>find</code> works?</p>",
        "id": 214362697,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603485224
    },
    {
        "content": "<p>Not yet, but trying to</p>",
        "id": 214362792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603485270
    },
    {
        "content": "<p>How can I trace a <code>pattern</code> object? <code>tactic.trace format!\"Pattern was: {pat}\"</code> fails, but it works for <code>{e}</code></p>",
        "id": 214362838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603485302
    },
    {
        "content": "<p>In the meantime I'm golfing all proofs that fail because of this bug, and IMO they look better without <code>conv in</code>.</p>",
        "id": 214363515,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603485692
    },
    {
        "content": "<p>I mean, that was sort of the opposite of the intent of that patch, but oh well. If using the new lean is urgent, then I guess we can revert the patch - otherwise, I'll keep trying to understand what's going on</p>",
        "id": 214363651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603485762
    },
    {
        "content": "<p>We can definitely wait for a day or two. And we can decide whether to revert (some of) my changes once you fix <code>find</code>.</p>",
        "id": 214363885,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603485903
    },
    {
        "content": "<p>The error seems to be accurate - <code>tactic.match_pattern pat e</code> really is failing when <code>pat</code> is <code>pattern.mk (f ?x_0) [] [] 0 1</code> and <code>e</code> is <code>f _</code></p>",
        "id": 214365150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603486579
    },
    {
        "content": "<p>It looks like it was the change suggested by <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> in that PR to propagate both the error and success states that broke things</p>",
        "id": 214366213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603487149
    },
    {
        "content": "<p>If I replace both calls to <code>tactic.resume</code> with <code>tactic.unpack</code>, then your example passes (but the tests added in that PR fail)</p>",
        "id": 214366278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603487175
    },
    {
        "content": "<p>My hunch is that the C++ is caching metavariables outside of the tactic state, meaning that it gets confused when the lean callback adjusts the tactic state on it.</p>",
        "id": 214367277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603487795
    },
    {
        "content": "<p>PR is merged, the regression should be fixed now</p>",
        "id": 214558722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603709469
    }
]