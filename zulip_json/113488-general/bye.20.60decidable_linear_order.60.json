[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/lean/issues/484\">lean#484</a> I merge <code>linear_order</code> with <code>decidable_linear_order</code>. In <a href=\"https://github.com/leanprover-community/mathlib/issues/4762\">#4762</a> I'm trying to fix mathlib build. I could definitely use some help in this task. The PR already touches 100 files.</p>",
        "id": 214408279,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603513002
    },
    {
        "content": "<p>Sure, what can I do?  Do you want to give me some files to fix?</p>",
        "id": 214408553,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603513540
    },
    {
        "content": "<p>I can also help. I guess it's good to make sure that we don't step on each others toes...</p>",
        "id": 214408600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603513613
    },
    {
        "content": "<p>Pushed</p>",
        "id": 214408612,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603513654
    },
    {
        "content": "<p>I'm fixing <code>filter_product</code>. You're free to fix any other file.</p>",
        "id": 214408618,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603513666
    },
    {
        "content": "<p>Main API changes:</p>\n<ul>\n<li>remove <code>decidable_linear_order</code>;</li>\n<li>remove all <code>decidable_linear_*</code> groups etc, including <code>discrete_*field</code></li>\n</ul>",
        "id": 214408684,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603513792
    },
    {
        "content": "<p>I did some search&amp;replace, so should be no more <code>decidable_linear*</code> in the repository</p>",
        "id": 214408731,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603513861
    },
    {
        "content": "<p>Once you choose a file, tell the others here, please.</p>",
        "id": 214408740,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603513916
    },
    {
        "content": "<p>I'm done with <code>filter_product</code>, moving to <code>data/real/basic</code></p>",
        "id": 214408789,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603513951
    },
    {
        "content": "<p>Note: <code>24daef0aff0716188b82300b2d629ca04696057e</code> has cached oleans available</p>",
        "id": 214408933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603514262
    },
    {
        "content": "<p>I'm not sure what should we do with <code>real.ordered_ring</code> etc. Currently proofs rely on <code>linear_order</code> which is going to become <code>noncomputable</code>. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you want to rewrite some proofs, or should I just make more instances noncomputable?</p>",
        "id": 214408992,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514367
    },
    {
        "content": "<p>Note that some failures are because of <a href=\"#narrow/stream/113488-general/topic/conv.20in.20lean.20master\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/conv.20in.20lean.20master</a></p>",
        "id": 214409041,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514406
    },
    {
        "content": "<p>It's about the <code>real</code>s, right? Aren't those already noncomputable in every sense?</p>",
        "id": 214409047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603514422
    },
    {
        "content": "<p>And possibly we should skip them and hope that <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> will fix it in lean.</p>",
        "id": 214409054,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514447
    },
    {
        "content": "<p><code>(+)</code> and <code>(*)</code> are formally \"computable\"</p>",
        "id": 214409060,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514477
    },
    {
        "content": "<p>But I see no practical value in this \"computable\".</p>",
        "id": 214409065,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514509
    },
    {
        "content": "<p>They're computable in the following sense: given sequences approximating <code>a</code> and <code>b</code>, you can write down a sequence approximating <code>a + b</code>.</p>",
        "id": 214409111,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514536
    },
    {
        "content": "<p>So maybe <code>real.comm_ring</code> can be computable, and then <code>real.ordered_ring</code> is not?</p>",
        "id": 214409119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603514554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <code>real.linear_ordered_comm_ring</code> was chosen to be the strongest class which can be derived on <code>real</code> that is computable</p>",
        "id": 214409187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603514690
    },
    {
        "content": "<p>But <code>linear_order</code> now includes <code>decidable_*</code></p>",
        "id": 214409243,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514765
    },
    {
        "content": "<p>I would suggest proving all the maximal elements of the poset of instances that are computable</p>",
        "id": 214409244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603514769
    },
    {
        "content": "<p>So it can't be computable anymore</p>",
        "id": 214409245,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514771
    },
    {
        "content": "<p>right, you've pushed the frontier down a bit</p>",
        "id": 214409250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603514784
    },
    {
        "content": "<p>Can you adjust the proofs?</p>",
        "id": 214409260,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514808
    },
    {
        "content": "<p>so we need a <code>partial_order real</code> instance now, and possibly some partial_order based ring proof</p>",
        "id": 214409261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603514811
    },
    {
        "content": "<p>It's just a subset of fields</p>",
        "id": 214409263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603514817
    },
    {
        "content": "<p>I would prefer to avoid dealing with <code>cau_seq</code> and the definition of <code>real</code> if possible.</p>",
        "id": 214409273,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514857
    },
    {
        "content": "<p>Basically, the idea is to have all the same instances as we do currently, but ensure that nothing is noncomputable unless it has to be</p>",
        "id": 214409275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603514878
    },
    {
        "content": "<p>so the question comes down to which instances are noncomputable</p>",
        "id": 214409315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603514909
    },
    {
        "content": "<p>E.g., the proof of <code>add_le_add_left</code> relies on <code>linear_order</code>.</p>",
        "id": 214409322,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514934
    },
    {
        "content": "<p>So it has to be adjusted.</p>",
        "id": 214409325,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514940
    },
    {
        "content": "<p>what instance is that part of?</p>",
        "id": 214409328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603514954
    },
    {
        "content": "<p>I will attempt <code>topology/algebra/ordered.lean</code></p>",
        "id": 214409329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603514956
    },
    {
        "content": "<p>E.g., <code>ordered_add_comm_group</code> or <code>ordered_ring</code></p>",
        "id": 214409336,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514987
    },
    {
        "content": "<p>I know how to fix it.</p>",
        "id": 214409338,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603514997
    },
    {
        "content": "<p>Actually you can probably prove it using <code>linear_order real</code></p>",
        "id": 214409402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603515112
    },
    {
        "content": "<p>because it's in a proof</p>",
        "id": 214409408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603515121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Could you please have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/4762/files#diff-6abf6bbce2c44f1e6e6680b121362215a4139aaeebe1c010f364b253eebbc5e9\">https://github.com/leanprover-community/mathlib/pull/4762/files#diff-6abf6bbce2c44f1e6e6680b121362215a4139aaeebe1c010f364b253eebbc5e9</a> ?</p>",
        "id": 214409749,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603515682
    },
    {
        "content": "<p>I'm going to fix <code>data/complex/exponential</code></p>",
        "id": 214409880,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603515851
    },
    {
        "content": "<p>I have some other stuff to attend to right now but I will be back in a few hours</p>",
        "id": 214409887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603515878
    },
    {
        "content": "<p>Actually, <code>data/complex/exponential</code> is about <code>conv</code>+<code>find</code></p>",
        "id": 214409947,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603515980
    },
    {
        "content": "<p><code>data/padics/padic_numbers.lean</code></p>",
        "id": 214410022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603516125
    },
    {
        "content": "<p>real/hyperreal</p>",
        "id": 214410157,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603516376
    },
    {
        "content": "<p><code>padics/ring_homs</code></p>",
        "id": 214410259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603516580
    },
    {
        "content": "<p>I think we're almost done!</p>",
        "id": 214410444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603516951
    },
    {
        "content": "<p>Indeed, I was just trying to find something to work on (I am slower than you!) and couldn't.</p>",
        "id": 214410453,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603517009
    },
    {
        "content": "<p>My computer already compiles <code>manifold.times_cont_mdiff</code>, and so far <code>conv</code>+<code>find</code> is the only remaining error.</p>",
        "id": 214410505,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603517116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Then you can start reviewing the PR!</p>",
        "id": 214410547,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603517171
    },
    {
        "content": "<p>I've fixed complex/exponential</p>",
        "id": 214410550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603517178
    },
    {
        "content": "<p>Didn't want to wait on the conv fix</p>",
        "id": 214410552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603517189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  OK, but I am not qualified to review this computability-of-<code>real.linear_ordered_comm_ring </code> issue which you were discussing with Mario.</p>",
        "id": 214410561,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603517235
    },
    {
        "content": "<p>I hope, Mario will review this part.</p>",
        "id": 214410602,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603517334
    },
    {
        "content": "<p>I have a version that compiles without errors</p>",
        "id": 214410610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603517360
    },
    {
        "content": "<p>Now we need someone to make a new release of Lean before this PR rots.</p>",
        "id": 214410659,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603517456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> This is how you make a new release: <a href=\"https://github.com/leanprover-community/lean/commit/cc729642c39f9a5d66e45c1c92066bd8bec7d282\">https://github.com/leanprover-community/lean/commit/cc729642c39f9a5d66e45c1c92066bd8bec7d282</a></p>",
        "id": 214410802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603517777
    },
    {
        "content": "<p>Do you mind writing a few sentences on the motivation for this for the commit message of <a href=\"https://github.com/leanprover-community/lean/issues/484\">lean#484</a>? I'd be happy to merge it and make a new release of Lean after Mario gives his OK.</p>",
        "id": 214410807,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603517789
    },
    {
        "content": "<p>I think that the new release should wait for <a href=\"#narrow/stream/113488-general/topic/conv.20in.20lean.20master\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/conv.20in.20lean.20master</a></p>",
        "id": 214412638,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603522075
    },
    {
        "content": "<p>After <a href=\"https://github.com/leanprover-community/lean/issues/482\">lean#482</a> some of <code>conv in ...</code> in <code>mathlib</code> started to fail.</p>",
        "id": 214412688,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603522168
    },
    {
        "content": "<p>what am I supposed to be reviewing again?</p>",
        "id": 214417864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603531939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/bye.20.60decidable_linear_order.60/near/214409749\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> Could you please have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/4762/files#diff-6abf6bbce2c44f1e6e6680b121362215a4139aaeebe1c010f364b253eebbc5e9\">https://github.com/leanprover-community/mathlib/pull/4762/files#diff-6abf6bbce2c44f1e6e6680b121362215a4139aaeebe1c010f364b253eebbc5e9</a> ?</p>\n</blockquote>\n<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 214418052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603532223
    },
    {
        "content": "<p>I looked at it</p>",
        "id": 214419254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603534121
    },
    {
        "content": "<p>it looks like it's working</p>",
        "id": 214419257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603534134
    },
    {
        "content": "<p>I approved <a href=\"https://github.com/leanprover-community/lean/issues/484\">lean#484</a>. In the end I just added a link to <a href=\"#narrow/stream/116395-maths/topic/decidable.20linear.20order\">this thread</a> in the PR comment.</p>\n<p>I don't feel qualified to figure out how to fix the issues related to <a href=\"https://github.com/leanprover-community/lean/issues/482\">lean#482</a>.</p>",
        "id": 214432258,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603551879
    },
    {
        "content": "<p>Regarding <a href=\"https://github.com/leanprover-community/lean/issues/482\">lean#482</a>, I think basically the contents of this discussion turned out to be a mistake:</p>\n<p><a href=\"https://github.com/leanprover-community/lean/pull/476#discussion_r503264366\">https://github.com/leanprover-community/lean/pull/476#discussion_r503264366</a></p>",
        "id": 214432334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603551964
    },
    {
        "content": "<p>Can you make a PR that resolves things? (Sorry, I haven't been following the discussion there or in the other thread in detail.)</p>",
        "id": 214432387,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603552068
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/lean/issues/485\">lean#485</a>. Can someone else commit a test to that branch that demonstrates the behavior that broke?</p>",
        "id": 214432614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603552350
    },
    {
        "content": "<p>I don't understand what exactly went wrong, so I guess I can't help creating a test that doesn't depend on mathlib.</p>",
        "id": 214433280,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603553221
    },
    {
        "content": "<p>I think even basic writing under binders broke</p>",
        "id": 214433929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603554102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Are we ready for a new release?</p>",
        "id": 214585213,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603724685
    },
    {
        "content": "<p>I can make one this evening if Gabriel doesn't get to it before then.</p>",
        "id": 214585577,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603724839
    },
    {
        "content": "<p>In the meantime I made a tag in my repo and switched mathlib branch to this tag.</p>",
        "id": 214587778,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603725786
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/4762\">#4762</a> is ready for review. It touches 103 files, so I'd love to see it merged soon (but no sooner than we actually have the corresponding lean release).</p>",
        "id": 214591281,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603727161
    }
]