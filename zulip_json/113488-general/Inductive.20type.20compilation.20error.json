[
    {
        "content": "<p>What's up with the following error? The presence of the <code>complete_boolean_algebra</code> instance in the following code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">B_name</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">complete_boolean_algebra</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- complains only if complete_boolean_algebra instance is there</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B_name</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">B_name</span>\n</pre></div>\n\n\n<p>results in the following error message:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">23</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">nested</span> <span class=\"kn\">inductive</span> <span class=\"n\">type</span> <span class=\"n\">compiled</span> <span class=\"n\">to</span> <span class=\"n\">invalid</span> <span class=\"kn\">inductive</span> <span class=\"n\">type</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"kn\">definition</span> <span class=\"err\">&#39;</span><span class=\"bp\">_</span><span class=\"n\">nest_1_1</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">B_name</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">sizeof_spec&#39;</span><span class=\"o\">,</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">complete_boolean_algebra</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">β_inst_inst</span> <span class=\"o\">:</span> <span class=\"n\">has_sizeof</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"n\">nest_1_1</span><span class=\"bp\">.</span><span class=\"n\">B_name</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n    <span class=\"bp\">_</span><span class=\"n\">nest_1_1</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">B_name</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">β_inst_inst</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">nest_1_1</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">B_name</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"bp\">_</span><span class=\"n\">nest_1_1</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">B_name</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">β_inst_inst</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">nest_1_1</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">B_name</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">complete_boolean_algebra</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">β_inst_inst</span> <span class=\"o\">:</span> <span class=\"n\">has_sizeof</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"n\">nest_1_1</span><span class=\"bp\">.</span><span class=\"n\">B_name</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n    <span class=\"bp\">_</span><span class=\"n\">nest_1_1</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">B_name</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">β_inst_inst</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">nest_1_1</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">B_name</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeof</span> <span class=\"n\">snd</span>\n</pre></div>",
        "id": 157408201,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1549084320
    },
    {
        "content": "<p>That's a nested inductive type</p>",
        "id": 157408397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549084659
    },
    {
        "content": "<p>these aren't compiled very well</p>",
        "id": 157408398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549084669
    },
    {
        "content": "<p>Does the presence of the <code>complete_boolean_algebra</code> instance make it nested, or is it nested because of the type of the constructor <code>mk</code>?</p>",
        "id": 157408442,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1549084733
    },
    {
        "content": "<p>an isomorphic regular inductive is</p>\n<div class=\"codehilite\"><pre><span></span>inductive B_name (β : Type u) [complete_boolean_algebra β] : Type (u+1) -- complains only if complete_boolean_algebra instance is there\n| mk (α : Type u) (A : α → B_name) (B : α → β) : B_name\n</pre></div>",
        "id": 157408453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549084784
    },
    {
        "content": "<p>it's the fact that you used a product of some type that hasn't been constructed yet</p>",
        "id": 157408497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549084818
    },
    {
        "content": "<p>I see... I guess it's \"simpler\" to just specify two simultaneous values instead of specifying a pair as a value</p>",
        "id": 157408519,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1549084903
    },
    {
        "content": "<p>Thanks for clarifying!</p>",
        "id": 157408520,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1549084917
    },
    {
        "content": "<p>Well, it's mostly the fact that inductives have a strict specification on what is allowed in the constructors, and other inductive types aren't in that specification. Lean has a trick for compiling them anyway, but it's complicated and not completely correct in some edge cases</p>",
        "id": 157408617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549085065
    }
]