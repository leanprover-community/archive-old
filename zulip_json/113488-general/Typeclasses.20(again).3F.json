[
    {
        "content": "<p>I may be encountering a diamond problem, but this is way out of my league. I want to apply a result using the fact that ℝ is a topological space, and that its topology is generated by intervals (this is called <code>orderable_topology</code>). All these properties should be known to the system, but when I try to apply a theorem using these properties I get <code>invalid apply tactic, failed to synthesize type class instance</code>. So, I tried to fill in all the instances by hand, as in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">haveI</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">orderable_topology</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"n\">haveI</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">my_thm</span> <span class=\"n\">bar</span> <span class=\"n\">foo</span>\n</pre></div>\n\n\n<p>but then I get the following complaint:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">term</span>\n  <span class=\"n\">foo</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">orderable_topology</span> <span class=\"n\">ℝ</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniform_space</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span> <span class=\"n\">ℝ</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_metric_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">normed_field</span><span class=\"o\">)))</span>\n    <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">orderable_topology</span> <span class=\"n\">ℝ</span> <span class=\"n\">bar</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semilattice_inf</span><span class=\"bp\">.</span><span class=\"n\">to_partial_order</span> <span class=\"n\">ℝ</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">to_semilattice_inf</span> <span class=\"n\">ℝ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">to_lattice</span> <span class=\"n\">ℝ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conditionally_complete_linear_order</span><span class=\"bp\">.</span><span class=\"n\">to_conditionally_complete_lattice</span> <span class=\"n\">ℝ</span>\n                <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_linear_order</span><span class=\"o\">))))</span>\n</pre></div>\n\n\n<p>Strangely, if I reverse the order of the instances</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">haveI</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"n\">haveI</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">orderable_topology</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>then the second instance is not accepted, with <code>tactic.mk_instance failed to generate instance for orderable_topology ℝ</code>.</p>\n<p>Any idea of what is going on?</p>",
        "id": 147848580,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1542404973
    },
    {
        "content": "<p><code>haveI</code> is like <code>have</code>, it doesn't make the definition visible. So I'm not surprised neither of these work.</p>",
        "id": 147848900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542405288
    },
    {
        "content": "<p>try <code>letI</code> instead.</p>",
        "id": 147848916,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542405311
    },
    {
        "content": "<p>Thanks. <code>letI</code> helped me to detect that my problem was not coming from the instances, contrary to what the error message says. Problem solved!</p>",
        "id": 147849403,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1542405844
    }
]