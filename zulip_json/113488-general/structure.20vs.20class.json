[
    {
        "content": "<p>The age-old question: when to use <code>structure</code> and when to use <code>class</code>?</p>",
        "id": 124512218,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522642665
    },
    {
        "content": "<p>You have to step back and decide whether you want a global, unique instance or not.</p>",
        "id": 124523699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522669553
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>universes u v\n\nvariables (G : Type u) [group G] (X : Type v)\n\nclass group_action : Type (max u v) :=\n(fn : G → X → X)\n(one : ∀ x, fn 1 x = x)\n(mul : ∀ g h x, fn (g * h) x = fn g (fn h x))\n</pre></div>",
        "id": 124558513,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522726906
    },
    {
        "content": "<p>should this be a <code>class</code> or a <code>structure</code>?</p>",
        "id": 124558514,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522726911
    },
    {
        "content": "<p>A class, I would think, if you want that notation to work</p>",
        "id": 124558557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522726963
    },
    {
        "content": "<p>You may also be able to make one of the two type arguments an <code>out_param</code>. Would you say that one (kind of) uniquely determines the other?</p>",
        "id": 124558565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522727018
    },
    {
        "content": "<blockquote>\n<p>A class, I would think, if you want that notation to work</p>\n</blockquote>\n<p>I also think so, but then the following becomes awkward, since it suggests that I can synthesize more than one group actions:</p>\n<div class=\"codehilite\"><pre><span></span>protected def trivial : group_action G S :=\n⟨λ g, id, λ x, rfl, λ g h x, rfl⟩\n</pre></div>",
        "id": 124558605,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522727053
    },
    {
        "content": "<blockquote>\n<p>You may also be able to make one of the two type arguments an <code>out_param</code>. Would you say that one (kind of) uniquely determines the other?</p>\n</blockquote>\n<p>a <code>module</code> is just an R-action right, so maybe we can use the same strategy</p>",
        "id": 124558607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522727076
    },
    {
        "content": "<p>although the set has an abelian group structure</p>",
        "id": 124558608,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522727096
    },
    {
        "content": "<p>I don't know in this case, what do you think?</p>",
        "id": 124558615,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522727105
    },
    {
        "content": "<p>Of course there are multiple group actions in actuality, but probably you want to focus on just one in a given context. Maybe using <code>local instance</code>?</p>",
        "id": 124558618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522727129
    },
    {
        "content": "<p>I actually just want to state it, so maybe <code>def</code> is fine</p>",
        "id": 124558662,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522727213
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">group_action</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fn</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fn</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</pre></div>\n\n\n</blockquote>\n<p>Why not</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span>  <span class=\"n\">action</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">homo</span> <span class=\"o\">:</span> <span class=\"n\">is_group_hom</span> <span class=\"n\">map</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 124561840,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522734349
    },
    {
        "content": "<p>because.</p>",
        "id": 124561884,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522734379
    },
    {
        "content": "<p>because stating it more abstractly makes it less useful</p>",
        "id": 124561886,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522734393
    },
    {
        "content": "<p>conciseness c’est pas tous</p>",
        "id": 124561889,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522734400
    },
    {
        "content": "<p>See also <a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/subgroups.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/subgroups.lean\">https://github.com/PatrickMassot/lean-scratchpad/blob/master/subgroups.lean</a> for related random stuff</p>",
        "id": 124561902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522734482
    },
    {
        "content": "<p>Using group homomorphism should give you access to lemmas you'll need to reprove with your less abstract definition</p>",
        "id": 124561946,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522734522
    },
    {
        "content": "<p>you want to restate them anyway though</p>",
        "id": 124561951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522734550
    },
    {
        "content": "<p>I think that kenny's version more accurately represents the data content, which is a single function G -&gt; X -&gt; X satisfying some properties, rather than a function to a pair of functions</p>",
        "id": 124561993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522734606
    },
    {
        "content": "<p>of course you want your version stated as lemmas, and then all those theorems become available in the end anyway</p>",
        "id": 124561996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522734644
    },
    {
        "content": "<p>Mathematically the accurate representation of content if certainly mine. About Lean usability I don't know of course</p>",
        "id": 124562198,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522735122
    },
    {
        "content": "<p>they are certainly equivalent, but the data content is different. It's like the difference between representing the integers by an integer, or by a pair of an integer and its negative. The representations are equivalent, but one has some additional redundancy</p>",
        "id": 124562574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522735936
    },
    {
        "content": "<p>let’s all just represent nat by Pi X, X-&gt;(X-&gt;X)-&gt;X</p>",
        "id": 124562588,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522736036
    },
    {
        "content": "<p>Ok, I think I understand the confusion: we are talking about two separate issues. My claim is that the mathematically meaningful and redundancy free point of view is to define a group action as a group homomorphism. It seems you are discussing the redundancy in your definition of <code>perm X</code>. Now I'm even more confused. A long time ago you told I should build homeomorphisms on top of equiv. Since then I've been suffering through two levels of coercions (<code>homeo</code> to <code>equiv</code> to <code>function</code>). And I have loads of attempted proofs where I'm stuck with expression mixing multiplication in the group <code>homeo X X</code> and composition of <code>equiv</code> and composition of  functions, which are all the same but I never know how to tell Lean.  And a few days ago you proved this <code>f '' (-s) = - f '' s</code> by throwing away <code>equiv</code> and use <code>function.bijective</code>, so this is the second time in a couple of days where you seem to avoid <code>equiv</code>. I would appreciate any clue about what I should be doing with my groups of homeomorphisms.</p>",
        "id": 124574243,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> How would you state a G-Set homomorphism in your definition of G-Set? In mine, f:X-&gt;Y is a homomorphism if f(gx)=gf(x)</p>",
        "id": 124574254,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760258
    },
    {
        "content": "<p>I don't understand your question. If ρ_X : G → perm X and ρ_Y : G → perm Y are two G-action then f : X → Y is a G-morphism if, for all g, f ∘ ρ_X(g) = ρ_Y(g) ∘ f</p>",
        "id": 124574430,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760537
    },
    {
        "content": "<p>interesting</p>",
        "id": 124574442,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760567
    },
    {
        "content": "<p>Of course you could phrase this in terms of natural transformations</p>",
        "id": 124574443,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760570
    },
    {
        "content": "<p>I can see a commutative diagram inside :P</p>",
        "id": 124574445,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760574
    },
    {
        "content": "<p>If you want Mario to run away</p>",
        "id": 124574447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760579
    },
    {
        "content": "<p>oh really</p>",
        "id": 124574448,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760580
    },
    {
        "content": "<p>Sure</p>",
        "id": 124574455,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760586
    },
    {
        "content": "<p>could you enlighten me?</p>",
        "id": 124574458,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760589
    },
    {
        "content": "<p>and I feel like I've seen this in group rep</p>",
        "id": 124574468,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760641
    },
    {
        "content": "<p>But what I was advocating is an intermediate point of view, not going all the way to using categories to define group actions</p>",
        "id": 124574540,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760755
    },
    {
        "content": "<p>I am writing a category theory repo</p>",
        "id": 124574579,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760766
    },
    {
        "content": "<p>so it is helpful to me</p>",
        "id": 124574581,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760769
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/category-theory\" target=\"_blank\" title=\"https://github.com/kckennylau/category-theory\">https://github.com/kckennylau/category-theory</a></p>",
        "id": 124574584,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760785
    },
    {
        "content": "<p>in fact I'm proving that the forgetful functor GSet-&gt;Set has right adjoint</p>",
        "id": 124574586,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760797
    },
    {
        "content": "<p>A group is a category with one object, and morphisms given by the group element</p>",
        "id": 124574591,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760807
    },
    {
        "content": "<p>then a G-set is simply a functor from G to Set</p>",
        "id": 124574601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760824
    },
    {
        "content": "<p>but it would be a fun fact to prove that that functor thing is isomorphic to the GSet in the category of categories</p>",
        "id": 124574603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760825
    },
    {
        "content": "<p>aha, so it's the slice category</p>",
        "id": 124574611,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760853
    },
    {
        "content": "<p>And a morphism of G-set is a morphism in this category</p>",
        "id": 124574612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760853
    },
    {
        "content": "<p>hence a natural transformation</p>",
        "id": 124574617,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760863
    },
    {
        "content": "<p>very interesting</p>",
        "id": 124574621,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760875
    },
    {
        "content": "<p>It's meant to be the very first exercise you do after reading the definition of a natural transformation</p>",
        "id": 124574657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760883
    },
    {
        "content": "<p>where do you learn category theory?</p>",
        "id": 124574667,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760905
    },
    {
        "content": "<p>Are you talkin to Scott about this repo?</p>",
        "id": 124574668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760905
    },
    {
        "content": "<p>I'm not; he hasn't replied to my message</p>",
        "id": 124574671,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760914
    },
    {
        "content": "<p>I don't think I've seen him here for a while</p>",
        "id": 124574676,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522760936
    },
    {
        "content": "<p>He was probably captured by real life</p>",
        "id": 124574689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760976
    },
    {
        "content": "<p>This happened to me during the last couple of weeks</p>",
        "id": 124574694,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522760986
    },
    {
        "content": "<p>And actually students will probably invade my office soon, and I'll have to let you do your category theory exercises</p>",
        "id": 124574741,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522761014
    },
    {
        "content": "<p>alright</p>",
        "id": 124574747,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522761028
    },
    {
        "content": "<blockquote>\n<p>I don't think I've seen him here for a while</p>\n</blockquote>\n<p>Scott is on holiday at the minute.</p>",
        "id": 124578652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522767573
    },
    {
        "content": "<p>I am back, but actual maths has captured my attention for a moment --- a collaborator is here this week.</p>",
        "id": 124599463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522798196
    },
    {
        "content": "<p>omg you're back</p>",
        "id": 124599466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522798202
    },
    {
        "content": "<p>I am definitely still working on getting my category theory library reading for a PR, but there is still some work to do, which I haven't been finding a lot of time for.</p>",
        "id": 124599523,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522798227
    },
    {
        "content": "<p>hope you don't mind the fact that i'm creating another</p>",
        "id": 124599529,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522798238
    },
    {
        "content": "<p>No, not at all.</p>",
        "id": 124599532,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522798246
    },
    {
        "content": "<p>If you would like to join forces, however, I would be very happy.</p>",
        "id": 124599537,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522798259
    },
    {
        "content": "<p>sure</p>",
        "id": 124599545,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522798266
    },
    {
        "content": "<p>I think it is good to have different eyes and different opinions on projects.</p>",
        "id": 124599549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522798271
    },
    {
        "content": "<p>I think my focus for category theory for a while will be not adding new material, but rather getting the basics PR'd into mathlib.</p>",
        "id": 124599554,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522798303
    },
    {
        "content": "<p>If you would like to add material, however, that is certainly fine.</p>",
        "id": 124599558,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522798316
    },
    {
        "content": "<p>Also, if you have comments and criticisms of the basics, I'm very happy to hear them concurrently with preparing to PR.</p>",
        "id": 124599601,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522798333
    },
    {
        "content": "<p>have you looked at mine?</p>",
        "id": 124599609,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522798350
    },
    {
        "content": "<p>I'm happy to just give you commit access on the repository if you'd like, or I'll merge PRs as they come.</p>",
        "id": 124599610,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522798354
    },
    {
        "content": "<p>Looking at yours is on my todo list, but Lean is not getting to the top of the todo list again until next week.</p>",
        "id": 124599614,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522798371
    },
    {
        "content": "<p>well you would need to fix your repo first, I heard it doesn't work well with the latest mathlib</p>",
        "id": 124599615,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522798374
    },
    {
        "content": "<p>It was working after the \"monad merge\" on Lean, and the subsequent update to Lean. I will check again in a moment. Hopefully it is okay, however.</p>",
        "id": 124599627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522798430
    },
    {
        "content": "<p>Besides irrelevant problems in mathlib, lean-category-theory builds fine against the HEAD of Lean at the moment.</p>",
        "id": 124599949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522798971
    },
    {
        "content": "<p>Kenny's top priority at the minute is revising for mechanics, but let me give a huge +1 to the idea of you two collaborating on category theory. Kenny seems to understand all the standard category theoretic notions well now, and has a bunch of examples in his head, so whilst he might not yet be at the stage of doing infinity-1 categories or whatever, he will almost certainly have more time to work on categories in the near future (e.g. after his mechanics exam in mid-May)</p>",
        "id": 124616405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522834456
    },
    {
        "content": "<p>right, there's mechanics</p>",
        "id": 124616411,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522834482
    },
    {
        "content": "<p>And I am doing my schemes library by proving lots of things about sheaves and presheaves of types, and then writing ad hoc extensions to sheaves of rings</p>",
        "id": 124616413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522834483
    },
    {
        "content": "<p>and the sooner I can do sheaves of objects the better</p>",
        "id": 124616422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522834500
    },
    {
        "content": "<p>Exams are in mid-May and they are already revising?</p>",
        "id": 124616865,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522835358
    },
    {
        "content": "<p>That's even more amazing than first year students using Lean!</p>",
        "id": 124616867,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522835378
    },
    {
        "content": "<p>\"they are already revising\", more like \"they are already being told to revise\"</p>",
        "id": 124616918,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522835428
    },
    {
        "content": "<p>This afternoon I will attend a talk whose title is: \"Perfectoid spaces and us\"</p>",
        "id": 124617037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522835691
    },
    {
        "content": "<p>for a general mathematical audience</p>",
        "id": 124617046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522835707
    },
    {
        "content": "<p>by thomas hales?</p>",
        "id": 124617047,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522835720
    },
    {
        "content": "<p>Did you make any progress in formalizing perfectoid spaces</p>",
        "id": 124617050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522835731
    },
    {
        "content": "<p>aucun</p>",
        "id": 124617055,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522835745
    },
    {
        "content": "<p>No, by Ariane Mézard</p>",
        "id": 124617056,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522835746
    },
    {
        "content": "<p>Our progress so far is a new empty repository, and Kenny wrote some stuff about valuations and then found he didn't have push access.</p>",
        "id": 124627096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522853696
    },
    {
        "content": "<p>I think that claiming that we \"did\" schemes but not even being able to construct one example is not such a great advertisement, so when I write Lean code I typically try and fix this problem. We are nearly there. I broke the problem down into three parts; part (3) is basically done, part (1) Chris Hughes has nearly finished and part (2) should be easy (and I will start on it soon, hopefully). When we can prove that an affine scheme is a scheme I will get back to perfectoid spaces.</p>",
        "id": 124627162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522853827
    },
    {
        "content": "<blockquote>\n<p>by thomas hales?</p>\n</blockquote>\n<p>Kenny, I don't think Tom Hales knows too much about perfectoid spaces.</p>",
        "id": 124627166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522853843
    },
    {
        "content": "<p>I was sitting next to Fontaine during that talk and, according to him, Ariane also doesn't know much about perfectoid spaces.</p>",
        "id": 124633933,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522864450
    },
    {
        "content": "<p>Which probably means we are lucky Mézard gave this talk instead of Fontaine <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 124633945,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522864490
    },
    {
        "content": "<p>Also, I didn't tell Fontaine about schemes without example</p>",
        "id": 124633959,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522864524
    },
    {
        "content": "<p>But I confess I told this story to François Charles a couple of days ago</p>",
        "id": 124633963,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522864552
    },
    {
        "content": "<p>He agrees the fact that affine schemes are schemes is not trivial, but still disapproves having defined schemes with no example</p>",
        "id": 124634012,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522864591
    },
    {
        "content": "<p>During that inauguration thing I also got the opportunity of chatting a bit with Christine Paulin (the dean of my university, who was involved in the theoretical foundations of Coq).</p>",
        "id": 124634029,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522864679
    },
    {
        "content": "<p>Then a colleague asked me why I was talking to her, and I may have found one new recruit for Lean</p>",
        "id": 124634194,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522864921
    },
    {
        "content": "<blockquote>\n<p>Which probably means we are lucky Mézard gave this talk instead of Fontaine <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Anyone who wants to hear Fontaine's opinion can just read his Sem Bourbaki :-)</p>",
        "id": 124638886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522871678
    },
    {
        "content": "<p>I once opened this Bourbaki seminar and decided it was not written for me <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 124642522,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522877227
    },
    {
        "content": "<p>But, to be honest, I don't think Fontaine would say the Bourbaki I wrote about flexibility of contact structures in higher dimensions was written for him.</p>",
        "id": 124642590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522877311
    }
]