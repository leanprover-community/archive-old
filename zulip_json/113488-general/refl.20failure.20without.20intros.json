[
    {
        "content": "<p>Is there an easy explanation for why the following fails if I drop the <code>intros</code> from the proof of <code>map_mul</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">hom_prod</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→*</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">let</span> <span class=\"n\">evb</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→*</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_monoid_hom</span> <span class=\"n\">evb</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_hom</span> <span class=\"n\">s</span> <span class=\"n\">evb</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187587926,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581022652
    },
    {
        "content": "<p>The error I see if I replace <code>map_mul := by { intros, refl, }</code> with <code>map_mul := rfl</code> is:</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at field &#39;map_mul&#39;\n  rfl\nhas type\n  ?m_2 = ?m_2\nbut is expected to have type\n  ∀ (x y : β →* γ), evb (x * y) = evb x * evb y\n</pre></div>",
        "id": 187588214,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581022827
    },
    {
        "content": "<p>Why would it work?</p>",
        "id": 187588258,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581022859
    },
    {
        "content": "<p>Erm, good question!</p>",
        "id": 187588301,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581022889
    },
    {
        "content": "<p>in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>would you expect <code>refl</code> to close the goal?</p>",
        "id": 187588401,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581022932
    },
    {
        "content": "<p>hint: you shouldn't.</p>",
        "id": 187588421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581022943
    },
    {
        "content": "<p>Oh dear, I would have expected it to close that goal <span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span></p>",
        "id": 187588441,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581022956
    },
    {
        "content": "<p>Thank you for providing such a simplified example. Is there a simple explanation for when I should expect <code>refl</code> to work, or somewhere I should look to read more?</p>",
        "id": 187588513,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581023000
    },
    {
        "content": "<p>You should expect it to work when the goal is <code>x = x</code>, maybe in disguise.</p>",
        "id": 187588550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023028
    },
    {
        "content": "<p>Till now I had regarded it as a way to close goals that are just definitional equalities once you unfold sufficiently (or something along those lines).</p>",
        "id": 187588555,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581023032
    },
    {
        "content": "<p>Yes, exactly.</p>",
        "id": 187588607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023045
    },
    {
        "content": "<p>Right, that has been my approximate understanding.</p>",
        "id": 187588609,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581023045
    },
    {
        "content": "<p>And <code>∀ n : ℕ, n = n</code> is not of that form.</p>",
        "id": 187588629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023066
    },
    {
        "content": "<p>But I'm fairly sure it has been able to succeed in the past when there was a universal qualifier \"in the way\".</p>",
        "id": 187588634,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581023070
    },
    {
        "content": "<p>Understood, perhaps my memory misleads me.</p>",
        "id": 187588651,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581023080
    },
    {
        "content": "<p>Hmm, I suppose it does. There does not seem to be anything more to this.</p>",
        "id": 187588681,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581023105
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 187588684,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581023107
    },
    {
        "content": "<p>If you are frustrated to have to type two tactics to close this goal you can probably try <code>tauto</code></p>",
        "id": 187588805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023175
    },
    {
        "content": "<p>Right ho, I'll use that.</p>",
        "id": 187588895,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581023249
    },
    {
        "content": "<p>I hope Mario has a good zulip filtering preventing him from seeing such suggestions...</p>",
        "id": 187588916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023269
    },
    {
        "content": "<p>You mean my original message (which I now realise was perhaps wasting people's time) or the suggestion to use <code>tauto</code>?</p>",
        "id": 187588986,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581023310
    },
    {
        "content": "<p>Seriously, the right proof here is <code>lambda _ _,  rfl</code></p>",
        "id": 187588989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023314
    },
    {
        "content": "<p>I meant the suggestion to use <code>tauto</code></p>",
        "id": 187589007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023328
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 187589024,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581023345
    },
    {
        "content": "<p>You are not wasting people's time. Everybody answering questions here is volunteer, and has been asking elementary questions before.</p>",
        "id": 187589068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581023385
    },
    {
        "content": "<p>Well, I can believe <code>tauto</code> might be too heavyweight alright!</p>",
        "id": 187589077,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581023390
    },
    {
        "content": "<p>Thanks for the encouragement, and again for the clarifications.</p>",
        "id": 187589140,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581023412
    },
    {
        "content": "<p>I like the proof <code>\\lam _, rfl</code></p>",
        "id": 187590410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581024270
    },
    {
        "content": "<p>Note that <code>refl</code> already has problems with guessing the number of arguments because it is equivalent to <code>apply *refl</code> where <code>*refl</code> is some reflexivity lemma</p>",
        "id": 187590462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581024340
    },
    {
        "content": "<p>and the apply bug causes issues in cases like <code>le_refl</code> when le is defined as a pi</p>",
        "id": 187590538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581024370
    },
    {
        "content": "<p>maybe this is your recollection</p>",
        "id": 187590552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581024382
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I suspect this is the case. I appreciate this further information.</p>",
        "id": 187591490,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581025083
    },
    {
        "content": "<p>this is also <code>by cc</code></p>",
        "id": 187593889,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1581026971
    }
]