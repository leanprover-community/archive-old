[
    {
        "content": "<p>The lemma</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] lemma degree_C (ha : a ≠ 0) : degree (C a) = (0 : with_bot ℕ) := ...\n</pre></div>\n\n\n<p>in <code>polynomial.lean</code> is marked as <code>simp</code>. However it doesn't get applied by <code>simp</code>, even when there's an explicit hypothesis <code>ha : a ≠ 0</code> available.</p>",
        "id": 157836153,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549602063
    },
    {
        "content": "<p>Is there are way to have <code>simp</code> use it? If not, why are lemmas like this marked with <code>simp</code>?</p>",
        "id": 157836163,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549602082
    },
    {
        "content": "<p>Yes, you just need <code>simp *</code></p>",
        "id": 157900224,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549666256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, sorry, I don't understand. Here's my example:</p>\n<div class=\"codehilite\"><pre><span></span>import data.polynomial\n\nopen polynomial\n\nvariables {α : Type} [integral_domain α] [decidable_eq α]\n\nlemma test (a : α) (ha : a ≠ 0) : degree (C a) = (0 : with_bot ℕ) :=\nby simp [degree_C ha]\n\nlemma test&#39; (a : α) (ha : a ≠ 0) : degree (C a) = (0 : with_bot ℕ) :=\nby simp * -- fails\n</pre></div>",
        "id": 157902105,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549668189
    },
    {
        "content": "<p>I don't understand how to convince <code>simp</code> to use <code>degree_C</code>, without holding its hand.</p>",
        "id": 157902127,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549668226
    },
    {
        "content": "<p>Can you show the error message?</p>",
        "id": 157902517,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549668578
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>tactic failed, there are unsolved goals\nstate:\nα : Type,\n_inst_1 : integral_domain α,\n_inst_2 : decidable_eq α,\na : α,\nha : a ≠ 0\n⊢ some 0 = 0\n</pre></div>",
        "id": 157902742,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549668766
    },
    {
        "content": "<p>what if you write <code>by simp * ; refl</code>?</p>",
        "id": 157902793,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549668827
    },
    {
        "content": "<p>where did <code>some 0</code> come from?</p>",
        "id": 157903326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549669359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, <code>by simp *; refl</code> seems to do it.</p>",
        "id": 157903438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549669506
    },
    {
        "content": "<p>I think I don't understand what <code>simp *</code> does. I always thought that just included all the local hypotheses as simp lemmas.</p>",
        "id": 157903459,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549669543
    },
    {
        "content": "<p>I'm not really sure how we got a <code>some 0</code> here, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>. This seems to be closely related to the question <span class=\"user-mention\" data-user-id=\"137449\">@Aditya Agarwal</span> had: there are many ways to get something in <code>with_bot nat</code>...</p>",
        "id": 157903558,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549669628
    },
    {
        "content": "<p>The preferred way is the coercion, which has the advantage that it actually has type <code>with_bot nat</code> instead of <code>option nat</code></p>",
        "id": 157903635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549669697
    },
    {
        "content": "<p>with <code>some n</code> a lot of simp lemmas won't trigger for it</p>",
        "id": 157903650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549669718
    },
    {
        "content": "<p>Shoot... I've been working with a copy of mathlib with a dumb stray simp lemma I introduced earlier.</p>",
        "id": 157904075,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549670136
    },
    {
        "content": "<p>My \"minimal working examples\" are just wrong...</p>",
        "id": 157904087,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549670155
    },
    {
        "content": "<p>In particular, that <code>some 0</code> was entirely my doing.</p>",
        "id": 157904157,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549670211
    }
]