[
    {
        "content": "<p>I'm trying to rewrite the proof example in the Lean 2 paper into Lean 3 while keeping its main structure which demonstrated different proof paradigms.</p>\n<p>The original is <a href=\"https://github.com/leanprover/lean2/blob/master/library/data/int/order.lean#L112\">here</a> and I manage to get the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">int</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Hn</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">dest</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n<span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Hm</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">dest</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H₃</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>                       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">of_nat_eq_coe</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>                           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Hn</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>                               <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Hm</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>                           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H₄</span> <span class=\"o\">:</span> <span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">add_left_cancel</span> <span class=\"n\">H₃</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H₅</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>                 <span class=\"k\">from</span> <span class=\"n\">of_nat</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">H₄</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>                     <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_of_add_eq_zero_right</span> <span class=\"n\">H₅</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h₆</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>        <span class=\"o\">:</span> <span class=\"n\">Hn</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>which is working but:</p>\n<p>Q1: I don't know how to get rid of the <code>simp only</code>(use more atomic <code>rw</code>/<code>apply</code>/.... instead) and the <code>*coe*</code> lemmas which were not there in the original proof.</p>",
        "id": 204988062,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595652123
    },
    {
        "content": "<p>I'm not sure that <code>simp only</code> is any less atomic than <code>rw</code>!</p>",
        "id": 204988073,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595652168
    },
    {
        "content": "<p>Q2: I don't know how to recover the explicit types for <code>n</code> and <code>Hn</code> in the <code>obtain</code> line.</p>",
        "id": 204988125,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595652281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/rewrite.20le.2Eantisymm.20from.20Lean.202/near/204988073\">said</a>:</p>\n<blockquote>\n<p>I'm not sure that <code>simp only</code> is any less atomic than <code>rw</code>!</p>\n</blockquote>\n<p>Why? I thought <code>rw</code> is quite mechanical and <code>simp only</code> at least has some heuristic (not sure if it's the right word) logic?</p>",
        "id": 204988186,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595652403
    },
    {
        "content": "<p>my model of <code>simp only</code> is that it keeps trying to <code>rw</code> things from the list it's passed until it can't anymore</p>",
        "id": 204988235,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595652502
    },
    {
        "content": "<p>Q3: VSCode can't give me type prompts when I hover but the prompts for the tactic:</p>\n<p><a href=\"/user_uploads/3121/NH3PJyLhQOAna6Px59hfC309/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NH3PJyLhQOAna6Px59hfC309/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/NH3PJyLhQOAna6Px59hfC309/image.png\"></a></div>",
        "id": 204988246,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595652550
    },
    {
        "content": "<p>that looks like you're in tactic mode</p>",
        "id": 204988291,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595652607
    },
    {
        "content": "<p>VSCode can't figure out what H is, that's kind of a \"Lean-complete\" problem</p>",
        "id": 204988297,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595652662
    },
    {
        "content": "<p>you should be able to figure out the type of H from the infoview</p>",
        "id": 204988301,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595652674
    },
    {
        "content": "<p>(if you haven't updated your vscode lean plugin in the past month, you might have \"lean goal\" and \"lean messages\" tabs instead of a \"lean infoview\" tab. The latter is way better and you should update!)</p>",
        "id": 204988353,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595652756
    },
    {
        "content": "<p>Yeah, there would return to Q2</p>",
        "id": 204988354,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595652761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/rewrite.20le.2Eantisymm.20from.20Lean.202/near/204988353\">said</a>:</p>\n<blockquote>\n<p>(if you haven't updated your vscode lean plugin in the past month, you might have \"lean goal\" and \"lean messages\" tabs instead of a \"lean infoview\" tab. The latter is way better and you should update!)</p>\n</blockquote>\n<p>I had and I joined the widget world already. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 204988365,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595652811
    },
    {
        "content": "<p>so you can get the types of those things from the widgets as long you can get the constants into your tactic state</p>",
        "id": 204988406,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595652855
    },
    {
        "content": "<p>Both <code>simp</code> and <code>rw</code> use different strategies for replacing sub-expressions, so work in slightly different situations. A big difference, of course, is that <code>simp</code> tries to rewrite multiple times, and by default includes a large pool of lemmas to try rewriting by (if you don't use <code>only</code>).</p>",
        "id": 204988419,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595652894
    },
    {
        "content": "<p>But even <code>simp_rw</code> and <code>rw</code> are different tactics.</p>",
        "id": 204988424,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595652904
    },
    {
        "content": "<p>If you want to make <code>simp only</code> do even less work, you can replace it with a suitable <code>simp_rw</code> tactic.</p>",
        "id": 204988430,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595652926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/rewrite.20le.2Eantisymm.20from.20Lean.202/near/204988406\">said</a>:</p>\n<blockquote>\n<p>so you can get the types of those things from the widgets as long you can get the constants into your tactic state</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/qce_xsnCbT-7OuIAJm6Hw1Ec/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qce_xsnCbT-7OuIAJm6Hw1Ec/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/qce_xsnCbT-7OuIAJm6Hw1Ec/image.png\"></a></div><p>I can't get it from the view, am I missing something?</p>",
        "id": 204988434,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595652954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/rewrite.20le.2Eantisymm.20from.20Lean.202/near/204988125\">said</a>:</p>\n<blockquote>\n<p>Q2: I don't know how to recover the explicit types for <code>n</code> and <code>Hn</code> in the <code>obtain</code> line.</p>\n</blockquote>\n<p>Not just recover, I wish to write it out explicitly like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Hn</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">⟨ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">dest</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"c1\">-- not legal Lean</span>\n</code></pre></div>",
        "id": 204988531,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595653113
    },
    {
        "content": "<p>it looks like the things you want to find the type of are not in your tactic state</p>",
        "id": 204988944,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595653987
    },
    {
        "content": "<p>if you get them into your tactic state, then you can mouse-over + click them there</p>",
        "id": 204988946,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595654006
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Nc8iU0EfObN3MtVOlg1Ptg0V/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Nc8iU0EfObN3MtVOlg1Ptg0V/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Nc8iU0EfObN3MtVOlg1Ptg0V/image.png\"></a></div><p>Another case is this <code>0</code>. VSCode can't figure out whether this 0 is a nat or an int so it downgrades to showing prompts for <code>from</code>.</p>",
        "id": 204989049,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595654165
    },
    {
        "content": "<p>Is this a bug of <code>simp_rw</code>? I was trying to figure out the partial order relation between <code>rw</code>, <code>simp_rw</code>, <code>simp only</code>, <code>simp</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"kn\">variable</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kn\">variable</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>\n<span class=\"kn\">variable</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span>\n\n<span class=\"n\">include</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">ERROR: simplify tactic failed to simplify</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">WORKS after reordering</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 205000545,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595677165
    },
    {
        "content": "<p><code>add_comm</code> is a dangerous simp lemma. Used in <code>simp</code> (rather than <code>simp_rw</code>) it would obviously loop forever.</p>",
        "id": 205001524,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595679024
    },
    {
        "content": "<p>So there is some scary unspecified heuristic that decides whether it should fire or not.</p>",
        "id": 205001529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595679048
    },
    {
        "content": "<p>Unfortunately it seems this heuristic is still applied in <code>simp_rw</code>, when it probably shouldn't be.</p>",
        "id": 205001535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595679073
    },
    {
        "content": "<p>I agree it sounds like a bug... or at least an undesirable feature. :-)</p>",
        "id": 205001545,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595679118
    },
    {
        "content": "<p>I see.</p>\n<p>I'm aware of the existence of such heuristic logic (maybe from changelog) in <code>simp</code>(in C++ I think), that's probably when this logic change applied to <code>simp_rw</code> because it calls <code>simp only [rule] at l</code> for every rule in the ruleset in order.</p>",
        "id": 205003609,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595683061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/rewrite.20le.2Eantisymm.20from.20Lean.202/near/204988531\">said</a>:</p>\n<blockquote>\n<p>I wish to write it out explicitly like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Hn</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">⟨ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">dest</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"c1\">-- not legal Lean</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Silly me, it's actually very simple:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Hn</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">dest</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n<span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Hm</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">dest</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>the \"type\" is just the proposition for the proof after <code>:=</code>, I was confused by the destructed pattern.</p>",
        "id": 205003803,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595683389
    }
]