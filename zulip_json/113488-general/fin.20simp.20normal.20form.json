[
    {
        "content": "<p>Is there a preferred form between <code>fin.val</code> and the coercion to <code>nat</code>? I have a <code>simp</code> that gets stuck on <code>i.val = ↑i</code>.</p>",
        "id": 206718311,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597250210
    },
    {
        "content": "<p><code>i.val</code> is coming from the extensionality lemma <code>fin.eq_of_veq : ∀ {n : ℕ} {i j : fin n}, i.val = j.val → i = j</code></p>",
        "id": 206718364,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597250243
    },
    {
        "content": "<p>(By the way, it's really cool that <code>show_term {ext}</code> works.)</p>",
        "id": 206718402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597250273
    },
    {
        "content": "<p>I've been slowly chipping away at various <code>fin</code> lemmas that should reduce these happenings. In your case (without seeing the whole thing), you might do  <code>obtain ⟨i, hi⟩ := i</code> and that could help.</p>",
        "id": 206718611,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597250376
    },
    {
        "content": "<p>In this case I can just write <code>simp, refl</code> but I think I shouldn't have to.</p>",
        "id": 206718817,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597250492
    },
    {
        "content": "<p>For how useful it is, I think <code>fin</code> needs a little more API. Sometimes even simple results may be a little tricky for a beginner, like this one:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">le_last</span> <span class=\"n\">i</span><span class=\"o\">,</span>  <span class=\"c1\">-- this doesn&#39;t immediately help</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206727348,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597254584
    },
    {
        "content": "<p>I kind of think the coercion from <code>nat</code> to <code>fin</code> just shouldn't exist</p>",
        "id": 206727556,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597254711
    },
    {
        "content": "<p>I mean the fact that there is a (much more sensible) coercion in the other direction ought to be a red flag</p>",
        "id": 206727914,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597254853
    },
    {
        "content": "<p>Numeric literals don't use that coercion, right?</p>",
        "id": 206728854,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597255271
    },
    {
        "content": "<p>To return to the original topic, is it an intentional decision to not have a simp lemma between <code>.val</code> and the coercion in either direction?</p>",
        "id": 206729722,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597255652
    },
    {
        "content": "<p>I would think it would be better to pick one--my mild preference would be for the coercion</p>",
        "id": 206729811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597255690
    },
    {
        "content": "<p>The coercion from nat to fin should not be used, it's not very well behaved</p>",
        "id": 206731028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597256295
    },
    {
        "content": "<p>The main times you actually want it are when you really mean <code>zmod</code> instead of <code>fin</code></p>",
        "id": 206731087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597256328
    },
    {
        "content": "<p>But we can't really make it not exist because it meets the criteria for <code>nat.cast</code></p>",
        "id": 206731154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597256361
    },
    {
        "content": "<p>I guess we could remove <code>+</code> on fin, but how disruptive would that be?</p>",
        "id": 206731228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597256396
    },
    {
        "content": "<p>we would lose numeric literals, which I think are used, if not in mathlib then in other projects</p>",
        "id": 206731313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597256423
    },
    {
        "content": "<p>I think that <code>fin n</code> has cemented itself as our de facto canonical type with <code>n</code> terms, and this is an argument for its API just being things which are useful for manipulating maps <code>fin n -&gt; X</code> like e.g. some sensible map from <code>fin a \\coprod fin b</code> to <code>fin (a + b)</code>, and all the maps used in simplicial homology from <code>fin n</code> to <code>fin (n+1)</code> etc. I think it's a great idea to remove <code>+</code> on <code>fin</code>. I think it was only there as a stop gap because people wanted Z/n and we didn't have <code>zmod</code> yet.</p>",
        "id": 206732196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597256865
    },
    {
        "content": "<p>I need some help to clarify this. Here is a not-so-short example where I felt that I couldn't get away without some coercion. Is anyone willing to take a look and tell me how I could avoid getting into trouble (hence possibly also avoid using the two lemmas at the top)? The two relevant lines have comments ending in <code>-- here?</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">local_extr</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">times_cont_diff</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">iterated_deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fin_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span> <span class=\"n\">coe_coe</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_val_of_lt</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_val_of_lt</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fin_le_last_val</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span>  <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">j0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">j0</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_val_of_lt</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j0</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">is_lt</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">le_iff_val_le_val</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">j0</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">exist_points_deriv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"o\">(</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  <span class=\"bp\">→</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">xp</span> <span class=\"o\">:</span> <span class=\"n\">fin</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">strict_mono</span> <span class=\"n\">xp</span> <span class=\"bp\">∧</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">xp</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"o\">(</span> <span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">xp</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">hxi</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))),</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">exists_deriv_eq_zero</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- show x i &lt; x (i+1)</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">fin_lt_succ</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">),</span>   <span class=\"c1\">---- what to do here?</span>\n        <span class=\"c1\">-- show f continuous on Icc (x i) (x (i+1))</span>\n        <span class=\"k\">have</span> <span class=\"n\">h02</span> <span class=\"o\">:</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"err\">⊆</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n            <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n            <span class=\"n\">cases</span> <span class=\"n\">hz</span> <span class=\"k\">with</span> <span class=\"n\">hz1</span> <span class=\"n\">hz2</span><span class=\"o\">,</span>\n            <span class=\"n\">split</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">g3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">strict_mono</span><span class=\"bp\">.</span><span class=\"n\">le_iff_le</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n            <span class=\"n\">linarith</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">g3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">strict_mono</span><span class=\"bp\">.</span><span class=\"n\">le_iff_le</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">fin_le_last_val</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"c1\">---- and here?</span>\n            <span class=\"n\">linarith</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">continuous_on</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"n\">hf</span> <span class=\"n\">h02</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- show f (x i) = f (x (i+1))</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hxi</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hxi</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)],</span>\n        <span class=\"c1\">-- this is just normal Rolle, exists_deriv_eq_zero</span>\n    <span class=\"n\">choose</span> <span class=\"n\">xp</span> <span class=\"n\">hxp</span> <span class=\"kn\">using</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">xp</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">hxp</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hi1</span> <span class=\"n\">hi2</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">hxp</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hj1</span> <span class=\"n\">hj2</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">h1</span><span class=\"bp\">|</span><span class=\"n\">h2</span><span class=\"bp\">|</span><span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- case (i+1) &lt; j</span>\n    <span class=\"k\">have</span> <span class=\"n\">hii1</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- case (i+1) = j</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h2</span> <span class=\"n\">at</span> <span class=\"n\">hi2</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- case j &lt; (i+1) is not possible because i &lt; j</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">h3n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n            <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n            <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n            <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_val_of_lt</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">]),</span>\n                <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_val_of_lt</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">])]</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n        <span class=\"k\">have</span> <span class=\"n\">gf1</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h3n</span><span class=\"o\">,</span>\n        <span class=\"c1\">--strange as it looks, linarith still needs this</span>\n        <span class=\"k\">have</span> <span class=\"n\">hijn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hxp</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">((</span><span class=\"n\">hxp</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">g01</span> <span class=\"n\">g02</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">strict_mono</span><span class=\"bp\">.</span><span class=\"n\">le_iff_le</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">((</span><span class=\"n\">hxp</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">g01</span> <span class=\"n\">g02</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">strict_mono</span><span class=\"bp\">.</span><span class=\"n\">le_iff_le</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">fin_le_last_val</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">done</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206737907,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597259693
    },
    {
        "content": "<p>The first one is a coercion between <code>fin</code>s -- that should be fine. In fact I think we could (and perhaps already did) name the <code>&lt;</code>-preserving maps from fin n to fin (n+1).</p>",
        "id": 206739363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597260494
    },
    {
        "content": "<p>I have some fin lemmas written that should help with this. But what's wrong with the first two lemmas? I might just say i.succ instead of i + 1</p>",
        "id": 206739438,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597260550
    },
    {
        "content": "<p>There's also a lemma about lt_last</p>",
        "id": 206739497,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597260590
    },
    {
        "content": "<p><code>last</code> is an OK coercion (I mean, I don't mind coercing <code>n</code> to <code>fin (n+1)</code>) but ideally we should have notation for this. Is <code>fin n</code> a complete lattice for n&gt;0?</p>",
        "id": 206739547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597260603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/fin.20simp.20normal.20form/near/206739497\">said</a>:</p>\n<blockquote>\n<p>There's also a lemma about le_last</p>\n</blockquote>\n<p>Right, but that doesn't immediately help, see above in this thread.</p>",
        "id": 206739589,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597260623
    },
    {
        "content": "<p>Ah, I wrote it out but got distracted by my day job. I'll upload it when I can, sorry</p>",
        "id": 206739641,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597260656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Yes, as I mentioned in the other thread any (nonempty) finite lattice is complete</p>",
        "id": 206739645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597260659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/fin.20simp.20normal.20form/near/206739641\">said</a>:</p>\n<blockquote>\n<p>Ah, I wrote it out but got distracted by my day job. I'll upload it when I can, sorry</p>\n</blockquote>\n<p>I do have a proof, but it's just not immediate. Not in the form I need it.</p>",
        "id": 206739679,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597260685
    },
    {
        "content": "<p>I mean -- is it a lattice? If so, shouldn't we be using <code>\\top</code> for the top element of <code>fin (n+1)</code>?</p>",
        "id": 206739715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597260703
    },
    {
        "content": "<p>any linear order is a lattice, the operations are <code>min</code> and <code>max</code></p>",
        "id": 206739781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597260724
    },
    {
        "content": "<p>sure, that works for me</p>",
        "id": 206739810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597260743
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_top</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206739849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597260764
    },
    {
        "content": "<p>When I said it is a complete lattice, I mean mathematically</p>",
        "id": 206739902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597260793
    },
    {
        "content": "<p>the instance isn't registered</p>",
        "id": 206739916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597260804
    },
    {
        "content": "<p>It is a bit sad that we use <code>\\top</code> instead of a variant on <code>n</code> though (which is definitely what the books will use)</p>",
        "id": 206740034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597260848
    },
    {
        "content": "<p>In my model of <code>fin n</code>, <code>fin_lt_succ</code> should be the statement that <code>delta^{n,0} x &lt; delta^{n,n} x</code></p>",
        "id": 206740058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597260862
    },
    {
        "content": "<p>where <code>delta^{n+1,i}</code> is the map from fin n to fin (n+1) which misses i</p>",
        "id": 206740130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597260910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/fin.20simp.20normal.20form/near/206740034\">said</a>:</p>\n<blockquote>\n<p>It is a bit sad that we use <code>\\top</code> instead of a variant on <code>n</code> though (which is definitely what the books will use)</p>\n</blockquote>\n<p>this is fixed if we write <code>T : nat</code> and <code>fin (T + 1)</code></p>",
        "id": 206740279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597260988
    },
    {
        "content": "<p>What I want to argue is that all the mess which people are getting into using + (and note that it's just things like +1, it's not + in general) could perhaps be fixed if people were to just treat these things as finite total orders and use the standard convention for maps between them and their API.</p>",
        "id": 206740283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597260988
    },
    {
        "content": "<p>then the first lemma would be in the API and the second would just be le_top.</p>",
        "id": 206740398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597261043
    },
    {
        "content": "<p>The trouble is if the coercion exists then people will use it, either because they don't know better or unintentionally even if they do</p>",
        "id": 206740413,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597261053
    },
    {
        "content": "<p>If we remove <code>add</code> from <code>fin</code> then the coercion goes too, right?</p>",
        "id": 206740508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597261087
    },
    {
        "content": "<p>If you're \"in the <code>fin</code> zone\" and acutely aware of this issue it's not hard to avoid it</p>",
        "id": 206740521,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597261100
    },
    {
        "content": "<p>Yes but that will apparently break numeric literals too</p>",
        "id": 206740547,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597261114
    },
    {
        "content": "<p>at least all the ones starting from 2</p>",
        "id": 206740564,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597261122
    },
    {
        "content": "<p>Well maybe we should be encouraging people to think about <code>fin n</code> more like this</p>",
        "id": 206740618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597261149
    },
    {
        "content": "<p>I never count that high anyway</p>",
        "id": 206740620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597261150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/fin.20simp.20normal.20form/near/206740521\">said</a>:</p>\n<blockquote>\n<p>If you're \"in the <code>fin</code> zone\" and acutely aware of this issue it's not hard to avoid it</p>\n</blockquote>\n<p>You mean <code>cast_succ</code> and the like?</p>",
        "id": 206740649,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597261164
    },
    {
        "content": "<p>Yes, I rarely get to 2</p>",
        "id": 206740659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597261172
    },
    {
        "content": "<p>You have to be alert to the possibility of Lean interpreting what you write as a coercion, and then use all the methods documented at the top of <code>data.fin</code> to avoid it happening.</p>",
        "id": 206740831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597261257
    },
    {
        "content": "<p>I mean the other option is to add much better support for reasoning about the coercions somehow.</p>",
        "id": 206741014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597261352
    },
    {
        "content": "<p>actually I just looked at some of my papers and I get to 2 quite a lot, but I rarely get to 3</p>",
        "id": 206741050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597261379
    },
    {
        "content": "<p><a href=\"https://arxiv.org/abs/0810.2106\">https://arxiv.org/abs/0810.2106</a></p>",
        "id": 206741089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597261401
    },
    {
        "content": "<p>Q: What does a number theorist call a number greater than 2?</p>",
        "id": 206741103,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597261407
    },
    {
        "content": "<p>I give an example which shows the theory is nonempty, which uses sqrt(29) and 3, but other than that it's all 0,1,2.</p>",
        "id": 206741141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597261425
    },
    {
        "content": "<p>\"many\"</p>",
        "id": 206741155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597261435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/fin.20simp.20normal.20form/near/206741050\">said</a>:</p>\n<blockquote>\n<p>actually I just looked at some of my papers and I get to 2 quite a lot, but I rarely get to 3</p>\n</blockquote>\n<p>I did get to 2 but that was it, not 3.</p>",
        "id": 206741160,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597261438
    },
    {
        "content": "<p>A: Odd</p>",
        "id": 206741161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597261439
    },
    {
        "content": "<p>I think of the coercion from <code>nat</code> to <code>fin</code> as like all the cases where a partial function is given some default value to make it a total function: I can convert a <code>nat</code> value to <code>fin (n + 1)</code> whenever convenient and supply the proof that the <code>nat</code> value was within range for the conversion some time later when I need to use that fact. On the other hand, the proof I did using that approach (for an olympiad problem about a 2019 × 2019 grid, which I represented as <code>fin 2019 × fin 2019</code>) ended up as over 3000 lines of Lean for a problem that's pretty easy mathematically, so this doesn't provide much evidence that that approach is useful. (With hindsight I suspect it would have been easier to work with <code>ℕ × ℕ</code> or <code>ℤ × ℤ</code> and avoid <code>fin 2019</code> completely.)</p>",
        "id": 206745152,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1597263265
    },
    {
        "content": "<p>When I need to do that sort of thing, I will use a local notation like <code>#n</code> that calls <code>fin.mk</code> with <code>norm_num</code> or something producing the proof</p>",
        "id": 206745588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597263432
    },
    {
        "content": "<p>Right, this is similar to <code>nat</code> subtraction</p>",
        "id": 206745652,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597263469
    },
    {
        "content": "<p>My view is that you're generally in a better position to explain why the <code>fin</code> value is sensible (i.e. has the expected property, in this case that its <code>val</code> equals the thing you put in) when you build it than when you want to reason about it later on. But this is to an extent contingent on how good our automation is at proving obvious facts.</p>",
        "id": 206745949,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597263590
    },
    {
        "content": "<p>The nice thing about the local notation is that you can tailor the proof method to the use case</p>",
        "id": 206746075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597263633
    },
    {
        "content": "<p>The values being converted weren't constants. The proofs typically ended up being <code>linarith</code>, but after some preparation (e.g. various parts of the argument involved cases based on parity) - or there was a definition involving conversion to <code>fin</code>, that was only used in proofs where the conversion was legitimate. Type class inference became happier once I switched from literal <code>fin 2019</code> to more general <code>fin (n + 1)</code>, I think before that it kept having to do kernel reduction to show 2019 is <code>succ 2018</code> in order to deduce <code>has_zero (fin 2019)</code> and similar.</p>",
        "id": 206746351,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1597263750
    },
    {
        "content": "<p>Didn't we once discover there's a special case for treating <code>nat</code> <code>+</code> specifically in instance search?</p>",
        "id": 206746526,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597263827
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1024</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1025</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 206746897,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1597263997
    },
    {
        "content": "<p><code>local notation `2019` := 2018 + 1</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 206747002,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597264056
    },
    {
        "content": "<p>It's a bit0 and bit1 issue?</p>",
        "id": 206754142,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597267456
    },
    {
        "content": "<p>Some work: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_succ_eq_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_veq</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_val</span><span class=\"o\">,</span> <span class=\"n\">coe_coe</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_coe_of_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_lt_add_right</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">is_lt</span> <span class=\"mi\">1</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_eq_cast_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_le</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_lt</span><span class=\"o\">],</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_veq</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_val_of_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">val_coe_eq_self</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_eq_cast_succ</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 206763616,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597273563
    },
    {
        "content": "<p>Could those be in the direction of simp normal form?</p>",
        "id": 206763655,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597273601
    },
    {
        "content": "<p>If you inspect my original messages closely you will find they have nothing to do with this coercion <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 206765129,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597274745
    },
    {
        "content": "<p>Ah, but could be useful for the rolle theorem one</p>",
        "id": 206768793,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597277538
    },
    {
        "content": "<p>There are other ones cooking regarding addition of one</p>",
        "id": 206768836,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597277584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/fin.20simp.20normal.20form/near/206768793\">said</a>:</p>\n<blockquote>\n<p>Ah, but could be useful for the rolle theorem one</p>\n</blockquote>\n<p>Thanks Yakov. I do have all I need there. What I meant was that some of these results might be nice in the <code>fin</code> API in <code>mathlib</code>.</p>",
        "id": 206769061,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597277843
    },
    {
        "content": "<p>Sure thing. A general question then is whether the lemmas above should be simp lemmas.</p>",
        "id": 206769279,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597278081
    },
    {
        "content": "<p>I think that addition of 1 on <code>fin</code> should be avoided to the extent that anything simplifying it to the sensible functions which have been set up us a great idea. On the other hand I think that users should think very hard before using addition in any way. There are functions for adding one and adding things bigger than one should be undefined unless you're adding a and moving from fin n to fin (n+a).</p>",
        "id": 206786092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597302278
    },
    {
        "content": "<p>I agree, but let me add that heavy use cases (like Yakov's and, admittedly to a lesser extent, mine) suggest that the functions that are available in <code>data.fin</code> are not  enough of an API yet. So I strongly advocate that this API be augmented.<br>\nThis discussion might be veering away from Reid's initial post...</p>",
        "id": 206806963,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597320636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I would prefer to have the coercion as simp normal form.</p>",
        "id": 206919123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597403904
    },
    {
        "content": "<p>I'm dealing with <code>fin 3 → α</code> and <code>fin 4 → α</code>. While the most natural way to write arguments is <code>(f : fin 3 → α) 1</code>, <code>fin_cases</code> generates cases <code>⟨0, _⟩</code> etc, and <code>simp</code> doesn't convert in either direction.</p>",
        "id": 207742338,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1598130598
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3769\">#3769</a> will simp to 0 and 1 iirc</p>",
        "id": 207750237,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598146221
    },
    {
        "content": "<p>Which lemma in <a href=\"https://github.com/leanprover-community/mathlib/issues/3769\">#3769</a>?</p>",
        "id": 207750868,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1598147603
    },
    {
        "content": "<p>I see that it'll work with <code>0</code> and <code>1</code> but I'm interested in <code>2</code> and <code>3</code> as well. Something like <code>mk_bit0</code>/<code>mk_bit1</code>?</p>",
        "id": 207750923,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1598147693
    },
    {
        "content": "<p>It's mk_zero_eq_zero I think</p>",
        "id": 207752017,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598149917
    },
    {
        "content": "<p>I've played around with bit0 and bit1 lemmas but it gets complicated with the modular math</p>",
        "id": 207752058,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598149939
    },
    {
        "content": "<p>And guessing which fin n you're working in.</p>",
        "id": 207752068,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598149964
    },
    {
        "content": "<p>Works for me:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mk_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_succ</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mk_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_of_veq</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_eq_of_lt</span> <span class=\"n\">hn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mk_bit0</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bit0</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_of_veq</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_eq_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mk_bit1</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">bit1</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">bit1</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_right</span> <span class=\"n\">m</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span>\n    <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">bit0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">val_add</span><span class=\"o\">,</span> <span class=\"n\">one_val</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mod</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_eq_of_lt</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207753986,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1598153546
    }
]