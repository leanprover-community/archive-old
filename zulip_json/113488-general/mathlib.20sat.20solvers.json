[
    {
        "content": "<p>With <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's <a href=\"https://github.com/leanprover-community/mathlib/pull/10744\">#10744</a> there are at least 3 SAT+ tactics in mathlib.</p>\n<ul>\n<li><code>itauto</code> is intuitionistic; <code>itauto!</code> is complete for classical prop logic</li>\n<li><code>tauto</code> and <code>tauto!</code> both exist. I think it's been claimed that <code>tauto!</code> is complete for classical prop logic. <code>tauto</code> is not intuitionistic but is weaker than <code>tauto!</code>. It seems to have some support for equality, and perhaps some basic first order reasoning/heuristic instantiation? There's no module doc and the tactic doc doesn't seem complete.</li>\n<li><code>finish</code> and friends are classical. <del>I think (but am not sure) that <code>finish</code> is complete.</del> <code>finish</code> is not complete. At a high level they claim to do the same as what <code>tauto</code> does, but explicitly say that they use the SMT state for e-matching and congruence closure.</li>\n</ul>",
        "id": 264750384,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639420349
    },
    {
        "content": "<p>I think this is a confusing zoo of options. One move that I think is a strict improvement: kill <code>tauto</code> and rename <code>tauto!</code> to <code>tauto</code>.</p>",
        "id": 264750392,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639420353
    },
    {
        "content": "<p><code>itauto!</code> is a doubly confusing name, since it's neither <code>i</code> nor <code>tauto</code> (if we keep <code>tauto(!)</code> around).</p>",
        "id": 264750497,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639420399
    },
    {
        "content": "<p>Depending on what <code>tauto</code> actually does beyond prop logic, we could delete it and rename <code>itauto!</code> to <code>tauto</code>. (We should check performance of course.) But I suspect it does enough extra, whether intentionally or as a side effect, that this isn't an easy drop-in replacement.</p>",
        "id": 264750779,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639420522
    },
    {
        "content": "<p><code>itauto</code> looks like the cleanest implementation and should be the easiest to port to Lean 4.</p>",
        "id": 264750983,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639420624
    },
    {
        "content": "<p>Correction, <code>finish</code> is not complete:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.finish</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span>\n</code></pre></div>",
        "id": 264751899,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639421065
    },
    {
        "content": "<p><code>finish</code> has better first-order support than <code>tauto</code>, although both do some:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span> <span class=\"c1\">-- both work</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span> <span class=\"c1\">-- only finish works</span>\n</code></pre></div>",
        "id": 264752254,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639421283
    },
    {
        "content": "<p>In my experience <code>tauto</code> is a <em>lot</em> faster than <code>finish</code>.</p>",
        "id": 264752347,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639421323
    },
    {
        "content": "<p><code>finish</code> should be complete for classical propositional logic, but for equality and quantifier instantiation, it is only heuristic.</p>",
        "id": 264760077,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1639424976
    },
    {
        "content": "<p>Oops, I take it back. I think the issue is with the <code>iff</code>: by default, it is not expanded. I think adding <code>iff_def</code> should work. Hold on, I'll check.</p>",
        "id": 264761004,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1639425393
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.finish</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">iff_def</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>My vague memory is that <code>finish</code> doesn't expand <code>iff</code> because that could blow up goals painfully, but if you do expand them, it should be complete for propositional formulas that use it.</p>",
        "id": 264761374,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1639425538
    },
    {
        "content": "<p>Indeed, <code>finish</code> with <code>[iff_def]</code> added when needed solves every goal in the <code>tauto</code> test suite except <code>example (p q r : Prop) (h : ¬ p = q) (h' : r = q) : p ↔ ¬ r</code>, where there seems to be a <code>simp</code> loop but <code>simp [iff_def]; finish</code> works.</p>",
        "id": 264766162,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639427612
    },
    {
        "content": "<p>I suspect that most of the slowdown from <code>finish</code> is in ematching. In the <code>tauto</code> test suite, setting <code>max_ematch_rounds = 0</code>, <code>finish</code> still solves everything except one, which it solves with <code>max_ematch_rounds = 1</code>.</p>",
        "id": 264766581,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639427859
    },
    {
        "content": "<p>In fact, on the <code>tauto</code> tests, <code>finish</code> is faster even without changing <code>max_ematch_rounds</code>.</p>",
        "id": 264766817,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639427983
    },
    {
        "content": "<p>I'm harping on this for a few reasons. One, it's confusing right now which tactics do what with what performance profile. Two, some of this will need to get ported, and we should avoid duplicated effort.</p>",
        "id": 264767352,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639428244
    },
    {
        "content": "<p>I think that if you're porting you get to choose your favorite tactic.</p>",
        "id": 264767462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639428307
    },
    {
        "content": "<p>Is there real hope for porting <code>finish</code>? If it's sat + cc/e-matching, it can't be ported until (unless) cc/e-matching is. And then it might be better re-implemented on top of <code>itauto!</code> instead of its own sat solver</p>",
        "id": 264767606,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639428367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20sat.20solvers/near/264767462\">said</a>:</p>\n<blockquote>\n<p>I think that if you're porting you get to choose your favorite tactic.</p>\n</blockquote>\n<p>But if all are used on mathlib now, it would be nice to have drop in Lean 4 replacements. Alternatively (what I'm getting at) we should eliminate usages of some variants in mathlib.</p>",
        "id": 264767749,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639428451
    },
    {
        "content": "<p>I'm pretty sure we could remove uses of <code>finish</code> rather easily</p>",
        "id": 264768159,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639428658
    },
    {
        "content": "<p>At a very rough count I see ~100 uses of <code>finish</code> in mathlib and spot-checking them, <code>tauto!</code> isn't a drop-in replacement. My two reasons for harping on this conflict here. It would be easier to eliminate <code>tauto</code> with <code>itauto!</code> and <code>finish</code> than it would be to eliminate <code>finish</code>. But <code>finish</code> is the hardest one to port.</p>",
        "id": 264771074,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639430196
    },
    {
        "content": "<p>Personally, I'd rather not port finish if we can avoid it.  Certainly not as a propositional prover (where you don't want to do anything beyond propositional logic so that you get good error messages).  Jannis' aesop prover (<a href=\"https://github.com/JLimperg/aesop\">https://github.com/JLimperg/aesop</a>) aims to do what auto does in Isabelle, which is much more useful for general automation in my eyes.</p>",
        "id": 264773126,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639431298
    },
    {
        "content": "<p>I'm sure we can run a \"finish <code>finish</code> challenge\" and remove <code>finish</code> from mathlib in a couple of days at most. And I don't think Jeremy will complains at all, <code>finish</code> was explicitly an experiment.</p>",
        "id": 264773294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639431392
    },
    {
        "content": "<p>I hadn't seen Jannis' repo yet! That's great</p>",
        "id": 264773366,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639431453
    },
    {
        "content": "<p>I suspect that would be close to a drop-in replacement for both <code>finish</code> and <code>tauto</code> in Lean 4.</p>",
        "id": 264773457,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639431489
    },
    {
        "content": "<p>I also just poked around some of the mathlib <code>tauto</code> uses, and while <code>finish {use_simp := ff, max_ematch_rounds := 0}</code> is a drop-in replacement, it's still much slower -- the bottleneck seems to be creating the SMT state in the first place.</p>",
        "id": 264773966,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639431774
    },
    {
        "content": "<p>Which makes my proposal the following:</p>\n<ul>\n<li>merge <a href=\"https://github.com/leanprover-community/mathlib/pull/10744\">#10744</a></li>\n<li>replace all non-first-order uses of old <code>tauto(!)</code> with <code>itauto(!)</code>, pending a comparison of the performance</li>\n<li>replace all non-first-order uses of <code>finish</code> with <code>itauto!</code></li>\n<li>replace all remaining uses of <code>finish</code> however possible</li>\n<li>delete <code>tauto</code>; rename <code>tauto!</code> to something else that makes the first-orderness explicit</li>\n<li>rename <code>itauto!</code> to <code>tauto</code></li>\n</ul>",
        "id": 264774697,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639432143
    },
    {
        "content": "<p>Porting <code>itauto</code> should be easy. We can figure out what to do with the remaining <code>tauto-fo</code> calls later, depending on how Jannis' work progresses</p>",
        "id": 264774997,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639432278
    },
    {
        "content": "<p>What does that mean for <a href=\"https://github.com/leanprover-community/mathlib/pull/1083\">#1083</a>?</p>",
        "id": 264775050,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639432312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20sat.20solvers/near/264775050\">said</a>:</p>\n<blockquote>\n<p>What does that mean for <a href=\"https://github.com/leanprover-community/mathlib/pull/1083\">#1083</a>?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/1083\">#1083</a> is long dead. Anyone is welcome to revive this kind of work in Lean 4, but given the dependence on external tools, I don't think it's relevant here.</p>",
        "id": 264775271,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639432418
    },
    {
        "content": "<p><code>itauto</code> is epsilon slower than <code>tauto</code> on the <code>tauto</code> tests solved by both, and significantly faster on the <code>itauto</code> tests solved by both.</p>",
        "id": 264776892,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639433069
    },
    {
        "content": "<p>But the <code>tauto</code> test suite isn't large.</p>",
        "id": 264776932,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639433087
    },
    {
        "content": "<p>for the last few lines of the proposal, I guess you mean we now want <code>itauto!</code> = <code>tauto</code>, and <code>itauto</code> stays the same, instead of keeping <code>tauto!</code> too?</p>",
        "id": 264776936,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639433091
    },
    {
        "content": "<p>otherwise I totally agree in general. <code>finish</code> also always had the disadvantage of being a black box, so if it needed speeding up it couldn't be aided like <code>tidy</code> did</p>",
        "id": 264777004,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639433124
    },
    {
        "content": "<p>I want:<br>\n<code>tauto</code> -&gt; nothing<br>\n<code>tauto!</code> -&gt; <code>first_order_something</code><br>\n<code>itauto</code> -&gt; <code>itauto</code><br>\n<code>itauto!</code> -&gt; <code>tauto</code></p>",
        "id": 264777254,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639433233
    },
    {
        "content": "<p>Current <code>tauto!</code> is stronger than <code>itauto!</code>, so I don't want to remove it.</p>",
        "id": 264777290,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639433250
    },
    {
        "content": "<p>I also don't want to delete the <code>finish</code> tactic, just remove/ban its use in mathlib</p>",
        "id": 264777527,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639433349
    },
    {
        "content": "<p>Where as <code>tauto</code> (non-<code>!</code>) can be deleted. It's neither intuitionistic nor complete, I think it has no advantage over <code>tauto!</code></p>",
        "id": 264777703,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639433411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20sat.20solvers/near/264775271\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20sat.20solvers/near/264775050\">said</a>:</p>\n<blockquote>\n<p>What does that mean for <a href=\"https://github.com/leanprover-community/mathlib/pull/1083\">#1083</a>?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/1083\">#1083</a> is long dead. Anyone is welcome to revive this kind of work in Lean 4, but given the dependence on external tools, I don't think it's relevant here.</p>\n</blockquote>\n<p>Wow, I think that an interface with Vampire would make for a cool Lean 4 package, at the very least</p>",
        "id": 264778245,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639433668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> and <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> (and others?) have done the hookup in one direction, although I don't think they reconstruct Vampire proofs in Lean? <a href=\"https://arxiv.org/abs/2112.02142\">https://arxiv.org/abs/2112.02142</a></p>",
        "id": 264779025,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639433934
    },
    {
        "content": "<p>(To be fair, most of the work in <a href=\"https://github.com/leanprover-community/mathlib/pull/1083\">#1083</a> was in the reconstruction)</p>",
        "id": 264779234,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639434037
    },
    {
        "content": "<p>We have a simple language of propositional formulas which can be sent to Vampire, but yes, unfortunately reconstructing proofs is the hard part which we do not do. We also don't have a connection to <code>Expr</code>.</p>",
        "id": 264779347,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1639434109
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/1083\">#1083</a> has ~5k lines added (idk how many of them were automatically generated). But it would be a bit sad to lose so much work</p>",
        "id": 264780449,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639434718
    },
    {
        "content": "<p>It's entirely undocumented. I have no objection to merging it once it's mathlib-ready. But it doesn't sound like Seul is interested in returning to it.</p>",
        "id": 264781696,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639435460
    },
    {
        "content": "<p>I had a tiny bit of <code>finish</code>-removal in an old branch, so I pushed it to <a href=\"https://github.com/leanprover-community/mathlib/compare/finish-finish\">https://github.com/leanprover-community/mathlib/compare/finish-finish</a> in case it ends up being useful</p>",
        "id": 264781793,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639435521
    },
    {
        "content": "<p>This may have been discussed before - are there attempts to interface (in Lean 4) with the TPTP language for FOL and SMT-lib for SMT problems to then call external solvers (such an interface avoids committing to a specific solver)?</p>\n<p>Thanks</p>",
        "id": 264836481,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1639477483
    },
    {
        "content": "<p>I was working on something like that for Lean 3: <a href=\"https://gebner.org/pdfs/2020-01-08_fomm20_leanhammer.pdf\">https://gebner.org/pdfs/2020-01-08_fomm20_leanhammer.pdf</a>  I hope I'll get back to it at some point.</p>",
        "id": 264836809,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639477663
    },
    {
        "content": "<p>Sorry to be slow to respond. I just got back from a few days visiting my mother in NY. <code>finish</code> was an attempt to do something like Isabelle's <code>auto</code>, and most of the uses in mathlib date back to the very early days, when I was testing it out to see how far it would get. I gave up on it when I decided that it was too limited and there wasn't a way to do what I wanted without having write a lot of code in C++. I am pleased that people have found it useful over the years, but I won't be sorry to see it go. I am counting on Jannis to do it right in Lean 4!</p>",
        "id": 264941421,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1639523509
    },
    {
        "content": "<p>The Vampire connection is fun to play with, but it's not used to construct Lean theorems. I also very much hope that Gabriel will work on this at some point. It will be great to have Isabelle-like automation in Lean.</p>",
        "id": 264942220,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1639523711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20sat.20solvers/near/264773457\">said</a>:</p>\n<blockquote>\n<p>I suspect [Aesop] would be close to a drop-in replacement for both <code>finish</code> and <code>tauto</code> in Lean 4.</p>\n</blockquote>\n<p>Parity with <code>tauto</code> should be no big problem. In fact, Aesop already does most of the things that <code>tauto</code> does (judging by the doc string and modulo Aesop bugs). For parity with <code>finish</code>, I still need to decide what to do with equations that aren't naturally handled by <code>simp</code>. But that's definitely happening at some point.</p>",
        "id": 264998118,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1639569115
    },
    {
        "content": "<p>I've made a start on finishing <code>finish</code> by finding and replacing it in <code>computability/regular_expressions</code> <a href=\"https://github.com/leanprover-community/mathlib/pull/10811\">#10811</a></p>",
        "id": 265017407,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639578510
    },
    {
        "content": "<p>+1 for the \"start on finishing\" <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 265020081,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1639579710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20sat.20solvers/near/264774697\">said</a>:</p>\n<blockquote>\n<p>Which makes my proposal the following:</p>\n<ul>\n<li>merge <a href=\"https://github.com/leanprover-community/mathlib/pull/10744\">#10744</a></li>\n<li>replace all non-first-order uses of old <code>tauto(!)</code> with <code>itauto(!)</code>, pending a comparison of the performance</li>\n<li>replace all non-first-order uses of <code>finish</code> with <code>itauto!</code></li>\n<li>replace all remaining uses of <code>finish</code> however possible</li>\n<li>delete <code>tauto</code>; rename <code>tauto!</code> to something else that makes the first-orderness explicit</li>\n<li>rename <code>itauto!</code> to <code>tauto</code></li>\n</ul>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and any others who might have opinions here: do you agree with this plan?</p>",
        "id": 265029044,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639583302
    },
    {
        "content": "<p>And what should we rename <code>tauto!</code> to?</p>",
        "id": 265029078,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639583315
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 265029879,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639583588
    },
    {
        "content": "<p><code>itauto!</code> has more in common with <code>itauto</code> than <code>tauto</code> though</p>",
        "id": 265030017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639583641
    },
    {
        "content": "<p>But <code>itauto!</code> is a classical solver, so the <code>i</code> is misleading</p>",
        "id": 265030255,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639583724
    },
    {
        "content": "<p>I'm aware of that, but I'd rather rename <code>itauto</code> in both forms for that</p>",
        "id": 265030431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639583767
    },
    {
        "content": "<p>It is still basically an intuitionistic prover, it's not a classical sat solver even with the <code>!</code></p>",
        "id": 265030505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639583795
    },
    {
        "content": "<p>But it proves all classical tautologies, right?  So <code>tauto</code> is a good name.</p>",
        "id": 265030571,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639583821
    },
    {
        "content": "<p>Suppose we added a more standard sat solver that also proves all classical tautologies. What would you call it?</p>",
        "id": 265030706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639583880
    },
    {
        "content": "<p>Probably <code>cdcl</code>.</p>",
        "id": 265030775,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639583893
    },
    {
        "content": "<p>then maybe we should call this one <code>ljt</code></p>",
        "id": 265030808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639583906
    },
    {
        "content": "<p>Or <code>sat</code>.</p>",
        "id": 265030816,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639583909
    },
    {
        "content": "<p>I'm not against <code>ljt</code>, but we should mention \"tautology\" in the docstring.</p>",
        "id": 265030902,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639583947
    },
    {
        "content": "<blockquote>\n<p>And what should we rename <code>tauto!</code> to?</p>\n</blockquote>\n<p>Do you know what <code>tauto!</code> does exactly (in addition to classical tautologies)?</p>",
        "id": 265031084,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639584016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20sat.20solvers/near/265031084\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>And what should we rename <code>tauto!</code> to?</p>\n</blockquote>\n<p>Do you know what <code>tauto!</code> does exactly (in addition to classical tautologies)?</p>\n</blockquote>\n<p>Nope. The <code>tauto</code> docs aren't very detailed and it definitely does things that aren't described.</p>",
        "id": 265031540,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639584184
    },
    {
        "content": "<p>I just noticed that <code>itauto</code> lacks a key feature of <code>tauto</code>: countermodels.  So that's a significant regression if we replace <code>tauto</code> by <code>itauto</code>.  When <code>itauto</code> fails, it gives you zero information on why.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.tauto</span> <span class=\"n\">tactic.itauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span> <span class=\"c1\">-- tells you that h : a ⊢ b is not provable</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">itauto</span>\n</code></pre></div>",
        "id": 265031550,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639584190
    },
    {
        "content": "<p>not least because intuitionistic countermodels are hard</p>",
        "id": 265031733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639584255
    },
    {
        "content": "<p>but if you think it will be useful, I can make the failure case more informative</p>",
        "id": 265031845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639584296
    },
    {
        "content": "<p>In intuitionistic logic, you can still return an unprovable sequent.</p>",
        "id": 265031856,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639584300
    },
    {
        "content": "<p>in general there are a bunch of failed searches that contribute to the failure, the easy thing will only report the last failure</p>",
        "id": 265031934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639584338
    },
    {
        "content": "<p>And I think <code>tauto</code>'s countermodels are only vaguely present. Like, you could interpret this as a countermodel but it's really not clear.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 265031962,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639584349
    },
    {
        "content": "<p>It tells you that it can't prove <code>⊢ a</code>, so <code>{a ↦ false}</code> is a countermodel.</p>",
        "id": 265032153,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639584420
    },
    {
        "content": "<blockquote>\n<p>Mario Carneiro: in general there are a bunch of failed searches that contribute to the failure, the easy thing will only report the last failure</p>\n</blockquote>\n<p>What I meant is that you can return the last sequent after applying the invertible rules.  This sequent won't contain any top-level connectives except implication/not on the left, if that makes it clearer.</p>",
        "id": 265032407,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639584514
    },
    {
        "content": "<p><code>cdcl</code> and <code>ljt</code> are mysterioglyphs to me. I would much prefer <code>tauto</code>.</p>",
        "id": 265032787,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639584669
    },
    {
        "content": "<p>Would it be better to have <code>itauto {classical := tt}</code>?</p>",
        "id": 265033058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639584792
    },
    {
        "content": "<p>I strongly prefer <code>tauto</code> over that.</p>",
        "id": 265033232,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639584845
    },
    {
        "content": "<p>Either name it by the calculus, or by the class of goals it solves.</p>",
        "id": 265033280,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639584870
    },
    {
        "content": "<p>The fact that <code>ljt</code> doesn't \"mean anything\" isn't necessarily an issue; tactics are really just \"names\" that you have to learn</p>",
        "id": 265033288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639584873
    },
    {
        "content": "<p>like, you would be just as hard pressed to guess what <code>lia</code> or <code>micromega</code> do</p>",
        "id": 265033715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639585006
    },
    {
        "content": "<p>on second thought, I think that <code>classical; itauto</code> ends up doing essentially the same thing as <code>itauto!</code>, so maybe it's not needed</p>",
        "id": 265034054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639585121
    },
    {
        "content": "<p>Even if it does the same, we should have a <code>tauto</code> alias for it.</p>",
        "id": 265034160,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639585156
    },
    {
        "content": "<p>assuming that we can find the existing name-squatter a better home</p>",
        "id": 265034366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639585234
    },
    {
        "content": "<p>My general understanding of <code>tauto</code> is that it does <code>solve_by_elim</code> and <code>casesm [/\\, \\/]</code></p>",
        "id": 265034452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639585273
    },
    {
        "content": "<p>From my cursory reading of the <code>tauto</code> source code it does tautology + exists.intro + exists.cases_on + @[symm].</p>",
        "id": 265035545,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639585713
    },
    {
        "content": "<p>With some kind of handling of equality too</p>",
        "id": 265035585,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639585735
    },
    {
        "content": "<p>Mmmh, apparently it also applies @[symm] lemmas in some way that I don't understand.</p>",
        "id": 265036002,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639585911
    },
    {
        "content": "<p>What about <code>tauto!</code> -&gt; <code>auto</code>? Isabelle's <code>auto</code> is much different, but the general idea (logic + heuristics) is similar, and it's only a one character change</p>",
        "id": 265041292,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639587983
    },
    {
        "content": "<p>It's hard to name it by the calculus or class of goals it solves if neither is specified</p>",
        "id": 265041412,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639588036
    },
    {
        "content": "<p>No no no.</p>",
        "id": 265041430,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639588043
    },
    {
        "content": "<p>Isabelle's auto is something completely different.</p>",
        "id": 265041475,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639588059
    },
    {
        "content": "<p>How about <code>tauto+</code> or <code>tauto_plus</code>?</p>",
        "id": 265041627,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639588110
    },
    {
        "content": "<p>I don't like the idea of <code>tauto</code> and <code>tauto+</code> having completely different implementations</p>",
        "id": 265041783,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639588184
    },
    {
        "content": "<p><code>tauto_plus</code> feels slightly better</p>",
        "id": 265041802,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639588194
    },
    {
        "content": "<p>I prefer <code>tauto_plus</code>; I would reserve character sigils for option changes rather than implementation changes</p>",
        "id": 265041812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639588197
    },
    {
        "content": "<p>(same reason I'm kind of okay with <code>itauto!</code> even though two of the characters are in direct conflict with each other)</p>",
        "id": 265041942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639588240
    },
    {
        "content": "<p><code>etauto</code> for extended?</p>",
        "id": 265042109,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639588317
    },
    {
        "content": "<p>Not sure how confusing it is that the <code>e</code> prefix is used already in <code>eapply</code>...</p>",
        "id": 265042279,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639588377
    },
    {
        "content": "<p>Is there any problem that might arise from this recycling of names, having some of the tactics shift “one chair to the left”? In the very short term it might be tricky to remember what does what, if you’re used to the old names. Are there other problems that might arise (e.g. documentation pertaining to previous versions of mathlib become more confusing)? Is there an argument for just choosing brand new names that don’t collide with the names currently in use?</p>",
        "id": 265042553,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639588483
    },
    {
        "content": "<p>mathlib has zero backward compatibility, so that's not really a concern. If it was difficult to change all existing uses it might be an issue, but for name changes like this it is not difficult.</p>",
        "id": 265043301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639588803
    },
    {
        "content": "<p>I think for the most part people just try to speak the magic words and see if it solves the goal, in which case it doesn't matter even if the names switch around if your goal is still solved</p>",
        "id": 265043605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639588930
    },
    {
        "content": "<p>If it's a big worry we could acknowledge the change in the error messages for a bit</p>",
        "id": 265050344,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639591582
    },
    {
        "content": "<p>There are 100 uses of <code>tauto</code> that can be replaced with <code>itauto</code>, 3 with <code>itauto!</code>, and 122 that can't be replaced with either. Unfortunately this experiment pointed out that <code>itauto</code> doesn't scale as well as <code>tauto</code>. The diff shows a handful of places where <code>tauto</code> worked but <code>itauto</code> times out, generally (always?) because there's too much in the context. <a href=\"https://github.com/leanprover-community/mathlib/compare/tauto-to-itauto\">https://github.com/leanprover-community/mathlib/compare/tauto-to-itauto</a></p>",
        "id": 265300739,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639750701
    },
    {
        "content": "<p>Could you extract some stress tests?</p>",
        "id": 265354286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639771713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20sat.20solvers/near/265017407\">said</a>:</p>\n<blockquote>\n<p>I've made a start on finishing <code>finish</code> by finding and replacing it in <code>computability/regular_expressions</code> <a href=\"https://github.com/leanprover-community/mathlib/pull/10811\">#10811</a></p>\n</blockquote>\n<p>I think my most recent PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/11136\">#11136</a>) eliminates the last few instances of <code>finish</code> in the main body of mathlib.  The only remaining (non-commented) instances of the string \"finish\" that I could find are in the <code>scripts</code>, <code>test</code>, <code>tactic</code>, and <code>archive</code> folders, which I haven't touched.</p>\n<p>I have five other open PRs (<a href=\"https://github.com/leanprover-community/mathlib/pull/11099\">#11099</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/11103\">#11103</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/11126\">#11126</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/11130\">#11130</a>, and <a href=\"https://github.com/leanprover-community/mathlib/pull/11133\">#11133</a>), if anyone's interested in hastening the finish of the \"finish <code>finish</code>\" project. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 266372372,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640806198
    },
    {
        "content": "<p>Thanks for all your efforts!</p>",
        "id": 266373990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640807794
    },
    {
        "content": "<p>It's been a really rewarding random tour of the library!  I've worked on a lot of files that I might never have looked at otherwise.</p>",
        "id": 266375098,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640808856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20sat.20solvers/near/265017407\">said</a>:</p>\n<blockquote>\n<p>I have five other open PRs (<a href=\"https://github.com/leanprover-community/mathlib/pull/11099\">#11099</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/11103\">#11103</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/11126\">#11126</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/11130\">#11130</a>, and <a href=\"https://github.com/leanprover-community/mathlib/pull/11133\">#11133</a>), if anyone's interested in hastening the finish of the \"finish <code>finish</code>\" project. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n</blockquote>\n<p>I'm on it.</p>",
        "id": 266376128,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640809858
    },
    {
        "content": "<p>All 5 PRs are now in bors's queue.</p>",
        "id": 266380185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640813212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> have you seen that?</p>",
        "id": 266380238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640813281
    },
    {
        "content": "<p>Fantastic, thank you!</p>",
        "id": 266381108,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640814067
    },
    {
        "content": "<p>Stuart, if you are curious you can have a look at how I simplified many cases. It's not the most interesting part of Lean, but you often learn stuff by seeing code simplification.</p>",
        "id": 266381465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640814436
    },
    {
        "content": "<p>Thanks very much, I've just skimmed through the changes you've made and already seen that you've made a lot of improvements that I should learn from.  I'll take a proper look over them tomorrow.</p>",
        "id": 266382773,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640815626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20sat.20solvers/near/265354286\">said</a>:</p>\n<blockquote>\n<p>Could you extract some stress tests?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> sorry I missed this question before. Here are a few tests chopped from that experiment. They don't have minimal imports but at least the first one should be relatively low. All of these time out for me without clearing variables first.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.quadratic_reciprocity</span>\n\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- (h : pythagorean_triple x y z)</span>\n  <span class=\"o\">(</span><span class=\"n\">hzpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">y.gcd</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span>\n            <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n         <span class=\"n\">m.gcd</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span>\n           <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span>\n       <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">m.gcd</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- itauto,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">_inst</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n          <span class=\"n\">t</span> <span class=\"bp\">⊂</span> <span class=\"n\">s</span> <span class=\"bp\">→</span>\n          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n            <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n            <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n              <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n              <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g_ne</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_fun_match</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"bp\">→</span> <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hmem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">s.erase</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g_inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n             <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ih'</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">s.erase</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hy₁</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">clear</span> <span class=\"n\">ih</span> <span class=\"n\">_fun_match</span> <span class=\"n\">g_inj</span> <span class=\"n\">ih'</span><span class=\"o\">,</span> <span class=\"c1\">-- comment this and it's slow</span>\n  <span class=\"n\">itauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span> <span class=\"n\">finite_field</span> <span class=\"n\">zmod</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hq0</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hswap</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x.snd</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">x.fst</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                <span class=\"o\">((</span><span class=\"n\">Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span>\n             <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x.fst</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">x.snd</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                <span class=\"o\">((</span><span class=\"n\">Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hdisj</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span>\n             <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x.snd</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">x.fst</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n                <span class=\"o\">((</span><span class=\"n\">Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)))</span>\n             <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x.fst</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">x.snd</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                <span class=\"o\">((</span><span class=\"n\">Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))))</span>\n  <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">x.snd</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">x.fst</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">x.fst</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">x.snd</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x.fst</span> <span class=\"bp\">∧</span> <span class=\"n\">x.fst</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n           <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x.snd</span> <span class=\"bp\">∧</span> <span class=\"n\">x.snd</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n        <span class=\"n\">x.snd</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">x.fst</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span>\n      <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x.fst</span> <span class=\"bp\">∧</span> <span class=\"n\">x.fst</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n           <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x.snd</span> <span class=\"bp\">∧</span> <span class=\"n\">x.snd</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n        <span class=\"n\">x.fst</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">x.snd</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x.fst</span> <span class=\"bp\">∧</span> <span class=\"n\">x.fst</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n      <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x.snd</span> <span class=\"bp\">∧</span> <span class=\"n\">x.snd</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- itauto,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266402999,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1640840549
    },
    {
        "content": "<p>Old <code>tauto</code> isn't instant, but the worst is 1.2 seconds on the first one.</p>",
        "id": 266403075,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1640840659
    },
    {
        "content": "<p>The first one is instant for me</p>",
        "id": 266403119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640840748
    },
    {
        "content": "<p>profiler says 38 ms</p>",
        "id": 266403168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640840784
    },
    {
        "content": "<p>this is on master as of a few days ago</p>",
        "id": 266403180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640840825
    },
    {
        "content": "<p>updated to master, seems the same. Example 1 in 30 ms, example 2 fails (in 10 ms), example 3 in 16 ms</p>",
        "id": 266403309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640841003
    },
    {
        "content": "<p>Ah, <a href=\"https://github.com/leanprover-community/mathlib/pull/10744\">#10744</a> never got merged?</p>",
        "id": 266403366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640841111
    },
    {
        "content": "<p>I don't think the discussion about naming should block that PR</p>",
        "id": 266403406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640841136
    },
    {
        "content": "<p>The problem is with <a href=\"https://github.com/leanprover-community/mathlib/pull/10744\">#10744</a> then</p>",
        "id": 266403429,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1640841184
    },
    {
        "content": "<p>I was running these tests on top of that. With that change they time out for me</p>",
        "id": 266403481,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1640841256
    },
    {
        "content": "<p>You're right that they're fast on master</p>",
        "id": 266403486,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1640841267
    },
    {
        "content": "<p>Didn't check that, I wasn't expecting a regression in plain <code>itauto</code> from that change</p>",
        "id": 266403493,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1640841290
    },
    {
        "content": "<p>I think I know the issue behind example 1: Everything there is a decidable proposition so the preprocessor adds a whole bunch of potential applications of <code>em</code> and the main solver gets lost</p>",
        "id": 266403569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640841386
    },
    {
        "content": "<p>maybe there should be a tactic option to turn off decidability checking</p>",
        "id": 266403650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640841499
    },
    {
        "content": "<p><code>itauto-</code>?</p>",
        "id": 266404016,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1640842060
    },
    {
        "content": "<p>In any case, with this performance I don't think it should be used to replace <code>tauto</code> in mathlib3. Maybe this is reason to write a dedicated classical sat tactic for mathlib4</p>",
        "id": 266404083,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1640842147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> I've pushed some changes on <a href=\"https://github.com/leanprover-community/mathlib/pull/10744\">#10744</a> that should address the issues. <code>itauto</code> now acts like it does on master, ignoring decidable instances, while <code>itauto*</code> will add all decidable instances and <code>itauto [p]</code> will add selected decidable instances. Also I incorporated <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> 's <a href=\"#narrow/stream/113488-general/topic/mathlib.20sat.20solvers/near/265031550\">suggestion</a> to show partial proofs in the case where the proof search fails.</p>",
        "id": 266410658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640851682
    }
]