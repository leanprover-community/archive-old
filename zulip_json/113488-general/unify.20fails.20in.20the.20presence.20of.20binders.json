[
    {
        "content": "<p>I encountered the following problem: <code>nat.pred</code> and <code>nat.pred._main</code> unify well, but if I eta-expand them, unification fails! Does someone have an explanation?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">trace_unify</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n    <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"s2\">&quot;try to unify &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">e1</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; with &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">e2</span><span class=\"o\">,</span>\n    <span class=\"n\">unify</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"n\">all</span><span class=\"o\">,</span>\n    <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"s2\">&quot;unify successful between &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">e1</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; with &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">e2</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"o\">[],</span>\n  <span class=\"k\">let</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"o\">[],</span>\n  <span class=\"n\">trace_unify</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">,</span> <span class=\"c1\">-- success</span>\n  <span class=\"n\">trace</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">eta_nat</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">lam</span> <span class=\"bp\">`</span><span class=\"n\">n</span> <span class=\"n\">bid</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">nat</span> <span class=\"o\">[])</span> <span class=\"err\">$</span> <span class=\"n\">mk_app</span> <span class=\"n\">t</span> <span class=\"o\">[</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">trace_unify</span> <span class=\"o\">(</span><span class=\"n\">eta_nat</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eta_nat</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"c1\">-- failure!</span>\n</pre></div>",
        "id": 173632081,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566281884
    },
    {
        "content": "<p>I had no idea the syntax <code>let eta_nat t := ...</code> is allowed, heh.</p>",
        "id": 173638904,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566290458
    },
    {
        "content": "<p>I'll look into this when I have a minute.</p>",
        "id": 173638918,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566290470
    },
    {
        "content": "<p>I'm not sure what's going on. Does the elaborator use a special method for constants defined using the equation compiler? What's the relevant difference between <code>n_id</code> and <code>n_id2</code> here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">n_id</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">n_id</span> <span class=\"c1\">-- n_id._main</span>\n\n<span class=\"n\">def</span> <span class=\"n\">n_id2</span> <span class=\"o\">:=</span> <span class=\"n\">n_id</span><span class=\"bp\">._</span><span class=\"n\">main</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">n_id</span> <span class=\"bp\">=</span> <span class=\"n\">n_id2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">n_id</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n_id</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">n_id</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n_id</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"c1\">-- proof term:</span>\n<span class=\"c1\">-- @id.{0} (@eq.{1} (nat → nat) n_id (λ (n : nat), n_id n)) (@eq.refl.{1} (nat → nat) n_id)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">n_id</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n_id</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"c1\">-- fails</span>\n<span class=\"bp\">@</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">n_id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">n_id</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">n_id</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">n_id2</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n_id2</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">n_id</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n_id2</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n</pre></div>",
        "id": 173649746,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566301247
    },
    {
        "content": "<p>that's really weird, do you know who would know what's happening?</p>",
        "id": 173651377,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566302927
    },
    {
        "content": "<p>This is bizarre. The declarations <code>n_id</code> and <code>n_id2</code> are completely identical, unless there are attributes that aren't being printed. I'm not familiar with the elaborator code base, but it looks plausible that it's handling constants from the equation compiler differently.</p>",
        "id": 173655079,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566306145
    },
    {
        "content": "<p>I can't say for sure without stepping through it.</p>",
        "id": 173655136,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566306190
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> or <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> know? But Mario's reaction doesn't seem promising.</p>",
        "id": 173655175,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566306235
    },
    {
        "content": "<p>Does Lean have a special case for typechecking via eta in the kernel? Since eta is derivable but iirc not part of the core algorithmic defeq rules</p>",
        "id": 173655308,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1566306327
    },
    {
        "content": "<p>I would guess it is some elaborator thing. It certainly wouldn't be the first time the elaborator shows weird edge case behaviors when you mess with reducibility settings and auxiliaries</p>",
        "id": 173655310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566306328
    },
    {
        "content": "<p>I'm 99% sure the kernel has no problem accepting this proof</p>",
        "id": 173655339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566306352
    },
    {
        "content": "<p>works</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">add_decl</span> <span class=\"err\">$</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">thm</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred_eq_pred_main</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">rfl</span> <span class=\"bp\">_</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 173655463,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566306449
    },
    {
        "content": "<p>eta is part of the core rules. It's not a reduction but it is handled in the preprocessing stage in a way that should be complete</p>",
        "id": 173655494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566306479
    },
    {
        "content": "<p>I guess the weirdest part is that <code>n_id = λ n, n_id2 n := rfl</code> succeeds while <code>n_id = λ n, n_id n := rfl</code> fails</p>",
        "id": 173655921,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566306753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> For your original issue: if you really need to check if things are defeq instead of unifying them, you could follow Chris' example -- if you can add a declaration proving they're equal by <code>rfl</code>, then they're defeq, and this skips the elaborator. Otherwise, maybe you could <code>dsimp</code> with an empty simp set before unifying:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">trace_unify</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">simp_lemmas</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">,</span>\n    <span class=\"n\">e1</span> <span class=\"err\">←</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">dsimplify</span> <span class=\"o\">[]</span> <span class=\"n\">e1</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span> <span class=\"err\">←</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">dsimplify</span> <span class=\"o\">[]</span> <span class=\"n\">e2</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e2</span><span class=\"o\">,</span>\n    <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"s2\">&quot;try to unify &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">e1</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; with &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">e2</span><span class=\"o\">,</span>\n    <span class=\"n\">unify</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"n\">all</span><span class=\"o\">,</span>\n    <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"s2\">&quot;unify successful between &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">e1</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; with &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">e2</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"o\">[],</span>\n  <span class=\"k\">let</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"o\">[],</span>\n  <span class=\"n\">trace_unify</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">,</span> <span class=\"c1\">-- success</span>\n  <span class=\"n\">trace</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">eta_nat</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">lam</span> <span class=\"bp\">`</span><span class=\"n\">n</span> <span class=\"n\">bid</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">nat</span> <span class=\"o\">[])</span> <span class=\"err\">$</span> <span class=\"n\">mk_app</span> <span class=\"n\">t</span> <span class=\"o\">[</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">trace_unify</span> <span class=\"o\">(</span><span class=\"n\">eta_nat</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eta_nat</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 173656453,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566307087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> I really need to unify, my example was a reduced case originating from a real unification problem. I will try to dsimp, thanks for your advice.</p>",
        "id": 173656880,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566307378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> your solution seems to work for eta expansion, but eta expansion was sadly a special case of my problem. Here is another example of failure which I would like to work...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">trace_unify</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">simp_lemmas</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">,</span>\n    <span class=\"n\">e1</span> <span class=\"err\">←</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">dsimplify</span> <span class=\"o\">[]</span> <span class=\"n\">e1</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span> <span class=\"err\">←</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">dsimplify</span> <span class=\"o\">[]</span> <span class=\"n\">e2</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e2</span><span class=\"o\">,</span>\n    <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"s2\">&quot;try to unify &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">e1</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; with &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">e2</span><span class=\"o\">,</span>\n    <span class=\"n\">unify</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"n\">all</span><span class=\"o\">,</span>\n    <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"s2\">&quot;unify successful between &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">e1</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; with &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">e2</span><span class=\"o\">),</span>\n  <span class=\"n\">t1</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">n_id</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"n\">a0</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">),</span> <span class=\"c1\">-- removing `= nat.zero` here</span>\n  <span class=\"n\">t2</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">n_id</span> <span class=\"n\">a0</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">),</span> <span class=\"c1\">-- and here makes it work</span>\n  <span class=\"n\">trace_unify</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span>\n</pre></div>",
        "id": 173658781,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566308629
    },
    {
        "content": "<p>(and in my real example it is not a λ but a Π)</p>",
        "id": 173658916,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566308700
    },
    {
        "content": "<p>This lemma is actually tricky to prove just using tactics:</p>\n<div class=\"codehilite\"><pre><span></span>def n_id : ℕ → ℕ\n| 0 := 0\n| (k+1) := k+1\n\nexample : (∀ n, n_id n = 0) = (∀ n, n_id._main n = 0) :=\nsorry\n</pre></div>\n\n\n<p><code>refl</code>, <code>simp</code>, <code>dsimp</code>, <code>unfold</code>, <code>dunfold</code> all fail, even when given arguments (unless you do something like <code>by simp [show n_id = n_id._main, from rfl]</code>). The only reasonable way I know how to do it is <code>delta n_id, refl</code>. Presumably that doesn't help Cyril's case...</p>",
        "id": 173662881,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1566311384
    },
    {
        "content": "<p>well, maybe I could use this and unfold every definition <code>d</code> such that a <code>d._main</code> exists... it sounds horribly unstable, but unless someone comes up with an API that does the job, or a better hack, I might as well try that</p>",
        "id": 173664822,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566312588
    },
    {
        "content": "<p>That sounds like it could work...<br>\nAnd it's not like we have no other tactics that depends on hacks...</p>",
        "id": 173665372,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1566312866
    },
    {
        "content": "<p>This is kind of a mess. I think this elaborator behavior explains some other weird failures I've seen, but they've been in proofs, not in metaprograms where they're hard to work around.</p>",
        "id": 173666509,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1566313580
    },
    {
        "content": "<blockquote>\n<p>well, maybe I could use this and unfold every definition <code>d</code> such that a <code>d._main</code> exists... it sounds horribly unstable, but unless someone comes up with an API that does the job, or a better hack, I might as well try that</p>\n</blockquote>\n<p>This works in a some cases that used to fail... not sure yet what's wrong with the others (my bugs or lean bugs...)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">delta_to_main</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">collect_const</span><span class=\"o\">,</span>\n  <span class=\"n\">flip</span> <span class=\"n\">delta</span> <span class=\"n\">e</span> <span class=\"err\">$</span>\n  <span class=\"n\">ns</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ns</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">++</span> <span class=\"bp\">`_</span><span class=\"n\">main</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">is_projection</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n   <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"bp\">::</span> <span class=\"n\">ns</span> <span class=\"k\">else</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n</pre></div>",
        "id": 173667894,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1566314658
    },
    {
        "content": "<p>Lean naively delta-reducing definitions defined using equations and leaving you with half-reduced recursor applications was one of the most common complaints with Lean 2. It's intended that Lean 3's reduction engine usually only reduces such definitions along the actual equations. The interaction with eta conversion probably isn't, but neither was users directly interacting with <code>_main</code> definitions.</p>",
        "id": 173888075,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1566484489
    }
]