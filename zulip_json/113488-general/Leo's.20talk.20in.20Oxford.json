[
    {
        "content": "<p><a href=\"https://easychair.org/smart-program/FLoC2018/FM-2018-07-16.html\" target=\"_blank\" title=\"https://easychair.org/smart-program/FLoC2018/FM-2018-07-16.html\">https://easychair.org/smart-program/FLoC2018/FM-2018-07-16.html</a></p>\n<p>How does that work? Can I just walk in and watch it, or do I have to pay £150 for the right wristband or whatever?</p>",
        "id": 129228419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530914948
    },
    {
        "content": "<p>Will this talk be recorded?</p>",
        "id": 129247107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530950107
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://easychair.org/smart-program/FLoC2018/FM-2018-07-16.html\" target=\"_blank\" title=\"https://easychair.org/smart-program/FLoC2018/FM-2018-07-16.html\">https://easychair.org/smart-program/FLoC2018/FM-2018-07-16.html</a></p>\n<p>How does that work? Can I just walk in and watch it, or do I have to pay £150 for the right wristband or whatever?</p>\n</blockquote>\n<p>It seems like you can only register for the whole Floc conference block (<a href=\"https://www.floc2018.org/register/\" target=\"_blank\" title=\"https://www.floc2018.org/register/\">https://www.floc2018.org/register/</a>)</p>",
        "id": 129248036,
        "sender_full_name": "Luca Gerolla",
        "timestamp": 1530952224
    },
    {
        "content": "<p>Yeah but what if you don't register at all and then just sneak in? At a maths conference this would be trivial. My partner is a doctor and at a medical conference that would be completely impossible. Hence my question.</p>",
        "id": 129248150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530952489
    },
    {
        "content": "<p>I believe you can just walk in. People usually do not check badges in CS conferences. They usually only check it for entering the banquet and other social events.</p>",
        "id": 129252101,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1530959718
    },
    {
        "content": "<p>Do you know if the talk will be put online?</p>",
        "id": 129263308,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530980791
    },
    {
        "content": "<blockquote>\n<p>I believe you can just walk in. People usually do not check badges in CS conferences. They usually only check it for entering the banquet and other social events.</p>\n</blockquote>\n<p>He was right :-)</p>",
        "id": 129736307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531727472
    },
    {
        "content": "<p>It's the first rule of Lean:</p>\n<blockquote>\n<p>Leo is always right.</p>\n</blockquote>",
        "id": 129736311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531727517
    },
    {
        "content": "<p>Is it recorded?</p>",
        "id": 129738248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531731345
    },
    {
        "content": "<p>Only the keynotes are recorded, I believe.  But you can look at Leo's slides here: <a href=\"http://leanprover.github.io/talks/FM2018.pdf\" target=\"_blank\" title=\"http://leanprover.github.io/talks/FM2018.pdf\">http://leanprover.github.io/talks/FM2018.pdf</a></p>",
        "id": 129738878,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1531732463
    },
    {
        "content": "<p>Ooh, a new MS project: <a href=\"https://github.com/Microsoft/AliveInLean\" target=\"_blank\" title=\"https://github.com/Microsoft/AliveInLean\">https://github.com/Microsoft/AliveInLean</a></p>",
        "id": 129739154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531732938
    },
    {
        "content": "<p>For some context, this was Juneyoung Lee's intern project while at MSR Cambridge: <a href=\"http://sf.snu.ac.kr/juneyoung-lee/\" target=\"_blank\" title=\"http://sf.snu.ac.kr/juneyoung-lee/\">sf.snu.ac.kr/juneyoung-lee/</a> (under \"Experience\")</p>",
        "id": 129739306,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1531733204
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/LplHZX_30Ugad8y4Izhi43sg/mathlib-ad.png\" target=\"_blank\" title=\"mathlib-ad.png\">mathlib</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/LplHZX_30Ugad8y4Izhi43sg/mathlib-ad.png\" target=\"_blank\" title=\"mathlib\"><img src=\"/user_uploads/3121/LplHZX_30Ugad8y4Izhi43sg/mathlib-ad.png\"></a></div>",
        "id": 129739384,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531733368
    },
    {
        "content": "<p>Yeah, I'm not sure if Johannes is happy about \"University of Amsterdam\".</p>",
        "id": 129739634,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1531733745
    },
    {
        "content": "<p>Haha, I didn't even catch that one yet.</p>",
        "id": 129739740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531733901
    },
    {
        "content": "<p>What's the problem? Is it because there are several universities in Amsterdam?</p>",
        "id": 129740068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531734435
    },
    {
        "content": "<p>Yes, and one is called \"Universiteit van Amsterdam\" and the other \"Vrije Universiteit\"</p>",
        "id": 129740127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531734498
    },
    {
        "content": "<p>Johannes is based at the second.</p>",
        "id": 129740128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531734506
    },
    {
        "content": "<blockquote>\n<p>Lean 4<br>\n• Leo and Sebastian Ullrich (and soon Gabriel Ebner)</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 129740691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531735443
    },
    {
        "content": "<p>So I met Leo! He was super-nice and super-happy to talk and listen -- we spoke for over an hour. It was a real eye-opener. He has a very practical viewpoint of things, he could see exactly which of my ideas should work and which would need several million pounds to maintain :-) He was very positive about using lean to teach (this was an example of something which would not cost several million pounds to maintain). He said that in theory it would be possible to have VS Code installed on one PC and accessing an instance of Lean running on another PC -- it would be a bore to write but would definitely be possible. I wonder whether one day this would be another viable solution to the issue of Lean + mathlib + compilation etc being a pain for a generic maths student with a Windows machine.</p>\n<p>I would summarise the talk but Gabriel posted the slides already :-)</p>",
        "id": 129743685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531740018
    },
    {
        "content": "<p>What would cost million pounds?</p>",
        "id": 129745162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531742146
    },
    {
        "content": "<p>About Lean and VScode, I wonder what kind of manpower would be available to develop the vscode extension. There are several things I would like to see there, some seem very easy, some seem harder. On the very easy side, one could create a set of snippets. Currently my <code>~/.config/Code/User/snippets/lean.json</code> contains</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n    <span class=\"nt\">&quot;Sorry&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;prefix&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;sor&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;body&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">&quot;{ $0&quot;</span><span class=\"p\">,</span>\n          <span class=\"s2\">&quot;  sorry },&quot;</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">&quot;description&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Sorry block&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&quot;Proof&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;prefix&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;proof&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;body&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">&quot;begin&quot;</span><span class=\"p\">,</span>\n          <span class=\"s2\">&quot;  $0&quot;</span><span class=\"p\">,</span>\n          <span class=\"s2\">&quot;  sorry&quot;</span><span class=\"p\">,</span>\n          <span class=\"s2\">&quot;end&quot;</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">&quot;description&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Proof tactic block&quot;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>but I'm sure there are many more that could save some time and focus. Slightly harder: I often wish there would be shortcuts to toggle options like trace or pp options. Potentially harder: implement subwindows dedicated to <code>#check</code> or <code>#print</code> or <code>#find</code>, with somewhat persistent output. I often use these commands and wish I could still see the result while editing my code, without freezing the message window because I need to see the current proof state.</p>",
        "id": 129745518,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531742596
    },
    {
        "content": "<p>I think a snippet for <code>theorem</code> would be nice</p>",
        "id": 129745568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531742646
    },
    {
        "content": "<p>what would it write for you?</p>",
        "id": 129745585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531742680
    },
    {
        "content": "<p>also <code>set_option</code> takes too long to type, and I get no vscode help until I get to the options themselves</p>",
        "id": 129745595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531742695
    },
    {
        "content": "<p><code>\"sor\"</code> is exactly how we say \"sorry\" in Hong Kong lol</p>",
        "id": 129745616,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531742725
    },
    {
        "content": "<p>might be nice if there was some kind of autocomplete from e.g. <code>#all</code> to <code>set_option pp.all true</code></p>",
        "id": 129745619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531742729
    },
    {
        "content": "<p>it suddenly feels so familiar</p>",
        "id": 129745623,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531742735
    },
    {
        "content": "<p>(sorry off-topic)</p>",
        "id": 129745626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531742744
    },
    {
        "content": "<p>I've wondered why put the <code>#</code> in <code>#check</code> but not in <code>set_option</code>.</p>",
        "id": 129745629,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531742755
    },
    {
        "content": "<p>I've always felt that was not a good choice</p>",
        "id": 129745675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531742777
    },
    {
        "content": "<p>I start with <code>#set_opt...</code> at least half time</p>",
        "id": 129745677,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531742779
    },
    {
        "content": "<p>the reasoning is that the <code>#</code> is for temporary lines</p>",
        "id": 129745686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531742797
    },
    {
        "content": "<p>Oh. That never would have occurred to me.</p>",
        "id": 129745689,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531742813
    },
    {
        "content": "<p>most set_option commands I use are temporary</p>",
        "id": 129745691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531742822
    },
    {
        "content": "<p>and even though <code>set_option</code> is used for temporary lines 99% of the time (in my experience), I guess leo was thinking about some permanent options like <code>set_option old_structure_cmd true</code></p>",
        "id": 129745703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531742857
    },
    {
        "content": "<p>I'd prefer if these were separated into two sets of options</p>",
        "id": 129745738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531742883
    },
    {
        "content": "<blockquote>\n<p>What would cost million pounds?</p>\n</blockquote>\n<p>Putting Lean into the high school curriculum. Proving a hard theorem and then <em>keeping it proved</em> -- maintaining the code. I also met Gonthier. Leo asked him about maintaining the odd order proof and Gonthier said that on average every second release of Coq breaks the proof and he has to fix it, but he never used simp, he only used dsimp, so it usually doesn't break badly. Leo stressed that it's not just about writing code, maintaining it is very boring, hard work, and costs money. He observed that Hales was going to run into this issue. He was extremely positive about Hales' FABStracts (is that how it's spelt nowadays?). He mentioned it in the talk, but he said that he believed that the project was achievable (he said something like it was on the \"boundary of what could be achieved\", which in my opinion is a really good place to be -- perhaps the best place to be) -- however he stressed the need to maintain it, and he stressed that this was not a trivial thing. Maths papers don't need maintaining -- perhaps this was why he chose to hammer this point home to me several times. It is not only true, but it's important and non-trivial -- one has to continue to get people to write the cheques, or else the project dies.</p>",
        "id": 129746293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531743688
    },
    {
        "content": "<blockquote>\n<p>Proving a hard theorem and then keeping it proved -- maintaining the code</p>\n</blockquote>\n<p>This doesn't cost a million pounds</p>",
        "id": 129746351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531743762
    },
    {
        "content": "<p>It requires people who care</p>",
        "id": 129746374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531743803
    },
    {
        "content": "<p>With Lean's current pace, it is not possible to maintain large projects. It will be a lot of work to port mathlib from Lean3 to Lean4. Two changes I already know:</p>\n<ul>\n<li>no <code>end</code> for <code>match</code></li>\n<li><code>inductive</code> will remove a difference between <code>Prop</code> and <code>Sort</code>: the produced recursor for for inductive predicates will also be dependent.<br>\nWe will see what else will change. The syntactic changes are easy, changes to the elaborator will be harder. I hope we will find a good way to soften the translation from Lean3 -&gt; Lean4.</li>\n</ul>",
        "id": 129746824,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1531744425
    },
    {
        "content": "<p>Changes to the simplifier are usually not as problematic as it seams. But this strongly depends on the proof style. If you do a lot of tactic / ssreflect like proofs, changes can be very bad. For Isabelle's declarative proofs usually it isn't a too big of a problem. The AFP contains a lot of simp proofs: I would guess in Isabelle each second <strong>proof step</strong> depends on the simplifier, and the simplifier setup changes regularly. Yet, the AFP is growing and the Isabelle community manages to keep pace.</p>",
        "id": 129747152,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1531744828
    },
    {
        "content": "<blockquote>\n<p>About Lean and VScode, I wonder what kind of manpower would be available to develop the vscode extension.</p>\n</blockquote>\n<p>From my point of view, what we're missing atm is not manpower but ideas.  I'm willing to bring help anyone who wants to work on the vscode extension.</p>\n<blockquote>\n<p>[snippets]</p>\n</blockquote>\n<p>I think we can include them in the extension.  Feel free to submit a PR.  This could be a controversial addition, people were already up in arms about <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> <span class=\"emoji emoji-1f937\" title=\"shrug\">:shrug:</span> </p>\n<blockquote>\n<p>[extra windows for #check, etc.]</p>\n</blockquote>\n<p>This will probably have to wait for Lean 4.  I talked with Johannes and Rob about some hacky workarounds when I was in Amsterdam, but stuff like \"find the next empty line, insert #check, wait for the output, then delete it again\" doesn't excite me too much.</p>",
        "id": 129748069,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1531745957
    },
    {
        "content": "<p>Ok, this is what I thought. I added more stuff to my snippets file, following Mario's suggestions in particular. I'll work with them for a while to see if they are useful, and then I'll PR.</p>",
        "id": 129749893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531748010
    },
    {
        "content": "<p>Another Lean4 change, important for writing tactics: Leo told me that the <code>local_const</code> constructor will loose the attached type, we will need to manage the typing context more explicitly. Also <code>expr</code> looses <code>macro</code> but gains a constructors to represent projections, and to represent literals.</p>",
        "id": 129749951,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1531748060
    },
    {
        "content": "<p>that's probably a good thing, currently the type attached to a <code>local_const</code> is wrong half the time anyway so you have to use the local context</p>",
        "id": 129749982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531748119
    }
]