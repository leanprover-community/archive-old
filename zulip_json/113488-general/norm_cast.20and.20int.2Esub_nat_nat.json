[
    {
        "content": "<p>I've got the following code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_mul_succ_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_eq_zero_of_lt</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_succ_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_sub_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_succ_right_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_sub_succ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_sub_left_distrib</span><span class=\"o\">],</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">le_add_right</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_left</span> <span class=\"bp\">_</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw_mod_cast</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_mul_succ_eq</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ ↑(nat.choose (nat.succ n) k) * int.sub_nat_nat (n + 1) k =</span>\n  <span class=\"c1\">-- ↑(nat.choose (n + 1) k * (n + 1 - k))</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>As you can see, I end up with <code>int.sub_nat_nat</code> after a <code>rw_mod_cast</code>. To me, that isn't exactly expected behaviour. Is this the way it's supposed to be, or is there some bad lemma somewhere?</p>",
        "id": 187157010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580553088
    },
    {
        "content": "<p>It seems that the <code>move_cast</code> attribute on <code>cast_sub_nat_nat</code> causes this.  Since <code>move_cast</code>-lemmas are (sometimes) rewritten backwards, you get the ugly function.<br>\nI also noticed this. I want to add the attribute <code>attribute [move_cast] nat.add_one</code>, so that we rewrite <code>succ n</code> to <code>n + 1</code> in <code>norm_cast</code>. <br>\nBut does this mean that in certain situations it will rewrite <code>nat.add_one</code> in the forward direction, so that we rewrite <code>n + 1</code> to <code>succ n</code>? (also, <code>int.coe_nat_succ</code> is marked with <code>[move_cast]</code> but it doesn't seem to fire; is the direction reversed?)</p>\n<p><span class=\"user-mention\" data-user-id=\"213273\">@Paul-Nicolas Madelaine</span>: what is the best way to deal with these rewrite rules that you only want to rewrite in a single direction, but never in the other one? Does <a href=\"https://github.com/leanprover-community/mathlib/issues/1103\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1103\">#1103</a> relate to any of this?</p>",
        "id": 187356956,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580822149
    },
    {
        "content": "<p>I think you should be able to make it work if you tag it <code>[squash_cast]</code> instead. But yes, this will change with <a href=\"https://github.com/leanprover-community/mathlib/issues/1103\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1103\">#1103</a>.</p>",
        "id": 187357486,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580822615
    }
]