[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n<span class=\"err\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Should <code>omega</code> be able to handle these kind of things? (It failed.)<br>\nHow do I make these goals go away without desperately scrolling through thousands of trivialities in <code>nat.lean</code>?</p>",
        "id": 168038279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560427593
    },
    {
        "content": "<p>Hmm, it's working for me? <a href=\"https://bryangingechen.github.io/lean/lean-web-editor/#code=import%20tactic.omega%0A%0Aexample%20(i%20n%20%3A%20%E2%84%95)%20(hi%20%3A%20i%20%E2%89%A4%20n)%20%3A%20n%20%2B%201%20%3D%20i%20%2B%20(n%20-%20i%20%2B%201)%20%3A%3D%20by%20omega\" target=\"_blank\" title=\"https://bryangingechen.github.io/lean/lean-web-editor/#code=import%20tactic.omega%0A%0Aexample%20(i%20n%20%3A%20%E2%84%95)%20(hi%20%3A%20i%20%E2%89%A4%20n)%20%3A%20n%20%2B%201%20%3D%20i%20%2B%20(n%20-%20i%20%2B%201)%20%3A%3D%20by%20omega\">web editor</a></p>",
        "id": 168044480,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560432531
    },
    {
        "content": "<p>Weird... within my huge crowded context it didn't work...</p>",
        "id": 168044716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560432655
    },
    {
        "content": "<p>I guess for more control you could try:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">omega</span> <span class=\"n\">manual</span> <span class=\"n\">nat</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168049311,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560435695
    },
    {
        "content": "<p>What exactly does that do?</p>",
        "id": 168049604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560435793
    },
    {
        "content": "<p>I'm not sure of the details exactly but I found info about it <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#omega\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#omega\">here</a> (some of this should probably be copied to the docstring, which is currently empty).</p>",
        "id": 168049706,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560435849
    },
    {
        "content": "<p>I think the idea is that <code>omega</code> actually works on \"closed\" terms and if the goal isn't one, it has to try to guess which hypotheses to revert. By using <code>manual</code>, you turn off the guessing.</p>",
        "id": 168049946,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560436005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Brilliant! That worked!</p>",
        "id": 168050917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560436665
    },
    {
        "content": "<p>Why doesn't omega just revert stuff automatically if the goal is not a closed term?</p>",
        "id": 168092725,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560467279
    },
    {
        "content": "<p>We really shouldn't have to be calling revert manually.</p>",
        "id": 168092769,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560467291
    },
    {
        "content": "<p>It does, but sometimes it gets the reverts wrong.</p>",
        "id": 168093657,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560468272
    },
    {
        "content": "<p>Are these bugs in omega, or an essential difficulty?</p>",
        "id": 168093914,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560468555
    },
    {
        "content": "<p>I don't see why there would be an essential difficulty</p>",
        "id": 168094013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560468636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116585\">@Seul Baek</span></p>",
        "id": 168094030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560468653
    },
    {
        "content": "<p>btw, <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>, your <a href=\"https://bryangingechen.github.io/lean/lean-web-editor/#code=import%20tactic.omega%0A%0Aexample%20(i%20n%20%3A%20%E2%84%95)%20(hi%20%3A%20i%20%E2%89%A4%20n)%20%3A%20n%20%2B%201%20%3D%20i%20%2B%20(n%20-%20i%20%2B%201)%20%3A%3D%20by%20omega\" target=\"_blank\" title=\"https://bryangingechen.github.io/lean/lean-web-editor/#code=import%20tactic.omega%0A%0Aexample%20(i%20n%20%3A%20%E2%84%95)%20(hi%20%3A%20i%20%E2%89%A4%20n)%20%3A%20n%20%2B%201%20%3D%20i%20%2B%20(n%20-%20i%20%2B%201)%20%3A%3D%20by%20omega\">web editor</a> link above just gives me an error <code>unknown identifier 'omega'</code></p>",
        "id": 168094130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560468756
    },
    {
        "content": "<p>Uh oh, I updated the build of mathlib that it was using a few hours ago. It does seem like something has gone wrong, but I'm seeing:</p>\n<div class=\"codehilite\"><pre><span></span>1:0: error:\nambiguous import, it can be &#39;/library/algebra/group/default.olean&#39; or &#39;/library/algebra/group.olean&#39;\n1:0: error:\ninvalid import: tactic.omega\ncould not resolve import: tactic.omega\n</pre></div>\n\n\n<p>instead.  I'll look into this.</p>\n<p><strong>Edit</strong>: the problem was the <code>mk_library.py</code> script was picking up .olean files corresponding to renamed / moved .lean files. Should be fixed now.</p>",
        "id": 168094250,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560468906
    },
    {
        "content": "<p>In this case I had a \"very complicated\" term that depended on <code>n</code>. It was of the form</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">for</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">weird_poly1</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">weird_poly2</span> <span class=\"n\">m</span>\n</pre></div>\n\n\n<p>Maybe that tripped up <code>omega</code>?</p>",
        "id": 168107038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560488608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  I think so. Remember that <code>omega</code> handles goals in presburger arithmetic, which has a pretty restricted language. You can have <code>nat</code>/<code>int</code> constants and variables, addition, multiplication with constant, comparisons, plus a bit of syntactic sugar like subtraction which is eliminated during processing. It wouldn't know what to make of <code>weird_poly1</code> or <code>weird_poly2</code> if it contains any symbols other than these.</p>",
        "id": 168210301,
        "sender_full_name": "Seul Baek",
        "timestamp": 1560609619
    },
    {
        "content": "<p>Maybe <code>omega</code> could be opportunistic, and clear assumptions that fall outside the language, before reverting assumptions on which the goal depends...</p>",
        "id": 168210587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560610089
    },
    {
        "content": "<p>But I'm also fine with manual mode.</p>",
        "id": 168210589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560610105
    },
    {
        "content": "<p>As long as I know how to use it <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 168210594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560610121
    },
    {
        "content": "<p>Reviewing the code, I think I know what the problem is. The preprocessor for <code>omega</code> isn't very careful when choosing which hypotheses to revert - it just checks that its domain (e.g. <code>int</code> or <code>nat</code>) matches the domain of the goal. So it's possible that an hypothesis has the right domain but is not actually in the language of presburger arithmetic, and causes reification to fail.</p>",
        "id": 168210752,
        "sender_full_name": "Seul Baek",
        "timestamp": 1560610372
    }
]