[
    {
        "content": "<p>I'd love to see extensions to the <code>lift</code> tactic (possibly under a separate name) that allow me to write:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">lift</span> <span class=\"n\">h</span> <span class=\"n\">to</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>instead of having to know the name of the lemma:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">lt_to_nat</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198575418,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590313237
    },
    {
        "content": "<p>I'm guessing we don't have any automation that does this at the moment.</p>",
        "id": 198575435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590313274
    },
    {
        "content": "<p>I'm not really certain of the scope of this, but even something that moves inequalities from <code>nat</code> to <code>int</code> would be very useful.</p>",
        "id": 198575455,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590313321
    },
    {
        "content": "<p>In this specific case the norm_cast tactics do it right?</p>",
        "id": 198575492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590313323
    },
    {
        "content": "<p>How do I do it with <code>norm_cast</code>?</p>",
        "id": 198575497,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590313342
    },
    {
        "content": "<p>oh...</p>",
        "id": 198575500,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590313350
    },
    {
        "content": "<p>you mean jsut write <code>norm_cast</code>?</p>",
        "id": 198575502,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590313356
    },
    {
        "content": "<p>does <code>exact_mod_cast h</code> work?</p>",
        "id": 198575506,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590313368
    },
    {
        "content": "<p>Awesome, I didn't realise how much work <code>*_cast</code> tactics could already do!</p>",
        "id": 198575515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590313411
    },
    {
        "content": "<p><code>assumption_mod_cast</code></p>",
        "id": 198575516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590313413
    },
    {
        "content": "<p>You don't even need to know the names of your hypotheses (-;</p>",
        "id": 198575518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590313426
    },
    {
        "content": "<p>but <code>norm_cast</code> changes the goal</p>",
        "id": 198575563,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590313473
    },
    {
        "content": "<p>I suppose Scott wants a tactic that changes <code>h</code></p>",
        "id": 198575568,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590313479
    },
    {
        "content": "<p>In my actual use case <code>exact_mod_cast</code> is perfect.</p>",
        "id": 198575571,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590313487
    },
    {
        "content": "<p>oh great</p>",
        "id": 198575574,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590313494
    },
    {
        "content": "<p>but nevertheless it would be beneficial to have a tactic that changes <code>h</code></p>",
        "id": 198575579,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590313505
    },
    {
        "content": "<p>Can't you do <code>norm_cast at h</code>?</p>",
        "id": 198576685,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590315517
    },
    {
        "content": "<p>That goes the wrong way. <code>h : a &lt; b</code>, doesn't have any coercions in it. The idea is to add the coercions to the hypothesis. (And of course everyone pointed out it was easier in this minimal example to remove the coercions from the goal.)</p>",
        "id": 198576877,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590315885
    },
    {
        "content": "<p>How about this example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199124846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590739685
    },
    {
        "content": "<p>This came up in practice.</p>",
        "id": 199124856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590739697
    },
    {
        "content": "<p>I don't want to remember how the fact \"coercion from <code>int</code> to <code>rat</code> is injective\" is called.</p>",
        "id": 199124880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590739722
    },
    {
        "content": "<p>So I want to hit this with <code>move_goal_to rat</code>, which figures out what to do.</p>",
        "id": 199124920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590739748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/extension.20to.20.60lift.60.20tactic/near/199124880\">said</a>:</p>\n<blockquote>\n<p>I don't want to remember how the fact \"coercion from <code>int</code> to <code>rat</code> is injective\" is called.</p>\n</blockquote>\n<p><code>norm_cast</code> knows about this so you shouldn't have to mention it. Do you have <code>data.rat.cast</code> imported?</p>",
        "id": 199126851,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590741079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> <code>norm_cast</code> goes the wrong way, right?</p>",
        "id": 199126890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590741110
    },
    {
        "content": "<p>I can't <code>rw_mod_cast hk</code> and end up with a goal in the rationals.</p>",
        "id": 199127013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590741168
    },
    {
        "content": "<p>I mean, I think you can rephrase the proof to use <code>norm_cast</code> without making it longer.</p>",
        "id": 199127014,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590741168
    },
    {
        "content": "<p>How?</p>",
        "id": 199127034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590741180
    },
    {
        "content": "<p>You can rewrite hk to make it multiplicative and norm_cast it, right?</p>",
        "id": 199127058,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590741194
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_injective</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc&#39;</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>is what I have now</p>",
        "id": 199127069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590741201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/extension.20to.20.60lift.60.20tactic/near/199127058\">said</a>:</p>\n<blockquote>\n<p>You can rewrite hk to make it multiplicative and norm_cast it, right?</p>\n</blockquote>\n<p>Aha, but then I have to remember how to do that...</p>",
        "id": 199127108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590741228
    },
    {
        "content": "<p>And those are still manipulations that don't come intuitively to me... they seem to work in the wrong direction, for me.</p>",
        "id": 199127174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590741252
    },
    {
        "content": "<p>The proof I posted above seems to be the natural \"flow\" of the proof, for me.</p>",
        "id": 199127202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590741281
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_injective</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 199127364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590741369
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq_div_iff_mul_eq</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">cc</span><span class=\"o\">,</span> <span class=\"n\">assumption_mod_cast</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Not that I care how you do the arithmetic, but this seems the core of the proof. \"change division to multiplication, do some cast and equality reasoning.\"</p>",
        "id": 199127410,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1590741408
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 199127482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590741460
    },
    {
        "content": "<p>Total proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">denom_div_cast_eq_one_iff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">lift</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"bp\">ℤ</span> <span class=\"kn\">using</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eq_div_iff_mul_eq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_int_denom</span><span class=\"o\">],</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hn</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199127755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590741644
    }
]