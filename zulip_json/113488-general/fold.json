[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I think you had a very general framework for doing <code>fold</code>s. Is there an easy way to prove</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">fold_sup_bot_singleton</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"n\">has_sup</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"err\">\\</span><span class=\"n\">bot</span> <span class=\"n\">singleton</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I feel like this should follow from some abstract nonsense. <code>singleton = pure</code> etc...</p>",
        "id": 208424216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598690597
    },
    {
        "content": "<p>I would suggest relating it to <code>finset.bind</code>, and then abstract nonsense will let you use the monad laws</p>",
        "id": 208424405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598690992
    },
    {
        "content": "<p>i.e. <code>finset.fold has_sup.sup \\bot f s = finset.bind s f</code></p>",
        "id": 208424449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598691012
    },
    {
        "content": "<p>Aah, I should be using bind from the get go (-;</p>",
        "id": 208424517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598691231
    },
    {
        "content": "<p>did <code>bind</code> do the trick? The foldable framework won't work without extending it because it doesn't use commutative monoids to do the aggregation. I considered doing that extension but I wasn't sure it would be useful because the only instances that I could think of are <code>finset</code> and <code>multiset</code>. Now that I think of it, unordered trees could probably use it as well.</p>",
        "id": 208449712,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1598729067
    },
    {
        "content": "<p>Yes, <code>bind</code> works great.</p>",
        "id": 208449801,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598729218
    },
    {
        "content": "<p>However, there doesn't seem to be a lemma relating the two</p>",
        "id": 208449809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598729233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/fold/near/208424449\">said</a>:</p>\n<blockquote>\n<p>i.e. <code>finset.fold has_sup.sup \\bot f s = finset.bind s f</code></p>\n</blockquote>\n<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> is missing from the library, I think. Also for <code>multiset</code>.</p>",
        "id": 208449823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598729274
    },
    {
        "content": "<p>It'd be nice if the <code>finset</code> module doc had a few examples of using <code>finset.bind</code> since it seems to be a common but nonobvious technique.</p>",
        "id": 208449872,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598729307
    },
    {
        "content": "<p>Would it help to rename it to <code>bUnion</code>?</p>",
        "id": 208450844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598730710
    },
    {
        "content": "<p>We don't use \"monadic\" naming for anything else in finset so it's a bit hard to find</p>",
        "id": 208450912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598730775
    },
    {
        "content": "<p>relatedly, I was wondering why there is no <code>algebra.big_operators</code> for <code>sup</code> and <code>inf</code> (as far as I know)</p>",
        "id": 208450919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598730788
    },
    {
        "content": "<p>A <code>semilattice_sup_bot</code> is equivalent to a special kind of commutative monoid (namely an idempotent one) so one could imagine obtaining much of the API automatically</p>",
        "id": 208450944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598730834
    },
    {
        "content": "<p>we don't have that type alias yet</p>",
        "id": 208451000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598730898
    },
    {
        "content": "<p>is that <code>tropical</code>?</p>",
        "id": 208451003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598730903
    },
    {
        "content": "<p>I think <code>tropical</code> usually suggests you're also turning <code>*</code> into <code>+</code></p>",
        "id": 208451071,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598730970
    },
    {
        "content": "<p>whereas in order theory it's probably more commonly useful to turn it into <code>inf</code> (in a distributive lattice)</p>",
        "id": 208451098,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598731013
    },
    {
        "content": "<p>I was thinking more about the second part, turning <code>+</code> into <code>max</code></p>",
        "id": 208451668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598731834
    },
    {
        "content": "<p>Right, but I think tropical usually suggests the two as a package. But I'm not really an expert on that.<br>\nMaybe <code>to_lattice</code>? <code>to_boolean</code>? <code>to_sup</code>, <code>to_inf</code>?</p>",
        "id": 208452195,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598732565
    },
    {
        "content": "<p>I suspect naming won't turn out to be the hardest problem to solve here</p>",
        "id": 208452606,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598733033
    },
    {
        "content": "<p>Sure, but as long as the two are compatible we could equip a single type alias with both the add_group structure and the ring structure, depending on what underlying instances are available</p>",
        "id": 208452768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598733243
    },
    {
        "content": "<p>Although, I think the map actually goes in the other direction, so it would be e.g. <code>add_comm_group (of_inf L)</code> where L is some kind of lattice</p>",
        "id": 208452815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598733356
    },
    {
        "content": "<p>you could precompose with <code>order_dual</code> to get the other one</p>",
        "id": 208452876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598733402
    }
]