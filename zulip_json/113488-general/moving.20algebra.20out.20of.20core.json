[
    {
        "content": "<p>Starting a new thread for this project.<br>\nCan someone explain me: when I build core</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">cd</span> build/releases\ncmake ../../src\nmake\n</code></pre></div>\n\n\n<p>How is this aware of any <code>.lean</code> files in core? I grepped through all the Makefiles, and they don't seem to mention lean files anywhere.</p>",
        "id": 197099043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589171430
    },
    {
        "content": "<p>Or does it not care, but will you only notice once you run the tests if you've changed/moved a bunch of lean files?</p>",
        "id": 197099070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589171485
    },
    {
        "content": "<p>Here is the relevant part of <code>CMakeLists.txt</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">add_custom_target</span><span class=\"p\">(</span>\n    <span class=\"s\">standard_lib</span> <span class=\"s\">ALL</span>\n    <span class=\"s\">COMMAND</span> <span class=\"s2\">&quot;${LEAN_SOURCE_DIR}/../bin/lean&quot;</span> <span class=\"s\">--make</span> <span class=\"o\">${</span><span class=\"nv\">LEAN_EXTRA_MAKE_OPTS</span><span class=\"o\">}</span>\n    <span class=\"s\">DEPENDS</span> <span class=\"s\">bin_lean</span>\n    <span class=\"s\">WORKING_DIRECTORY</span> <span class=\"s2\">&quot;${LEAN_SOURCE_DIR}/../library&quot;</span>\n    <span class=\"p\">)</span>\n\n<span class=\"nb\">add_custom_target</span><span class=\"p\">(</span>\n    <span class=\"s\">leanpkg</span> <span class=\"s\">ALL</span>\n    <span class=\"s\">COMMAND</span> <span class=\"s2\">&quot;${LEAN_SOURCE_DIR}/../bin/lean&quot;</span> <span class=\"s\">--make</span> <span class=\"o\">${</span><span class=\"nv\">LEAN_EXTRA_MAKE_OPTS</span><span class=\"o\">}</span>\n    <span class=\"s\">DEPENDS</span> <span class=\"s\">standard_lib</span>\n    <span class=\"s\">WORKING_DIRECTORY</span> <span class=\"s2\">&quot;${LEAN_SOURCE_DIR}/../leanpkg&quot;</span>\n<span class=\"p\">)</span>\n</code></pre></div>",
        "id": 197100272,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173011
    },
    {
        "content": "<p>It just runs this command. It doesn't care what it does.</p>",
        "id": 197100278,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173038
    },
    {
        "content": "<p>/me should learn cmake</p>",
        "id": 197100279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589173040
    },
    {
        "content": "<p>BTW, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> do you want me to look at lean buildsystem? A few years ago I contributed several patches to cmake and to KDE cmake files.</p>",
        "id": 197100333,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173150
    },
    {
        "content": "<p>If you only plan to edit Lean files, you can just mess around in <code>library</code> after compiling a binary from the latest commit.</p>",
        "id": 197100409,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589173293
    },
    {
        "content": "<p>In particular, writing build files to source tree is generally a bad idea. If I have two build directories with different configuration, then I expect these two builds to be completely independent.</p>",
        "id": 197100460,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173359
    },
    {
        "content": "<p>Oh, maybe <a href=\"#narrow/stream/113488-general/topic/modifying.20lean.20core.20library.20code/near/194571633\" title=\"#narrow/stream/113488-general/topic/modifying.20lean.20core.20library.20code/near/194571633\">this post</a> by Jason will help? It could be an alternate way to play around with <code>library</code> without having to build Lean.</p>",
        "id": 197100464,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589173374
    },
    {
        "content": "<p>But I guess I will have to touch <code>.cpp</code> as well. Cut <code>norm_num</code> away.</p>",
        "id": 197100473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589173398
    },
    {
        "content": "<p>What should core know about natural and integer numbers? Only definitions of operations? Something else?</p>",
        "id": 197100520,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589173453
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/224\">lean#224</a> is the first step</p>",
        "id": 197110201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589182843
    },
    {
        "content": "<p>That PR removes all the CPP involving norm_num.</p>",
        "id": 197111904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589183953
    },
    {
        "content": "<p>A follow-up PR should strip most algebra from the core library. But that lean code is pretty tangled )-;</p>",
        "id": 197111948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589183988
    },
    {
        "content": "<p>/me is somewhat surprised that Lean code is faster than cpp code</p>",
        "id": 197112369,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589184187
    },
    {
        "content": "<p>That's fine</p>",
        "id": 197112487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589184255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core/near/197100333\">said</a>:</p>\n<blockquote>\n<p>BTW, <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> do you want me to look at lean buildsystem? A few years ago I contributed several patches to cmake and to KDE cmake files.</p>\n</blockquote>\n<p>Are you talking about removing the part that copies lean to <code>bin/lean</code>?  I've already gotten used to this horrible hack.  I don't think that there's an immediate need to change it.  See also previous discussion here: <a href=\"https://github.com/leanprover/lean/issues/1918\">https://github.com/leanprover/lean/issues/1918</a></p>",
        "id": 197113896,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589185234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core/near/197100520\">said</a>:</p>\n<blockquote>\n<p>What should core know about natural and integer numbers? Only definitions of operations? Something else?</p>\n</blockquote>\n<p>It needs a few lemmas for the equation compiler.  If you write <code>match n with 314 := a | 42 := b | _ := c end</code>, then it needs to prove that <code>314 ≠ 42</code>.  The definitions of natural numbers (including exponentiation) are also required for the VM (because they are overriden) and the tactic framework.</p>",
        "id": 197114605,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589185764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> The reason it's faster is because the C++ is using instance search and <code>norm_num</code> is (now) aggressively caching. It turns out that actual number crunching was nothing compared to finding typeclasses</p>",
        "id": 197118328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589188073
    },
    {
        "content": "<p>This is what we need to unclutter:<br>\n<a href=\"/user_uploads/3121/WEHf9-B-Lka6tbRn01erZj_z/import_graph.pdf\">import_graph.pdf</a></p>",
        "id": 197121715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589190334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you know by heart whether something like <code>init.meta.well_founded_tactics</code> has to stay in core?</p>",
        "id": 197122013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589190520
    },
    {
        "content": "<p>that tactic is a mess, I'd like to see it gone</p>",
        "id": 197122044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589190541
    },
    {
        "content": "<p>it should be <code>assumption</code></p>",
        "id": 197122074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589190557
    },
    {
        "content": "<p>What does that mean for this project...</p>",
        "id": 197122501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589190804
    },
    {
        "content": "<p>It can definitely be removed from core</p>",
        "id": 197122654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589190881
    },
    {
        "content": "<p>Ok, I'll try my best</p>",
        "id": 197122743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589190936
    },
    {
        "content": "<p>It is used by lean magic currently: if you leave off the <code>using_well_founded</code> clause in a well founded recursive definition, it will call the tactic in <code>well_founded_tactics</code> in order to solve the size decreasing theorem</p>",
        "id": 197122820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589190973
    },
    {
        "content": "<p>that needs to be changed to another tactic, and I recommend <code>assumption</code></p>",
        "id": 197122835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589190992
    },
    {
        "content": "<p>Does that mean a lot of proofs in mathlib will have to be fixed?</p>",
        "id": 197122895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589191055
    },
    {
        "content": "<p>It does mean a regression for well founded definitions that currently are using the tactic to prove the size decreasing theorem; they will need to put the <code>using_well_founded</code> clause in and reference <code>well_founded_tactic</code> explicitly</p>",
        "id": 197122902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191063
    },
    {
        "content": "<p>And does lean need to be changed before <code>well_founded_tactics</code> can be removed? You seem to suggest that lean depends on it.</p>",
        "id": 197122961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589191092
    },
    {
        "content": "<p>Well founded definitions like this are extremely rare in mathlib, and even when they are used the result isn't great, because it does recursion on <code>T.sizeof</code> which has few lemmas</p>",
        "id": 197123009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191132
    },
    {
        "content": "<p><code>well_founded_tactics.default</code> is referenced by lean</p>",
        "id": 197123399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191397
    },
    {
        "content": "<p>and it uses default construction of <code>well_founded_tactics</code>, resulting in the use of <code>well_founded_tactics.default_dec_tac</code></p>",
        "id": 197123434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191435
    },
    {
        "content": "<p>So if you change the default value of <code>well_founded_tactics.dec_tac</code> to <code>assumption</code>, you should be able to remove <code>default_dec_tac</code></p>",
        "id": 197123504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191480
    },
    {
        "content": "<p>Another option is to use a <code>def_replacer</code> here, so that users can mark their own default dec_tac, changing the global default</p>",
        "id": 197123633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191575
    },
    {
        "content": "<p>This sounds orthogonal to <code>norm_num</code>, but maybe not to moving algebra out of core.</p>",
        "id": 197123699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589191635
    },
    {
        "content": "<p><code>well_founded_tactics.default_dec_tac</code> is basically a poor man's <code>linarith</code></p>",
        "id": 197123753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589191682
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/229\">lean#229</a> is a wip PR that compiles</p>",
        "id": 197181675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589219689
    },
    {
        "content": "<p>I would like some advice on the way forward.</p>",
        "id": 197181717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589219706
    },
    {
        "content": "<p>Previously <code>init.data.nat.lemmas</code> imported <code>init.algebra.functions</code> and hence the entire algebraic hierarchy in core.<br>\nNow <code>init.algebra.functions</code> only imports <code>init.algebra.order</code>, and hence <code>init.algebra.{group,field,ordered_ring}</code> etc can all be moved out of core.</p>",
        "id": 197181902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589219789
    },
    {
        "content": "<p>I had to prove something like 20 lemmas specifically for <code>nat</code> and <code>int</code> that would otherwise follow from an <code>ordered_(semi)ring</code> instance.</p>",
        "id": 197182022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589219852
    },
    {
        "content": "<p>Wow, so this really is the light at the end of the tunnel?</p>",
        "id": 197182138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589219897
    },
    {
        "content": "<p>Also, <code>nat</code> now has a personal <code>has_dvd</code> instance, and <code>int</code> its own <code>has_sub</code> instance, because they can't get them from <code>comm_semiring</code> resp. <code>add_group</code>.</p>",
        "id": 197182155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589219910
    },
    {
        "content": "<p>When you posted that graph earlier I was just thinking that this might be impossible</p>",
        "id": 197182168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589219916
    },
    {
        "content": "<p>Nat also has its own has_pow instance though, and this causes lots of problems</p>",
        "id": 197182266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589219972
    },
    {
        "content": "<p>But mine are defeq to what you would get otherwise</p>",
        "id": 197182300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589219990
    },
    {
        "content": "<p>I was hoping you'd say that :-)</p>",
        "id": 197182327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589220001
    },
    {
        "content": "<p>So, for <a href=\"https://github.com/leanprover-community/lean/issues/229\">lean#229</a> should I now remove all the <code>init.algebra.*</code> stuff from core? Or should I wait for a bit, so that people can look at what the PR looks like now?</p>",
        "id": 197201501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589229434
    },
    {
        "content": "<p>For me, it would be easier to look at a version with deleted code (as opposed to commented out or not imported anymore).</p>",
        "id": 197203205,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589230349
    },
    {
        "content": "<p>I wonder what should we do with copyrights when we move code to mathlib, especially when we move code out of files (c) Microsoft to files (c) list of authors.</p>",
        "id": 197203339,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589230421
    },
    {
        "content": "<p>It would be more polite to ask Leo about this copyright thing.</p>",
        "id": 197203517,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589230512
    },
    {
        "content": "<p>Who volunteers to ask Leo?</p>",
        "id": 197204895,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589231246
    },
    {
        "content": "<p>I've removed the unshackled files, but I haven't yet cleaned up commented out code.</p>",
        "id": 197205318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589231429
    },
    {
        "content": "<p>Going to bed now.</p>",
        "id": 197205321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589231435
    },
    {
        "content": "<p>Others should feel absolutely free to also push to this PR branch</p>",
        "id": 197205334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589231449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core/near/197204895\">said</a>:</p>\n<blockquote>\n<p>Who volunteers to ask Leo?</p>\n</blockquote>\n<p>I volunteer Kevin. But I think it should be pretty easy to explain. We saw that Lean 4 removed a lot of maths from the core library hence we want to do the same, and we have a technical question about headers.</p>",
        "id": 197206451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589232162
    },
    {
        "content": "<p>I can certainly do it</p>",
        "id": 197210501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589234701
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>python3 script/gen_constants_cpp.py src/library/constants.txt\n<span class=\"c1\"># ------------------------------------------------------</span>\nWarning: generated <span class=\"k\">function</span> <span class=\"s1\">&#39;get_le_refl_name&#39;</span> is not used in the <span class=\"nb\">source</span> code\nWarning: generated <span class=\"k\">function</span> <span class=\"s1\">&#39;get_mul_one_name&#39;</span> is not used in the <span class=\"nb\">source</span> code\nWarning: generated <span class=\"k\">function</span> <span class=\"s1\">&#39;get_mul_zero_name&#39;</span> is not used in the <span class=\"nb\">source</span> code\nWarning: generated <span class=\"k\">function</span> <span class=\"s1\">&#39;get_zero_le_one_name&#39;</span> is not used in the <span class=\"nb\">source</span> code\nWarning: generated <span class=\"k\">function</span> <span class=\"s1\">&#39;get_zero_lt_one_name&#39;</span> is not used in the <span class=\"nb\">source</span> code\nWarning: generated <span class=\"k\">function</span> <span class=\"s1\">&#39;get_zero_mul_name&#39;</span> is not used in the <span class=\"nb\">source</span> code\n</code></pre></div>",
        "id": 197373104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589351479
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>lean ./tests/lean/run/check_constants.lean <span class=\"p\">|</span> grep error <span class=\"p\">|</span> sed <span class=\"s1\">&#39;s/\\/home.*error/error/&#39;</span>\n<span class=\"c1\"># ------------------------------------------------------</span>\nerror: identifier <span class=\"s1\">&#39;add_comm_group&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;add_comm_semigroup&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;add_group&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;add_monoid&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;distrib&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;field&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.bit0_nonneg&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.bit0_pos&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.bit1_nonneg&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.bit1_pos&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.nat_abs_bit0_step&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.nat_abs_bit1_nonneg_step&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.ne_neg_of_ne&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.ne_neg_of_pos&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.ne_of_nat_ne_nonneg_case&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.neg_ne_of_pos&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.neg_ne_zero_of_ne&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.one_nonneg&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.one_pos&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.zero_ne_neg_of_ne&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;int.zero_nonneg&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;left_distrib&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;linear_ordered_ring&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;linear_ordered_semiring&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;monoid&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;mul_one&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;mul_zero&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;mul_zero_class&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;right_distrib&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;ring&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;semiring&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;zero_le_one&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;zero_lt_one&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;zero_mul&#39;</span> is not a constant, namespace nor attribute\n</code></pre></div>",
        "id": 197373124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589351505
    },
    {
        "content": "<p>How much of these constants do we really want to keep in core?</p>",
        "id": 197373135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589351521
    },
    {
        "content": "<p>All the <code>int.*</code> stuff should probably stay. But whatever comes after that, I would rather see the end of it.</p>",
        "id": 197373208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589351565
    },
    {
        "content": "<p>We can have <code>nat.left_distrib</code> and <code>int.left_distrib</code> in core, and the general <code>left_distrib</code> in mathlib.</p>",
        "id": 197373235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589351595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do we want to keep all those constants? I at least want <code>ordered_monoid</code> out of core. Which means that I need to reprove things like <code>neg_of_neg_pos</code> for <code>int</code> if we want to keep all the <code>int.*</code>. How important is that?</p>",
        "id": 197380613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589357844
    },
    {
        "content": "<p>I don't see any way to remove the stuff about integers.  This is required by the equation compiler to prove that <code>-42 ≠ 358</code>.</p>",
        "id": 197385448,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589360964
    },
    {
        "content": "<p>Ok</p>",
        "id": 197385602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589361044
    },
    {
        "content": "<p>I'll reprove the ordered ring stuff for <code>int</code></p>",
        "id": 197385614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589361053
    },
    {
        "content": "<p>Ok, now the list looks like this</p>\n<div class=\"codehilite\"><pre><span></span><code>lean ./tests/lean/run/check_constants.lean <span class=\"p\">|</span> grep error <span class=\"p\">|</span> sed <span class=\"s1\">&#39;s/\\/home.*error/error/&#39;</span>\n<span class=\"c1\"># -------------------------------------</span>\nerror: identifier <span class=\"s1\">&#39;add_comm_group&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;add_comm_semigroup&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;add_group&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;add_monoid&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;distrib&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;field&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;left_distrib&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;linear_ordered_ring&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;linear_ordered_semiring&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;monoid&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;mul_one&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;mul_zero&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;mul_zero_class&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;right_distrib&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;ring&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;semiring&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;zero_le_one&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;zero_lt_one&#39;</span> is not a constant, namespace nor attribute\nerror: identifier <span class=\"s1\">&#39;zero_mul&#39;</span> is not a constant, namespace nor attribute\n</code></pre></div>",
        "id": 197407881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589374643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> How do I tell lean that we want to move this out of core?</p>",
        "id": 197407910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589374666
    },
    {
        "content": "<p>You've already removed it from <code>constants.txt</code>?</p>",
        "id": 197408122,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589374774
    },
    {
        "content": "<p>No, I've not</p>",
        "id": 197408532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589374940
    },
    {
        "content": "<p>I'll rerun the python script</p>",
        "id": 197408541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589374945
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>python3 script/gen_constants_cpp.py src/library/constants.txt\n<span class=\"c1\"># -----------------------------------</span>\nWarning: generated <span class=\"k\">function</span> <span class=\"s1\">&#39;get_le_refl_name&#39;</span> is not used in the <span class=\"nb\">source</span> code\nWarning: generated <span class=\"k\">function</span> <span class=\"s1\">&#39;get_mul_one_name&#39;</span> is not used in the <span class=\"nb\">source</span> code\nWarning: generated <span class=\"k\">function</span> <span class=\"s1\">&#39;get_mul_zero_name&#39;</span> is not used in the <span class=\"nb\">source</span> code\nWarning: generated <span class=\"k\">function</span> <span class=\"s1\">&#39;get_zero_le_one_name&#39;</span> is not used in the <span class=\"nb\">source</span> code\nWarning: generated <span class=\"k\">function</span> <span class=\"s1\">&#39;get_zero_lt_one_name&#39;</span> is not used in the <span class=\"nb\">source</span> code\nWarning: generated <span class=\"k\">function</span> <span class=\"s1\">&#39;get_zero_mul_name&#39;</span> is not used in the <span class=\"nb\">source</span> code\n</code></pre></div>",
        "id": 197408591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589374973
    },
    {
        "content": "<p>Is that bad?</p>",
        "id": 197408595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589374977
    },
    {
        "content": "<p>I've pushed what I have so far</p>",
        "id": 197409158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589375232
    },
    {
        "content": "<p>You need to remove more.</p>",
        "id": 197409585,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589375409
    },
    {
        "content": "<p>Ok, I should do this manually? Not using some script?</p>",
        "id": 197409668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589375454
    },
    {
        "content": "<p>The contents of <code>constants.txt</code> are human-edited.</p>",
        "id": 197409762,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589375497
    },
    {
        "content": "<p>Ok, I pushed again</p>",
        "id": 197410601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589375843
    },
    {
        "content": "<p>Errors during make:</p>\n<div class=\"codehilite\"><pre><span></span><code>/home/jmc/data/math/lean/src/library/app_builder.cpp: In member function ‘lean::expr lean::app_builder::mk_partial_left_distrib(const lean::expr&amp;)’:\n/home/jmc/data/math/lean/src/library/app_builder.cpp:742:77: error: ‘get_distrib_name’ was not declared in this scope; did you mean ‘get_string_name’?\n  742 |         auto A_distrib = m_ctx.mk_class_instance(::lean::mk_app(mk_constant(get_distrib_name(), {lvl}), A));\n      |                                                                             ^~~~~~~~~~~~~~~~\n      |                                                                             get_string_name\n/home/jmc/data/math/lean/src/library/app_builder.cpp:747:43: error: ‘get_left_distrib_name’ was not declared in this scope; did you mean ‘get_left_comm_name’?\n  747 |         return ::lean::mk_app(mk_constant(get_left_distrib_name(), {lvl}), A, *A_distrib);\n      |                                           ^~~~~~~~~~~~~~~~~~~~~\n      |                                           get_left_comm_name\n/home/jmc/data/math/lean/src/library/app_builder.cpp: In member function ‘lean::expr lean::app_builder::mk_partial_right_distrib(const lean::expr&amp;)’:\n/home/jmc/data/math/lean/src/library/app_builder.cpp:752:77: error: ‘get_distrib_name’ was not declared in this scope; did you mean ‘get_string_name’?\n  752 |         auto A_distrib = m_ctx.mk_class_instance(::lean::mk_app(mk_constant(get_distrib_name(), {lvl}), A));\n      |                                                                             ^~~~~~~~~~~~~~~~\n      |                                                                             get_string_name\n/home/jmc/data/math/lean/src/library/app_builder.cpp:757:43: error: ‘get_right_distrib_name’ was not declared in this scope; did you mean ‘get_iff_intro_name’?\n  757 |         return ::lean::mk_app(mk_constant(get_right_distrib_name(), {lvl}), A, *A_distrib);\n      |                                           ^~~~~~~~~~~~~~~~~~~~~~\n      |                                           get_iff_intro_name\n</code></pre></div>",
        "id": 197410923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589375977
    },
    {
        "content": "<p>I'm confused about the internals of lean</p>",
        "id": 197411051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589376010
    },
    {
        "content": "<p>Ok, so apparently you removed <code>left_distrib</code>, <code>right_distrib</code>, and <code>distrib</code> even though they're used.</p>",
        "id": 197411808,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589376338
    },
    {
        "content": "<p>Mmmh, you might want to clean up <code>app_builder.h</code> and <code>app_builder.cpp</code>.</p>",
        "id": 197411939,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589376384
    },
    {
        "content": "<p>I can also clean up if you're scared.</p>",
        "id": 197412047,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589376429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Yes, please go ahead.</p>",
        "id": 197413521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589377097
    },
    {
        "content": "<p>I can help again with fixing the tests.</p>",
        "id": 197413534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589377104
    },
    {
        "content": "<p>But this part, I don't really know what to do.</p>",
        "id": 197413544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589377111
    },
    {
        "content": "<p>Done: <a href=\"https://github.com/leanprover-community/lean/pull/229/commits/245b721f98fd11f565dfe8f985cc86381f896e4d\">https://github.com/leanprover-community/lean/pull/229/commits/245b721f98fd11f565dfe8f985cc86381f896e4d</a></p>",
        "id": 197415772,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589378111
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 197415812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589378132
    },
    {
        "content": "<p><span aria-label=\"head bandage\" class=\"emoji emoji-1f915\" role=\"img\" title=\"head bandage\">:head_bandage:</span> There are 66 failing tests <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 197430140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589384068
    },
    {
        "content": "<p>Where do I actually find this test</p>\n<div class=\"codehilite\"><pre><span></span><code>1 - style_check (Failed)\n</code></pre></div>",
        "id": 197442782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589389027
    },
    {
        "content": "<p>This is a python script.  Apparently I included <code>util.h</code> twice in <code>app_builder.cpp</code>.  Just delete the second occurrence.</p>",
        "id": 197443034,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589389112
    },
    {
        "content": "<p>What should I do with a test like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">trace_state</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">neg_neg</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197444935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589389805
    },
    {
        "content": "<p>What is it supposed to check?</p>",
        "id": 197450414,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589392097
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/issues/1862\">https://github.com/leanprover/lean/issues/1862</a></p>",
        "id": 197450552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589392165
    },
    {
        "content": "<p>There's lots of tests like that.</p>",
        "id": 197450583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589392174
    },
    {
        "content": "<p>They test for a specific bug report.</p>",
        "id": 197450624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589392185
    },
    {
        "content": "<p>I'd declare a custom class with <code>extends has_neg</code> and an axiom <code>neg_neg</code>.</p>",
        "id": 197450827,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589392252
    },
    {
        "content": "<p>wooah, I try to prove it with <code>trivial</code>. What even is that?</p>",
        "id": 197450832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589392257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core/near/197450827\">said</a>:</p>\n<blockquote>\n<p>I'd declare a custom class with <code>extends has_neg</code> and an axiom <code>neg_neg</code>.</p>\n</blockquote>\n<p>I see. That seems like a reasonable approach.</p>",
        "id": 197451053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589392348
    },
    {
        "content": "<p>In case anyone wants to contribute:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"mi\">588</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_auto_quote1</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">609</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_bin_tree</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">640</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cc_ac1</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">641</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cc_ac2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">642</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cc_ac3</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">644</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cc_ac5</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">645</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cc_ac_bug</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">687</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_conv_tac1</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">688</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cpdt</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">742</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_dsimp_options</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">744</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_dsimp_proj</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">767</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">768</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch_attr_to_defs</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">794</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_eq_cases_on</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">815</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_exhaustive_vm_impl_test</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">830</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_funext_tactic</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">836</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_handthen</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">848</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_hinst_lemma1</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">849</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_hinst_lemmas1</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">892</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_interactive1</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">894</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_intros_defeq_canonizer_bug</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">929</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_local_attribute</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">935</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_mario_type_context</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">977</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_mrw</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">987</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_name_resolution_with_params_bug</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">994</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_nat_sub_ematch</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1053</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_psum_wf_rec</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1089</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_rw1</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1095</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_sebastien_coe_simp</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1110</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_show_goal</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1127</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_simp_lemma_issue</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1128</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_simp_lemmas_with_mvars</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1139</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_simp_tc_err</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1142</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_simp_zeta</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1152</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_assert_define</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1154</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch1</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1155</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1156</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch3</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1157</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch_alg_issue</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1162</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_tests</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1211</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_term_app2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1224</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_u_eq_max_u_v</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1247</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_using_smt2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1287</span> <span class=\"bp\">-</span> <span class=\"n\">leanittest_goal_info</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197461174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589396830
    },
    {
        "content": "<p>I just pushed a fix of 10 tests. (Not included on the list above.)</p>",
        "id": 197461212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589396858
    },
    {
        "content": "<p>Looks like your local path snuck into the test output: <a href=\"https://github.com/leanprover-community/lean/pull/229/files#diff-9aa4d9cb8974761857542a0004292d74R1\">https://github.com/leanprover-community/lean/pull/229/files#diff-9aa4d9cb8974761857542a0004292d74R1</a></p>",
        "id": 197461429,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589396942
    },
    {
        "content": "<p>Ooh, I though I had fixed that.</p>",
        "id": 197462249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589397324
    },
    {
        "content": "<p>Should be fixed now</p>",
        "id": 197462389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589397376
    },
    {
        "content": "<p>I've broken runtest 1442: <a href=\"https://github.com/leanprover/lean/issues/1442\">https://github.com/leanprover/lean/issues/1442</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"n\">d₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">d₂</span> <span class=\"bp\">=</span> <span class=\"n\">n₂</span> <span class=\"bp\">*</span> <span class=\"n\">d₁</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">mul&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"n\">d₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">d₁</span> <span class=\"bp\">*</span> <span class=\"n\">d₂</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">mul&#39;</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul&#39;</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ⟨</span><span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"n\">d₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">n₃</span><span class=\"o\">,</span> <span class=\"n\">d₃</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">n₄</span><span class=\"o\">,</span> <span class=\"n\">d₄</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">d₃</span> <span class=\"bp\">=</span> <span class=\"n\">n₃</span> <span class=\"bp\">*</span> <span class=\"n\">d₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">n₂</span> <span class=\"bp\">*</span> <span class=\"n\">d₄</span> <span class=\"bp\">=</span> <span class=\"n\">n₄</span> <span class=\"bp\">*</span> <span class=\"n\">d₂</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d₃</span> <span class=\"bp\">*</span> <span class=\"n\">d₄</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n₃</span> <span class=\"bp\">*</span> <span class=\"n\">n₄</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d₁</span> <span class=\"bp\">*</span> <span class=\"n\">d₂</span><span class=\"o\">),</span>\n    <span class=\"k\">by</span> <span class=\"n\">cc</span>\n</code></pre></div>\n\n\n<p>This is specifically about <code>cc</code>, afaict.<br>\nWhat should I do?</p>",
        "id": 197463999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589398084
    },
    {
        "content": "<p>do you have the proof that <code>*</code> is commutative and associative?</p>",
        "id": 197464139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589398147
    },
    {
        "content": "<p>Have you read <a href=\"https://github.com/leanprover-community/lean/pull/229#issuecomment-627220223\">my comment</a>?  I'm pretty sure it's this:</p>\n<blockquote>\n<p><code>(by cc : a + b = b + a)</code> requires instances for <code>is_associative (+)</code> and <code>is_commutative (+)</code>.  Add them back (locally?).  Same goes for <code>ac_refl</code>.</p>\n</blockquote>",
        "id": 197464151,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589398154
    },
    {
        "content": "<p>Ok, thanks</p>",
        "id": 197464391,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589398267
    },
    {
        "content": "<p>Hmm, how should I make this one happy?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">u</span>\n\n<span class=\"c1\">-- jmc added this</span>\n<span class=\"n\">class</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- jmc added this</span>\n<span class=\"kn\">instance</span> <span class=\"n\">aa</span> <span class=\"o\">:</span> <span class=\"n\">is_associative</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">ac</span> <span class=\"o\">:</span> <span class=\"n\">is_commutative</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">constant</span> <span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">is_associative</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">lc</span> <span class=\"o\">:</span> <span class=\"n\">is_left_cancel</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">rc</span> <span class=\"o\">:</span> <span class=\"n\">is_right_cancel</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">ld</span> <span class=\"o\">:</span> <span class=\"n\">is_left_distrib</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">rd</span> <span class=\"o\">:</span> <span class=\"n\">is_right_distrib</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">x3</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span> <span class=\"n\">x6</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x1</span><span class=\"bp\">*</span><span class=\"n\">x4</span> <span class=\"bp\">=</span> <span class=\"n\">x1</span> <span class=\"bp\">→</span> <span class=\"n\">x3</span><span class=\"bp\">*</span><span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">x5</span><span class=\"bp\">*</span><span class=\"n\">x5</span> <span class=\"bp\">→</span> <span class=\"n\">x5</span> <span class=\"bp\">=</span> <span class=\"n\">x4</span> <span class=\"bp\">→</span> <span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"bp\">→</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x1</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x6</span><span class=\"bp\">*</span><span class=\"n\">x3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cc</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"n\">y2</span> <span class=\"n\">x2</span> <span class=\"n\">x3</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span> <span class=\"n\">x6</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"bp\">+</span> <span class=\"n\">y2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y2</span> <span class=\"bp\">+</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x3</span><span class=\"bp\">*</span><span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">x5</span><span class=\"bp\">*</span><span class=\"n\">x5</span> <span class=\"bp\">→</span> <span class=\"n\">x5</span> <span class=\"bp\">=</span> <span class=\"n\">x4</span> <span class=\"bp\">→</span> <span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y2</span> <span class=\"bp\">+</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"bp\">+</span> <span class=\"n\">y2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x6</span><span class=\"bp\">*</span><span class=\"n\">x3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cc</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"n\">y2</span> <span class=\"n\">y3</span> <span class=\"n\">x2</span> <span class=\"n\">x3</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span> <span class=\"n\">x6</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"bp\">+</span> <span class=\"n\">y2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y3</span> <span class=\"bp\">+</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x3</span><span class=\"bp\">*</span><span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">x5</span><span class=\"bp\">*</span><span class=\"n\">x5</span> <span class=\"bp\">→</span> <span class=\"n\">x5</span> <span class=\"bp\">=</span> <span class=\"n\">x4</span> <span class=\"bp\">→</span> <span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"bp\">→</span> <span class=\"n\">y2</span> <span class=\"bp\">=</span> <span class=\"n\">y3</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y2</span> <span class=\"bp\">+</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"bp\">+</span> <span class=\"n\">y3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x6</span><span class=\"bp\">*</span><span class=\"n\">x3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cc</span>\n</code></pre></div>",
        "id": 197467346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589399625
    },
    {
        "content": "<p>There's a whole bunch of tests using <code>smt</code> and <code>eblast</code> etc. And I have no idea what those are.</p>",
        "id": 197472511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589401453
    },
    {
        "content": "<p>I've pushed what I've done so far. That's it for tonight. I think most of the remaining tests require some help.</p>",
        "id": 197474840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589402476
    },
    {
        "content": "<p>We're now down to 20 failing tests:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"mi\">559</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_aexp</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">642</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cc_ac3</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">644</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cc_ac5</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">688</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cpdt</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">767</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">768</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch_attr_to_defs</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">815</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_exhaustive_vm_impl_test</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n<span class=\"bp\">~~</span>        <span class=\"mi\">987</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_name_resolution_with_params_bug</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span><span class=\"bp\">~~</span>\n        <span class=\"mi\">994</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_nat_sub_ematch</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1127</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_simp_lemma_issue</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n<span class=\"bp\">~~</span>        <span class=\"mi\">1128</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_simp_lemmas_with_mvars</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span><span class=\"bp\">~~</span>\n        <span class=\"mi\">1152</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_assert_define</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1154</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch1</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1155</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1156</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch3</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1157</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch_alg_issue</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1162</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_tests</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n<span class=\"bp\">~~</span>        <span class=\"mi\">1211</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_term_app2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span><span class=\"bp\">~~</span>\n<span class=\"bp\">~~</span>        <span class=\"mi\">1224</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_u_eq_max_u_v</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span><span class=\"bp\">~~</span>\n        <span class=\"mi\">1247</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_using_smt2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197505957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589431711
    },
    {
        "content": "<p>Down to 16</p>",
        "id": 197506351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589432396
    },
    {
        "content": "<p>Down to 10</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"mi\">559</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_aexp</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">644</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cc_ac5</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">688</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cpdt</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">767</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">768</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch_attr_to_defs</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n<span class=\"bp\">~~</span>        <span class=\"mi\">815</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_exhaustive_vm_impl_test</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span><span class=\"bp\">~~</span>\n        <span class=\"mi\">1127</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_simp_lemma_issue</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1155</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1156</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch3</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1157</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch_alg_issue</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1247</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_using_smt2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197507470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589434228
    },
    {
        "content": "<p>I'm removing <code>gcd</code> from core. Is that ok? Or is this something that should strictly stay there for VM reasons?</p>",
        "id": 197507525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589434331
    },
    {
        "content": "<p>I don't think so. It does seem a bit out of place, come to think of it</p>",
        "id": 197507761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589434751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Ok, then I feel good about removing it from the <code>exhaustive_vm_impl_test</code>.</p>",
        "id": 197510140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589437771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Do we want all these <code>smt</code> and <code>eblast</code> tests on <code>ring</code> and <code>field</code> if we are moving those structures out of core? I have no idea what <code>smt</code> and <code>eblast</code> do. I've been able to fix a bunch of tests by changing <code>add_comm</code> to <code>nat.add_comm</code>. But now I'm stuck.</p>",
        "id": 197511565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439214
    },
    {
        "content": "<p>You should be able to locally define <code>ring</code> and <code>field</code> in the test(s)</p>",
        "id": 197511849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589439255
    },
    {
        "content": "<p>That's not enough, right?</p>",
        "id": 197511863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439271
    },
    {
        "content": "<p>You also need a ton of supporting lemmas</p>",
        "id": 197511869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439283
    },
    {
        "content": "<p>they work based on attributes like <code>simp</code> does</p>",
        "id": 197511877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589439292
    },
    {
        "content": "<p>the lemmas don't have to be proven</p>",
        "id": 197511893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589439312
    },
    {
        "content": "<p>That's what I mean</p>",
        "id": 197511894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439313
    },
    {
        "content": "<p>Aha</p>",
        "id": 197511899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439317
    },
    {
        "content": "<p>But still. It would mean that these tests become quite a bit longer</p>",
        "id": 197511914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439333
    },
    {
        "content": "<p>I guess it depends on the test</p>",
        "id": 197511927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589439355
    },
    {
        "content": "<p>For 56 tests I could do it (-;</p>",
        "id": 197511976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439380
    },
    {
        "content": "<p>I mean, is it something that is actually integration testing all these attributes in a library, or is it some particular feature of smt</p>",
        "id": 197512011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589439419
    },
    {
        "content": "<p>I can also dump <code>init/algebra</code> in <code>tests/lean/run/algebra</code> and import stuff.</p>",
        "id": 197512018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core/near/197512011\">said</a>:</p>\n<blockquote>\n<p>I mean, is it something that is actually integration testing all these attributes in a library, or is it some particular feature of smt</p>\n</blockquote>\n<p>How would I know?</p>",
        "id": 197512026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439432
    },
    {
        "content": "<p>These tests are mostly a mystery to me.</p>",
        "id": 197512035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439443
    },
    {
        "content": "<p>which one are you looking at now?</p>",
        "id": 197512047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589439458
    },
    {
        "content": "<p>It's code, and if it compiles I'm happy. They mostly don't contain comments explaining what they test.</p>",
        "id": 197512049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439463
    },
    {
        "content": "<p>Any of</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"mi\">559</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_aexp</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">644</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cc_ac5</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">688</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cpdt</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">767</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">768</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch_attr_to_defs</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1127</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_simp_lemma_issue</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1155</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1156</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch3</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1157</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch_alg_issue</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1247</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_using_smt2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197512065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439480
    },
    {
        "content": "<p>I've fixed all the others</p>",
        "id": 197512116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439487
    },
    {
        "content": "<p><code>aexp.lean</code> doesn't have any algebra in it</p>",
        "id": 197512259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589439614
    },
    {
        "content": "<p>Right... so why is it failing?</p>",
        "id": 197512280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439641
    },
    {
        "content": "<p>what errors are you getting? <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 197512292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589439655
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">8</span> <span class=\"n\">goals</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n<span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a_2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n<span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"n\">uname</span><span class=\"o\">,</span>\n<span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">var</span> <span class=\"n\">a_2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n<span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">a_2</span> <span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_4</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">plus</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n<span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">a_2</span> <span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_4</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">times</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n<span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a_2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n<span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"n\">uname</span><span class=\"o\">,</span>\n<span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">var</span> <span class=\"n\">a_2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n<span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">a_2</span> <span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_4</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">plus</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n<span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">a_2</span> <span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_4</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">times</span> <span class=\"n\">a_2</span> <span class=\"n\">a_3</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 197512352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You say that it doesn't have any algebra in it. But it is building expressions with <code>*</code> and <code>+</code>.</p>",
        "id": 197512513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439854
    },
    {
        "content": "<p>I think it is applying those to <code>nat</code>s. And core no longer knows that <code>nat</code> is a <code>comm_semiring</code>. But all the relevant lemmas are there.</p>",
        "id": 197512538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439896
    },
    {
        "content": "<p>Adding the <code>ematch</code> attribute to <code>nat.zero_mul</code>, <code>nat.zero_add</code>, <code>nat.add_zero</code>, <code>nat.mul_zero</code> didn't help.</p>",
        "id": 197512563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589439945
    },
    {
        "content": "<p>It's weird; I think the theorem being proven is actually true without any axioms about nat</p>",
        "id": 197512650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589440006
    },
    {
        "content": "<p>the only thing that should be necessary is that <code>value</code> has + * 0 1</p>",
        "id": 197512658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589440023
    },
    {
        "content": "<p>I thought it was simplifying <code>0 + x = x</code> and so on but that's not actually needed</p>",
        "id": 197512680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589440054
    },
    {
        "content": "<p>but the proof method is really bizarre</p>",
        "id": 197512691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589440075
    },
    {
        "content": "<p>don't try this at home, kids</p>",
        "id": 197512739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589440085
    },
    {
        "content": "<p>I just managed to prove the theorem manually using no theorems at all about <code>value</code></p>",
        "id": 197513171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589440443
    },
    {
        "content": "<p>What is the state after <code>eblast</code>?</p>",
        "id": 197513445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589440664
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n<span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a_2</span>\n<span class=\"n\">facts</span><span class=\"o\">:</span>\n<span class=\"o\">{</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n<span class=\"n\">equalities</span><span class=\"o\">:</span>\n<span class=\"o\">{{</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">),</span> <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))},</span>\n <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">}}</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 197513525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589440703
    },
    {
        "content": "<p>As a quick primer on how to read the state, each of the lists in \"equalities\" are collections of terms that smt knows how to prove are equal, and the collection as a whole is closed under taking subterms. What was supposed to happen was that since <code>aval a_a s</code> and <code>a_2</code> are in the same group, and <code>aval a_a_1 s</code> and <code>a</code> are as well, it will deduce that <code>a_2 + a</code> and <code>aval a_a s + aval a_a_1 s</code> are also in the same group, closing the goal. However, they are in different groups. Maybe the typeclass instance on them is different? I suspect that one is addition on <code>nat</code> and the other is addition on <code>value</code>, and the <code>@[reducible]</code> annotation on <code>value</code> is confusing things</p>",
        "id": 197514217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589441214
    },
    {
        "content": "<p>You could try replacing <code>value</code> with <code>nat</code> everywhere and see if that fixes things</p>",
        "id": 197514333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589441299
    },
    {
        "content": "<p>although if so this might just be an actual bug</p>",
        "id": 197514373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589441329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core/near/197514333\">said</a>:</p>\n<blockquote>\n<p>You could try replacing <code>value</code> with <code>nat</code> everywhere and see if that fixes things</p>\n</blockquote>\n<p>Yup, now the error is gone</p>",
        "id": 197514437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589441386
    },
    {
        "content": "<p>What do the two terms I mentioned look like with pp.all?</p>",
        "id": 197514684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589441548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you mean this ¿?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">a_ih_a_1</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">facts</span><span class=\"o\">:</span>\n<span class=\"o\">{</span><span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">)}</span>\n<span class=\"n\">equalities</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">}}</span>\n</code></pre></div>",
        "id": 197514740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589441620
    },
    {
        "content": "<p>after <code>eblast</code></p>",
        "id": 197514755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589441642
    },
    {
        "content": "<p>How do I print them?</p>",
        "id": 197514822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589441676
    },
    {
        "content": "<p><code>goals accomplished</code></p>",
        "id": 197514828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589441682
    },
    {
        "content": "<p>oh, I mean in the broken version</p>",
        "id": 197514841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589441694
    },
    {
        "content": "<p>I mean, sure we could change the statement and fix the test, but that kind of defeats the purpose of having a test</p>",
        "id": 197514882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589441748
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span>\n<span class=\"n\">facts</span><span class=\"o\">:</span>\n<span class=\"o\">{</span><span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">),</span>\n <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">value</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">value</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">)}</span>\n<span class=\"n\">equalities</span><span class=\"o\">:</span>\n<span class=\"o\">{{</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">),</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">),</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)),</span>\n  <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_add</span> <span class=\"n\">a_2</span> <span class=\"n\">a</span><span class=\"o\">))},</span>\n <span class=\"o\">{</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_add</span> <span class=\"n\">a_2</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_add</span> <span class=\"n\">a_2</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_add</span> <span class=\"n\">a_2</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span>\n  <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span>\n  <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">value</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">}}</span>\n</code></pre></div>",
        "id": 197514899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589441762
    },
    {
        "content": "<p><code>@has_add.add.{0} nat nat.has_add a_2 a</code><br>\n<code>@has_add.add.{0} imp.value nat.has_add (imp.aval a_a s) (imp.aval a_a_1 s)</code></p>",
        "id": 197514969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589441795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core/near/197514882\">said</a>:</p>\n<blockquote>\n<p>I mean, sure we could change the statement and fix the test, but that kind of defeats the purpose of having a test</p>\n</blockquote>\n<p>Depends on what we're testing, I guess.</p>",
        "id": 197514974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589441796
    },
    {
        "content": "<p>the adds are indeed different</p>",
        "id": 197514990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589441814
    },
    {
        "content": "<p>So, what do we do now?</p>",
        "id": 197519133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589441972
    },
    {
        "content": "<p>hm, here's a version of the proof that captures the successful state just before close runs:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">aval_asimp_const</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"o\">]</span>\n <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"n\">destruct</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span>\n<span class=\"o\">{</span> <span class=\"n\">destruct</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">ematch</span><span class=\"o\">,</span> <span class=\"n\">ematch</span><span class=\"o\">,</span>\n    <span class=\"n\">smt_tactic</span><span class=\"bp\">.</span><span class=\"n\">ematch</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">smt_tactic</span><span class=\"bp\">.</span><span class=\"n\">trace_state</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">admit</span><span class=\"o\">}},</span>\n<span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">admit</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">equalities</span><span class=\"o\">:</span>\n<span class=\"bp\">...</span>\n <span class=\"o\">{</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">value</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_add</span> <span class=\"n\">a_2</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">}}</span>\n</code></pre></div>",
        "id": 197519636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589442336
    },
    {
        "content": "<p>I have no idea what that means <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 197519658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589442359
    },
    {
        "content": "<p>I feel a bit like I'm a proxy between the master and the machine...</p>",
        "id": 197519727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589442407
    },
    {
        "content": "<p>I've used smt a grand total of 0 times ever, but I know the theory</p>",
        "id": 197519747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589442434
    },
    {
        "content": "<p>there is a commented out trace option for smt, what does that show?</p>",
        "id": 197519774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589442459
    },
    {
        "content": "<p><code>pp.all</code> or not?</p>",
        "id": 197519864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589442517
    },
    {
        "content": "<p>With <code>pp.all</code> you'll get a crapton of shit</p>",
        "id": 197519877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589442527
    },
    {
        "content": "<p>Use my version of the proof</p>",
        "id": 197519917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589442552
    },
    {
        "content": "<p>just posted above</p>",
        "id": 197519926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589442558
    },
    {
        "content": "<p>it stops at the first interesting point</p>",
        "id": 197519939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589442570
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">65</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">information</span> <span class=\"n\">trace</span> <span class=\"n\">output</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a_2</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a_2</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span>\n\n<span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">65</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span> <span class=\"n\">information</span> <span class=\"n\">trace</span> <span class=\"n\">output</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n<span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197520025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589442626
    },
    {
        "content": "<p>And</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">information</span> <span class=\"n\">trace</span> <span class=\"n\">output</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n<span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a_2</span>\n<span class=\"n\">facts</span><span class=\"o\">:</span>\n<span class=\"o\">{</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n<span class=\"n\">equalities</span><span class=\"o\">:</span>\n<span class=\"o\">{{</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">),</span> <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))},</span>\n <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">}}</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 197520075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589442671
    },
    {
        "content": "<p>For comparison, here is my version:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">information</span> <span class=\"n\">trace</span> <span class=\"n\">output</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a_2</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a_2</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span>\n<span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span> <span class=\"n\">information</span> <span class=\"n\">trace</span> <span class=\"n\">output</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n<span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">65</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">information</span> <span class=\"n\">trace</span> <span class=\"n\">output</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n<span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a_2</span>\n<span class=\"n\">facts</span><span class=\"o\">:</span>\n<span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n<span class=\"n\">equalities</span><span class=\"o\">:</span>\n<span class=\"o\">{{</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">),</span> <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))},</span>\n <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">}}</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 197520246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589442802
    },
    {
        "content": "<p>Am I supposed to solve some problem now? I still have no clue what I'm looking for.</p>",
        "id": 197520340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589442878
    },
    {
        "content": "<p>I think that I would like to learn about SMT, but maybe not while trying  to get algebra out of core (-;</p>",
        "id": 197520369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589442902
    },
    {
        "content": "<p>I'm just diffing</p>",
        "id": 197520413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589442946
    },
    {
        "content": "<p>I'm ~60% sure you've uncovered a bug in smt, but given that I don't know what we should do about it</p>",
        "id": 197520594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589443095
    },
    {
        "content": "<p>no one uses it or knows how it works</p>",
        "id": 197520616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589443108
    },
    {
        "content": "<p>And <code>smt</code> is 96% C++, I guess</p>",
        "id": 197520684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589443165
    },
    {
        "content": "<p>Aha, I think this might be relevant:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">aval_asimp_const</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"o\">]</span>\n  <span class=\"n\">smt_tactic</span><span class=\"bp\">.</span><span class=\"n\">get_lemmas</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">smt_tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)}}],</span>\n<span class=\"bp\">...</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_4</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_4</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_left</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_right</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">min_eq_right</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">min</span> <span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"err\">?</span><span class=\"n\">x_3</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">min_eq_left</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">min</span> <span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"err\">?</span><span class=\"n\">x_3</span><span class=\"o\">}}]}</span>\n</code></pre></div>",
        "id": 197521331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589443621
    },
    {
        "content": "<p>I assume if you run the same thing most of those theorems won't be listed</p>",
        "id": 197521363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589443654
    },
    {
        "content": "<p>Try adding</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span> <span class=\"n\">mul_one</span> <span class=\"n\">zero_mul</span> <span class=\"n\">mul_zero</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_left</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_right</span> <span class=\"n\">min_eq_right</span> <span class=\"n\">min_eq_left</span>\n</code></pre></div>\n\n\n<p>and see if it fixes the issue</p>",
        "id": 197521583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589443812
    },
    {
        "content": "<p>and then remove lemmas until it breaks again</p>",
        "id": 197521597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589443825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm back. (Had to put my daughter in bed.) With those attributes, the goal is still</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n<span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih_a_1</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a_2</span>\n<span class=\"n\">facts</span><span class=\"o\">:</span>\n<span class=\"o\">{</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n<span class=\"n\">equalities</span><span class=\"o\">:</span>\n<span class=\"o\">{{</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">),</span> <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))},</span>\n <span class=\"o\">{</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">}}</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n</code></pre></div>\n\n\n<p>just before <code>end</code>.</p>",
        "id": 197522910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589444707
    },
    {
        "content": "<p>Oh, I missed a couple: <code>nat.add_sub_cancel nat.add_sub_cancel_left</code></p>",
        "id": 197523137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589444854
    },
    {
        "content": "<p>Too bad, peanut spread...<br>\nIt's still unhappy.</p>",
        "id": 197523255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589444923
    },
    {
        "content": "<p>What do you get for this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span> <span class=\"n\">mul_one</span> <span class=\"n\">zero_mul</span> <span class=\"n\">mul_zero</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_left</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_right</span> <span class=\"n\">min_eq_right</span> <span class=\"n\">min_eq_left</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel_left</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">aval_asimp_const</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"o\">]</span>\n  <span class=\"n\">smt_tactic</span><span class=\"bp\">.</span><span class=\"n\">get_lemmas</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">smt_tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_5</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_5</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_4</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_6</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_7</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_7</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_6</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_4</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_4</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_4</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_left</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_right</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">min_eq_right</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">min</span> <span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"err\">?</span><span class=\"n\">x_3</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">min_eq_left</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">min</span> <span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"err\">?</span><span class=\"n\">x_3</span><span class=\"o\">}}]}</span>\n</code></pre></div>",
        "id": 197523453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589445015
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">69</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">information</span> <span class=\"n\">trace</span> <span class=\"n\">output</span>\n<span class=\"o\">{[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_5</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_5</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_4</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_6</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_7</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_7</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_6</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_4</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_2</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_4</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"err\">?</span><span class=\"n\">x_0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_4</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"bp\">.</span><span class=\"n\">aval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_left</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_2</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_right</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">x_1</span><span class=\"o\">)}}],</span>\n <span class=\"o\">[</span><span class=\"n\">min_eq_right</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">min</span> <span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"err\">?</span><span class=\"n\">x_3</span><span class=\"o\">}}],</span>\n <span class=\"o\">[</span><span class=\"n\">min_eq_left</span><span class=\"o\">,</span> <span class=\"n\">patterns</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">min</span> <span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"err\">?</span><span class=\"n\">x_3</span><span class=\"o\">}}]}</span>\n</code></pre></div>",
        "id": 197523527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589445062
    },
    {
        "content": "<p>oh, you are using <code>nat.mul_one</code> instead of <code>mul_one</code> et al</p>",
        "id": 197523692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589445131
    },
    {
        "content": "<p><code>mul_one</code> doesn't exist</p>",
        "id": 197523730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589445157
    },
    {
        "content": "<p>try replicating <code>mul_one</code> in this file, i.e. define a dummy <code>ring</code> and the lemmas</p>",
        "id": 197523759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589445173
    },
    {
        "content": "<p>Here's my theory: <code>ematch</code> isn't actually smart enough to realize that <code>@has_add.add nat nat.has_add</code> and <code>@has_add.add value nat.has_add</code> are the same thing, but when it tries to apply one of these typeclass theorems it is forced to unfold <code>value</code> in order to make the second thing typecheck, and then it all works</p>",
        "id": 197524117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589445365
    },
    {
        "content": "<p>Like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_mul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_zero</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197524388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589445552
    },
    {
        "content": "<p>Mark them all <code>@[ematch]</code>, otherwise yes</p>",
        "id": 197524466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589445596
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span> <span class=\"n\">mul_one</span> <span class=\"n\">zero_mul</span> <span class=\"n\">mul_zero</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_left</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_right</span> <span class=\"n\">min_eq_right</span> <span class=\"n\">min_eq_left</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel_left</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">aval_asimp_const</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"o\">]</span>\n  <span class=\"n\">smt_tactic</span><span class=\"bp\">.</span><span class=\"n\">get_lemmas</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">smt_tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">aexp</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">91</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 197524555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589445629
    },
    {
        "content": "<p>you get no output?</p>",
        "id": 197524606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589445656
    },
    {
        "content": "<p>You should go back to the original test, that was just diagnostics</p>",
        "id": 197524682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589445707
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a_2</span>\n<span class=\"n\">facts</span><span class=\"o\">:</span>\n<span class=\"o\">{</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n<span class=\"n\">equalities</span><span class=\"o\">:</span>\n<span class=\"o\">{{</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">),</span> <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)),</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))},</span>\n <span class=\"o\">{</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">a_2</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"n\">a_a_1</span><span class=\"o\">),</span>\n  <span class=\"n\">asimp_const</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">a</span><span class=\"o\">)},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a_2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">},</span>\n <span class=\"o\">{</span><span class=\"n\">aval</span> <span class=\"n\">a_a</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">aval</span> <span class=\"n\">a_a_1</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">}}</span>\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">asimp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">aval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">a_a</span> <span class=\"n\">a_a_1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 197524757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589445732
    },
    {
        "content": "<p>nooo</p>",
        "id": 197524847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589445811
    },
    {
        "content": "<p>WTH <code>aval a_a s + aval a_a_1 s</code> literally appears in two equality classes</p>",
        "id": 197524888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589445842
    },
    {
        "content": "<p>it must be the two versions of it</p>",
        "id": 197524930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589445857
    },
    {
        "content": "<p>Okay, my curiosity is satisfied. Let's just replace <code>value</code> with <code>nat</code> for the PR and maybe file an issue about this for later</p>",
        "id": 197525110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589445963
    },
    {
        "content": "<p>Are you ready for the next test?</p>",
        "id": 197525162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589445996
    },
    {
        "content": "<p>heh, I hope it's the same story 8 times</p>",
        "id": 197525181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446010
    },
    {
        "content": "<p><code>cc_ac5.lean</code> - is this one not fixed with ac instances for + and * ?</p>",
        "id": 197525236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446061
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">niverse</span> <span class=\"kn\">variables</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">aa</span> <span class=\"o\">:</span> <span class=\"n\">is_associative</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">ac</span> <span class=\"o\">:</span> <span class=\"n\">is_commutative</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">constant</span> <span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">is_associative</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">lc</span> <span class=\"o\">:</span> <span class=\"n\">is_left_cancel</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">rc</span> <span class=\"o\">:</span> <span class=\"n\">is_right_cancel</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">ld</span> <span class=\"o\">:</span> <span class=\"n\">is_left_distrib</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">rd</span> <span class=\"o\">:</span> <span class=\"n\">is_right_distrib</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">x3</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span> <span class=\"n\">x6</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x1</span><span class=\"bp\">*</span><span class=\"n\">x4</span> <span class=\"bp\">=</span> <span class=\"n\">x1</span> <span class=\"bp\">→</span> <span class=\"n\">x3</span><span class=\"bp\">*</span><span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">x5</span><span class=\"bp\">*</span><span class=\"n\">x5</span> <span class=\"bp\">→</span> <span class=\"n\">x5</span> <span class=\"bp\">=</span> <span class=\"n\">x4</span> <span class=\"bp\">→</span> <span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"bp\">→</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x1</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x6</span><span class=\"bp\">*</span><span class=\"n\">x3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cc</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"n\">y2</span> <span class=\"n\">x2</span> <span class=\"n\">x3</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span> <span class=\"n\">x6</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"bp\">+</span> <span class=\"n\">y2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y2</span> <span class=\"bp\">+</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x3</span><span class=\"bp\">*</span><span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">x5</span><span class=\"bp\">*</span><span class=\"n\">x5</span> <span class=\"bp\">→</span> <span class=\"n\">x5</span> <span class=\"bp\">=</span> <span class=\"n\">x4</span> <span class=\"bp\">→</span> <span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y2</span> <span class=\"bp\">+</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"bp\">+</span> <span class=\"n\">y2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x6</span><span class=\"bp\">*</span><span class=\"n\">x3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cc</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"n\">y2</span> <span class=\"n\">y3</span> <span class=\"n\">x2</span> <span class=\"n\">x3</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span> <span class=\"n\">x6</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"bp\">+</span> <span class=\"n\">y2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y3</span> <span class=\"bp\">+</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x3</span><span class=\"bp\">*</span><span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">x5</span><span class=\"bp\">*</span><span class=\"n\">x5</span> <span class=\"bp\">→</span> <span class=\"n\">x5</span> <span class=\"bp\">=</span> <span class=\"n\">x4</span> <span class=\"bp\">→</span> <span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span> <span class=\"bp\">→</span> <span class=\"n\">y2</span> <span class=\"bp\">=</span> <span class=\"n\">y3</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y2</span> <span class=\"bp\">+</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"bp\">+</span> <span class=\"n\">y3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x6</span><span class=\"bp\">*</span><span class=\"n\">x3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cc</span>\n</code></pre></div>\n\n\n<p>is what I have so far</p>",
        "id": 197525317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589446114
    },
    {
        "content": "<p><code>cc</code> fails on all three tests.</p>",
        "id": 197525343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589446144
    },
    {
        "content": "<p>it's a commutative ring</p>",
        "id": 197525628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446329
    },
    {
        "content": "<p>Nope it's not. The <code>[ring \\a]</code> was from the original test.</p>",
        "id": 197525716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589446414
    },
    {
        "content": "<p>Also, adding commutativity of <code>*</code> doesn't make <code>cc</code> happy.</p>",
        "id": 197525736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589446425
    },
    {
        "content": "<p>not in my copy</p>",
        "id": 197525749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446433
    },
    {
        "content": "<p>Oh, weird.</p>",
        "id": 197525760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589446440
    },
    {
        "content": "<p>If you use </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">is_associative</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">mc</span> <span class=\"o\">:</span> <span class=\"n\">is_commutative</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>instead of <code>constant ma : is_associative ...</code>  it works</p>",
        "id": 197525957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446560
    },
    {
        "content": "<p>I think lean likes to be able to unfold instances to constructors</p>",
        "id": 197526013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446573
    },
    {
        "content": "<p>Aha</p>",
        "id": 197526026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589446583
    },
    {
        "content": "<p>even if there isn't anything past that</p>",
        "id": 197526029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446584
    },
    {
        "content": "<p>you could use an axiom in place of the sorry</p>",
        "id": 197526050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446607
    },
    {
        "content": "<p>Ok, thanks. That worked. 2 down, 8 to go.</p>",
        "id": 197526191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589446702
    },
    {
        "content": "<p><code>leanruntest_cpdt.lean</code></p>",
        "id": 197526209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589446719
    },
    {
        "content": "<p>oh boy, <code>rsimp</code></p>",
        "id": 197526239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446747
    },
    {
        "content": "<p>this one uses smt, so it might be the same bug</p>",
        "id": 197526295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446791
    },
    {
        "content": "<p>it's also practically the same problem</p>",
        "id": 197526315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446800
    },
    {
        "content": "<p>what error do you get?</p>",
        "id": 197526399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446850
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> &quot;Proving in the Large&quot; chapter of CPDT -/</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Mult</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">exp</span>\n\n<span class=\"n\">def</span> <span class=\"n\">eeval</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eeval</span> <span class=\"n\">e1</span> <span class=\"bp\">+</span> <span class=\"n\">eeval</span> <span class=\"n\">e2</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Mult</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eeval</span> <span class=\"n\">e1</span> <span class=\"bp\">*</span> <span class=\"n\">eeval</span> <span class=\"n\">e2</span>\n\n<span class=\"n\">def</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"n\">Const</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Mult</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Mult</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"n\">e2</span>\n\n<span class=\"n\">def</span> <span class=\"n\">reassoc</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">e1&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">reassoc</span> <span class=\"n\">e1</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">e2&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">reassoc</span> <span class=\"n\">e2</span> <span class=\"k\">in</span>\n  <span class=\"k\">match</span> <span class=\"n\">e2&#39;</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"n\">e21</span> <span class=\"n\">e22</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"n\">e1&#39;</span> <span class=\"n\">e21</span><span class=\"o\">)</span> <span class=\"n\">e22</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span>              <span class=\"o\">:=</span> <span class=\"n\">Plus</span> <span class=\"n\">e1&#39;</span> <span class=\"n\">e2&#39;</span>\n  <span class=\"kn\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Mult</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">e1&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">reassoc</span> <span class=\"n\">e1</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">e2&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">reassoc</span> <span class=\"n\">e2</span> <span class=\"k\">in</span>\n  <span class=\"k\">match</span> <span class=\"n\">e2&#39;</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Mult</span> <span class=\"n\">e21</span> <span class=\"n\">e22</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Mult</span> <span class=\"o\">(</span><span class=\"n\">Mult</span> <span class=\"n\">e1&#39;</span> <span class=\"n\">e21</span><span class=\"o\">)</span> <span class=\"n\">e22</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span>              <span class=\"o\">:=</span> <span class=\"n\">Mult</span> <span class=\"n\">e1&#39;</span> <span class=\"n\">e2&#39;</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_left_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">left_distrib</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">right_distrib</span> <span class=\"n\">times</span> <span class=\"n\">reassoc</span> <span class=\"n\">eeval</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_comm</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eeval_times</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">k</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">eeval</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">reassoc_correct</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e2</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">rsimp</span>\n</code></pre></div>\n\n\n<p>The first one is happy.</p>",
        "id": 197526418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589446866
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">e_e1</span> <span class=\"n\">e_e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">,</span>\n<span class=\"n\">e_ih_e1</span> <span class=\"o\">:</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e1</span><span class=\"o\">,</span>\n<span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">,</span>\n<span class=\"n\">e_ih_e2</span> <span class=\"o\">:</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e1</span> <span class=\"bp\">+</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e2</span>\n</code></pre></div>",
        "id": 197526439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589446888
    },
    {
        "content": "<p>you left off <code>mul_left_comm</code></p>",
        "id": 197526461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446907
    },
    {
        "content": "<p>It's tagged simp just above</p>",
        "id": 197526516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589446925
    },
    {
        "content": "<p>oh wait nvm</p>",
        "id": 197526517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589446925
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ematch_attr_to_defs</span>\n<span class=\"c1\">------------------------</span>\n<span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">app</span> <span class=\"n\">t</span> <span class=\"n\">l</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Mark the app equational lemmas as ematching rules -/</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">app</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">app_nil_right</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">app</span> <span class=\"n\">l</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">ematch</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">app_assoc</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"n\">l₃</span> <span class=\"bp\">=</span> <span class=\"n\">app</span> <span class=\"n\">l₁</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l₁</span><span class=\"o\">,</span>\n  <span class=\"n\">ematch</span><span class=\"o\">,</span>\n  <span class=\"n\">ematch</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">len</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">len</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">len</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_zero</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_add</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">len_app</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">len</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">len</span> <span class=\"n\">l₁</span> <span class=\"bp\">+</span> <span class=\"n\">len</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">ematch</span><span class=\"o\">,</span> <span class=\"n\">ematch</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span><span class=\"n\">ematch</span><span class=\"o\">,</span> <span class=\"n\">ematch</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This one is also confusing me.</p>",
        "id": 197527590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589447702
    },
    {
        "content": "<p>I think we should just file the ematch based tests away</p>",
        "id": 197527733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589447800
    },
    {
        "content": "<p>I remember there was some bug in ematch that we found 2 years ago and couldn't do anything about, something to do with multiple typeclasses causing problems for category theory, and we basically banned ematch based proofs from mathlib then</p>",
        "id": 197527834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589447875
    },
    {
        "content": "<p>I managed to fix another test in the mean time</p>",
        "id": 197527949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589447954
    },
    {
        "content": "<p>The list is now</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"mi\">688</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cpdt</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">767</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">768</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch_attr_to_defs</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1127</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_simp_lemma_issue</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1155</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1156</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch3</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1247</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_using_smt2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197527958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589447975
    },
    {
        "content": "<p>How about this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">add_zero</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ex</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_add</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- local attribute [-simp] zero_add add_zero</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">ex</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- !!! FAILS :shock:</span>\n\n<span class=\"c1\">-- local attribute [-ematch] zero_add add_zero</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">ex</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">using_smt</span> <span class=\"err\">$</span> <span class=\"n\">smt_tactic</span><span class=\"bp\">.</span><span class=\"n\">eblast</span> <span class=\"c1\">-- fails :not_surprised:</span>\n</code></pre></div>",
        "id": 197528265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589448159
    },
    {
        "content": "<p>Ooh, nvm... <code>nat</code> is not a comm_semiring</p>",
        "id": 197528284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589448181
    },
    {
        "content": "<p>That one's fixed.</p>",
        "id": 197528349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589448232
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>        <span class=\"mi\">688</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cpdt</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">767</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">768</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch_attr_to_defs</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1155</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1156</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch3</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1247</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_using_smt2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197528669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589448446
    },
    {
        "content": "<p>is cpdt fixed with a fake ring instance?</p>",
        "id": 197529158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589448707
    },
    {
        "content": "<p>from the names it looks like everything that remains is ematch related, so let's just comment out these tests</p>",
        "id": 197529305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589448777
    },
    {
        "content": "<p>Is <code>ematch2.lean</code> not fixed with a fake instance?</p>",
        "id": 197529584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589448958
    },
    {
        "content": "<p>The last <code>blast</code> in <code>ematch2</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">tuple</span> <span class=\"n\">α</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">tuple</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">zs</span> <span class=\"o\">:</span> <span class=\"n\">tuple</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">ws</span> <span class=\"o\">:</span> <span class=\"n\">tuple</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">zs</span> <span class=\"bp\">==</span> <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span>\n<span class=\"err\">⊢</span> <span class=\"n\">zs</span> <span class=\"bp\">++</span> <span class=\"n\">ws</span> <span class=\"bp\">==</span> <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"n\">ws</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197529756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589449075
    },
    {
        "content": "<p>I think it needs <code>add_assoc</code> on nat</p>",
        "id": 197530003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589449225
    },
    {
        "content": "<p>try <code>attribute [ematch] nat.add_assoc</code></p>",
        "id": 197530070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589449267
    },
    {
        "content": "<p>oh crap, I just realized the implications of the <code>@[no_rsimp]</code> attribute</p>",
        "id": 197530218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589449366
    },
    {
        "content": "<p>From the end of cpdt:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">left_distrib</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">right_distrib</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_left_comm</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">left_distrib</span> <span class=\"n\">right_distrib</span> <span class=\"n\">times</span> <span class=\"n\">reassoc</span> <span class=\"n\">eeval</span> <span class=\"n\">mul_comm</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">mul_left_comm</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eeval_times</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">k</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">eeval</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">reassoc_correct</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e2</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">rsimp</span> <span class=\"c1\">-- still fails</span>\n</code></pre></div>",
        "id": 197530381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589449445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core/near/197530070\">said</a>:</p>\n<blockquote>\n<p>try <code>attribute [ematch] nat.add_assoc</code></p>\n</blockquote>\n<p>This didn't help.</p>",
        "id": 197530435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589449490
    },
    {
        "content": "<p>What do you get in cpdt with <code>set_option trace.smt true</code>?</p>",
        "id": 197530681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589449638
    },
    {
        "content": "<p>I think the second block is the first one that fails</p>",
        "id": 197530733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589449672
    },
    {
        "content": "<p>test <code>ematch2</code> is now fixed. <code>smt_ematch2</code> is still a problem.<br>\nLet me look at <code>cpdt</code> again.</p>",
        "id": 197531296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589450012
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> <span class=\"n\">Freeze</span> <span class=\"n\">display</span>\n<span class=\"n\">Tactic</span> <span class=\"n\">State</span>\n<span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">exp</span>\n<span class=\"err\">⊢</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e</span>\n<span class=\"n\">cpdt</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">58</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">e_e1</span> <span class=\"n\">e_e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">,</span>\n<span class=\"n\">e_ih_e1</span> <span class=\"o\">:</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e1</span><span class=\"o\">,</span>\n<span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">,</span>\n<span class=\"n\">e_ih_e2</span> <span class=\"o\">:</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e1</span> <span class=\"bp\">+</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e2</span>\n<span class=\"n\">cpdt</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">58</span><span class=\"o\">:</span><span class=\"mi\">48</span><span class=\"o\">:</span> <span class=\"n\">information</span> <span class=\"n\">trace</span> <span class=\"n\">output</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"n\">e_e1</span> <span class=\"o\">:</span> <span class=\"n\">exp</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"n\">e_e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e1</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"n\">e_ih_e1</span> <span class=\"o\">:</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e2</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"n\">e_ih_e2</span> <span class=\"o\">:</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e2</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">bnot</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">bodd</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">bodd</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"err\">↥</span><span class=\"n\">ff</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"err\">↥</span><span class=\"n\">tt</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">sign</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">sign</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div2</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div2</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">bodd</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">bit</span> <span class=\"n\">ff</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div2</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"err\">↑</span><span class=\"n\">tt</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"err\">↑</span><span class=\"n\">ff</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">sign</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bor_self</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">band_self</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bxor_ff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bxor_ff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bnot_bnot</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bnot_bnot</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bor_ff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">eeval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">tt_band</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">tt_band</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">ff_bxor</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">ff_bxor</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">ff_bor</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">ff_bor</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">band_tt</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bxor_self</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bxor_self</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">band_ff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bor_tt</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">tt_bxor</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">tt_bxor</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bxor_tt</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bxor_tt</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">reassoc</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">reassoc</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bnot_eq_true_eq_eq_ff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bnot</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bnot_eq_ff_eq_eq_tt</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">bnot</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bxor_coe_iff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">xor</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"err\">↥</span><span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bxor_coe_iff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">xor</span> <span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"err\">↥</span><span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bxor_coe_iff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">xor</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"err\">↥</span><span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bxor_coe_iff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">xor</span> <span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"err\">↥</span><span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">band_coe_iff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"bp\">∧</span> <span class=\"err\">↥</span><span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">band_coe_iff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"bp\">∧</span> <span class=\"err\">↥</span><span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bor_coe_iff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"bp\">∨</span> <span class=\"err\">↥</span><span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bor_coe_iff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"bp\">∨</span> <span class=\"err\">↥</span><span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">band_eq_true_eq_eq_tt_and_eq_tt</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">∧</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">band_eq_false_eq_eq_ff_or_eq_ff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">∨</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bor_eq_true_eq_eq_tt_or_eq_tt</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">∨</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">bor_eq_false_eq_eq_ff_and_eq_ff</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">∧</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">reassoc</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bnot</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">bnot</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">xor</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"err\">↥</span><span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span><span class=\"o\">),</span> <span class=\"n\">xor</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"err\">↥</span><span class=\"n\">ff</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">xor</span> <span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"err\">↥</span><span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span><span class=\"o\">),</span> <span class=\"n\">xor</span> <span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"err\">↥</span><span class=\"n\">tt</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">xor</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"err\">↥</span><span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span><span class=\"o\">),</span> <span class=\"n\">xor</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"err\">↥</span><span class=\"n\">tt</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">xor</span> <span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"err\">↥</span><span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span><span class=\"o\">),</span> <span class=\"n\">xor</span> <span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"err\">↥</span><span class=\"n\">ff</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"bp\">∧</span> <span class=\"err\">↥</span><span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"bp\">∧</span> <span class=\"err\">↥</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">ff</span><span class=\"o\">)}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"bp\">∧</span> <span class=\"err\">↥</span><span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"bp\">∧</span> <span class=\"err\">↥</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span><span class=\"o\">)}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"bp\">∨</span> <span class=\"err\">↥</span><span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"bp\">∨</span> <span class=\"err\">↥</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span><span class=\"o\">)}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"bp\">∨</span> <span class=\"err\">↥</span><span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"bp\">∨</span> <span class=\"err\">↥</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">tt</span><span class=\"o\">)}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">∧</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">∧</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">false</span> <span class=\"bp\">∨</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">false</span> <span class=\"bp\">∨</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">false</span> <span class=\"bp\">∨</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">false</span> <span class=\"bp\">∨</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">∧</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">∧</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">eeval</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span><span class=\"o\">],</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n<span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">generation</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">after</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e1</span> <span class=\"bp\">+</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e2</span><span class=\"o\">}</span>\n<span class=\"n\">cpdt</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">58</span><span class=\"o\">:</span><span class=\"mi\">48</span><span class=\"o\">:</span> <span class=\"n\">information</span> <span class=\"n\">trace</span> <span class=\"n\">output</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"n\">e_e1</span> <span class=\"o\">:</span> <span class=\"n\">exp</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"n\">e_e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e1</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"n\">e_ih_e1</span> <span class=\"o\">:</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">e_e1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e1</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">exp</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e2</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"n\">e_ih_e2</span> <span class=\"o\">:</span> <span class=\"n\">eeval</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eeval</span> <span class=\"n\">e_e2</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">bnot</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">bxor</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">ff</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">bxor</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">bodd</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">bodd</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"err\">↥</span><span class=\"n\">ff</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">ground</span> <span class=\"n\">fact</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 197531401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589450065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> How do you feel about commenting out the remaining tests?</p>",
        "id": 197531615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589450198
    },
    {
        "content": "<p>We are talking about</p>\n<div class=\"codehilite\"><pre><span></span><code>99% tests passed, 5 tests failed out of 1359\n\nTotal Test time (real) = 169.26 sec\n\nThe following tests FAILED:\n        688 - leanruntest_cpdt.lean (Failed)\n        768 - leanruntest_ematch_attr_to_defs.lean (Failed)\n        1155 - leanruntest_smt_ematch2.lean (Failed)\n        1156 - leanruntest_smt_ematch3.lean (Failed)\n        1247 - leanruntest_using_smt2.lean (Failed)\n</code></pre></div>",
        "id": 197531861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589450371
    },
    {
        "content": "<p>Yeah, ematching tests -&gt; remove</p>",
        "id": 197532970,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589451050
    },
    {
        "content": "<p>cpdt -&gt; remove</p>",
        "id": 197532983,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589451055
    },
    {
        "content": "<p>using_smt2 -&gt; is everything broken?  That would be bad.  If it's just two examples or so -&gt; remove the examples.</p>",
        "id": 197533014,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589451078
    },
    {
        "content": "<p>Ok, I'll do that</p>",
        "id": 197535476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589452653
    },
    {
        "content": "<p>Done and pushed.<br>\nBut locally it still says</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">following</span> <span class=\"n\">tests</span> <span class=\"n\">FAILED</span><span class=\"o\">:</span>\n        <span class=\"mi\">688</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_cpdt</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">768</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_ematch_attr_to_defs</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1155</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n        <span class=\"mi\">1156</span> <span class=\"bp\">-</span> <span class=\"n\">leanruntest_smt_ematch3</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>even though I removed those tests from <code>tests/lean/run/*</code></p>",
        "id": 197536047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589453086
    },
    {
        "content": "<p>Locally? You need to re-run <code>cmake</code>.</p>",
        "id": 197536200,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589453211
    },
    {
        "content": "<p>Aha</p>",
        "id": 197536327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589453293
    },
    {
        "content": "<p>I've pushed... this PR is now touching 106 files <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 197536387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589453332
    },
    {
        "content": "<p>To come back to your question from the other thread: should we make a release before we merge this PR?</p>",
        "id": 197536561,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589453438
    },
    {
        "content": "<p>I think it makes sense. I certainly don't feel brave enough to fix mathlib after the 6 different PR that we now have in core...</p>",
        "id": 197536799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589453602
    },
    {
        "content": "<p>I prefer to take small steps. But I don't have a good overview.</p>",
        "id": 197536819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589453615
    },
    {
        "content": "<p>This has very much been a cargo cult PR from my side</p>",
        "id": 197536840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589453627
    },
    {
        "content": "<p>There's still one failing test.  I'll then get 3.12 out of the door today, and we can think about 3.13 tomorrow.</p>",
        "id": 197537162,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589453854
    },
    {
        "content": "<p>Yes, I just noticed the failing test. It should be fixed now.</p>",
        "id": 197537334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589453995
    },
    {
        "content": "<p>Hooray! Locally it builds without errors and all the (remaining) tests pass!</p>",
        "id": 197539011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589455296
    }
]