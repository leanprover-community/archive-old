[
    {
        "content": "<p>Hi, I'm aware that Agda has compiler backends so that we can compile Agda code into Haskell or Javascript (<a href=\"https://agda.readthedocs.io/en/v2.6.1.3/tools/compilers.html?highlight=backend#backends\">https://agda.readthedocs.io/en/v2.6.1.3/tools/compilers.html?highlight=backend#backends</a>). I was wondering if this exists in Lean as well. If it isn't, are there any plans to support such a feature? Thanks!</p>",
        "id": 229055990,
        "sender_full_name": "François Sunatori",
        "timestamp": 1614997322
    },
    {
        "content": "<p>There's nothing like that for Lean 3 (although you can run a WebAssembly version of the Lean 3 interpreter in the browser - see e.g. <a href=\"https://leanprover-community.github.io/lean-web-editor\">#webeditor</a>). </p>\n<p>Lean 4 can be compiled to C, though I don't think the details have been added to <a href=\"https://leanprover.github.io/lean4/doc/\">the docs</a> yet.</p>",
        "id": 229057493,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614998924
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>! I'm not sure the WebAssembly interpreter option is what I would like though.. Do you know if anyone has ever used Lean in order to compile proven code into another language (a bit like Extraction in Coq)? I'm a web developer and would love the ability to write proofs in Lean that compile to Javascript (to run code that has been proven rather than depending only on unit tests).  I guess with Lean 4 at least it will be doable in C?</p>",
        "id": 229063544,
        "sender_full_name": "François Sunatori",
        "timestamp": 1615004965
    },
    {
        "content": "<p>I don't know if anyone has done so yet, but I think a lot of folks are aiming to do that eventually. See e.g. <a href=\"#narrow/stream/270676-lean4/topic/lean4-balance-car/near/227876687\">this post</a>.</p>\n<p>(I'm probably not the right person to ask about this.)</p>",
        "id": 229063762,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615005145
    }
]