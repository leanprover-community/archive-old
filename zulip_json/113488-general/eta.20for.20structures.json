[
    {
        "content": "<p>Is definitional eta for structures something we are likely to get at some point?</p>",
        "id": 130734097,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533149737
    },
    {
        "content": "<p>I'd be surprised.</p>",
        "id": 130734176,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1533149808
    },
    {
        "content": "<p>In the absence of eta, another feature request would be \"lazy matching\" in lambdas and lets</p>",
        "id": 130734254,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533149903
    },
    {
        "content": "<p>analogous to ~ patterns in Haskell</p>",
        "id": 130734272,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533149935
    },
    {
        "content": "<p>For everyone else, this means <code>位 \\&lt;x,y\\&gt;, x + y</code> gets desugared to <code>位 p, p.1 + p.2</code>.  I don't think it is planned, but you might be able to do the desugaring yourself.</p>",
        "id": 130734477,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1533150134
    },
    {
        "content": "<p>There are some definitions in data.equiv for example which I can't use conveniently, because they match on the input equivalence before producing a constructor.</p>",
        "id": 130734478,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533150134
    },
    {
        "content": "<p>But rewriting them with the constructor outermost becomes quite ugly.</p>",
        "id": 130734545,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533150239
    },
    {
        "content": "<p>(not at computer, and don't remember the specific names)</p>",
        "id": 130734638,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533150330
    },
    {
        "content": "<p>Was imagining including a ~ in the syntax for lazy patterns, not changing the current semantics.</p>",
        "id": 130734813,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533150503
    },
    {
        "content": "<p>Though I wonder when you would ever want the \"strict\" version, figuratively speaking.</p>",
        "id": 130735589,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533151508
    },
    {
        "content": "<blockquote>\n<p>For everyone else, this means <code>位 \\&lt;x,y\\&gt;, x + y</code> gets desugared to <code>位 p, p.1 + p.2</code>.  I don't think it is planned, but you might be able to do the desugaring yourself.</p>\n</blockquote>\n<p>+1 I keep trying to type that and being disappointed.</p>",
        "id": 130742044,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533158105
    },
    {
        "content": "<p>Someone recently pointed out a mathlib definition that uses case analysis like this that was causing problems, but now I can't find it. Can anyone else find it?</p>",
        "id": 130879441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533364694
    },
    {
        "content": "<p><code>+</code> and <code>*</code> in localization.</p>",
        "id": 130880063,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533366078
    },
    {
        "content": "<p>are you sure? I don't see that when I search in the chat</p>",
        "id": 130880926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533368095
    },
    {
        "content": "<p>I definitely made a comment about it, but there's probably something else as well.</p>",
        "id": 130881181,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533368686
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/subject/match.20in.20defs\" title=\"#narrow/stream/113488-general/subject/match.20in.20defs\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/match.20in.20defs</a></p>",
        "id": 130881189,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533368716
    },
    {
        "content": "<p>ah, okay (I searched for \"localization\")</p>",
        "id": 130881304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533368888
    },
    {
        "content": "<p>Should we replace those definitions with the better definitions?</p>",
        "id": 135568699,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539206155
    }
]