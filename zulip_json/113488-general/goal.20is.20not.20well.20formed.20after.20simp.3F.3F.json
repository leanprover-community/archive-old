[
    {
        "content": "<p>After a <code>simp * at *</code>, I end up with the following goal stat (<code>pp.all</code> is <code>true</code>)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">),</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">h_2</span> <span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n<span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_add</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_mul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n       <span class=\"n\">r</span>\n       <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 202177408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593250908
    },
    {
        "content": "<p>This looks like trouble, because the <code>n</code> at the end of the goal is a <code>nat</code>, but isn't coerced to <code>R</code>.</p>",
        "id": 202177455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593250928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Can you use this to prove false?</p>",
        "id": 202177659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593251277
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 202177708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593251317
    },
    {
        "content": "<p>wow what is happening</p>",
        "id": 202177719,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593251359
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/bad-goal/src/data/polynomial_cayley_hamilton.lean#L63\">https://github.com/leanprover-community/mathlib/blob/bad-goal/src/data/polynomial_cayley_hamilton.lean#L63</a></p>",
        "id": 202177735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593251402
    },
    {
        "content": "<p>I pushed to <code>bad-goal</code></p>",
        "id": 202177767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593251408
    },
    {
        "content": "<p>you can't M it any more than that?</p>",
        "id": 202177773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593251420
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_coeff_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">coeff</span> <span class=\"n\">q</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"n\">hφ</span> <span class=\"n\">hψ</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_add</span><span class=\"o\">,</span> <span class=\"n\">coeff_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">hψ</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"n\">hφ</span> <span class=\"n\">hψ</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">coeff_add</span><span class=\"o\">,</span> <span class=\"n\">coeff_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">hψ</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">monomial_eq_smul_X</span><span class=\"o\">,</span> <span class=\"n\">monomial_eq_smul_X</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;</span><span class=\"o\">,</span> <span class=\"n\">X_pow_mul_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n      <span class=\"err\">←</span> <span class=\"n\">C_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">coeff_C_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_C_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_C_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">if_t_t</span><span class=\"o\">,</span> <span class=\"n\">mul_boole</span><span class=\"o\">,</span> <span class=\"n\">coeff_X_pow</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">ite_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_ite</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202177777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593251438
    },
    {
        "content": "<p>This is on the Cayley--Hamilton branch</p>",
        "id": 202177778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593251449
    },
    {
        "content": "<p>I'll see if I can M it more than that.</p>",
        "id": 202177781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593251456
    },
    {
        "content": "<p>You might want to try closing the goal with <code>sorry</code> and see what the kernel has to say about it</p>",
        "id": 202177799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593251507
    },
    {
        "content": "<p>it might be that <code>simp</code> made a bad subgoal</p>",
        "id": 202177807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593251520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> This works on current <code>master</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span>\n    <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202178149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593252074
    },
    {
        "content": "<p>Lunch time now...</p>",
        "id": 202178154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593252112
    },
    {
        "content": "<p>and as I thought if you put <code>; sorry</code> at the end the kernel has the same complaint as you</p>",
        "id": 202178198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593252149
    },
    {
        "content": "<p>what does the kernel say?</p>",
        "id": 202178219,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593252209
    },
    {
        "content": "<p>what you would expect:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">n</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">ℕ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 202178303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593252311
    },
    {
        "content": "<p><code>simp</code> generates a subgoal that is not well typed, so of course if you try to close that goal by any means you will get a badly typed proof</p>",
        "id": 202178348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593252362
    },
    {
        "content": "<p>conclusion: don't use simp</p>",
        "id": 202178381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593252428
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202178384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593252432
    },
    {
        "content": "<p>The problem is that simp isn't good at distinguishing numerals from different types</p>",
        "id": 202178392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593252454
    },
    {
        "content": "<p>so it thinks it can rewrite the <code>0</code> on the rhs of the goal using <code>h</code></p>",
        "id": 202178399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593252477
    },
    {
        "content": "<p>It's ok, simp is being removed from lean 4 anyway <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 202178651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593252896
    },
    {
        "content": "<p>minimized:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202178663,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593252961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Is this something that can be fixed? Or should we learn to live with this/</p>",
        "id": 202181981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593258092
    },
    {
        "content": "<p>I've pushed it onto the todo stack: <a href=\"https://github.com/leanprover-community/lean/issues/362\">lean#362</a></p>",
        "id": 202182214,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593258397
    }
]