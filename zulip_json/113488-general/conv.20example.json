[
    {
        "content": "<p>I was trying to write an example to illustrate the power of <code>conv</code>, by finding an example where the entire goal was difficult to work with because it contained implicit proofs. I realised that there were two things I didn't understand properly. Here's some code.</p>",
        "id": 123651407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941409
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@[elab_simple] def subtypeadd {m : ℕ} {n : ℕ} (A : fin m) (B : fin n) : fin (m+n) :=\n  ⟨A.val+B.val,add_lt_add A.is_lt B.is_lt⟩\n\ndefinition phi {m n : ℕ} : fin (m + n) → fin (n + m) := λ ⟨i,Hi⟩, ⟨i,add_comm m n ▸ Hi⟩\n\nexample {m n : ℕ} (A : fin m) (B : fin n) : phi (subtypeadd A B) = subtypeadd B A :=\nbegin\n  have H : A.val + B.val = B.val + A.val := add_comm _ _,\n  -- unfold subtypeadd using show\n  show phi ⟨A.val + B.val, _⟩ = ⟨B.val + A.val, _⟩,\n  rw H -- fails\nend\n</pre></div>",
        "id": 123651409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941422
    },
    {
        "content": "<p>I wanted to make the example hard for one reason, but it somehow turned out to be hard for another reason :-/</p>",
        "id": 123651451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941452
    },
    {
        "content": "<p>My first question is why does the <code>show</code> command succeed? I assumed that what <code>show X</code> did was that it first checked that <code>X</code> made sense, and then checked that it was defeq to the goal.</p>",
        "id": 123651460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941512
    },
    {
        "content": "<p>But I thought I had explicitly rigged it here so that <code>X</code> wouldn't be able to be elaborated, because of the missing proofs.</p>",
        "id": 123651464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941544
    },
    {
        "content": "<p>My second question is why does <code>rw</code> fail. I have heard rumours that <code>rw</code> will not work inside a lambda (although I don't really understand why -- why is this?) but this is not a lambda and I think the reason for failure is something else.</p>",
        "id": 123651506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941603
    },
    {
        "content": "<p>The error message is</p>\n<div class=\"codehilite\"><pre><span></span>rewrite tactic failed, motive is not type correct\nnested exception message:\ncheck failed, application type mismatch (use &#39;set_option trace.check true&#39; for additional details)\nstate:\nm n : ℕ,\nA : fin m,\nB : fin n,\nH : A.val + B.val = B.val + A.val\n⊢ phi ⟨A.val + B.val, _⟩ = ⟨B.val + A.val, _⟩\n</pre></div>",
        "id": 123651512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941627
    },
    {
        "content": "<p>and if I <code>set_option trace.check true</code> then I get an exciting helpful extra hint:</p>",
        "id": 123651515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941648
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[check] application type mismatch at\n  ⟨_a, _⟩\nargument type\n  A.val + B.val &lt; m + n\nexpected type\n  _a &lt; m + n\n</pre></div>",
        "id": 123651516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941658
    },
    {
        "content": "<p>which makes no sense to me...oh! Is it rewriting too many A.val + B.val's?</p>",
        "id": 123651557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941692
    },
    {
        "content": "<p>I am still a bit bewildered about why this is a type mismatch I guess.</p>",
        "id": 123651559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941720
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 123651565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941787
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 123651618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941810
    },
    {
        "content": "<p>For the first question I guess an underlying question is \"which option do you switch on so you can see how Lean is filling in <code>_</code>s?\"</p>",
        "id": 123651680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520941970
    },
    {
        "content": "<blockquote>\n<p>My first question is why does the show command succeed? I assumed that what show X did was that it first checked that X made sense, and then checked that it was defeq to the goal.</p>\n</blockquote>\n<p>I was going to mention this before with your <code>X = Y</code> into <code>X' = Y</code> problem - you could have just written <code>show X' = _</code>. The reason this works is because the checking is done in a weak mode that tolerates metavariable generation, and the second defeq step is not just checking defeq, it is unifying with the target. This means that the first stage will create metavariables and the second stage will unfold stuff as needed to figure out the metavariables. If it can't completely solve the metavariables, you will get new goals instead of an error.</p>\n<div class=\"codehilite\"><pre><span></span>example : tt = tt :=\nbegin\n  show (λ x, tt) _ = tt,\n  -- ⊢ (λ (x : ?m_1), tt) ?m_2 = tt\nend\n\nexample : tt = tt :=\nbegin\n  change (λ x, tt) _ = tt,\n  -- ⊢ (λ (x : ?m_1), tt) ?m_2 = tt\n  -- ⊢ Sort ?\n  -- ⊢ ?m_1\nend\n</pre></div>\n\n\n<p>As you can see, <code>show</code> differs slightly in that it doesn't change the number of goals while <code>change</code> will add all those unsolved metavariables as new goals, just like <code>refine</code> would.</p>",
        "id": 123652795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520944355
    },
    {
        "content": "<p>By the way, goals that look like your <code>phi ⟨A.val + B.val, _⟩ = ⟨B.val + A.val, _⟩</code> often don't work (they fail in the first stage of parsing), because the anonymous constructor can't be solved outright. In this case it works because <code>phi</code> is sufficient to deduce that both constructors are <code>fin</code>.</p>",
        "id": 123652855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520944509
    },
    {
        "content": "<blockquote>\n<p>My second question is why does rw fail. I have heard rumours that rw will not work inside a lambda (although I don't really understand why -- why is this?) but this is not a lambda and I think the reason for failure is something else.</p>\n</blockquote>\n<p><code>rw</code> is very sensitive to dependencies. (Or more accurately, it is sufficiently <em>insensitive</em> to dependencies that it will generally fail in their presence.) Both <code>rw</code> and <code>generalize</code> are built on the same basic underlying internal tactic <code>kabstract</code>, which is supposed to take a term <code>P[T]</code> containing a subterm <code>T</code>, and replace it with a variable <code>x</code>. This is needed to construct the motive of the <code>eq.rec</code> application that goes in the proof term when using <code>rw</code>, and it's what you see directly if you use <code>generalize</code>.</p>\n<p>The strategy is very simple: look through the term for any subterms that match <code>T</code> (up to some very light unfolding), and replace them with <code>x</code>. It should be obvious that this can get you into trouble when you have dependencies. For example, if <code>two_pos : 0 &lt; 2</code> then <code>&lt;2, two_pos&gt;</code> is a well typed element of <code>fin 2</code>, but if you simply replace 2 with x you get <code>&lt;x, two_pos&gt;</code> which is not in either <code>fin x</code> or <code>fin 2</code>, it's just malformed. It is actually really difficult to do this correctly in general; in this case you would probably want to generalize the proof of <code>two_pos</code> first so that it will \"ride the wave\" of 2 -&gt; x renaming rather than being stuck talking about the fixed number 2.</p>\n<p>As it pertains to your example, the error message is fairly clear, although it would be more obvious with <code>set_option pp.proofs true</code>. The left argument to the <code>fin</code> constructor has been generalized from <code>A.val + B.val</code> to <code>_a</code>, but the right argument, the proof, is still a proof of <code>A.val + B.val &lt; m + n</code> (namely <code>add_lt_add A.is_lt B.is_lt</code>, what you ended up with after the unfolding), and this is not a correct proof of <code>_a &lt; m + n</code>.</p>\n<p>The other major rewrite engine in lean is <code>simp</code>, which does not use <code>kabstract</code>. It operates by using congruence lemmas to recurse into subterms, and this strategy makes it much more reliably type-correct when it comes to rewriting under dependencies. If you try to use <code>simp</code> to rewrite here, it will work, and the proof argument will change to a cast of some sort to accommodate the new type.</p>",
        "id": 123653214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520945283
    },
    {
        "content": "<p>Is it possible for me to watch all this unification taking place explicitly? i.e. some set_option?</p>",
        "id": 123653217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520945285
    },
    {
        "content": "<p>[that was about the show / change stuff]</p>",
        "id": 123653282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520945465
    },
    {
        "content": "<p>I think <code>set_option trace.type_context.is_def_eq true</code> is what you want</p>",
        "id": 123653325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520945525
    },
    {
        "content": "<p>Earlier on I realised that I didn't really know what rw did, so I've just spent 20 minutes doing edge cases and now I can understand the rw issue. I found that <code>rw</code> doesn't commute with <code>eq.symm</code> in general :-)</p>",
        "id": 123653332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520945566
    },
    {
        "content": "<p>Plus <code>...is_def_eq_detail</code>, probably</p>",
        "id": 123653334,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520945577
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (a b: ℕ) : b + a = b + a + a + b := begin\nrw add_comm, -- a + b = a + b + a + b\nend\n</pre></div>",
        "id": 123653381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520945657
    },
    {
        "content": "<p>Are the <code>set_option</code> options documented anywhere?</p>",
        "id": 123653455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520945824
    },
    {
        "content": "<p><code>#help options</code> seems to do the trick. (I had to search the code to find that gem. <code>#help</code> is such a rarely used command for me, I'm not even really sure what's there...)</p>",
        "id": 123653753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520946419
    },
    {
        "content": "<p>I am not even sure if I knew <code>#help</code> existed. I thought the help command in Lean was <code>#print</code></p>",
        "id": 123654932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948366
    },
    {
        "content": "<p>it certainly does seem to be a large overlap of duties</p>",
        "id": 123654973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948402
    },
    {
        "content": "<p>I can use conv to rewrite <code>A.val + B.val</code> in that earlier example.</p>",
        "id": 123654990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948423
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@[elab_simple] def subtypeadd {m : ℕ} {n : ℕ} (A : fin m) (B : fin n) : fin (m+n) :=\n  ⟨A.val+B.val,add_lt_add A.is_lt B.is_lt⟩\n\ndefinition phi {m n : ℕ} : fin (m + n) → fin (n + m) := λ ⟨i,Hi⟩, ⟨i,add_comm m n ▸ Hi⟩\n\nexample {m n : ℕ} (A : fin m) (B : fin n) : phi (subtypeadd A B) = subtypeadd B A :=\nbegin\n  have H : A.val + B.val = B.val + A.val := add_comm _ _,\n  -- unfold subtypeadd using show\n  show phi ⟨A.val + B.val, _⟩ = ⟨B.val + A.val, _⟩,\n  conv\n  begin\n  congr,\n  congr,\n  congr,\n  rw H,\n  end, -- is the term on the left OK??\n  admit\nend\n</pre></div>",
        "id": 123654994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948458
    },
    {
        "content": "<p>conv is doing all sorts of funny things here</p>",
        "id": 123654999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948469
    },
    {
        "content": "<p>It seems to forget some terms</p>",
        "id": 123655000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948476
    },
    {
        "content": "<p>and I managed to do a rewrite which earlier on was impossible for a good reason</p>",
        "id": 123655002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948491
    },
    {
        "content": "<p>or was it impossible for a bad reason?</p>",
        "id": 123655052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948566
    },
    {
        "content": "<p>Oh maybe conv doesn't care about the terms it forgets.</p>",
        "id": 123655114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948648
    },
    {
        "content": "<p>I would be in support of moving all \"auxiliary\" <code>#print</code> stuff to <code>#help</code>; it is a little confusing to have namespace overlapping between <code>#print options</code> (which prints lean cmdline options), <code>#print option</code> (which prints the <code>option</code> type) and <code>#print pp.all</code> (which prints info on the <code>pp.all</code> option)</p>",
        "id": 123655119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948665
    },
    {
        "content": "<p>Does conv not bother with subsingletons?</p>",
        "id": 123655120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948676
    },
    {
        "content": "<p>I lost a proof</p>",
        "id": 123655126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948686
    },
    {
        "content": "<p>I see. So <code>fin</code> is a structure so I can build things of type <code>fin n</code> and they will be of the form <code>&lt;value,proof that this value is less than n&gt;</code></p>",
        "id": 123655197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948800
    },
    {
        "content": "<p>but there's nothing stopping me from deviously changing the value without changing the proof</p>",
        "id": 123655205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948824
    },
    {
        "content": "<p>By the way, if you are actually interested in this theorem, a short proof is <code>fin.eq_of_veq (add_comm _ _)</code></p>",
        "id": 123655213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948866
    },
    {
        "content": "<p>I don't need the theorem, I was experimenting with trying to build goals which the prettyprinter wouldn't let me use show with (\"show &lt;what the pretty printer says the goal is&gt;\" failing)</p>",
        "id": 123655278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948954
    },
    {
        "content": "<p><code>conv</code> uses congrence lemmas, like <code>simp</code>, to traverse the term, certainly if you are using the <code>congr</code> tactic</p>",
        "id": 123655280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948956
    },
    {
        "content": "<p>so it will succeed for the same reason that simp does</p>",
        "id": 123655286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520948970
    },
    {
        "content": "<p>conv is really useful for a learner like me.</p>",
        "id": 123655290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520948990
    },
    {
        "content": "<p>It enables to you really zoom in to parts of complicated things which beginners have trouble manipulating</p>",
        "id": 123655342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949010
    },
    {
        "content": "<p>You should turn on <code>pp.proofs</code> while working with this</p>",
        "id": 123655343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520949017
    },
    {
        "content": "<p>oh that's a cool option</p>",
        "id": 123655346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949050
    },
    {
        "content": "<p>lol I remember the days when it was the only option. It's like 80% a good idea to hide proofs</p>",
        "id": 123655358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520949090
    },
    {
        "content": "<p>is there a command which just changes the state of every option that is available?</p>",
        "id": 123655359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949102
    },
    {
        "content": "<p>then I could easily see all the other things I'm missing</p>",
        "id": 123655364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949110
    },
    {
        "content": "<p>lol that would be bedlam</p>",
        "id": 123655365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520949115
    },
    {
        "content": "<p>Imagine how much I'd learn</p>",
        "id": 123655368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949121
    },
    {
        "content": "<p>If you care about printing, look at completions for <code>set_option pp.</code></p>",
        "id": 123655417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520949165
    },
    {
        "content": "<p>I remember getting really confused early on because of those <code>_</code>s in goals which I'd completely forgotten what they stood for</p>",
        "id": 123655428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949187
    },
    {
        "content": "<p>It would be even better if it said what they were a proof of</p>",
        "id": 123655438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949203
    },
    {
        "content": "<p>That was proposed; but it would make things even harder for the copy-pasters</p>",
        "id": 123655455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520949231
    },
    {
        "content": "<p>why not make it an option?</p>",
        "id": 123655497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949244
    },
    {
        "content": "<p>I don't want to have to edit all those types out</p>",
        "id": 123655502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520949249
    },
    {
        "content": "<p>to make it compile</p>",
        "id": 123655505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520949265
    },
    {
        "content": "<p>Oh wooah if I set proofs on, then does \"show (goal)\" always succeed?</p>",
        "id": 123655512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949286
    },
    {
        "content": "<p>no, silly</p>",
        "id": 123655514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520949298
    },
    {
        "content": "<p>:-)</p>",
        "id": 123655515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949301
    },
    {
        "content": "<p>does that solve the halting problem or something?</p>",
        "id": 123655524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949323
    },
    {
        "content": "<p>there are a thousand and one edge cases that cause bad printing</p>",
        "id": 123655526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520949328
    },
    {
        "content": "<p>Oh OK.</p>",
        "id": 123655528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949335
    },
    {
        "content": "<p>even <code>pp.all</code> sometimes fails</p>",
        "id": 123655529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520949337
    },
    {
        "content": "<p>o_O</p>",
        "id": 123655530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949344
    },
    {
        "content": "<p>Here's an example:</p>\n<div class=\"codehilite\"><pre><span></span>theorem T : nat.zero = nat.zero :=\nby have f := (λ {x}, eq.refl x); exact f\n\nset_option pp.all true\n#print T\ntheorem T&#39; : @eq.{1} nat nat.zero nat.zero :=\n@(λ {x : nat}, @eq.refl.{1} nat x) nat.zero --parse error\n</pre></div>",
        "id": 123655728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520949688
    },
    {
        "content": "<p>Oh maybe we're talking at cross purposes.</p>",
        "id": 123655807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949797
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem T&#39; : @eq.{1} nat nat.zero nat.zero :=\nbegin\nshow @eq.{1} nat nat.zero nat.zero -- succeeds\nend\n</pre></div>",
        "id": 123655814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949808
    },
    {
        "content": "<p>I was wondering if one could be in tactic mode in a situation where the goal is represented by some string S, and then <code>show S</code> fails</p>",
        "id": 123655864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520949860
    },
    {
        "content": "<p>I am pretty sure I've done that before, but I am less sure about having done it with pp.all true</p>",
        "id": 123655937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520950033
    },
    {
        "content": "<p>It's easiest to demonstrate by using <code>#print</code> to view proof terms, but this affects all printing, and you can make it work with target printing as well by a similar mechanism.</p>\n<div class=\"codehilite\"><pre><span></span>--set_option pp.all true\ntheorem T : nat.le nat.zero (by have f := (λ {x:ℕ}, 0); exact @f nat.zero) :=\nbegin\n  -- ⊢ nat.le 0 (λ {x : ℕ}, 0)\n  change nat.le 0 (λ {x : ℕ}, 0), --fail\n  change nat.le nat.zero (@(λ {x : nat}, @has_zero.zero.{0} nat nat.has_zero) nat.zero) -- parse error\nend\n</pre></div>",
        "id": 123656284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520950578
    },
    {
        "content": "<p>Are these bugs in the prettyprinter? Or just interesting features?</p>",
        "id": 123656605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520951164
    },
    {
        "content": "<p>Or should <code>@(lam {x},...)</code> actually work?</p>",
        "id": 123656620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520951245
    },
    {
        "content": "<p>It's the pretty printer wishing for a feature the parser hasn't implemented yet</p>",
        "id": 123656672,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520951377
    },
    {
        "content": "<p>Slightly passive-agressive behavior</p>",
        "id": 123656731,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520951451
    },
    {
        "content": "<p>I see. The pretty printer is somehow the anti-parser isn't it.</p>",
        "id": 123657305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520952389
    },
    {
        "content": "<p>in fact it's a one-sided inverse, in a perfect world.</p>",
        "id": 123657312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520952433
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover/lean/issues/1900\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1900\">#1900</a></p>",
        "id": 123657314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520952447
    },
    {
        "content": "<p>I am still unclear about one thing in this thread.</p>",
        "id": 123661013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520958265
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (a b c N : ℕ) (H1 : a = b) (H2 : a &lt; N) (H3 : b &lt; N) :\n (⟨a,H2⟩:fin N) = ⟨b,H3⟩ :=\nbegin\n-- rw H1 fails\nconv begin\n  to_lhs,congr, -- goal now | a\n  rw H1, -- succeeds\n  end,\nend\n</pre></div>",
        "id": 123661014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520958268
    },
    {
        "content": "<p>The first rw fails and my understanding is that it fails because it gives rise to a term which is malformed (copying from Mario's comments above). However it seems to be only as malformed as the term I successfully construct using the conv trick.</p>",
        "id": 123661095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520958429
    },
    {
        "content": "<p>I am still none the wiser about this. One conclusion which I've not yet ruled out is simply that whoever wrote <code>rw</code> could have done better, and made that first <code>rw H1</code> above succeed, because there is nothing in type theory stopping it from succeeding, as we see from the conv approach. Is the reason that <code>rw H1</code> fails simply that the <code>rw</code> code just doesn't cover this use case?</p>",
        "id": 123723050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521063685
    },
    {
        "content": "<p>I think you are missing that the <code>conv</code> version isn't using just <code>rw</code>, it's using <code>rw</code> + <code>congr</code>, and it is applying <code>congr</code> in the place where dependency matters. Once the goal is <code>| a</code>, there is no longer a dependency to worry about, and <code>rw</code> has no problems.</p>",
        "id": 123723190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521063928
    },
    {
        "content": "<p>But there is nothing stopping someone from beefing up rw so that it works without using conv? It's just some tactic, right?</p>",
        "id": 123723911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065141
    },
    {
        "content": "<p>Initially when I heard that rw couldn't rewrite in certain circumstances I thought that this was because of some theoretical type theory issue which was beyond me, but now I am more inclined to believe that it's just beyond rw.</p>",
        "id": 123724107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065417
    },
    {
        "content": "<p>This typechecks:</p>\n<div class=\"codehilite\"><pre><span></span>example (a b c N : ℕ) (H1 : a = b) (H2 : a &lt; N) (H3 : b &lt; N) :\n (⟨a,H2⟩:fin N) = ⟨b,H3⟩ := sorry\n</pre></div>",
        "id": 123724117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065457
    },
    {
        "content": "<p>but if I replace <code>sorry</code> with <code>eq.subst H1 _</code> then all of a sudden I get a type mismatch in the statement (not the proof) of the example.</p>",
        "id": 123724133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065506
    },
    {
        "content": "<p>Yes and no. <code>rw</code> does exactly what we want it to, which is to produce an <code>eq.rec</code> term with a well chosen motive. <code>congr</code> applies an appropriate congruence lemma. There are theoretical limitations on what you can prove using <code>eq.rec</code>, and this is why one wouldn't want to change <code>rw</code> for this</p>",
        "id": 123724136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521065515
    },
    {
        "content": "<p>I opened an issue on dependent <code>rw</code> a while ago, I think it was closed by \"use <code>simp</code> instead\"</p>",
        "id": 123724181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521065564
    },
    {
        "content": "<p>I now know from experience that this is not a satisfactory response</p>",
        "id": 123724194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065616
    },
    {
        "content": "<p>The reason I got interested in this use of conv was that I had a situation where simp simplified too much</p>",
        "id": 123724201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065634
    },
    {
        "content": "<p>so I had to be super-accurate with my rw</p>",
        "id": 123724245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065647
    },
    {
        "content": "<p>conv saved me</p>",
        "id": 123724246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065650
    },
    {
        "content": "<p>I mean the <code>simp</code> engine, not necessarily <code>simp</code> on its own</p>",
        "id": 123724250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521065673
    },
    {
        "content": "<p>How do you use the simp engine??</p>",
        "id": 123724253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065681
    },
    {
        "content": "<p>Did it simplify too much even when you called <code>simp only [your rules here]</code>?</p>",
        "id": 123724256,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521065691
    },
    {
        "content": "<p>You know that <code>simp</code> has a bazillion options, right?</p>",
        "id": 123724259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521065697
    },
    {
        "content": "<p>Oh that's a good point Simon, I didn't try this</p>",
        "id": 123724265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065703
    },
    {
        "content": "<p>Remember when you discovered that <code>unfold</code> is really <code>simp</code>?</p>",
        "id": 123724279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521065714
    },
    {
        "content": "<p>Are those bazillion options documented? If not, then no I don't know and I don't know how to find out.</p>",
        "id": 123724280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065718
    },
    {
        "content": "<p>other than random looking through changelogs and source code</p>",
        "id": 123724289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065735
    },
    {
        "content": "<p>which I find about as pleasant as looking through trash cans</p>",
        "id": 123724290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065745
    },
    {
        "content": "<p>That would deserve a good amount of documentation, that's true.</p>",
        "id": 123724327,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521065763
    },
    {
        "content": "<p><code>simp only [h] {single_pass := tt}</code> is pretty close to <code>rw</code>-like rewriting</p>",
        "id": 123724335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521065768
    },
    {
        "content": "<p>I did know about simp only from TPIL but somehow it's one of those options which I would never use in practice because my initial reaction when I read TPIL was \"whyever would you want to use simp only?\"</p>",
        "id": 123724349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065809
    },
    {
        "content": "<p>And if you identify the lemmas that cause trouble you can disable it specifically with <code>simp [my_rule, - naughty]</code></p>",
        "id": 123724352,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521065821
    },
    {
        "content": "<p>and it's only more recently as I have become more experienced that I realise I need it, by which time I have forgotten about it</p>",
        "id": 123724358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065825
    },
    {
        "content": "<p>and the simp docs which I PR'ed have explanations of how to find out which lemmas are causing trouble</p>",
        "id": 123724366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065852
    },
    {
        "content": "<p>And to identify naughty lemmas you can use <code>set_option trace.simplify.rewrite true</code></p>",
        "id": 123724367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521065856
    },
    {
        "content": "<p>yeah, I read that in the docs</p>",
        "id": 123724370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065863
    },
    {
        "content": "<p>which I wrote</p>",
        "id": 123724371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065864
    },
    {
        "content": "<p>because I cannot manage without docs</p>",
        "id": 123724376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065879
    },
    {
        "content": "<p>because I am an old man</p>",
        "id": 123724383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065882
    },
    {
        "content": "<p>so no I don't know about the bazillion simp options</p>",
        "id": 123724420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065897
    },
    {
        "content": "<p>if you just rattled a few off now I might add them to the docs</p>",
        "id": 123724424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065909
    },
    {
        "content": "<p>I am in my late 40s :-)</p>",
        "id": 123724426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521065924
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>structure simp_config :=\n(max_steps : nat           := simp.default_max_steps)\n(contextual : bool         := ff)\n(lift_eq : bool            := tt)\n(canonize_instances : bool := tt)\n(canonize_proofs : bool    := ff)\n(use_axioms : bool         := tt)\n(zeta : bool               := tt)\n(beta : bool               := tt)\n(eta  : bool               := tt)\n(proj : bool               := tt) -- reduce projections\n(iota : bool               := tt)\n(iota_eqn : bool           := ff) -- reduce using all equation lemmas generated by equation/pattern-matching compiler\n(constructor_eq : bool     := tt)\n(single_pass : bool        := ff)\n(fail_if_unchanged         := tt)\n(memoize                   := tt)\n</pre></div>",
        "id": 123724430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521065937
    },
    {
        "content": "<p>as you can see, leo is hard at work with those docstrings :)</p>",
        "id": 123724441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521065967
    },
    {
        "content": "<p>two out of 16 ain't bad, as Meat Loaf once said</p>",
        "id": 123724688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521066318
    },
    {
        "content": "<p>I am now going to have to rewrite some of my updated simp docs which I was editing as this post arrived.</p>",
        "id": 123724692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521066346
    },
    {
        "content": "<p>About to be deleted: <code>It is well-known that there are a bazillion simp options, although most are known only to the Lean Inner Circle. Examples which mere mortals know about are those documented in the reference manual and Theorem Proving In Lean.</code></p>",
        "id": 123724735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521066365
    },
    {
        "content": "<p>That's not even all of it - there is also the underlying command <code>ext_simplify_core</code> with lots of space for configurability. And <code>dsimp</code> has its own variants on all of this.</p>",
        "id": 123724966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521066737
    },
    {
        "content": "<p>There are more options somehow:</p>",
        "id": 123725306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521067258
    },
    {
        "content": "<p><code>simp tactics in interactive mode have a new configuration parameter (discharger : tactic unit) a tactic for discharging subgoals created by the simplifier. If the tactic fails, the simplifier tries to discharge the subgoal by reducing it to true. Example: simp {discharger := assumption}.</code></p>",
        "id": 123725311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521067262
    },
    {
        "content": "<p>from the changelog</p>",
        "id": 123725317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521067271
    },
    {
        "content": "<p>I can't get this to work though</p>",
        "id": 123725379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521067338
    },
    {
        "content": "<p>OK I added some stuff about simp config options and added it to my PR</p>",
        "id": 123725587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521067674
    },
    {
        "content": "<p>the <code>discharger</code>is a <code>tactic unit</code>, so you have to write it in non-interactive mode (or else have <code>tactic</code> open, which is I think what Leo did in that quote). <code>simp {discharger := `[assumption]}</code> should work</p>",
        "id": 123725662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521067779
    },
    {
        "content": "<p>but it's not that useful compared to <code>simp *</code></p>",
        "id": 123725719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521067818
    }
]