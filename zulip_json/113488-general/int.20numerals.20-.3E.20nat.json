[
    {
        "content": "<p>Does anyone know how to prove this with <code>rw</code> or <code>simp</code> or some other tactic?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(In my application, I have such expressions buried in a more complicated expression.)</p>",
        "id": 226324385,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1613336174
    },
    {
        "content": "<p>I think the only way I've seen is to turn <code>(5 : int)</code> into <code>((5 : nat) : int)</code> first</p>",
        "id": 226324810,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1613336773
    },
    {
        "content": "<p>I don't understand the question, since you already have a proof - is <code>rw [(show (5 : int).to_nat = 5, from rfl)]</code> an answer to your question?</p>",
        "id": 226326467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613339181
    },
    {
        "content": "<p>I was hoping there might be a method that doesn't require doing that manually, and separately for each numeral. But if not, I'll manage. Thanks for the responses.</p>",
        "id": 226326679,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1613339500
    },
    {
        "content": "<p><code>norm_num</code> can probably be taught to solve that</p>",
        "id": 226326740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613339552
    },
    {
        "content": "<p>Alternatively - is there a simp lemma that says <code>(bit0 x).to_nat = bit0 (x.to_nat)</code>? I think then simp could solve it</p>",
        "id": 226326834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613339751
    },
    {
        "content": "<p>Alas, the <code>bit1</code> version is false when <code>x</code> is negative.</p>",
        "id": 226328613,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1613340645
    },
    {
        "content": "<p>Does norm_num not solve this, or solve the goals you had upstream that lead to this state?</p>",
        "id": 226328889,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613341033
    },
    {
        "content": "<p><code>norm_num</code> does not currently solve this.</p>",
        "id": 226335304,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1613349992
    },
    {
        "content": "<p>There is definitely space for a norm_num extension with support for all the wacky int functions</p>",
        "id": 226336390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613351760
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kn\">section</span> <span class=\"kd\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">norm_num</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">int_to_nat_pos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">nat.cast_coe</span> <span class=\"n\">ℤ</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">b.to_nat</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">int_to_nat_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">int.to_nat_zero_of_neg</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[norm_num]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval_int_to_nat</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">int.to_nat</span> <span class=\"bp\">%%</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">e.to_int</span><span class=\"o\">,</span>\n  <span class=\"n\">ic</span> <span class=\"bp\">←</span> <span class=\"n\">mk_instance_cache</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">),</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n    <span class=\"n\">nc</span> <span class=\"bp\">←</span> <span class=\"n\">mk_instance_cache</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">prove_nat_uncast</span> <span class=\"n\">ic</span> <span class=\"n\">nc</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">int_to_nat_pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span>\n  <span class=\"k\">else</span> <span class=\"k\">do</span>\n    <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">match_neg</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">prove_pos</span> <span class=\"n\">ic</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">int_to_nat_neg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 226337083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613352809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span></p>",
        "id": 226337135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613352853
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6235\">#6235</a></p>",
        "id": 226340075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613357221
    }
]