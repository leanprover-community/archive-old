[
    {
        "content": "<p>The <code>simp</code> tactic works very well for rewriting terms and replacing a Prop by an equivalent Prop, but when the goal is a certain type B and we have an equivalence <code>some_equiv : A ≃ B</code>, would not that make sense if <code>simp only [some_equiv]</code> was able to do <code>apply some_equiv.inv_fun</code>?<br>\n(I have no idea about how tactics are implemented, whether this is feasible or not, or whether it would cause other problems.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span>\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">some_equiv</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.prod_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">some_equiv.inv_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">some_equiv</span><span class=\"o\">],</span> <span class=\"c\">/-</span><span class=\"cm\"> could the simp tactic be extended to make this work? -/</span>\n  <span class=\"n\">exact</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273630391,
        "sender_full_name": "Joël Riou",
        "timestamp": 1646136547
    },
    {
        "content": "<p>take a look at the <code>transport</code> tactic</p>",
        "id": 273630565,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646136640
    },
    {
        "content": "<p>Or rather <code>equiv_rw</code> (<code>transport</code> is a wrapper around that to transport algebraic structures).</p>",
        "id": 273630699,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646136748
    },
    {
        "content": "<p>Thanks very much! Then, in this case <code>equiv_rw some_equiv</code> would do the job :-)</p>",
        "id": 273630999,
        "sender_full_name": "Joël Riou",
        "timestamp": 1646136956
    }
]