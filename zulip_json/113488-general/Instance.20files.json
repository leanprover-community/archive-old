[
    {
        "content": "<p>Can we please stop creating concrete type-specific files? This just calls for weird import loops.</p>",
        "id": 282760358,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652865335
    },
    {
        "content": "<p>Don't we have files containing all instances for <code>punit</code> and <code>pi</code>? Won't it just be the same as those? Oh I see -- the issue is that you want it to be a monoid so you need to import it early, but then you want it to be a totally ordered normed vector space so you need to import a load of stuff before it :-/</p>",
        "id": 282760661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652865531
    },
    {
        "content": "<p>Eric, I mean files like <code>algebra.punit_instances</code></p>",
        "id": 282760679,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652865541
    },
    {
        "content": "<p>But <a href=\"https://tqft.net/mathlib/algebra/group/pi\">file#algebra/group/pi</a> is fine, right?</p>",
        "id": 282760702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865562
    },
    {
        "content": "<p>Meh, not really either.</p>",
        "id": 282760709,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652865572
    },
    {
        "content": "<p>Not everything fits in a file, so we also have <a href=\"https://tqft.net/mathlib/data/pi/algebra\">file#data/pi/algebra</a></p>",
        "id": 282760723,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652865589
    },
    {
        "content": "<p>That file is different, it's data-only without any algebraic heirarchy</p>",
        "id": 282760824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865629
    },
    {
        "content": "<p><code>has_one</code> and friends <strong>are</strong> in the algebraic hierarchy.</p>",
        "id": 282760900,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652865666
    },
    {
        "content": "<p>But I agree that somehow <code>pi</code> and <code>prod</code>are less of a problem than type synonyms.</p>",
        "id": 282760928,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652865682
    },
    {
        "content": "<p>That's just notation, I wouldn't consider those algebraic</p>",
        "id": 282760930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865682
    },
    {
        "content": "<p>In the interest of unblocking things, I think <code>order/ulift.lean</code> and <code>algebra/order/ulift.lean</code> are close enough to the status quo</p>",
        "id": 282760959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865698
    },
    {
        "content": "<p>We also have <code>algebra/order/pi</code> as a data point in favor of that</p>",
        "id": 282761004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865723
    },
    {
        "content": "<p>Why not just dropping the instances in the corresponding files? This is no harder.</p>",
        "id": 282761031,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652865727
    },
    {
        "content": "<p>Why not follow the pattern of <code>pi</code> and <code>prod</code> and keep the files smaller?</p>",
        "id": 282761064,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865748
    },
    {
        "content": "<p>... because it's type synonym</p>",
        "id": 282761076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652865757
    },
    {
        "content": "<p>So?</p>",
        "id": 282761084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865761
    },
    {
        "content": "<p>I think you're thinking of <code>order_dual</code>, which is a very important type synonym because you use it to prove everything along the way</p>",
        "id": 282761114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865781
    },
    {
        "content": "<p><code>ulift</code> you don't use for anything until a leaf file</p>",
        "id": 282761136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865793
    },
    {
        "content": "<p>I want to destroy those type synonym instances files, so I don't want another one to pop up.</p>",
        "id": 282761184,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652865832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> this is why <code>ulift nat</code> isn't a partial order -- apparently there are subtleties ;-)</p>",
        "id": 282761238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652865843
    },
    {
        "content": "<p>Classes can be defined arbitrarily low in the instance hierarchy, and all the <code>prod</code>/<code>pi</code> files have to decide of an arbitrary cutting point.</p>",
        "id": 282761296,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652865885
    },
    {
        "content": "<p>Yael, can you pick one of your messages to split this thread, and I'll use my mod powers to clean up the rest?</p>",
        "id": 282761372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865932
    },
    {
        "content": "<p>In particular, the <code>order</code> folder is very flat, so there's little opportunity to have several <code>.ulift</code> files, as we do under <code>algebra.</code> (<code>algebra.group.pi</code>, <code>algebra.order.pi</code>)</p>",
        "id": 282761386,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652865943
    },
    {
        "content": "<p>(assuming you think splitting the thread makes sense)</p>",
        "id": 282761466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/preorder.20on.20ulift/near/282761184\">said</a>:</p>\n<blockquote>\n<p>I want to destroy those type synonym instances files, so I don't want another one to pop up.</p>\n</blockquote>\n<p><code>ulift</code> isn't a type synonym <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 282761487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865995
    },
    {
        "content": "<p>Got me there!</p>",
        "id": 282761570,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652866040
    },
    {
        "content": "<p><span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span> I moved other people's messages as well? Where is this unexpected strength coming from?</p>",
        "id": 282761597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652866066
    },
    {
        "content": "<p>You can move everyone below yours, just not piecewise. I've moved the stragglers back</p>",
        "id": 282761687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652866105
    },
    {
        "content": "<p>I've thought about how to organize <code>order.</code> in subfolders, but no trend emerges to my eyes yet.</p>",
        "id": 282761906,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652866223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Instance.20files/near/282761386\">said</a>:</p>\n<blockquote>\n<p>In particular, the <code>order</code> folder is very flat, so there's little opportunity to have several <code>.ulift</code> files, as we do under <code>algebra.</code> (<code>algebra.group.pi</code>, <code>algebra.order.pi</code>)</p>\n</blockquote>\n<p>Ah, perhaps I wasn't clear. I think we should treat <code>ulift</code> the same way we already treat <code>pi</code> and <code>prod</code>; that is, if we have a separate <code>prod</code> file then make a separate <code>ulift</code> file, and if the <code>prod</code> instance is inline in another file, then put the <code>ulift</code> instance next to it.</p>",
        "id": 282761911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652866225
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.preorder\">docs#pi.preorder</a> is inlined in a larger file, so the ulift one should be too.</p>",
        "id": 282761941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652866249
    },
    {
        "content": "<p>So no <code>order.ulift</code> file</p>",
        "id": 282761958,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652866262
    },
    {
        "content": "<p>That sounds more reasonable already</p>",
        "id": 282761983,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652866277
    },
    {
        "content": "<p>Yes, only because there seems to be no precedent for that in <code>order/</code></p>",
        "id": 282762009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652866296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Instance.20files/near/282761184\">said</a>:</p>\n<blockquote>\n<p>I want to destroy those type synonym instances files, so I don't want another one to pop up.</p>\n</blockquote>\n<p>But I don't think this is necessarily a good idea in general</p>",
        "id": 282762045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652866314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> had to tweak the import tree elsewhere because of <code>algebra.punit_instances</code></p>",
        "id": 282762138,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652866352
    },
    {
        "content": "<p>This to me is already a sign that we should move away from those files.</p>",
        "id": 282762166,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652866374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Instance.20files/near/282761296\">said</a>:</p>\n<blockquote>\n<p>Classes can be defined arbitrarily low in the instance hierarchy, and all the <code>prod</code>/<code>pi</code> files have to decide of an arbitrary cutting point.</p>\n</blockquote>\n<p>The whole game of the import graph is to decide arbitrary cutting points, you have to cut the entire DAG into smaller DAGs and then put them in some topological order.</p>",
        "id": 282762186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652866385
    },
    {
        "content": "<p><code>punit_instances</code> is bad; it doesn't follow the pattern of <code>pi</code> and <code>prod</code></p>",
        "id": 282762203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652866395
    },
    {
        "content": "<p>Ah, so you would prescribe splitting it up into <code>algebra.group.punit</code> and others?</p>",
        "id": 282762347,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652866472
    },
    {
        "content": "<p>(also, this thread belongs in #general but I didn't manage to move it there)</p>",
        "id": 282762435,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652866535
    },
    {
        "content": "<p>I think the pattern of splitting <code>algebra.punit_instances</code> into <code>algebra.group.punit</code>, <code>algebra.gcd_monoid.punit</code>, etc. is generally a good idea, although I'm not so convinced by the argument of \"we should follow the established pattern\". For me the most important rule of thumb for organizing declarations over files is that the imports of a file should not be too much bigger than the dependencies of any declaration in that file. This way, if a declaration is logically accessible at a low point in the declaration hierarchy, it can also be imported at a low point in the import hierarchy. We don't get artificial cyclic dependencies and we don't need to recompile many intermediate files to modify two declarations in sync.</p>\n<p>In particular, the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/punit.comm_group\">docs#punit.comm_group</a> depends only on <code>punit</code> and <code>comm_group</code>; <code>punit</code> is defined in core and <code>comm_group</code> in <code>algebra.group.defs</code> so the imports for the file that <code>punit.comm_group</code> is defined in should not be much more than <code>algebra.group.defs</code> itself.</p>\n<p>For the question of whether to name the file containing this declaration something like <code>algebra.group.punit</code> or something like <code>data.punit.group</code>, I agree that the most important quality is the ability to find it easily, so precedent would guide us towards <code>algebra.group.punit</code>.</p>",
        "id": 282768724,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652870265
    },
    {
        "content": "<p>(Of course the <em>real</em> solution is to do away with this outdated notion of files altogether and just have a database of content-addressable declarations.)</p>",
        "id": 282768893,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652870388
    },
    {
        "content": "<p>I've seen a software project that kept numbered files, each importing the last, and you just inserted things where they were supposed to be. (I suppose that's not so different from metamath's <a href=\"http://set.mm\">set.mm</a> if you think about how that gigantic file is ultimately stored across multiple blocks in physical storage)</p>",
        "id": 282772095,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652872520
    },
    {
        "content": "<p>Maybe the <code>comm_group punit</code> instance can go with the definition of <code>comm_group</code>?</p>",
        "id": 282772114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652872544
    },
    {
        "content": "<blockquote>\n<p>although I'm not so convinced by the argument of \"we should follow the established pattern\"</p>\n</blockquote>\n<p>If we don't do this, then every few months we establish a different pattern and things become worse</p>",
        "id": 282772218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652872605
    },
    {
        "content": "<p>Yes Reid, that's what I'm arguing for.</p>",
        "id": 282772231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652872618
    },
    {
        "content": "<p>If we don't like the established pattern, we should change it globally, rather than establishing a parallel pattern (edit: <a href=\"https://xkcd.com/927/\">https://xkcd.com/927/</a>)</p>",
        "id": 282772252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652872636
    },
    {
        "content": "<p>I mean literally after it in the same file, not in a new file <code>algebra.group.punit</code></p>",
        "id": 282772262,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652872649
    },
    {
        "content": "<p>The same argument goes for <code>prod</code> and <code>pi</code> too, right?</p>",
        "id": 282772293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652872671
    },
    {
        "content": "<p>Yes, I assume so</p>",
        "id": 282772380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652872717
    },
    {
        "content": "<p><code>algebra/group/defs</code> is 800 lines long; what do we gain by <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/group/prod.lean#L33-L202\">adding these 170 lines</a> to it?</p>",
        "id": 282772554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652872813
    },
    {
        "content": "<p>Isn't the whole point of a <code>defs</code> file to contain just the defs, and not actually any instances?</p>",
        "id": 282772578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652872831
    },
    {
        "content": "<p>It can be in <code>algebra.group.basic</code>, sure.</p>",
        "id": 282772620,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652872861
    }
]