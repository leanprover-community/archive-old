[
    {
        "content": "<p>Do we have any guidelines on using <code>p â†” q</code> vs <code>p = q</code> as the statement of a theorem? I see that <code>mem_set_of_eq</code> and some other <code>set</code> lemmas use <code>=</code> while many other lemmas use <code>iff</code>.</p>",
        "id": 200842984,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592185568
    },
    {
        "content": "<p>I don't think we do. The passage from <code>iff</code> to <code>eq</code> requires propositional extensionality. In early Lean history, we were worried about the effect of <code>propext</code> on computation, so when we could prove an equality without it (e.g. if the proof is <code>refl</code>), we favored that. But I don't know the effect of <code>propext</code> on computation is a big concern, and, if it isn't, it would be nice to standardize on iff.</p>",
        "id": 200905192,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1592234994
    },
    {
        "content": "<p>A more practical issue is that <code>dsimp</code> does not use lemmas declared with <code>iff</code>, it can only use lemmas with <code>eq</code> where the proof is literally <code>rfl</code>.  But this could be fixed.</p>",
        "id": 200905497,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592235102
    },
    {
        "content": "<p>Mario gave an example where the use of <code>propext</code> somewhere in <code>factors</code> was blocking computation <a href=\"#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/196856701\">here</a>.</p>",
        "id": 200906863,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592235546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/iff.20vs.20eq/near/200905497\">said</a>:</p>\n<blockquote>\n<p>A more practical issue is that <code>dsimp</code> does not use lemmas declared with <code>iff</code>, it can only use lemmas with <code>eq</code> where the proof is literally <code>rfl</code>.  But this could be fixed.</p>\n</blockquote>\n<p>Sounds like a nice feature for <code>lean-3.5.17</code> (-;</p>",
        "id": 200911094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592237524
    },
    {
        "content": "<p>Don't ask for more features for lean 3.5.17, it might delay it and I would be curious to see what <a href=\"https://github.com/leanprover-community/lean/issues/332\">lean#332</a> does to mathlib as soon as possible. I'm fine for 3.5.18, though!</p>",
        "id": 200911301,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592237677
    },
    {
        "content": "<p>Ok, <code>3.5.18</code> is a very nice version number as well (-;</p>",
        "id": 200911857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592237956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/iff.20vs.20eq/near/200905497\">said</a>:</p>\n<blockquote>\n<p>A more practical issue is that <code>dsimp</code> does not use lemmas declared with <code>iff</code>, it can only use lemmas with <code>eq</code> where the proof is literally <code>rfl</code>.  But this could be fixed.</p>\n</blockquote>\n<p>Yeah I've been caught out by this a couple of times</p>",
        "id": 200912577,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592238307
    }
]