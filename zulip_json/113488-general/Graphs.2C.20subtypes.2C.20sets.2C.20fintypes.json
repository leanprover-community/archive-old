[
    {
        "content": "<p>Hello hello<br>\nI would like to formalize some theorems of graph theory, but before going any further I would like to get the basis of the implementation right.<br>\nI did do some work representing the edges as a set, but I didn't feel it was the most natural ways to do it. I tried another approach using the binary edge relation between vertices and lots of coercions from sets to subtypes, but it had me write lots of instances which I don't find particularily aesthetic. Here is a piece of code which is right but doesn't seem to carry the best design choices that could be made. What do you think ? :)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- so my goal is to define graphs</span>\n<span class=\"c1\">-- I find the best way to implement them is as a structure with a set of vertices and a binary relation on those vertices</span>\n<span class=\"c1\">-- I like the coercion from sets to subtypes, but it looks like it makes things a little complicated with the little experience I have (see below)</span>\n<span class=\"kn\">constants</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">vertices</span> <span class=\"bp\">→</span> <span class=\"n\">vertices</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- this is an extra convenient definition to allow the creation of &quot;set edges&quot; below</span>\n<span class=\"n\">def</span> <span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"bp\">×</span> <span class=\"n\">vertices</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ⟨</span><span class=\"n\">v₁</span><span class=\"o\">,</span><span class=\"n\">v₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">edge</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span>\n\n<span class=\"c1\">-- I would like to reason on the edge binary relation rather than on the set of edges, that&#39;s why I suppose edge is a decidable rel</span>\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">edge</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"bp\">λ⟨</span><span class=\"n\">v₁</span><span class=\"o\">,</span><span class=\"n\">v₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span>\n\n<span class=\"c1\">-- set of edges whose tip is v ∈ vertices</span>\n<span class=\"c1\">-- used to define the &quot;in-degree&quot; of vertex v</span>\n<span class=\"c1\">-- in_edges has type &quot;set edges&quot; because I find it convenient, maybe it&#39;s not the best to do (too many coercions ?)</span>\n<span class=\"n\">def</span> <span class=\"n\">in_edges</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vertices</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">hv</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"bp\">λ⟨⟨_</span><span class=\"o\">,</span><span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n\n<span class=\"c1\">-- I need to use noncomputable because in_edges is a set whose base type is a subtype and</span>\n<span class=\"c1\">-- I only assume decidable_eq on V</span>\n<span class=\"c1\">-- but there exists subtype.decidable_eq...</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vertices</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">in_edges</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">hv</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"bp\">λ⟨⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">b</span> <span class=\"n\">v</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vertices</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">vertices</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">edge</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">in_edges</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">set_fintype</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">set_fintype</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">vertices</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">edge</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- now I want to define some stuff on finite graphs and prove some lemmas</span>\n<span class=\"c1\">-- for instance, the sum of the in_degrees of all the vertices is equal to fintype.card edges</span>\n<span class=\"c1\">-- which I did prove, but with another unpleasant setup</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">in_degree</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vertices</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">in_edges</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span>\n<span class=\"c1\">-- this doesn&#39;t work without the extra instances above</span>\n<span class=\"c1\">-- I would like instances to be inferred out-of-the-box but I didn&#39;t succeed</span>\n</pre></div>",
        "id": 128121007,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1529070965
    },
    {
        "content": "<p>I think you are misusing <code>constants</code> here - this is equivalent to <code>axiom</code> in lean, while I think you mean something more like <code>variables</code> or <code>parameters</code></p>",
        "id": 128121155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529071159
    },
    {
        "content": "<p>Probably ! My initial script involved the definition of a graph structure and then a graph as a variable. The \"constants\" part was just to make it shorter, should be \"variables\" then.</p>",
        "id": 128121326,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1529071339
    },
    {
        "content": "<p>For the theory of possibly infinite graphs, I recommend using a type alpha of vertices and a binary relation E for the edges. In this context it does not differ substantially with order theory</p>",
        "id": 128121338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529071361
    },
    {
        "content": "<p>But then, how would you describe a subset of the vertices, for instance a clique ?</p>",
        "id": 128121400,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1529071433
    },
    {
        "content": "<p>the subset itself can just be a <code>set A</code></p>",
        "id": 128121450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529071454
    },
    {
        "content": "<p>but if you want to talk about the induced subgraph you can use <code>subtype</code></p>",
        "id": 128121456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529071469
    }
]