[
    {
        "content": "<p>How to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_like\">docs#set_like</a> in practice? Consider the following definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.pairwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set_like.basic</span>\n\n<span class=\"sd\">/-- A finpartition of a finset `s` is a collection of disjoint subsets of `s` which cover it. -/</span>\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">finpartition_on</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">parts</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"o\">:</span> <span class=\"n\">set.pairwise_disjoint</span> <span class=\"o\">(</span><span class=\"n\">parts</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">cover</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">parts</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">subset</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">parts</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">not_empty_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">∉</span> <span class=\"n\">parts</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I set-likified in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A finpartition of an set-like object `s` is a collection of disjoint subset-like objects of `s` which cover it. -/</span>\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">finpartition_on</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">parts</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">parts</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">pairwise_disjoint</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cover</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">parts</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">subset</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">parts</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">not_empty_mem</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">parts</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>but that's pretty unsatisfactory as I've added a bunch of coercions. In particular, I could already express <code>∅ ∉ parts</code> without going through <code>set β</code> but that requires knowing there's an <code>∅ : α</code> and that it gets coerced to <code>∅ : set β</code>.<br>\nAm I right in thinking we have no way of relating the structures on <code>α</code> and <code>set β</code>? And is this the right approach?</p>",
        "id": 257581560,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634235759
    },
    {
        "content": "<p>By the way, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, thanks for this masterpiece!</p>",
        "id": 257581595,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634235774
    },
    {
        "content": "<p>Your setified version doesn't require the entries of <code>parts</code> be finite; is that what yo uwanted?</p>",
        "id": 257581931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634235893
    },
    {
        "content": "<p>Yeah. I can recover the \"finite parts\" case by taking <code>s : finset α</code>, so this second definition is strictly more general, right?</p>",
        "id": 257582131,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634235973
    },
    {
        "content": "<p>What I can't do is to generalize the outer <code>finset</code>.</p>",
        "id": 257582254,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634236031
    },
    {
        "content": "<p>Do we even have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.set_like\">docs#finset.set_like</a> (edit: not under that name). I didn't design <code>set_like</code> for anything more than subobject, so have no suggestions for this type of use</p>",
        "id": 257582709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634236222
    },
    {
        "content": "<p>Oh really? Using it for <code>finset α</code>, <code>multiset α</code>, ... was for me the obvious application.</p>",
        "id": 257582781,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634236256
    },
    {
        "content": "<p>It would put the wrong partial_order on multiset, I think</p>",
        "id": 257582876,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634236296
    },
    {
        "content": "<p>Does multiset even have a coercion to set? I wouldn't be surprised if it didn't</p>",
        "id": 257582989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634236326
    },
    {
        "content": "<p>Oh yeah, maybe not <code>multiset</code>.</p>",
        "id": 257583067,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634236358
    },
    {
        "content": "<p>But I always regarded <code>set_like</code> as the common generalization of <code>set</code> and <code>finset</code>.</p>",
        "id": 257583113,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634236380
    },
    {
        "content": "<p>I'm not opposed to adding the instance for <code>finset</code>, but we should have some evidence its going to be useful before doing it</p>",
        "id": 257583204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634236419
    },
    {
        "content": "<p>To reuse the above example, there are four kinds of partitions one could care about</p>\n<ul>\n<li><code>set (set α)</code>:  partitions with parts</li>\n<li><code>finset (set α)</code>:  finite partitions with parts</li>\n<li><code>set (finset α)</code>:  partitions with finite parts</li>\n<li><code>finset (finset α)</code>:  finite partitions with finite parts</li>\n</ul>",
        "id": 257583604,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634236565
    },
    {
        "content": "<p>Having <code>set_like (finset α) α</code> would reduce that number to two.</p>",
        "id": 257583702,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634236601
    },
    {
        "content": "<p>There are also, I assume, some of the <code>finset</code> and <code>set</code> APIs that are duplicated because not established in the <code>set_like</code> generality.</p>",
        "id": 257583966,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634236693
    },
    {
        "content": "<p>You should be able to generalise this further - to a lattice with bot: cover/subset can say the (finite) sup is <code>s</code>, <code>not_empty_mem</code> can say the bottom element isn't in <code>parts</code> and <code>disjoint</code> can say pairwise disjoint</p>",
        "id": 257587528,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1634238129
    },
    {
        "content": "<p>Damn, Bhavik always do be right.</p>",
        "id": 257587696,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634238209
    },
    {
        "content": "<p>I think that you should be careful with creating things that use <code>set_like</code> as a hypothesis -- if something is <code>set_like</code>, (in my opinion) the API is to just treat the thing like a set using the coercion.  I see the typeclass as a mixin that causes functionality to be added to a type, rather than adding the functionality directly.</p>\n<p>The only case I can think of where you might want <code>set_like</code> as a hypothesis is if you're defining a structure and you want it to have the correct extensionality properties.  Most <code>set_like</code>s are subobjects of algebraic objects, so for a <code>finpartition_on</code> you'll have a hard time achieving disjointness.</p>",
        "id": 257653207,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634280304
    },
    {
        "content": "<p>I'd like to see <code>finset</code> get its set-like-ness from <code>set_like</code> someday, for uniformity.  Maybe it's not so much work if you figure out a nice way to define the injection to <code>set</code>?</p>",
        "id": 257653398,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634280455
    }
]