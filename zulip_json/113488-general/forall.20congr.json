[
    {
        "content": "<p>I have not once gotten <code>forall_congr</code> to fire with <code>congr</code></p>",
        "id": 288020945,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656592843
    },
    {
        "content": "<p>Anyone knows what's up with that?</p>",
        "id": 288020971,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656592847
    },
    {
        "content": "<p>It really stifles the tactic</p>",
        "id": 288020988,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656592853
    },
    {
        "content": "<p>Does congr even work on iffs?</p>",
        "id": 288024520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656594519
    },
    {
        "content": "<p>Wait, it doesn't?</p>",
        "id": 288024722,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656594616
    },
    {
        "content": "<p>I thought I was just unlucky at getting it to fire</p>",
        "id": 288024752,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656594632
    },
    {
        "content": "<p>Are you supposed to do <code>propext, congr</code> then?</p>",
        "id": 288024792,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656594653
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>  <span class=\"c1\">--  only the primed version works</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288028530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656596266
    },
    {
        "content": "<p>You could change <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.congr_core'\">docs#tactic.congr_core'</a> to support this</p>",
        "id": 288029588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656596696
    },
    {
        "content": "<p>I assume you want it to do <code>intros</code> too?</p>",
        "id": 288029634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656596719
    },
    {
        "content": "<p>What should it do if the variables have different names on each side?</p>",
        "id": 288029657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656596737
    },
    {
        "content": "<p>That is, what do you want the goal state to be here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">my_congr</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ???</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288029881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656596832
    },
    {
        "content": "<p>I'd expect it to use either of the possible names</p>",
        "id": 288030460,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656597091
    },
    {
        "content": "<p>Wouldn't matter too much which one</p>",
        "id": 288030466,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656597098
    },
    {
        "content": "<p>According to <code>congrm</code>, this is what you get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.congrm</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">congrm</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ b = d</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288030563,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656597137
    },
    {
        "content": "<p>By the way, am I doing something wrong? <code>congr'</code> isn't doing anything here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.order_iso_nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span><span class=\"n\">o</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span><span class=\"n\">o</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">congr'</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 288030580,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656597148
    },
    {
        "content": "<p><code>congr'</code> doesn't know about forall either, but we can trivially modify it so that it does</p>",
        "id": 288030716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656597206
    },
    {
        "content": "<p>Again, <code>congrm</code>, though with some help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span><span class=\"n\">o</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span><span class=\"n\">o</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">congrm</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span><span class=\"n\">o</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)),</span>\n  <span class=\"c1\">-- ⊢ ¬⇑a n &lt; ⇑a m ↔ ⇑a n = ⇑a m</span>\n <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 288031187,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656597425
    },
    {
        "content": "<p>Thanks! This is precisely what I was looking for</p>",
        "id": 288034152,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656598542
    },
    {
        "content": "<p>Great to hear this!  Heather wanted this \"<code>congr</code> extension\" and I think that it is a very good idea.  It works on the assumption that the lhs and rhs have a similar pattern and it gives you the possibility of putting underscores on the \"differing\" parts, to create side-goals.</p>\n<p>Since it works mostly up to defeq, being \"the same\" can be stronger or weaker than you pretty-print.</p>",
        "id": 288034613,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656598708
    },
    {
        "content": "<p>I think it would stil<br>\n<span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/forall.20congr/near/288030563\">said</a>:</p>\n<blockquote>\n<p>According to <code>congrm</code>, this is what you get:</p>\n</blockquote>\n<p>This nicely sidesteps the problem of coming up with names due to the pattern containing the names in the first place</p>",
        "id": 288036325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656599316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/113488-general/topic/forall.20congr/near/288020945\">said</a>:</p>\n<blockquote>\n<p>I have not once gotten <code>forall_congr</code> to fire with <code>congr</code></p>\n</blockquote>\n<p>The short answer to this is that <code>congr</code> does not use user <code>@[congr]</code> lemmas. It only uses congr lemmas generated by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.mk_congr_lemma\">docs#tactic.mk_congr_lemma</a> and friends -- these are the automatically synthesized lemmas that <code>simp</code> uses to navigate equalities and heterogeneous equalities.</p>",
        "id": 288048141,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656604025
    },
    {
        "content": "<p>User <code>@[congr]</code> lemmas are only used in the inner workings of <code>simp</code>, so they're not useless. (I was surprised they weren't used by <code>congr</code> -- I'd spent a good amount of time trying to figure out what I was doing wrong to get them to fire before I realized this).</p>",
        "id": 288048359,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656604103
    },
    {
        "content": "<p>While I do not understand how the <code>mk_congr_lemma</code>s are generated, the same is also true of <code>congrm</code>.  Except, that since the user provides a canvas to <code>congrm</code> for how to snake through the congruences, it can reach where <code>congr</code> does not.</p>",
        "id": 288048448,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656604143
    },
    {
        "content": "<p>I had started modifying <code>congr'</code> to make use of user congruence lemmas, but it had far-reaching effects since it's used in many places and I didn't want to go through mathlib to fix everything at the time.</p>",
        "id": 288048525,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656604188
    },
    {
        "content": "<p><code>mk_congr_lemma</code> lemmas are generated in the C++ side. Roughly, it looks at a function application, sees what kinds of arguments it has, then generates a custom congruence lemma for the situation. It takes into account things like <code>decidable</code> being a subsingleton.</p>",
        "id": 288048737,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656604267
    },
    {
        "content": "<p>Kyle, thanks, this helps a bit!  I had explored those C++ generated <code>congr_lemma</code>s via <code>trace</code>ing them, but it was somewhat inefficient and left several doubts.  In particular, I had completely missed <code>decidable</code> issues.</p>",
        "id": 288049098,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656604428
    },
    {
        "content": "<p>Here's a description of each of the argument kinds: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/congr_lemma.h#L13\">https://github.com/leanprover-community/lean/blob/master/src/library/congr_lemma.h#L13</a></p>\n<p>Here's the same thing on the Lean side (though the docstring is a bit out of date): <a href=\"https://leanprover-community.github.io/mathlib_docs/find/congr_arg_kind\">docs#congr_arg_kind</a></p>",
        "id": 288049833,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656604745
    },
    {
        "content": "<p>Thanks!  Honestly, I still find it cryptic, but having seen them in action, made me accept them \"a little\"!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 288050181,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656604863
    }
]