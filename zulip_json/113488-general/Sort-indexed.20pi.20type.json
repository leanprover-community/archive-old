[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/con-nf\">Con(NF)</a>, we need a huge recursion involving a lot of data defined by well-founded recursion, including a group <code>Str</code>of the form <code>Str a := Π b &lt; a, Str b</code> (the fact that it's well-founded is irrelevant to the question, though).</p>\n<p>I wish I could provide <code>(Π b &lt; a, group (Str b)) → group (Str a)</code> with two nested applications of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.group\">docs#pi.group</a>, but the indexing type is only allowed to be a type and <code>b &lt; a</code> is a prop. If I generalize <code>I : Type*</code> to <code>I : Sort*</code> in <code>pi.group</code>, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>while <code>Sort (max u (v+1))</code> is of course never <code>Prop</code>. Am I doomed and is there really no way around using a subtype to index my elements (namely, having <code>b : {b // b &lt; a}</code>)?</p>",
        "id": 286714410,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655651075
    },
    {
        "content": "<p>Your problem is that <code>has_mul</code> is only defined on <code>Type</code></p>",
        "id": 286714496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655651203
    },
    {
        "content": "<p>Aka <code>Sort (1+u)</code></p>",
        "id": 286714507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655651229
    },
    {
        "content": "<p>And not <code>Sort (max u 1)</code> or similar</p>",
        "id": 286714521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655651250
    },
    {
        "content": "<p>I think it will be easiest to just add a second instance with <code>I : Prop</code></p>",
        "id": 286714538,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655651271
    },
    {
        "content": "<p>I guess I could provide separate instances for <code>Prop</code>-indexed groups?</p>",
        "id": 286714542,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655651273
    },
    {
        "content": "<p>You could also define <code>Str a := Π b: {b // b &lt; a}, Str b</code></p>",
        "id": 286714611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655651353
    },
    {
        "content": "<p>Yeah, this is what I am trying to avoid.</p>",
        "id": 286714618,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655651381
    },
    {
        "content": "<p>Is generalizing <code>has_mul</code> (but none of the lemmas) to <code>Sort</code> undesirable because it complicates the universe signature?</p>",
        "id": 286714672,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655651425
    },
    {
        "content": "<p>because <code>max u 1</code> does not play well with universe inference</p>",
        "id": 286714685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655651455
    },
    {
        "content": "<p>it's the same reason <code>psigma</code> is not the default</p>",
        "id": 286714712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655651491
    },
    {
        "content": "<p>Ah so we want <code>phas_mul</code>! <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 286714778,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655651532
    },
    {
        "content": "<p>presumably you could also just write the group instance by hand in 3 lines</p>",
        "id": 286714808,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655651555
    },
    {
        "content": "<p>just to establish a baseline here</p>",
        "id": 286714814,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655651566
    },
    {
        "content": "<p>What instance? I thought the problem is that the type of that instance is invalid</p>",
        "id": 286714995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655651782
    },
    {
        "content": "<p>No, it is valid for <code>Prop</code> and <code>Type*</code> <em>separately</em>.</p>",
        "id": 286715022,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655651840
    },
    {
        "content": "<p><code>Sort (max 0 1) = Type</code></p>",
        "id": 286715030,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655651875
    },
    {
        "content": "<p>What's the mwe?</p>",
        "id": 286715174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655652022
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.pi</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I guess</p>",
        "id": 286715340,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655652298
    },
    {
        "content": "<p>Is that already an error?</p>",
        "id": 286715851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655653012
    },
    {
        "content": "<p>Yes</p>",
        "id": 286730370,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655673211
    },
    {
        "content": "<p>Duplicating every instance on <code>pi</code> for <code>Prop</code> in addition to <code>Type*</code> does sound rather unappealing</p>",
        "id": 286731292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655674562
    },
    {
        "content": "<p>How about just the ones that are actually needed?</p>",
        "id": 286734432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655679585
    },
    {
        "content": "<p>I am happy to leave them in the <code>con-nf</code> repo until we figure out which ones we actually need. That recursion is nasty and our approach will probably change several times.</p>",
        "id": 286734504,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655679672
    },
    {
        "content": "<p>For reference, <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> just hit the same problem for order classes on Xena. I guess that's a bit pathological because it was to get monotonicity of a prop-indexed function to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monotone_nat_of_le_succ\">docs#monotone_nat_of_le_succ</a></p>",
        "id": 286931277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655825503
    },
    {
        "content": "<p>Without introducing the duplicated instances, could we at least make <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.pi_instance_derive_field\">docs#tactic.pi_instance_derive_field</a> work on Prop-indexed pi-types?</p>",
        "id": 287558933,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656326041
    },
    {
        "content": "<p>Sorry for the noise, the error message was obscure but I was just missing previous instances. It all just works.</p>",
        "id": 287559656,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656326589
    }
]