[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, I am getting lots of strange errors that claim to be about typeclass inference for <code>has_colimits</code>. A typical example is:</p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nC : Type u,\nùíû : category C,\n_inst_1 : has_colimits C,\nF G H : PresheafedSpace C,\nŒ± : F ‚ü∂ G,\nŒ≤ : G ‚ü∂ H,\nx : ‚Ü•(F.X)\n‚ä¢ Œ† {J : Type v} {ùí• : small_category J} (F : J ‚•§ C), has_colimit F\n</pre></div>",
        "id": 162678972,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554518135
    },
    {
        "content": "<p>(The goal is just the definition of <code>has_colimits C</code>.)</p>",
        "id": 162678974,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554518152
    },
    {
        "content": "<p>Do you have any idea what going on here?</p>",
        "id": 162678975,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554518159
    },
    {
        "content": "<p>The current place it is cropping up, very mysteriously is <a href=\"https://github.com/leanprover-community/mathlib/commit/1989f232953a5e035cf7597b73dd105149f93edd#diff-974f155b519a3688df42f3dbb27a7207R72\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/1989f232953a5e035cf7597b73dd105149f93edd#diff-974f155b519a3688df42f3dbb27a7207R72\">here</a>, and for now blocking me working on stalks.</p>",
        "id": 162679093,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554518295
    },
    {
        "content": "<p>Is it some strange bug in Lean dealing with <code>[class]</code> attributes on function types?</p>",
        "id": 162679099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554518329
    },
    {
        "content": "<p>Or maybe I'm doing something dumb.</p>",
        "id": 162679102,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554518340
    },
    {
        "content": "<p>Yeah I've seen errors like this before. It seems that the <code>@[class] def has_colimits :=</code> a Pi-type doesn't actually totally work, even though it seems to mostly work. It takes some slightly complicated setup for it to stop working and I never got to the bottom of it.<br>\nI think we just need to change each of the classes to be a structure</p>",
        "id": 162680400,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554520162
    },
    {
        "content": "<p>with instances that specialize <code>has_colimits</code> -&gt; <code>has_colimits_of_shape</code> -&gt; <code>has_colimit</code></p>",
        "id": 162680479,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554520227
    },
    {
        "content": "<p>and you won't be able to go back the other way from <code>Pi J, has_colimits_of_shape J</code> to <code>has_colimits</code> automatically, but that probably doesn't really matter in practice</p>",
        "id": 162680485,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554520249
    },
    {
        "content": "<p>ok. I will try this out at some point.</p>",
        "id": 162683857,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554525263
    }
]