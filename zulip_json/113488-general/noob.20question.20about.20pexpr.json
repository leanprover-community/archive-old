[
    {
        "content": "<p>Hello everyone,</p>\n<p>this may be a stupid question but I was reading about lean's elaborator, and I got confused about the 'pexpr' type.<br>\nif I understand correctly, an elaborated term is a term without meta variables.<br>\nbut then I don't get what the 'pexpr' is, since it's defined as 'expr ff'. so as I read it, this means an unelaborated expression.<br>\nbut an 'expr' may already contain meta variables, so I don't understand what the 'elaborated' argument really means.</p>\n<p>could someone clarify this for me?</p>",
        "id": 167954065,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1560350952
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 167968798,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1560360432
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 167969120,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1560360615
    },
    {
        "content": "<p>What is the keyboard shortcut to send my message? I keep accidentally pressing it :/</p>",
        "id": 167969158,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1560360654
    },
    {
        "content": "<p><code>pexpr</code> are pre-expressions before elaboration, basically the terms you type.<br>\n<code>expr</code> are expressions after (and during) elaboration.<br>\nIt is true that <code>pexpr</code>s often contain metavariables and <code>expr</code>s often don't, but that is not the main difference.<br>\nIt is kind of a red herring that <code>pexpr</code> and <code>expr</code> are defined as the same structure in Lean, since they represent the same term very differently.</p>\n<p>Suppose I write <code>a = b</code>, or equivalently <code>eq a b</code> in Lean. As pexpr this will be represented as <code>app (app (const eq) (local_const a)) (local_const b)</code> (ignoring some arguments of <code>local_const</code>). Here <code>app</code>, <code>const</code> and <code>local_const</code> are constructors of the <code>expr</code> structure.  <br>\nHowever, <code>eq</code> also has an implicit argument (the type of <code>a</code> and <code>b</code>). After elaboration, the expression representing the same term has this implicit argument, so it becomes: <code>app (app (app (const eq) (local_const α)) (local_const a)) (local_const b)</code>.<br>\nSo <code>a = b</code> as a pre-expression becomes <code>eq a b</code> (hiding the constructors) and as expression it becomes <code>eq α a b</code>. </p>\n<p>Another (related) difference is that <code>pexpr</code> has some additional operations exposed. For example there is a <code>mk_explicit</code>which represents the <code>@</code>. So if I write <code>@eq α a b</code> this is the expression <code>(mk_explicit eq) α a b</code>.</p>\n<p>I hope that clears things up.</p>",
        "id": 167969636,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1560360996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> the command to send is either enter or ctrl-enter depending on whether \"press enter to send\" box is checked</p>",
        "id": 167993846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560377918
    },
    {
        "content": "<p>And if \"press enter to send\" is checked you can use <code>shift-enter</code> to get a new line.</p>",
        "id": 167997435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560381047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  thank you very much, that was very clear</p>",
        "id": 168029362,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1560418844
    }
]