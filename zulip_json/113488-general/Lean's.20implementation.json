[
    {
        "content": "<p>also, what language was lean originally implemented in?</p>",
        "id": 268085005,
        "sender_full_name": "crab",
        "timestamp": 1642201142
    },
    {
        "content": "<p>C++</p>",
        "id": 268085010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642201146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/is.20lean.20here.3F/near/268085010\">said</a>:</p>\n<blockquote>\n<p>C++</p>\n</blockquote>\n<p>why tho lol</p>",
        "id": 268085083,
        "sender_full_name": "crab",
        "timestamp": 1642201196
    },
    {
        "content": "<p>because leo knows C++ really well</p>",
        "id": 268085144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642201209
    },
    {
        "content": "<p>i would think that it was implementedin haskell or some functional lang</p>",
        "id": 268085193,
        "sender_full_name": "crab",
        "timestamp": 1642201222
    },
    {
        "content": "<p>They certainly felt the pain, that's why they rewrote it in some functional lang</p>",
        "id": 268085256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642201246
    },
    {
        "content": "<p>namely lean</p>",
        "id": 268085267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642201252
    },
    {
        "content": "<p>lean lol</p>",
        "id": 268085270,
        "sender_full_name": "crab",
        "timestamp": 1642201253
    },
    {
        "content": "<p>but it's hard to get the performance characteristics you want with functional languages</p>",
        "id": 268085319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642201284
    },
    {
        "content": "<p>i thought it is said that the programming language you use to make the compiler in doesnt really affect the speed</p>",
        "id": 268085424,
        "sender_full_name": "crab",
        "timestamp": 1642201334
    },
    {
        "content": "<p>lean 3 is being used in a very computationally heavy way, I can't imagine how many more CPU hours we would have burned on mathlib if the elaborator was less efficient</p>",
        "id": 268085429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642201339
    },
    {
        "content": "<p>i feel like rust is going to take over c++ for lang dev imo</p>",
        "id": 268085439,
        "sender_full_name": "crab",
        "timestamp": 1642201349
    },
    {
        "content": "<p>The programming language you use to make the compiler certainly affects the speed of the compiler</p>",
        "id": 268085469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642201379
    },
    {
        "content": "<p>c++ doesnt even have pattern matching</p>",
        "id": 268085471,
        "sender_full_name": "crab",
        "timestamp": 1642201383
    },
    {
        "content": "<p>and in theorem proving you spend all your time in \"compilation\"</p>",
        "id": 268085490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642201397
    },
    {
        "content": "<p>(I split this thread in case anyone has something to add to the logo conversation which we seem to have diverted from)</p>",
        "id": 268085696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642201548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Lean's.20implementation/near/268085469\">said</a>:</p>\n<blockquote>\n<p>The programming language you use to make the compiler certainly affects the speed of the compiler</p>\n</blockquote>\n<p>well, maybe the first implementation. for instance, rust was originally written in ocaml, but then rewritten in rust, and is now one of the fastest langs</p>",
        "id": 268085819,
        "sender_full_name": "crab",
        "timestamp": 1642201619
    },
    {
        "content": "<p>explain that</p>",
        "id": 268085822,
        "sender_full_name": "crab",
        "timestamp": 1642201621
    },
    {
        "content": "<p>Well, lean hasn't been self hosting prior to lean 4</p>",
        "id": 268085936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642201691
    },
    {
        "content": "<p>plus, that's only a good strategy for improving the compiler if your programming language is actually faster than the original language. Rust can definitely beat OCaml in some domains. I think it will be hard for Lean to compete with C++ on speed, but certainly there are some aspects that were being done inefficiently in C++ just because the setup is so much boilerplate work (e.g. everything was an <code>expr</code> because making inductive types in C++ is incredibly painful)</p>",
        "id": 268086165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642201855
    },
    {
        "content": "<p>im just showing</p>",
        "id": 268086418,
        "sender_full_name": "crab",
        "timestamp": 1642202025
    },
    {
        "content": "<p>that the programing lang you use doesnt affect the speed of the compiler nessacerily</p>",
        "id": 268086479,
        "sender_full_name": "crab",
        "timestamp": 1642202048
    },
    {
        "content": "<p>For a self hosting compiler, the speed of the compiler depends on <em>how good it is</em>. Good compilers are a ton of work</p>",
        "id": 268086544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642202098
    },
    {
        "content": "<p>right</p>",
        "id": 268086562,
        "sender_full_name": "crab",
        "timestamp": 1642202107
    },
    {
        "content": "<p>that is what matters</p>",
        "id": 268086568,
        "sender_full_name": "crab",
        "timestamp": 1642202112
    },
    {
        "content": "<p>rust was a good compiler</p>",
        "id": 268086578,
        "sender_full_name": "crab",
        "timestamp": 1642202118
    },
    {
        "content": "<p>Rust eventually became a good compiler after a ton of work</p>",
        "id": 268086600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642202134
    },
    {
        "content": "<p>Every compiler is born crappy</p>",
        "id": 268086617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642202147
    },
    {
        "content": "<p>and it's really hard to compete with e.g. LLVM, which is why even rust doesn't go there</p>",
        "id": 268086718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642202183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Lean's.20implementation/near/268086617\">said</a>:</p>\n<blockquote>\n<p>Every compiler is born crappy</p>\n</blockquote>\n<p>im gonna be honest, when rust first started, it was shitty like hell</p>",
        "id": 268086821,
        "sender_full_name": "crab",
        "timestamp": 1642202244
    },
    {
        "content": "<p>You realize that there is 1 or 2 orders of magnitude between the rust community and the lean community, right?</p>",
        "id": 268086913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642202295
    },
    {
        "content": "<p>im not saying lean is shitty</p>",
        "id": 268086978,
        "sender_full_name": "crab",
        "timestamp": 1642202336
    },
    {
        "content": "<p>We're doing our best to scale up but all theorem prover langs are in the rounding error compared to regular programming languages</p>",
        "id": 268086992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642202352
    },
    {
        "content": "<p>tbh, the rust community is really huge</p>",
        "id": 268087171,
        "sender_full_name": "crab",
        "timestamp": 1642202483
    },
    {
        "content": "<p>I don't think that speed is the main reason for self-hosting lean 4. It's more about the expressiveness and enabling user code to interact directly with the elaborator</p>",
        "id": 268087307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642202560
    },
    {
        "content": "<p>It's going to hugely speed up mathlib compilation, but that's because we're able to compile tactics now. It was too much work and too organizationally complicated to write tactics in C++, so most tactics were written in lean and interpreted. So Lean 4 is competing with (and beating the pants off) the lean 3 interpreter, not C++</p>",
        "id": 268087560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642202746
    },
    {
        "content": "<p>It also opens up being able to give Lean proofs that different parts of Lean written in Lean operate correctly, which is cool (at least in theory -- don't know if anyone is planning on doing this).</p>",
        "id": 268087665,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642202804
    },
    {
        "content": "<p>I think there are still a number of challenges to solve before that becomes theoretically possible. Most of the elaborator is in a lifted IO monad</p>",
        "id": 268087834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642202941
    },
    {
        "content": "<p>and <code>partial</code> and <code>extern</code> make everything interesting</p>",
        "id": 268087873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642202973
    },
    {
        "content": "<p>but hats off to the lean team for making almost everything be non-<code>unsafe</code>, so at least it's logically consistent for those functions to exist</p>",
        "id": 268088112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642203108
    },
    {
        "content": "<p>by contrast to lean 3 where everything is <code>meta</code> (= <code>unsafe</code>)</p>",
        "id": 268088172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642203131
    }
]