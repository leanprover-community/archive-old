[
    {
        "content": "<p>I'm sure there was a thread about this before, but I wasn't able to find it.<br>\nI often find that the cache that gets uploaded to azure doesn't actually work. See for instance any of:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/commits/2c79857a016b1ce4fd5b07c12b9f9c6fb3c5845a\">https://github.com/leanprover-community/mathlib/commits/2c79857a016b1ce4fd5b07c12b9f9c6fb3c5845a</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/commits/1d27f3ef40b5cbf59303eb16e5853046746e0c6e\">https://github.com/leanprover-community/mathlib/commits/1d27f3ef40b5cbf59303eb16e5853046746e0c6e</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/commits/29f2cec27b2888316abaa2bd72274fb460974cd6\">https://github.com/leanprover-community/mathlib/commits/29f2cec27b2888316abaa2bd72274fb460974cd6</a></li>\n</ul>\n<p>All of these are empty commits with a single parent commit, and CI produced a cache for that parent commit; yet all of them required a partial rebuild anyway.</p>",
        "id": 281446767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651847430
    },
    {
        "content": "<p>I vaguelly remember at one point we just had CI run <code>lean make; lean make; lean make</code> to workaround this? (edit: we still do, we only do it twice)</p>",
        "id": 281447377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651847674
    },
    {
        "content": "<p>To what extend is the order in which Lean compiles files deterministic and independent of the cache? If a build fails, the compilation stops, so you don't get a cache consisting of all files that compile (at, least, I think so). So maybe on the rebuild Lean starts compiling other files first?<br>\nNot sure if this is the reason though.</p>",
        "id": 281448029,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1651847868
    },
    {
        "content": "<p>In all these cases the cache doesn't even contain the files needed to reproduce the failure</p>",
        "id": 281448757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651848094
    },
    {
        "content": "<p>Ah, I guess our <code>lean make; lean make</code> hack doesn't work if the build fails the first time</p>",
        "id": 281449099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651848184
    },
    {
        "content": "<p>Since it will bail before the second command begins</p>",
        "id": 281449134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651848193
    },
    {
        "content": "<p>Presumably the cache contains all <em>dependencies</em> of the broken file? If that isn't the case, then there is clearly something wrong...</p>",
        "id": 281458572,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1651852367
    },
    {
        "content": "<p>No, it doesn't contain the dependencies either.</p>",
        "id": 281460122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651853109
    },
    {
        "content": "<p>Or if it does, they're considered invalid and rebuilt</p>",
        "id": 281460142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651853123
    },
    {
        "content": "<p>oh, ok. Then that is a problem.</p>",
        "id": 281464816,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1651855648
    },
    {
        "content": "<p>I can reproduce that the cache of <code>502be36986</code> behaves the way Eric says:  the error is reported in <code>analysis/normed_space/basic</code>, but if I recompile locally it starts recompiling from <code>tactic/cancel_denoms</code></p>",
        "id": 281466273,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1651856373
    },
    {
        "content": "<p>Weird, the oleans from the GitHub artifact (<a href=\"https://github.com/leanprover-community/mathlib/suites/6402242134/artifacts/233212189\">https://github.com/leanprover-community/mathlib/suites/6402242134/artifacts/233212189</a>) seem to work OK, but not the Azure version</p>",
        "id": 281467616,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1651857008
    },
    {
        "content": "<p>So they're different as binaries?</p>",
        "id": 281467960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651857198
    },
    {
        "content": "<p>Yes</p>",
        "id": 281468150,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1651857295
    },
    {
        "content": "<p>The Azure version of <code>src/tactic/cancel_denoms.olean</code> has MD5 <code>208fbe78b66c5bc6d924a25b7fc3e03d</code>, the GH artifact version has MD5 <code>2043d4862a2e327db6cc547f9fbd9b90</code>.</p>",
        "id": 281468254,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1651857354
    },
    {
        "content": "<p>Is either of those hashes the same a the parent commit?</p>",
        "id": 281469312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651857864
    },
    {
        "content": "<p>The Azure one has a timestamp of <code>05 May 2022, 01:13</code> in the archive, the GH one has a timestamp of <code>06 May 2022, 14:42</code> (there are files with older timestamps in the GH archive, just not this one).</p>",
        "id": 281469809,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1651858157
    },
    {
        "content": "<p>But there are only two olean files in the tactic folder  with today's date in the Azure archive.</p>",
        "id": 281469914,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1651858206
    },
    {
        "content": "<p>I don't know how reliable the timestamps are, let me search for parent commit hashes.</p>",
        "id": 281470084,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1651858291
    },
    {
        "content": "<p>A possible theory is that Azure caches aren't overwritten by default: The first run for <code>502be36986</code> uploaded some stale oleans onto <code>502be36986a2a14757cb43a61f4cfec4edb7361c.tar.xz</code> because it was cancelled (or suffered from an infra failure). The second run produced valid oleans but didn't upload them properly due to the pre-existing archive.</p>",
        "id": 281471730,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1651859053
    },
    {
        "content": "<p>Do you see the same problem with <code>2c79857a01</code>? Here <code>lean --make</code> fails quite quickly (<code>analysis/normed_space/basic.lean:475:24: error: failed to synthesize type class instance for</code>...) with the Azure oleans for this commit.</p>",
        "id": 281471761,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1651859070
    },
    {
        "content": "<p>This is plausible, Azure caches are not overwritten if they already exist. <a href=\"https://github.com/leanprover-community/mathlib/blob/master/.github/workflows/build.yml.in#L77\">https://github.com/leanprover-community/mathlib/blob/master/.github/workflows/build.yml.in#L77</a></p>",
        "id": 281472845,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1651859603
    },
    {
        "content": "<p>(I assume that's what <code>--overwrite false</code> means)</p>",
        "id": 281472862,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1651859619
    },
    {
        "content": "<p>And, according to the same file, something is pushed to Azure on the first run as long as the build started. So restarting a run doesn't help with fixing oleans if the worker OOMed the first time, for example. But a separate commit should have worked (and it does here, as far as I can tell).</p>",
        "id": 281472982,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1651859684
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/2039\">#2039</a> is the relevant PR. I'm not sure what I meant at the time, and it seems like GitHub has deleted the logs from the demo runs. Why would the second build fail at the push stage? <code>azcopy</code> defaults to <code>--overwrite true</code></p>",
        "id": 281474877,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1651860534
    },
    {
        "content": "<p>Conditioning on the fact that the build failed there, I'm guessing <code>azcopy</code> defaults to interactively asking the user if the file should be overwritten.</p>",
        "id": 281475205,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1651860697
    },
    {
        "content": "<p>Maybe it was prompting due to <a href=\"https://github.com/Azure/azure-storage-azcopy/pull/1538\">https://github.com/Azure/azure-storage-azcopy/pull/1538</a> before?</p>",
        "id": 281475515,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1651860850
    },
    {
        "content": "<p>The <a href=\"https://docs.microsoft.com/en-us/azure/storage/common/storage-ref-azcopy-copy\">docs</a> could be wrong or the behavior could have changed in the past two years, but they claim it defaults to <code>--overwrite true</code></p>",
        "id": 281475521,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1651860854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113488-general/topic/cache.20is.20incomplete/near/281475515\">said</a>:</p>\n<blockquote>\n<p>Maybe it was prompting due to <a href=\"https://github.com/Azure/azure-storage-azcopy/pull/1538\">https://github.com/Azure/azure-storage-azcopy/pull/1538</a> before?</p>\n</blockquote>\n<p>Huh, I'm not sure what that means, but maybe!</p>",
        "id": 281475559,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1651860887
    },
    {
        "content": "<p>In any case, we can test that <code>--overwrite true</code> does what we want</p>",
        "id": 281475757,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1651861001
    },
    {
        "content": "<p>The other thread (<a href=\"#narrow/stream/113488-general/topic/.22saving.20olean.22.3F\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.22saving.20olean.22.3F</a>) reminded me of this. Is adding <code>--overwrite true</code> still worth a try?</p>",
        "id": 290626588,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658600331
    }
]