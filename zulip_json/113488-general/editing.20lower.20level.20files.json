[
    {
        "content": "<p>I recently went to edit a file which is (presumably) lower in the mathlib hierarchy, namely <code>group_theory/group_action/units</code>. Even though I had downloaded the mathlib cache, as soon as I edited this file vscode (more precisely OSS Code) started a live rebuild of mathlib, which quickly runs me out of memory (8 GB). I understand that vscode is trying to rebuild all of the files which depend on this. So, how can I both edit the file and get more timely response from Lean? Is there a way to prevent it rebuilding everything and only check that the present file compiles (based on the existing oleans on which it depends from the cache)?</p>",
        "id": 262520180,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1637705056
    },
    {
        "content": "<p>I have had similar issues recently, so would also appreciate advice!</p>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/9430\">#9430</a> I moved a few lemmas to <code>topology.metric.basic</code>, and I had to commit, push, pull, get cache (and close and reopen editor) to get back to normal. I then moved another lemma to <code>topology.continuous_function.bounded</code>, and I'm yet to restore a working cache.</p>\n<p>Is there something that I or both of us are doing wrong or could be doing differently when editing these files that are imported in many others?</p>",
        "id": 262520712,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1637705342
    },
    {
        "content": "<p>Just in case this is relevant information regarding the problem, after pushing the most recent commit moving a lemma, I got an error in <em>build mathlib</em> check:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Build</span> <span class=\"n\">succeeded</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">files</span> <span class=\"n\">were</span> <span class=\"n\">noisy</span><span class=\"o\">:</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">finite_measure_weak_convergence.lean</span>\n</code></pre></div>",
        "id": 262521107,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1637705552
    },
    {
        "content": "<p>What I usually do in this situation is to close all files except for the low-level one I'm working on. Then, when that file compiles, I would execute <code>lean --make src/path/to/high/level/file.lean</code> to compile back up to the high level file I want (this is usually quite a bit faster than a full rebuild), and only then reopen the high-level file in VSCode.</p>",
        "id": 262521825,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1637705809
    },
    {
        "content": "<p>Thank you very much for the advice!</p>\n<p>(I didn't yet get to try it out --- I was in the middle of another commit, push, pull, get cache, reopen editor solution. It also worked again, but Frédéric's solution looks much better.)</p>",
        "id": 262521974,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1637705888
    },
    {
        "content": "<p>I get this problem even if the low-level file is the only one open, and the only one edited. This is reproducible for me. Checkout master, get cache, edit low level file, attempts to rebuild all of mathlib.</p>",
        "id": 262522283,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1637706076
    },
    {
        "content": "<p>For me the orange side bar moves quite fast in the files lower in the import hierarchy. My understanding was that Frédéric's solution can be applied as soon as one knows that the lower level file is without errors. (My \"solution\" also works in that case, but is probably not the recommended one: it indeed builds all of mathlib, although not locally.)</p>",
        "id": 262522870,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1637706423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/editing.20lower.20level.20files/near/262522283\">said</a>:</p>\n<blockquote>\n<p>I get this problem even if the low-level file is the only one open, and the only one edited. This is reproducible for me. Checkout master, get cache, edit low level file, attempts to rebuild all of mathlib.</p>\n</blockquote>\n<p>At the bottom of VSCode there's something like \"Lean: <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> (checking visible files)\". If this says \"project files\" instead, there's your problem.</p>",
        "id": 262523071,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1637706529
    },
    {
        "content": "<p>I think, despite my insistence that I only had that file open, that I also had the higher level file open in a separate vscode instance. So likely <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> has the solution for me, but thanks for that tip also!</p>",
        "id": 262523637,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1637706810
    },
    {
        "content": "<p>Another tip: if you use <code>--old</code> option in your lean command line, then it will not recompile all the files between the changed one and the opened one.</p>",
        "id": 262551940,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637737050
    }
]