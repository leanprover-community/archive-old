[
    {
        "content": "<p>I have a few questions about definitions in <code>data.equiv.transfer_instance</code>.</p>\n<ol>\n<li>Do <code>let</code>s in definitions like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.monoid\">docs#equiv.monoid</a> affect definitional equality?</li>\n<li>Is there an easy way to get rid of those <code>let</code>s? Does it mean using <code>@</code>? Or somehow call <code>clean</code>?</li>\n<li>Should we make all these definitions <code>@[reducible]</code>?</li>\n</ol>\n<p>My goal is to fix this file (e.g., make <code>equiv.monoid</code> aware of <code>npow</code>), move advanced stuff (e.g., local rings) to a new file, and use <code>equiv.semigroup</code> etc for <code>ulift</code> instances and additive structures on <code>opposite M</code>.</p>",
        "id": 260233866,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636007444
    },
    {
        "content": "<p>What's the advantage of using the stuff in this file vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.monoid\">docs#function.injective.monoid</a> etc?</p>",
        "id": 260235483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636009675
    },
    {
        "content": "<p>I think <code>data.equiv.transfer_instance</code> has quite heavy imports, making it impractical to use for low-level things like opposite and ulift</p>",
        "id": 260235572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636009759
    },
    {
        "content": "<p>I was going to split instances up to <code>group</code> (or <code>group_with_zero</code>) from instances that need heavy imports.</p>",
        "id": 260235773,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636009965
    },
    {
        "content": "<p><code>function.injective.monoid</code> does not support <code>nsmul</code>. I can add <code>injective.monoid_smul</code> etc that take <code>nsmul</code> as an explicit argument.</p>",
        "id": 260235844,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636010043
    },
    {
        "content": "<p>That would be great. Note that the current version (for <code>comm_ring</code>) is used by Witt vectors. So the <code>nsmul</code>-free versions should maybe stick around. Or can we do something with default arguments?</p>",
        "id": 260236719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636011010
    },
    {
        "content": "<p>I think we should just fix the arguments on the injective versions</p>",
        "id": 260236959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636011298
    },
    {
        "content": "<p>default arguments sound good to me</p>",
        "id": 260236976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636011323
    },
    {
        "content": "<p>I think that we should have two separate definitions: <code>injective.monoid</code> and <code>injective.monoid_smul</code>.</p>",
        "id": 260238762,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636013095
    },
    {
        "content": "<p>In one case we get axioms from <code>try_refl_tac</code>; in the other case we get them from <code>f (x ^ n) = f x ^ n</code>.</p>",
        "id": 260238783,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636013121
    },
    {
        "content": "<p>We used to have something like that for <code>monoid</code> and <code>monoid_div</code> etc, but then we got rid of the former and removed <code>_div</code> from the latter.</p>",
        "id": 260238947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636013257
    },
    {
        "content": "<p>So I don't think that's where we want to end up, but it's ok as an intermediate step to keep the PR under control</p>",
        "id": 260239010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636013298
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10152\">#10152</a></p>",
        "id": 260239042,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636013333
    },
    {
        "content": "<p>It's on top of <a href=\"https://github.com/leanprover-community/mathlib/issues/10147\">#10147</a>, so it makes no sense to review it now.</p>",
        "id": 260239063,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636013355
    },
    {
        "content": "<p>The relevant commit is <a href=\"https://github.com/leanprover-community/mathlib/pull/10152/commits/d6067983eab0ac4c1a740a2c631805aa598a3338\">https://github.com/leanprover-community/mathlib/pull/10152/commits/d6067983eab0ac4c1a740a2c631805aa598a3338</a></p>",
        "id": 260239104,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636013389
    },
    {
        "content": "<p>How about taking <code>[has_pow M ℕ]</code> instead of <code>npow : ℕ → M → M</code>? (Or whatever the argument order actually is)</p>",
        "id": 260239198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636013452
    },
    {
        "content": "<p>I'll think about it tomorrow. I'm too sleepy now.</p>",
        "id": 260239295,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636013524
    }
]