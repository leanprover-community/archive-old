[
    {
        "content": "<p>Ok, I have been converted. I am going to use definitional equations like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">notb</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">â†’</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">notb_1</span> <span class=\"o\">:</span> <span class=\"n\">notb</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">notb_2</span> <span class=\"o\">:</span> <span class=\"n\">notb</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n<p>Are they generated automatically? Exactly what is the naming convention?</p>\n<p>This means I am not going to use simp but always rw instead?</p>",
        "id": 211036360,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600882431
    },
    {
        "content": "<p><code>@[simp] theorem notb_1</code> would make simp rw along that theorem when possible.</p>",
        "id": 211037084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600882764
    },
    {
        "content": "<p>And the mathlib name convention would be to call it <code>notb_tt</code> and <code>notb_ff</code></p>",
        "id": 211037107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600882781
    },
    {
        "content": "<p>Ok, but they are not generated automagically?</p>",
        "id": 211037759,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600883100
    },
    {
        "content": "<p>Nope, I don't think so.</p>",
        "id": 211038421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600883403
    },
    {
        "content": "<p>But we have an attribute <code>@[simps]</code> that you can stick in front of a definition, and it will generate simp lemmas for you. At the moment it doesn't handle inductive definitions, like you gave. It only handles projections out of record types. But it's only lack of human time and energy... in principle we can have the automagic generation like you wish for.</p>",
        "id": 211038649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600883520
    },
    {
        "content": "<p>They are, use <code>#print prefix notb</code> to see them</p>",
        "id": 211038726,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600883540
    },
    {
        "content": "<p>Oooh, cool. But they aren't tagged <code>@[simp]</code>, right?</p>",
        "id": 211038768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600883557
    },
    {
        "content": "<p>ah, no</p>",
        "id": 211038966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600883646
    },
    {
        "content": "<p>Putting <code>@[simp] def notb : ...</code> does that, or something equivalent, no?</p>",
        "id": 211039280,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600883783
    },
    {
        "content": "<p>definitional equations like this are usually marked <code>@[simp]</code>, and as rob says you can just put <code>@[simp]</code> on the definition to mark the equation lemmas as simp lemmas</p>",
        "id": 211045814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600886773
    },
    {
        "content": "<p>(with the proviso that as the pattern matches become more complicated, the generated equation lemmas become more ... surprising!)</p>",
        "id": 211074272,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600903681
    }
]