[
    {
        "content": "<p>I came across the following goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">simple_real_power_goal</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">--norm_num failed to simplify</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The documentation of <code>norm_num</code> sort of suggests it should solve this, but I'm not really surprised it fails. What is the canonical way to solve an goal like this?</p>",
        "id": 243314574,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624212905
    },
    {
        "content": "<p>If you use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.rpow_nat_cast\">docs#real.rpow_nat_cast</a> to convert it to <code>(2 : ℝ) ^ (2 : ℕ)</code>, then norm_num will probably be able to do it.</p>",
        "id": 243314806,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1624213231
    },
    {
        "content": "<p>Not quite sure how to use rpow_nat_cast here</p>",
        "id": 243317639,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624217360
    },
    {
        "content": "<p>Yeah, that's the workaround I've been using - but real arithmetic is surprisingly painful, I don't know if It Is Generally Known how painful it is or if I'm doing it wrong</p>",
        "id": 243317646,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624217377
    },
    {
        "content": "<p>Let me find the right line</p>",
        "id": 243317648,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624217383
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/pull/8002/files#diff-779714ecbcf3ae1ddff8a35448792a63daacd8e7c2b942aa723c2c19b65ec2ddR407\">https://github.com/leanprover-community/mathlib/pull/8002/files#diff-779714ecbcf3ae1ddff8a35448792a63daacd8e7c2b942aa723c2c19b65ec2ddR407</a>, for example</p>",
        "id": 243317711,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624217435
    },
    {
        "content": "<p>Actually a much more clear example: <a href=\"https://github.com/leanprover-community/mathlib/pull/8002/files#diff-779714ecbcf3ae1ddff8a35448792a63daacd8e7c2b942aa723c2c19b65ec2ddR590\">https://github.com/leanprover-community/mathlib/pull/8002/files#diff-779714ecbcf3ae1ddff8a35448792a63daacd8e7c2b942aa723c2c19b65ec2ddR590</a></p>",
        "id": 243317718,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624217466
    },
    {
        "content": "<p>(I must apologise that I told you I had stopped working on <a href=\"https://github.com/leanprover-community/mathlib/issues/8002\">#8002</a> and then promptly closed a couple more sorries - I really have stopped working on it for the next few days now)</p>",
        "id": 243317734,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624217505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> In what contexts do you <em>really</em> need to use real exponentiation?  Can you try to stick to nat exponentiation?</p>",
        "id": 243318240,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1624218167
    },
    {
        "content": "<p>The occurrence of <code>((3 : ℕ) : ℝ)</code> is pretty funny in that file.</p>\n<p>We are currently dealing with real exponentiation in the context of <a href=\"https://github.com/leanprover-community/mathlib/issues/8002\">#8002</a> (Bertrand's postulate). We were going on a purely nat-based version for a while, but it just seems less easy without calculus, so we converted to reals and that's how we ended up here.</p>",
        "id": 243318376,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624218396
    },
    {
        "content": "<p>Yeah, there's a fair bit of dodging between <code>x * log y</code> and <code>log (y ^ x)</code>, which needs to go via the reals (edit: or does it? maybe not!) - it's possible that we can rephrase to avoid using the reals quite so often, but it's not obvious to me how</p>",
        "id": 243318478,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624218581
    },
    {
        "content": "<p>Unrelated but I noticed you're using <code>finset.Ico bla (blabla + 1)</code>. I must tell you that <a href=\"https://github.com/leanprover-community/mathlib/issues/7987\">#7987</a> will (hopefully) soon go through which means you'll be allowed to use <code>finset.Icc bla blabla</code> directly.</p>",
        "id": 243318612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624218748
    },
    {
        "content": "<p>I guess it's worth us stepping back and looking over the entire PR - I've proved a couple of things which don't seem to be in mathlib yet but which are absolutely going to be useful for anyone doing arithmetic (<code>(nat.sqrt a : ℝ) ≤ real.sqrt a</code>, <code>sqrt x / x = 1 / sqrt x</code>, <code>lemma log_eq_zero {x : ℝ} (hyp : log x = 0) : x = 0 ∨ x = 1 ∨ x = -1</code>, <code>lemma zero_pow_complex {a : ℂ} {x : ℂ} (hyp : 0 ^ x = a) : a = 0 ∨ (x = 0 ∧ a = 1)</code>) but there's probably some structural changes we can do</p>",
        "id": 243318641,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624218805
    },
    {
        "content": "<p>And in particular, we should absolutely see if <code>lemma log_pow {x y : ℝ} (hyp : 0 &lt; x) : log (x ^ y) = y * log x :=</code> has an equivalent with <code>y : nat</code> already in mathlib, and add it if not, and try to pivot the proof to use that new lemma instead</p>",
        "id": 243318705,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624218870
    },
    {
        "content": "<p><code>log_eq_zero</code> can be rewritten as an equivalence. I don't think that's the case here but sometimes I miss a lemma in mathlib because I was looking for a not general enough version.</p>",
        "id": 243318717,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624218902
    },
    {
        "content": "<p>Let me find that <code>log_pow</code> variant. I used recently.</p>",
        "id": 243318736,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624218946
    },
    {
        "content": "<p>Yeah, that was just my first get-something-working; when this PR is more ready to merge, I'll be pulling those functions into separate PRs and at that point we'll rewrite them into the fully general form and tag them with <code>simp</code> and so on</p>",
        "id": 243318750,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624218963
    },
    {
        "content": "<p>Okay, seems like I used <code>real.rpow_nat_cast</code>combined with <code>real.log_rpow</code>, just as Heather proposes.</p>",
        "id": 243319077,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624219472
    },
    {
        "content": "<p>Is there any way here to additionally cast the base to a natural? I'm trying to solve<br>\n<code>(584 : ℝ) ^ 100 * (25000 : ℝ) ^ 637 ≤ (67957 : ℝ) ^ 637</code><br>\nBut even <code>norm_num</code> doesn't work here because it times out.</p>",
        "id": 243423265,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624300007
    },
    {
        "content": "<p>I am not sure if this is what you are looking for, but maybe it is relevant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_coe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_pow</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_real</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">real.rpow_nat_cast</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_pow</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 243431602,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624304019
    },
    {
        "content": "<p>To be honest, I do not know how to get rid of the spurious <code>id</code>, but, without it, I do not think that you get the right coercions.</p>",
        "id": 243431743,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624304068
    },
    {
        "content": "<p>I think the problem here is that <code>67957 ^ 637</code> is huge. You should find another way to prove this</p>",
        "id": 243431935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624304176
    },
    {
        "content": "<p><code>norm_num</code> can do calculations of <code>real ^ nat</code> as easily as <code>nat ^ nat</code>, but those numbers are just too big for lean</p>",
        "id": 243432301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624304371
    },
    {
        "content": "<p>can <code>norm_num</code> do decent estimates of real logs?</p>",
        "id": 243432505,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624304468
    },
    {
        "content": "<p>if you do the right calculations, sure</p>",
        "id": 243432523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624304480
    },
    {
        "content": "<p>it's not automatic, but there are several norm_num based approximation proofs in mathlib, including one for <code>log 2</code> that you can probably use as inspiration</p>",
        "id": 243432665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624304529
    },
    {
        "content": "<p>also, if this trying to prove bertrand's postulate, it is being waay overcomplicated. I've already posted earlier about how you can do it without calculating any numbers bigger than 64</p>",
        "id": 243432981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624304679
    },
    {
        "content": "<p>Well, when I call #eval 67957^637 it works fine, so that indicates to me that if I can just convert it so nats, it would work.</p>",
        "id": 243457351,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624319115
    },
    {
        "content": "<p><code>#eval</code> doesn't do proofs</p>",
        "id": 243458263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624319997
    },
    {
        "content": "<p>Did you try <code>example : 67957^637 = 67957^637 := by norm_num</code>?</p>",
        "id": 243458328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624320018
    },
    {
        "content": "<p>Indeed, that snippet times out.<br>\nCan you explain to me why #eval and norm_num don't do the same thing under the hood?</p>",
        "id": 243458618,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624320252
    },
    {
        "content": "<p>To answer my question, <a href=\"https://leanprover.github.io/reference/expressions.html?highlight=eval#computation\">https://leanprover.github.io/reference/expressions.html?highlight=eval#computation</a> says that eval is faster and uses bytecode, whereas I guess the rest of lean does not.</p>",
        "id": 243458989,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624320618
    },
    {
        "content": "<p><code>#eval</code> is basically what python would do when asked to do bignum arithmetic: it just does the arithmetic, using an efficient representation for large numbers. Correctness of the operation is not proven. <code>norm_num</code> has to do something completely different, because it is required to prove the correctness of all operations it does. In particular, it works on symbolic expressions in base 2, which is probably about 500x larger in memory, plus the proof itself is even larger</p>",
        "id": 243459036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624320665
    },
    {
        "content": "<p>That is, <code>#eval 2 + 2</code> means \"please calculate <code>2+2</code>, however you like\", while <code>(by norm_num : 2 + 2 = 4)</code> means \"please construct a proof relative to the lean axioms that <code>2 + 2 = 4</code>\"</p>",
        "id": 243459174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624320790
    },
    {
        "content": "<p>So are you telling me that lean does not even have the capability to use the addition multiplication functionality of the ALU when verifying proofs?</p>",
        "id": 243459201,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624320816
    },
    {
        "content": "<p>no</p>",
        "id": 243459206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624320821
    },
    {
        "content": "<p>It has the capability to use <code>add_mul</code> and <code>add_succ</code></p>",
        "id": 243459259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624320851
    },
    {
        "content": "<p>Ok, good to know</p>",
        "id": 243459277,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624320878
    },
    {
        "content": "<p>because it's supposed to be working in ZFC (well, type theory), not ZFC + your computer</p>",
        "id": 243459286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624320889
    },
    {
        "content": "<p>the latter adds quite a bit to the trust base</p>",
        "id": 243459304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624320909
    },
    {
        "content": "<p>note that <code>norm_num</code> quite often uses <code>#eval</code> under the hood as an oracle. For example, when asked to prove or disprove <code>prime 123671</code>, the first thing it does is eval it to find out whether it's going to be proving primality or verifying non-primality (and in this case it just uses <code>#eval</code> to find the factors and verifies the multiplication)</p>",
        "id": 243459407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624321014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/norm_num.20for.20real.20exponentiation/near/243458989\">said</a>:</p>\n<blockquote>\n<p>To answer my question, <a href=\"https://leanprover.github.io/reference/expressions.html?highlight=eval#computation\">https://leanprover.github.io/reference/expressions.html?highlight=eval#computation</a> says that eval is faster and uses bytecode, whereas I guess the rest of lean does not.</p>\n</blockquote>\n<p>Actually, that quote is talking about <code>#eval</code> vs <code>#reduce</code>. <code>norm_num</code> is much faster than <code>#reduce</code>, because <code>#reduce</code> works directly from the axioms of <code>nat</code>, which are defined using unary numerals, and so it takes exponential time to do anything. <code>norm_num</code> uses an asymptotically efficient representation by directly working with binary numbers, and uses theorems like distributivity in order to validate the individual moves. There should only be a constant factor difference between <code>norm_num</code> and <code>#eval</code>, although it's a rather large constant factor because addition and multiplication are heavily hardware accelerated, plus at very large numbers <code>#eval</code> gains an asymptotic improvement because it uses the GMP bignum library and this has a whole bunch of fancy algorithms like toom-cook multiplication that could be implemented in principle in <code>norm_num</code> but aren't because lean isn't practical at those sizes anyway</p>",
        "id": 243460885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624322595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/norm_num.20for.20real.20exponentiation/near/243459407\">said</a>:</p>\n<blockquote>\n<p>note that <code>norm_num</code> quite often uses <code>#eval</code> under the hood as an oracle. For example, when asked to prove or disprove <code>prime 123671</code>, the first thing it does is eval it to find out whether it's going to be proving primality or verifying non-primality (and in this case it just uses <code>#eval</code> to find the factors and verifies the multiplication)</p>\n</blockquote>\n<p>Could <code>norm_num</code> use <code>#eval</code> under the hood to quickly factor ~10 digit numbers then? If so, perhaps we could think about using <code>#eval</code> to help compute <a href=\"https://en.wikipedia.org/wiki/Primality_certificate#Pratt_certificates\">Pratt certificates</a> which the kernel could quickly check.</p>",
        "id": 249555701,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629097443
    },
    {
        "content": "<p>Sure. I actually implemented this in metamath in order to do bertrand's postulate. In the end it turned out to be way overkill - you need to be dealing with primes of at least 6 digits before pratt certificates start to win over eratosthenes</p>",
        "id": 249615218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629133045
    }
]