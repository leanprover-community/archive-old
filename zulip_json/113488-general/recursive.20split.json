[
    {
        "content": "<p>Do we have a recursive split tactic? My goal looks likes <code>a ∧ b ∧ c ∧ d</code> and I would like to write one word and get four non-nested goals.</p>",
        "id": 128962808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530537277
    },
    {
        "content": "<p>There's only one “word” in <code>refine ⟨_, _, _, _⟩</code>. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 128962925,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530537417
    },
    {
        "content": "<p>Obviously, this is not exactly as readable as I hoped for, but at least this indeed does the trick.</p>",
        "id": 128963057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530537589
    },
    {
        "content": "<p><code>repeat { any_goals { split } }</code> :)</p>",
        "id": 128964010,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1530538827
    },
    {
        "content": "<p>...which at least is a bit more general and could be extracted into a new tactic</p>",
        "id": 128964047,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1530538880
    },
    {
        "content": "<p>Isn't ther also a <code>rcases</code> in mathlib that does this?</p>",
        "id": 128964146,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1530538974
    },
    {
        "content": "<p>that destructs hypotheses</p>",
        "id": 128964164,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530538991
    },
    {
        "content": "<blockquote>\n<p><code>repeat { any_goals { split } }</code> <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>How efficient is that? For <code>g1 ∧ g2 ∧ g3 ∧ g4</code>, I'm guessing that's 4 applications of <code>any_goals</code>, but <code>any_goals</code> would also test all previously <code>split</code> goals each time, right? I suppose it could be improved by “remembering” that <code>split</code> failed for a visited goal.</p>",
        "id": 128964437,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530539300
    },
    {
        "content": "<p>How big are your conjunctions that you expect this to be a problem <span class=\"emoji emoji-1f626\" title=\"frowning\">:frowning:</span> ? <code>split</code> isn't exactly an expensive tactic.</p>",
        "id": 128964553,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1530539429
    },
    {
        "content": "<p>I like that this version seems easy to turn into a new tactic. But, in the case I'm looking at, this creates too many goals, with stupid meta-variables</p>",
        "id": 128969257,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530544416
    },
    {
        "content": "<p>Do you have existential quantifications?</p>",
        "id": 128970861,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530546009
    },
    {
        "content": "<p>You can also use <code>constructor_matching* _ ∧ _</code> to make sure it only splits conjunctions</p>",
        "id": 128971009,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530546179
    },
    {
        "content": "<p>Yes, hidden in subset image. After much effort, I managed to minimize to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">s&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- refine ⟨_, _⟩,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 128971022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530546199
    }
]