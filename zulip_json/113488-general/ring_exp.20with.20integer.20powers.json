[
    {
        "content": "<p>Here is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring_exp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ring_exp</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 252709682,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631228879
    },
    {
        "content": "<p>Do I understand correctly that <code>ring_exp</code> only works with natural powers? Is it hard to make it work for integer powers?</p>",
        "id": 252709791,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631228942
    },
    {
        "content": "<p>Of course, the actual expression where I wanted to use <code>ring_exp</code> is much longer.</p>",
        "id": 252709905,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631229011
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_exp\">docs#ring_exp</a> mentions that it is; from a glance through the code, I think it'd just be a looot of special casing but I'm not too sure</p>",
        "id": 252710730,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631229666
    },
    {
        "content": "<p>I see a few problems with supporting <code>fpow</code> (without looking at the code):</p>\n<ul>\n<li>we have two different lemmas, e.g., for <code>x ^ (m + n) = x ^ m * x ^ n</code>, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gpow_add\">docs#gpow_add</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fpow_add\">docs#fpow_add</a>;</li>\n<li>for the <code>fpow</code> case we need to prove <code>x ≠ 0</code> here and there;</li>\n<li>need to deal with, e.g., <code>x ^ m * x ^ n</code>, where <code>m : int</code>, <code>n : nat</code>.</li>\n</ul>",
        "id": 252711389,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631230171
    },
    {
        "content": "<p>Can one case on m as nonneg and neg, and use field_simp first?</p>",
        "id": 252711912,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631230539
    },
    {
        "content": "<p><code>field_simp</code> won't deal with <code>x ^ m * x ^n</code></p>",
        "id": 252712006,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631230583
    },
    {
        "content": "<p>And you can have many <code>m</code>s and <code>n</code>s</p>",
        "id": 252712033,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631230611
    },
    {
        "content": "<p>I don't want the proof to be exponentially large (and exponentially slow) in the number of exponents in the formula.</p>",
        "id": 252712099,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631230669
    },
    {
        "content": "<p>Of course. The forcing to nat via a case is just a possible stopgap for a two exponents. It's the \"brute force\" tactic that you can use as the baseline for comparing performance :-)</p>",
        "id": 252712185,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631230714
    }
]