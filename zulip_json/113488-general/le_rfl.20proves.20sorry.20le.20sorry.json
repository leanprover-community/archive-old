[
    {
        "content": "<p>Is this expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">le_rfl</span> <span class=\"c1\">-- no errors, nothing</span>\n</code></pre></div>",
        "id": 231082066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616184194
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"gr\">sorry</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">le_rfl</span> <span class=\"c1\">-- that properly errors</span>\n</code></pre></div>",
        "id": 231082863,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616184590
    },
    {
        "content": "<p>This is probably the same issue as I saw for <code>arbitrary</code> in <a href=\"#narrow/stream/113489-new-members/topic/ring.20not.20respecting.20arbitrary\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/ring.20not.20respecting.20arbitrary</a></p>",
        "id": 231082998,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616184646
    },
    {
        "content": "<p>Thanks! I'll keep that in mind, and maybe use it for some sorried defs in LTE.</p>",
        "id": 231084032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616185126
    },
    {
        "content": "<p>Yes I think Patrick discovered this years ago. This is why it's dangerous to build an API on sorried data!</p>",
        "id": 231084664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616185421
    },
    {
        "content": "<p>The correct way to do this is <code>def foo : ℕ -&gt; ℤ := sorry</code></p>",
        "id": 231096093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616191505
    },
    {
        "content": "<p>or <code>def foo (n : ℕ) : ℤ := (sorry : ℕ -&gt; ℤ) n</code></p>",
        "id": 231096169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616191546
    },
    {
        "content": "<p>or <code>def foo (n : ℕ) : ℤ := by revert_all; sorry</code></p>",
        "id": 231096277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616191590
    },
    {
        "content": "<p>Mario, thanks, that last one is useful!</p>",
        "id": 231120227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616213742
    }
]