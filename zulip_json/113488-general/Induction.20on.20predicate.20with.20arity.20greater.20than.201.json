[
    {
        "content": "<p>This one is not really about math, but it's more about reasoning about program.</p>\n<p>So, I am a tutor for computing students in my university. We were discussing about structual induction.</p>\n<p>For simplicity, I will write the following content in terms of Haskell.</p>\n<p>So say you have the following data type definition.</p>\n<p><code>data A = Int | Some A</code></p>\n<p>Suppose you have a statement P(a), where a :: A(i.e. a has type A). Then if you want to prove P(a) is true for all a, then you need to prove that P(a) is true when a = i, where i :: Int, and that P(a) is true implies that P(Some a) is true for all a::A.</p>\n<p>Then my students ask: <br>\n\"what if you have a statement like P(a, a)? So the predicate have arity 2.Is there a strategy for arbitrary arity? \"</p>\n<p>I wish to give them an answer in the next meeting.</p>\n<p>Thanks.</p>",
        "id": 187760366,
        "sender_full_name": "rory",
        "timestamp": 1581257648
    },
    {
        "content": "<p>It depends on what the second <code>a</code> is.</p>\n<ul>\n<li>If it is literally <code>P(a, a)</code>, then this is still a unary predicate, where the predicate is <code>P'(a) := P(a, a)</code>, and you do induction on that.</li>\n<li>If it is some other type, like <code>P(a, n)</code>, then you might want to hold it fixed by letting <code>P'(a) := P(a, n)</code>, and then in the induction step you will have to prove <code>P(a, n)</code> implies <code>P(Some a, n)</code>.</li>\n<li>Or maybe you want to generalize over values of <code>n</code>, in which case you let <code>P'(a) := forall n, P(a, n)</code> and then you have to prove <code>forall n, P(a, n)</code> implies <code>P(Some a, n)</code>, which is to say, you can change the value of <code>n</code> when referencing the inductive hypothesis.</li>\n<li>In more complicated situations you may need to perform a nested induction, when you need to decrease either <code>a</code> or <code>a'</code> in <code>P(a, a')</code>.</li>\n</ul>",
        "id": 187760560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581258100
    },
    {
        "content": "<p>I'm not sure whether this is a helpful supplement to Mario's answer; but the induction/recursion principles you get with the elements of <code>A</code> or <code>data A</code> don't change, but there's also no hard and fast rule for how best to use them to prove P. IE <code>∀ (a b : ℕ) : a + b = b + a</code> only needs induction on one element. Sometimes you'll need to do induction on one and then cases on the other, etc. <br>\nTo put it in prose like you did earlier, the proof obligations branch out with the constructors as you start destructuring :</p>\n<div class=\"codehilite\"><pre><span></span>To prove P a1 a2 is true for all (a1 a2 : Data A),\n  branch 1 : show P (int) (a2)\n     goal 1_1 : show P (int) (int)\n     goal 1_2 : forall a_y, show P (int) (Some a_y)\n  branch 2 : forall a_x, show P (Some a_x) (a2)\n     goal 2_1 : show P (Some a_x) (int)\n     goal 2_2 : forall a_y, show P (Some a_x) (Some a_y)\n</pre></div>\n\n\n<p>And you would have further branches for higher arities. If you had a recursive type you would get a nice induction hypothesis, but the one you gave isn't (unless I missed something).</p>",
        "id": 187786502,
        "sender_full_name": "Chris B",
        "timestamp": 1581305867
    }
]