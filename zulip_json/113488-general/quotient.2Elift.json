[
    {
        "content": "<p>Why is <code>quotient.lift</code> not called <code>quotient.descend</code>?</p>",
        "id": 220359256,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608289535
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Proving.20that.20a.20variable.20is.20of.20a.20given.20type/near/215583327\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Proving.20that.20a.20variable.20is.20of.20a.20given.20type/near/215583327</a></p>",
        "id": 220359745,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608289844
    },
    {
        "content": "<p>I'm asking because of <a href=\"https://github.com/leanprover-community/mathlib/pull/5386/files/c623391ad6370add6a9b79e613ce48e4cf8c4fa8#diff-c7839c7a3e57b33270348acaf6834cafe8f3e07e89a7bc1269fc0b6a12d40162R206\">this comment</a> about the names of:</p>\n<ul>\n<li><code>(K →+* L) ≃ (perfect_closure K p →+* L)</code></li>\n<li><code>(R →+* S) ≃ (R →+* ring.perfection S p)</code></li>\n</ul>\n<p>How would you name them in terms of this <code>lift</code> / <code>descend</code> / <code>extend</code> / etc. terminiology?</p>",
        "id": 220378620,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608302211
    },
    {
        "content": "<p>I think the first one is an <code>extend</code> and the second one is a <code>lift</code>.</p>",
        "id": 220404034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608313136
    },
    {
        "content": "<p>Well since the first one is called <code>lift</code> in mathlib we can just do a Greenland/Iceland switch</p>",
        "id": 220404286,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608313236
    },
    {
        "content": "<p>if the mods approve</p>",
        "id": 220404352,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608313266
    },
    {
        "content": "<p>I'd prefer if we stuck to conventional terminology everywhere that we can. <code>quotient.lift</code> going the wrong way is unfortunate, and flipping more names would only make things worse.</p>\n<p>Is there anything we can do about <code>quotient.lift</code> (in Lean 4)? Could we agree to use some alias like <code>quotient.descend</code> everywhere in mathlib instead?</p>",
        "id": 220406105,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1608314045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Proving.20that.20a.20variable.20is.20of.20a.20given.20type/near/215585125\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> It is still there as <code>Quot.lift</code>. Interesting point of view; from a CS standpoint one would say that the quotient type is \"structurally bigger\", i.e. has one more type constructor, I'd guess. Like lifting monadic values into bigger monads (where no-one wants to think about cardinality).</p>\n</blockquote>",
        "id": 220406228,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608314110
    },
    {
        "content": "<p>Sorry, that was probably wrong :)</p>",
        "id": 220407878,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608314656
    },
    {
        "content": "<p>I think we should just blame Grothendieck for not properly understanding that a quotient is bigger than the thing you started with, or perhaps for not putting big stuff on the bottom. \"Let S be a base scheme, which we'll put at the top of everything\"</p>",
        "id": 220408240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608314867
    },
    {
        "content": "<p>I think it's correct if the morphism in the category of types with an equivalence relation are functions that preserve the relation</p>",
        "id": 220408251,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1608314877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/quotient.2Elift/near/220408240\">said</a>:</p>\n<blockquote>\n<p>I think we should just blame Grothendieck for not properly understanding that a quotient is bigger than the thing you started with, or perhaps for not putting big stuff on the bottom. \"Let S be a base scheme, which we'll put at the top of everything\"</p>\n</blockquote>\n<p>Grothendieck understood this, IMO. Look at things like the stack <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mo>⋆</mo><mi mathvariant=\"normal\">/</mi><mi>G</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[\\star/G]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">⋆</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">G</span><span class=\"mclose\">]</span></span></span></span> for example :)</p>",
        "id": 220408360,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608314924
    },
    {
        "content": "<p>In the category theory library iirc, lift is for colimits and desc is for limits. A quotient is more like a colimits than a limit.</p>",
        "id": 220408479,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1608314996
    },
    {
        "content": "<p>nope, it's the other way round... <code>lift</code> is for limits</p>",
        "id": 220408558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608315023
    },
    {
        "content": "<p>Now I'm confused.</p>",
        "id": 220408589,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608315042
    },
    {
        "content": "<p>the stack <code>[*//G]</code> is so small it can have negative dimension...</p>",
        "id": 220408615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608315057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> things \"descend to the quotient\", right?</p>",
        "id": 220408649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608315075
    },
    {
        "content": "<p>Sure, when I write in latex :)</p>",
        "id": 220408677,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608315086
    },
    {
        "content": "<p>right... I would mind having the same terminology here</p>",
        "id": 220408724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608315112
    },
    {
        "content": "<p>but in lean everything is a lift (except in category theory)</p>",
        "id": 220408788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608315133
    },
    {
        "content": "<p>I guess I think of lean quotients as more stacky-ish than set-ish, so lift actually makes sense to me</p>",
        "id": 220408870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608315184
    },
    {
        "content": "<p>We should add a section in our naming conventions page about this.</p>",
        "id": 220420451,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1608321142
    },
    {
        "content": "<p>So do I have permission to name <code>(R →+* S) ≃ (R →+* ring.perfection S p)</code> as <code>extend</code> as per <a href=\"https://github.com/leanprover-community/mathlib/issues/5386\">#5386</a>?</p>",
        "id": 220523714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608476895
    }
]