[
    {
        "content": "<p>Still coming back to meta-code, I'd like to clean up leancrawler a bit, and maybe PR part of it to mathlib for general use. The very first step is to triage declaration by kind (I would say type but that would be very confusing). Can anyone comment on <a href=\"https://gist.github.com/PatrickMassot/64167b3fce4b3f07c556328c1ffa683b\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/64167b3fce4b3f07c556328c1ffa683b\">https://gist.github.com/PatrickMassot/64167b3fce4b3f07c556328c1ffa683b</a>? Would mathlib be interested in that?</p>",
        "id": 182379423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575314391
    },
    {
        "content": "<p>I think that could be useful. <br>\nSome comments:</p>\n<ul>\n<li>Theorems can be instances when you write <code>@[instance] theorem ...</code></li>\n<li>Definitions can be classes when you write <code>@[class] def ...</code>. I believe this actually happens in mathlib.</li>\n<li>This is the first time that I see the declaration <code>environment.structure_fields</code>. That is useful. There are some declarations in <code>meta.expr</code> that mimic this built-in declaration. I will PR a change that removes those.</li>\n</ul>",
        "id": 182384957,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575317856
    },
    {
        "content": "<p>Also, if you want to golf the function a bit, you can write <code>return $ if (env.is_projection n).is_some then Structure_field else Definition</code></p>",
        "id": 182385314,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575318040
    },
    {
        "content": "<p>Thanks a lot! New version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">get_kind</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"bp\">â†’</span> <span class=\"n\">tactic</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">kind</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"n\">class</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Instance</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Lemma</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">defn</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"n\">class</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Class</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"kn\">instance</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Instance</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">is_projection</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"k\">then</span> <span class=\"n\">Structure_field</span> <span class=\"k\">else</span> <span class=\"n\">Definition</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cnst</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"n\">class</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Class</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">structure_fields</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"k\">then</span> <span class=\"n\">Structure</span>\n              <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">is_ginductive</span> <span class=\"n\">env</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">Inductive</span> <span class=\"k\">else</span> <span class=\"n\">Constant</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ax</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">Axiom</span>\n</pre></div>",
        "id": 182385791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575318365
    },
    {
        "content": "<p>Is it better?</p>",
        "id": 182385833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575318377
    },
    {
        "content": "<p>Line 2: <code> `class </code> -&gt; <code> `instance </code></p>\n<p>Suggestion: maybe first case on whether it has certain attributes, and only then case on the declaration-constructor (using <code>declaration.is_theorem</code> and friends from <code>meta.expr</code>)</p>",
        "id": 182386094,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575318524
    },
    {
        "content": "<p>oops</p>",
        "id": 182386118,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575318548
    },
    {
        "content": "<p>Do we have a nice way to do case analysis not based on constructors of inductive types?</p>",
        "id": 182386240,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575318611
    },
    {
        "content": "<p>Already in my version the nested if/then/else look ugly, for lack of <code>elif</code>.</p>",
        "id": 182386269,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575318632
    },
    {
        "content": "<p>Not really...</p>",
        "id": 182386736,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575318935
    },
    {
        "content": "<p>I'll still try, so we'll be able to compare.</p>",
        "id": 182386776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575318962
    },
    {
        "content": "<p>You can still do a <code>match d with ...</code> in the middle of the expression.</p>",
        "id": 182386824,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575318986
    },
    {
        "content": "<p>How do you like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">get_kind&#39;</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">decl</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">kind</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"kn\">instance</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Instance</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"n\">class</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Class</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">structure_fields</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"k\">then</span> <span class=\"n\">Structure</span> <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">is_projection</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"k\">then</span> <span class=\"n\">Structure_field</span> <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_ginductive</span> <span class=\"n\">env</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">Inductive</span> <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">is_definition</span> <span class=\"k\">then</span> <span class=\"n\">Definition</span> <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">is_theorem</span> <span class=\"k\">then</span> <span class=\"n\">Lemma</span> <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">is_constant</span> <span class=\"k\">then</span> <span class=\"n\">Constant</span> <span class=\"k\">else</span> <span class=\"n\">Axiom</span>\n</pre></div>",
        "id": 182387107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575319188
    },
    {
        "content": "<p>Writing a proof that it's the same function (or not, I guess there is 50% change) would be a fun challenge.</p>",
        "id": 182387195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575319209
    },
    {
        "content": "<p>I think it's more readable. I hope it's the same result.</p>",
        "id": 182387247,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575319251
    },
    {
        "content": "<p>I think this definition looks good.<br>\nWhat are you going to use this data for though? The datastructure <code>declaration.kind</code> assumes that the classes are disjoint, which is not true.<br>\nIn addition to the previous mentioned cases (classes can be either structures or definitions, instances can be theorems or definitions), there are also structure fields that are instances. You lose this \"secondary\" information. This is fine, but depends on the application.</p>",
        "id": 182390391,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575321216
    },
    {
        "content": "<p>A version of this was used to create the graph at <a href=\"https://leanprover-community.github.io/lean-perfectoid-spaces/\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-perfectoid-spaces/\">https://leanprover-community.github.io/lean-perfectoid-spaces/</a></p>",
        "id": 182390982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575321579
    },
    {
        "content": "<p>But ideally I'd like a general purpose version.</p>",
        "id": 182390993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575321591
    },
    {
        "content": "<p>So I don't want to lose anything I could keep.</p>",
        "id": 182391059,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575321606
    },
    {
        "content": "<p>So I choose probably use a more elaborate type.</p>",
        "id": 182391085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575321624
    },
    {
        "content": "<p>If you don't want to lose information, you indeed want a more elaborate type. You could have a type with 4 constructors, corresponding to the constructors of <code>declaration</code> and then some boolean values whether it is a field/structure/class/instance.</p>",
        "id": 182391471,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575321760
    }
]