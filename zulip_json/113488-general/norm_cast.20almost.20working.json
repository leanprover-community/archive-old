[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213273\">@Paul-Nicolas Madelaine</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> I'm having great success with <code>norm_cast</code> but there is one thing I can't get to work. Here is a somewhat minimal example showing what works and what doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_cast</span>\n\n<span class=\"n\">def</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">some</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">none</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_zero_class</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span><span class=\"o\">,</span> <span class=\"n\">o₁</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">o₂</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"n\">zero_mul</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_zero</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elim_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_one</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elim_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_inj</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">some_inj</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">move_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">coe_one</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- I want `norm_cast` to do that for me</span>\n  <span class=\"c1\">-- norm_cast at h, -- this is actually fighting against me</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">coe_inj</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I hope the last proof can be turned into <code>excat_mod_cat h</code>. I guess I misunderstood how the cast attributes should be set.</p>",
        "id": 167067787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559387255
    },
    {
        "content": "<p>Ok, writing this minimized version has been enough to enable me to play with random permutations and get it right. I need to state <code>coe_one</code> the other way around.</p>",
        "id": 167068444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559388388
    },
    {
        "content": "<p>But I completely fail to see how this matches the documentation of the <code>elim_cast</code> attribute. So I'm still interested in reading comments by Paul-Nicolas or Rob.</p>",
        "id": 167068512,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559388483
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 167068729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559388874
    },
    {
        "content": "<p>this is actually a problem I encountered this week, the \"correct\" way to write the lemma would be the way you wrote it in the example.<br>\nthe problem here is about how norm_cast handles numerals, it is not general enough and only works when the type also has add.<br>\nI will try to fix this, but right now the best solution imo is to keep the rw line before norm_cast</p>",
        "id": 167074353,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1559398723
    },
    {
        "content": "<p>Thanks. It seems my weird workaround is working pretty well, so I'll wait for the official fix without the <code>rw</code>.</p>",
        "id": 167074421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559398855
    },
    {
        "content": "<p>sorry about this, I knew the solution for numerals was a bit hacky, but I was kind of waiting to find a real example where it failed to think of another way</p>",
        "id": 167074480,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1559398952
    },
    {
        "content": "<p>No problem. It's already great</p>",
        "id": 167074840,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559399611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213273\">@Paul-Nicolas Madelaine</span> Here is a feature request for <code>exact_mod_cast</code>. It would be cool if it could apply casts/coercions to the goal/expression before <code>exact</code>ing or <code>apply</code>ing. Example: I have <code>h : a = 0</code>, where <code>a : enat</code> and the goal is <code>a.get _ = 0</code>.</p>\n<p>I can imagine that this would be a lot of work though... if that is the case, just ignore the feature request.</p>",
        "id": 167181134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559562813
    },
    {
        "content": "<p>does subst, refl work?</p>",
        "id": 167182876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559564394
    },
    {
        "content": "<p>I'll try when I'm back at my desktop<br>\nActually, in that case I would have to <code>generalize</code> first. Because I don't really have an <code>a : enat</code> but some crazy expression. That would maybe work, but is still inconvenient.</p>",
        "id": 167280954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559646077
    },
    {
        "content": "<p>Here is another question. If <code>rw some_lemma</code> succeeds, should <code>rw_mod_cast some_lemma</code> also succeed, or is it allowed to fail? Same question for <code>apply</code> and <code>exact</code>...</p>",
        "id": 167281110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559646193
    },
    {
        "content": "<p>I'm asking about expected behaviour... I have examples where <code>rw</code> works, but <code>rw_mod_cast</code> fails.</p>",
        "id": 167281144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559646227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I'm not sure I understand what you mean by apply casts to the goal, could you give me more details about how you would like the tactic to work on your example?</p>",
        "id": 167390536,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1559742909
    },
    {
        "content": "<p>apply and rw mod_cast are expected to fail on examples where rw and apply would success,<br>\nfor instance if you try to use a rw rule that is already a norm_cast lemma</p>",
        "id": 167390686,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1559743001
    },
    {
        "content": "<p>but if you have examples where they fail unexpectedly, I'd like to see them of course</p>",
        "id": 167390741,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1559743042
    },
    {
        "content": "<p>The downside is that you can not really combine <code>rw</code> and <code>rw_mod_cast</code> into a long list of rewrites...</p>",
        "id": 167392263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559743973
    },
    {
        "content": "<p>I'll come back to the other example later... need to run now.</p>",
        "id": 167392282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559743986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213273\">@Paul-Nicolas Madelaine</span> After thinking about the example again, I think it falls outside the scope of <code>norm_cast</code>. I should just <code>apply enat.coe_injective</code> and then <code>exact_mod_cast h</code>.</p>",
        "id": 167420049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559761482
    },
    {
        "content": "<p><code>coe_injective</code> sounds like it should be in scope for <code>norm_cast</code></p>",
        "id": 167421380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559762248
    },
    {
        "content": "<p>But it is the wrong way round... I think.</p>",
        "id": 167423957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559764116
    },
    {
        "content": "<p>Instead of removing coe's you need to introduce them.</p>",
        "id": 167423984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559764141
    },
    {
        "content": "<p>I don't know enough context, but the first message in this thread contains a <code>coe_inj</code> which is successfully used by <code>norm_cast</code></p>",
        "id": 167424162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559764282
    },
    {
        "content": "<p>I fixed the handling of numerals, but there is something else going on in your example:<br>\n'coe_one' shouldn't be an elim_cast lemma</p>",
        "id": 168424116,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1560878529
    },
    {
        "content": "<p>it looks to be of the shape 'coe x'  = 'x',<br>\nbut it's actually of the shape 'coe (@has_one.one alpha) = @has_one.one (with_zero alpha)'</p>",
        "id": 168424161,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1560878567
    },
    {
        "content": "<p>it should actually be a 'squash_cast' lema, but that's not clear either. I will try to clarify this in the documentation.</p>",
        "id": 168426232,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1560878668
    },
    {
        "content": "<p>I'm realizing that the labels are actually not as well defined as I hoped</p>",
        "id": 168438654,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1560880525
    },
    {
        "content": "<p>mainly the squash_cast label is an issue</p>",
        "id": 168438921,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1560880669
    },
    {
        "content": "<p>it's actually meant for every lemma that will \"push the casts down\" in some sense</p>",
        "id": 168438997,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1560880705
    }
]