[
    {
        "content": "<p>I am assuming this is provable: <code>example (f : ℕ → ℕ) (g : ℕ → ℕ) (H1 : f = g) (H2 : f 0 = 0) (P : Π (h : ℕ → ℕ), h 0 = 0 → Type) : P f H2 = P g (H1 ▸ H2) := sorry</code></p>",
        "id": 125575693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499233
    },
    {
        "content": "<p>The goal is <code>P f H2 = P g _</code>, and we have <code>H1 : f = g</code></p>",
        "id": 125575733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499293
    },
    {
        "content": "<p>but I can't rewrite</p>",
        "id": 125575737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499298
    },
    {
        "content": "<p>because <code>H2</code> is a proof of something involving f</p>",
        "id": 125575741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499310
    },
    {
        "content": "<p>Have you tried <code>congr</code>?</p>",
        "id": 125575781,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524499326
    },
    {
        "content": "<p>I would have to rewrite <code>f</code> and <code>H2</code> simultaneously.</p>",
        "id": 125575786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499328
    },
    {
        "content": "<p>use congr</p>",
        "id": 125575789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524499332
    },
    {
        "content": "<p>:-)</p>",
        "id": 125575795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499343
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 125575798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499345
    },
    {
        "content": "<p>So what does congr do?</p>",
        "id": 125575806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499356
    },
    {
        "content": "<p>By which I mean</p>",
        "id": 125575814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499368
    },
    {
        "content": "<p>how would I do this in term mode</p>",
        "id": 125575818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499372
    },
    {
        "content": "<p>simp should also work here</p>",
        "id": 125575829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524499389
    },
    {
        "content": "<p>I thought I tried it and it failed</p>",
        "id": 125575836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499398
    },
    {
        "content": "<p>simp doesn't work</p>",
        "id": 125575846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499416
    },
    {
        "content": "<p>that was what made me ask</p>",
        "id": 125575849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499419
    },
    {
        "content": "<p>Kevin, you should spend more time reading documentation</p>",
        "id": 125575853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524499434
    },
    {
        "content": "<p>?</p>",
        "id": 125575856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499440
    },
    {
        "content": "<p><code>example (f : ℕ → ℕ) (g : ℕ → ℕ) (H1 : f = g) (H2 : f 0 = 0) (P : Π (h : ℕ → ℕ), h 0 = 0 → Type) : P f H2 = P g (H1 ▸ H2) := by cc</code></p>",
        "id": 125575895,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524499444
    },
    {
        "content": "<p>you win</p>",
        "id": 125575903,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499451
    },
    {
        "content": "<p>:-)</p>",
        "id": 125575907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499462
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/114\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/114\">https://github.com/leanprover/mathlib/pull/114</a></p>",
        "id": 125575908,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524499465
    },
    {
        "content": "<p>Yes, I saw it, and I even read Gabriel's explanation of what cc did</p>",
        "id": 125575911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499481
    },
    {
        "content": "<p>Oh, Gabriel wrote some comment</p>",
        "id": 125575913,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524499486
    },
    {
        "content": "<p>But the bottom line is that I still don't know what's going on</p>",
        "id": 125575916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499495
    },
    {
        "content": "<p>all I know is that I'm relieved to find that I'm trying to prove something which is true</p>",
        "id": 125575926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499505
    },
    {
        "content": "<p>Some months ago I would just have been happy to accept the magic</p>",
        "id": 125575941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499537
    },
    {
        "content": "<p>but now I am more interested in knowing how the magic works</p>",
        "id": 125575945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499552
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 125575981,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499563
    },
    {
        "content": "<p>For example I don't see how to use <code>congr_arg</code> or <code>congr_fun</code></p>",
        "id": 125575987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499571
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">drec_on</span> <span class=\"n\">H1</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 125575994,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499586
    },
    {
        "content": "<p>Thanks Kenny</p>",
        "id": 125576000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499593
    },
    {
        "content": "<p>I was about to say \"how do you prove this from <code>eq.rec</code></p>",
        "id": 125576007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499600
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">H1</span>\n</pre></div>",
        "id": 125576008,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499602
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H1</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 125576011,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499612
    },
    {
        "content": "<p>what is this <code>subst</code>?</p>",
        "id": 125576012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499615
    },
    {
        "content": "<p>tactic</p>",
        "id": 125576016,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499620
    },
    {
        "content": "<p>takes hypothesis of the form <code>[expr] = h</code> or <code>h = [expr]</code></p>",
        "id": 125576026,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499632
    },
    {
        "content": "<p>where <code>h</code> is any variable</p>",
        "id": 125576029,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499636
    },
    {
        "content": "<p>and discharge the hypothesis while substituting everything</p>",
        "id": 125576035,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499647
    },
    {
        "content": "<p>I like the subst proof best, in some sense, because it is closest to how I am thinking about what needs to be done</p>",
        "id": 125576037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I now realise that <code>simp</code> by itself had no chance of working :-)</p>",
        "id": 125576052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499678
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">H1</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem test : ∀ (f g : ℕ → ℕ) (H1 : f = g) (H2 : f 0 = 0) (P : Π (h : ℕ → ℕ), h 0 = 0 → Type), P f H2 = P g _ :=</span>\n<span class=\"cm\">λ (f g : ℕ → ℕ) (H1 : f = g) (H2 : f 0 = 0) (P : Π (h : ℕ → ℕ), h 0 = 0 → Type),</span>\n<span class=\"cm\">  eq.drec (eq.refl (P f H2)) H1</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 125576134,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499775
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">drec</span> <span class=\"n\">rfl</span> <span class=\"n\">H1</span>\n</pre></div>",
        "id": 125576217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499829
    },
    {
        "content": "<p>should be the shortest term mode solution</p>",
        "id": 125576221,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499835
    },
    {
        "content": "<p>The subst proof only works because one side is a variable here, but it is able to avoid the DTT problems that many other tactics have to face in this situation</p>",
        "id": 125576226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524499862
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 125576287,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499932
    },
    {
        "content": "<p>what is so funny about that</p>",
        "id": 125576298,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524499961
    },
    {
        "content": "<p><code>simp</code> and <code>congr</code> both work by using congruence lemmas. These are generated on the fly and the term for them is a bit complicated but the structure is similar: from <code>a = b</code> and <code>c = d</code> derive <code>f a c = f a b</code>.</p>",
        "id": 125576299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524499962
    },
    {
        "content": "<p>The real power is that the generated congruence lemma automatically makes use of subsingletons to avoid hypotheses, meaning that if <code>c</code> and <code>d</code> are proofs then you only have one hypothesis there</p>",
        "id": 125576321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500010
    },
    {
        "content": "<p>the <code>rfl</code> proof there is the term mode equivalent of <code>by subst</code></p>",
        "id": 125576372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500079
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">H1</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 125576377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500087
    },
    {
        "content": "<blockquote>\n<p>the <code>rfl</code> proof there is the term mode equivalent of <code>by subst</code></p>\n</blockquote>\n<p>depends on what you mean by equivalent</p>",
        "id": 125576409,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500159
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n</blockquote>\n<p>This one is my favourite :-)</p>",
        "id": 125576448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524500163
    },
    {
        "content": "<p>and <code>subst</code> is basically the same as <code>cases</code> or <code>induction</code> on an equality (although it does additional equality specific stuff like symmetry)</p>",
        "id": 125576451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500165
    },
    {
        "content": "<p>Oh I just saw the <code>|</code> one :-)</p>",
        "id": 125576459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524500184
    },
    {
        "content": "<p>I think the <code>rfl</code> proof is equivalent to <code>by cases</code></p>",
        "id": 125576460,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500185
    },
    {
        "content": "<p>and the <code>by subst</code> one is equivalent to <code>eq.drec</code></p>",
        "id": 125576472,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500193
    },
    {
        "content": "<p>(because <code>eq.drec</code> is the proof generated by <code>by subst</code>)</p>",
        "id": 125576475,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500202
    },
    {
        "content": "<p>(and the <code>| rfl</code> one is really invoking the inductive type and equality between constructors</p>",
        "id": 125576482,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500221
    },
    {
        "content": "<p>like I said, they are all the same</p>",
        "id": 125576487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500224
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">H1</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem test : ∀ (f g : ℕ → ℕ) (H1 : f = g) (H2 : f 0 = 0) (P : Π (h : ℕ → ℕ), h 0 = 0 → Type), P f H2 = P g _ :=</span>\n<span class=\"cm\">λ (f g : ℕ → ℕ) (H1 : f = g) (H2 : f 0 = 0) (P : Π (h : ℕ → ℕ), h 0 = 0 → Type),</span>\n<span class=\"cm\">  eq.dcases_on H1</span>\n<span class=\"cm\">    (λ (H_1 : g = f), eq.rec (λ (H1 : f = f) (H_2 : H1 == eq.refl f), eq.refl (P f H2)) (eq.symm H_1) H1)</span>\n<span class=\"cm\">    (eq.refl g)</span>\n<span class=\"cm\">    (heq.refl H1)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 125576501,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500251
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem test : ∀ (f g : ℕ → ℕ) (H1 : f = g) (H2 : f 0 = 0) (P : Π (h : ℕ → ℕ), h 0 = 0 → Type), P f H2 = P g _ :=</span>\n<span class=\"cm\">λ (f g : ℕ → ℕ) (H1 : f = g) (H2 : f 0 = 0) (P : Π (h : ℕ → ℕ), h 0 = 0 → Type),</span>\n<span class=\"cm\">  eq.dcases_on H1</span>\n<span class=\"cm\">    (λ (H_1 : g = f), eq.rec (λ (H1 : f = f) (H_2 : H1 == eq.refl f), id_rhs (P f H2 = P f H2) rfl) (eq.symm H_1) H1)</span>\n<span class=\"cm\">    (eq.refl g)</span>\n<span class=\"cm\">    (heq.refl H1)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 125576512,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500269
    },
    {
        "content": "<p>they're exactly the same</p>",
        "id": 125576514,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500276
    },
    {
        "content": "<p><code>eq.dcases_on</code> is the same as <code>eq.drec</code> I believe</p>",
        "id": 125576562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500299
    },
    {
        "content": "<p>no there's an id_rhs` in one but not the other</p>",
        "id": 125576565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524500301
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span> <span class=\"n\">H1</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 125576583,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500340
    },
    {
        "content": "<p>I think you would get the exact same term if you use <code>by refl</code> instead of <code>rfl</code> in the term proof</p>",
        "id": 125576588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500346
    },
    {
        "content": "<blockquote>\n<p>no there's an id_rhs` in one but not the other</p>\n</blockquote>\n<p>aha</p>",
        "id": 125576593,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500349
    },
    {
        "content": "<p>I like the <code>|</code> proof because it is a really powerful way of doing the substitution.</p>",
        "id": 125576615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524500388
    },
    {
        "content": "<p>the term mode equivalent is <code>cases</code></p>",
        "id": 125576657,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500403
    },
    {
        "content": "<p>If you replace <code>f</code> and <code>g</code> by constants this proof won't work</p>",
        "id": 125576680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500451
    },
    {
        "content": "<p>right</p>",
        "id": 125576691,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500477
    },
    {
        "content": "<p>you'd need to generalize</p>",
        "id": 125576696,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500484
    },
    {
        "content": "<p>or simp</p>",
        "id": 125576705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500498
    },
    {
        "content": "<p>simp uses congr, so it can do dependent rewrite</p>",
        "id": 125576716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500521
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">H2</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">H1</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem test : ∀ (f g : ℕ → ℕ) (H1 : f = g) (H2 : f 0 = 0) (P : Π (h : ℕ → ℕ), h 0 = 0 → Type), P f H2 = P g _ :=</span>\n<span class=\"cm\">λ (f g : ℕ → ℕ) (H1 : f = g) (H2 : f 0 = 0) (P : Π (h : ℕ → ℕ), h 0 = 0 → Type),</span>\n<span class=\"cm\">  (λ (h h_1 : ℕ → ℕ) (e_1 : h = h_1) (a : h 0 = 0) (a_1 : h_1 0 = 0),</span>\n<span class=\"cm\">     (λ (h h_1 : ℕ → ℕ) (e_1 : h = h_1) (a : h 0 = 0), eq.drec (eq.refl (P h (eq.rec a (eq.refl h)))) e_1) h h_1</span>\n<span class=\"cm\">       e_1</span>\n<span class=\"cm\">       a)</span>\n<span class=\"cm\">    f</span>\n<span class=\"cm\">    g</span>\n<span class=\"cm\">    H1</span>\n<span class=\"cm\">    H2</span>\n<span class=\"cm\">    (H1 ▸ H2)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 125576757,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500526
    },
    {
        "content": "<p>I think that's the same proof term after some beta reduction</p>",
        "id": 125576787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500580
    },
    {
        "content": "<p>as what?</p>",
        "id": 125576799,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500594
    },
    {
        "content": "<p>the last few</p>",
        "id": 125576806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500601
    },
    {
        "content": "<p>every proof is equal because of proof irrelevance</p>",
        "id": 125576812,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500615
    },
    {
        "content": "<p>Well, modulo <code>#reduce</code> reduction I think all proofs so far are the same</p>",
        "id": 125576822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500635
    },
    {
        "content": "<p>church rosser much</p>",
        "id": 125576901,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500709
    },
    {
        "content": "<p>did you check out my paper? C-R is false in lean</p>",
        "id": 125576913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500752
    },
    {
        "content": "<p>I couldn't find your paper</p>",
        "id": 125576916,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524500761
    },
    {
        "content": "<p>Kenny: <a href=\"https://github.com/digama0/lean-type-theory/releases/\" target=\"_blank\" title=\"https://github.com/digama0/lean-type-theory/releases/\">https://github.com/digama0/lean-type-theory/releases/</a></p>",
        "id": 125587726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524516549
    },
    {
        "content": "<p>and the reason I'm reviving this thread is that I discovered that in my use case, not all of the solutions worked.</p>",
        "id": 125587729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524516571
    },
    {
        "content": "<p>my actual goal is <code>extend_map_of_im_unit (g ∘ of_comm_ring R S) _ = extend_map_of_im_unit (of_comm_ring R S) H</code> where <code>of_comm_ring R S</code> is a ring homomorphism, so quite a bit more structurally complicated than my toy MWE</p>",
        "id": 125587794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524516623
    },
    {
        "content": "<p>and <code>congr</code> gave me three random goals, one of which was <code>loc R S = (R × ↥S)</code> and that might not even be true.</p>",
        "id": 125587818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524516679
    },
    {
        "content": "<p><code>cc</code> also didn't work</p>",
        "id": 125587820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524516681
    },
    {
        "content": "<p>but Kenny's <code>eq.drec_on H1 rfl</code> worked.</p>",
        "id": 125587878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524516742
    },
    {
        "content": "<p>simp didn't work</p>",
        "id": 125587883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524516756
    },
    {
        "content": "<p>both subst and simp complained that H1 wasn't an appropriate lemma</p>",
        "id": 125587896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524516789
    },
    {
        "content": "<p>even though it was of the form X = Y</p>",
        "id": 125587898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524516794
    },
    {
        "content": "<p>I realise now that I am using tactics less and less, I am on the whole doing quite abstract maths and the arguments are in some sense straightforward to show from first principles, so I don't really need any tactics beyond <code>rw</code>.</p>",
        "id": 125587957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524516847
    },
    {
        "content": "<p>aargh actually none of them worked :-/ the <code>eq.drec</code> approach looks like it works, but an error appears elsewhere. <code>cases H1</code> gave me an error I'd never seen before :-)</p>",
        "id": 125588601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524517888
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>cases tactic failed, unsupported equality between type and constructor indices\n(only equalities between constructors and/or variables are supported, try cases on the indices):\n(λ (x : R), g (of_comm_ring R S x)) = λ (r : R), ⟦(r, ⟨1, _⟩)⟧\n</pre></div>",
        "id": 125588610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524517911
    },
    {
        "content": "<p>that's surprising because H1 is <code>of_comm_ring R S = g ∘ of_comm_ring R S</code>.</p>",
        "id": 125588683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524517975
    },
    {
        "content": "<p>I don't need this lemma, I might give up on it.</p>",
        "id": 125588685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524517981
    }
]