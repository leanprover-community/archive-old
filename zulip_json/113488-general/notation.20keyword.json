[
    {
        "content": "<p>Hi all are there any docs on how notation works in Lean 3.4.x? I was staring at <code>notation f ` $ `:1 a:0 := f a</code> and I realised there is more to it than I thought.</p>",
        "id": 157976483,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1549807607
    },
    {
        "content": "<p>Also in <code>init/core.lean</code>, How come <code>notation α × β := prod α β</code> doesn't need backticks?</p>",
        "id": 157976763,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1549808130
    },
    {
        "content": "<p>What's the subtlety with <code>$</code>? This says that <code>$</code> has binding power 1 and is..umm..right associative. Lean's parser is a Pratt parser. <a href=\"https://xenaproject.wordpress.com/2019/01/20/a-word-on-bidmas/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2019/01/20/a-word-on-bidmas/\">https://xenaproject.wordpress.com/2019/01/20/a-word-on-bidmas/</a> . Or do you know all this and you're asking about a subtlety that I've missed?</p>",
        "id": 157979918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549813696
    },
    {
        "content": "<p>I don't know the answer to the core question though</p>",
        "id": 157979932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549813732
    },
    {
        "content": "<p>Hi Kevin I can't follow your link</p>",
        "id": 157980256,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1549814387
    },
    {
        "content": "<p>Sorry, kill the Or</p>",
        "id": 157980305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549814408
    },
    {
        "content": "<p>remove the Or</p>",
        "id": 157980308,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549814409
    },
    {
        "content": "<p>I'll edit</p>",
        "id": 157980309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549814410
    },
    {
        "content": "<p>I'm on phone</p>",
        "id": 157980311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549814421
    },
    {
        "content": "<p>Every piece of notation has a right binding power and, if infix, an associativity. In Lean the associativity is given by assigning two binding powers, one for the notation and one for the thing just after it. <code>#print notation +</code> and <code>#print notation ^</code> to see the difference</p>",
        "id": 157980430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549814639
    },
    {
        "content": "<p>I guess I'm just after some docs on the parser because I was thinking of writing some. Eg, when do you need backticks, explaining exactly how foldr works, what exactly are the keywords doing in <code>notation `∃` binders `, ` r:(scoped P, Exists P) := r</code> etc. I agree that you can usually figure it out by finding examples but I would like some definitive explanations.</p>",
        "id": 157980487,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1549814669
    },
    {
        "content": "<p>Oh but that is just a hack</p>",
        "id": 157980493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549814688
    },
    {
        "content": "<p>It's all going to change in Lean 4 and the cool stuff you want to do probably can't be done in Lean 3 anyway</p>",
        "id": 157980512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549814737
    },
    {
        "content": "<p>Otherwise exists unique would work properly</p>",
        "id": 157980515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549814755
    },
    {
        "content": "<p>You can't iterate the notation currently and this can't really be fixed</p>",
        "id": 157980565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549814799
    },
    {
        "content": "<p>Backwards E then !</p>",
        "id": 157980566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549814799
    },
    {
        "content": "<p>It iterates to the wrong thing</p>",
        "id": 157980569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549814813
    },
    {
        "content": "<p>Simon Hudon once pointed out the relevant bit of the source code to me. I think they just hacked something together so that lists worked (<code>[1,2,3]</code>) and left it at that</p>",
        "id": 157980627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549814907
    },
    {
        "content": "<p>My proudest Lean moment was when the core Lean people changed the associativity of <code>^</code> after I opened an issue</p>",
        "id": 157980715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549815052
    },
    {
        "content": "<p>Ed, I think the fold conversation starts at <a href=\"https://gitter.im/leanprover_public/Lobby?at=5a5686366117191e614e3ce4\" target=\"_blank\" title=\"https://gitter.im/leanprover_public/Lobby?at=5a5686366117191e614e3ce4\">https://gitter.im/leanprover_public/Lobby?at=5a5686366117191e614e3ce4</a></p>",
        "id": 157980909,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549815373
    },
    {
        "content": "<p>Unfortunately we didn't have threads at that time, so it's mixed with several other conversations</p>",
        "id": 157980920,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549815409
    },
    {
        "content": "<p>Wow, we were all so much younger then</p>",
        "id": 157981099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549815701
    },
    {
        "content": "<p>Yes that was exactly the conversation I was thinking of! That was when I figured out what the point of Simon was. Before that he was just some guy asking incomprehensible questions</p>",
        "id": 157981155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549815765
    },
    {
        "content": "<p>After that he was the guy that could actually make some sense of the source code</p>",
        "id": 157981172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549815802
    }
]