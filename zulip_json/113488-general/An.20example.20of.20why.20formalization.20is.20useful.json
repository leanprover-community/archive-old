[
    {
        "content": "<p>I really like what is going on with <a href=\"https://github.com/leanprover-community/mathlib/pull/12777\">#12777</a>. <span class=\"user-mention\" data-user-id=\"460212\">@Sebastian Monnet</span> proved that if <code>E</code>,<code>F</code> and <code>K</code> are fields such that <code>finite_dimensional F E</code>, then <code>fintype (E ‚Üí‚Çê[F] K)</code>. We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/field.alg_hom.fintype\">docs#field.alg_hom.fintype</a>, that is exactly the same statement with the additional assumption <code>is_separable F E</code>.</p>\n<p>The interesting part of the PR is that, with the new theorem, the linter will automatically flag all the theorem that can be generalized (for free!), removing the separability assumption. I think in normal math this is very difficult to achieve, if I generalize a 50 years old paper that assumes <code>p ‚â† 2</code> to all primes, there is no way I can manually check and maybe generalize all the papers that use the old one.</p>",
        "id": 277293484,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648738389
    },
    {
        "content": "<p>OK, of course right after I write this, Lean decided that something is wrong and didn't accept the new result, but still, the story is in principle interesting...</p>",
        "id": 277293736,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648738491
    },
    {
        "content": "<p>I completely agree with you!  Automated reduction of assumptions is great!</p>\n<p>In a similar vein, I was very impressed with I changed the definition of ideal to use <code>comm_semiring</code> instead of <code>comm_ring</code> and then noticing that essentially the only proofs that failed were the ones that explicitly involved using <code>-</code>!</p>",
        "id": 277294680,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648738874
    },
    {
        "content": "<p>This happened to me a lot with the Bochner integral refactor, in which I removed a <code>second_countable_topology</code> assumption. Then I had to go through a bunch of linting steps, where the linter complained that I had useless assumptions in a bunch of files that do not directly depend on integration theory (notably many results in complex analysis).</p>",
        "id": 277295659,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1648739294
    },
    {
        "content": "<p>Whatever happened to the optional linter (I think written by <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>?) that tried to determine if a type class assumption was too strong (not just unnecessary)? It was far too slow to put into the automatic linting step, but it would be lovely to have it run once a day and put the output somewhere easily accessible.</p>",
        "id": 277344823,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648763553
    },
    {
        "content": "<p>ah, I found some messages with Alex, and what you're meant to be able to do is (in mathlib):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">leanpkg</span> <span class=\"n\">add</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">alexjbest</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">generalisation</span>\n</code></pre></div>\n<p>then add <code>import generalisation_linter</code> in a file, and then run <code>#lint</code> as normally.</p>\n<p>Right now this fails with <code>cannot find revision lean-3.42.0 in repository _target/deps/lean-generalisation</code> at the <code>leanpkg add</code> step.</p>",
        "id": 277345751,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648764064
    },
    {
        "content": "<p>Alex's talk about the generalisation linter is at <a href=\"https://www.youtube.com/watch?v=pudd4F749tE\">https://www.youtube.com/watch?v=pudd4F749tE</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"pudd4F749tE\" href=\"https://www.youtube.com/watch?v=pudd4F749tE\"><img src=\"https://uploads.zulipusercontent.net/0fe1fd40d7673fd4f243768f1c16863711cbf4a0/68747470733a2f2f692e7974696d672e636f6d2f76692f70756464344637343974452f64656661756c742e6a7067\"></a></div>",
        "id": 277345805,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648764093
    },
    {
        "content": "<p>i tried bumping at <code>https://github.com/ericrbg/lean-generalisation</code>, and trying to run it overnight on my laptop on mathlib. will report back what it finds!</p>",
        "id": 277354754,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648770521
    },
    {
        "content": "<p>I ran it just up to <code>import algebra.group.basic</code>. There are essentially four classes of suggestions:</p>\n<ul>\n<li>broken ones that include <code>no_meet_fake_name</code> in the output</li>\n<li>suggestions that might well be okay, but I'm not interested in: <code>#check @comp_mul_right /- _inst_1: semigroup ‚Üù has_mul is_associative -/</code></li>\n<li>some that are \"obviously silly\": `#check @group.to_monoid /- _inst_1: group ‚Üù monoid -/</li>\n<li>and some good ones!</li>\n</ul>\n<p>The first three classes are pretty easy to filter out. To ignore a superset of the second class, we can just filter out everything that suggests replacing one typeclass with multiple typeclasses. (They may well be valid, but I probably less valuable.) The third class would require a filter that declines suggestions that weaken a typeclass if the declaration is in the namespace.</p>\n<p>The remaining suggestions up to <code>algebra.group.basic</code> I've implemented as <a href=\"https://github.com/leanprover-community/mathlib/pull/13092\">#13092</a>; we'll see what CI says.</p>",
        "id": 277361276,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648777088
    },
    {
        "content": "<p>Okay, this is kind of fun. :-) Many of the suggestions up to (an arbitrarily chosen target) <code>algebra.ring.pi</code> are in <a href=\"https://github.com/leanprover-community/mathlib/pull/13094\">#13094</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/13095\">#13095</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/13096\">#13096</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/13097\">#13097</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/13098\">#13098</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/13099\">#13099</a>.</p>",
        "id": 277365172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648781661
    },
    {
        "content": "<p>meanwhile, the version running on <code>mk_all</code> still hasn't finished... mypoor macbook :)</p>",
        "id": 277380146,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648798820
    },
    {
        "content": "<p>worryingly, it also throws some errors of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">WARNING</span> <span class=\"n\">types</span> <span class=\"n\">not</span> <span class=\"n\">equal</span>\n<span class=\"bp\">&lt;</span><span class=\"kd\">def</span> <span class=\"n\">algebraic_geometry.Scheme.open_cover.finite_subcover</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">algebraic_geometry.Scheme</span><span class=\"o\">},</span>\n  <span class=\"n\">X.open_cover</span> <span class=\"bp\">‚Üí</span>\n  <span class=\"bp\">Œ†</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">X.to_LocallyRingedSpace.to_SheafedSpace.to_PresheafedSpace.carrier</span><span class=\"o\">)],</span> <span class=\"n\">X.open_cover</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span>\n<span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">algebraic_geometry.Scheme</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">ùí∞</span> <span class=\"o\">:</span> <span class=\"n\">X.open_cover</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">X.to_LocallyRingedSpace.to_SheafedSpace.to_PresheafedSpace.carrier</span><span class=\"o\">)],</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">X.to_LocallyRingedSpace.to_SheafedSpace.to_PresheafedSpace.carrier</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_.some</span>\n  <span class=\"k\">in</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"bp\">‚Ü•</span><span class=\"n\">t</span><span class=\"o\">,</span>\n      <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ü•</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"bp\">ùí∞.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"bp\">ùí∞.</span><span class=\"n\">f</span> <span class=\"n\">x.val</span><span class=\"o\">),</span>\n      <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ü•</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"bp\">ùí∞.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">ùí∞.</span><span class=\"n\">f</span> <span class=\"n\">x.val</span><span class=\"o\">),</span>\n      <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">X.to_LocallyRingedSpace.to_SheafedSpace.to_PresheafedSpace.carrier</span><span class=\"o\">)),</span> <span class=\"n\">Exists.some</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">covers</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">WARNING</span> <span class=\"n\">types</span> <span class=\"n\">not</span> <span class=\"n\">equal</span>\n<span class=\"bp\">&lt;</span><span class=\"kd\">def</span> <span class=\"n\">algebraic_geometry.PresheafedSpace.is_open_immersion.to_SheafedSpace_hom</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.limits.has_products</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">algebraic_geometry.PresheafedSpace</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">algebraic_geometry.SheafedSpace</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y.to_PresheafedSpace</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">algebraic_geometry.PresheafedSpace.is_open_immersion</span> <span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"n\">algebraic_geometry.PresheafedSpace.is_open_immersion.to_SheafedSpace</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.limits.has_products</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">algebraic_geometry.PresheafedSpace</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">algebraic_geometry.SheafedSpace</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y.to_PresheafedSpace</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">algebraic_geometry.PresheafedSpace.is_open_immersion</span> <span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"n\">f</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>not sure how this happens</p>",
        "id": 277380756,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648799270
    },
    {
        "content": "<p>Just noting that we have <a href=\"https://github.com/leanprover-community/mathlib/tree/generalising_typeclasses\">branch#generalising_typeclasses</a></p>",
        "id": 277390471,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1648805106
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> Is anyone brave enough to merge master into a branch 2752 commits behind?</p>",
        "id": 277390613,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1648805205
    },
    {
        "content": "<p>I already did but then let the branch rot again <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 277390652,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1648805243
    },
    {
        "content": "<p>Ah, nice, after following the generalisation linters hints for a while, I realised it was going to be possible to generalise <code>module</code> to work over a <code>non_assoc_semiring</code>. This is now in <a href=\"https://github.com/leanprover-community/mathlib/pull/13111\">#13111</a>.</p>",
        "id": 277399617,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648810626
    },
    {
        "content": "<p>I wonder if we can bring <code>lie_module</code> back into the fold. :-)</p>",
        "id": 277399631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648810643
    },
    {
        "content": "<p>I think I decided not to make that generalization at the time because it didn't actually have any obvious instances</p>",
        "id": 277401897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648812094
    },
    {
        "content": "<p>In particular, a non associative ring can't be a module over itself, because <code>mul_smul</code> is just associativity</p>",
        "id": 277402004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648812130
    },
    {
        "content": "<p>In fact, I think <code>mul_smul</code> implies the action behaves as if the ring were associative</p>",
        "id": 277402068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648812167
    },
    {
        "content": "<p>are you saying this is the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid.exponent\">docs#monoid.exponent</a> in that any module ends up automatically implying associativity?</p>",
        "id": 277402094,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648812185
    },
    {
        "content": "<p>I will update <code>generalising_typeclasses</code> once you are done with all this, Scott.</p>",
        "id": 277402339,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1648812327
    },
    {
        "content": "<p>It's not quite as strong as implying associativity</p>",
        "id": 277403144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648812846
    },
    {
        "content": "<p>Just that the action factors via an embedding into something associative</p>",
        "id": 277403162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648812861
    },
    {
        "content": "<p><code>((a * b) * c) ‚Ä¢ x = (a * (b * c)) ‚Ä¢ x</code> is implied by the module axioms</p>",
        "id": 277403256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648812934
    },
    {
        "content": "<p>not sure how quotients work in non-assoc rings, but can you make a module of R into its \"associtivisation\"?</p>",
        "id": 277403907,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648813313
    },
    {
        "content": "<p>This example or a related one was discussed here some time ago</p>",
        "id": 277405747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648814361
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Typeclasses.20on.20module/near/267627989\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Typeclasses.20on.20module/near/267627989</a></p>",
        "id": 277405904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648814422
    },
    {
        "content": "<p>Yeah, okay, I think I won't bother with that PR. :-)</p>",
        "id": 277408365,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648815719
    },
    {
        "content": "<p>I guess it is actually <code>non_unital_ring</code> that we may want modules for, for C^*-algebra purposes...?</p>",
        "id": 277408461,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648815749
    },
    {
        "content": "<p>i still don't know why we didn't call those <code>rng</code>s... we're going to need 4k screens to fit Lean text soon</p>",
        "id": 277409366,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648816180
    },
    {
        "content": "<p><code>random_number_generator</code>?</p>",
        "id": 277409493,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1648816223
    },
    {
        "content": "<p><code>ring</code> without the <code>i</code>dentity</p>",
        "id": 277409916,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648816417
    },
    {
        "content": "<p>if you mean it'd get confused with that, it seems to already be called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rand_g\">docs#rand_g</a></p>",
        "id": 277410028,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648816466
    },
    {
        "content": "<p>and <code>rig</code> for <code>semiring</code> (ring without <code>n</code>egative), and presumably <code>rg</code>s for the silliest ones?</p>",
        "id": 277410067,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648816490
    },
    {
        "content": "<p>A name without vowels is likely to be read as an abbreviation.</p>",
        "id": 277410235,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1648816573
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Rng_(algebra)\">These</a> are <a href=\"https://en.wikipedia.org/wiki/Semiring\">common</a> names</p>",
        "id": 277410727,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648816787
    },
    {
        "content": "<p>Is it possible to run the generalization linter alone? <code>#lint</code> dies on many files on my machine.</p>",
        "id": 277412096,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1648817471
    },
    {
        "content": "<p>just type <code>generalization_linter</code></p>",
        "id": 277412280,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648817540
    },
    {
        "content": "<p>after <code>#lint</code></p>",
        "id": 277412290,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648817544
    },
    {
        "content": "<p>but it's really expensive it's still running on my laptop since ~yday 10GMT</p>",
        "id": 277412324,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648817562
    },
    {
        "content": "<p>thanks, unfortunately it still times out..</p>",
        "id": 277412807,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1648817742
    },
    {
        "content": "<p>Is it possible to run it from the command line?</p>",
        "id": 277415404,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648818866
    },
    {
        "content": "<p>And not in VS Code</p>",
        "id": 277415419,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1648818877
    },
    {
        "content": "<p>You need to type <code>#lint only generalization_linter</code> if you don't want to do the default tests.</p>",
        "id": 277419434,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1648820509
    },
    {
        "content": "<p>oh dear, my poor CPU cycles are probably re-running simp-nf...</p>",
        "id": 277419560,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648820558
    },
    {
        "content": "<p>still running, albeit single-threaded so hopefully it's nearly done... how long did it take to run the first time?</p>",
        "id": 277517137,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648890200
    },
    {
        "content": "<p>I'm not sure it's ever been run on the entire library! :-)</p>",
        "id": 277517505,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648890650
    },
    {
        "content": "<p>OK, I've tried now twice and it just outputs errors and never any suggestions :/ maybe this is a memory issue though, so I guess these results are going to have to wait.</p>\n<p><a href=\"https://gist.github.com/ericrbg/e78cd06e2930763a07fd2f22c14a67d0\">https://gist.github.com/ericrbg/e78cd06e2930763a07fd2f22c14a67d0</a></p>",
        "id": 277851917,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649152153
    },
    {
        "content": "<p>If someone is ready to explain me how to do it I have some cpu time (and memory) to spare</p>",
        "id": 277852949,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649152719
    },
    {
        "content": "<ol>\n<li>Take a <code>mathlib</code> clone with cache</li>\n<li><code>leanpkg add https://github.com/ericrbg/lean-generalisation</code></li>\n<li><code>mk_all.sh</code> to get an <code>all.lean</code></li>\n<li>Make a file that imports <code>all</code> and <code>generalisation_linter</code>, and under all that put <code>#lint only generalisation_linter</code></li>\n<li><code>lean --make</code> that file into some output file</li>\n</ol>\n<p>If this works as I think it should, piping from that file should give you the output. It's likely worth trying step 4 with <code>logic.basic</code> instead of <code>all</code> first to check things are working as they should</p>",
        "id": 277856252,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649154537
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n<span class=\"kn\">import</span> <span class=\"n\">generalisation_linter</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"n\">only</span> <span class=\"n\">generalisation_linter</span>\n</code></pre></div>\n<p>and <code>lean --make src/test_linter.lean &gt; res</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Checking 0 declarations (plus 0 automatically generated ones) in the current file with 1 linters -/</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> All linting checks passed! -/</span>\n</code></pre></div>\n<p><span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 277857207,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649155137
    },
    {
        "content": "<p>You'll want <code>#lint_mathlib only generalisation_linter</code> or <code>#lint_all only generalisation_linter</code></p>",
        "id": 277857258,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1649155171
    },
    {
        "content": "<p>oopsies, yes, wrong lint command!</p>",
        "id": 277857279,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649155189
    },
    {
        "content": "<p>Ah yes, with <code>logic.basic</code> it does something</p>",
        "id": 277857383,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649155250
    },
    {
        "content": "<p>For future reference: one has to redirect stderr to obtain a file with the result</p>",
        "id": 277857873,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649155538
    },
    {
        "content": "<p>It is of course still working, but the first output is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">WARNING</span> <span class=\"n\">types</span> <span class=\"n\">not</span> <span class=\"n\">equal</span>\n<span class=\"bp\">&lt;</span><span class=\"kd\">def</span> <span class=\"n\">category_theory.nat_trans.right_derived</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.abelian</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.has_injective_resolutions</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.abelian</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">F.additive</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">G.additive</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">F.right_derived</span> <span class=\"n\">n</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G.right_derived</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span>\n<span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.category</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.abelian</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.has_injective_resolutions</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.abelian</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">F.additive</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">G.additive</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span>\n  <span class=\"n\">category_theory.whisker_left</span> <span class=\"o\">(</span><span class=\"n\">category_theory.injective_resolutions</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">category_theory.whisker_right</span> <span class=\"o\">(</span><span class=\"n\">category_theory.nat_trans.map_homotopy_category</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">complex_shape.up</span> <span class=\"n\">‚Ñï</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"n\">homotopy_category.homology_functor</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">complex_shape.up</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">WARNING</span> <span class=\"n\">types</span> <span class=\"n\">not</span> <span class=\"n\">equal</span>\n<span class=\"bp\">&lt;</span><span class=\"kd\">def</span> <span class=\"n\">category_theory.exp_terminal_iso_self</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.limits.has_finite_products</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.exponentiable</span> <span class=\"o\">(</span><span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)],</span>\n  <span class=\"o\">(</span><span class=\"n\">category_theory.exp</span> <span class=\"o\">(</span><span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.limits.has_finite_products</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.exponentiable</span> <span class=\"o\">(</span><span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)],</span>\n  <span class=\"n\">category_theory.yoneda.ext</span> <span class=\"o\">((</span><span class=\"n\">category_theory.exp</span> <span class=\"o\">(</span><span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">X</span>\n    <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">category_theory.exp</span> <span class=\"o\">(</span><span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n       <span class=\"o\">(</span><span class=\"n\">category_theory.limits.prod.left_unitor</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">‚â´</span> <span class=\"n\">category_theory.cartesian_closed.uncurry</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n       <span class=\"n\">category_theory.cartesian_closed.curry</span> <span class=\"o\">((</span><span class=\"n\">category_theory.limits.prod.left_unitor</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n    <span class=\"n\">category_theory.exp_terminal_iso_self._proof_9</span>\n    <span class=\"n\">category_theory.exp_terminal_iso_self._proof_10</span>\n    <span class=\"n\">category_theory.exp_terminal_iso_self._proof_11</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">WARNING</span> <span class=\"n\">types</span> <span class=\"n\">not</span> <span class=\"n\">equal</span>\n<span class=\"bp\">&lt;</span><span class=\"kd\">def</span> <span class=\"n\">category_theory.injective.exact.desc</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.limits.has_zero_morphisms</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.limits.has_images</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.limits.has_equalizers</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.injective</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.exact</span> <span class=\"n\">g.op</span> <span class=\"n\">f.op</span><span class=\"o\">],</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span>\n<span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.limits.has_zero_morphisms</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.limits.has_images</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.limits.has_equalizers</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.injective</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.exact</span> <span class=\"n\">g.op</span> <span class=\"n\">f.op</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">category_theory.exact.lift</span> <span class=\"n\">h.op</span> <span class=\"n\">g.op</span> <span class=\"n\">f.op</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>that looks Eric's</p>",
        "id": 277858813,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649156150
    },
    {
        "content": "<p><a href=\"https://gist.github.com/riccardobrasca/725a5a8c1390cc8add3f31d43cf2881c\">Voil√†</a>. The interesting output starts at line 605.</p>",
        "id": 278293462,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649419173
    },
    {
        "content": "<p>this is amazing! I already see some nice generalisations here...</p>",
        "id": 278308592,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649426609
    },
    {
        "content": "<p>this also reveals things that other linters should catch; for example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.id.smul_eq_mul\">docs#algebra.id.smul_eq_mul</a> was purportedly about the <code>smul</code> from <code>algebra.id</code>, but it is about <code>has_mul.to_has_scalar</code>. (This linter catches it as we can generalise this lemma to <code>has_mulR</code>, even though that makes no sense for <code>algebra</code>)</p>",
        "id": 278328763,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649435298
    },
    {
        "content": "<p>Some of those lemmas I just left behind for easy unification</p>",
        "id": 278329375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649435591
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_eq_mul\">docs#smul_eq_mul</a> is the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.id.smul_eq_mul\">docs#algebra.id.smul_eq_mul</a></p>",
        "id": 278329417,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649435616
    },
    {
        "content": "<p>I didn't measure the effects of that, but note that the simp_nf linter doesn't seem to reject the dumplication</p>",
        "id": 278329570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649435680
    },
    {
        "content": "<p>Similarly for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.mul_smul_comm\">docs#algebra.mul_smul_comm</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_smul_comm\">docs#mul_smul_comm</a></p>",
        "id": 278329635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649435715
    },
    {
        "content": "<p>Oh, because Lean doesn't have to dig as far for the <code>has_mul</code>? That makes some sense</p>",
        "id": 278329641,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649435717
    },
    {
        "content": "<p>Maybe, who knows</p>",
        "id": 278329663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649435727
    },
    {
        "content": "<p>I only wanted to light and put back out again so many fires at once in some PRs related to those, and leaving behind the less general lemmas was a nice way to avoid the fire growing</p>",
        "id": 278329789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649435763
    },
    {
        "content": "<p>also interesteing that it gets some wrong in some weird ways (l632 of above):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">no_zero_smul_divisors.iff_algebra_map_injective</span>\n<span class=\"c\">/-</span><span class=\"cm\"> _inst_2: ring ‚Üù euclidean_domain no_zero_divisors</span>\n<span class=\"cm\">_inst_3: is_domain ‚Üù no_zero_divisors nontrivial</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>",
        "id": 278329898,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649435823
    },
    {
        "content": "<p><code>is_domain</code> could in theory be replaced by those two typeclasses everywhere</p>",
        "id": 278330160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649435953
    },
    {
        "content": "<p>It exists to make the spelling shorter</p>",
        "id": 278330190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649435969
    },
    {
        "content": "<p>I meant more the <code>ring ‚Üù euclidean_domain </code></p>",
        "id": 278330194,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649435972
    },
    {
        "content": "<p>first from this new full dataset: <a href=\"https://github.com/leanprover-community/mathlib/pull/13252\">#13252</a></p>",
        "id": 278344644,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649442821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>, as it turns out I caught in <a href=\"https://github.com/leanprover-community/mathlib/pull/13268\">#13268</a> the same generalization as the linter in <a href=\"https://github.com/leanprover-community/mathlib/pull/13260\">#13260</a> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 278430465,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649538086
    },
    {
        "content": "<p>Too bad I'm not running on a very powerful machine.</p>",
        "id": 278430619,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649538246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/An.20example.20of.20why.20formalization.20is.20useful/near/278293462\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://gist.github.com/riccardobrasca/725a5a8c1390cc8add3f31d43cf2881c\">Voil√†</a>. The interesting output starts at line 605.</p>\n</blockquote>\n<p>if you want to PR results from it, here's some of the outputs. I'm working on PRing some of this stuff as a side-hobby</p>",
        "id": 278430669,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649538337
    },
    {
        "content": "<p>Yeah I read it but this was on my mind's queue after the \"Rename <code>nat.neg_one_pow_of_even</code>\" task <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 278430752,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649538449
    },
    {
        "content": "<p>I did a little editorial clean-up of <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>'s output, trying to remove the \"garbage\".</p>\n<p><a href=\"https://gist.github.com/semorrison/bdf8e3a5e4e6da34071f94821cec805c\">https://gist.github.com/semorrison/bdf8e3a5e4e6da34071f94821cec805c</a></p>",
        "id": 278437510,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649548403
    },
    {
        "content": "<p>In particular I simply removed everything that replaces a single type class with multiple ones, as these appear to often incorrect or in any case low priority.</p>",
        "id": 278437525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649548435
    },
    {
        "content": "<p>Do we want the <code>separated_space ‚Üù t2_space</code>? I remember some discussion about this.</p>",
        "id": 278454260,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649576771
    },
    {
        "content": "<p>I did the suggestions for <code>data/polynomials/*</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/13342\">#13342</a>.</p>",
        "id": 278541584,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649677809
    },
    {
        "content": "<p>And me some of the suggestions (which I once again found independently <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>) for <code>order.bounded_order</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/13419\">#13419</a>.</p>",
        "id": 278820815,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649852191
    },
    {
        "content": "<blockquote>\n<p>The API for <code>with_top</code> and the API for <code>with_top</code> somehow...</p>\n</blockquote>\n<p>;b</p>",
        "id": 278820855,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649852239
    },
    {
        "content": "<p>Whooops</p>",
        "id": 278820997,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649852319
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13443\">#13443</a> for <code>number_theory.</code></p>",
        "id": 278949961,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1649933714
    }
]