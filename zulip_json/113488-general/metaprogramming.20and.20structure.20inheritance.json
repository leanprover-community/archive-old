[
    {
        "content": "<p>I'm trying to write a tactic that explores the inheritance structure. Given the name of a structure type, can I discover what are its ancestors?</p>",
        "id": 123582486,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520804631
    },
    {
        "content": "<p>Only for the new structure command. You need to reimplement <a href=\"https://github.com/leanprover/lean/blob/bdea7d420dbcdb7cce700eb62c129387707016fc/src/frontends/lean/structure_cmd.cpp#L139\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/bdea7d420dbcdb7cce700eb62c129387707016fc/src/frontends/lean/structure_cmd.cpp#L139\">get_parent_structures</a>, but that shouldn't be too hard.</p>",
        "id": 123583537,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520806842
    },
    {
        "content": "<p>tl;dr: subobject fields start with \"_\"</p>",
        "id": 123583547,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520806905
    },
    {
        "content": "<p>How does one use the new structure command? Also, is <code>get_parent_structures</code> exposed to Lean?</p>",
        "id": 123583803,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520807498
    },
    {
        "content": "<p>you're using the new structure command by default, I think</p>",
        "id": 123583950,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520807779
    },
    {
        "content": "<p>as opposed to the old structure command which is accessed with <code>set option</code></p>",
        "id": 123583951,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520807789
    },
    {
        "content": "<p>yep</p>",
        "id": 123583953,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520807802
    },
    {
        "content": "<p>Thanks! And is it possible that <code>structure_fields</code> by default does not list those symbols starting with <code>_</code>?</p>",
        "id": 123584118,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520808169
    },
    {
        "content": "<p>Sorry, that was ambiguous. It's only in the inductive constructor parameters that they are encoded with <code>_</code></p>",
        "id": 123584218,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520808366
    },
    {
        "content": "<p>All <code>structure_fields</code> does is get the parameter names and strip any leading <code>_</code></p>",
        "id": 123584227,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520808424
    },
    {
        "content": "<p>Let's say that I'm constructing an instance of <code>group</code> (but I don't know in the tactic that it is specifically group). I'd like to know that <code>monoid</code> is a direct parent so that I can use <code>mk_instance</code> and use the result as a source in <code>pexpr.mk_structure_instance</code>. How would you do it?</p>",
        "id": 123584544,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520809136
    }
]