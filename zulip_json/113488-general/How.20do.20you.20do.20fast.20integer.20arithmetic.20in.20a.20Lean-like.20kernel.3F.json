[
    {
        "content": "<p>Computer-implementable general math kernels (say of a proof assistant) are usually implemented in a one-to-one correspondence (in data structures) with a certain formalized theory of types.</p>\n<p>But they usually define the naturals, and then then integers, in such a way that doing things 100% one-to-one would result in an extremely inefficient algorithm for say adding two arbitrary integers.</p>\n<p>Since most programming language standard libraries have a built-in BigInt (D does, Python's is part of the language), and the most basic datatype the computer works with is the integral bit, and stringing these together leads to quotient rings $\\Bbb{Z}/{2^k}$, in particular of the integers, it seems like BigInt is a good candidate for the first kind of built-in I would try to add to a theory.</p>\n<p>So my question is, how do you perform this seamless integration of a high-level built-in type $\\Bbb{Z}$.  That is, not all of its operations are formalized / verified at least at runtime.  This is sort of like having \"managed\" and \"unmanaged\" portions of code in the same C# project.</p>\n<p>So a better question would be what does Lean do to deal with this problem?  Say if I were searching for a proof, I would not want to \"verify everything always\", I would probably want to treat certain things atomically.</p>",
        "id": 263625779,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1638559429
    },
    {
        "content": "<p>It's hard for me to tell what you're asking for, but as a guess maybe the lean answer is \"generalize away all the implementation details:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">7</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">21</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c1\">-- I don't know if this proof works!</span>\n</code></pre></div>",
        "id": 263627168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638560080
    },
    {
        "content": "<p>Note that here <code>3</code> is syntactically <code>(bit1 (bit1 0))</code>, and lean just prints it nicely</p>",
        "id": 263627280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638560151
    },
    {
        "content": "<p>Since Lean is also a programming language, surely there is some use of it that would require fast BigInt operations, so I'm wondering how does Lean perform the operations quickly enough to be comparable with a C++ BigInt implementation?  But only do so where it absolutely needs to and should, perhaps the user could tell it when to...</p>",
        "id": 263628148,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1638560601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236489\">@Daniel Donnelly</span> are you interested particularly in Lean3 or is Lean 4 also on the table? As it stands, Lean 4 actually does use a C++ implementation of big numbers to do numeric operations (either GMP or a custom version).</p>",
        "id": 263628539,
        "sender_full_name": "Mac",
        "timestamp": 1638560777
    },
    {
        "content": "<p>There are a couple levels to Lean, which makes answering this not so straightforward. There's the kernel, which is what does the final check that a proof is correct (and its version of the naturals is the inductive type), there's the evaluator, which is what things like tactic scripts run in (and as I understand it, it uses an efficient big natural number library), and for Lean 4 there's compiled code, which uses GMP for natural numbers (Mac beat me to mentioning it while I was writing).</p>",
        "id": 263628716,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638560874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Yes, lean4, okay so Lean does it properly by now.  Just wondering!  I'm messing around with some code in D right now. :)</p>",
        "id": 263628772,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1638560885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> the Lean 4 kernel also uses C++ big numbers as well though (it has special added support for this).</p>",
        "id": 263628845,
        "sender_full_name": "Mac",
        "timestamp": 1638560933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>  I guess it's up to the Lean designer's discretion when determining which method to use.</p>",
        "id": 263629051,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1638561018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Does the kernel also do this for other types with an extern implementation? like arrays?</p>",
        "id": 263629110,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638561055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> no,  the kernel just has special support for natural numbers.</p>",
        "id": 263629359,
        "sender_full_name": "Mac",
        "timestamp": 1638561161
    },
    {
        "content": "<p>Is there any way to base a type theory off of integers so that you don't have to verify that the arithmetic is correct, but you assume it is?</p>",
        "id": 263629642,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1638561301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"236489\">Daniel Donnelly</span> <a href=\"#narrow/stream/113488-general/topic/How.20do.20you.20do.20fast.20integer.20arithmetic.20in.20a.20Lean-like.20kernel.3F/near/263629642\">said</a>:</p>\n<blockquote>\n<p>Is there any way to base a type theory off of integers so that you don't have to verify that the arithmetic is correct, but you assume it is?</p>\n</blockquote>\n<p>I would not imagine so, no. I don't see how exactly type theory would ever get you arithmetic for free.</p>",
        "id": 263629784,
        "sender_full_name": "Mac",
        "timestamp": 1638561372
    },
    {
        "content": "<p>But I am not really an expert on such formal methods, so don't quote me on that.</p>",
        "id": 263629844,
        "sender_full_name": "Mac",
        "timestamp": 1638561409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Not just any arithmetic, only arithmetic of the integers is built-in.  It seems appropriate since it is a most-basic type in a lot of senses and the computer's natural datatype.</p>",
        "id": 263630341,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1638561651
    },
    {
        "content": "<p>I'm not sure what you're looking for here; maybe one answer is that you define anything with <code>axiom</code>s.  However, you lose niceties that come with an inductive type definition that are helpful for proving things.</p>\n<p>With Lean 4 and natural numbers in the kernel, I think an idea is that with inductive types, the underlying implementation can be anything that satisfies the axioms, so non-negative GMP natural numbers can be used perfectly well in place of the generic implementation, supposing you trust they are implemented correctly. (A complication is that you would probably also want to also replace basic arithmetic operations with their GMP counterparts.) I don't see why you can't do the same for integers and GMP integers.</p>",
        "id": 263631898,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638562505
    },
    {
        "content": "<p>The current implementation of lean 4 puts GMP in the trusted computing base, which not everyone is comfortable with. Moving bignum arithmetic to the kernel also has consequences for proof export, since anyone consuming the proof also has to support the same operations.</p>",
        "id": 263659507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638569163
    },
    {
        "content": "<p>Note that you can get within a constant multiplicative factor of optimal even without any fancy bignum support; this is what lean 3 <code>norm_num</code> does, it implements everything with <code>bit0</code> and <code>bit1</code> functions. These are simple and portable, but the constant cost is large, probably on the order of 100 to 1000, which is good enough for numbers with, say, 50 digits but not if you want to deal with 100000 digit numbers</p>",
        "id": 263659878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638569387
    },
    {
        "content": "<p>I think there are very few problems in verification which need such large numbers, and <code>norm_num</code> is generally not the bottleneck of mathlib</p>",
        "id": 263659987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638569442
    },
    {
        "content": "<p>But certainly there are certain domains where fast large number computation is important and having bignum arithmetic support opens those areas</p>",
        "id": 263660079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638569509
    },
    {
        "content": "<p>Personally, I think the sweet spot is built in kernel computations on fixed size words, say 64 bit numbers, and make the user write anything on top of that themselves (i.e. they have to write the bignum package). It's usually not that hard to justify operations on integers which are part of the underlying memory model</p>",
        "id": 263660423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638569632
    }
]