[
    {
        "content": "<p>A new Lean release has been long overdue, so let me announce the latest release of the community edition, Lean 3.23.0!  Thanks to <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>, <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> for contributing exciting new features!</p>\n<p>Features:</p>\n<ul>\n<li>Expose <code>kabstract</code> in <code>type_context</code> to the VM (<a href=\"https://github.com/leanprover-community/lean/issues/391\">lean#391</a>)</li>\n<li>Add position information to declarations added in user commands (<a href=\"https://github.com/leanprover-community/lean/issues/488\">lean#488</a>)</li>\n</ul>\n<p>Bug fixes:</p>\n<ul>\n<li>The <code>a</code> bug is replaced by the <code>ᾰ</code> bug (<a href=\"https://github.com/leanprover-community/lean/issues/490\">lean#490</a>)</li>\n</ul>\n<p>Changes:</p>\n<ul>\n<li>New instance naming heuristic (<a href=\"https://github.com/leanprover-community/lean/issues/458\">lean#458</a>, <a href=\"https://github.com/leanprover-community/lean/issues/493\">lean#493</a>)</li>\n<li><code>by_contradiction</code> uses classical logic and the name <code>h</code> (<a href=\"https://github.com/leanprover-community/lean/issues/491\">lean#491</a>)</li>\n</ul>\n<p>Mathlib PR:</p>\n<ul>\n<li>is busily being prepared (<a href=\"https://github.com/leanprover-community/mathlib/issues/4802\">#4802</a>)</li>\n</ul>",
        "id": 214975058,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603982319
    },
    {
        "content": "<p>PR discussion is happening in: <a href=\"#narrow/stream/113488-general/topic/Replacing.20the.20.60a.60.20bug.20by.20the.20.60.E1.BE.B0.60.20bug/near/214975201\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Replacing.20the.20.60a.60.20bug.20by.20the.20.60.E1.BE.B0.60.20bug/near/214975201</a></p>",
        "id": 214975315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603982418
    },
    {
        "content": "<p>Quoting <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> from <a href=\"https://github.com/leanprover-community/lean/issues/458\">lean#458</a>:</p>\n<blockquote>\n<p>Previously, inside a namespace, in a common situation like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">ns</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>both instances would be assigned the name <code>ns.ring</code>;<br>\nand you might not notice immediately if they were in different files.</p>\n<p>The new heuristic tries to use both of the parts <code>ring</code> and <code>foo</code>,<br>\neven when inside a namespace, while removing some redundant<br>\nnamespace components.</p>\n<p>Two instances in the core libraries needed to have names added,<br>\nbecause the method to find the name appearing in the class argument<br>\ncan't see through typed values <code>(_ : T)</code> or the use of parameters.<br>\n(These instances wouldn't have been automatically assigned names<br>\nif located outside a namespace.) I gave them their old names;<br>\nhowever, it's possible names of other instances have changed.</p>\n</blockquote>",
        "id": 214976463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603982893
    },
    {
        "content": "<p>This is probably important information for everybody. Not just contributors, but also users of lean/mathlib</p>",
        "id": 214976607,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603982968
    },
    {
        "content": "<p>Is the intention for Lean 4 to be compatible with a particular milestone of Lean 3? Like when there are changes to the c++ on the community version, are those changes also going to need to go into the Lean 4 codebase?</p>",
        "id": 214983254,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603985439
    },
    {
        "content": "<p>This is very far from a question that we can answer</p>",
        "id": 214983360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603985474
    },
    {
        "content": "<p>The leanprover-community group has very little visibility or influence on the goings on in lean 4, so I personally consider it unlikely that we will end up with such an arrangement</p>",
        "id": 214983645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603985572
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> or <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> has thoughts? dunno if they pay attention to this zulip</p>",
        "id": 214983665,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603985582
    },
    {
        "content": "<p>Leo doesn't (and likes to be left alone, please don't ping him). Sebastian does.</p>",
        "id": 214985411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603986155
    },
    {
        "content": "<p>What little I know is this: when we get Lean 4 (and judging by the PR's happening right now, this might be soon...ish) there could well be no simplifier and no support for auto-generated variable names, so those are two things which will be quite brakey.</p>",
        "id": 214985659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603986255
    },
    {
        "content": "<p><a href=\"https://twitter.com/derKha/status/1321780568116334592\">https://twitter.com/derKha/status/1321780568116334592</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/derKha/status/1321780568116334592\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1291333830113206273/Owxrf3il_normal.jpg\"></a><p>Lean 4 passed two important milestones on the way to its first release this week:\n* All Lean files have been ported from the old frontend written in C++ to the new one written in Lean\n* After removing the old frontend, Lean is now the dominant implementation language of Lean <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <a href=\"https://t.co/KvJTDlKuCZ\">https://twitter.com/derKha/status/1321780568116334592/photo/1</a></p><span>- Sebastian Ullrich (@derKha)</span><div class=\"twitter-image\"><a href=\"https://t.co/KvJTDlKuCZ\"><img src=\"https://pbs.twimg.com/media/ElfoAqBWMAY-gM0.png:small\"></a></div></div></div>",
        "id": 214992592,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1603989006
    },
    {
        "content": "<p>I've kicked <a href=\"https://github.com/leanprover-community/mathlib/issues/4802\">#4802</a> on the queue.</p>\n<p><code>a</code> bug is dead! Long live <code>ᾰ</code> bug!</p>",
        "id": 215058231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604035770
    }
]