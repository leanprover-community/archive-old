[
    {
        "content": "<p>How about <code>rext</code> = <code>ext</code> + <code>rintros</code>? Is this going too far?</p>",
        "id": 133502825,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536316890
    },
    {
        "content": "<p>Or <code>ext</code> + <code>rcases</code> depending on your point of view</p>",
        "id": 133502831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536316899
    },
    {
        "content": "<p>That shouldn't be too hard. I thought of doing it before but I had to change the import structure to do it so in the end I didn't bother</p>",
        "id": 133529587,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536346144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  I just pushed this branch: <a href=\"https://travis-ci.org/leanprover/mathlib/builds/426239546\" target=\"_blank\" title=\"https://travis-ci.org/leanprover/mathlib/builds/426239546\">https://travis-ci.org/leanprover/mathlib/builds/426239546</a> please let me know if it does what you wanted</p>",
        "id": 133590026,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536458360
    },
    {
        "content": "<p>Looks like there are problems in</p>\n<div class=\"codehilite\"><pre><span></span>/home/travis/build/leanprover/mathlib/tactic/pi_instances.lean:25:14: error: type mismatch at application\n  cons x\nterm\n  x\nhas type\n  name\nbut is expected to have type\n  rcases_patt\n</pre></div>",
        "id": 133590396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536459217
    },
    {
        "content": "<p>I prefer to think of it as undocumented feature :D</p>",
        "id": 133590452,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536459318
    },
    {
        "content": "<p>:-)</p>",
        "id": 133590508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536459455
    },
    {
        "content": "<p>The documentation of that feature is getting complicated, I'll just remove it</p>",
        "id": 133592972,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536464874
    },
    {
        "content": "<p>Simon I've just finished building mathlib with your patch; about to try it on my example (although it will require some preparatory work).</p>",
        "id": 133605673,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536493095
    },
    {
        "content": "<p><span class=\"emoji emoji-1f91e\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 133605680,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536493145
    },
    {
        "content": "<p>I see <code>ext</code> no longer applied <code>propext</code> to my goal, is that intentional?</p>",
        "id": 133605934,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536493711
    },
    {
        "content": "<p>I had something like <code>(\\lam a b, f a b) = (\\lam a b, g a b)</code> and I want to intro <code>a</code> and <code>b</code> and get the goal <code>f a b \\iff g a b</code> -- where <code>f a b</code> and <code>g a b</code> are propositions</p>",
        "id": 133605952,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536493754
    },
    {
        "content": "<p>anyways, it worked! I changed</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">ext</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">a₁</span> <span class=\"k\">with</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">i&#39;₁</span><span class=\"o\">,</span> <span class=\"n\">f₁</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">j₁</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">a₂</span> <span class=\"k\">with</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">i&#39;₂</span><span class=\"o\">,</span> <span class=\"n\">f₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">j₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">ext</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">i&#39;₁</span><span class=\"o\">,</span> <span class=\"n\">f₁</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">j₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">i&#39;₂</span><span class=\"o\">,</span> <span class=\"n\">f₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">j₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 133606023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536493846
    },
    {
        "content": "<p>It is not intentional. Can you find where <code>propext</code> is labelled with <code>extentionality</code>?</p>",
        "id": 133606091,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536493955
    },
    {
        "content": "<p>It... doesn't appear to be so marked anywhere that I can find</p>",
        "id": 133606127,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536494024
    },
    {
        "content": "<p>Is there a way to tell <code>ext</code> to trace what it is doing?</p>",
        "id": 133606170,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536494047
    },
    {
        "content": "<p><code>rext</code> is very nice!</p>",
        "id": 133606267,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536494244
    },
    {
        "content": "<p>Wait, maybe it never used to apply <code>propext</code>? I might have been confused because <code>set.ext</code> is very similar.</p>",
        "id": 133606277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536494264
    },
    {
        "content": "<p>I think that's probably it</p>",
        "id": 133606386,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536494507
    },
    {
        "content": "<p>We can add it though</p>",
        "id": 133606425,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536494530
    },
    {
        "content": "<p>Check what happens if you add <code>attribute [extensionality] propext</code> before your proof.</p>",
        "id": 133606431,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536494565
    },
    {
        "content": "<p><code>only constants and Pi types are supported: Prop</code></p>",
        "id": 133606436,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536494595
    },
    {
        "content": "<p>Aha, I understand why the behavior changed.<br>\nBefore, it applied <code>funext</code> once and then, by chance, it happened to apply <code>set.ext</code> which is <code>funext</code> plus <code>propext</code>.<br>\nNow, it (correctly) prefers to apply <code>funext</code> twice and then it gets stuck.</p>",
        "id": 133606491,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536494722
    },
    {
        "content": "<p><span class=\"emoji emoji-1f926\" title=\"face palm\">:face_palm:</span> oh dear! I was discussing this with Mario and saying that each type we care about is a named constant ... except for pi types. And now, the type of Prop is also not names so I have to think about making more exceptions</p>",
        "id": 133606597,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536494938
    },
    {
        "content": "<p><code>expr.sort</code>, I guess?</p>",
        "id": 133606754,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536495136
    },
    {
        "content": "<p>Also don't forget to implement univalence for equalities between types</p>",
        "id": 133606766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536495174
    },
    {
        "content": "<p>Now then next exception should be easier to add. Can you send me your example so that I can try it out?</p>",
        "id": 133606824,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536495251
    },
    {
        "content": "<p>I think I included one in the github issue (my real one has some dependencies)</p>",
        "id": 133606844,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536495313
    },
    {
        "content": "<p>But I can also provide it</p>",
        "id": 133606848,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536495333
    },
    {
        "content": "<p>Or a link to the issue please</p>",
        "id": 133606958,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536495486
    },
    {
        "content": "<p><a href=\"https://gist.github.com/rwbarton/1966db9e4ba470f2a5865f5086776f84\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/1966db9e4ba470f2a5865f5086776f84\">https://gist.github.com/rwbarton/1966db9e4ba470f2a5865f5086776f84</a>, it should compile against your branch</p>",
        "id": 133606968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536495505
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/issues/246\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/246\">https://github.com/leanprover/mathlib/issues/246</a></p>",
        "id": 133606974,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536495525
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ b ∈ f a ↔ b ∈ g a</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133606977,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536495538
    },
    {
        "content": "<p>My real example is no more interesting than this as far as the propext issue is concerned--it's just a test case for the <code>rext</code> feature.</p>",
        "id": 133606992,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536495577
    },
    {
        "content": "<p>Cool, that works now. I'll push it and then get some sleep :)</p>",
        "id": 133607603,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536496486
    },
    {
        "content": "<p>(Wait aren't we in the same time zone...)</p>",
        "id": 133607651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536496563
    },
    {
        "content": "<p>Are you on the east coast of the US?</p>",
        "id": 133607659,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536496644
    },
    {
        "content": "<p>But to answer your surprise, when I program, time flies and I forget to do all kinds of stuff</p>",
        "id": 133607661,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536496674
    },
    {
        "content": "<p>... including sleeping</p>",
        "id": 133607702,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536496732
    },
    {
        "content": "<p>Yes. But still have not adjusted from being in Europe and have been up for 4 hours today...</p>",
        "id": 133607754,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536496828
    },
    {
        "content": "<p>Were you in the UK? You seem to be driving on the wrong side of the road ... the road being a stand-in for the night, and the wrong side is being awake after 4 rather than awake until 4 :D</p>",
        "id": 133607767,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536496916
    },
    {
        "content": "<p>Yeah, my metaphors are not that enlightening ...</p>",
        "id": 133607807,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536496936
    },
    {
        "content": "<p>So we seem to be off by a full 12 hours from each other, yes</p>",
        "id": 133607808,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536496945
    },
    {
        "content": "<p>For today at least</p>",
        "id": 133607854,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536497048
    }
]