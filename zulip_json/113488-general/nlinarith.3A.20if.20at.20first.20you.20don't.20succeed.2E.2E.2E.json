[
    {
        "content": "<p>There are no unicode tricks here, the <code>example</code>s contain exactly the same text</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nlinarith</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nlinarith</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What's going on?</p>",
        "id": 310106199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668470372
    },
    {
        "content": "<p>Haha, I get the opposite failures. :-)</p>",
        "id": 310106758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668470658
    },
    {
        "content": "<p>I also replicated Eric's result</p>",
        "id": 310106855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668470723
    },
    {
        "content": "<p>It works with my fix.</p>",
        "id": 310106902,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668470755
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17307\">#17307</a></p>",
        "id": 310106915,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668470762
    },
    {
        "content": "<p>So you discovered the same bug in linarith I discovered while porting.</p>",
        "id": 310106965,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668470774
    },
    {
        "content": "<p>Isn't your bug at least deterministic?</p>",
        "id": 310106993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668470785
    },
    {
        "content": "<p>The appearance of the bug is sensitive to ordering of variables used.</p>",
        "id": 310107009,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668470796
    },
    {
        "content": "<p>And apparently that is not deterministic??</p>",
        "id": 310107048,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668470819
    },
    {
        "content": "<p>Is this \"ordering\" in the sense of \"some random hash of some garbage-named metavariables\"?</p>",
        "id": 310107049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668470819
    },
    {
        "content": "<p>It might be due to the names of fvars?</p>",
        "id": 310107062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668470823
    },
    {
        "content": "<p>this is weird, I agree</p>",
        "id": 310107082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668470838
    },
    {
        "content": "<p>I think it's deterministic with <code>lean --make</code> within a single process</p>",
        "id": 310107088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668470840
    },
    {
        "content": "<p>And just not with the lean server</p>",
        "id": 310107101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668470846
    },
    {
        "content": "<p>variable ordering should not be nondeterministic</p>",
        "id": 310107126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668470862
    },
    {
        "content": "<p>If your variables are named <code>_mfresh.123</code> or whatever, are they guaranteed to be the same every time you run the tactic?</p>",
        "id": 310107201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668470886
    },
    {
        "content": "<p>Or are those counters global within a module?</p>",
        "id": 310107209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668470892
    },
    {
        "content": "<p>they are a global counter</p>",
        "id": 310107214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668470893
    },
    {
        "content": "<p>Then I bet if you put your variables in a <code>name_set</code> and iterate them, the iteration order is non-deterministic (as a function of human-visible state)</p>",
        "id": 310107265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668470927
    },
    {
        "content": "<p>but I would have expected linarith to name its variables in the order they occur in the hypothesis list</p>",
        "id": 310107269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668470931
    },
    {
        "content": "<p>Note that the one-liner test case I made for bug <a href=\"https://github.com/leanprover-community/mathlib/pull/17307\">#17307</a> depends on the traversal order to get variables numbered in the right way</p>",
        "id": 310107769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668471221
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/597343b0995a2478628d03a9ce8ebdc8752bd3e8/src/tactic/linarith/preprocessing.lean#L245-L247\">Found it</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">ls.mfoldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">find_squares</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"n\">mk_rb_set</span><span class=\"o\">,</span>\n   <span class=\"n\">new_es</span> <span class=\"bp\">←</span> <span class=\"n\">s.mfold</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">is_sq</span><span class=\"o\">⟩</span> <span class=\"n\">new_es</span><span class=\"o\">,</span>\n     <span class=\"o\">((</span><span class=\"k\">do</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">is_sq</span> <span class=\"k\">then</span> <span class=\"bp\">``</span><span class=\"n\">sq_nonneg</span> <span class=\"k\">else</span> <span class=\"bp\">``</span><span class=\"n\">mul_self_nonneg</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">],</span>\n       <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">p</span><span class=\"o\">::</span><span class=\"n\">new_es</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">return</span> <span class=\"n\">new_es</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>that's a monadic fold over an <code>rb_set (expr ×ₗ bool)</code></p>",
        "id": 310108474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668471634
    },
    {
        "content": "<p>and <code>expr.lt</code> of course depends on the ordering of those unique names</p>",
        "id": 310108663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668471738
    },
    {
        "content": "<p>Damn, beat me to it</p>",
        "id": 310108666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668471740
    },
    {
        "content": "<p>I guess using <code>list.dedup</code> instead of <code>mk_rb_set</code> would solve the problem?</p>",
        "id": 310108770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668471823
    },
    {
        "content": "<p>yes</p>",
        "id": 310108831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668471846
    },
    {
        "content": "<p>what's more, that is usually better because we want to use defeq up to reducible or something like that</p>",
        "id": 310108871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668471874
    },
    {
        "content": "<p>Surely <code>list.dedup</code> won't do that either?</p>",
        "id": 310108892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668471896
    },
    {
        "content": "<p>well I mean the algorithm</p>",
        "id": 310108913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668471913
    },
    {
        "content": "<p>RIght, so just manually iterate and insert if none  of the existing items match; which is unfortunately O(n^2), but  I guess n is small</p>",
        "id": 310109020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668471965
    },
    {
        "content": "<p>the dedup is usually done manually, using logic like <a href=\"https://github.com/leanprover-community/mathlib/blob/597343b0995a2478628d03a9ce8ebdc8752bd3e8/src/tactic/linarith/parsing.lean#L94-L96\">this</a></p>",
        "id": 310109023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668471968
    },
    {
        "content": "<p>yeah, nothing that can be done about that</p>",
        "id": 310109044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668471982
    },
    {
        "content": "<p><code>find_squares</code> looks like it needs a similar fix</p>",
        "id": 310109512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668472274
    },
    {
        "content": "<p>Either that, or we should canonize the order after doing all the initial deduplicating</p>",
        "id": 310109527,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668472287
    },
    {
        "content": "<p>the comment says something about the inputs having been canonized, not sure when that happens but it seems like it should have also numbered the atoms</p>",
        "id": 310109873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668472493
    },
    {
        "content": "<p>assuming we aren't doing any big changes to this code, I guess <code>find_squares</code> should accumulate two <code>list expr</code>s (or I guess <code>list (expr * unit)</code> to pass to <code>find_defeq</code>)</p>",
        "id": 310109999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668472576
    },
    {
        "content": "<p>Do you plan to make the patch, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>?</p>",
        "id": 310168943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668507653
    },
    {
        "content": "<p>no, unless you are having trouble</p>",
        "id": 310169005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668507689
    },
    {
        "content": "<p>Do you think it's worth making at all, or is there little point with Scott's patch on the horizon?</p>",
        "id": 310169644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668507917
    },
    {
        "content": "<p>I think it is best not to have nondeterministic tactics. Scott's fix is an independent issue</p>",
        "id": 310170753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668508247
    },
    {
        "content": "<p>In theory it ought to be externally deterministic irrespective of the order, right? I suppose we can't use a <code>quot.lift</code> in meta code to prove that...</p>",
        "id": 310171714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668508620
    }
]