[
    {
        "content": "<p>I would like to make the instance <code>instance [fintype α] : fintype (units α) </code> in <code> in </code>algebra.group.units<code>. But importing </code>data.fintype.basic<code> in </code>algebra.group.basic` gives the following sequence of cyclic imports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">algebra.group.units</span>\n<span class=\"n\">data.fintype.basic</span>\n<span class=\"n\">group_theory.perm.basic</span>\n<span class=\"n\">algebra.group.pi</span>\n<span class=\"n\">algebra.group.hom_instances</span>\n<span class=\"n\">algebra.group_power.basic</span>\n<span class=\"n\">group_theory.group_action.defs</span>\n<span class=\"n\">algebra.group.hom</span>\n<span class=\"n\">algebra.group.commute</span>\n<span class=\"n\">algebra.group.semiconj</span>\n<span class=\"n\">algebra.group.units</span>\n</code></pre></div>\n<p>My current idea for fixing this is to change the <code>data.fintype.basic</code> import of <code>group_theory.perm.basic</code> to an import of <code>data.equiv.basic</code> - my intuition is that we shouldn't need to talk about groups to define a fintype. This import change seems to break the <code>section equiv</code> portion of the file, but potentially the lemmas in this section can be moved to either <code>data.equiv.basic</code> or to a new <code>data.fintype.perm</code> file and files that need these lemmas can be rerouted to the new file.</p>\n<p>Does this seem like a sound approach, or will it fall flat somehow?</p>\n<p>For context, I am doing this because I would like to try to prove the <a href=\"https://en.wikipedia.org/wiki/Lucas_primality_test\">Lucas theorem</a> and as a first step I want to prove <code>p.prime ↔ fintype.card (units (zmod p)) = (p-1)</code> so I can start to talk about the order of the multiplicative group mod p. If there's another approach someone sees I'd be interested to hear it.</p>",
        "id": 250039445,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629402414
    },
    {
        "content": "<p>Why would you import that <code>fintype</code> in that file? <code>algebra.group.units</code> is much more basic than <code>data.fintype</code>. Why do you think that one need not talk about groups to define a fintype?</p>",
        "id": 250039885,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629402608
    },
    {
        "content": "<p>A fintype is based on the fact that there is some finset of the type and a proof that every term of the type is in that finset. Finsets are based on multisets. The theory of multisets utilizes <code>canonically_ordered_add_monoid</code>, which I'm pretty sure is later in the hierarchy than groups.</p>",
        "id": 250040268,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629402804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20deal.20with.20cyclic.20import.20for.20group.2Eunits.20fintype.3F/near/250039885\">said</a>:</p>\n<blockquote>\n<p><code>algebra.group.units</code> is much more basic than <code>data.fintype</code>. Why do you think that one need not talk about groups to define a fintype?</p>\n</blockquote>\n<p>Well, I guess it's the case in lean that fintypes are based on finsets, which are based on multisets. This has always felt a little counterintuitive to me because in my conception of things, fintypes should be very basic indeed: It's just a type that is finite, how much more basic can you get? Maybe you could define fintypes using bijections to <code>fin n</code> or something.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20deal.20with.20cyclic.20import.20for.20group.2Eunits.20fintype.3F/near/250039885\">said</a>:</p>\n<blockquote>\n<p>Why would you import that <code>fintype</code> in that file? </p>\n</blockquote>\n<p>As I said, I want to prove that the <code>units</code> of a <code>fintype</code> are a <code>fintype</code>.  Anyway I realize now that this instance already exists in <code>data.fintype.basic</code>, so no need to change anything.</p>",
        "id": 250043570,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629404258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> has marked this topic as resolved.</p>",
        "id": 250043576,
        "sender_full_name": "Notification Bot",
        "timestamp": 1629404261
    },
    {
        "content": "<p>The <code>algebra.group.units -&gt; data.fintype.basic</code> import sounds unnecessary, but so does <code>data.fintype.basic -&gt; group_theory.perm.basic</code></p>",
        "id": 250043900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629404425
    },
    {
        "content": "<p>you should not need groups to define finsets, but I would also agree that finsets are more complicated than groups</p>",
        "id": 250043982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629404466
    },
    {
        "content": "<p>I don't understand why people keep saying \"finsets are more complicated than groups\". Which did you learn about first as an undergrad, finite sets, or groups?</p>",
        "id": 250044405,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629404679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> has marked this topic as unresolved.</p>",
        "id": 250044409,
        "sender_full_name": "Notification Bot",
        "timestamp": 1629404682
    },
    {
        "content": "<p>I think to claim that something is finite isn't so basic -- the claim that there are finite seeds that do not terminate in the collatz conjecture is very hard to prove.</p>",
        "id": 250044506,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629404742
    },
    {
        "content": "<p>You could just as easily say that to claim something is a group isn't basic: Consider the binary operation on {0,1} which is equal to the xor operator if the Collatz conjecture is true and the and operator if the Collatz conjecture is false. The claim that this binary operation is a group is hard to prove.</p>",
        "id": 250044852,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629404939
    },
    {
        "content": "<p>Constructing that group is hard. The same way constructing the finite set of seeds is hard. <code>fintype</code> is a construction of the finite terms that define the type.</p>",
        "id": 250045025,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629405025
    },
    {
        "content": "<p>Just because something is taught first doesn't mean it is more basic. Real numbers are taught in grade school but they are a lot more complicated than either finiteness or groups</p>",
        "id": 250045033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629405032
    },
    {
        "content": "<p>the definition of a group is very close to the axioms</p>",
        "id": 250045092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629405075
    },
    {
        "content": "<p>Btw, there's one direction of your first step here: <a href=\"https://leanprover-community.github.io/mathlib_docs/field_theory/finite/basic.html#zmod.card_units\">https://leanprover-community.github.io/mathlib_docs/field_theory/finite/basic.html#zmod.card_units</a></p>",
        "id": 250046198,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1629405711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20deal.20with.20cyclic.20import.20for.20group.2Eunits.20fintype.3F/near/250045092\">said</a>:</p>\n<blockquote>\n<p>the definition of a group is very close to the axioms</p>\n</blockquote>\n<p>This is a fair point. I guess I think about \"complexity\" in terms of a mixture of things, which includes questions like \"What is the size of the theory behind these objects?\" as well as \"How much Kolmogorov complexity does it take to define them?\" and \"How widespread is the use of this?\". Perhaps as someone with a CS focus I just use finite sets more.</p>\n<p>About the real numbers, I would say that while I might have learned about them in grade school, I never learned to construct them from more basic concepts until after I learned about groups or finite sets. So you are definitely right that they are more complex.</p>",
        "id": 250046381,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629405823
    },
    {
        "content": "<p>The main one of those that matters for mathlib is \"kolmogorov complexity\", or more accurately the size of the existing definition + dependents (not other definitions that might be shorter). Mathlib does not always use the shortest possible definition of every object ab initio, because there is often aggregate savings by defining things in terms of other defined things</p>",
        "id": 250047604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629406446
    },
    {
        "content": "<p>for \"What is the size of the theory behind these objects?\" , it's more like the theory \"ahead\" of the objects; this is more or less unbounded for any individual definition</p>",
        "id": 250047769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629406532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> it's because finset and fintype are constructive -- these constructive CS people have a totally different idea about what finiteness is</p>",
        "id": 250047781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629406537
    },
    {
        "content": "<p>You're totally right that you can do finite types without groups, you just use <code>set.finite (univ : set X)</code></p>",
        "id": 250047942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629406605
    },
    {
        "content": "<p>you can also define <code>set.finite</code> directly as an inductive type, which gets you a pretty short ab initio definition of finite type</p>",
        "id": 250048009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629406646
    },
    {
        "content": "<p>I am a strong advocate for mathematicians using nonconstructive finiteness so we can find out how to make it better</p>",
        "id": 250048114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629406693
    },
    {
        "content": "<p>But for removing spurious dependencies, the most effective method is to separate the theorems from the definition</p>",
        "id": 250048148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629406711
    },
    {
        "content": "<p>because there are lots of theorems that are \"topically\" related to finset or fintype that can involve almost any part of maths and you don't want that all in the <code>.basic</code> file</p>",
        "id": 250048224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629406752
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite\">docs#set.finite</a></p>",
        "id": 250048673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629406935
    },
    {
        "content": "<p>But wait, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite\">docs#set.finite</a> tells me that it is defined using fintype. So to define fintypes that way would be circular.</p>",
        "id": 250048873,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629407038
    },
    {
        "content": "<p>I have bad internet but if that def uses fintype then it might need groups</p>",
        "id": 250048927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629407046
    },
    {
        "content": "<p>fintype doesn't need groups</p>",
        "id": 250048974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629407073
    },
    {
        "content": "<p>it does need multisets / lists though</p>",
        "id": 250048985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629407080
    },
    {
        "content": "<p>and it might have a spurious dependency on groups due to the <code>.basic</code> issue I mentioned</p>",
        "id": 250049039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629407107
    },
    {
        "content": "<p>So we need <code>set.finite2</code> defined recursively in a separate file and then this is imported by set.finite where it's proved that this is the same as finite :-)</p>",
        "id": 250049066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629407120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20deal.20with.20cyclic.20import.20for.20group.2Eunits.20fintype.3F/near/250048974\">said</a>:</p>\n<blockquote>\n<p>fintype doesn't need groups</p>\n</blockquote>\n<p>Don't you? I think I see the problem now with defining finset in terms of a bijection with <code>fin n</code>. You still need to talk about permutations to tell if two finsets are equal in that case, so you still end up wanting to import group theory and you gain nothing.</p>",
        "id": 250049077,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629407126
    },
    {
        "content": "<p>This import thing is not the concern of mathematicians anyway. The people actually building the library know what they're doing.</p>",
        "id": 250049204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629407191
    },
    {
        "content": "<p>Here's a definition of <code>finite</code> that uses nothing at all other than basic logic and inductive types</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">is_finite</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">is_finite</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_finite</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">is_finite</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_finite</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 250049441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629407309
    },
    {
        "content": "<p>that's not good enough to define fintype though since we want that to be computable data</p>",
        "id": 250049522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629407349
    },
    {
        "content": "<p>Computable fintypes (and finsets) lets you do one of the most important things about finite things -- case bash. Telling the computer to prove something by checking every term of the thing.</p>",
        "id": 250049583,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629407389
    },
    {
        "content": "<p>You can define <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite\">docs#set.finite</a> much the same way as <code>is_finite</code> here, you just use sets instead of predicates</p>",
        "id": 250049595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629407394
    }
]