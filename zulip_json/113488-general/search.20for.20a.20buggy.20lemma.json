[
    {
        "content": "<p>I recently noticed that there was a lemma in mathlib about topological spaces which accidentally had two instances of <code>[topological space alpha]</code> in the assumptions. Nobody would ever notice this because in applications typeclass inference would just fill them both in with the same thing :-) I wrote down the name of the lemma in the Lean file I was working on, and then tidied it up later and now I've forgotten the name of the lemma.</p>\n<p>Still, it would be nice to find it! How can we find it using automation?</p>",
        "id": 164349021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556391689
    },
    {
        "content": "<p>Aah, I think I remember. It was the <code>is_closed_eq</code> that proves that the equalizer of two ctu functions into a t2 space is closed. (Sorry for not using automation.)</p>",
        "id": 164350120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556393204
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/a/11135/1384\" target=\"_blank\" title=\"https://mathoverflow.net/a/11135/1384\">https://mathoverflow.net/a/11135/1384</a></p>",
        "id": 164350345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556393617
    },
    {
        "content": "<p>This is such a cool example!</p>",
        "id": 164351728,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556396022
    },
    {
        "content": "<p>I think this is a cool enough problem that I'll try to get the linter to detect it</p>",
        "id": 164351856,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556396203
    },
    {
        "content": "<p>Spoilers: it's in topology/constructions.lean and it's</p>\n<div class=\"codehilite\"><pre><span></span>is_closed_eq : ∀ {α : Type u_1} {β : Type u_2} [_inst_1 : topological_space α] [_inst_2 : topological_space β] [_inst_4 : topological_space α] [_inst_5 : t2_space α] [_inst_6 : topological_space β] {f g : β → α}, continuous f → continuous g → is_closed {x : β | f x = g x}\n</pre></div>",
        "id": 164352000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556396433
    },
    {
        "content": "<p>Of course, there might be more...</p>",
        "id": 164352407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556397193
    }
]