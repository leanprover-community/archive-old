[
    {
        "content": "<p>Given an embedding <code>emb : α ↪ β</code>,  I am trying to use the natural correspondence between α and the subtype of  <code>β</code> induced by <code>set.range emb</code>. I am also in a context where I want to do this with the subtype coming from another set <code>E</code> that is propeq but not defeq to <code>set.range emb</code>. </p>\n<p>My first concern is  whether this is just plain unidiomatic; doing this seems to be 'fighting' mathlib in the sense that I can't see how to use it directly. My second is more specific: the following code is an attempt to convert a function defined on subsets of <code>α</code> to one on subsets of the range of <code>emb</code>; and I get a strange error. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"sd\">/-- Given an embedding from α to β and a set E equal to its range, gives an equivalence between α and the subtype of β corresponding to E -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">subtype_inv_inj</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">emb</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">){</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}(</span><span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">set.range</span> <span class=\"n\">emb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">emb</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hy</span><span class=\"o\">⟩,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hE</span><span class=\"o\">,</span> <span class=\"n\">set.mem_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">hy</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]⟩},</span>\n <span class=\"n\">desc</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>  <span class=\"bp\">//</span> <span class=\"n\">emb</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">classical.indefinite_description</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">desc</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">emb</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hE</span><span class=\"o\">,</span> <span class=\"n\">set.mem_range</span><span class=\"o\">],</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩}</span> <span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp_rw</span> <span class=\"o\">(</span><span class=\"n\">desc</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">emb</span> <span class=\"k\">with</span> <span class=\"n\">f</span> <span class=\"n\">h_inj</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h_inj</span> <span class=\"o\">(</span><span class=\"n\">desc</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">},</span>\n<span class=\"o\">}</span>\n\n<span class=\"sd\">/-- given a function f on the subsets of α, and an embedding f from α to β, returns the corresponding function on subsets of the range of the embedding  -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pullback_r</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">emb</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">emb</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">pb_emb</span> <span class=\"o\">:=</span> <span class=\"n\">subtype_inv_inj</span> <span class=\"n\">emb</span> <span class=\"n\">rfl</span> <span class=\"k\">in</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">pb_emb</span> <span class=\"bp\">''</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The second function gives the error message: <code>failed to generate bytecode for 'pullback_r'\ncode generation failed, VM does not have code for 'classical.indefinite_description'</code></p>\n<p>Any advice on either a more principled way to do this, or a way to fix this specific error, would be appreciated.</p>",
        "id": 224790196,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1612213322
    },
    {
        "content": "<p>The error is easy enough to fix: write <code>noncomputable def</code></p>",
        "id": 224790693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612213518
    },
    {
        "content": "<p>Do you know if <code>α β</code> are finite? Then you could in theory have a computable one</p>",
        "id": 224790759,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612213549
    },
    {
        "content": "<p>I've tried that with no success</p>",
        "id": 224790769,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1612213554
    },
    {
        "content": "<p><code>noncomputable def pullback_r</code> doesn't work?</p>",
        "id": 224790837,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612213572
    },
    {
        "content": "<p>that's right</p>",
        "id": 224790845,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1612213579
    },
    {
        "content": "<p>I do happen to know they're finite, but suppose I didnt? I don't have a constructivist bone in my body and would rather not do extra work to make things constructive.</p>",
        "id": 224790936,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1612213625
    },
    {
        "content": "<p>My relevant PRs on this are <a href=\"https://github.com/leanprover-community/mathlib/issues/5872\">#5872</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/5875\">#5875</a></p>",
        "id": 224791237,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612213747
    },
    {
        "content": "<p>I got it working with <code>noncomputable def subtype_inv_inj</code> and <code>theorem pullback_r</code></p>",
        "id": 224791260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612213756
    },
    {
        "content": "<p>Thanks - do you mind explaining your thought process? It feels odd to put <code>theorem</code> in front of a function definition.</p>",
        "id": 224791428,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1612213826
    },
    {
        "content": "<p>It has to do with the way lean interprets the keywords <code>def</code> vs <code>theorem</code>; specifically the latter does not get codegen</p>",
        "id": 224791531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612213874
    },
    {
        "content": "<p>this can cause a problem for downstream definitions, which is why we have the rule that data should be <code>def</code></p>",
        "id": 224791578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612213904
    },
    {
        "content": "<p>but <code>classical.indefinite_description</code> is a <code>theorem</code></p>",
        "id": 224791615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612213917
    },
    {
        "content": "<p>and that causes the error you are seeing</p>",
        "id": 224791677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612213928
    },
    {
        "content": "<p>I'm not saying this is a proper solution to the problem, indeed I think it will cause problems for the next definition using <code>pullback_r</code></p>",
        "id": 224791973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612214063
    },
    {
        "content": "<p>Oh, inlining the let works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">pullback_r</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">emb</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">emb</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">subtype_inv_inj</span> <span class=\"n\">emb</span> <span class=\"n\">rfl</span> <span class=\"bp\">''</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 224792111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612214134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/embeddings.20and.20subtypes/near/224792111\">said</a>:</p>\n<blockquote>\n<p>Oh, inlining the let works</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">pullback_r</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">emb</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">emb</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">subtype_inv_inj</span> <span class=\"n\">emb</span> <span class=\"n\">rfl</span> <span class=\"bp\">''</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Well, I never would have guessed that!</p>",
        "id": 224792258,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1612214192
    },
    {
        "content": "<p>It's because <code>subtype_inv_inj emb rfl '' X</code> is computationally irrelevant. In fact it's probably not even noncomputable</p>",
        "id": 224792329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612214235
    },
    {
        "content": "<p>yep, <code>noncomputable def subtype_inv_inj</code> and <code>def pullback_r</code> works, even without the <code>noncomputable theory</code> at the top</p>",
        "id": 224792379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612214271
    },
    {
        "content": "<p>But when you hoist the subtype function to the top level, it means that it has to be evaluated. I suspect that the reason for the weird error is because it is not inlined for the noncomputable check but inlined later and lean gets confused about whether it's computable or not</p>",
        "id": 224792541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612214344
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 224796865,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1612216436
    },
    {
        "content": "<p>BTW, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.set.range\">docs#equiv.set.range</a> together with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.set.of_eq\">docs#equiv.set.of_eq</a> to get the desired <code>equiv</code>.</p>",
        "id": 224825441,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612237515
    },
    {
        "content": "<p>Something like <code>(equiv.set.range emb emb.injective).trans (equiv.set.of_eq hE)</code></p>",
        "id": 224825513,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612237585
    }
]