[
    {
        "content": "<p>As an experiment, I tried to change <code>direct_sum</code> to relax the restriction on its component elements to be <code>add_comm_monoid</code> instead of <code>add_group</code>. This is sufficient for many parts of the file, but I was wondering how to prevent existing code from breaking with the change.</p>\n<p>My hope was that as part of such a change, I could replace:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">dfinsupp</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span>\n</code></pre></div>\n\n\n<p>with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">dfinsupp</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span>\n\n<span class=\"c1\">-- if we also know that β i has negation, then the direct sum does too</span>\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">dfinsupp</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span>\n</code></pre></div>\n\n\n<p>Unfortunately, the second instance complains that the type is not correct.</p>\n<p>My questions then are:</p>\n<ul>\n<li>Is the idea behind this generalization sound?</li>\n<li>Whether it is or not, what would be the general approach for relaxing the restrictions of a type without breaking consumers that rely on those restrictions?</li>\n</ul>",
        "id": 204448705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595264972
    },
    {
        "content": "<p>There should be no issues making arguments to functions more general, since any consumers must declare these arguments themselves (unless they share a <code>variables</code> statement with your definition.)</p>\n<p>I suspect that the <code>add_comm_group</code> instance you want to define is giving an error because <code>direct_sum \\iota \\beta</code> uses an <code>add_comm_monoid</code> instance, not the <code>add_comm_group</code> instance.</p>",
        "id": 204476811,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595279528
    },
    {
        "content": "<p>Indeed, if we <code>set_option pp.all</code> to look at the error, we get:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">ι</span><span class=\"o\">,</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>We see  <code>_inst_2</code> in the goal, but it should be something along the lines of <code>add_comm_group.to_add_comm_monoid _inst_3</code>.</p>",
        "id": 204477036,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595279678
    },
    {
        "content": "<p>If we mix <code>add_comm_monoid</code> and <code>add_comm_group</code> instances a lot in the same file, a nice solution is to define two families <code>M G : \\iota -&gt; Type w</code> (at the same time getting rid of that random Greek letter!). If we put instances on different variables, <code>[Π i, add_comm_monoid (M i)] [Π i, add_comm_group (G i)]</code>, then we can choose per declaration which assumptions we need.</p>",
        "id": 204477541,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595279915
    },
    {
        "content": "<p>I'll give that a go, thanks</p>",
        "id": 204478739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595280606
    },
    {
        "content": "<p>That worked, thanks!</p>",
        "id": 204526431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595322798
    },
    {
        "content": "<p>Made a PR at <a href=\"https://github.com/leanprover-community/mathlib/pull/3487\">https://github.com/leanprover-community/mathlib/pull/3487</a>, would appreciate some help with some other similar issues there.</p>",
        "id": 204526448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595322811
    }
]