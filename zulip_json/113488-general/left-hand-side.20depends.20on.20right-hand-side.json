[
    {
        "content": "<p>Can anyone explain what \"cases tactic failed, when eliminating equality left-hand-side depends on right-hand-side\" means?</p>",
        "id": 210950898,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600824938
    },
    {
        "content": "<p>I'd provide an example but it's deep in some complex stuff, and I don't understand it well enough to produce a more minimal example</p>",
        "id": 210950972,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600824998
    },
    {
        "content": "<p>Here is a minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n\n<p><code>cases h</code> can be used on equalities when either the left-hand side or the right-hand side is a variable in the local context. If you do that, the variable is removed from the context and every occurrence of it is replaced by the other side of the equality. Now in the second example above, the variable <code>n</code> also occurs on the left-hand side of the equality, so after you replace all <code>n</code> by <code>n + m</code> you still cannot remove <code>n</code> from the context. If that happens, the tactic raises an error. So the problem is that the left-hand side contains the variable you want to remove.</p>",
        "id": 210951441,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600825609
    },
    {
        "content": "<p>Note: sometimes doing <code>dsimp</code> before <code>cases</code> simplifies the equality so that the variable doesn't occur in the left hand side anymore.</p>",
        "id": 210951456,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600825633
    },
    {
        "content": "<p>The thing is that there aren't any equalities in my context</p>",
        "id": 210951528,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600825693
    },
    {
        "content": "<p>I'm trying to do <code>cases</code> on a variable of a dependent type, so maybe there's like, hidden implicit equalities</p>",
        "id": 210951547,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600825727
    },
    {
        "content": "<p>What tactic did you execute to get this error? If you did <code>cases</code> what is the type of the variable you cased on?</p>",
        "id": 210951565,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600825769
    },
    {
        "content": "<p>Is it an inductive type? An inductive family of types? Are all indices variables? If so, you can try <code>induction</code> instead.<br>\n(If you don't know what this means, the question is probably \"no\")</p>",
        "id": 210951639,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600825851
    },
    {
        "content": "<p>aight, here's my code in all it's newbtacular glory: <a href=\"https://pastebin.com/jjMR45t8\">https://pastebin.com/jjMR45t8</a></p>",
        "id": 210951660,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600825887
    },
    {
        "content": "<p>I'm modeling reduction rules over a kind of primitive recursive functions</p>",
        "id": 210951683,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600825918
    },
    {
        "content": "<p>Line 55 is the source of the error. Bizzarely, vscode isn't letting me copy-paste the error itself</p>",
        "id": 210951731,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600825948
    },
    {
        "content": "<p>I think the problem is that you have an inductive family of types with 2 explicit indices, and that the variable <code>f_g</code> occurs in both of them.</p>",
        "id": 210951751,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600825992
    },
    {
        "content": "<p>huh, okay. Moving the subst that set the two to be equal into the specific case where I'm using it has at least made the error go away.</p>",
        "id": 210951857,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600826135
    },
    {
        "content": "<p>If you replace the offending tactic with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>            <span class=\"n\">generalize</span> <span class=\"n\">eq1</span> <span class=\"o\">:</span> <span class=\"n\">f_f.comp</span> <span class=\"n\">f_g</span> <span class=\"bp\">=</span> <span class=\"n\">c1</span><span class=\"o\">,</span>\n            <span class=\"n\">generalize</span> <span class=\"n\">eq2</span> <span class=\"o\">:</span> <span class=\"n\">g_f.comp</span> <span class=\"n\">f_g</span> <span class=\"bp\">=</span> <span class=\"n\">c2</span><span class=\"o\">,</span>\n            <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n            <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n            <span class=\"n\">subst</span> <span class=\"n\">eq2</span><span class=\"o\">,</span>\n</code></pre></div>\n\n<p>You see that you cannot now substitute <code>eq1</code> away, since neither side is a variable. This is roughly what <code>cases</code> is doing under the hood.</p>",
        "id": 210951860,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600826142
    },
    {
        "content": "<p>Sorry, replace <code>intro h2, cases h2</code> with the above snippet.</p>",
        "id": 210951909,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600826170
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">step_decidable</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">),</span>\n    <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">comp</span> <span class=\"o\">{</span>\n        <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">case</span> <span class=\"n\">comp</span> <span class=\"o\">{</span>\n            <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">f_tint</span> <span class=\"bp\">=</span> <span class=\"n\">g_tint</span><span class=\"o\">),</span>\n            <span class=\"n\">focus</span> <span class=\"o\">{</span>\n                <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">f_g</span> <span class=\"bp\">=</span> <span class=\"n\">g_g</span><span class=\"o\">),</span>\n                <span class=\"n\">focus</span> <span class=\"o\">{</span>\n                    <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                    <span class=\"n\">cases</span> <span class=\"n\">f_ih_f</span> <span class=\"n\">g_f</span><span class=\"o\">,</span>\n                    <span class=\"n\">case</span> <span class=\"n\">is_true</span> <span class=\"o\">{</span>\n                        <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">is_true</span><span class=\"o\">),</span>\n                        <span class=\"n\">constructor</span><span class=\"o\">,</span>\n                        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n                        <span class=\"n\">done</span>\n                    <span class=\"o\">},</span>\n                <span class=\"o\">},</span>\n            <span class=\"o\">},</span>\n            <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">is_false</span><span class=\"o\">),</span>\n            <span class=\"n\">generalize</span> <span class=\"n\">eq1</span> <span class=\"o\">:</span> <span class=\"n\">f_f.comp</span> <span class=\"n\">f_g</span> <span class=\"bp\">=</span> <span class=\"n\">c1</span><span class=\"o\">,</span>\n            <span class=\"n\">generalize</span> <span class=\"n\">eq2</span> <span class=\"o\">:</span> <span class=\"n\">g_f.comp</span> <span class=\"n\">f_g</span> <span class=\"bp\">=</span> <span class=\"n\">c2</span><span class=\"o\">,</span>\n            <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n            <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n            <span class=\"n\">subst</span> <span class=\"n\">eq2</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 210951918,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600826183
    },
    {
        "content": "<p>incidentally, when I have a goal which is effectively &lt;empty type&gt; -&gt; false, is there a less verbose way of solving that than to introduce and do cases on the empty type?</p>",
        "id": 210951939,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600826230
    },
    {
        "content": "<p>If the empty type is sufficiently simple you can do <code>rintro ⟨⟩</code></p>",
        "id": 210952042,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600826374
    },
    {
        "content": "<p>hmm, do I need to import something to use that?</p>",
        "id": 210952116,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600826409
    },
    {
        "content": "<p><code>rintro</code> is a nice tactic to introduce variables and immediately case on them. You need to <code>import tactic.basic</code> for it.</p>",
        "id": 210952118,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600826417
    },
    {
        "content": "<p>(and have mathlib)</p>",
        "id": 210952121,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600826422
    },
    {
        "content": "<p>I'll look into that</p>",
        "id": 210952147,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600826464
    },
    {
        "content": "<p>actually, I have a more general question here... the constructors of <code>step</code> have two forms: ones where they literally spell out the shape of the type parameters, and ones where they essentially require congruence mod <code>step</code> (e.g., comp_f)</p>",
        "id": 210952303,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600826641
    },
    {
        "content": "<p>I'm trying to show it's decidable. The algorithm is essentially, \"find a constructor that matches the value. If that constructor requires analogous parts of the parallel structure to be related by <code>step</code>, call it recursively\"</p>",
        "id": 210952385,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600826711
    },
    {
        "content": "<p>and the tactics I'm writing seem... excessive for the simplicity of that algorithm</p>",
        "id": 210952401,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600826746
    },
    {
        "content": "<p>(oh: and of course, if there's no constructor that matches, demonstrate that in <code>is_false</code>)</p>",
        "id": 210952452,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600826784
    },
    {
        "content": "<p>Is there a better way than doing this kind of case analysis on the arguments to the relation? Is there some way of going more from the constructors of <code>step</code> to say, \"whatever this value is, if I can unify it with one of the constructors, then yes, the type is inhabited\"?</p>",
        "id": 210952555,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600826908
    },
    {
        "content": "<p>Probably you can pretty easily write a tactic that deals with all the easy cases for you (and with more effort a tactic that proves the decidability itself). AFAIK we don't have a tactic that does this off-the-shelf.</p>",
        "id": 210952711,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600827096
    },
    {
        "content": "<p>For example, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">step_decidable</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">),</span>\n    <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>gives 40 goals, and this solves 32 of them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">step_decidable</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">),</span>\n    <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩,</span> <span class=\"n\">done</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">done</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 210952913,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600827330
    },
    {
        "content": "<p>(if you don't have mathlib, you can replace the <code>rintro</code> by <code>intro h, cases h</code>)</p>",
        "id": 210952981,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600827387
    },
    {
        "content": "<p>nice! I had something like this, but that's nicer</p>",
        "id": 210953025,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600827479
    },
    {
        "content": "<p>I'm still really struggling with this. I'm trying to prove that the \"step\" relation is antireflexive, but any time I try to work with \\not (step f f) [i.e., try to do induction on it], I get this error</p>",
        "id": 211205553,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600992992
    },
    {
        "content": "<p>Here's my code: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">car</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cdr</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">),</span> <span class=\"n\">val</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">val</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">val.nil</span> <span class=\"n\">val.nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">val.nat</span> <span class=\"n\">val.nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">car</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">},</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">)</span> <span class=\"n\">tcar</span>\n<span class=\"bp\">|</span> <span class=\"n\">cdr</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">},</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">)</span> <span class=\"n\">tcdr</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">},</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">val.nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">car</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tcar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cdr</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tcdr</span><span class=\"o\">),</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tint</span> <span class=\"n\">tout</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tint</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tint</span><span class=\"o\">),</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span>\n<span class=\"bp\">|</span> <span class=\"n\">prec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">trest</span> <span class=\"n\">tout</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z_case</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">trest</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s_case</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">val.nat</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tout</span> <span class=\"n\">trest</span><span class=\"o\">))</span> <span class=\"n\">tout</span><span class=\"o\">),</span>\n    <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">val.nat</span> <span class=\"n\">trest</span><span class=\"o\">)</span> <span class=\"n\">tout</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">proj_car</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">car</span><span class=\"o\">:</span><span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tcar</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">cdr</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tcdr</span><span class=\"o\">},</span>\n    <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">fn.comp</span> <span class=\"n\">fn.car</span> <span class=\"o\">(</span><span class=\"n\">fn.cons</span> <span class=\"n\">car</span> <span class=\"n\">cdr</span><span class=\"o\">))</span> <span class=\"n\">car</span>\n<span class=\"bp\">|</span> <span class=\"n\">proj_cdr</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">car</span><span class=\"o\">:</span><span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tcar</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">cdr</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tcdr</span><span class=\"o\">},</span>\n    <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">fn.comp</span> <span class=\"n\">fn.cdr</span> <span class=\"o\">(</span><span class=\"n\">fn.cons</span> <span class=\"n\">car</span> <span class=\"n\">cdr</span><span class=\"o\">))</span> <span class=\"n\">cdr</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp_f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tint</span> <span class=\"n\">tout</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f1</span> <span class=\"n\">f2</span><span class=\"o\">:</span><span class=\"n\">fn</span> <span class=\"n\">tint</span> <span class=\"n\">tout</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tint</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span><span class=\"o\">),</span>\n    <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">fn.comp</span> <span class=\"n\">f1</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fn.comp</span> <span class=\"n\">f2</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">step_antireflex</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span><span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 211205647,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600993084
    },
    {
        "content": "<p>A specific example: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">step_antireflex</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211205813,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600993238
    },
    {
        "content": "<p>... gives \"induction tactic failed, argument <a href=\"https://github.com/leanprover-community/mathlib/issues/3\">#3</a> of major premise type step f f is an index, but it occurs more than once\"</p>",
        "id": 211205836,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600993277
    },
    {
        "content": "<p>In order to do induction, you have to first generalize the indices so that they are distinct, with separate constraints</p>",
        "id": 211207668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600995407
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">step_antireflex</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">step</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">fn.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fn.sizeof</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">sizeof</span> <span class=\"bp\">=</span> <span class=\"n\">fn.sizeof</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h_ih</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211207977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600995740
    }
]