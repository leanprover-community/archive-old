[
    {
        "content": "<p>I want to add this statement just below <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zorn.chain.mono/src\">src#zorn.chain.mono</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">chain.symm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">chain</span> <span class=\"n\">q</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">chain</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.mono'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">or.symm</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I know how to prove it, but right now I'm not able to state it properly; lean is not letting me pass the <code>q</code> argument to <code>chain</code>, even if I use <code>@</code>.</p>\n<p>I know this is due to the <code>parameters</code> statement in this file; is there any way to override it for the scope of one lemma?</p>",
        "id": 236056832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619348189
    },
    {
        "content": "<p>I think <code>by exact</code> is a way to get around parameters, since parameters don't work in tactics</p>",
        "id": 236057312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619348707
    },
    {
        "content": "<p>Yes, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">chain.symm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">chain</span> <span class=\"n\">q</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">chain</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.mono'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">or.symm</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 236057404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619348779
    },
    {
        "content": "<p>But perhaps I should just wait till the <code>parameter</code>-poisoned section is closed, and then add the definition after it</p>",
        "id": 236057429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619348807
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, since this came up when reviewing your PR, <a href=\"https://github.com/leanprover-community/mathlib/issues/7362\">#7362</a></p>",
        "id": 236057755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619349188
    },
    {
        "content": "<p>What exactly are parameters doing? Can't we either get rid of them or cancel them at some point (without closing the section, I mean)?</p>",
        "id": 236057931,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1619349390
    },
    {
        "content": "<p>it's like <code>variables</code> but it lets it be fixed over the whole section</p>",
        "id": 236057946,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619349424
    },
    {
        "content": "<p>Isn't <code>variables</code> section-wide too?</p>",
        "id": 236057963,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1619349451
    },
    {
        "content": "<p>yes, but it's not fixed; say you have some type <code>variables (α : Type*)</code>, and you have <code>test_def := f α</code>, then you can use <code>test_def (α ⊕ α)</code> somewhere else in the section, whilst that would error with <code>parameters</code></p>",
        "id": 236058040,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619349535
    }
]