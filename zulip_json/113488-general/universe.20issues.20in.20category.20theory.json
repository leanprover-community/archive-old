[
    {
        "content": "<p>How hard would it be to fix the Lean fork so that it becomes better at figuring out universes? I got the impression that we have to remind Lean about universes in category theory, a lot more than strictly necessary, just because Lean was being a bit lazy...</p>",
        "id": 190043280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583733499
    },
    {
        "content": "<p>do you have a concrete example?</p>",
        "id": 190043497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583733925
    },
    {
        "content": "<p>Just a random example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">full_subcategory</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">//</span> <span class=\"n\">Z</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>If Lean figures out the category instance for <code>C</code>, then it knows which 2 universe variables are in play. And so it should be able to figure out the <code>v</code> by itself.</p>",
        "id": 190044612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583736204
    },
    {
        "content": "<p>There might be other, better examples.</p>",
        "id": 190044615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583736215
    },
    {
        "content": "<p>One remedy to this situation would be to make <code>category</code> fully bundled. Then,  the type of your category would dictate the universe in which the arrows are.</p>",
        "id": 190044723,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583736364
    },
    {
        "content": "<p>I think it would be a design worth exploring if someone has the time to try it out</p>",
        "id": 190044851,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583736654
    },
    {
        "content": "<p>That already exists, it's called <code>small_category</code></p>",
        "id": 190052733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583747115
    },
    {
        "content": "<p>but the problem is that while <code>small_category</code> and <code>large_category</code> both fix the homset universe level, they fix it to different things, and <code>category.{v}</code> is the generalization</p>",
        "id": 190052757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583747162
    },
    {
        "content": "<p>I think this amounts to saying that <code>v</code> is an out_param on the category typeclass instance</p>",
        "id": 190052814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583747201
    },
    {
        "content": "<p>which is not a thing we can annotate</p>",
        "id": 190052819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583747209
    },
    {
        "content": "<p>That is not what I'm talking about.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">structure</span> <span class=\"n\">category</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"c1\">-- etc</span>\n</pre></div>\n\n\n<p>Then, we fix the universes at the time of definition of the category or the declaration of the category variable</p>",
        "id": 190053094,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583747492
    },
    {
        "content": "<p>that will make the problem worse</p>",
        "id": 190053193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583747576
    },
    {
        "content": "<p>you will have <code>category.{u v}</code> now</p>",
        "id": 190053203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583747584
    },
    {
        "content": "<p>the only reason <code>u</code> can be inferred is because <code>C</code> is a parameter</p>",
        "id": 190053213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583747603
    },
    {
        "content": "<p>Already, we define <code>variable (C : Type u) [category.{v} C]</code> so both universes are already specified explicitly. What I'm proposing is <code>variable (C : category.{u v})</code> and then never have to specify universes again as far as <code>C</code> is concerned</p>",
        "id": 190053330,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583747708
    },
    {
        "content": "<p>it will certainly not eliminate the universe annotations in Johan's example</p>",
        "id": 190053336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583747712
    },
    {
        "content": "<p>If <code>C</code> is a category, it certainly will</p>",
        "id": 190053414,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583747769
    },
    {
        "content": "<p>I think you don't actually need to specify either currently. You can write <code>variable (C : Type*) [category C]</code> and it will mean the same thing, just with generated names. The actual reason universe names appear there is because they need to be referred to later</p>",
        "id": 190053426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583747790
    },
    {
        "content": "<p>(This is also the standard practice in the rest of mathlib, to avoid naming universes unless they need to be referred to by name later)</p>",
        "id": 190053544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583747915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/universe.20issues.20in.20category.20theory/near/190053426\" title=\"#narrow/stream/113488-general/topic/universe.20issues.20in.20category.20theory/near/190053426\">said</a>:</p>\n<blockquote>\n<p>I think you don't actually need to specify either currently. You can write <code>variable (C : Type*) [category C]</code> and it will mean the same thing, just with generated names. The actual reason universe names appear there is because they need to be referred to later</p>\n</blockquote>\n<p>You should have a look at <code>category_theory</code></p>",
        "id": 190053669,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583748016
    },
    {
        "content": "<p>Here is the standard practice:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>Every category has two names and universe names are a handful</p>",
        "id": 190053766,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583748091
    },
    {
        "content": "<p>I'm aware. Those names are there because they need to be, but the reasons for that need are not on the <code>variables</code> line</p>",
        "id": 190053819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583748119
    },
    {
        "content": "<p>The name on the instance itself is also peculiar, that isn't done anywhere else and you can be sure it's being done for a reason</p>",
        "id": 190053895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583748154
    },
    {
        "content": "<p>Yes and having a bundled model alleviates that need</p>",
        "id": 190053939,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583748187
    },
    {
        "content": "<p>I think it would be best to stick to Johan's original question</p>",
        "id": 190053974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583748206
    },
    {
        "content": "<p>I don't think the bundled model would solve any universe problems, and they would be problematic for completely different reasons</p>",
        "id": 190054063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583748280
    },
    {
        "content": "<p>but taking for granted that categories are represented the way they are, is there anything we can do to eliminate the need to refer to universe names?</p>",
        "id": 190054104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583748338
    },
    {
        "content": "<p>I disagree. The bundling does have an effect on universe inference and I think changing the design of the library is a smaller project than playing with the way the elaborator handles universes</p>",
        "id": 190054251,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583748438
    },
    {
        "content": "<p>perhaps, but the present design already came about as a result of considering what worked best with lean 3 as it existed at the time. Yes, we considered fully bundled, half bundled, and unbundled options, and this was a point of discussion when category theory first entered mathlib, migrated from Scott's repository</p>",
        "id": 190054361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583748534
    },
    {
        "content": "<p>This question is challenging the premise of that earlier decision - what if we could change lean, could we find something better?</p>",
        "id": 190054381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583748571
    },
    {
        "content": "<p>What's your suggestion?</p>",
        "id": 190055142,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583749226
    },
    {
        "content": "<p>FIgure out what the technical issues are that are currently preventing us from banishing universe annotations in the category theory library, and see if there is another way to solve them using hypothetical elaboration hints</p>",
        "id": 190055174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583749287
    },
    {
        "content": "<p>I identified one above - <code>category.{u v} C</code> apparently treats <code>v</code> as an output parameter, and while this is a perfectly meaningful statement lean's method of annotating out_params involves sticking identity functions on the parameter, which doesn't work for universes</p>",
        "id": 190055320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583749432
    },
    {
        "content": "<p>One way I can imagine conveying this info by alternate means is by an annotation, i.e. <code>@[out_param v]</code></p>",
        "id": 190055404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583749478
    },
    {
        "content": "<p>I'm not sold. It looks like a weird feature to me</p>",
        "id": 190056867,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583750703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/universe.20issues.20in.20category.20theory/near/190053895\" title=\"#narrow/stream/113488-general/topic/universe.20issues.20in.20category.20theory/near/190053895\">said</a>:</p>\n<blockquote>\n<p>The name on the instance itself is also peculiar, that isn't done anywhere else and you can be sure it's being done for a reason</p>\n</blockquote>\n<p>I think it's because the universe issue stops the <code>category C</code> term being inferred by type class inference sometimes, so you have to explicitly <code>include</code> it, which means having a sensible name for it.</p>",
        "id": 190057247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583751028
    },
    {
        "content": "<p>So it sounds like this is also caused by the fact that lean doesn't get that <code>v</code> is an out param</p>",
        "id": 190057315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583751073
    },
    {
        "content": "<p>so if this hypothesis is correct, the fix is to put <code>@[out_param v]</code> on <code>class category</code>, patch lean, and then all of that stuff goes away and you can just write <code>(C : Type*) [category C]</code></p>",
        "id": 190057449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583751176
    },
    {
        "content": "<p>What exactly does a universe <code>out_param</code> mean? Unlike expr mvars, universe mvars do not block typeclass search and can be instantiated by it by default.</p>",
        "id": 190059571,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583753097
    },
    {
        "content": "<p>Another issue is that we have to write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">xyzzy</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">xyzzy</span>\n</pre></div>\n\n\n<p>Why that include statement? Lean shouldn't need it.</p>",
        "id": 190059572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583753098
    },
    {
        "content": "<p>the include statement is because unnamed parameters are included when the types they refer to are needed (by default), while named parameters are only included when referred to, like other variables</p>",
        "id": 190059665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583753195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I meant \"Why do I need to name the parameter and include it?\"</p>",
        "id": 190059776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583753331
    },
    {
        "content": "<p>Because if I make it unnamed, then the library breaks.</p>",
        "id": 190059786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583753343
    },
    {
        "content": "<p>And the reason has to do with Leans limited handling of universe parameters.</p>",
        "id": 190059794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583753365
    },
    {
        "content": "<p>I'm saying that <em>if</em> you name the parameter, you are also likely to have to include it. So it comes back to why you have to name it</p>",
        "id": 190059867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583753418
    },
    {
        "content": "<p>Lean sees a statement using <code>C</code>, and decides not to include the instance <code>[category.{v} C]</code> because it depends on the universe <code>v</code>, and <code>v</code> is not determined by <code>C</code>.</p>",
        "id": 190059870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583753421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/universe.20issues.20in.20category.20theory/near/190059867\" title=\"#narrow/stream/113488-general/topic/universe.20issues.20in.20category.20theory/near/190059867\">said</a>:</p>\n<blockquote>\n<p>I'm saying that <em>if</em> you name the parameter, you are also likely to have to include it. So it comes back to why you have to name it</p>\n</blockquote>\n<p>Ok, my answer that would have been: \"You have to name it so that you can include it....\"</p>",
        "id": 190059884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583753447
    },
    {
        "content": "<p>There are three levels of include here:</p>\n<ul>\n<li>Unnamed parameter, e.g. <code>variable [foo A]</code>. This is included if A is included (plus some universe stuff apparently)</li>\n<li>Included parameter, e.g. <code>variable (x : A) include x</code>. This is always included</li>\n<li>Not included variable, e.g. <code>variable (x : A)</code> or <code>variable [inst: foo A]</code>. This is only included if the name <code>x</code> resp. <code>inst</code> is used in the theorem statement</li>\n</ul>\n<p>Because instances are almost never referred to by name, the third option is usually not good enough, so while the first is preferred, the second is the fallback.</p>",
        "id": 190060080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583753650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/universe.20issues.20in.20category.20theory/near/190059870\" title=\"#narrow/stream/113488-general/topic/universe.20issues.20in.20category.20theory/near/190059870\">said</a>:</p>\n<blockquote>\n<p>Lean sees a statement using <code>C</code>, and decides not to include the instance <code>[category.{v} C]</code> because it depends on the universe <code>v</code>, and <code>v</code> is not determined by <code>C</code>.</p>\n</blockquote>\n<p>It shouldn't be that. Lean only looks at expr variables/parameters when deciding what to include.</p>",
        "id": 190060140,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583753749
    },
    {
        "content": "<p>Crazy, I thought that's what was determined a long time ago. But now I can't reproduce.</p>",
        "id": 190060348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583753946
    },
    {
        "content": "<p>Here's a problem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">C</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>kernel failed to type check declaration &#39;bar&#39; this is usually due to a buggy tactic or a bug in the builtin elaborator\nelaborated type:\n  Œ† (C : Type u) [_inst_1 : foo C], Type u\nelaborated value:\n  Œª (C : Type u) [_inst_1 : foo C], C\nnested exception message:\ninvalid reference to undefined universe level parameter &#39;u_1&#39;\n</pre></div>",
        "id": 190060413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583754032
    },
    {
        "content": "<p>I think it pulled in <code>_inst_1 : foo.{u u_1} C</code> but forgot to also pull in <code>u_1</code></p>",
        "id": 190060424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583754070
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n\n<span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 190060483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583754142
    },
    {
        "content": "<p>Right, I <em>can</em> reproduce, it's just that the error doesn't show if you replace <code>ùüô x</code> with an underscore</p>",
        "id": 190060499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583754169
    },
    {
        "content": "<p>So you really have to finish the code to see the problem.</p>",
        "id": 190060505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583754181
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> is right. It does pull in the category instance. So maybe Mario's hypothesis is better.</p>",
        "id": 190060521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583754215
    },
    {
        "content": "<p>Yeah, <code>collect_univ_params_ignoring_tactics</code> is called on everything  - except for anonymous instances... <a href=\"https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/src/frontends/lean/decl_util.cpp#L256\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/src/frontends/lean/decl_util.cpp#L256\">https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/src/frontends/lean/decl_util.cpp#L256</a></p>",
        "id": 190060685,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583754387
    },
    {
        "content": "<p>Ok, I would like to have that as a feature request for Lean 3.7.1 (-;</p>",
        "id": 190060709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583754436
    },
    {
        "content": "<p>that's a bugfix, not a feature request</p>",
        "id": 190060893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583754610
    },
    {
        "content": "<p>and I don't see any reason not to slip it into the next release if we know what the fix is</p>",
        "id": 190060936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583754688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> So what about the <code>out_param</code>? What does it do?</p>",
        "id": 190060991,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583754743
    },
    {
        "content": "<p>if your description is correct, then everything is an out param already and my hypothesis was wrong</p>",
        "id": 190061011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583754778
    },
    {
        "content": "<p>Ok</p>",
        "id": 190061021,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583754790
    },
    {
        "content": "<p>I think this bug is the more likely culprit now</p>",
        "id": 190061041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583754811
    },
    {
        "content": "<ul>\n<li>the <code>include xyzzy</code> business is certainly due to a bug, which we could now fix in Lean 3</li>\n<li>re <code>out_param</code>: In Lean 3 universe metavariables don't get assigned by an otherwise matching instance. That is if I search for <code>category.{?l_1 u} C</code> and there is an instance <code>CI : category.{v u} C</code> available, it won't be used (and set <code>?l_1</code> to <code>v</code>). In Lean 4 it apparently will. Philosophically I tend to think the Lean 3 behavior is the \"correct\" one, but certainly the Lean 4 behavior is more convenient in this case. (Actually the Lean 3 behavior is more complicated--there are two kinds of (universe?) metavariables and they behave differently here. If the other kind wasn't assigned by instances matching, then category theory would require many more explicit universes. I don't remember the details though.)</li>\n<li>I agree with Simon that bundled categories are underexplored, and might ameliorate these issues, at least in Lean 3. I think they are unbundled mainly because other algebraic structures are unbundled. Maybe <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> knows the history better. Naturally there might be other issues with bundled categories--it would be very tempting to coerce a bundled category to its type of objects for example, and perhaps it wouldn't play nicely with Lean 3's coercion issues.</li>\n</ul>",
        "id": 190067908,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583760498
    },
    {
        "content": "<p>I think that both behaviors are \"correct\", but reflect the difference between input and output parameters. They both have their place, but I'm inclined to think that universe variables that are not already determined by typechecking later arguments should usually be treated as out parameters. It would be very strange to have instances of both <code>foo.{u 1} X</code> and <code>foo.{u 2} X</code>  and rely on the input universe to figure out which one to use. I rather think that the uniqueness rule should apply even if you strip all universe checks</p>",
        "id": 190068476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583760818
    },
    {
        "content": "<p>Yeah, I agree that ideally you'd have <code>out_param</code> for universes too. I'm used to a setting where everything is \"<code>in_param</code>\" by default; let me try to understand your suggestion</p>",
        "id": 190068707,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583760951
    },
    {
        "content": "<p>We're still marking <code>out_param</code>s at the level of classes, not the level of instances, right?</p>",
        "id": 190068869,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583761040
    },
    {
        "content": "<p>yes</p>",
        "id": 190068888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583761059
    },
    {
        "content": "<p>so generally I have <code>class {v u} category : Type u -&gt; Type (max u (v+1))</code> or whatever--is the idea to treat universe parameters which don't appear outside the final result type as <code>out_param</code> by default?<br>\nDoes it matter syntactically whether I put parameters to the left of the <code>:</code>?</p>",
        "id": 190069101,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583761184
    },
    {
        "content": "<p>I could mark pretty much any top-level declaration as a <code>[class]</code>; does that complicate things?</p>",
        "id": 190069167,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583761210
    },
    {
        "content": "<p>You can actually just treat all universe parameters as out params I think. The ones that are determined already won't matter</p>",
        "id": 190069357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583761322
    },
    {
        "content": "<p>and we never use universe values for instance selection</p>",
        "id": 190069456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583761367
    },
    {
        "content": "<p>although an instance can be rejected if it is not well typed</p>",
        "id": 190069512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583761394
    },
    {
        "content": "<p>I think maybe this is what Lean 4 does</p>",
        "id": 190069642,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583761459
    },
    {
        "content": "<p>I think so too</p>",
        "id": 190069665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583761476
    },
    {
        "content": "<p>Basically, because universe levels can be normalized or modified whenever during unification, they can't be relied on for dispatch anyway, so I would rather have a \"universe-naive\" typeclass inference mechanism that just ignores universes until unification/typechecking</p>",
        "id": 190069851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583761567
    },
    {
        "content": "<p>How difficult is this bugfix? We should probably make an issue if nobody is planning to work on it right away, otherwise it'll get lost.</p>\n<p>Edit: <a href=\"https://github.com/leanprover-community/lean/issues/146\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/146\">https://github.com/leanprover-community/lean/issues/146</a></p>",
        "id": 190090956,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583772534
    },
    {
        "content": "<p>I think the \"collect universe variables\" bugfix should be fairly trivial</p>",
        "id": 190091017,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583772566
    }
]