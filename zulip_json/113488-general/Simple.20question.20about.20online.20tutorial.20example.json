[
    {
        "content": "<p>The following from the online Lean tutorial (Lean 2) doesn't work as is in Lean 3. I figured out that I needed to change underscores in the tutorial into inaccessibles in the mutual theorem. Fine. But I still don't see how to prove <code>not_odd_zero</code>.</p>\n<div class=\"codehilite\"><pre><span></span>mutual inductive even, odd\nwith even : ℕ → Prop\n| even_zero : even 0\n| even_succ : ∀ n, odd n → even (n + 1)\nwith odd : ℕ → Prop\n| odd_succ : ∀ n, even n → odd (n + 1)\n\nopen even odd\n\ntheorem not_odd_zero : ¬ (odd 0).\n\nmutual theorem even_of_odd_succ, odd_of_even_succ\nwith even_of_odd_succ : ∀ n, odd (n + 1) → even n\n| .(n) (odd_succ n h) := h\nwith odd_of_even_succ : ∀ n, even (n + 1) → odd n\n| .(n) (even_succ n h) := h\n</pre></div>",
        "id": 126819103,
        "sender_full_name": "M. Andrew Moshier",
        "timestamp": 1526790982
    },
    {
        "content": "<p>that works for me in 3.4.1</p>",
        "id": 126819111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526791054
    },
    {
        "content": "<p>There is also no need for the mutual theorem, since the proof is non-recursive. This works too:</p>\n<div class=\"codehilite\"><pre><span></span>theorem even_of_odd_succ : ∀ n, odd (n + 1) → even n\n| .(n) (odd_succ n h) := h\n\ntheorem odd_of_even_succ : ∀ n, even (n + 1) → odd n\n| .(n) (even_succ n h) := h\n</pre></div>",
        "id": 126819197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526791221
    },
    {
        "content": "<p>I know it doesn't need to be mutual. This is lifted as is (except the change to inaccessibles) from the tutorial. My vscode is using 3.2.x; Emacs is using 3.4.x.  I'll fix that. Thanks.</p>",
        "id": 126836719,
        "sender_full_name": "M. Andrew Moshier",
        "timestamp": 1526833350
    }
]