[
    {
        "content": "<p>Can someone please magically make</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">a₁</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">group</span>\n</pre></div>\n\n\n<p>work? In 2020, humans should not be expected to do this by hand. :-( What do we need to do to make this happen?</p>",
        "id": 191451996,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584958005
    },
    {
        "content": "<p>Maybe somethink like <code>field_simps</code> can help?</p>",
        "id": 191452310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584958204
    },
    {
        "content": "<p>We need time, nothing else. I think it could be written by almost anyone having basic tactic writing knowledge (at least if you don't insist on speed).</p>",
        "id": 191454171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584959195
    },
    {
        "content": "<p>I think this is long overdue, so let me set myself a challenge: tonight I'll mute the \"new members\" stream and write that tactic.</p>",
        "id": 191455802,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584960117
    },
    {
        "content": "<p>I actually don't think this is a good example of what is being asked. The problem is, there is a bunch of logic in the way, it's not a question about groups. Once you clear it away, there is nothing here that simp can't handle already</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">a₁</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 191457471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584961157
    },
    {
        "content": "<p>But if we swap the sides of the iff, I think this would make a good simp-lemma</p>",
        "id": 191457633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584961246
    },
    {
        "content": "<p>Then it would be <code>by intros; simp</code></p>",
        "id": 191457666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584961268
    },
    {
        "content": "<p>I'm not so sure about that. There isn't an obvious way to simp normal form the whole equation here, unless you want to move everything to one side and equate to 1</p>",
        "id": 191457819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584961358
    },
    {
        "content": "<p>Removing inverses seems good to me</p>",
        "id": 191457880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584961397
    },
    {
        "content": "<p>yeah but you can't in general so this is just a heuristic thing</p>",
        "id": 191457944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584961436
    },
    {
        "content": "<p>Haha, <code>rintro rfl</code> is lovely, but still requires human thought before you notice it's a good idea, and is very specific to the case where each side of the <code>iff</code> has one side with a single term.</p>",
        "id": 191457949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584961440
    },
    {
        "content": "<p>that's why I said this isn't a good example. I don't know what the general case is that you want to solve</p>",
        "id": 191458041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584961492
    },
    {
        "content": "<p>I mean, is <code>group</code> supposed to be a decision procedure for <a href=\"https://en.wikipedia.org/wiki/Word_problem_for_groups\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Word_problem_for_groups\">https://en.wikipedia.org/wiki/Word_problem_for_groups</a> ?</p>",
        "id": 191458122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584961550
    },
    {
        "content": "<p>what if I ask <code>ab=cd iff bd'=a'c</code>? (primes for inverses)</p>",
        "id": 191458244,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584961624
    },
    {
        "content": "<p>No, of course not. It's meant to be a decision procedure that is effective on little annoying cases that I don't want to have to think about. :-)</p>",
        "id": 191458275,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584961646
    },
    {
        "content": "<p>Already I think this case is too annoying to think about.</p>",
        "id": 191458294,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584961662
    },
    {
        "content": "<p>I don't want to have to realise that <code>rintro rfl</code> is the appropriate clever trick for today. I just want the problem to go away because it's a small word problem, and they are easy.</p>",
        "id": 191458405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584961717
    },
    {
        "content": "<p><code>rintro rfl</code> is a great too for the toolbox fyi</p>",
        "id": 191458445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584961750
    },
    {
        "content": "<p>I basically try to always avoid equalities in the assumptions</p>",
        "id": 191458463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584961765
    },
    {
        "content": "<p>In any case, I think the word problem question is misleading here. It's the word problem in free groups that matters here, and that is just fine.</p>",
        "id": 191458553,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584961809
    },
    {
        "content": "<p>Oh, maybe I'm wrong... Maybe I'm asking about the word problem in one-relator groups, and that's already a bit difficult, but solvable.</p>",
        "id": 191458740,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584961927
    },
    {
        "content": "<p>The example at the beginning of the thread is true in all groups and hence falls under (some generalization of the) word problem for free groups.</p>",
        "id": 191458830,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584961988
    },
    {
        "content": "<p>I didn't know that \"word problem for groups\" has a special technical meaning.  I though it means determining whether two words are equal in all groups (which is of course the same as being equal in free groups).</p>",
        "id": 191458876,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584962038
    },
    {
        "content": "<p>Well, but I'm worried about the iff. Aren't we saying: suppose you're in the free group on three generators, modulo the relation <code>a₁ * a₂ = x</code>. Now, is it true that <code>a₁⁻¹ * x = a₂</code>? Presented that way, it's precisely the word problem in a one-relator group.</p>",
        "id": 191458961,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584962084
    },
    {
        "content": "<p>I think the example at the beginning is an instance of the general word problem for groups, because there are equality hypotheses</p>",
        "id": 191458967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584962087
    },
    {
        "content": "<p>the general case is that you have a bunch of values in a group and some equations about them, and want to deduce some more equations. This is exactly the problem of determining equality in a free group modulo some relations</p>",
        "id": 191459042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584962147
    },
    {
        "content": "<p>That said, just because it's undecidable doesn't mean that it's not reasonable to have a tactic that does it. After all, it is semidecidable, and we only care about yes instances</p>",
        "id": 191459150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584962198
    },
    {
        "content": "<p>The case for quantifier-free equations is decidable, and the original example falls in this class.  Is this a useful subset?</p>",
        "id": 191459184,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584962233
    },
    {
        "content": "<p>I think so, I mean having quantifiers would be nice but that's getting pretty close to a general ATP</p>",
        "id": 191459227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584962275
    },
    {
        "content": "<p>So the \"one equation\" case is definitely decidable (there's a nice note explaining how to do it at <a href=\"https://www3.nd.edu/~andyp/notes/OneRelator.pdf\" target=\"_blank\" title=\"https://www3.nd.edu/~andyp/notes/OneRelator.pdf\">https://www3.nd.edu/~andyp/notes/OneRelator.pdf</a>, but it's a bunch of work).</p>",
        "id": 191459275,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584962286
    },
    {
        "content": "<p>I tried simplifying your example in the obvious way, and it almost works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_inv_eq_one</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">to_rhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_inv_eq_one</span><span class=\"o\">]}</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n<span class=\"c1\">-- ⊢ a * (b * (d⁻¹ * c⁻¹)) = 1 ↔ b * (d⁻¹ * (c⁻¹ * a)) = 1</span>\n</pre></div>",
        "id": 191459343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584962339
    },
    {
        "content": "<p>but we need some extra smarts to do a cyclic permutation at the end</p>",
        "id": 191459360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584962355
    },
    {
        "content": "<p>If you just want to show the equivalence of two equations, then it is always enough to normalize with <code>mul_inv_eq_one</code> and then call <code>simp</code>.</p>",
        "id": 191459528,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584962451
    },
    {
        "content": "<p>that's what I did, as you can see that's not the case</p>",
        "id": 191459553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584962472
    },
    {
        "content": "<p>Oh yes, now I see what you mean by cyclic permutations.</p>",
        "id": 191459588,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584962500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.60group.60.20tactic/near/191459275\" title=\"#narrow/stream/113488-general/topic/.60group.60.20tactic/near/191459275\">said</a>:</p>\n<blockquote>\n<p>So the \"one equation\" case is definitely decidable (there's a nice note explaining how to do it at <a href=\"https://www3.nd.edu/~andyp/notes/OneRelator.pdf\" target=\"_blank\" title=\"https://www3.nd.edu/~andyp/notes/OneRelator.pdf\">https://www3.nd.edu/~andyp/notes/OneRelator.pdf</a>, but it's a bunch of work).</p>\n</blockquote>\n<p>Oh, this is harder than I expected.  I though that if you wanted to prove <code>s = 1 -&gt; r = 1</code>, then you could always find a generator <code>a</code> such that <code>s = 1 &lt;-&gt; s' = a</code> where <code>s'</code> doesn't contain <code>a</code> (like in Fourier-Motzkin).  Then you could just prove <code>r [s' / a]</code> instead.  However this obviously doesn't work in general.</p>",
        "id": 191460155,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584962915
    },
    {
        "content": "<p>I'm pretty sure that it is always possible to find some term <code>r'(x)</code> containing a free variable <code>x</code> such that <code>r = r'(s)</code> and <code>r'(1) = 1</code></p>",
        "id": 191460705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584963312
    },
    {
        "content": "<p><code>rintro \\&lt;\\&gt;</code> is another good one (thanks Rob)</p>",
        "id": 191464842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584966033
    },
    {
        "content": "<p>The theory of Groebner bases is the answer to the analogous question for rings. This is not simple \"formal\" stuff I guess</p>",
        "id": 191467829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584967861
    },
    {
        "content": "<p>Do we have a tactic for the free group question? <code>simp</code> can be trained to do this with <code>mul_left_inv</code> or whatever it is called</p>",
        "id": 191468024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584967981
    },
    {
        "content": "<p>And inv_left_mul</p>",
        "id": 191468053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584968006
    },
    {
        "content": "<p>This would get it all into one tactic call</p>",
        "id": 191468103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584968038
    },
    {
        "content": "<p>I'm sorry there was a misunderstanding because I've read too quickly Scott's problem. I thought he wanted the analogue of <code>ring</code> or <code>abel</code> in non-commutative groups. So there is no word problem to solve. I mean, <code>ring</code> does not look at assumption to close the goal, it normalizes the goal.</p>",
        "id": 191540808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584999816
    },
    {
        "content": "<p>So this tactic is meant to be much simpler than <code>ring</code> because the only simplification that can occur is <code>a*a⁻¹</code> appears somewhere. But it can cascade, and it can be hidden by parentheses. My initial plan was to do work directly with expressions, or follow what <code>assoc_rewrite</code> is doing, or use <code>assoc_rewrite</code>. It turns out that blindly use <code>repeat { assoc_rw ... }</code> is very slow <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span>. So I decided to first try using the simplifier.</p>",
        "id": 191541820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585000401
    },
    {
        "content": "<p>For instance:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">simp_arg_type</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">locat</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">simp_core</span> <span class=\"o\">{}</span> <span class=\"n\">skip</span> <span class=\"n\">tt</span> <span class=\"o\">[</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_self</span><span class=\"o\">),</span>\n  <span class=\"n\">symm_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_assoc</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_self</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_rev</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">inv_inv</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">inv_mul_self</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_cancel_right</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mul_inv_cancel_left</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">inv_mul_cancel_right</span><span class=\"o\">),</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">inv_mul_cancel_left</span><span class=\"o\">)]</span>\n  <span class=\"o\">[]</span> <span class=\"n\">locat</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">group</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">group</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹*</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">group</span>\n</pre></div>",
        "id": 191541928,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585000445
    },
    {
        "content": "<p>This is not so convenient for Scott's problem however, because of the cyclic permutation issue that Mario pointed out:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_eq_one_rev</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_eq_one_iff_eq_inv</span><span class=\"o\">},</span> <span class=\"n\">exact</span> <span class=\"n\">eq_inv_iff_eq_inv</span><span class=\"o\">}</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_inv_eq_one</span><span class=\"o\">,</span>\n    <span class=\"n\">group</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_inv_eq_one</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">group</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_eq_one_rev</span><span class=\"o\">,</span>\n    <span class=\"n\">group</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_inv_eq_one</span><span class=\"o\">,</span>\n    <span class=\"n\">group</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_inv_eq_one</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">group</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_eq_one_rev</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">group</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191542239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585000618
    },
    {
        "content": "<p>We could have tactic that does the <code>rw ← mul_inv_eq_one,   group,</code> combination, and a tactic <code>exact_mod_cyclic</code> that takes an assumption <code>a*b*...*z = 1</code> and tries to match with the goal after cyclic permutation, but that looks like much more specialized tactics that would be worth the trouble only if we need them a lot.</p>",
        "id": 191542469,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585000757
    },
    {
        "content": "<p><code>ring</code> proves facts about free rings; for general rings we need Groebner bases. These are definitely much more specialised tactics but I would say that we definitely need them. They solve all the analogues of Scott's questions. I believe they are in Coq?</p>",
        "id": 191542818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585000938
    },
    {
        "content": "<p>We still need some simple group normalization tactic in mathlib. Should I PR the above simple tactic? Or is there some expert who wants to do better?</p>",
        "id": 191545612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585002540
    },
    {
        "content": "<p>Can it also normalize <code>int</code> powers of group elements away (both for variable and fixed nats) i.e. <code>a^2 * a</code> becomes <code>a^3</code> and also <code>a^(n+1) * a^2</code> becomes <code>a^(n+3)</code>?</p>",
        "id": 191547869,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585003876
    },
    {
        "content": "<p>I'd say PR. :-)</p>",
        "id": 191568934,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585029068
    },
    {
        "content": "<p>So how am I supposed to prove <code>example (G : Type) [group G] (g h : G) : g⁻¹ * h = 1 → g = h := sorry</code> in Lean? What is the philosophy? Does this deserve to be a function? Should it be provable with a tactic? <code>library_search</code> doesn't seem to work.</p>",
        "id": 193165647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586254812
    },
    {
        "content": "<p>I guess <code>mul_inv_eq_one</code> is an <code>iff</code> statement... But you need <code>inv_mul_eq_one</code></p>",
        "id": 193165706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586254867
    },
    {
        "content": "<p>because this is the way it's defined in <code>coset</code></p>",
        "id": 193165743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586254894
    },
    {
        "content": "<p><code>src/algebra/group/basic.lean:theorem mul_inv_eq_one : a * b⁻¹ = 1 ↔ a = b :=</code></p>",
        "id": 193165839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586254941
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">left_rel</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">...</span>\n\n<span class=\"n\">def</span> <span class=\"n\">quotient</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">left_rel</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193165844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586254945
    },
    {
        "content": "<p>I think you want to give this theorem a companion</p>",
        "id": 193165854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586254954
    }
]