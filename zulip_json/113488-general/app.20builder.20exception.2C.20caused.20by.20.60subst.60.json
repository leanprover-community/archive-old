[
    {
        "content": "<p>Has anyone seen the error</p>\n<div class=\"codehilite\"><pre><span></span>app_builder_exception, more information can be obtained using command `set_option trace.app_builder true`\n</pre></div>\n\n\n<p>and then with <code>trace_app_builder</code></p>\n<div class=\"codehilite\"><pre><span></span>[app_builder] failed to build eq.rec, invalid motive:\nλ (r : ↥R), ↥S\n</pre></div>\n\n\n<p>This being caused by a call to <code>subst z</code>, where </p>\n<div class=\"codehilite\"><pre><span></span>R S : Ring,\nr : ↥R,\nr_1 : (forget Ring).obj S,\nz : r = ⇑(equiv.symm (iso.to_equiv (map_iso (forget Ring).obj i))) r_1\n</pre></div>",
        "id": 192116230,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585390714
    },
    {
        "content": "<p>I'm not really sure what problem I should be looking for.</p>",
        "id": 192116235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585390728
    },
    {
        "content": "<p>what is the goal?</p>",
        "id": 192116413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585391021
    },
    {
        "content": "<p>pp.all please</p>",
        "id": 192116415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585391029
    },
    {
        "content": "<p>one sec, there's a duplicated variable name, let me get rid of that</p>",
        "id": 192116483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585391130
    },
    {
        "content": "<p><a href=\"https://gist.github.com/semorrison/a3c3c46a1b260fc04387c5492bca96d2\" title=\"https://gist.github.com/semorrison/a3c3c46a1b260fc04387c5492bca96d2\">https://gist.github.com/semorrison/a3c3c46a1b260fc04387c5492bca96d2</a></p>",
        "id": 192116553,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585391228
    },
    {
        "content": "<p>without <code>pp.all</code> the state is</p>\n<div class=\"codehilite\"><pre><span></span>app_builder_exception, more information can be obtained using command `set_option trace.app_builder true`\nstate:\nR S : Ring,\ni : R ≅ S,\nr : ↥R,\nx : (forget Ring).obj S,\nz : r = ⇑(equiv.symm (iso.to_equiv (map_iso (forget Ring).obj i))) x\n⊢ ↥S\n</pre></div>\n\n\n<p>and we're calling <code>subst z</code>.</p>",
        "id": 192116566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585391255
    },
    {
        "content": "<p>I also want to see that invalid motive with pp.all</p>",
        "id": 192116632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585391379
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">app_builder</span><span class=\"o\">]</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">build</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"o\">,</span> <span class=\"n\">invalid</span> <span class=\"n\">motive</span><span class=\"o\">:</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">coe_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"bp\">@</span><span class=\"n\">coe_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n</pre></div>",
        "id": 192116752,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585391533
    },
    {
        "content": "<p>seems harmless to me?</p>",
        "id": 192116756,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585391555
    },
    {
        "content": "<p>Oh, I just checked the code and that term is supposed to be a pi type</p>",
        "id": 192116775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585391634
    },
    {
        "content": "<p>it gives that error because it's a lambda instead</p>",
        "id": 192116814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585391650
    },
    {
        "content": "<p>wait, scratch that, it infers the type and makes sure that is a pi type which is a sort</p>",
        "id": 192116824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585391693
    },
    {
        "content": "<p>I think I see how this is going wrong</p>",
        "id": 192116835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585391718
    },
    {
        "content": "<p>what is the type of that term?</p>",
        "id": 192116839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585391723
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">coe_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"bp\">@</span><span class=\"n\">coe_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n<span class=\"c1\">-- λ (r : ↥R), ↥S : ↥R → has_coe_to_sort.S Ring</span>\n</pre></div>",
        "id": 192116929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585391845
    },
    {
        "content": "<p><code>has_coe_to_sort.S Ring</code> is defeq to <code>Sort u</code> but subst isn't trying hard enough to find that out</p>",
        "id": 192116985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585391967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, is there some simplification that I could do beforehand that might help <code>subst</code>? Or I'm I going to have to look into the implementation of <code>subst_core</code>?</p>",
        "id": 192155160,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585454690
    },
    {
        "content": "<p>a quick fix might be to use <code>cases</code> or <code>rw</code> instead of <code>subst</code></p>",
        "id": 192155193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585454739
    },
    {
        "content": "<p>Oh, actually the way it's written it doesn't even try to reduce the expression before matching it against <code>Sort u</code>. That's definitely a bug, it should <code>whnf</code> the thing first</p>",
        "id": 192155292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585454891
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/165\" title=\"https://github.com/leanprover-community/lean/pull/165\">https://github.com/leanprover-community/lean/pull/165</a></p>",
        "id": 192155409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585455215
    },
    {
        "content": "<p>Awesome :-)</p>",
        "id": 192155679,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585455723
    },
    {
        "content": "<p>Now I need to remember how to run against a branch of lean. I will try this out asap.</p>",
        "id": 192155692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585455752
    },
    {
        "content": "<p>hmm, less easy than I hoped :-)</p>",
        "id": 192155838,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585456056
    }
]