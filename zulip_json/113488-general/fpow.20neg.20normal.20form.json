[
    {
        "content": "<p>I've been playing with <code>fpow</code> in the perfectoid project. We have the following expressions:<br>\n<code>x^(-n)</code>, <code>(1/x)^n</code>, <code>1/(x^n)</code> and <code>x¯¹ ^n</code>.<br>\nMoving between these is pretty annoying atm. I think the library hasn't really decided on a \"normal\" form. It isn't really clear to me which one would be best.</p>",
        "id": 176593428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569436420
    },
    {
        "content": "<p>Is n : nat here?</p>",
        "id": 176596068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569438480
    },
    {
        "content": "<p>No <code>n : int</code></p>",
        "id": 176596179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569438545
    },
    {
        "content": "<p>Of these <code>x^(-n)</code> \"looks\" the \"most normal\" to me, but that is not based on much</p>",
        "id": 176596911,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569439061
    },
    {
        "content": "<p>I guess people would object if we started simplifying <code>1/2</code> to <code>2⁻¹</code>, though</p>",
        "id": 176597841,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569439725
    },
    {
        "content": "<p>It would be <code>2^(-1)</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 176597914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569439783
    },
    {
        "content": "<p>But that doesn't need to happen, right?</p>",
        "id": 176597985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569439809
    },
    {
        "content": "<p>Because <code>1/2</code> doesn't match one of the 4 forms that I gave above.</p>",
        "id": 176598009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569439827
    },
    {
        "content": "<p>It's only <code>1/(2^1)</code> that matches. So using priorities (!!) we can make sure that we still get the desired result.</p>",
        "id": 176598059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569439865
    },
    {
        "content": "<p>Ah, I was figuring the easiest way to deal with it would be to simplify <code>1/x</code> to <code>x^(-1)</code>, <code>(x^a)^b</code> to <code>x^(a*b)</code> and then have rules for multiplying negatives together</p>",
        "id": 176603833,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569444237
    },
    {
        "content": "<p>Is this the sort of thing where looking at what computer algebra systems do would be helpful?</p>",
        "id": 176604103,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569444454
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1522\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1522\">#1522</a> is using <code>1/x</code> in its statements. It think this discussion didn't really converge onto a normal form yet. Does anyone have some 2cts to contribute?</p>",
        "id": 177652010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570564128
    },
    {
        "content": "<p>There is no simp lemma in this PR, so it doesn't claim anything about a normal form.</p>",
        "id": 177652069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570564171
    },
    {
        "content": "<p>Well, I think other lemmas should still use the normal form as much as possible... because it will be easier to chain things.</p>",
        "id": 177652168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570564226
    },
    {
        "content": "<p>I think those lemmas are still useful to have even if they are not <code>simp</code> normal form.</p>",
        "id": 177673704,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570583138
    }
]