[
    {
        "content": "<p>Doesn't the term mode just work?</p>",
        "id": 288717217,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657135149
    },
    {
        "content": "<p>Are you looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#show_term\">tactic#show_term</a>?</p>",
        "id": 288717549,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657135300
    },
    {
        "content": "<p>Hmm, the term that <code>show_term</code> gave me didn't work.</p>",
        "id": 288718656,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657135828
    },
    {
        "content": "<p>Here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.sym</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">sym</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E1</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">sym</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">x.succ.succ</span><span class=\"o\">)</span> <span class=\"n\">y.succ</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">x.succ.succ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">sym</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">x.succ.succ</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">s1</span><span class=\"o\">,</span><span class=\"n\">s2</span><span class=\"o\">⟩,</span> <span class=\"n\">s1.erase</span> <span class=\"mi\">0</span> <span class=\"n\">s2</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">x.succ.succ</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">mem_cons_self</span> <span class=\"mi\">0</span> <span class=\"n\">s</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">s1</span><span class=\"o\">,</span><span class=\"n\">s2</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">cons_erase</span> <span class=\"n\">s2</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">sym</span>\n</code></pre></div>",
        "id": 288718710,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657135857
    },
    {
        "content": "<p>When I put <code>show_term</code> after <code>by</code> and click on the provided suggestion, the term I get contains <code>E1._match_1</code> which raises an <code>unknown identifier</code> error.</p>",
        "id": 288719032,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657136002
    },
    {
        "content": "<p>What about just <code>λ ⟨s1,s2⟩, cons_erase s2</code></p>",
        "id": 288719117,
        "sender_full_name": "Reid Barton",
        "timestamp": 1657136037
    },
    {
        "content": "<blockquote>\n<p><code>to_fun    := λ ⟨s1,s2⟩, s1.erase 0 s2,</code></p>\n</blockquote>\n<p>This isn't a good idea, use <code>to_fun    := λ p, p.1.erase 0 p.2</code></p>",
        "id": 288719220,
        "sender_full_name": "Reid Barton",
        "timestamp": 1657136075
    },
    {
        "content": "<p>I think Reid's suggestion to use <code>λ p</code> instead of <code>λ ⟨s1,s2⟩</code> has fixed some of my problems.</p>",
        "id": 288720341,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657136583
    },
    {
        "content": "<p><code> λ ⟨s1,s2⟩, cons_erase s2</code> gives an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">cons_erase</span> <span class=\"n\">s2</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"o\">::</span><span class=\"bp\">ₛ</span> <span class=\"n\">s1.erase</span> <span class=\"mi\">0</span> <span class=\"n\">s2</span> <span class=\"bp\">=</span> <span class=\"n\">s1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">x.succ.succ</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span> <span class=\"o\">::</span><span class=\"bp\">ₛ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"n\">i</span><span class=\"o\">}),</span> <span class=\"n\">p.val.erase</span> <span class=\"mi\">0</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 288720478,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657136646
    },
    {
        "content": "<p>By the way, am I right in thinking that I don't strictly need to get <code>left_inv</code> and <code>right_inv</code> into term mode, since they're Props?</p>",
        "id": 288720667,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657136755
    },
    {
        "content": "<p>I understand that it's a bad idea to produce data with a tactic mode proof, but for the Prop-valued fields of an equivalence it's ok, isn't it?</p>",
        "id": 288720817,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657136811
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">E1</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">sym</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">x.succ.succ</span><span class=\"o\">)</span> <span class=\"n\">y.succ</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">x.succ.succ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">sym</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">x.succ.succ</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s.1.erase</span> <span class=\"mi\">0</span> <span class=\"n\">s.2</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">cons</span> <span class=\"mi\">0</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">mem_cons_self</span> <span class=\"mi\">0</span> <span class=\"n\">s</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 288720833,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657136817
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 288721049,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1657136908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> has marked this topic as resolved.</p>",
        "id": 288721312,
        "sender_full_name": "Notification Bot",
        "timestamp": 1657137011
    }
]