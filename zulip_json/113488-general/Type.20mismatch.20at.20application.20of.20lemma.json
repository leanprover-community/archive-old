[
    {
        "content": "<p>Why isn't  <code> have hl₁l₃: l₁ ≠ l₃,  from distinct_lines h h₁₃,</code> working below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.projective_plane</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">distinct_lines</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∉</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">≠</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">axiom_3_alternative</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span>\n  <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">a₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">c₁₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">a₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">c₂₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">c₁₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">c₂₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">c₁₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span>  <span class=\"n\">c₂₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">p₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">p₁</span> <span class=\"bp\">∉</span> <span class=\"n\">l₂</span> <span class=\"bp\">∧</span> <span class=\"n\">p₁</span> <span class=\"bp\">∉</span> <span class=\"n\">l₃</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">p₂</span> <span class=\"bp\">∉</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₃</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∉</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span> <span class=\"bp\">∧</span> <span class=\"n\">p₃</span> <span class=\"bp\">∉</span> <span class=\"n\">l₃</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">exists_config</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">p₁</span><span class=\"o\">,</span> <span class=\"n\">p₂</span><span class=\"o\">,</span> <span class=\"n\">p₃</span><span class=\"o\">,</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hr</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">h₁₂</span><span class=\"o\">,</span> <span class=\"n\">h₁₃</span><span class=\"o\">,</span> <span class=\"n\">h₂₁</span><span class=\"o\">,</span> <span class=\"n\">h₂₂</span><span class=\"o\">,</span> <span class=\"n\">h₂₃</span><span class=\"o\">,</span> <span class=\"n\">h₃₁</span><span class=\"o\">,</span> <span class=\"n\">h₃₂</span><span class=\"o\">,</span> <span class=\"n\">h₃₃</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">classical.em</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">),</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">hl₁l₃</span><span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">≠</span> <span class=\"n\">l₃</span><span class=\"o\">,</span>  <span class=\"k\">from</span> <span class=\"n\">distinct_lines</span> <span class=\"n\">h</span> <span class=\"n\">h₁₃</span><span class=\"o\">,</span> <span class=\"c1\">--Why doesn't this work?</span>\n\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n  <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>The error message is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">distinct_lines</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 320553894,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1673388310
    },
    {
        "content": "<p>The first parameter of <code>distinct_lines</code> is <code>P</code>. I think you probably want to declare</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>to make the variables implicit.</p>",
        "id": 320555671,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673389053
    },
    {
        "content": "<p>Thanks. I also changed <code>lemma distinct_lines (p: P) (l₁ l₂ : L)</code> to <code>lemma distinct_lines {p: P}{l₁ l₂ : L}</code> before the error went away.</p>",
        "id": 320567455,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1673395070
    }
]