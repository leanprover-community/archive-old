[
    {
        "content": "<p>Why is there no lemma of the form <code>u * u^-1 = 1</code>, <code>(a * u^-1) * u</code>, etc... where <code>is_unit u</code>? All I can find is lemmas about <code>\\u u</code> where <code>u : units \\a</code>.</p>",
        "id": 280805901,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651426998
    },
    {
        "content": "<p>Can you even write <code>u^-1</code>? The type of <code>u</code> doesn't necessarily <code>has_inv</code>.</p>",
        "id": 280806046,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651427183
    },
    {
        "content": "<p>I gather that currently the only time we have a pseudo-inverse is with <code>group_with_zero</code> and <code>matrix</code> (and the latter rather uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring.inverse\">docs#ring.inverse</a>), but this will change after <a href=\"https://github.com/leanprover-community/mathlib/pull/13860\">#13860</a>.</p>",
        "id": 280806048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651427183
    },
    {
        "content": "<p>My use case is that <code>{u} : set \\a</code> is a unit when <code>u</code> is, and additive combinatorics uses that fact all over the place.</p>",
        "id": 280806061,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651427234
    },
    {
        "content": "<p>but we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_unit.coe_inv_mul\">docs#is_unit.coe_inv_mul</a></p>",
        "id": 280806121,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651427338
    },
    {
        "content": "<p>Yes exactly. This is about the coercion of the inverse of the unit corresponding to <code>u</code>, rather than the inverse of <code>u</code> itself</p>",
        "id": 280806274,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651427553
    },
    {
        "content": "<p>My use case is precisely when my type already has an inverse, so that I don't have to resort to calculations in the units.</p>",
        "id": 280806339,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651427646
    },
    {
        "content": "<p>In <code>group_with_zero</code> (in particular <code>field</code>) the inverse isn't well behaved though, because 0 * 0^-1 is not 0.</p>",
        "id": 280806547,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651427973
    },
    {
        "content": "<p>... which is why you assume <code>is_unit u</code> and call <code>^-1</code> a <em>pseudo</em>-inverse</p>",
        "id": 280806595,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651428017
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring.inverse_mul_cancel\">docs#ring.inverse_mul_cancel</a> what you're looking for?</p>",
        "id": 280806660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651428080
    },
    {
        "content": "<p>Yes! except that I want the <code>^-1</code> spelling because <code>ring.inverse</code> does not behave well for additive combinatorics.</p>",
        "id": 280806800,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651428247
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/group_with_zero.mul_inv_cancel\">docs#group_with_zero.mul_inv_cancel</a> has the form you require.</p>",
        "id": 280806808,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651428270
    },
    {
        "content": "<p>Yes, except that <code>set \\a</code> is not a <code>group_with_zero</code> so it doesn't apply.</p>",
        "id": 280806827,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651428321
    },
    {
        "content": "<p>Your question doesn't make sense because there is no typeclass that forces has_inv to mean anything in the context that isn't group_with_zero</p>",
        "id": 280806897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651428407
    },
    {
        "content": "<p>Yes but <a href=\"https://github.com/leanprover-community/mathlib/pull/13860\">#13860</a> changes this</p>",
        "id": 280806923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651428443
    },
    {
        "content": "<p>Sorry I shouldn't have asked a question I knew the answer to <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 280806932,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651428468
    },
    {
        "content": "<p>Well then your answer to \"why is there no lemma of the form ...\" is \"because such a lemma would require a generalization elsewhere\"</p>",
        "id": 280806985,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651428487
    },
    {
        "content": "<p>I believe that what I can do is take the <code>group_with_zero</code> lemmas, and generalize them to my new <code>division_monoid</code> by changing <code>a \\ne 0</code> with <code>is_unit a</code>.</p>",
        "id": 280806991,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651428493
    },
    {
        "content": "<p>We already do have the lemmas for the spellings that are possible today; I assume there's one for matrix.has_inv too</p>",
        "id": 280807000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651428524
    },
    {
        "content": "<p>I wanted to make sure there was no other reason.</p>",
        "id": 280807007,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651428539
    },
    {
        "content": "<blockquote>\n<p>I believe that what I can do is take the <code>group_with_zero</code> lemmas, and generalize them to my new <code>division_monoid</code> by changing <code>a \\ne 0</code> with <code>is_unit a</code>.</p>\n</blockquote>\n<p>Would you be happy if I were to actually <em>replace</em> the <code>group_with_zero</code> lemmas and add a very easy way to convert <code>a \\ne 0</code> into <code>is_unit a</code> (something like <code>ne.is_unit</code>)?</p>",
        "id": 280807107,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651428696
    },
    {
        "content": "<p>That just sounds annoying</p>",
        "id": 280807112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651428722
    },
    {
        "content": "<p>I'd put the new lemmas you're describing in the <code>is_unit</code> namespace</p>",
        "id": 280807164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651428740
    },
    {
        "content": "<p>This might even be an improvement because dot notation will make that seamless: <code>h.is_unit.the_generalized_lemma</code></p>",
        "id": 280807171,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651428759
    },
    {
        "content": "<p>In my experience you don't normally have <code>h</code> lying around, and it's more convenient to let lean work out you need it after a rewrite</p>",
        "id": 280807193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651428800
    },
    {
        "content": "<p>So dot notation isn't going to be relevant</p>",
        "id": 280807197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651428815
    },
    {
        "content": "<p>Eh okay, I have a different experience.</p>",
        "id": 280807269,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651428891
    },
    {
        "content": "<p>At any rate, it will quickly become annoying to provide <code>is_unit</code> obligations when working in a <code>group</code></p>",
        "id": 280807434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651429147
    },
    {
        "content": "<p>If you have convenience wrappers for the group lemmas, then let's just have them for group_with_zero too</p>",
        "id": 280807489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651429203
    }
]