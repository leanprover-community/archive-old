[
    {
        "content": "<p>I have a meta-question about name generation. My tactic gets its hands on a type, and needs to choose a name for a term of that type. This is in a maths context so the type would typically be called <code>X</code>, and I would expect my tactic to choose <code>x</code> as a term type, appending some index if there is already <code>x</code> in my tactic state. I already know about <code>get_unused_name</code> so only the first step is really missing. Is there any example I could try to copy? There are bonus points if I can also decide that a term of type <code>Î±</code> should be called <code>a</code> but this is not mandatory.</p>",
        "id": 182576817,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575479596
    },
    {
        "content": "<p>Literally mapping <code>X</code> to <code>x</code>? <code>char.to_lower</code> or some version lifted to string? This will work for A-Z at least.</p>",
        "id": 182577339,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575479930
    },
    {
        "content": "<p>I'm pretty sure there's no function in mathlib to guess variable names more intelligently than that.</p>",
        "id": 182577400,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575479967
    },
    {
        "content": "<p>It would be better to have a slightly more robustness. The type could be <code>X'</code> for instance.</p>",
        "id": 182577470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575479993
    },
    {
        "content": "<p>and then I'd like to get <code>x'</code></p>",
        "id": 182577519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575480003
    },
    {
        "content": "<p>You can map <code>to_lower</code> over the string.</p>",
        "id": 182577540,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575480013
    },
    {
        "content": "<p>But this feels a little un-mathlib to me. Usually, if a user is expected to deal with the local constants created by a tactic, they provide the names explicitly.</p>",
        "id": 182577657,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575480099
    },
    {
        "content": "<p>I agree, but this is not for mathlib.</p>",
        "id": 182577738,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575480136
    },
    {
        "content": "<p>Does anyone know how to rewrite in a tactic? All the function I'd like to use are marked as private in Lean core lib.</p>",
        "id": 182579019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575480902
    },
    {
        "content": "<p>Nevermind, I found it.</p>",
        "id": 182579530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575481223
    },
    {
        "content": "<p>There is a subtle game between <code>rw_*</code> and <code>rewrite_*</code>.</p>",
        "id": 182579564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575481249
    }
]