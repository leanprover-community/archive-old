[
    {
        "content": "<p>Could we get a linter checking that no lemma proves a <em>syntactic</em> equality? It seems dumb, but tricky type ascriptions or name clashes actually make them happen. For instance <a href=\"https://github.com/leanprover-community/mathlib/blob/8a96d00c8bc5032b13fd1fbe2d4b35015ba13be5/src/analysis/normed_space/linear_isometry.lean#L107\">here</a> we see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_id</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗᵢ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>which looks like it's saying something about turning the identity linear isometry into a plain function. Fun challenge: figure out what's wrong here without using Lean.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>The right hand side is not <code>_root_.id</code>, it's <code>linear_isometry.id</code></p>\n</div></div>\n<p>You can check the statement is doing nothing with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.guard_target_strict\">docs#tactic.interactive.guard_target_strict</a>. The linter could test only refl lemmas if it's too slow.</p>",
        "id": 250267477,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629628467
    },
    {
        "content": "<p>Also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.quotient.mk_eq_mk\">docs#submodule.quotient.mk_eq_mk</a></p>",
        "id": 250268252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629629810
    },
    {
        "content": "<p>I had a crack at this at <a href=\"https://github.com/leanprover-community/mathlib/tree/alexjbest/tautology-linter\">branch#alexjbest/tautology-linter</a>, it finds the two examples here and no others in those files, its running on mathlib now: <a href=\"https://github.com/leanprover-community/mathlib/runs/3393269351\">https://github.com/leanprover-community/mathlib/runs/3393269351</a></p>",
        "id": 250270141,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629632875
    },
    {
        "content": "<p>Currently let expressions will confuse it in the sense that this linter won't flag <code>def a</code> below</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"k\">in</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">run_cmd</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">check_syn_eq</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>this should be easily fixable, it doesn't seem too common, but maybe some tactics produce terms like this.<br>\nIt also might be better to check alpha equivalence instead as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"k\">in</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">c</span><span class=\"o\">:=</span><span class=\"mi\">1</span> <span class=\"k\">in</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>wouldn't be flagged currently.</p>",
        "id": 250270805,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629633819
    },
    {
        "content": "<p>The results of the current version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">j30</span> <span class=\"c1\">--run ./scripts/lint_mathlib.lean</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Checking 81627 declarations (plus 80458 automatically generated ones) in mathlib -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `check_syn_eq` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> THE FOLLOWING DECLARATIONS ARE SYNTACTIC TAUTOLOGIES. -/</span>\n<span class=\"c1\">-- analysis\\normed_space\\affine_isometry.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">affine_isometry.coe_id</span> <span class=\"c\">/-</span><span class=\"cm\"> LHS equals RHS syntactically -/</span>\n\n<span class=\"c1\">-- analysis\\normed_space\\linear_isometry.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">linear_isometry.coe_id</span> <span class=\"c\">/-</span><span class=\"cm\"> LHS equals RHS syntactically -/</span>\n\n<span class=\"c1\">-- category_theory\\sums\\basic.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">category_theory.sum_comp_inl</span> <span class=\"c\">/-</span><span class=\"cm\"> LHS equals RHS syntactically -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">category_theory.sum_comp_inr</span> <span class=\"c\">/-</span><span class=\"cm\"> LHS equals RHS syntactically -/</span>\n\n<span class=\"c1\">-- linear_algebra\\basic.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">submodule.quotient.mk_eq_mk</span> <span class=\"c\">/-</span><span class=\"cm\"> LHS equals RHS syntactically -/</span>\n</code></pre></div>\n<p>So you already found half of them it seems?</p>",
        "id": 250274173,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629638863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> What do you think the corrected (i.e. not a tautology) form of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.sum_comp_inl\">docs#category_theory.sum_comp_inl</a> should be, currently the type ascriptions in the source don't force the type you intended, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sum_comp_inl</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⊕</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">inl</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">inl</span> <span class=\"n\">Q</span> <span class=\"bp\">⟶</span> <span class=\"n\">inl</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">inl</span> <span class=\"n\">P</span> <span class=\"bp\">⟶</span> <span class=\"n\">inl</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⟶</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⟶</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">⟶</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>seems to work but looks weird, and not like a useful simp lemma anymore to me.</p>",
        "id": 250285567,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629654939
    },
    {
        "content": "<p>Instead of <code>id</code>, you probably want to eliminate the notation and put in some <code>@</code>s</p>",
        "id": 250285710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629655170
    },
    {
        "content": "<p>In the same way as we often need <code>@function.injective (A → B) (some_hom A B) coe_fn</code>, and there is no way to spell that with casts alone</p>",
        "id": 250285781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629655227
    },
    {
        "content": "<p>Ok that sounds like a better idea:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sum_comp_inl</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⊕</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">inl</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">inl</span> <span class=\"n\">Q</span> <span class=\"bp\">⟶</span> <span class=\"n\">inl</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">category_struct.comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">category_struct.comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⟶</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">⟶</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 250285933,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629655516
    },
    {
        "content": "<p>Ok, any idea what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.quotient.mk_eq_mk\">docs#submodule.quotient.mk_eq_mk</a> is meant to say?</p>",
        "id": 250286273,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629656006
    },
    {
        "content": "<p>Maybe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mk_eq_mk</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">_root_.quotient.mk</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">quotient_rel</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 250286349,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629656132
    },
    {
        "content": "<p>Definitely, but I don't think you even need the @ there</p>",
        "id": 250286527,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629656386
    },
    {
        "content": "<p>Just the _root_</p>",
        "id": 250286529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629656395
    },
    {
        "content": "<p>It complains that it can't find the setoid instance in that case unfortunately, as the relation above is just a def</p>",
        "id": 250286901,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629656987
    }
]