[
    {
        "content": "<p>Can someone help me understand why <code>f</code> typechecks but <code>f'</code> does not?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">decidable.to_bool</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">&lt;</span><span class=\"n\">ω</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">decidable.to_bool</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">function.uncurry</span> <span class=\"n\">nat.lt</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263343242,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1638386475
    },
    {
        "content": "<p><code>∘</code> does not work on dependent functions</p>",
        "id": 263343487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638386556
    },
    {
        "content": "<p>and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable.to_bool\">docs#decidable.to_bool</a> is a dependent function</p>",
        "id": 263343541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638386581
    },
    {
        "content": "<p>actually that's not quite right, the problem is the <code>decidable p</code> implicit dependent argument</p>",
        "id": 263343657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638386628
    },
    {
        "content": "<p>that is, it's not simply a function <code>Prop -&gt; bool</code>, even though it looks like it when you write it as a plain application</p>",
        "id": 263343804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638386669
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is there any workaround that would allow this sort of composition to be written tacitly? Or is the plain application with arguments the only way?</p>",
        "id": 263345187,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1638387150
    },
    {
        "content": "<p>pointfree programming is not well supported in lean for a bunch of reasons, and this is one of them. I suggest just using variables</p>",
        "id": 263345288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638387193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"440832\">Joshua E Cook</span> has marked this topic as resolved.</p>",
        "id": 263345574,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638387302
    }
]