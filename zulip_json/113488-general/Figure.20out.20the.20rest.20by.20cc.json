[
    {
        "content": "<p>Can I tell Lean to work out the rest <code>by cc</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">punit</span>\n\n<span class=\"n\">def</span> <span class=\"n\">zero_module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n    <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n    <span class=\"n\">add</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n    <span class=\"n\">neg</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n    <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n    <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n    <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n    <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n    <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n    <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n    <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 130779658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533218410
    },
    {
        "content": "<p>I found that I was repeating myself, while trying to make a point to Lean.</p>",
        "id": 130779703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533218463
    },
    {
        "content": "<p>sure, something like: </p>\n<div class=\"codehilite\"><pre><span></span>begin\n  refine\n  { smul := λ _ _, star,\n    zero := star,\n    add  := λ _ _, star,\n    neg  := λ _, star,\n    .. } ; cc\nend\n</pre></div>",
        "id": 130779783,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533218536
    },
    {
        "content": "<p>Aaah, I need to understand <code>refine</code>.</p>",
        "id": 130779915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533218657
    },
    {
        "content": "<p>Curiously that doesn't actually work...</p>",
        "id": 130780063,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533218804
    },
    {
        "content": "<p>Of course, replacing <code>cc</code> with <code>obviously</code> does it. :-)</p>",
        "id": 130780069,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533218816
    },
    {
        "content": "<p>In fact just <code>by obviously</code> should work, except for some reason <code>split</code> doesn't work on modules, for some reason I can't see at the moment (type class inference throws an error?)</p>",
        "id": 130780103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533218849
    },
    {
        "content": "<p><code>finish</code> works instead of <code>cc</code>.</p>",
        "id": 130780108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533218858
    },
    {
        "content": "<p>what is <code>obviously</code>? is it in mathlib?</p>",
        "id": 130780164,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533218886
    },
    {
        "content": "<p>No, it is Scott's Hammer.</p>",
        "id": 130780199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533218969
    },
    {
        "content": "<p>Well, maybe <code>tidy</code> is his hammer.</p>",
        "id": 130780206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533218980
    },
    {
        "content": "<p><a href=\"https://github.com/semorrison/lean-tidy/blob/master/src/tidy/tidy.lean#L81\" target=\"_blank\" title=\"https://github.com/semorrison/lean-tidy/blob/master/src/tidy/tidy.lean#L81\"><code>obviously</code></a></p>",
        "id": 130780270,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533219008
    },
    {
        "content": "<p>So, the current golf record is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">zero_module&#39;</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">finish</span>\n</pre></div>",
        "id": 130780292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533219061
    },
    {
        "content": "<p>gadvardammt finish</p>",
        "id": 130780309,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533219077
    },
    {
        "content": "<p>Let's assume we open <code>punit</code>.</p>",
        "id": 130780310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533219077
    },
    {
        "content": "<p>If someone can explain to me why you can't <code>split</code> when the goal is a module, maybe I can golf the entire proof to <code>by tidy</code>.</p>",
        "id": 130780403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533219155
    },
    {
        "content": "<p>isn't the right command <code>constructor</code></p>",
        "id": 130780415,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533219175
    },
    {
        "content": "<p><code>split</code> is for inductive types I think</p>",
        "id": 130780432,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533219201
    },
    {
        "content": "<p><code>constructor</code> also fails...</p>",
        "id": 130780438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533219214
    }
]