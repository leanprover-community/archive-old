[
    {
        "content": "<p>Is this provable?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">eq_mpr_val</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">subtype</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 128483780,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529688678
    },
    {
        "content": "<p>(<code>subtype</code> here is just an example of a type which has a field whose type doesn't depend on the type indices being changed by <code>e</code>.)</p>",
        "id": 128483850,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529688736
    },
    {
        "content": "<p>Or if I find myself needing to prove this sort of thing, do I need to back up and make sure that instead of this <code>eq.mpr e x</code>, I have an expression that recurses on a proof of <code>p = q</code>?</p>",
        "id": 128483937,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529688851
    },
    {
        "content": "<p>Yeah, I don't see an alternative. <code>eq.mpr</code> is going to be difficult to get rid of. I tried various things with generalize and congr but to no avail</p>",
        "id": 128484399,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529689484
    },
    {
        "content": "<p>I think it's probably not provable. I don't see a reason why <code>@subtype.val α p == @subtype.val α q</code> without <code>p = q</code>. I think in lean two types of the same size are indistinguishable, so if <code>p ≠ q</code>, but <code>subtype p = subtype q</code>, there's no contradiction, provided they're the same size, but there's no canonical isomorphism or way of identifying <code>@subtype.val α p</code> with <code>@subtype.val α q</code>. Mario will know.</p>",
        "id": 128493634,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529701228
    },
    {
        "content": "<p>I couldn't actually prove a contradiction from assuming <code>subtype p = subtype q</code>, where <code>p ≠ q</code> and your lemma though.</p>",
        "id": 128493734,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529701428
    },
    {
        "content": "<p>These sorts of things are independent in lean. Injectivity of inductive type constructors is either independent or false in every case I'm aware of.</p>",
        "id": 128504956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529722017
    }
]