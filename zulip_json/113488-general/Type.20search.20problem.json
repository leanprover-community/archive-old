[
    {
        "content": "<p>The following error was observed by <span class=\"user-mention\" data-user-id=\"267205\">@Nicol√≤ Cavalleri</span> in <a href=\"https://github.com/leanprover-community/mathlib/issues/6981\">#6981</a> while trying to define a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smooth_manifold_with_corners\">docs#smooth_manifold_with_corners</a> object.  By definition <code>smooth_manifold_with_corners</code> is a special case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_groupoid\">docs#has_groupoid</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">smooth_manifold_with_corners</span> <span class=\"o\">[</span><span class=\"bp\">***</span> <span class=\"n\">a</span> <span class=\"n\">bunch</span> <span class=\"n\">of</span> <span class=\"kd\">variables</span> <span class=\"bp\">***</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">has_groupoid</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">times_cont_diff_groupoid</span> <span class=\"bp\">‚àû</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>In this situation we have an existing <code>has_groupoid</code> and are trying to exhibit a <code>smooth_manifold_with_corners</code>.  Lean cannot find one of the instances it requires; on the other hand, if you try to provide it, Lean complains that it conflicts with the expected instance.  Is there a workaround?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.smooth_manifold_with_corners</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">manifold</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">M</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e.source</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">....</span>\n<span class=\"cm\">‚ä¢ charted_space H M</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"bp\">ùïú</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">singleton_charted_space</span> <span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">singleton_has_groupoid</span> <span class=\"n\">e</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">times_cont_diff_groupoid</span> <span class=\"bp\">‚àû</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized</span>\n<span class=\"cm\">  ‚Åá</span>\n<span class=\"cm\">inferred</span>\n<span class=\"cm\">  singleton_charted_space e h</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"bp\">ùïú</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">singleton_charted_space</span> <span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"n\">singleton_has_groupoid</span> <span class=\"n\">e</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">times_cont_diff_groupoid</span> <span class=\"bp\">‚àû</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_groupoid</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">M</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">singleton_charted_space</span> <span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">times_cont_diff_groupoid</span> <span class=\"bp\">‚àû</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 233115817,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1617573666
    },
    {
        "content": "<p>One way to suppress type class inference for an argument is to use <code>(id _)</code> instead of <code>_</code></p>",
        "id": 233138361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617600133
    },
    {
        "content": "<p>Thanks for the hint.  Do you have time to play with the example a little?  I tried some <code>id</code>s in various places but couldn't get it working.</p>",
        "id": 233139903,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1617601963
    },
    {
        "content": "<p>The closest equivalent I found was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"bp\">ùïú</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">singleton_charted_space</span> <span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">smooth_manifold_with_corners.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n<span class=\"bp\">@</span><span class=\"n\">has_groupoid.compatible</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">$</span>\n<span class=\"n\">singleton_has_groupoid</span> <span class=\"n\">e</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">times_cont_diff_groupoid</span> <span class=\"bp\">‚àû</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 233142354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617604811
    },
    {
        "content": "<p>those typeclass args don't seem like a very good idea if you have to stub them out like this a lot</p>",
        "id": 233142414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617604842
    },
    {
        "content": "<p>You can make that a bit simpler with an alternate constructor for <code>smooth_manifold_with_corners</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">smooth_manifold_with_corners.mk'</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">gr</span> <span class=\"o\">:</span> <span class=\"n\">has_groupoid</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">times_cont_diff_groupoid</span> <span class=\"bp\">‚àû</span> <span class=\"n\">I</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">gr</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"bp\">ùïú</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">singleton_charted_space</span> <span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">smooth_manifold_with_corners.mk'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n<span class=\"n\">singleton_has_groupoid</span> <span class=\"n\">e</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">times_cont_diff_groupoid</span> <span class=\"bp\">‚àû</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 233142592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617605046
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 233198190,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1617641503
    }
]