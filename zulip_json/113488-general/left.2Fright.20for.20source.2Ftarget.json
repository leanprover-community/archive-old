[
    {
        "content": "<p>Some lemmas about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/local_equiv\">docs#local_equiv</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/local_homeomorph\">docs#local_homeomorph</a> deal with <code>e.source ∩ s</code> / <code>e.target ∩ t</code>, some with <code>s ∩ e.source</code>/<code>s ∩ e.target</code>. I'm trying to define <code>local_homeomorph.piecewise</code> and quite often I have to <code>rw inter_comm</code> to apply the lemma I want. Some lemma, e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/local_equiv.image_inter_source_eq\">docs#local_equiv.image_inter_source_eq</a>, mix \"left\" and \"right\" conventions.<br>\n<span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> You're the author of <code>local_equiv</code>. Is there some convention I miss? If no, what do you think about normalizing the lemmas to always put <code>e.source</code>/<code>e.target</code> on one side of <code>∩</code>?</p>",
        "id": 228988391,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614963977
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/6555\">#6555</a> for <code>local_equiv.piecewise</code>.</p>",
        "id": 228988584,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614964057
    },
    {
        "content": "<p>Another question: there are <a href=\"https://github.com/leanprover-community/mathlib/blob/441e3e9642e01835f90c6ba78b45119e0a354c45/src/data/equiv/local_equiv.lean#L220\">many</a> ways to say that <code>t : set β</code> is the image of <code>s : set α</code> under <code>e : local_equiv α β</code> when restricted to <code>e.source</code>/<code>e.target</code>.<br>\nThis relation is closed under normal set operations and in the case of a <code>local_homeomorph</code> it is also closed under <code>closure</code>/<code>frontier</code>/<code>interior</code>. What do you think about giving it a name?</p>",
        "id": 228989753,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614964470
    },
    {
        "content": "<p>Sure, it is a good idea to try to normalize. I have tried to be coherent when writing these files, but I have probably missed some places. Also, when you use lemmas from other parts of mathlib, conventions are not always the same, so it ended a little bit random. Choosing one side once and for all would definitely be an improvement!</p>",
        "id": 228993376,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614965820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/left.2Fright.20for.20source.2Ftarget/near/228989753\">said</a>:</p>\n<blockquote>\n<p>Another question: there are <a href=\"https://github.com/leanprover-community/mathlib/blob/441e3e9642e01835f90c6ba78b45119e0a354c45/src/data/equiv/local_equiv.lean#L220\">many</a> ways to say that <code>t : set β</code> is the image of <code>s : set α</code> under <code>e : local_equiv α β</code> when restricted to <code>e.source</code>/<code>e.target</code>.<br>\nThis relation is closed under normal set operations and in the case of a <code>local_homeomorph</code> it is also closed under <code>closure</code>/<code>frontier</code>/<code>interior</code>. What do you think about giving it a name?</p>\n</blockquote>\n<p>Yes, that's a good idea!</p>",
        "id": 228993457,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614965858
    },
    {
        "content": "<p>How would you name it?</p>",
        "id": 228993715,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614965967
    },
    {
        "content": "<p><code>t = local_equiv.image e s</code>? I know it does not really correspond to <code>set.image</code>, but still it sounds ok to me.</p>",
        "id": 228995046,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614966505
    },
    {
        "content": "<p>This is not an equality <code>t = f s</code>, it's <code>t ∩ e.target = e '' (s ∩ e.source)</code>. <code>local_equiv.is_image e s t</code>?</p>",
        "id": 229001252,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614968868
    },
    {
        "content": "<p>I thought you wanted <code>t</code> to already be a subset of <code>e.target</code>, but I agree your version is better as it is more symmetric. Yes, <code>e.is_image s t</code> looks good.</p>",
        "id": 229010547,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614972468
    },
    {
        "content": "<p>Is this at all similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.bij_on\">docs#set.bij_on</a>?</p>",
        "id": 229011399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614972810
    },
    {
        "content": "<p>Suggesting perhaps <code>e.bij_on</code> for consistency</p>",
        "id": 229011566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614972858
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/local_equiv.bij_on\">docs#local_equiv.bij_on</a> already exists</p>",
        "id": 229057993,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614999528
    }
]