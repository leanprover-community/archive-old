[
    {
        "content": "<p>How hard would it be to generalize something like the following to a tactic acting similar to <code>refine_struct</code> but generating equality goals if two <code>.. substructure</code> arguments provide non-defeq values for a field? This equality can be used to combine proofs coming from those <code>.. substructure</code> arguments even if they can't be unified.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">subsemiring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">submonoid</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">add_submonoid</span> <span class=\"n\">R</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">subsemiring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">subsemiring</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">subsemiring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">m</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Construct a `subsemiring R` from a set `s`, a submonoid `sm`, and an additive</span>\n<span class=\"cm\">submonoid `sa` such that `x ∈ s ↔ x ∈ sm ↔ x ∈ sa`. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">mk&#39;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sm</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">sm</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sa</span> <span class=\"o\">:</span> <span class=\"n\">add_submonoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">sa</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">subsemiring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">sa</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">sm</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">sa</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">sm</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 197082384,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589149464
    },
    {
        "content": "<p>Probably I want a <code>def</code> anyway because this way I can easily prove something like <code>mk'_to_submonoid</code>.</p>",
        "id": 197083422,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589150716
    },
    {
        "content": "<p>I think what I actually want is an attribute that automatically generates a function like <code>lattice.copy</code> and a theorem <code>x.copy _ = x</code>.</p>",
        "id": 197087025,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589155565
    },
    {
        "content": "<p>Then my <code>mk'</code> would become something like <code>{ .. sm.copy _, .. sa.copy _ }</code>.</p>",
        "id": 197087105,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589155708
    }
]