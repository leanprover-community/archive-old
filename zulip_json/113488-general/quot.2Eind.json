[
    {
        "content": "<p>Am I right in thinking that <code>quot.ind</code> is logically equivalent to <code>function.surjective (quot.mk r)</code>? It's simply the universal property of a surjection. I am never 100% sure about these things because of computability or constructability or efficiency or whatever, but, assuming I've not made a slip, why do the CS guys choose <code>quot.ind</code> over the surjection statement? If beta were allowed to take values in Type then there would be some constructivity issues I guess, but because it's Prop aren't they exactly the same? Is it simply that <code>quot.ind</code> turns out to be more useful than the surjectivity statement in practice or is there something else going on?</p>",
        "id": 130704193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533118272
    },
    {
        "content": "<p>because <code>function.surjective</code> hasn't been defined</p>",
        "id": 130704204,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533118316
    },
    {
        "content": "<p>the four constants of <code>quot</code> are all initiated in core</p>",
        "id": 130704255,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533118349
    },
    {
        "content": "<p>Yes, <code>quot.ind</code> and <code>quot.exists_rep</code> are equivalent. Induction principles are preferred for axiomatics since they don't have any prerequisite definitions</p>",
        "id": 130704349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533118487
    },
    {
        "content": "<p>I guess one could have simply spelled out the definition of surjection. I don't quite understand Mario's answer -- what is an \"induction principle\"? I only ever learnt one and that was about the natural numbers. Aah. Presumably in this context it means \"something which constructs a map from the type we're talking about to Prop\". OK. I see. Thanks!</p>",
        "id": 130705226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533119820
    },
    {
        "content": "<p>\"induction principle\" is often used synonymously with \"recursor\" in lean terminology</p>",
        "id": 130705358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533120004
    },
    {
        "content": "<p>Usually an induction principle has a motive that has a target in <code>Prop</code> though</p>",
        "id": 130705365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533120027
    }
]