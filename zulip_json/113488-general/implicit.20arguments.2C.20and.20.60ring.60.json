[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I noticed an unfortunate feature of <code>ring</code>.</p>",
        "id": 134878744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219630
    },
    {
        "content": "<p>I'd got stuck doing this:</p>\n<div class=\"codehilite\"><pre><span></span>example (x y : ℕ) (h : x ^ 2 + 3 * y ^ 2 = 4) : false :=\nbegin\nring at h,\nsimp at h,\nring at h,\nsimp at h,\n-- ...\nend\n</pre></div>",
        "id": 134878745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219636
    },
    {
        "content": "<p>where it looks like the goal isn't changing.</p>",
        "id": 134878784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219647
    },
    {
        "content": "<p>It just says </p>\n<div class=\"codehilite\"><pre><span></span>x y : ℕ,\nh : x ^ 2 + 3 * y ^ 2 = 4\n⊢ false\n</pre></div>",
        "id": 134878788,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219659
    },
    {
        "content": "<p>but with pp.all true, you can see if flipping back and forth:</p>",
        "id": 134878791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219670
    },
    {
        "content": "<p>You shouldn't use <code>ring</code> nonterminally</p>",
        "id": 134878803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538219673
    },
    {
        "content": "<p>at least not automatically (i.e. in <code>tidy</code>)</p>",
        "id": 134878808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538219694
    },
    {
        "content": "<p>if it doesn't close the goal, assume it failed</p>",
        "id": 134878815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538219713
    },
    {
        "content": "<p>Yes, I know, but I want to for a moment anyway. :-)</p>",
        "id": 134878817,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219714
    },
    {
        "content": "<p>Ah, okay. :-)</p>",
        "id": 134878818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219722
    },
    {
        "content": "<p>But that takes all the fun out of it.</p>",
        "id": 134878821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219729
    },
    {
        "content": "<p><code>ring</code> rewrites the goal into sum-of-products form for ease of reading when it fails</p>",
        "id": 134878823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538219745
    },
    {
        "content": "<p>Because sometimes <code>ring at *, exfalso, linarith</code> can get stuff done.</p>",
        "id": 134878827,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219749
    },
    {
        "content": "<p>this form disagrees with simp normal form in some places</p>",
        "id": 134878829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538219758
    },
    {
        "content": "<p>The problem I was having here is actually just in the implicit arguments flipping back and forth.</p>",
        "id": 134878870,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219770
    },
    {
        "content": "<p>The expression \"itself\" is not being changed by either <code>simp</code> or <code>ring</code>.</p>",
        "id": 134878874,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219783
    },
    {
        "content": "<p>wait, maybe I don't understand then</p>",
        "id": 134878881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538219803
    },
    {
        "content": "<p>what is changing?</p>",
        "id": 134878882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538219809
    },
    {
        "content": "<p>With usual pretty printing, neither <code>simp</code> nor <code>ring</code> do anything, and the goal just looks like</p>\n<div class=\"codehilite\"><pre><span></span>x y : ℕ,\nh : x ^ 2 + 3 * y ^ 2 = 4\n⊢ false\n</pre></div>",
        "id": 134878894,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219837
    },
    {
        "content": "<p>but with pp.all we get:</p>",
        "id": 134878896,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219843
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>x y : nat,\nh :\n  @eq.{1} nat\n    (@has_add.add.{0} nat nat.has_add\n       (@has_pow.pow.{0 0} nat nat nat.has_pow x (@bit0.{0} nat nat.has_add (@has_one.one.{0} nat nat.has_one)))\n       (@has_mul.mul.{0} nat\n          (@mul_zero_class.to_has_mul.{0} nat\n             (@semiring.to_mul_zero_class.{0} nat\n                (@comm_semiring.to_semiring.{0} nat\n                   (@canonically_ordered_comm_semiring.to_comm_semiring.{0} nat\n                      nat.canonically_ordered_comm_semiring))))\n          (@bit1.{0} nat nat.has_one nat.has_add (@has_one.one.{0} nat nat.has_one))\n          (@has_pow.pow.{0 0} nat nat nat.has_pow y (@bit0.{0} nat nat.has_add (@has_one.one.{0} nat nat.has_one)))))\n    (@bit0.{0} nat nat.has_add (@bit0.{0} nat nat.has_add (@has_one.one.{0} nat nat.has_one)))\n⊢ false\n</pre></div>",
        "id": 134878898,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219852
    },
    {
        "content": "<p>after the <code>simp</code></p>",
        "id": 134878899,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219855
    },
    {
        "content": "<p>oh, it's nat.pow isn't it</p>",
        "id": 134878900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538219856
    },
    {
        "content": "<p>and then</p>",
        "id": 134878901,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219857
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>x y : nat,\nh :\n  @eq.{1} nat\n    (@has_add.add.{0} nat nat.has_add\n       (@has_pow.pow.{0 0} nat nat\n          (@monoid.has_pow.{0} nat\n             (@semiring.to_monoid.{0} nat\n                (@comm_semiring.to_semiring.{0} nat\n                   (@canonically_ordered_comm_semiring.to_comm_semiring.{0} nat\n                      nat.canonically_ordered_comm_semiring))))\n          x\n          (@bit0.{0} nat nat.has_add (@has_one.one.{0} nat nat.has_one)))\n       (@has_mul.mul.{0} nat\n          (@mul_zero_class.to_has_mul.{0} nat\n             (@semiring.to_mul_zero_class.{0} nat\n                (@comm_semiring.to_semiring.{0} nat\n                   (@canonically_ordered_comm_semiring.to_comm_semiring.{0} nat\n                      nat.canonically_ordered_comm_semiring))))\n          (@bit1.{0} nat nat.has_one nat.has_add (@has_one.one.{0} nat nat.has_one))\n          (@has_pow.pow.{0 0} nat nat\n             (@monoid.has_pow.{0} nat\n                (@semiring.to_monoid.{0} nat\n                   (@comm_semiring.to_semiring.{0} nat\n                      (@canonically_ordered_comm_semiring.to_comm_semiring.{0} nat\n                         nat.canonically_ordered_comm_semiring))))\n             y\n             (@bit0.{0} nat nat.has_add (@has_one.one.{0} nat nat.has_one)))))\n    (@bit0.{0} nat nat.has_add (@bit0.{0} nat nat.has_add (@has_one.one.{0} nat nat.has_one)))\n⊢ false\n</pre></div>",
        "id": 134878905,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219871
    },
    {
        "content": "<p>after the <code>ring</code></p>",
        "id": 134878906,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219874
    },
    {
        "content": "<p>right, <code>ring</code> prefers monoid powers but that's not simp normal form</p>",
        "id": 134878947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538219899
    },
    {
        "content": "<p>Okay, I see.</p>",
        "id": 134878950,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219914
    },
    {
        "content": "<p>Nothing to be done, then!</p>",
        "id": 134878951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538219930
    },
    {
        "content": "<p><code>ring </code> doesn't make any attempt to be in simp normal form; if you need that you should just call <code>ring, simp</code></p>",
        "id": 134878962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538219965
    },
    {
        "content": "<p>but even better is to just ignore the pretty failure mode</p>",
        "id": 134878965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538220000
    },
    {
        "content": "<p>it's a feature!</p>",
        "id": 134879165,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538220379
    }
]