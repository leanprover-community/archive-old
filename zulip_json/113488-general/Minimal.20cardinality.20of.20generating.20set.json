[
    {
        "content": "<p>What would be a good name for the minimal cardinality of a generating set of a submodule? I couldn't find one in the literature except \"minimal number of elements generating <code>M</code>\". Currently, I am using <code>submodule.min_generator_card</code>, but it is quite lengthy. I wonder if something more radical like <code>submodule.size</code> would be better.</p>",
        "id": 304292714,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665916908
    },
    {
        "content": "<p><code>grank</code>? = \"generalized rank\"</p>",
        "id": 304292910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665917010
    },
    {
        "content": "<p>What do you need it for, btw?</p>",
        "id": 304293009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665917068
    },
    {
        "content": "<p>It would be useful when stating theorems like Krull's height theorem (the statement would be <code>p ∈ I.minimal_primes → p.height ≤ I.size</code>) and also in the proofs where we would need to perform induction on it while generalizing <code>I</code>.</p>",
        "id": 304294595,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665918165
    },
    {
        "content": "<p><code>grank</code> sounds good! I would need a <code>nat</code>-valued version and a <code>enat</code> valued version though. Should it be <code>fin_grank</code>/ <code>grank</code> or <code>grank</code> / <code>egrank</code>?</p>",
        "id": 304294832,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665918311
    },
    {
        "content": "<p><code>grank</code> is one of those things which is great because it's short but will be hard for those not in the know to understand. I guess we have to ask how much we want to cater for these people. Bytes are cheap, I think we are too quick to forget this here. But all the more descriptive choices seem much longer :-( <code>min_gen_size</code>? :-(</p>",
        "id": 304295356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665918637
    },
    {
        "content": "<p>If we go with <code>g_rank</code> and <code>eg_rank</code>, then everyone will understand it is somehow rank-like.</p>",
        "id": 304298064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665920379
    },
    {
        "content": "<p>I agree that bytes are cheap, but when they appear multiple times in a statement, it makes it clunky and hard to read.<br>\nFor example for the presentation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mi>m</mi></msup><mo>→</mo><msup><mi>R</mi><mi>n</mi></msup><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">R^m \\to R^n \\to M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> for the finite-presented module <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, the first map would have a type <code>(fin (module.finite.rep M).ker.min_generator_card → R) →ₗ[R] (fin (module.min_generator_card M) → R)</code><br>\nIf there are two modules and we need to reason about the homomorphism between the presentations, things would deteriorate quite quickly.</p>",
        "id": 304306343,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665925314
    },
    {
        "content": "<p>My understanding of <a href=\"https://mathoverflow.net/questions/29993/rank-of-a-module\">this answer</a> is that \"rank\" of a module corresponds to the cardinality of a maximum independent set (for a module over a domain).</p>\n<p>How about <code>gen_card</code>? Taking the cardinality of a <em>minimal</em> generating set is implicit, since you can always add more generators.</p>",
        "id": 304308265,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665926436
    },
    {
        "content": "<p>I agree that <em>minimal</em> is implicit. But <code>gen_</code> is ambiguous. The first thing that came to my mind was \"generalized [foo]\".</p>",
        "id": 304308579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665926652
    },
    {
        "content": "<p>I wonder if <code>lin_card</code> (\"linearized cardinality\") would make sense, thinking of modules as being linearized sets. That's a bit out there though.</p>",
        "id": 304309344,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665927109
    },
    {
        "content": "<p>You could just go with the longer name and introduce local notation for the file where you use it.</p>",
        "id": 304317266,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665931954
    },
    {
        "content": "<p>But that doesn't help with keeping lemma names short</p>",
        "id": 304340790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665946393
    },
    {
        "content": "<p>As Andrew points out, the length of the definition influences the length of lemma names.</p>",
        "id": 304340807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665946419
    },
    {
        "content": "<p>But do we <em>really</em> care whether lemma names are five characters shorter? Or would we rather they were readable?</p>",
        "id": 304346348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665950017
    },
    {
        "content": "<p>In my experience, longer names tend to be less readable, actually. We humans are pretty good at filling holes mentally.</p>",
        "id": 304346449,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665950079
    },
    {
        "content": "<p>I think it's a balancing act. Too short is obviously not good either. But too long means that you need a lot more line breaks.</p>",
        "id": 304346786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665950334
    },
    {
        "content": "<p>It also becomes harder to look for lemmas in the docs, because you need to type much more before you filter out the unrelated declarations.</p>",
        "id": 304346909,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665950418
    },
    {
        "content": "<p>This in fact goes both ways. Long names poison all searches, because they contain many substrings. Maybe the search  ranking could be tweaked to improve that? for example by weighing matches depending on how many letters match in the n-th part of the name (namespaces + fully unqualified name).</p>",
        "id": 304347086,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665950554
    },
    {
        "content": "<p>Anyway, my point is that it's reductive to say \"bytes are cheap\". Short names are not always worse, long names are not always better. It's complex.</p>",
        "id": 304347121,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665950589
    },
    {
        "content": "<p>I don't actually care if the lemma names are shorter. The lemmas usually only appears in proofs, and we in general doesn't really care that much about the readability of the proof. But this definition will frequently appear in type signatures, and I do care if the statements of lemmas and the info view in tactic states are readable or not. <br>\nI agree that there is a cost on using shorter but non-standard/non-descriptive names. But I'd argue that in this particular case it is worth it.</p>",
        "id": 304349234,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665952175
    },
    {
        "content": "<p>For example, <code>set.Iio</code> is unintelligible for people outside mathlib. But imagine a mathlib where <code>set.Iio</code> were called <code>set.left_infinite_right_open_interval</code> instead.</p>",
        "id": 304349342,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665952245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Minimal.20cardinality.20of.20generating.20set/near/304308265\">said</a>:</p>\n<blockquote>\n<p>My understanding of <a href=\"https://mathoverflow.net/questions/29993/rank-of-a-module\">this answer</a> is that \"rank\" of a module corresponds to the cardinality of a maximum independent set (for a module over a domain).</p>\n<p>How about <code>gen_card</code>? Taking the cardinality of a <em>minimal</em> generating set is implicit, since you can always add more generators.</p>\n</blockquote>\n<p>Notice that we already use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group.rank\">docs#group.rank</a> to mean the minimal number of generators (rather than the maximal cardinality of independent sets as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.rank\">docs#module.rank</a>), but only defined for finitely generated groups; probably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group.rank\">docs#group.rank</a> should be renamed when we decide what to call this notion for modules.</p>\n<p>And there is precedent in using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gen_loop\">docs#gen_loop</a> to mean \"generalized loop\". But we might reverse the order to <code>card_gen</code> to minimize ambiguity, and mathlib do have other ambiguities like <code>ball</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ball_congr\">docs#ball_congr</a> and in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ball_pi\">docs#ball_pi</a>.</p>\n<p>Other possible options:</p>\n<p>Min-gen is sort of a dual notion of max-indep, but <code>corank</code> has other meanings, and <code>dual_rank</code> seems obscure. In graph theory, the dual of max-indep is called minimum (vertex) cover, and they talk about the <a href=\"https://en.wikipedia.org/wiki/Vertex_cover#Definition\">vertex cover number</a>.</p>\n<p><code>dimension</code> seems underutilized in mathlib, but I think it's still usually a maximum (like Krull dimension). </p>\n<p>In any case, I think this notion should be defined for <code>module</code>, and if we want to apply it to a submodule then we just coerce it to a module,</p>",
        "id": 304350052,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665952833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Minimal.20cardinality.20of.20generating.20set/near/304347121\">said</a>:</p>\n<blockquote>\n<p>Anyway, my point is that it's reductive to say \"bytes are cheap\". Short names are not always worse, long names are not always better. It's complex.</p>\n</blockquote>\n<p>for an extreme example of this: i'll be impressed if someone ever finds the cosine rule without knowing what it's called already</p>",
        "id": 304353834,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665956701
    },
    {
        "content": "<p>I didn't know; I searched \"sub two cos\" and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_geometry.law_cos\">docs#euclidean_geometry.law_cos</a> pops out (among 5 results).</p>",
        "id": 304356787,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665959368
    },
    {
        "content": "<p>I think the point is that's just an alias for the \"actual\" result: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_geometry.dist_sq_eq_dist_sq_add_dist_sq_sub_two_mul_dist_mul_dist_mul_cos_angle\">docs#euclidean_geometry.dist_sq_eq_dist_sq_add_dist_sq_sub_two_mul_dist_mul_dist_mul_cos_angle</a></p>",
        "id": 304357639,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665960323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/Minimal.20cardinality.20of.20generating.20set/near/304350052\">said</a>:</p>\n<blockquote>\n<p>Notice that we already use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group.rank\">docs#group.rank</a> to mean the minimal number of generators (rather than the maximal cardinality of independent sets as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.rank\">docs#module.rank</a>), but only defined for finitely generated groups; probably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group.rank\">docs#group.rank</a> should be renamed when we decide what to call this notion for modules.</p>\n</blockquote>\n<p>Just beware that the <a href=\"https://en.wikipedia.org/wiki/Rank_of_a_group\">rank of a group</a> is already an established concept in mathematics for the minimal number of generators of a group.</p>\n<p>Maybe another avenue for names is to consider that we're wanting the minimum rank of a free module <code>F</code> such that there is a surjection <code>F -&gt; M</code>. Would <code>proj_rank</code>, <code>surj_rank</code>, or <code>cov_rank</code> (for \"covering rank\") be sensible? (You wouldn't want to confuse <code>proj_rank</code> with the projective dimension.) Then there is also be the maximum rank of a free module <code>F</code> such that there is an injection <code>F -&gt; M</code>; could that be the <code>inj_rank</code>?</p>",
        "id": 304358261,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665960951
    },
    {
        "content": "<blockquote>\n<p>Just beware that the rank of a group is already an established concept in mathematics for the minimal number of generators of a group.</p>\n</blockquote>\n<p>Okay, so it shouldn't be renamed.</p>",
        "id": 304359218,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665961979
    },
    {
        "content": "<p>Would <code>covrank</code>/<code>fin_covrank</code> be better than <code>grank</code>/<code>fin_grank</code> (where the <code>g</code> stands for both generator and generalized)?</p>",
        "id": 304373104,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665976905
    },
    {
        "content": "<p>I think <code>span_rank</code> and <code>span_finrank</code> are better, since you're gonna use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span\">docs#submodule.span</a> to define the quantity. Pete Clark uses <code>mg</code> in <a href=\"https://mathoverflow.net/a/153681/3332\">this answer</a> and his commutative algebra notes (in which he points out that the quantity behaves badly) though.</p>\n<p>I've also thought about calling span_rank \"upper rank\" and the original rank \"lower rank\", because rank ≤ span_rank always holds over nonzero commutative rings. However, <a href=\"https://math.stackexchange.com/a/80707/12932\">the inequality may reverse even for IBN rings</a>, and I think including the keyword <code>span</code> is clearer. Moreover, over commutative rings, although the <a href=\"https://mathoverflow.net/a/121067/3332\">rank is always the minimum of the local ranks</a> if the module is locally of finite type, the <a href=\"https://math.stackexchange.com/a/2066694/12932\">span_rank can be larger than the maximum</a>.</p>",
        "id": 304478105,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666017764
    }
]