[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- invalid type ascription, term has type</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- λ (s : finset ℕ), ↑s : finset ℕ → set ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- λ (x : ℕ), ↑x : ℕ → ℤ</span>\n</code></pre></div>",
        "id": 198182175,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589972461
    },
    {
        "content": "<p>why does N auto. coerce to Z but not finset to set?</p>",
        "id": 198182189,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589972471
    },
    {
        "content": "<p>(nevermind)</p>",
        "id": 198183954,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589973603
    },
    {
        "content": "<p>If I understand <code>coe</code> correctly, Lean will coerce the first one if it <code>has_coe</code>, the second one if it <code>has_lift</code>. There is </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"n\">cast_coe</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>So the Nat to Int coercion works. But in <code>data.finset</code>, there's <code>has_lift (finset α) (set α)</code> but not <code>has_coe (finset α) (set α)</code>, so the first one doesn't work.</p>",
        "id": 198184580,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589974096
    },
    {
        "content": "<p>Note that <code>cast_coe</code> has changed recently, it is now <code>has_coe_t</code>.  But that doesn't have an effect on the <code>finset</code> coercion, which is exactly how <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> described it.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">900</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"n\">cast_coe</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 198187450,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589976033
    },
    {
        "content": "<p>(The folder I'm working in is on Lean 3.8.0, which is why I still have the old <code>cast_coe</code>)</p>",
        "id": 198187557,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589976112
    },
    {
        "content": "<p>why do we have such a distinction?</p>",
        "id": 198194872,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589979963
    }
]