[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">fun_wrapper</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">fun_wrapper</span><span class=\"bp\">.</span><span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">fun_wrapper</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">id</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">fun_wrapper</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">fun_wrapper</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">fun_wrapper</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fun_wrapper</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 205793861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596461645
    },
    {
        "content": "<p>question: what's the type of <code>id</code> in the statement of <code>foo</code>?</p>",
        "id": 205793872,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596461654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how does type ascription work?</p>",
        "id": 205794188,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596461822
    },
    {
        "content": "<p>Kenny, the new widget interface answers your question about <code>foo</code></p>",
        "id": 205795513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596462458
    },
    {
        "content": "<p><code>id</code> is natural number <code>id</code></p>",
        "id": 205795535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596462476
    },
    {
        "content": "<p>That is pretty interesting. I haven't run the code yet, but I assume it typechecks, and my guess is the following:</p>\n<ul>\n<li><code>(1 : fun_wrapper ℕ)</code> has the expected meaning, the wrapper around <code>@id ℕ</code></li>\n<li>Because this has type <code>fun_wrapper ℕ</code> does not have the type <code>unit -&gt; empty</code> or unify with it, lean inserts a <code>coe_fn</code> into the term</li>\n<li>Now the resulting term <code>coe_fn (@has_one.one (fun_wrapper ℕ) ...) = id</code> is typechecked, finishing up the remaining holes in the term around <code>coe_fn</code> and <code>id</code>.</li>\n<li>Importantly, the type ascription <code>: unit -&gt; empty</code> is now gone, because it has no representation as an expr. We only have a few metavariables left to solve in an otherwise complete <code>expr</code></li>\n<li>The <code>fun_wrapper.has_coe_to_fun</code> instance is inserted, which means that the result type is <code>ℕ -&gt; ℕ</code>, so the rhs is inferred to be <code>@id ℕ</code>, and we are done.</li>\n</ul>",
        "id": 205797198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596463268
    },
    {
        "content": "<p>Note the difference with <code>coe : A -&gt; B</code>, where the output has type <code>B</code>, so a type ascription will cause <code>@coe ?A ?B ...</code>  to solve the <code>?B</code> metavariable. In <code>coe_fn</code> there is no metavariable <code>B</code>, it is a delayed unification of the form <code>has_coe_fo_fun.F ?C ?x =?= B</code>, which doesn't help to solve for <code>?C</code>. I guess lean forgot about this unification constraint when it decided to insert the <code>coe_fn</code> in the term</p>",
        "id": 205797712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596463531
    }
]