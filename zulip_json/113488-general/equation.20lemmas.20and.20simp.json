[
    {
        "content": "<p>What is the effect of putting <code>@[simp]</code> on a <code>def</code> defined with pattern-matching equations? Does it annotate the equation lemmas with <code>@[simp]</code>?</p>",
        "id": 123126635,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519888725
    },
    {
        "content": "<p>When I look at <code>#print &lt;def-name&gt;._main.equations._eqn_1</code>, it only has <code>@[_refl_lemma]</code>.</p>",
        "id": 123126899,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519889399
    },
    {
        "content": "<p>what do you see if you look at the other equations? (see them listed in <code>#print prefix &lt;def-name&gt;</code>)</p>",
        "id": 123126955,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519889458
    },
    {
        "content": "<p>I had to use a fully-qualified <code>&lt;def-name&gt;</code>, but that's a useful command:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">tts</span><span class=\"bp\">.</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">tts</span><span class=\"bp\">.</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"n\">V</span>\n<span class=\"n\">tts</span><span class=\"bp\">.</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"n\">V</span>\n<span class=\"n\">tts</span><span class=\"bp\">.</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">meta_aux</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"n\">V</span>\n<span class=\"n\">tts</span><span class=\"bp\">.</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">varb</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">ts</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">varb</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">tts</span><span class=\"bp\">.</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">varf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">varf</span> <span class=\"n\">x</span>\n<span class=\"n\">tts</span><span class=\"bp\">.</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n  <span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">arr</span> <span class=\"o\">(</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"n\">ts</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"n\">ts</span> <span class=\"n\">t₂</span><span class=\"o\">)</span>\n<span class=\"n\">tts</span><span class=\"bp\">.</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">._</span><span class=\"n\">sunfold</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"n\">V</span>\n<span class=\"n\">tts</span><span class=\"bp\">.</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">varb</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">ts</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">varb</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">tts</span><span class=\"bp\">.</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">varf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">varf</span> <span class=\"n\">x</span>\n<span class=\"n\">tts</span><span class=\"bp\">.</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n  <span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">arr</span> <span class=\"o\">(</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span> <span class=\"n\">ts</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span> <span class=\"n\">ts</span> <span class=\"n\">t₂</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 123127031,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519889630
    },
    {
        "content": "<p>What if you look at <code>#print tts.typ.open.equations._eqn_1 </code>?</p>",
        "id": 123127074,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519889698
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">tts</span><span class=\"bp\">.</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">refl_lemma</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">tts</span><span class=\"bp\">.</span><span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">varb</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">ts</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">varb</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">V</span><span class=\"o\">)),</span> <span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"kn\">open</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"n\">ts</span>\n</pre></div>",
        "id": 123127075,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519889702
    },
    {
        "content": "<p>That's curious. The effect I see is as if those equations were labeled with <code>simp</code>. I wonder if <code>simp</code> is implied by <code>_refl_lemma</code></p>",
        "id": 123127129,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519889806
    },
    {
        "content": "<p><code>@[_refl_lemma]</code> is there whether or not I use <code>@[simp]</code>.</p>",
        "id": 123127137,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519889838
    },
    {
        "content": "<p>We can check something else:</p>\n<div class=\"codehilite\"><pre><span></span>run_cmd attribute.get_instances `simp &gt;&gt;= trace\n</pre></div>",
        "id": 123127138,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519889842
    },
    {
        "content": "<p>Correction: </p>\n<div class=\"codehilite\"><pre><span></span>run_cmd attribute.get_instances `simp &gt;&gt;= tactic.trace ∘ list.take 3\n</pre></div>",
        "id": 123127182,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519889909
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>parsing at line 7[tts.typ.open, finset.sort_to_finset, finset.sort_nodup]\n</pre></div>",
        "id": 123127192,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519889970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"simon.hudon@gmail.com\" data-user-id=\"110026\">@Simon Hudon</span>: What does that mean?</p>",
        "id": 123127237,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519890036
    },
    {
        "content": "<p>so the whole thing is labelled as <code>simp</code>. The <code>simp</code> tactic must have some logic to retrieve the equations related to a definition.</p>",
        "id": 123127248,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519890071
    },
    {
        "content": "<p>Could be.</p>",
        "id": 123127256,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519890092
    },
    {
        "content": "<p><code>attribute.get_instance ```simp``` </code> gives you the list of the names that are labelled with <code>simp</code>. It works with any attribute. Every definition is appended at the beginning so taking only 3 of them was enough and I wanted to see if more than one name was being labelled</p>",
        "id": 123127303,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519890162
    },
    {
        "content": "<p><code>library/init/meta/simp_tactic.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- `get_eqn_lemmas_for deps d` returns the automatically generated equational lemmas for definition d.</span>\n<span class=\"cm\">   If deps is tt, then lemmas for automatically generated auxiliary declarations used to define d are also included. -/</span>\n<span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"n\">get_eqn_lemmas_for</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 123127356,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519890259
    },
    {
        "content": "<blockquote>\n<p>Could be.</p>\n</blockquote>\n<p>It could mean that the behavior can differ from that of using <code>simp</code> lemma or it could just be a way of compressing the list of <code>simp</code> lemmas.</p>",
        "id": 123127357,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519890260
    },
    {
        "content": "<p>Nice! Thanks!</p>",
        "id": 123127361,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519890294
    },
    {
        "content": "<p>This is with <code>set_option trace.simplify true</code>:</p>\n<div class=\"codehilite\"><pre><span></span>3. [simplify.rewrite] [tts.typ.open.equations._eqn_3]: typ.open ts (arr t₁_a t₁_a_1) ==&gt; arr (typ.open ts t₁_a) (typ.open ts t₁_a_1)\n[simplify] eq: typ.open ts t₁_a\n[simplify] eq: ts\n[simplify] eq: t₁_a\n[simplify] eq: typ.open\n</pre></div>",
        "id": 123127419,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519890436
    },
    {
        "content": "<p>So, it seems to be that <code>simp</code> uses the equation lemmas if a <code>def</code> is annotated with <code>@[simp]</code>. This makes me wonder why more definitions in the standard library and mathlib aren't <code>@[simp]</code>. It also makes me wonder if I should use <code>@[simp] def</code> more instead of writing equation lemmas myself.</p>",
        "id": 123127526,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519890654
    },
    {
        "content": "<p><code>library/init/meta/interactive.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">simp_lemmas</span><span class=\"bp\">.</span><span class=\"n\">resolve_and_add</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">simp_lemmas</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ref</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">simp_lemmas</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"n\">p</span> <span class=\"err\">←</span> <span class=\"n\">resolve_name</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">check_no_overload</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- unpack local refs</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">erase_annotations</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span><span class=\"bp\">.</span><span class=\"n\">erase_annotations</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">_</span>           <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">is_valid_simp_lemma_cnst</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">guard</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">save_const_type_info</span> <span class=\"n\">n</span> <span class=\"n\">ref</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">add_simp</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n    <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">eqns</span> <span class=\"err\">←</span> <span class=\"n\">get_eqn_lemmas_for</span> <span class=\"n\">tt</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">eqns</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">save_const_type_info</span> <span class=\"n\">n</span> <span class=\"n\">ref</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">add_simps</span> <span class=\"n\">s</span> <span class=\"n\">eqns</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n    <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span> <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">is_projection</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">u</span><span class=\"o\">))</span>\n    <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">report_invalid_simp_lemma</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr_no_subgoals</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">is_valid_simp_lemma</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">guard</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">save_type_info</span> <span class=\"n\">e</span> <span class=\"n\">ref</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n    <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">report_invalid_simp_lemma</span> <span class=\"n\">n</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 123127584,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519890748
    },
    {
        "content": "<p>To your second question: I think you should, it's often less repetitive</p>",
        "id": 123127639,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519890853
    },
    {
        "content": "<p>I don't know how to answer your first question</p>",
        "id": 123127642,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519890873
    },
    {
        "content": "<p>There's also <code>#print attribute simp</code></p>",
        "id": 123131391,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519898469
    },
    {
        "content": "<p>I believe Leo rather wants us to use <code>simp!</code> than to tag every single def with <code>[simp]</code></p>",
        "id": 123131399,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519898501
    },
    {
        "content": "<blockquote>\n<p>There's also <code>#print attribute simp</code></p>\n</blockquote>\n<p><code>error: invalid #print command</code></p>",
        "id": 123131449,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519898589
    },
    {
        "content": "<p>Ah, this is fun. You can do <code>#print [refl]</code>, but not <code>#print [simp]</code>.</p>",
        "id": 123131615,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519898894
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/commit/368f17d0b1392a5a72c9eb974f15b14462cc1475#diff-f5ed07a9ca7e18052989b6ce28b7eb30\" target=\"_blank\" title=\"https://github.com/leanprover/lean/commit/368f17d0b1392a5a72c9eb974f15b14462cc1475#diff-f5ed07a9ca7e18052989b6ce28b7eb30\"><code>simp!</code></a>:</p>\n<blockquote>\n<ul>\n<li>Add <code>iota_eqn : bool</code> field to <code>simp_config</code>. <code>simp {iota_eqn := tt}</code> uses all non trivial equation lemmas generated by equation/pattern-matching compiler. A lemma is considered non trivial if it is not of the form <code>forall x_1 ... x_n, f x_1 ... x_n = t</code> and a proof by reflexivity. <code>simp!</code> is a shorthand for <code>simp {iota_eqn := tt}</code>. For example, given the goal <code>... |- [1,2].map nat.succ = t</code>, <code>simp!</code> reduces the left-hand-side of the equation to <code>[nat.succ 1, nat.succ 2]</code>. In this example, <code>simp!</code> is equivalent to <code>simp [list.map]</code>.</li>\n</ul>\n</blockquote>",
        "id": 123131630,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519898953
    },
    {
        "content": "<p>Getting closer to Coq <code>cbn</code> :).</p>",
        "id": 123131668,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1519899003
    },
    {
        "content": "<p>“non-trivial equation lemmas” - What does this imply about the trivial equation lemmas, which all of mine probably are?</p>",
        "id": 123131694,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519899115
    },
    {
        "content": "<blockquote>\n<p>Ah, this is fun. You can do <code>#print [refl]</code>, but not <code>#print [simp]</code>.</p>\n</blockquote>\n<p>Is that just a matter of forgetting to include <code>simp</code> somewhere?</p>",
        "id": 123131778,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519899250
    },
    {
        "content": "<p><code>#print [_refl_lemma]</code> works.</p>",
        "id": 123131796,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519899336
    },
    {
        "content": "<p>No, <code>#print [simp]</code> is just a different syntax <a href=\"https://github.com/leanprover/lean/blob/39270fd46f49fecb30649f5ec527da7bbd4cdb13/tests/lean/run/simplifier_custom_relations.lean#L23\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/39270fd46f49fecb30649f5ec527da7bbd4cdb13/tests/lean/run/simplifier_custom_relations.lean#L23\">https://github.com/leanprover/lean/blob/39270fd46f49fecb30649f5ec527da7bbd4cdb13/tests/lean/run/simplifier_custom_relations.lean#L23</a></p>",
        "id": 123131840,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519899423
    },
    {
        "content": "<p>So yeah, <code>#print [simp] default</code> works</p>",
        "id": 123131843,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519899441
    },
    {
        "content": "<blockquote>\n<p>“non-trivial equation lemmas” - What does this imply about the trivial equation lemmas, which all of mine probably are?</p>\n</blockquote>\n<p>Considering <a href=\"http://httpsf//github.com/leanprover/lean/commit/368f17d0b1392a5a72c9eb974f15b14462cc1475#diff-f3c3d54612bd08c035a1578e952b2aeaR216\" target=\"_blank\" title=\"http://httpsf//github.com/leanprover/lean/commit/368f17d0b1392a5a72c9eb974f15b14462cc1475#diff-f3c3d54612bd08c035a1578e952b2aeaR216\">this comment</a>, I think the description in <code>doc/changes.md</code> above is either confusing or misleading:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gi\">+(iota_eqn : bool           := ff) -- reduce using all equation lemmas generated by equation/pattern-matching compiler</span>\n</pre></div>",
        "id": 123131887,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519899537
    },
    {
        "content": "<p>No, \"non-trivial\" basically means \"defined by pattern matching\"</p>",
        "id": 123131894,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519899583
    },
    {
        "content": "<p>I.e. \"more than one equation\"</p>",
        "id": 123131895,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519899595
    },
    {
        "content": "<p>So, could you replace “<em>non trivial equation lemmas generated by equation/pattern-matching compiler. A lemma is considered non trivial if it is not of the form <code>forall x_1 ... x_n, f x_1 ... x_n = t</code> and a proof by reflexivity</em>” above with “<em>equation lemmas generated by equation/pattern-matching compiler</em>” and the statement would be the same?</p>",
        "id": 123131966,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519899707
    },
    {
        "content": "<p>I'm not sure anymore. Perhaps the <code>iota_eqn</code> comment should instead be extended with a \"non-trivial\"</p>",
        "id": 123132241,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519900202
    },
    {
        "content": "<blockquote>\n<p>So yeah, <code>#print [simp] default</code> works</p>\n</blockquote>\n<p>Yeah, it's nice to see my equation lemmas appear in that list after adding <code>@[simp]</code> to a <code>def</code>.</p>",
        "id": 123132382,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519900448
    },
    {
        "content": "<p>I'm not sure if there are any alternative arguments to <code>#print [simp]</code>. It doesn't appear to take a prefix or identifier name: <code>unknown simp_lemmas collection</code>.</p>",
        "id": 123132395,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519900531
    },
    {
        "content": "<p>I get syntax errors on the second <code>simp!</code> in <code>induction xs; [simp!, {cases ts, simp!}]</code>.</p>",
        "id": 123133132,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519901942
    },
    {
        "content": "<p>But <code>induction xs; [simp!, {cases ts, simp {iota_eqn := tt}}]</code> works.</p>",
        "id": 123133208,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519902065
    },
    {
        "content": "<p><code>!}</code> is a separate token used for hole commands</p>",
        "id": 123133979,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519903680
    }
]