[
    {
        "content": "<p>I'm trying to prove</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">unit_ne_bool</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">≠</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>and hoping there's a easy proof of this. </p>\n<p>One possible direction is to prove that <code>unit-&gt;unit</code> is singleton but <code>bool-&gt;bool</code> is not but I was hoping for something more trivial.</p>",
        "id": 195058019,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1587647492
    },
    {
        "content": "<p>I don't see how introducing these functions could help because it's presumably simpler to prove that <code>unit</code> is a singleton but <code>bool</code> is not.</p>",
        "id": 195058515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587647693
    },
    {
        "content": "<p>(Is this to do with the Kata?)</p>",
        "id": 195058903,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587647873
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 195060195,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587648457
    },
    {
        "content": "<p>yeah this might be a kata spoiler</p>",
        "id": 195060344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587648518
    },
    {
        "content": "<p>It's not from the kata, I needed it for this proof <a href=\"https://github.com/skaslev/papers/blob/94950c7b7be5278561eab639d82b391872c3e042/kan.lean#L370\" title=\"https://github.com/skaslev/papers/blob/94950c7b7be5278561eab639d82b391872c3e042/kan.lean#L370\">https://github.com/skaslev/papers/blob/94950c7b7be5278561eab639d82b391872c3e042/kan.lean#L370</a></p>\n<p>(kata spoilers ahead) this is what I came up with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">iscontr</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"n\">def</span> <span class=\"n\">iscontr_unit</span> <span class=\"o\">:</span> <span class=\"n\">iscontr</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">unit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">notcontr_bool</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">iscontr</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">ff</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">unit_ne_bool</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">≠</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">notcontr_bool</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">iscontr_unit</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Is there an easier proof?</p>",
        "id": 195062670,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1587649565
    },
    {
        "content": "<p>I think it would be slightly shorter to instead use the property <code>forall x y, x = y</code> but otherwise I think the answer is no.</p>",
        "id": 195062883,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587649679
    },
    {
        "content": "<p>You could use the <code>subsingleton</code> typeclass in Lean I guess, but your proof looks pretty direct.</p>",
        "id": 195063151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587649800
    },
    {
        "content": "<p>Another proof, if you were prepared to use mathlib machinery, would be to use the fact that both <code>bool</code> and <code>unit</code> were known to be finite types, and <code>bool</code> has cardinality 2 whereas <code>unit</code> has cardinality 1.</p>",
        "id": 195063266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587649846
    },
    {
        "content": "<p>Also if you're willing to use mathlib machinery, <code>iscontr_unit</code> and <code>notcontr_bool</code> are decidable, so proved by <code>dec_trivial</code>.</p>",
        "id": 195064545,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587650405
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">unit_ne_bool</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">≠</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cast</span> <span class=\"n\">h</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">h</span> <span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">h</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 195064972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587650604
    }
]