[
    {
        "content": "<p>Hi all, I'm ready to present a first cut at an <a href=\"https://github.com/digama0/olean-rs\" target=\"_blank\" title=\"https://github.com/digama0/olean-rs\">olean file parser</a>, written in Lean and Rust. I'm hoping it can be useful for people that want to do analysis on lean files without having to grep the files or something. Plus this makes lots of other goodies accessible like notations and VM code for definitions.</p>",
        "id": 152149295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545178887
    },
    {
        "content": "<p>That's a cool idea. Does the olean file format contain enough information for building useful linting tools? For example, could it be used to identify redundant imports?</p>",
        "id": 152150579,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1545180519
    },
    {
        "content": "<p>yes</p>",
        "id": 152151691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545182225
    },
    {
        "content": "<p>well, you would have to figure out what definitions come from where, so you would have to read all the olean files not just the target file</p>",
        "id": 152151708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545182268
    },
    {
        "content": "<p>I thought olean is OS-dependent</p>",
        "id": 152158823,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545194460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, I don't think it is. I managed to move olean files between windows and os x.</p>",
        "id": 152160989,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1545198224
    },
    {
        "content": "<p>then what’s stopping us from removing olean from gitignore?</p>",
        "id": 152161042,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545198254
    },
    {
        "content": "<p>because lean cares deeply about timestamps, and git won't get these right</p>",
        "id": 152161057,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1545198330
    },
    {
        "content": "<p>(besides that most people have a deep revulsion to binary artifacts in version control :-)</p>",
        "id": 152161071,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1545198363
    },
    {
        "content": "<p>I can say for sure now that it's not OS dependent</p>",
        "id": 152162356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545200798
    },
    {
        "content": "<p>although it is pretty haphazard</p>",
        "id": 152162367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545200821
    },
    {
        "content": "<p>Because of the way intermediate exprs are saved and reused, you can't skip over any part of the file. If some macro is not understood, then everything stops</p>",
        "id": 152162379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545200881
    },
    {
        "content": "<p>Thanks for writing this.  I don't have an immediate use, but was always curious what was in those files.  I'm curious how much Lean 4 will help with runtime performance (assuming they keep .olean files).</p>",
        "id": 152165778,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1545206582
    },
    {
        "content": "<blockquote>\n<p>Hi all, I'm ready to present a first cut at an <a href=\"https://github.com/digama0/olean-rs\" target=\"_blank\" title=\"https://github.com/digama0/olean-rs\">olean file parser</a>, written in Lean and Rust. I'm hoping it can be useful for people that want to do analysis on lean files without having to grep the files or something. Plus this makes lots of other goodies accessible like notations and VM code for definitions.</p>\n</blockquote>\n<p>It looks like a very useful tool (once documented), but is it wise to do it for Lean 3? From Sebastian's talk that we watch yesterday, it seems this tool will have to be rewritten from the beginning for Lean 4. Maybe it would make more sense to focus on stuff that will be easier to port (like modules over multiple rings), unless this olean tool is something you could use for academic purposes (papers, thesis...).</p>",
        "id": 152172886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545215335
    },
    {
        "content": "<p>meh, I've been hearing that for a long time</p>",
        "id": 152176116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545219325
    },
    {
        "content": "<p>I expect it will require a lot of adjustment for lean 4; in fact it's best to think of this as documenting the lean 3 olean file format</p>",
        "id": 152176179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545219396
    },
    {
        "content": "<p>which isn't going to change since lean 3 is EOL</p>",
        "id": 152176183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545219418
    },
    {
        "content": "<p>lean 4 offers lots of things that may make this less necessary, but right now, in lean 3, it's difficult to get at some information without lots of hackery. Well here's a nice package of hackery so that you don't have to</p>",
        "id": 152176268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545219536
    },
    {
        "content": "<p>Yeah, you should be able to use Lean's actual implementation in Lean 4 for this</p>",
        "id": 152176286,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1545219591
    },
    {
        "content": "<p>it's a brave new world</p>",
        "id": 152176349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545219649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> This probably doesn't affect lean 4 because it's been changed too much, but I discovered a very peculiar condition by checking the olean parser against everything in mathlib. I've got it down to just one error, in <code>group_theory.coset</code>. The offending definition is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">,</span> <span class=\"n\">elab_strategy</span><span class=\"o\">,</span> <span class=\"n\">to_additive</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">induction_on</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">quotient_group</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span> <span class=\"n\">x</span> <span class=\"n\">H</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">,</span> <span class=\"n\">elab_strategy</span><span class=\"o\">]</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span>\n</pre></div>\n\n\n<p>The bizarre part here is the use of the <code>elab_strategy</code> attribute, which is supposed to be internal-use-only. This attribute has data, an enum which can have three possible values. Unlike lean's deserializer, I'm validating the byte before storing it in the enum, and I'm finding weird random numbers like <code>126</code> instead of <code>0,1,2</code> like expected.</p>\n<p>Since <code>elab_strategy</code> is internal only, it shouldn't even be allowed in user files, but I guess it is in this case. I checked what the parser does when it reads an elab_strategy, and it calls <code>elaborator_strategy_attribute_data::parse(p)</code>, which isn't implemented, so it falls back on the default implementation which does nothing. So the <code>m_status</code> variable ends up filled with random junk, which then gets written into the olean file during serialization.</p>",
        "id": 152242814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545296360
    },
    {
        "content": "<p>Ah, interesting. Yeah, all attribute parsing will have to be reimplemented in Lean in Lean 4.</p>",
        "id": 152243057,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1545296720
    },
    {
        "content": "<p>argh... <code>#eval</code> and <code>example</code> leave no trace in the olean file. I was hoping to get a hold of some code to execute, but this makes things harder</p>",
        "id": 152321223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545387848
    },
    {
        "content": "<p>I upgraded the viewer so it can now follow lean cross references in a project. One application of this is viewing the dependencies of a file. Here is the list of dependencies of <code>analysis.real</code>, in the order lean sees them:</p>\n<div class=\"codehilite\"><pre><span></span>$ cargo run -- -p ../mathlib -d analysis.real\n    Finished dev [unoptimized + debuginfo] target(s) in 0.09s\n     Running `target\\debug\\olean-rs.exe -p ../mathlib -d analysis.real`\ncan&#39;t find init.data.lemmas\npath = [&quot;C:\\\\Users\\\\Mario\\\\lean\\\\lean\\\\library&quot;, &quot;C:\\\\Users\\\\Mario\\\\lean\\\\lean\\\\lib\\\\lean\\\\library&quot;, &quot;C:\\\\Users\\\\Mario\\\\lean\\\\mathlib\\\\./.&quot;]\ncan&#39;t find analysis.emetric_space\npath = [&quot;C:\\\\Users\\\\Mario\\\\lean\\\\lean\\\\library&quot;, &quot;C:\\\\Users\\\\Mario\\\\lean\\\\lean\\\\lib\\\\lean\\\\library&quot;, &quot;C:\\\\Users\\\\Mario\\\\lean\\\\mathlib\\\\./.&quot;]\ninit.core\ninit.logic\n[snip]\ninit.data\ninit\ndata.prod\ndata.dlist\ndata.dlist.basic\ncategory.basic\ntactic.basic\ntactic.cache\nlogic.basic\ndata.option.defs\nlogic.function\ntactic.rcases\ntactic.generalize_proofs\ntactic.split_ifs\ndata.list.defs\ndata.sum\ntactic.ext\ntactic.tauto\ntactic.replacer\ntactic.simpa\nmeta.rb_map\ncategory.functor\ncategory.applicative\ncategory.traversable.basic\ntactic.squeeze\ntactic.interactive\ntactic.finish\ndata.subtype\ndata.set.basic\nalgebra.order\norder.basic\norder.lattice\ndata.bool\ndata.option.basic\ntactic.pi_instances\norder.bounded_lattice\norder.complete_lattice\norder.bounds\ndata.equiv.basic\nalgebra.group\nalgebra.ordered_group\nalgebra.ring\ndata.nat.cast\nalgebra.ordered_ring\ndata.nat.basic\ndata.buffer\ndata.buffer.parser\ntactic.alias\ntactic.mk_iff_of_inductive_prop\nlogic.relator\nlogic.relation\ndata.sigma.basic\ndata.sigma\ndata.fin\ndata.list.basic\ndata.list.perm\ntactic.wlog\nalgebra.order_functions\ntactic.monotonicity.basic\norder.boolean_algebra\norder.complete_boolean_algebra\norder.galois_connection\ndata.set.lattice\ncategory.traversable.instances\ncategory.traversable.lemmas\ncategory.traversable\ncategory.traversable.derive\ntactic.monotonicity.interactive\ntactic\ndata.nat.sqrt\ndata.nat.pairing\ndata.equiv.nat\ndata.equiv.encodable\ndata.equiv.denumerable\nlogic.embedding\norder.order_iso\ndata.vector\ndata.vector2\ncategory.traversable.equiv\ndata.array.lemmas\ndata.list.sort\ndata.quot\ndata.char\ndata.string\nalgebra.field\nalgebra.char_zero\nalgebra.ordered_field\ndata.int.basic\nalgebra.group_power\ndata.multiset\ndata.finset\nalgebra.big_operators\ndata.fintype\ndata.equiv.list\ndata.set.finite\ndata.set.function\ndata.set.countable\norder.conditionally_complete_lattice\ndata.real.cau_seq\ndata.real.cau_seq_completion\ndata.nat.gcd\ndata.pnat\ndata.int.sqrt\ndata.rat\nalgebra.archimedean\ndata.real.basic\ndata.real.nnreal\norder.zorn\ndata.list\norder.filter\norder.liminf_limsup\nalgebra.module\nalgebra.pi_instances\ndata.set.intervals\ndata.equiv.algebra\nanalysis.topology.topological_space\nanalysis.topology.continuity\nanalysis.topology.uniform_space\ndata.finsupp\nlinear_algebra.basic\ndata.nat.prime\nalgebra.gcd_domain\ndata.int.gcd\nring_theory.associated\nring_theory.ideals\nanalysis.topology.topological_structures\nanalysis.metric_space\ntactic.converter.old_conv\ntactic.converter.interactive\ntactic.norm_num\ntactic.ring\ntactic.linarith\nanalysis.real\n</pre></div>",
        "id": 152387511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545481658
    },
    {
        "content": "<p>How hard would it to be to produce a \"class hierarchy\", showing all the classes defined and which ones extend which others?</p>",
        "id": 152483090,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545682371
    }
]