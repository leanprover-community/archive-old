[
    {
        "content": "<p>Is there a more powerful version of exact_mod_cast that can handle casting issues 'inside sums'? (Or any chance of upgrading exact_mod_cast to do this). e.g.:</p>\n<p><code>lemma test (D : finset ℕ) (h : 0 &lt; ∑ d in D, ((1 : ℚ)/d)) : 0 &lt; ∑ d in D, ((1 : ℝ)/d) :=</code><br>\nor<br>\n<code>\nlemma test (D : finset ℕ) (h : (1:ℚ)/2 &lt; ∑ d in D, 1/d) : (1:ℝ)/2 &lt; ∑ d in D, 1/d :=</code></p>\n<p>(Ideally both of these goals would be closed by exact_mod_cast h).</p>",
        "id": 283161506,
        "sender_full_name": "Thomas Bloom",
        "timestamp": 1653121472
    },
    {
        "content": "<p>Just noting that this works, as a comparison:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp, norm_cast]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">rat.cast_sum</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">map_sum</span> <span class=\"o\">(</span><span class=\"n\">rat.cast_hom</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rat.cast_lt.2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 283161537,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653121531
    },
    {
        "content": "<p>(I'm PRing <code>rat.cast_sum</code>)</p>",
        "id": 283161541,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653121551
    },
    {
        "content": "<p>I think the problem is that the <code>norm_cast</code> in <code>exact_mod_cast</code> brushes casts the wrong way. It doesn't manage to turn <code>0 : ℝ</code> into <code>(0 : ℚ) : ℝ</code>, which is needed to make progress.</p>",
        "id": 283161605,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653121656
    },
    {
        "content": "<p>I think I also have <code>rat.cast_sum</code> in the unit fractions project because I also hit this issue!</p>",
        "id": 283184050,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653153862
    }
]