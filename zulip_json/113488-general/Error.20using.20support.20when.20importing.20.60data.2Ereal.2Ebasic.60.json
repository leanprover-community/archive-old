[
    {
        "content": "<p>Hi, here's a minimal example showing that importing <code>data.real.basic</code> may cause an unexpected deep recursion error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.support</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span> <span class=\"c1\">--delete this line and it compiles</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">amc12a_2012_p24</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">finset.Ico</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">2012</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∘</span> <span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∘</span> <span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">σ.support</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1341</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(h/t <span class=\"user-mention\" data-user-id=\"398581\">@Mantas Baksys</span>)</p>\n<p>What is the preferred process to report this as a potential bug? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 271982134,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1644935598
    },
    {
        "content": "<p>For context:</p>\n<ul>\n<li>the original statements has additional hypothesis that require the reals.</li>\n<li>this statement used to compile correctly without recursion error on older mathlib, in particular: <code>2fd713a76e15eebdcdfd2f94472584b3f5f2bfc7</code></li>\n</ul>",
        "id": 271982366,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1644935692
    },
    {
        "content": "<p>Note that a more  minimal example (wrt imports of <code>data.real.basic</code>) on the import chain is the following  </p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>import group_theory.perm.support\nimport data.nat.interval\nimport data.pnat.basic --delete this line and it compiles\n\nopen_locale big_operators\n\ntheorem amc12a_2012_p24\n  (a : ℕ → ℕ)\n  (σ : equiv.perm (finset.Ico (1 : ℕ) 2012))\n  (h₆ : ∀ i j, i &lt; j → (a ∘ coe ∘ σ) j ≤ (a ∘ coe ∘ σ) i) :\n  ∑ k in σ.support, (k : ℕ) = 1341 := sorry\n</code></pre></div>",
        "id": 271982692,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1644935828
    },
    {
        "content": "<p>Even more minimal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span> <span class=\"c1\">--delete this line and it compiles</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">finset.Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">2012</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 271983607,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644936227
    },
    {
        "content": "<p>I guess lean is recursing a lot trying to unify pnat with <code>finset.Ico 0 2012</code>, when searching for decidable equality instances</p>",
        "id": 271985130,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644936814
    },
    {
        "content": "<p>A workaround is <code>local attribute [-instance] pnat.decidable_eq</code></p>",
        "id": 271985155,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644936821
    },
    {
        "content": "<p>Alternatively marking pnat as irreducible locally also works</p>",
        "id": 271985440,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644936948
    },
    {
        "content": "<p>Oh wait, does this mean the <code>α</code> in <code>decidable_eq α</code> is unified with semireducible transparency because it only appears as an implicit argument after unfolding <code>decidable_eq α</code>?</p>",
        "id": 271985534,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644936977
    }
]