[
    {
        "content": "<p>Is there a good way to deal with finset-indexed unions of finsets, their cardinalities, and so on? I don't see much in the library -- only some workarounds with <code>supr</code>, and some cardinality operations on fintypes. Am I missing something obvious?</p>",
        "id": 222462824,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1610471268
    },
    {
        "content": "<p>You can use <code>finset.bind</code> to take a finset union of a finset</p>",
        "id": 222470184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610474322
    },
    {
        "content": "<p>and we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_bind\">docs#finset.card_bind</a> to prove a cardinality theorem about it</p>",
        "id": 222470324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610474381
    },
    {
        "content": "<p>Ah, I forgot. <code>s.bind t</code> is what we call <code>bUnion</code> when we talk about sets. Someone should document that! Thanks.</p>",
        "id": 222471575,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1610474952
    },
    {
        "content": "<p>I've been using <code>finset.bind</code> recently, and I appreciate where the name comes from, but if a sufficiently motivated individual were up to a rename, would anyone be opposed to it being called something like <code>finset.Union</code>?</p>",
        "id": 222471963,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610475144
    },
    {
        "content": "<p><code>finset.fUnion</code> ;-)</p>",
        "id": 222476249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610477031
    },
    {
        "content": "<p><code>finset.finUnion</code>?</p>",
        "id": 222477287,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610477530
    },
    {
        "content": "<p>seems to match <code>*set.*Union</code></p>",
        "id": 222477321,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610477549
    },
    {
        "content": "<p>I prefer <code>bUnion</code> since it matches the set naming</p>",
        "id": 222478539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610478104
    },
    {
        "content": "<p>We also have <code>finset.sup</code>, shouldn't this be the same thing?</p>",
        "id": 222483088,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1610480146
    },
    {
        "content": "<p>Isn't sup just for two things?</p>",
        "id": 222484121,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610480652
    },
    {
        "content": "<p>It looks like <code>finset.bind</code> is a specialized <code>finset.sup</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finset.bind</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span>\n<span class=\"kd\">def</span> <span class=\"n\">finset.sup</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>The first is defined using <code>multiset.bind</code> (which is iterated unions of multisets), and the second by iterated unions of finsets.  Computationally, the second one removes duplicates as it goes.</p>",
        "id": 222486579,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610481753
    },
    {
        "content": "<p>Do we have a lemma equating them?</p>",
        "id": 222492481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610484650
    },
    {
        "content": "<p>It didn't look like it, so I created <a href=\"https://github.com/leanprover-community/mathlib/issues/5717\">#5717</a>.  I'm waiting to see if mathlib still compiles labeling it with awaiting-review.</p>",
        "id": 222506787,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610491506
    },
    {
        "content": "<p>Instead of (or in addition to) renaming <code>finset.bind</code>, there's an option of reworking the notation for Union to use a typeclass and use  <code>finset.bind</code> to implement it.  I got something that seems to work for both sets and finsets (with the correct decidability requirements):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.complete_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_Union</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Union</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⋃`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">has_Union.Union</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">set.has_Union</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_Union</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Union</span> <span class=\"o\">:=</span> <span class=\"n\">set.Union</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">set.mem_Union'</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.mem_Union</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finset.has_Union_prop_nodep</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_Union</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Union</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finset.has_Union_prop</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_Union</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Union</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"bp\">∅</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finset.has_bUnion_nodep</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_Union</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Union</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finset.has_bUnion</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_Union</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Union</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finset.has_Union</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_Union</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Union</span> <span class=\"o\">:=</span> <span class=\"n\">finset.univ.bind</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.bUnion_eq_bind</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"n\">i</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.bind</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_Union.Union</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.Union_eq_univ_bind</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset.univ.bind</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_Union.Union</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.bUnion_bUnion_eq</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ι'</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">∈</span><span class=\"n\">s'</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.bind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s'.bind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_Union.Union</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 222648593,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610573481
    },
    {
        "content": "<p>Why do you have <code>f</code> in the typeclass arguments?</p>",
        "id": 222661346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610580042
    },
    {
        "content": "<p>Oh, I guess the variant instances answer that</p>",
        "id": 222661527,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610580154
    },
    {
        "content": "<p>Getting the notation to work for both sets and finsets (and multisets?) seems like a great change to me!</p>",
        "id": 222729437,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610636986
    },
    {
        "content": "<p>If <code>⋃i∈s, f i</code> means to union over every <code>i</code> with multiplicity when <code>s</code> is a multiset, then these two additional instances give fancy notation for <code>multiset.bind</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">multiset.has_Union_prop_nodep</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_Union</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">multiset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Union</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">multiset.has_bUnion</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">multiset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_Union</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">multiset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Union</span> <span class=\"o\">:=</span> <span class=\"n\">s.bind</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">multiset.bUnion_eq_bind</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"n\">i</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.bind</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 222755987,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610647016
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5813\">#5813</a> is renaming <code>multiset.bind</code> to <code>multiset.bUnion</code> and <code>finset.bind</code> to <code>finset.bUnion</code>.</p>\n<p>(Is there a way to create a definition that causes a deprecation warning to show up if you use it? Or maybe a linter error?)</p>",
        "id": 223294027,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611090192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/finsets.2C.20unions.2C.20and.20cardinality/near/223294027\">said</a>:</p>\n<blockquote>\n<p>(Is there a way to create a definition that causes a deprecation warning to show up if you use it? Or maybe a linter error?)</p>\n</blockquote>\n<p>It might be possible to adapt the <code>&gt;</code>/≥` linter to do so. But in this case, the mathlib development style is to just get rid of the old name and let the existing usages cause an error. Then the new name will be used soon enough.</p>",
        "id": 223350070,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1611135613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> pointed out that <code>multiset.bind</code> is not actually the union of the indexed family of multisets, but the sum, so <a href=\"https://github.com/leanprover-community/mathlib/issues/5813\">#5813</a> is now just for renaming <code>finset.bind</code> to <code>finset.bUnion</code>.</p>\n<p>It might be good having the corresponding <code>multiset</code> union of an indexed family:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">multiset.bUnion</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">multiset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sup</span>\n</code></pre></div>\n<p>(It turns out <code>finset.sup</code> and <code>multiset.sup</code> have different interfaces, hence the <code>multiset.map</code> in there.)</p>",
        "id": 223411059,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611165835
    },
    {
        "content": "<p>Any objections to <a href=\"https://github.com/leanprover-community/mathlib/issues/5813\">#5813</a> (renaming <code>finset.bind</code> to <code>finset.bUnion</code>)? It's a big change and likely to break a lot of code that depends on mathlib, but should make the function much easier to find.</p>\n<p>(One thing we should also really do that would help with that is greatly expand the module docstring of <code>data.finset.basic</code>.)</p>",
        "id": 223848597,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611539827
    },
    {
        "content": "<p>Yes, please rename. I couldn't find <code>finset.bUnion</code> in any searches. It seems like the most obvious name. Also why is <code>finset.attach</code> called <code>finset.attach</code>? Why is it not <code>finset.to_idk_fintype_val</code>? (I doubt this is any better.)</p>",
        "id": 223850190,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1611542323
    },
    {
        "content": "<p>It doesn't spit out a fintype though right? I guess it is analogous to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.attach\">docs#list.attach</a></p>",
        "id": 223850332,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611542525
    },
    {
        "content": "<p>Oops. My bad.</p>",
        "id": 223850488,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1611542821
    },
    {
        "content": "<p>I agree its not an obvious name though!</p>",
        "id": 223850504,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611542869
    },
    {
        "content": "<p>it's not an easy thing to name</p>",
        "id": 223850548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611542895
    },
    {
        "content": "<p>A lot of definitions on finset (including <code>finset.bind</code>) got their names because they are analogous to definitions on <code>multiset</code> and/or <code>list</code></p>",
        "id": 223850562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611542968
    },
    {
        "content": "<p>unfortunately this clashes in some places with naming on <code>set</code></p>",
        "id": 223850567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611542987
    },
    {
        "content": "<p>and for the most part <code>finset</code> prefers <code>set</code> like naming over <code>list</code> like, for example the empty thing is called <code>list.nil</code>, <code>multiset.zero</code>, <code>finset.empty</code> and <code>set.empty</code></p>",
        "id": 223850631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611543047
    },
    {
        "content": "<p>I think we should try to minimize naming variation where we can, so if this is called <code>list.attach</code> already then the finset version should be called <code>finset.attach</code> unless there is a much stronger name association on sets</p>",
        "id": 223850700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611543144
    },
    {
        "content": "<p>Yeah at least something like <code>map_subtype_mem</code> seems vaguely more descriptive than attach, if you asked me what <code>list.attach</code> does I'd never be able to guess. Of course if things have well known name in Haskell/FP that's a reason to use a less descriptive name if its to remain consistent with those languages, but it doesn't seem like that is the case here?</p>",
        "id": 223850780,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611543253
    },
    {
        "content": "<p>I think that definitions should have single word names (or at least single name segment names) where possible, because otherwise it makes it much more confusing when reading theorems about the definition</p>",
        "id": 223850872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611543427
    },
    {
        "content": "<p><code>list.filter_map</code> is a naming nightmare</p>",
        "id": 223850888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611543445
    },
    {
        "content": "<p>Is it possible to have both <code>finset.bind</code> and <code>finset.bUnion</code> with aliases?</p>",
        "id": 223850943,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611543502
    },
    {
        "content": "<p>yes, although does that mean we're duplicating the theorems too?</p>",
        "id": 223850958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611543551
    },
    {
        "content": "<p>if we do add an alias we still shouldn't use it in mathlib</p>",
        "id": 223850967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611543586
    },
    {
        "content": "<p>In lieu of <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>'s  comment on expanding <code>finset.basic</code> docs, I've made a very rough PR (<a href=\"https://github.com/leanprover-community/mathlib/issues/5893\">#5893</a>) that is not finished. I'm not entirely sure what standards there are for writing paragraphs upon paragraphs of documentation, so I've just taken my best shot at it for now. </p>\n<p>Anyone who has time to add something, please do!</p>",
        "id": 224000328,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1611640691
    },
    {
        "content": "<p>Looks good so far, unfinished PRs are Ok, you can tag it with WIP and help-wanted if you want.<br>\nYou can also preview (roughly) how it will look using <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> s previewer <a href=\"https://observablehq.com/@bryangingechen/github-lean-file-viewer?url=%22https://github.com/leanprover-community/mathlib/pull/5893/%22#docs\">https://observablehq.com/@bryangingechen/github-lean-file-viewer?url=%22https://github.com/leanprover-community/mathlib/pull/5893/%22#docs</a> here it looks like the numbered lists aren't displaying properly, I think markdown syntax needs to be like</p>\n<div class=\"codehilite\" data-code-language=\"markdown\"><pre><span></span><code><span class=\"k\">1.</span> blah\n<span class=\"k\">2.</span> blah blah\n</code></pre></div>\n<p>to work properly</p>",
        "id": 224000633,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611641100
    },
    {
        "content": "<p>Thanks for doing this <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>!</p>",
        "id": 224000723,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611641241
    },
    {
        "content": "<p>Here's another attempt at generalized big union notation, and it seems to work, but it should be tested with some real math rather than my basic examples.  One wart, to make the code simpler, is to have a default instance for the <code>Union</code> class called <code>Union.failure</code> to help with defining the instances for <code>finset</code> bounded unions -- the issue has to do with missing decidable instances.</p>\n<p>A cool thing is that you can define instances for unioning over properties whose support is finite: <code>(⋃(i&lt;10), finset.range i) = finset.range 9</code>.  It can even handle dependent finite unions: <code>(⋃i (h:i&lt;10), ({⟨i, h⟩} : finset (fin 10))) = finset.univ</code>.</p>\n<p>I imagine this design pattern would work for summation and product notation, too.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">new_Union</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Union</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">union</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⋃`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">Union.union</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n<span class=\"sd\">/-- To have bounded unions, there needs to be a `Union.union` instance for the internal</span>\n<span class=\"sd\">union (the `⋃(h : x ∈ s), f x`) even when one doesn't technically exist, for example</span>\n<span class=\"sd\">due to a lack of decidable equality for `finset`.  As a hack, we have this `Union.failure`</span>\n<span class=\"sd\">type that gives a low-priority default instance. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Union.failure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[priority 0]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Union.default_failure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Union</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Union.failure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">union</span> <span class=\"o\">:=</span> <span class=\"n\">Union.failure.mk</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">set_Union</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Union</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">union</span> <span class=\"o\">:=</span> <span class=\"n\">set.Union</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fintype_Union</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Union</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">union</span> <span class=\"o\">:=</span> <span class=\"n\">finset.univ.bUnion</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finset_dep_bUnion</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Union</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Union.union</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">union</span> <span class=\"o\">:=</span> <span class=\"n\">s.attach.bUnion</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finset_bUnion</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Union</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Union.union</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">union</span> <span class=\"o\">:=</span> <span class=\"n\">s.bUnion</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finset_dep_bUnion_fin_prop</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}]</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Union</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Union.union</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">union</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">bUnion</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finset_bUnion_fin_prop</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}]</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Union</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Union.union</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">union</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">bUnion</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">set_test</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Union.union</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Union.union</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Union.union</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Union.union</span><span class=\"o\">],</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">set_test</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">finset_test</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.bUnion</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset.univ.bUnion</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">∈</span><span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Union.union</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Union.union</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">&lt;</span><span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"n\">finset.range</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset.range</span> <span class=\"mi\">9</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Union.union</span><span class=\"o\">],</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">i</span><span class=\"bp\">&lt;</span><span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"o\">({⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">finset.univ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Union.union</span><span class=\"o\">],</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">finset_test</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">new_Union</span>\n</code></pre></div>",
        "id": 224129427,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611711095
    },
    {
        "content": "<p>It works for summation notation, too.  For example, <code>2 * (∑(i ≤ n), i) = n * (n + 1)</code>.</p>\n<p>This also gives a nice way to do summations over multisets.  We can define <code>(∑ (x ∈ s), f x) = (s.map f).sum</code>, where the sum is done with multiplicity.  (This is also another notation for <code>multiset.bind</code>, since it's defined to be the sum of an indexed family of multisets.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">new_sum</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`∑`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">has_sum.sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n<span class=\"sd\">/-- This is a hack to help define bounded sums.  Try removing it to see why it's necessary. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">has_sum.failure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[priority 0]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_sum.default_failure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">has_sum.failure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"n\">has_sum.failure.mk</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fintype_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"n\">t</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"n\">finset.univ.sum</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finset_dep_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_sum.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"n\">s.attach.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finset_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_sum.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"n\">s.sum</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finset_dep_sum_fin_prop</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}]</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_sum.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finset_sum_fin_prop</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}]</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_sum.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_le_eq_sum_range</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_sum.sum</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">finset.sum_image</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n  <span class=\"n\">tidy</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_le_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sum_le_eq_sum_range</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">has_sum.sum</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sum_le_eq_sum_range</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_sum.sum</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_le_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">multiset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.val.bind</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- Sum over a multiset with repeats -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">multiset_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_sum.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">multiset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.bind</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">new_sum</span>\n</code></pre></div>",
        "id": 224132747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611714333
    },
    {
        "content": "<p>(A downside with this right now is that lemma statements that use the notation are in terms of <code>has_sum.sum</code>, where the current notation is guaranteed to be <code>finset.sum</code>, so you can easily use it without <code>open_locale big_operators</code>.)</p>",
        "id": 224132955,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611714555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> that looks really nice! And those downsides aren't very big downsides to me.<br>\nIf you have a generic class for using some sort of notation, like <code>Union.union</code> or <code>has_sum.sum</code> etc, then I don't think it needs to be local notation anymore.</p>",
        "id": 224138721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611721353
    },
    {
        "content": "<p>Does your sum/union notation allow arbitrarily nested dependent binders like are allowed today? Or only ones that match your patterns?</p>",
        "id": 224150356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611734933
    },
    {
        "content": "<p>I guess the litmus test would be to see whether we need to change 95% of the library when switching to this or only 5%.</p>",
        "id": 224150486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611735024
    },
    {
        "content": "<p>It would be cool if something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_hom\">docs#finset.sum_hom</a> were part of the has_sum typeclass too, since that would unify a lot of lemmas</p>",
        "id": 224151784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611736028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> It supports arbitrary nesting.  The patterns are applied \"outside-in\" so to speak.  There are some examples of nesting in the union example.</p>",
        "id": 224235171,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611775783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Switching to <code>has_union</code>, starting with just <code>set.Union</code>, probably should be a small change.  Switching <code>finset.bUnion</code> uses to <code>has_union.union</code> notation would probably be not so much bigger than the rename to <code>finset.bUnion</code> (something like 25 files).  I'm not sure how much effort summation/product notation would be yet.</p>",
        "id": 224236732,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611776486
    },
    {
        "content": "<p>back when I introduced notation for <code>finset.sum</code> it was an \"OK\" refactor, I think</p>",
        "id": 224236854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611776535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/finsets.2C.20unions.2C.20and.20cardinality/near/224151784\">said</a>:</p>\n<blockquote>\n<p>It would be cool if something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_hom\">docs#finset.sum_hom</a> were part of the has_sum typeclass too, since that would unify a lot of lemmas</p>\n</blockquote>\n<p>Either that or a companion typeclass that indicates that it's a \"lawful\" sum would be nice.  I'm not sure how you'd fit it into the <code>has_sum</code> typeclass itself, but let me know if you find a way.</p>",
        "id": 224237239,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611776726
    },
    {
        "content": "<p>Another interesting application is that you can sum over sets that have a <code>fintype</code> instance without having to write <code>to_finset</code> yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">finite_set_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_sum.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"n\">s.to_finset.sum</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_neighbors</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G.degree</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_sum.sum</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>(Then we can get rid of the combinatorial explosion of definitions like <code>simple_graph.neighbor_finset</code> and maybe rename <code>simple_graph.neighbor_set</code> to just <code>simple_graph.neighbors</code>.)</p>",
        "id": 224237612,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611776904
    }
]