[
    {
        "content": "<p>What is the best way to write a document including lean proofs using latex or markup? I only want to have one source as in literate programming, and I don't want to repeat Lean code (which is what happens when I use the sphinx markup I use for my lecture notes, because the lean code blocks cannot depend on each other.</p>",
        "id": 263836874,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1638789971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271218\">Thorsten Altenkirch</span> <a href=\"#narrow/stream/113488-general/topic/literate.20lean/near/263836874\">said</a>:</p>\n<blockquote>\n<p>What is the best way to write a document including lean proofs using latex or markup? I only want to have one source as in literate programming, and I don't want to repeat Lean code (which is what happens when I use the sphinx markup I use for my lecture notes, because the lean code blocks cannot depend on each other.</p>\n</blockquote>\n<p>If you want to stick to sphinx, it shouldn't be too hard to write a plugin that makes this work; there are already such plugins for things like ipython</p>",
        "id": 263837094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638790147
    },
    {
        "content": "<p>How are you using sphinx with lean at the moment? It sounds like you have it set up so that it <em>can</em> run individual blocks already?</p>",
        "id": 263837151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638790189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271218\">@Thorsten Altenkirch</span> Two examples are: <a href=\"https://www.ma.imperial.ac.uk/~buzzard/docs/lean/sandwich.html\">https://www.ma.imperial.ac.uk/~buzzard/docs/lean/sandwich.html</a><br>\n<a href=\"https://leanprover-community.github.io/mathematics_in_lean/introduction.html\">https://leanprover-community.github.io/mathematics_in_lean/introduction.html</a></p>",
        "id": 263837275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638790263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> knows how to setup the second. I think it uses sphinx</p>",
        "id": 263837291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638790281
    },
    {
        "content": "<p>I co<br>\n<span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/literate.20lean/near/263837094\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"271218\">Thorsten Altenkirch</span> <a href=\"#narrow/stream/113488-general/topic/literate.20lean/near/263836874\">said</a>:</p>\n<blockquote>\n<p>What is the best way to write a document including lean proofs using latex or markup? I only want to have one source as in literate programming, and I don't want to repeat Lean code (which is what happens when I use the sphinx markup I use for my lecture notes, because the lean code blocks cannot depend on each other.</p>\n</blockquote>\n<p>If you want to stick to sphinx, it shouldn't be too hard to write a plugin that makes this work; there are already such plugins for things like ipython</p>\n</blockquote>\n<p>I copied Jeremy et al's setup for the lean tutorial but as I said it doesn't use the contents of previous code boxes.</p>",
        "id": 263837387,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1638790336
    },
    {
        "content": "<p>Presumably you're referring to the \"try it\" links that open the web editor?</p>",
        "id": 263837502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638790435
    },
    {
        "content": "<p>That's somewhat by design.  You can add extra Lean code that doesn't show up in the rendered document by placing it outside of the <code>-- BEGIN</code> and <code>-- END</code> markers like here: <a href=\"https://github.com/leanprover/theorem_proving_in_lean/blame/6cd7dd5d5c225a46a29bedd0081468c5b097c424/axioms_and_computation.rst#L133-L148\">https://github.com/leanprover/theorem_proving_in_lean/blame/6cd7dd5d5c225a46a29bedd0081468c5b097c424/axioms_and_computation.rst#L133-L148</a></p>",
        "id": 263837550,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638790444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/literate.20lean/near/263837291\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> knows how to setup the second. I think it uses sphinx</p>\n</blockquote>\n<p>Yes, I am using this setup. Now I have a student who is writing his project report about a Lean project. The disadavnatgae is that code blocks can't depend on each other.</p>",
        "id": 263837568,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1638790461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/literate.20lean/near/263837550\">said</a>:</p>\n<blockquote>\n<p>That's somewhat by design.  You can add extra Lean code that doesn't show up in the rendered document by placing it outside of the <code>-- BEGIN</code> and <code>-- END</code> markers like here: <a href=\"https://github.com/leanprover/theorem_proving_in_lean/blame/6cd7dd5d5c225a46a29bedd0081468c5b097c424/axioms_and_computation.rst#L133-L148\">https://github.com/leanprover/theorem_proving_in_lean/blame/6cd7dd5d5c225a46a29bedd0081468c5b097c424/axioms_and_computation.rst#L133-L148</a></p>\n</blockquote>\n<p>Yes, I know and I am using this. However, the point of literate programming is that you don't have to repeat code because when you change something you only want to change it in one place.</p>",
        "id": 263837609,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1638790506
    },
    {
        "content": "<p>The code that extracts the Lean code from the document is super simple, you can probably change it to concatenate the previous snippets: <a href=\"https://github.com/leanprover/theorem_proving_in_lean/blob/6cd7dd5d5c225a46a29bedd0081468c5b097c424/lean_sphinx.py#L28-L44\">https://github.com/leanprover/theorem_proving_in_lean/blob/6cd7dd5d5c225a46a29bedd0081468c5b097c424/lean_sphinx.py#L28-L44</a></p>",
        "id": 263837727,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638790576
    },
    {
        "content": "<p>You could probably even use the existing <code>:names:</code> mechanic to concatenate code if it shares the same <code>name</code></p>",
        "id": 263837772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638790611
    },
    {
        "content": "<p>Ah, that's only present in <a href=\"https://github.com/avigad/mathematics_in_lean_source/blob/master/lean_sphinx.py#L29-L51\">https://github.com/avigad/mathematics_in_lean_source/blob/master/lean_sphinx.py#L29-L51</a></p>",
        "id": 263838003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638790789
    },
    {
        "content": "<p>I guess we should probably make a new repo to contain the sphinx extension so that we don't have these diverging duplicates?</p>",
        "id": 263838065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638790809
    },
    {
        "content": "<p>The \"mathematics in lean\" version of the script is definitely the odd one out here.  The names feature is really specific to that one book, it's also the only book that distributes a git repository with the extracted snippets.</p>",
        "id": 263838148,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638790874
    }
]