[
    {
        "content": "<p>The definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_scalar'\">docs#pi.has_scalar'</a> (and the stronger smul-typeclass friends) forms a non-equal diamond with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_scalar\">docs#pi.has_scalar</a> when trying to find <code>has_scalar (α → β) (α → (α → β))</code>; for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.pi</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- should these just be global?</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">mul_action</span> <span class=\"n\">has_scalar</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.has_scalar'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)))</span>\n    <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">pi.has_scalar</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">fab</span> <span class=\"n\">faab</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- `fab a₁ * faab a₁ a₂ = fab a₂ * faab a₁ a₂` is not true in general!</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.distrib_mul_action'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">distrib_mul_action</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)))</span>\n    <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">pi.distrib_mul_action</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">fab</span> <span class=\"n\">faab</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- `fab a₁ * faab a₁ a₂ = fab a₂ * faab a₁ a₂` is not true in general!</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266008253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640359057
    },
    {
        "content": "<p>(my previous scary diamond thread: <a href=\"#narrow/stream/113488-general/topic/nat.20smul.20diamond.20in.20set.20actions/near/264004833\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/nat.20smul.20diamond.20in.20set.20actions/near/264004833</a>)</p>",
        "id": 266008369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640359161
    },
    {
        "content": "<p>Should we remove <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_scalar'\">docs#pi.has_scalar'</a>?</p>",
        "id": 266008379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640359176
    },
    {
        "content": "<p>We can move it to a locale and add a library note explaining this diamond.</p>",
        "id": 266012043,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640363412
    },
    {
        "content": "<p>We definitely want the <code>to_additive</code> version of this action somewhere in <code>affince_space</code>s.</p>",
        "id": 266012059,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640363450
    },
    {
        "content": "<p>I mean, we want <code>Π i, P i</code> to be an <code>add_torsor</code> over <code>Π i, G i</code>.</p>",
        "id": 266012077,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640363482
    },
    {
        "content": "<p>But IMHO it's OK if a user has to <code>open_locale pi_elementwise</code> to get this action.</p>",
        "id": 266012140,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640363532
    }
]