[
    {
        "content": "<p>I have a lot of experience with Coq but am just getting started with Lean. I'm trying to write down an inductive type in Lean but can't get the universes to work out. I couldn't find much documentation on universes in Lean so I'm not sure what I can do about this. The analogous type works out in Coq without any universe parameters or annotations.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">stream</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">a.</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ckt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">delay</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ckt</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lifting</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ckt</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f1</span><span class=\"o\">:</span> <span class=\"n\">ckt</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span><span class=\"o\">:</span> <span class=\"n\">ckt</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ckt</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"n\">feedback</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ckt</span> <span class=\"n\">unit</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Concretely I get an error that in the <code>feedback</code> constructor term <code>unit</code> has type <code>Type : Type 1</code> but was expected to have type <code>Type u : Type (u+1)</code>. I also wasn't able to use <code>ckt.{u}</code> to provide an explicit universe, because it's fixed by the universe variable I guess.</p>",
        "id": 299648469,
        "sender_full_name": "Tej Chajed",
        "timestamp": 1663623047
    },
    {
        "content": "<p>try <code>punit</code> instead of <code>unit</code></p>",
        "id": 299648750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663623190
    },
    {
        "content": "<p>your last constructor is weird since it gives 3 arguments to <code>ckt</code></p>",
        "id": 299648882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663623256
    },
    {
        "content": "<p>(fixed the unrelated issue with passing three arguments to <code>ckt</code>, thanks for pointing that out)</p>",
        "id": 299649014,
        "sender_full_name": "Tej Chajed",
        "timestamp": 1663623346
    },
    {
        "content": "<p>oh interesting that does work! <code>punit</code> is just universe polymorphic unit I guess?</p>",
        "id": 299649230,
        "sender_full_name": "Tej Chajed",
        "timestamp": 1663623457
    },
    {
        "content": "<p>Yes. Unlike Coq, Lean does not have cumulative universes.</p>",
        "id": 299649482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663623585
    }
]