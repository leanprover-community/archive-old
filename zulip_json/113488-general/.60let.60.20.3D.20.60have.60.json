[
    {
        "content": "<p>I am writing instructional materials for mathematicians and I am beginning to feel that it's more and more ridiculous that I have to distinguish between <code>let</code> and <code>have</code>. There are plenty of examples of proposition/data fails in this chat, and sometimes they even make it into mathlib. \"Why does this give me an obscure message about the VM?\". \"Because you used <code>have</code> not <code>let</code>\". \"Why does this not work?\" \"Because you are a mathematician and you make that statement a lemma because that's what your tribe call it, but of course it should be a definition\". </p>\n<p>Why can't we have <em>one</em> tactic which chooses whether or not to keep track of the term based on a sensible algorithm which works 99% of the time? It would be easier to teach to mathematicians. Computer scientists have opinions about proof irrelevance. Mathematicians <em>have no understanding of the question</em>. In fact I would go so far as to say that proper mathematicians think that proof irrelevance is irrelevant. We don't care whether two different proofs are the same, we are not philosophers. </p>\n<p>I am playing with the way mathematicians think in the natural number game. I've got some preliminary world 5 up at</p>\n<p><a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game_beta/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game_beta/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game_beta/</a></p>\n<p>where mathematicians learn <code>exact</code>, <code>apply</code> etc in the context of functions, and now I am writing world 6 (Proposition world) and the joke that it is <em>exactly the same as world 5</em> except that all the Types change to Props. Except that I have to change all the <code>let</code>s to <code>have</code>s and I have not dealt with proof impredicativity yet (and to be quite frank it's very low on my list, I believe we can teach mathematicians to use Lean to construct basic proofs without ever worrying about these foundational philosophical questions). <br>\nThe more I type this the more I am thinking \"actually why don't I just tell them to use <code>let</code>?\". But I would rather tell them to use a modded <code>let</code> which does the right thing and doesn't complicate my local context with <code>hq : Q := hpq hp</code>. Is there an argument for such a tactic, which runs <code>have</code> or <code>let</code> depending on what it's building?</p>",
        "id": 179743552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572780412
    },
    {
        "content": "<p>Yes! And let's call it <code>have</code>.</p>",
        "id": 179743614,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1572780576
    },
    {
        "content": "<p>I don't mind which one we call it.</p>",
        "id": 179743856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572781037
    },
    {
        "content": "<p>I mean there's <code>#lint</code> which detects when a def/lemma is tagged wrong so there should be such a tactic</p>",
        "id": 179744238,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572781804
    },
    {
        "content": "<p>I think the answer here is to use <code>have</code>... unless you need to use <code>let</code> instead</p>",
        "id": 179746117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572785451
    },
    {
        "content": "<p>There is a very real and important difference that is being made by the different word, but <code>have</code> should be the every day workhorse</p>",
        "id": 179746124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572785493
    },
    {
        "content": "<p>certainly for mathematicians, it is only rarely that <code>let</code> even matters</p>",
        "id": 179746174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572785526
    },
    {
        "content": "<p>I can imagine a heuristic that picks one or the other based on some things about the type, but I wouldn't want to change either <code>have</code> or <code>let</code></p>",
        "id": 179746182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572785613
    },
    {
        "content": "<p>Plus adding a new keyword into the mix is just making things worse</p>",
        "id": 179746226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572785644
    },
    {
        "content": "<p>The primary case where <code>let</code> comes up in a mathematician's tactic proof is when you need a local instance, but in that case you actually need <code>letI</code></p>",
        "id": 179746235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572785709
    },
    {
        "content": "<p>For your \"curry howard joke\", you could easily just use <code>have</code> in both circumstances. But correct me if I'm wrong, but the whole idea that you could confuse the two is only something you get after drinking the propositions-as-types coolaid. If I want to make a local definition, it doesn't even make sense mathematically to say \"let's prove <code>A -&gt; A -&gt; Prop</code> by <code>f x &lt;= f y</code>\", and after being taught that <code>have</code> is about proving proof-local lemmas that's what it sounds like. So having <code>let R :=  \\lam x y, f x &lt;= f y</code> as a different word for a different activity seems eminently reasonable</p>",
        "id": 179746425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572786114
    }
]