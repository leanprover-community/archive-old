[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">canonically_ordered_comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d0</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">le_iff_exists_add.mp</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 276657294,
        "sender_full_name": "FR",
        "timestamp": 1648231243
    },
    {
        "content": "<p>What you're observing is that the inclusion of the third pattern <code>hd</code> is causing <code>obtain</code>/<code>rcases</code> to do cases on an equality, which results in a substitution.</p>\n<p>It's equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">le_iff_exists_add.mp</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">d0</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">le_iff_exists_add.mp</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 276659903,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648232559
    },
    {
        "content": "<p>The pattern language for <code>rcases</code> and friends don't check that you don't supply more arguments to constructors than are used. The third argument makes <code>⟨d, d0, hd⟩</code> be interpreted as <code>⟨d, ⟨d0, hd⟩⟩</code> due to the fact that <code>le_iff_exists_add.mp hab</code> gives a constructor with two arguments. Then, using <code>⟨d0, hd⟩</code> for the equality is OK even though <code>eq.refl</code> only takes a single argument.</p>",
        "id": 276660339,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648232770
    },
    {
        "content": "<p>Oh, I get it. Thanks!</p>",
        "id": 276660891,
        "sender_full_name": "FR",
        "timestamp": 1648233092
    }
]