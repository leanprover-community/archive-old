[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">my_setoid_comap_quotient_equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">setoid.comap</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">quotient.mk</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">setoid.quotient_ker_equiv_range</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">setoid.ker</span> <span class=\"n\">function.on_fun</span> <span class=\"n\">function.comp</span> <span class=\"n\">setoid.comap</span> <span class=\"n\">setoid.rel</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quotient.congr_right</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">convert_to</span> <span class=\"bp\">⟦</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"bp\">⟧</span> <span class=\"bp\">↔</span> <span class=\"n\">setoid.r</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">convert_to</span> <span class=\"bp\">⟦</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"bp\">⟧</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/H6vp7PdPVZ44BOy80jSc0CNY/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/H6vp7PdPVZ44BOy80jSc0CNY/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/H6vp7PdPVZ44BOy80jSc0CNY/image.png\"></a></div><p>You can find it shows <code>setoid.r a b ↔ setoid.r a b</code> and I should search the setoid and  convert it to <code>⟦f a⟧ = ⟦f b⟧ ↔ setoid.r (f a) (f b)</code> by hand.</p>\n<p>Can we unfold the setoid.r definitions by tactics?</p>",
        "id": 285768633,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654937849
    },
    {
        "content": "<p><code>convert_to</code> is a tactic, so I'm not sure of your question</p>",
        "id": 285768910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654938296
    },
    {
        "content": "<p>I want to use <code>dunfold setoid.r</code>, but it fails.<br>\nIf I need to use <code>convert_to </code>, I should search the context and know which is the <code>setoid.r</code>'s definition.<br>\n<code>convert_to</code> requires me to query the <code>setoid.r</code>'s definition in context every time, which is inconvenient.</p>",
        "id": 285769064,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654938511
    },
    {
        "content": "<p><code>setoid.r</code> is a field, there's nothing to unfold</p>",
        "id": 285769142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654938641
    },
    {
        "content": "<p>But <code>setoid.r a b </code> could be simplify.</p>",
        "id": 285769159,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654938687
    },
    {
        "content": "<p>Your term is probably <code>@setoid.r some_s x y</code>, which means you actually need to unfold <code>some_s</code></p>",
        "id": 285769161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654938694
    },
    {
        "content": "<p>You can hover over the goal in the infoview to find out</p>",
        "id": 285769169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654938718
    },
    {
        "content": "<p>Note that ≈ unfolds to setoid.r, not the other way around</p>",
        "id": 285769221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654938779
    },
    {
        "content": "<p>I've always felt that there was something wrong here. It's hard to get from a goal with <code>≈</code> in to the actual definition of the equivalence relation, unless you know it already and just do it yourself with <code>change</code>.</p>",
        "id": 285769632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654939457
    },
    {
        "content": "<p>Yes. Every time I want to proof theorem about <code>quotient</code> and <code>setoid</code>, I need to use <code>change</code> tactic a lot.</p>",
        "id": 285769703,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654939578
    },
    {
        "content": "<p>Especially <code>setoid.r x y</code></p>",
        "id": 285769726,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654939641
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">function_to_image</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">):</span>  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">set.mem_range_self</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">my_quotient_ker_equiv_range</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">quotient</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">setoid.ker</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">equiv.of_bijective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">quotient.lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">setoid.ker</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">function_to_image</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">,</span> <span class=\"n\">subtype.ext_val</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span>  <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">function_to_image</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.sound</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">has_equiv.equiv</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Why exact h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"bp\">@</span><span class=\"n\">quotient.mk</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">setoid.ker</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">quotient.lift_mk</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">function_to_image</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/3BKliMa7IdFew5mkxmtTcKD7/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3BKliMa7IdFew5mkxmtTcKD7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/3BKliMa7IdFew5mkxmtTcKD7/image.png\"></a></div><p>I don't know why I can use <code>exact h</code> here, unless I search the definition of <code>setoid.ker</code>. I need some tactic to unfold the definition of <code>setoid.r</code> a d <code>setoid.ker</code>.</p>",
        "id": 285769882,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654939877
    },
    {
        "content": "<p><code>dunfold setoid.ker</code> should work</p>",
        "id": 285770146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654940275
    },
    {
        "content": "<p>Thank you. I try <code>dunfold setoid.ker function.on_fun setoid.r,</code> and it works.</p>",
        "id": 285770225,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654940348
    },
    {
        "content": "<p>By the way, here is the same proof as yours, but re-arranged so that it takes far fewer lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">equiv.of_bijective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">quotient.lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">setoid.ker</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">function_to_image</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">,</span> <span class=\"n\">subtype.ext_val</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span>  <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.sound</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">function_to_image</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"bp\">@</span><span class=\"n\">quotient.mk</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">setoid.ker</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">function_to_image</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 285770240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654940371
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold_projs\">tactic#unfold_projs</a> help here to unfold <code>setoid.r</code>?</p>",
        "id": 285781272,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654956713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/display.20of.20setoid.2Er/near/285781272\">said</a>:</p>\n<blockquote>\n<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold_projs\">tactic#unfold_projs</a> help here to unfold <code>setoid.r</code>?</p>\n</blockquote>\n<p>Thank you a lot. That is the static I need.</p>",
        "id": 285785045,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1654962138
    }
]