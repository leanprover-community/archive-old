[
    {
        "content": "<p>Hi! The following proof seems to type-check. Any idea what is going on?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.interval</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">diagonals</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">vertices</span> <span class=\"bp\">=</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">({</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">diagonals</span> <span class=\"bp\">↔</span>\n    <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">⊂</span> <span class=\"n\">vertices</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">≠</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">diagonals.card</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">diagonals</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"bp\">!</span><span class=\"o\">},</span> <span class=\"o\">{</span>\n    <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 285515126,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1654771389
    },
    {
        "content": "<p>Some weird interaction with the docstring parser?</p>",
        "id": 285515704,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1654771831
    },
    {
        "content": "<p>Do you know about hole commands using <code>{! … !}</code>?  I’m struggling to find documentation to show you, but you can search for it hear on Zulip.</p>",
        "id": 285516214,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654772153
    },
    {
        "content": "<p>It vaguely appears in comments in tactic/core.lean</p>",
        "id": 285516277,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1654772177
    },
    {
        "content": "<p>Clearly unused and undocumented</p>",
        "id": 285516335,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1654772221
    },
    {
        "content": "<p>In short, they are, or used to be, a way to highlight some code and prompt vs code to give you a lightbulb with possible actions (like expanding a template for a match).</p>",
        "id": 285516352,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654772234
    },
    {
        "content": "<p>Models will find holes :) I guess I need to blacklist <code>{!</code></p>",
        "id": 285516411,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1654772282
    },
    {
        "content": "<p>Yes, I don’t think you want your model producing them.  :)</p>",
        "id": 285516483,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654772317
    },
    {
        "content": "<p>Probably needs a fix in Lean as well I think would be sad to introduce false without <code>lean make</code> complaining about it</p>",
        "id": 285516531,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1654772348
    },
    {
        "content": "<p>I would make a GitHub issue for lean 3 community edition.</p>",
        "id": 285516713,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654772441
    },
    {
        "content": "<p>Filed here: <a href=\"https://github.com/leanprover-community/lean/issues/725\">https://github.com/leanprover-community/lean/issues/725</a></p>",
        "id": 285517051,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1654772656
    },
    {
        "content": "<p>What do you mean it seems to type-check, I get <code>declaration [anonymous] uses sorry</code></p>",
        "id": 285518530,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654773687
    },
    {
        "content": "<p>Can you get a proof of false from it?</p>",
        "id": 285518587,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1654773720
    },
    {
        "content": "<p>I also see the <code>sorry</code>.</p>",
        "id": 285518698,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1654773774
    },
    {
        "content": "<p>The source of the issue is that <code>{! !}</code> seems to produce a synthetic sorry (printed as <code>??</code>), which suppresses most error reporting about it because this happens after an error was already reported so the knock on errors are unhelpful</p>",
        "id": 285519163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654774061
    },
    {
        "content": "<p>Ah you're right that we have a <code>sorry</code> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> So we're safe</p>",
        "id": 285519270,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1654774128
    },
    {
        "content": "<p>if you replace the hole command with <code>(λ)</code> or something then you will notice the tactics also seem to succeed</p>",
        "id": 285519311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654774164
    },
    {
        "content": "<p>I'm inclined to call this not-a-bug</p>",
        "id": 285519402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654774204
    },
    {
        "content": "<p>Yep closed the issue</p>",
        "id": 285519432,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1654774226
    },
    {
        "content": "<p>Source of the confusion on my end comes from the fact that we don't use the lean --make command output to \"find out sorry\" and instead inspect the code for <code>sorry</code> and <code>admit</code>.</p>",
        "id": 285519633,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1654774351
    },
    {
        "content": "<p>Is there a way to make <code>lean --make</code> error (instead of warning) in presence of any form of <code>sorry</code> ?</p>",
        "id": 285519662,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1654774371
    },
    {
        "content": "<p>just look for <code>{!</code></p>",
        "id": 285520008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654774566
    },
    {
        "content": "<p>Do you have any other warnings in the project?</p>",
        "id": 285520550,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654774922
    },
    {
        "content": "<p>Because the exit code of the process will be 1 in the case of warnings, and 0 otherwise, so maybe you can just use that?</p>",
        "id": 285520641,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654774964
    },
    {
        "content": "<p>It looks like using trust level 0 will cause an error when you use <code>sorry</code></p>",
        "id": 285520704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654775000
    },
    {
        "content": "<p>the exit code of lean is 0 in the case of sorry normally</p>",
        "id": 285520748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654775031
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ <span class=\"nb\">echo</span> <span class=\"s2\">\"def foo : nat := sorry\"</span> &gt; test.lean\n$ lean test.lean\n/test.lean:1:0: warning: declaration <span class=\"s1\">'foo'</span> uses sorry\n$ <span class=\"nb\">echo</span> <span class=\"nv\">$?</span>\n<span class=\"m\">0</span>\n$ lean test.lean -t0\n/test.lean:1:17: error: failed to expand macro\n$ <span class=\"nb\">echo</span> <span class=\"nv\">$?</span>\n<span class=\"m\">1</span>\n</code></pre></div>",
        "id": 285520975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654775161
    },
    {
        "content": "<p>Hmm it seems there is a difference between <code>lean</code> and <code>lean --make</code> here, in my test the first also resulted in <code>1</code> with <code>lean --make</code></p>",
        "id": 285521090,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654775230
    },
    {
        "content": "<p>I'm not reproducing, both <code>lean</code> and <code>lean --make</code> have the same error code behavior</p>",
        "id": 285521515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654775457
    },
    {
        "content": "<p>although <code>lean --make</code> will not report an error if the sorry was in a file that has already been compiled (even if you use <code>-t2</code> to compile it the first time and <code>-t0</code> for the second)</p>",
        "id": 285521583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654775512
    },
    {
        "content": "<p>The <code>sorry</code> macro has trust level 2, so if you use <code>-t1</code> or <code>-t0</code> then <code>sorry</code> causes errors</p>",
        "id": 285521681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654775550
    },
    {
        "content": "<p><code>-t1</code> is probably the most appropriate setting here. <code>-t0</code> will also expand other macros like strings and expr quote</p>",
        "id": 285521880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654775666
    },
    {
        "content": "<p>(the default setting is the amusingly named <code>LEAN_BELIEVER_TRUST_LEVEL = 1024</code> but there aren't any other effects for values higher than 2)</p>",
        "id": 285521954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654775716
    },
    {
        "content": "<p>My mistake! Sorry for the noise <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 285522026,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654775763
    },
    {
        "content": "<p>Thanks Mario! Will experiment with trust levels <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 285522211,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1654775873
    },
    {
        "content": "<p>the only one of gabriel's examples from the issue that typechecks at <code>-t0</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.add_decl</span> <span class=\"o\">(</span><span class=\"n\">declaration.ax</span> <span class=\"bp\">`</span><span class=\"n\">very.clever</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">)),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">very.clever</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 285522541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654776032
    },
    {
        "content": "<p>however that example fails if it is made into a <code>theorem</code>. If it is a <code>def</code> then it's equivalent to actually adding an <code>axiom very.clever</code>; you have to <code>#print axioms foo</code> to detect this</p>",
        "id": 285522823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654776187
    }
]