[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I finally got around to writing a <code>refine_struct</code> tactic to generalize and simplify the automation of the <code>indexed_product</code> proofs. </p>\n<p>You can see it in action here <a href=\"https://github.com/cipher1024/lean-differential-topology/blob/master/src/indexed_product.lean\" target=\"_blank\" title=\"https://github.com/cipher1024/lean-differential-topology/blob/master/src/indexed_product.lean\">https://github.com/cipher1024/lean-differential-topology/blob/master/src/indexed_product.lean</a>.</p>\n<p>You can use it as:</p>\n<div class=\"codehilite\"><pre><span></span>refine_struct { some_field := foo, .. },\nrepeat\n{ intro x,\n  have_field,\n  apply (field x) }\n</pre></div>\n\n\n<p>In short, <code>refine_struct</code> acts a bit like <code>refine</code> but tags every goal it produces with the name of the field that requires it. Then you can use tactics such as <code>have_field</code> / <code>let_field</code> to add an assumption or a local definition that stands for the accessor of the current field. You can also use <code>apply_field</code> if you just want to use it as a rule.</p>\n<p>Does it look useful in this state? My next step would be to PR it into <code>mathlib</code>.</p>",
        "id": 127375963,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527791120
    },
    {
        "content": "<p>Do you examples of using <code>have_field</code>, <code>let_field</code> and <code>aply_field</code>? I can see in the indexed product that you don't need to provide any data, which is already really nice, but I don't understand how the other tactics can be used</p>",
        "id": 127379709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527795673
    },
    {
        "content": "<p>I you were to write the proof of semigroup by hand, it would go like this:</p>\n<div class=\"codehilite\"><pre><span></span>instance semigroup [∀ i, semigroup $ f i] : semigroup (Π i : I, f i) :=\nbegin\n  refine_struct { .. },\n  { intros x y i, apply_field, apply (x i), apply (y i) },\n  { have_field,\n    intros, funext, simp!, apply field }\nend\n</pre></div>",
        "id": 127380010,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527796167
    },
    {
        "content": "<p>The first proof constructs the semigroup operator and the second proves associativity. While the first proof only works for binary functions, the second one is pretty much what the tactic does.</p>",
        "id": 127380073,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527796249
    },
    {
        "content": "<p>In the second proof, <code>apply_field</code> would work if <code>funext</code> didn't discard the goal's tags</p>",
        "id": 127380096,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527796311
    },
    {
        "content": "<p>it seems <code>have_field</code> already discards it</p>",
        "id": 127380238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527796538
    },
    {
        "content": "<p>why <code>simp!</code> rather than <code>dsimp</code>?</p>",
        "id": 127380289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527796590
    },
    {
        "content": "<p>Yeah, you're right. I'll fix that</p>",
        "id": 127380290,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527796592
    },
    {
        "content": "<p>No reasons, I hadn't thought of using <code>dsimp</code> that way</p>",
        "id": 127380298,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527796619
    },
    {
        "content": "<p>just trying to say more precisely what Lean shoud do (I also tend to use <code>exact</code> when it works, instead of <code>apply</code> like you did)</p>",
        "id": 127380361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527796701
    },
    {
        "content": "<p>anyway, it looks very nice</p>",
        "id": 127380365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527796707
    },
    {
        "content": "<p>can you also do Kevin's <code>instance : comm_monoid ℕ+ </code> using it?</p>",
        "id": 127380461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527796815
    },
    {
        "content": "<p>I see. I would only use one command in that case but I wanted to demonstrate <code>apply_field</code>.</p>",
        "id": 127380471,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527796828
    },
    {
        "content": "<p>Can you send me a link?</p>",
        "id": 127380474,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527796835
    },
    {
        "content": "<p>Is it the transport problem?</p>",
        "id": 127380480,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527796850
    },
    {
        "content": "<p>no, building this instance on pnat, given we already have it on nat</p>",
        "id": 127380570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527796987
    },
    {
        "content": "<p>It should be doable</p>",
        "id": 127380583,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527797018
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/ad92a9ba47f417916aab365d13db653fa8991a84/data/pnat.lean#L52\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/ad92a9ba47f417916aab365d13db653fa8991a84/data/pnat.lean#L52\">https://github.com/leanprover/mathlib/blob/ad92a9ba47f417916aab365d13db653fa8991a84/data/pnat.lean#L52</a></p>",
        "id": 127380585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527797030
    },
    {
        "content": "<p>Thanks, I'll have a look after dinner :)</p>",
        "id": 127380629,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527797045
    },
    {
        "content": "<p>Kevin complained about Lean not being smart enough to do it by itself</p>",
        "id": 127380638,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527797062
    },
    {
        "content": "<p>Is it already dinner time in Quebec?</p>",
        "id": 127380644,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527797077
    },
    {
        "content": "<p>Here's my first attempt:</p>\n<div class=\"codehilite\"><pre><span></span>instance : comm_monoid ℕ+ :=\nbegin\n  refine_struct\n    { mul       := λ m n : ℕ+, (⟨m.1 * n.1, mul_pos m.2 n.2⟩ : ℕ+),\n      one       := succ_pnat 0, .. },\n  repeat\n  { have_field,\n    intros, refine subtype.eq _, apply field }\nend\n</pre></div>",
        "id": 127380864,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527797348
    },
    {
        "content": "<p>It's a mistake to expect Lean to be smart. Lean is effective.</p>",
        "id": 127380877,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527797372
    },
    {
        "content": "<p>It is a bit early for dinner but my sister just had a baby so I'm giving her a hand</p>",
        "id": 127380883,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527797391
    },
    {
        "content": "<p>Ok, I gotta run now</p>",
        "id": 127380942,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527797426
    },
    {
        "content": "<p>thanks!</p>",
        "id": 127380952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527797434
    },
    {
        "content": "<p>Ok, so obvisouly I can add </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">derive_field&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">is_prop</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n     <span class=\"n\">field</span> <span class=\"err\">←</span> <span class=\"n\">get_current_field</span><span class=\"o\">,</span>\n     <span class=\"n\">intros</span><span class=\"o\">,</span>\n     <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">refine</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"bp\">_</span><span class=\"o\">],</span>\n     <span class=\"n\">applyc</span> <span class=\"n\">field</span>\n  <span class=\"k\">else</span> <span class=\"n\">do</span> <span class=\"n\">skip</span>\n</pre></div>\n\n\n<p>And the instance becomes</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine_struct</span>\n    <span class=\"o\">{</span> <span class=\"n\">mul</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">),</span>\n      <span class=\"n\">one</span>       <span class=\"o\">:=</span> <span class=\"n\">succ_pnat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"n\">derive_field&#39;</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127381384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527798071
    },
    {
        "content": "<p>Question: can we start <code>derive_field</code> by some testing whether the target type is a pi type of a sub-type?</p>",
        "id": 127381392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527798109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> did you see that?</p>",
        "id": 127381462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527798169
    },
    {
        "content": "<p>It's a mistake to expect Lean to be smart. Expect Simon to be smart.</p>",
        "id": 127381491,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527798221
    },
    {
        "content": "<p>Haha! That was not quite my point ...</p>",
        "id": 127391159,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527812835
    },
    {
        "content": "<p>I think there is a good lesson in there though... \"Computers don't prove theorems, people prove theorems\"</p>",
        "id": 127391298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527813097
    },
    {
        "content": "<p>Is this the slogan for the new National Reasoning Association?</p>",
        "id": 127391350,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527813141
    },
    {
        "content": "<p>the Bot Lobby</p>",
        "id": 127391370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527813232
    },
    {
        "content": "<p>Are you trying to emphasize the \"people prove theorems\" or the \"computers are innocent\"?</p>",
        "id": 127391558,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527813489
    },
    {
        "content": "<p>In all seriousness, I would say it's important not to lose sight of the fact that computers do nothing more than what you tell them to</p>",
        "id": 127391639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527813608
    },
    {
        "content": "<p>so if you want magical tactics, you need magical people to support them</p>",
        "id": 127391646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527813624
    },
    {
        "content": "<p>Yeah, my point exactly</p>",
        "id": 127391662,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527813663
    },
    {
        "content": "<p>or just sufficiently advanced technology</p>",
        "id": 127391818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527813935
    },
    {
        "content": "<p>No</p>",
        "id": 127391825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527813955
    },
    {
        "content": "<p>that's the point</p>",
        "id": 127391826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527813958
    },
    {
        "content": "<p>the sufficiently advanced tech has to come from us</p>",
        "id": 127391868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527813971
    },
    {
        "content": "<p>The difference is that, from magic, you expect all your wildest dreams to be fulfilled while with effective technology, you expect a specific task to be handled. The technology is more useful because it's easier to know when it will work and when it won't</p>",
        "id": 127391890,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527814047
    },
    {
        "content": "<p>it's one thing to expect miracles of \"the CS community\" in general, but that seems much less reasonable when you restrict scope to the &lt;=10 people who are actually involved in writing tactics that you will see</p>",
        "id": 127391891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527814048
    },
    {
        "content": "<p>That's why I have to learn. But I have so many other things I want to do :-/</p>",
        "id": 127392976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527815972
    },
    {
        "content": "<p>It's wonderful being busy isn't it</p>",
        "id": 127392977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527815980
    },
    {
        "content": "<p>It sounds like a sarcastic comment but I have found that since my schedule has been filling up, I've been able to get things done quicker</p>",
        "id": 127393040,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527816099
    },
    {
        "content": "<blockquote>\n<p>Question: can we start <code>derive_field</code> by some testing whether the target type is a pi type of a sub-type?</p>\n</blockquote>\n<p>What about this question?</p>",
        "id": 127403167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527836158
    },
    {
        "content": "<p>Yes that can be done. Are those the only two situations where you'd like to use <code>derive_field</code>?</p>",
        "id": 127412218,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527853153
    },
    {
        "content": "<p>I'm not sure what the best way to generalize <code>derive_field</code> is. I'm thinking of breaking it into <code>derive_method</code> and <code>derive_proof_of_law</code>. You could use them  as <code>refine_struct { .. } ; try { derive_field &lt;|&gt; derive_proof_of_law</code>. Then, we can add a tactic argument to <code>derive_proof_of_law</code> and use it as <code>derive_proof_of_law { intro }</code> or <code>derive_proof_of_law { refine subtype.eq _ }</code>. I don't know if that's simpler than having separate tactics for pi instances and for subtypes.</p>",
        "id": 127419299,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527863971
    },
    {
        "content": "<p>maybe two separate tactics make more sense actually (one for pi and one for subtypes)</p>",
        "id": 127424663,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527870815
    },
    {
        "content": "<p>The benefit over the previous automation is, even if you do need specialized code, the simplified code is much simpler than in the current version of <code>pi_instance</code></p>",
        "id": 127424840,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527871006
    },
    {
        "content": "<p>I like this approach for exactly this reason. I wasn't a fan of <code>pi_instance</code> originally because it was a lot of code for a specialized problem; this puts most of the code in an obviously general setting and now <code>pi_instance</code> is both simpler and requires less input</p>",
        "id": 127425124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527871435
    }
]