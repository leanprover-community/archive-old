[
    {
        "content": "<p>Can someone point me to an example of overriding a <code>decidable</code> instance with a faster algorithm?</p>",
        "id": 134423873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537596172
    },
    {
        "content": "<p>The implementation of <code>nodup_decidable</code> is too slow. :-)</p>",
        "id": 134423881,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537596200
    },
    {
        "content": "<p>You create your own instance and you give it higher priority than <code>nodup_decidable</code>. Is this for lists? Be sure that the culprit <code>nodup_decidable</code> and not the fact that comparing objects (e.g. <code>nat</code>) is slow</p>",
        "id": 134424056,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537596559
    },
    {
        "content": "<p>One more consideration: is this for a proof or for a program? If it's for a proof, you can write a tactic that does the comparison faster.</p>",
        "id": 134424102,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537596615
    },
    {
        "content": "<p><code>decidable_prime</code> has two implementations</p>",
        "id": 134424115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537596667
    },
    {
        "content": "<p>For checking <code>nodup</code> of big things like those lists of numbers, it helps if you've put them in order. <code>list.chain</code> is linear time</p>",
        "id": 134424265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537597027
    },
    {
        "content": "<p>Oh, wait this doesn't work for cycles, since the order matters. You can still improve on the n^2 performance of the default implementation by utilizing the order. If you sort the list then you can check for duplicates in linear time</p>",
        "id": 134424560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537597782
    }
]