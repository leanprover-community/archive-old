[
    {
        "content": "<p><code>let</code> is often confusing me, for example in the same way that Manuel is confused in <a href=\"https://github.com/leanprover-community/mathlib/pull/7274\">this comment chain</a>, but sometimes even <code>simp</code> struggles with it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">arr</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">function.funext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- DOESN'T WORK:</span>\n  <span class=\"c1\">-- simp only [f, if_true, eq_self_iff_true] at h, assumption</span>\n  <span class=\"c1\">-- this line effectively does `simp only [f]`</span>\n  <span class=\"c1\">-- DOES WORK:</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">if_true</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a way to work more harmoniously with <code>let</code>?</p>",
        "id": 235493245,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619004520
    },
    {
        "content": "<p>The unhelpful answer here is \"make a standalone definition instead\". The nice thing about that answer in this case is that that definition already exists, its <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.update\">docs#function.update</a>.</p>",
        "id": 235498728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619007151
    },
    {
        "content": "<p>is there much disadvantage to using a <code>dite</code> when an <code>ite</code> will do? (in the way <code>function.update</code> does)</p>",
        "id": 235499157,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619007381
    },
    {
        "content": "<p><code>function.update</code> uses dite because it supports a dependent function type</p>",
        "id": 235499205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619007405
    },
    {
        "content": "<p>In your case the function is not dependent so ite is fine</p>",
        "id": 235499232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619007425
    },
    {
        "content": "<p>but if you are reusing <code>function.update</code> I wouldn't worry about the distinction</p>",
        "id": 235499276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619007444
    },
    {
        "content": "<p>Note the implementation of <code>function.update</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Replacing the value of a function at a given point by a given value. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">update</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"k\">then</span> <span class=\"n\">eq.rec</span> <span class=\"n\">v</span> <span class=\"n\">h.symm</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>so the <code>h</code> <em>is</em> used</p>",
        "id": 235499303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619007455
    },
    {
        "content": "<p>Are <code>let</code>s in general safe to use in definitions you intend to reason about or should they be avoided? I had cases where some <code>let</code>s would appear in proofs after some simplifications, but eventually they simplified out, but I'm still worried at some point I might get a <code>let</code> that gets more significantly in the way.</p>",
        "id": 235541875,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1619022893
    },
    {
        "content": "<p>It's hard to rewrite across a let.</p>",
        "id": 235542051,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619022956
    }
]