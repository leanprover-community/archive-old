[
    {
        "content": "<p>Is there a library that does quantifiers for finite types and booleans and shows that they are equivalent to the usual quantifiers?</p>",
        "id": 290497305,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1658491799
    },
    {
        "content": "<p>I guess you can just use <code>finset.univ.sup f</code> (as exists) and <code>finset.univ.inf f</code> (as forall) where <code>f</code> is a function from your finite type to bool?</p>",
        "id": 290505164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658496211
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sup_bool_eq_bexists</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s.sup</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">finset.cons_induction</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">s</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">finset.sup_cons</span><span class=\"o\">,</span> <span class=\"n\">bool.sup_eq_bor</span><span class=\"o\">,</span> <span class=\"n\">bor_coe_iff</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_cons</span><span class=\"o\">],</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">or_and_distrib_right</span><span class=\"o\">,</span> <span class=\"n\">exists_or_distrib</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_left</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">univ_sup_bool_eq_exists</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.univ.sup</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">sup_bool_eq_bexists</span> <span class=\"n\">finset.univ</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 290506232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658496833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271218\">@Thorsten Altenkirch</span> You might also be interested to know that there are <code>decidable</code> instances that support doing these sorts of coercions to <code>bool</code> automatically.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bool.forall</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">bool.exists</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>The relevant lemma then for equivalence is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_bool_iff\">docs#to_bool_iff</a></p>",
        "id": 290534767,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658507539
    },
    {
        "content": "<p>Maybe you're looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.all\">docs#list.all</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.any\">docs#list.any</a>?</p>",
        "id": 290615234,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658584899
    }
]