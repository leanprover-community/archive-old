[
    {
        "content": "<p>Before I start diving in to try and write my first tactic, is there prior art for a tactic that calculates the derivative of a function, and proves that the function is differentiable? (Before Mario gets unhappy, I've been thinking of the existing Bertrand PR as a fairly cheap way for me to find out what's currently painful - e.g. real arithmetic and differentiation - in the hope of finding some low-hanging fruit for general improvements.) I twice ended up writing totally mechanical proofs e.g. <a href=\"https://github.com/leanprover-community/mathlib/pull/8002/files#diff-779714ecbcf3ae1ddff8a35448792a63daacd8e7c2b942aa723c2c19b65ec2ddR397\">https://github.com/leanprover-community/mathlib/pull/8002/files#diff-779714ecbcf3ae1ddff8a35448792a63daacd8e7c2b942aa723c2c19b65ec2ddR397</a>. (Even worse, I ended up almost perfectly duplicating the proof - once to calculate the derivative, and once to prove that we actually are differentiable and the derivative isn't 0 for stupid reasons - but I'm more sure I just missed the API that I was meant to use.)</p>",
        "id": 243460723,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624322454
    },
    {
        "content": "<p>I thought there was a simp set for this?</p>",
        "id": 243460961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624322656
    },
    {
        "content": "<p>You can avoid the duplication by proving a <code>has_deriv</code> lemma instead of differentiable + derivative equals f</p>",
        "id": 243461235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624322926
    },
    {
        "content": "<p>Yes, I've found that I can usually use <code>simp</code> to take care of those goals, and I'll use <code>has_deriv_at</code> if I want to avoid having to continually supply proofs for both <code>deriv</code> and <code>differentiable</code>/<code>differentiable_at</code>.</p>",
        "id": 243727408,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1624492136
    }
]