[
    {
        "content": "<p>I think I use <code>leanproject</code> in a very different way to Patrick and I've always found it difficult to explain to him the problems I'm having. I use leanproject to manage multi-user projects with mathlib as a dependency, and when someone in my team bumps mathlib there can be problems for the other people. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> you will probably tell me that if I see this error when I am using leanproject then I've done something wrong:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">group</span><span class=\"bp\">-</span><span class=\"n\">theory</span><span class=\"bp\">-</span><span class=\"n\">game</span><span class=\"bp\">/_</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">ambiguous</span> <span class=\"kn\">import</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"err\">&#39;</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">group</span><span class=\"bp\">-</span><span class=\"n\">theory</span><span class=\"bp\">-</span><span class=\"n\">game</span><span class=\"bp\">/_</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ring</span><span class=\"bp\">/</span><span class=\"n\">default</span><span class=\"bp\">.</span><span class=\"n\">lean&#39;</span> <span class=\"n\">or</span> <span class=\"err\">&#39;</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">group</span><span class=\"bp\">-</span><span class=\"n\">theory</span><span class=\"bp\">-</span><span class=\"n\">game</span><span class=\"bp\">/_</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">lean&#39;</span>\n</code></pre></div>\n\n\n<p>But I claim that I have done nothing wrong. What has happened here is that there has been a bump of mathlib recently which seems to have deleted <code>ring.lean</code> and replaced it with <code>ring/*</code>; the <code>default.lean</code> trick is to ensure that code doesn't break when mathlib is updated. But it breaks for me anyway because someone else changed the toml, so my understanding is that I cannot at this point use <code>leanproject up</code> because this will change the toml again and I don't want to do this; I am not in the mood for bumping, mathlib has just been bumped in this project a few days ago and my co-author has it compiling with lean. Currently in <code>_target/deps/mathlib/src/algebra</code> I have <code>ring.lean</code> and <code>ring.olean</code> and <code>ring/basic.lean</code> and my toml says that my version of mathlib should have no file called ring.lean. How can I make leanproject get rid of it?</p>\n<p>Patrick I don't think you see this situation because you are typically either working on mathlib (where <code>leanproject up</code> is essentially always the right thing to do because you're tracking a branch) or working on a single-user project which has mathlib as a dependency. All this stuff is being ignored by git and we have some branches which are working with one version of mathlib and some with a different version, because only master got bumped, and I think the system cannot handle this. But my problem is that user1 bumped mathlib and now user2 has a broken local installation through no fault of their own because <code>leanproject get-mathlib-cache</code> does not seem to remove out of date lean files. </p>\n<p>I think I want a command which simply deletes _target and re-installs mathlib + oleans from the version in the toml. This seems to me to be a failsafe workaround.</p>\n<p>Deleting oleans doesn't fix it</p>",
        "id": 206463730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597068189
    },
    {
        "content": "<p>OK so I just checked this with guinea pig user3. user1 had bumped mathlib in master on github and user3 has not<br>\nyet updated. If they do <code>git pull</code> and then <code>leanproject get-mathlib-cache</code> on leanproject v0.0.8 and then they have both <code>ring.lean</code> and <code>ring/default.lean</code> in <code>algebra</code>. But this complaint is currently on hold because perhaps you changed it on 0.0.9</p>",
        "id": 206486130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597079290
    },
    {
        "content": "<p>Could you please try with 0.0.10? I would really like to help you here.</p>",
        "id": 206494603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597083811
    },
    {
        "content": "<p>Here is a question which we can try with 0.0.10. I have a repo and different branches are on different mathlib commits. For one branch algebra/ring.lean exists, and for another one <code>algebra/ring/basic.lean</code> exists. Here is what I thought was a reasonable usage of leanproject (I'm using 0.0.10):</p>\n<div class=\"codehilite\"><pre><span></span><code>$ leanproject get ImperialCollegeLondon/group-theory-game\n...\nLooking <span class=\"k\">for</span> <span class=\"nb\">local</span> mathlib oleans\nFound <span class=\"nb\">local</span> mathlib oleans\n$ <span class=\"nb\">cd</span> group-theory-game\n$ lean --make src/group/definitions.lean <span class=\"c1\">## works fine. Note that master mathlib dependency is after the ring change.</span>\n$ git checkout Sylow_theorems <span class=\"c1\">## branch from before the recent ring -&gt; ring/basic mathlib change</span>\n$ leanproject get-mathlib-cache\nLooking <span class=\"k\">for</span> <span class=\"nb\">local</span> mathlib oleans\nFound <span class=\"nb\">local</span> mathlib oleans\n$ lean --make src/group/definitions.lean\n/home/buzzard/temp/group-theory-game/_target/deps/mathlib/src/algebra/field.lean:1:0: error: ambiguous import, it can be <span class=\"s1\">&#39;/home/buzzard/temp/group-theory-game/_target/deps/mathlib/src/algebra/ring/default.lean&#39;</span> or <span class=\"s1\">&#39;/home/buzzard/temp/group-theory-game/_target/deps/mathlib/src/algebra/ring.lean&#39;</span>\n...\n</code></pre></div>",
        "id": 206504859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597088780
    },
    {
        "content": "<p>After <code>leanproject get-mathlib-cache</code> I have both <code>ring.lean</code> and <code>ring/basic.olean</code></p>",
        "id": 206505288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597089015
    },
    {
        "content": "<p>I would just tell my users to reclone with <code>leanproject get</code>, which of course works, but some of them have branches which they haven't pushed</p>",
        "id": 206505753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597089297
    },
    {
        "content": "<p>the thing i would do is commit and push (maybe to a separate branch), and then nuke, re-clone, and delete extra files / sort out merge conflicts by hand. This tactic is maybe more error-prone than you would like, but it was enough to get out of the messes i made for myself while refactoring data/polynomial.</p>",
        "id": 206506634,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597089757
    },
    {
        "content": "<p>This is definitely a bug.</p>",
        "id": 206508552,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597090841
    },
    {
        "content": "<p>Ok I'll file an issue</p>",
        "id": 206518889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597096935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> the issue is not what I would do -- it's what to tell an undergraduate to do.</p>",
        "id": 206519762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597097588
    },
    {
        "content": "<p>Yes, I agree that my advice is too brittle to routinely give to undergrads.</p>",
        "id": 206519842,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597097644
    }
]