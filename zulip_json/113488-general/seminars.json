[
    {
        "content": "<p>JetBrains Research is going to give a seminar about Arend this April 30. <a href=\"http://math.andrej.com/2020/04/28/every-theorem-prover/\" title=\"http://math.andrej.com/2020/04/28/every-theorem-prover/\">http://math.andrej.com/2020/04/28/every-theorem-prover/</a></p>",
        "id": 195491821,
        "sender_full_name": "Nam",
        "timestamp": 1588034818
    },
    {
        "content": "<p>Thanks. I've been curious about Arend for a while, but haven't looked into it in detail yet.</p>",
        "id": 195493906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588037483
    },
    {
        "content": "<p>Looks neat but wish it had unicode</p>",
        "id": 195498632,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588044941
    },
    {
        "content": "<p>they have an unusual solution to the \"to bundle or not to bundle\" problem: <a href=\"https://arend-lang.github.io/about/arend-features#anonymous-extensions\" title=\"https://arend-lang.github.io/about/arend-features#anonymous-extensions\">anonymous extensions</a></p>",
        "id": 195500655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588048244
    },
    {
        "content": "<p>Which I think looks really cool!</p>",
        "id": 195501283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588049123
    },
    {
        "content": "<p>they also have eta for structures which might be part of why this works</p>",
        "id": 195501361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588049222
    },
    {
        "content": "<p>I have a vague recollection of seeing a system which treated lambda and Pi as the same thing</p>",
        "id": 195501425,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588049338
    },
    {
        "content": "<p>\"The logic of Arend is intuitionistic. This means that the law of excluded middle, the double negation elimination, and other classically valid principles are not provable in Arend.\"   So one cannot use classical reasoning in Arend like you can in Lean?</p>",
        "id": 195501957,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588050322
    },
    {
        "content": "<p>You can probably use classical reasoning in Arend the same as in lean, that is, you define it as an axiom and use it</p>",
        "id": 195502103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588051338
    },
    {
        "content": "<p>That said, Arend is clearly intended for HoTT applications so it's probably not suitable as a direct alternative to lean</p>",
        "id": 195502136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588051374
    },
    {
        "content": "<p>There was some confusion about time zones. New word from Andrej: the talk starts at 18:00 CEST (UTC+2). The linked announcement is already updated.</p>",
        "id": 195583022,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1588088583
    },
    {
        "content": "<p>A reminder for anyone interested, this starts in a few minutes. I'm watching the beginning at least.</p>",
        "id": 195860534,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588262224
    },
    {
        "content": "<p>Anyone who attended the seminar want to share their impression of Arend?</p>",
        "id": 195875973,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588268821
    },
    {
        "content": "<p>No trusted core took me by surprise</p>",
        "id": 195876700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269159
    },
    {
        "content": "<p>from the theory side, there are a lot of features that are simply baked into the \"kernel\" when there is a reasonable argument that they could be formalized in principle, like subtyping on structures and cumulative universes, universes of h-levels, and omission of constructors for truncated pattern matching</p>",
        "id": 195877007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269302
    },
    {
        "content": "<p>I liked the fact that it doesn't make you prove cases in a higher inductive type which are \"obviously true because you're truncated already\"</p>",
        "id": 195877057,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1588269329
    },
    {
        "content": "<p>^^</p>",
        "id": 195877059,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1588269332
    },
    {
        "content": "<p>it's a cool feature, but not one I'm comfortable just assuming as axiomatic unless I have to</p>",
        "id": 195877154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269365
    },
    {
        "content": "<p>In lean of course we have things like <code>trunc.rec_on_subsingleton</code> for this</p>",
        "id": 195877213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269395
    },
    {
        "content": "<p>Pattern matching on equalities and having it unfold behind the scenes into <code>J</code> is neat, too - pretty sure Agda can't do that</p>",
        "id": 195877317,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1588269450
    },
    {
        "content": "<p>It doesn't unfold behind the scenes to J</p>",
        "id": 195877357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269467
    },
    {
        "content": "<p>it's axiomatic</p>",
        "id": 195877450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269490
    },
    {
        "content": "<p>Oh, fair enough :P</p>",
        "id": 195877480,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1588269502
    },
    {
        "content": "<p>I think Agda does have something to do with pattern matching on equality, indeed I thought that was how they did all their indexed inductive stuff</p>",
        "id": 195877591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269557
    },
    {
        "content": "<p>(I also think that at least one soundness bug came from pattern matching on rfl, so I'm not thrilled to know it's baked in to Arend)</p>",
        "id": 195877666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269598
    },
    {
        "content": "<p>I was remembering <a href=\"https://github.com/agda/agda/issues/3551\" title=\"https://github.com/agda/agda/issues/3551\">https://github.com/agda/agda/issues/3551</a></p>",
        "id": 195878162,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1588269827
    },
    {
        "content": "<p>I think that regular Agda has pattern matching on rfl, but the <code>--without-K</code> extension disables it, and Cubical Agda needs that for consistency and haven't yet built a replacement that doesn't assume K</p>",
        "id": 195879185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588270282
    },
    {
        "content": "<p>since it's a long-standing feature request I suspect it's not trivial to do safely, and Arend's \"let's just do it anyway\" approach makes me apprehensive</p>",
        "id": 195879470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588270406
    },
    {
        "content": "<p>Really, I think Arend is competing with (cubical) Agda more than Coq/Lean</p>",
        "id": 195879744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588270525
    },
    {
        "content": "<p>Some of the non-HoTT-related features also look quite attractive though, particularly the <code>Monoid Nat 0</code> stuff (I don't remember whether there was a name for this, but I guess we could call it some kind of auto-unbundling)</p>",
        "id": 195881357,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588271189
    },
    {
        "content": "<p>that's the anonymous extensions I linked above</p>",
        "id": 195881411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588271222
    },
    {
        "content": "<p>not having a kernel really helps here - doing this in lean would be a nightmare</p>",
        "id": 195881472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588271257
    },
    {
        "content": "<p>I recall <span class=\"user-mention\" data-user-id=\"115334\">@Thales</span> trying to implement something like this for his lean frontend, I forget what it was called</p>",
        "id": 195881820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588271398
    },
    {
        "content": "<p>I think keeping track of all the anonymous semi-structures is hard because you either have to pre-implement all 2^N of them or you generate them on the fly and have double import problems when they get autogenerated twice</p>",
        "id": 195882117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588271502
    },
    {
        "content": "<p>But it does underscore the point that bundling is only a problem because of the architecture of lean. If you build your system a different way it becomes a non-issue</p>",
        "id": 195882437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588271641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/seminars/near/195879185\" title=\"#narrow/stream/113488-general/topic/seminars/near/195879185\">said</a>:</p>\n<blockquote>\n<p>I think that regular Agda has pattern matching on rfl, but the <code>--without-K</code> extension disables it, and Cubical Agda needs that for consistency and haven't yet built a replacement that doesn't assume K</p>\n</blockquote>\n<p>Agda with <code>--without-K</code> has pattern matching on equalities, only with some mild additional restrictions compared to <code>--with-K</code>. Agda with <code>--cubical</code>, as far as I understand, has no pattern matching on path types. I don't know whether they have it for the separate 'cubical identity type', but they'd prefer you don't use that anyway.</p>",
        "id": 195888315,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1588274343
    },
    {
        "content": "<p>the arend talk has been uploaded: <a href=\"https://vimeo.com/413726748\" title=\"https://vimeo.com/413726748\">https://vimeo.com/413726748</a></p>",
        "id": 195900586,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588280372
    },
    {
        "content": "<p>I think cumulative universes plus covariance in universe parameters also fixes the issue that you can't define isomorphisms of Rings as an instance of a general category-theoretic notion of isomorphism</p>",
        "id": 195953671,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588333876
    },
    {
        "content": "<p>though I would have to play around with it to be sure</p>",
        "id": 195953681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588333886
    },
    {
        "content": "<p>Hi everyone! Just found this thread. I want to address Mario's concern about the core. I mentioned in the talk that it is that large primarily because of efficiency considerations. I thought about implementing a smaller version of the core and a translator between them. It should be easy to eliminate some of the features (like insert missing clauses or replace p.m. with J). I think eliminating subtyping for classes might be a big problem for the efficiency though because every instance of a subclass should be recreated when it is passed to a function that expects the super class. This means that there will be several copies of the same expression and if the expression is large this will be a problem. I think there can be some exponential blow ups.</p>",
        "id": 196048802,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1588421293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/seminars/near/195501361\" title=\"#narrow/stream/113488-general/topic/seminars/near/195501361\">said</a>:</p>\n<blockquote>\n<p>they also have eta for structures which might be part of why this works</p>\n</blockquote>\n<p>I think subtyping is also essential for this feature. Btw, did you mean lean doesn't have eta for structures?</p>",
        "id": 196048881,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1588421488
    },
    {
        "content": "<p>Nope.</p>",
        "id": 196049004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588421707
    },
    {
        "content": "<p>We have lots of <code>cases X; cases Y; congr</code> proofs.</p>",
        "id": 196049006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588421720
    },
    {
        "content": "<p>And <code>p</code> is not defeq to <code>(p.1, p.2)</code>.</p>",
        "id": 196049013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588421747
    },
    {
        "content": "<p>What about eta for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Π</mi></mrow><annotation encoding=\"application/x-tex\">\\Pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Π</span></span></span></span>-types?</p>",
        "id": 196049073,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1588421870
    },
    {
        "content": "<p>Hmm, I wouldn't know. I'm not an expert. But I think we have very little <code>eta</code>.</p>",
        "id": 196049202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588422049
    },
    {
        "content": "<p>Wait, you mean <code>f = \\lambda x, f x</code>?</p>",
        "id": 196049207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588422065
    },
    {
        "content": "<p>We have that one</p>",
        "id": 196049208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588422068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/seminars/near/196049207\" title=\"#narrow/stream/113488-general/topic/seminars/near/196049207\">said</a>:</p>\n<blockquote>\n<p>Wait, you mean <code>f = \\lambda x, f x</code>?</p>\n</blockquote>\n<p>Yes, this one.</p>",
        "id": 196049273,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1588422162
    },
    {
        "content": "<p>Ok, that one is fine.</p>",
        "id": 196049283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588422195
    },
    {
        "content": "<p>It's not defeq though, it's a theorem, right?</p>",
        "id": 196049354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588422338
    },
    {
        "content": "<p>Like eta for structures is a theorem</p>",
        "id": 196049358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588422357
    },
    {
        "content": "<p>If it's a theorem, then it's not eta.</p>",
        "id": 196049423,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1588422452
    },
    {
        "content": "<p>if i am reading mario's master thesis right, then eta is defeq</p>",
        "id": 196049535,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588422527
    },
    {
        "content": "<p>there's an eta rule in 2.2</p>",
        "id": 196049539,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588422543
    },
    {
        "content": "<p>(<a href=\"https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf\" title=\"https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf\">https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf</a>)</p>",
        "id": 196049545,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588422558
    },
    {
        "content": "<p><code>f = \\la x, f x</code> is a defeq. I'm not sure it would even be provable if it wasn't a defeq.</p>",
        "id": 196049746,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588422870
    },
    {
        "content": "<p>It's provable by <code>funext</code> and <code>beta</code>? (Misa very much out of comfort zone, now)</p>",
        "id": 196049768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588422909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/113488-general/topic/seminars/near/196049746\" title=\"#narrow/stream/113488-general/topic/seminars/near/196049746\">said</a>:</p>\n<blockquote>\n<p><code>f = \\la x, f x</code> is a defeq. I'm not sure it would even be provable if it wasn't a defeq.</p>\n</blockquote>\n<p>You can always add it as an axiom :)</p>",
        "id": 196049771,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1588422925
    },
    {
        "content": "<p>You need it to prove <code>funext</code> I think.</p>",
        "id": 196049774,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588422928
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"230946\">@Valery Isaev</span> . I agree that subtyping in the type theory is difficult to mimic if it has to be simulated. I'm okay with this, but it does require a proper handling in the metatheory - the difficulty of elimination indicates that it's more than just a sugaring step, and it significantly affects various critical theorems about the type theory (including in particular consistency).</p>",
        "id": 196053742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588429024
    },
    {
        "content": "<p>I think a moderate intermediate goal is to write down the type theory that you implement (in informal mathematics), including all features that are even moderately suspicious. Do you have an internal language of fully elaborated terms? If so those terms should map directly to the term language in the theory.</p>",
        "id": 196053963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588429336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/seminars/near/196053963\" title=\"#narrow/stream/113488-general/topic/seminars/near/196053963\">said</a>:</p>\n<blockquote>\n<p>Do you have an internal language of fully elaborated terms? If so those terms should map directly to the term language in the theory.</p>\n</blockquote>\n<p>Yes, we do. It's definitely possible to write down all the details, it's just a lot of work and I don't really have time for that.</p>",
        "id": 196054174,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1588429655
    },
    {
        "content": "<p>Emily Riehl is going to explain how to teach infinity categories to undergraduates in 15 minutes, if I understand UTC correctly (I mean she's going to explain in 15 minutes' time ;-) )</p>\n<p><a href=\"https://mathseminars.org/seminar/IsolatedInfinityCategories\" title=\"https://mathseminars.org/seminar/IsolatedInfinityCategories\">https://mathseminars.org/seminar/IsolatedInfinityCategories</a></p>",
        "id": 196900174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588947218
    },
    {
        "content": "<p>zoom link: <a href=\"https://msri.zoom.us/j/4105167397?status=success\" title=\"https://msri.zoom.us/j/4105167397?status=success\">https://msri.zoom.us/j/4105167397?status=success</a></p>",
        "id": 196900907,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588947591
    },
    {
        "content": "<blockquote>\n<p>The password for the zoom meeting is the surname of the person who coined the phrase \"univalent foundations\" in all lower case. You can read about the history of univalent foundations on Wikipedia.</p>\n</blockquote>",
        "id": 196901046,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588947630
    },
    {
        "content": "<p>The first phrase of the main body of the talk is apparently \"Dependent type theory\" so it might be of extra interest to people here (of course it is going to be about homotopy type theory, but still)</p>",
        "id": 196902308,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588948293
    },
    {
        "content": "<p>In the zoom chat: Kevin and Patrick hating on HoTT</p>",
        "id": 196908940,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588951330
    },
    {
        "content": "<p>Only because she keeps repeating \"type theory\" when she means \"hott\"</p>",
        "id": 196910432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588951975
    },
    {
        "content": "<p>Here are the Simpson lectures she just referred to: <a href=\"https://www.msri.org/people/7306\" title=\"https://www.msri.org/people/7306\">https://www.msri.org/people/7306</a>.</p>",
        "id": 196912529,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1588952867
    },
    {
        "content": "<p>I don't think she said anything specific to HoTT actually</p>",
        "id": 196912627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588952905
    },
    {
        "content": "<p>I haven't been following closely, but when she talked about sigma types, didn't she draw a picture and call them fibrations? The HoTT is in the interpretation.</p>",
        "id": 196912908,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1588953014
    },
    {
        "content": "<p>kind of off-topic but does anyone know what software she's using to write/present those notes?</p>",
        "id": 196913281,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588953202
    },
    {
        "content": "<p>I was wondering the same thing! She did a nice job with them. My guess is that she is using a Wacom tablet and a Google Jamboard.</p>",
        "id": 196913937,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1588953458
    },
    {
        "content": "<p>I don't think it's a google jamboard - the icons at the top look like apple icons rather than google's</p>",
        "id": 196914080,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588953510
    },
    {
        "content": "<p>I'm pretty sure it's Notability for mac actually</p>",
        "id": 196916874,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588954891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> <a href=\"#narrow/stream/113488-general/topic/seminars/near/196912908\" title=\"#narrow/stream/113488-general/topic/seminars/near/196912908\">said</a>:</p>\n<blockquote>\n<p>I haven't been following closely, but when she talked about sigma types, didn't she draw a picture and call them fibrations? The HoTT is in the interpretation.</p>\n</blockquote>\n<p>This has nothing to do with HoTT. This is what any geometer or topologist will think about in the very first second they see sigma types. Presenting this interpretation as a revolutionary idea is the beginning of what makes the HoTT community often look so arrogant.  HoTT starts with equality types that are not subsingletons.</p>",
        "id": 196920948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588956947
    },
    {
        "content": "<p>To clarify things, let me say I mostly enjoyed <span class=\"user-mention\" data-user-id=\"246635\">@Emily Riehl</span>'s talk (and I love her little book about categories). And she seems really honest, but the sloppy language and lapsus  still reinforce the dark sides of HoTT. She explained very clearly:</p>\n<ol>\n<li>why HoTT seems like very promising foundations for infinity categories</li>\n<li>hence why explaining infinity categories to undergrads (or say general mathematicians) would require teaching HoTT first</li>\n</ol>\n<p>This seems all fair (although I'm not competent at all in this kind of mathematics). And then she very carefully didn't cross the boundary to claim that:</p>\n<ol start=\"3\">\n<li>Everybody should be doing infinity categories because this is all of mathematics </li>\n<li>Hence everybody should use HoTT since this kind of foundations is relevant to all of mathematics.</li>\n</ol>\n<p>This is very subjective, but I felt she was really close to saying 4, which I think is really wrong. The other thing that annoyed me but was 100% in the chat and not in her talk is the way some HoTT zealots boast that HoTT is good for formalized mathematics since type theory is everywhere in formalized mathematics. This is almost 100% scientific fraud until someone comes up with a non-trivial maths formalization in HoTT foundations that is not about HoTT-style mathematics (homotopy theory). Of course this gets us back to point 3 above: if mathematics is only about infinity categories then everything is HoTT-style mathematics. Again, Emily essentially didn't mentioned formalized mathematics, but using the terms \"type theory\" and HoTT interchangeably reinforce this dark temptation of HoTT.</p>",
        "id": 196923262,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588958050
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> . I'm glad to hear you \"mostly\" enjoyed the talk ;)</p>\n<p>To clarify I didn't claim your point 4 because I don't believe it myself! I agree that it would be arrogant to claim that the sort of foundations that would be convenient for me would necessarily also be convenient for everyone else.</p>\n<p>When I framed this talk for the Berkeley logic folks, I explicitly described it as an attempt to share one mathematician's particular point of view of foundations. As a personal anecdote rather than a diatribe.</p>",
        "id": 196927195,
        "sender_full_name": "Emily Riehl",
        "timestamp": 1588959802
    },
    {
        "content": "<p>Probably you didn't read the whole thread, but this discussion started with Reid's message saying \"In the zoom chat: Kevin and Patrick hating on HoTT\". I only wanted to clarify that. Again I don't say that <em>you</em> claim point 4, but I think being extra careful with wording can help. I also guess you didn't really expect almost 300 people attending the talk, which makes things way too serious when we simply want to have fun with mathematics...</p>",
        "id": 196931221,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588961692
    },
    {
        "content": "<p>Haha, you're right, I see the context now.  Glad to see the zoom and zulip chats are functioning exactly as intended <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> (I was trying to invite a bit of heckling ;)</p>\n<p>In any case, don't worry. I'm not offended. I view this as a mostly friendly debate that's good for both the lean and HoTT communities.</p>",
        "id": 196932219,
        "sender_full_name": "Emily Riehl",
        "timestamp": 1588962226
    },
    {
        "content": "<p><a href=\"https://www.icts.res.in/outreach/kaapi-with-kuriosity/2020may\">https://www.icts.res.in/outreach/kaapi-with-kuriosity/2020may</a></p>",
        "id": 197560522,
        "sender_full_name": "Nam",
        "timestamp": 1589465406
    },
    {
        "content": "<p>Online lecture \"Automating Mathematics\" by Siddhartha Gadgil, the author of ProvingGround</p>",
        "id": 197560622,
        "sender_full_name": "Nam",
        "timestamp": 1589465444
    },
    {
        "content": "<p>Sounds remarkably similar to <a href=\"https://www.ias.edu/events/seminar-theoretical-machine-learning-87\">https://www.ias.edu/events/seminar-theoretical-machine-learning-87</a></p>",
        "id": 197572220,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589470067
    },
    {
        "content": "<p>I guess AlphaZero is the sort of thing one can't avoid mentioning in this context</p>",
        "id": 197572312,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589470090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284601\">Nam</span> <a href=\"#narrow/stream/113488-general/topic/seminars/near/197560622\">said</a>:</p>\n<blockquote>\n<p>Online lecture \"Automating Mathematics\" by Siddhartha Gadgil, the author of ProvingGround</p>\n</blockquote>\n<p>On right now <a href=\"https://www.youtube.com/watch?v=ya5SAmx-7QI\">https://www.youtube.com/watch?v=ya5SAmx-7QI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ya5SAmx-7QI\" href=\"https://www.youtube.com/watch?v=ya5SAmx-7QI\"><img src=\"https://i.ytimg.com/vi/ya5SAmx-7QI/default.jpg\"></a></div>",
        "id": 197842666,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589712324
    },
    {
        "content": "<p>I just saw this (and am watching the end of the talk).</p>",
        "id": 197844966,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589715980
    },
    {
        "content": "<p>They just mentioned Lean.  \"The lean theorem prover has three (small) proof checkers written in three languages\"</p>",
        "id": 197845080,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589716175
    },
    {
        "content": "<p>Anyone who saw the whole thing, is it mostly a big idea, or does he build anything?  (Both are ok.  I'm just curious.)</p>",
        "id": 197845653,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589717021
    },
    {
        "content": "<p>it's a general audience talk just giving an overview of the area</p>",
        "id": 197845772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589717248
    },
    {
        "content": "<p>He's talking about Lean again, he has been experimenting with it</p>",
        "id": 197845792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589717270
    },
    {
        "content": "<p>Lean sure is getting a lot of airtime</p>",
        "id": 197846190,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589717930
    },
    {
        "content": "<p>So I just found his <a href=\"http://siddhartha-gadgil.github.io/ProvingGround/index.html\">ProvingGround</a>.  It seems to be some sort of Scala wrapper around Lean, but using HoTT.  Is it Lean 2?</p>",
        "id": 197846303,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589718117
    },
    {
        "content": "<p>this slideshow is nice, apparently he used ATP techniques to help in polymath14<br>\n<a href=\"http://math.iisc.ac.in/~gadgil/presentations/HomogeneousLengths.html#/3\">http://math.iisc.ac.in/~gadgil/presentations/HomogeneousLengths.html#/3</a></p>",
        "id": 197859516,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589736251
    },
    {
        "content": "<p>Just a small advertisement.  If anyone (including <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> ) is interested in Machine Learning for Lean or other theorem provers, there is a lot of discussion (mostly from me, but also from others) on the stream <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving\">Machine Learning for Theorem Proving</a>.</p>",
        "id": 197863220,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589741062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> is running a Lean learning seminar<br>\n<a href=\"https://sites.google.com/view/berkeleyleanseminar/schedule?authuser=0\">https://sites.google.com/view/berkeleyleanseminar/schedule?authuser=0</a></p>",
        "id": 198010357,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589847383
    },
    {
        "content": "<p>I should add that I am running it jointly with Rahul Dalal and Thomas Browning and that the main page for the website is <a href=\"https://sites.google.com/view/berkeleyleanseminar/home\">https://sites.google.com/view/berkeleyleanseminar/home</a></p>",
        "id": 198014714,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1589852224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113488-general/topic/seminars/near/197846303\">said</a>:</p>\n<blockquote>\n<p>So I just found his <a href=\"http://siddhartha-gadgil.github.io/ProvingGround/index.html\">ProvingGround</a>.  It seems to be some sort of Scala wrapper around Lean, but using HoTT.  Is it Lean 2?</p>\n</blockquote>\n<p>Thanks for mentioning <a href=\"https://github.com/siddhartha-gadgil/ProvingGround\">ProvingGround</a>. It is not a wrapper on lean but an implementation in scala of DTT (using scala types as upper bounds capturing some of the type theory). I have tried to import from Lean's export format. My goal is to have various forms of learning, including for example recognizing when a Lemma is non-trivial etc. But since the successes so far are minor I will share more when there is more to write about.</p>",
        "id": 198026162,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1589869688
    }
]