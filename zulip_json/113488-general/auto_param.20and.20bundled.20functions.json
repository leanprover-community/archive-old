[
    {
        "content": "<p>Can this be made to work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.cast</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.assumption</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+*</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- does not work</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo_apply</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- I don't want to write `foo n hn m`</span>\n</code></pre></div>",
        "id": 225557138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612796974
    },
    {
        "content": "<p>(Of course this is a toy example...)</p>",
        "id": 225557246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612797004
    },
    {
        "content": "<p>Somehow I want to tell Lean that it should always try to work out <code>hn</code> by itself. Unless I write <code>@foo</code></p>",
        "id": 225558911,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612797608
    },
    {
        "content": "<p>This might be related to the fact that you can't write <code>{hn : 0 &lt; n . tactic.assumption}</code> with <code>{}</code>-implicit binders. And again, this means that <code>hn</code> will show up in the goal view, whereas I wouldn't mind if it is hidden there as well.</p>",
        "id": 225559015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612797660
    },
    {
        "content": "<p>Writing <code>. tactic</code> in an hypothesis means \"try to find it by yourself using <code>tactic</code>\"?</p>",
        "id": 225561153,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612798503
    },
    {
        "content": "<p>Yes</p>",
        "id": 225561790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612798775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> do you think that this is something that could be supported in Lean 3? Or is it a huge change/bad idea?</p>",
        "id": 225562886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612799215
    },
    {
        "content": "<p>It's possible to support it.  It's not too hard (add something with <code>mk_auto_param</code> maybe in <code>post_process_implicit_arg</code>).  But you'll probably need to find somebody else to do it.</p>",
        "id": 225563490,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612799475
    },
    {
        "content": "<p>Ok, thanks for the info!</p>",
        "id": 225563633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612799530
    }
]