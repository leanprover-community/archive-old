[
    {
        "content": "<p>recently, I've been seeing a lot of things like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">asda</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"bp\">|</span> <span class=\"n\">baz</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">asda.foo</span> <span class=\"bp\">≠</span> <span class=\"n\">asda.baz.</span>\n</code></pre></div>\n<p>I understand the proof goes down to <code>no_confusion</code>, but how would I be able to write it directly as a <code>match</code> expression? As far as I know, something like <code>intro h, cases h</code> also does it in tactic mode (or even <code>rintro (_|_|_)</code>), but I'm not too sure how it's done automatically</p>",
        "id": 249095711,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628682278
    },
    {
        "content": "<p>What happens if you give the example a name and then #print it?</p>",
        "id": 249095858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628682387
    },
    {
        "content": "<p>also, if you instead consider something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_even_three</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">even</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">|</span><span class=\"n\">d</span><span class=\"o\">),</span>\n    <span class=\"c1\">-- ᾰ_ᾰ: 1.even</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>there's not even any way to name the new hypothesis?</p>",
        "id": 249095876,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628682410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/how.20does.20equation.20compiler.20magic.20work.3F/near/249095858\">said</a>:</p>\n<blockquote>\n<p>What happens if you give the example a name and then #print it?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">asda.foo</span> <span class=\"bp\">=</span> <span class=\"n\">asda.baz</span><span class=\"o\">),</span>\n  <span class=\"n\">ᾰ.dcases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">H_1</span> <span class=\"o\">:</span> <span class=\"n\">asda.baz</span> <span class=\"bp\">=</span> <span class=\"n\">asda.foo</span><span class=\"o\">),</span> <span class=\"n\">asda.no_confusion</span> <span class=\"n\">H_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"n\">asda.baz</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">heq.refl</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which makes sense and is the no_confusion proof I mentioned earlier; however, I don't know how to create it \"manually\" using <code>match</code> and so on, if you understand whast I mean</p>",
        "id": 249096102,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628682599
    },
    {
        "content": "<p>I think the answer is you can't, you need Lean 4's <code>nomatch</code> keyword</p>",
        "id": 249096802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628683143
    },
    {
        "content": "<p><del>The syntax of <code>match</code> doesn't permit an empty list of expressions</del></p>",
        "id": 249096819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628683160
    },
    {
        "content": "<p>i managed to get this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_even_three</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">even</span> <span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">even.succ_succ</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"kd\">end</span> <span class=\"kd\">end</span>\n</code></pre></div>\n<p>for example, but it's atrocious</p>",
        "id": 249097076,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628683319
    },
    {
        "content": "<p>Isn't that the answer to your original question then?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">asda.foo</span> <span class=\"bp\">≠</span> <span class=\"n\">asda.baz</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249099931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628685109
    }
]