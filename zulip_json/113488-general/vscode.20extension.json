[
    {
        "content": "<p>The vscode extension now has two new features:</p>\n<ul>\n<li><code>ctrl+shift+p sticky</code>: allows you to sticky the infoview at the current position.  It will keep updating and show the errors at the original position even if you edit somewhere else.  Thanks to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> </li>\n<li>The <code>see note [sandwich]</code> comments are linkified.</li>\n</ul>",
        "id": 197556822,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589464285
    },
    {
        "content": "<p>But how about <code>ctrl + shift + p -- \"Lean restart\"</code>?</p>",
        "id": 197562731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589466335
    },
    {
        "content": "<p>Is there a feature like paste the current goal? </p>\n<p>A long chain of tactics is very convenient to write, but basically impossible to read without vscode. So sometimes it'd be very, add a <code>show [paste current goal here]</code> or a <code>calc [paste current goal here]</code> just to make the proof easier to read.</p>\n<p>However as it stands now, the moment you write <code>show</code> or <code>calc</code> it wipes the proof state and you basically don't know what you're trying to write.</p>",
        "id": 197604238,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589483601
    },
    {
        "content": "<p>There is a tactic <code>extract_goal</code></p>",
        "id": 197604272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589483617
    },
    {
        "content": "<p>It's not exactly what you describe</p>",
        "id": 197604310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589483630
    },
    {
        "content": "<p>I usually write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>and then paste the goal in it.</p>",
        "id": 197604406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589483668
    },
    {
        "content": "<p>we have an <code>alt+v</code> for things like <code>library_search</code>, right?</p>",
        "id": 197604412,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589483675
    },
    {
        "content": "<p>After that, I prepend <code>show</code>, or <code>calc</code>, or <code>change</code>, etc...</p>",
        "id": 197604439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589483693
    },
    {
        "content": "<p>And then remove the comments</p>",
        "id": 197604448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589483699
    },
    {
        "content": "<p>ya, same, lol. Alternatively you can pause the goal. Which would be ok, if you could keybind it, I suppose.</p>",
        "id": 197604460,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589483705
    },
    {
        "content": "<p>You can keybind it</p>",
        "id": 197604487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589483723
    },
    {
        "content": "<p>I saw discussion a couple of days ago. Haven't done it myself</p>",
        "id": 197604508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589483736
    },
    {
        "content": "<p>oh, what's the command called?</p>",
        "id": 197604512,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589483740
    },
    {
        "content": "<p>Something with <code>freeze</code> or <code>sticky</code>, I guess</p>",
        "id": 197604535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589483759
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/lean.20for.20coq.20users.3F/near/196924597\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/lean.20for.20coq.20users.3F/near/196924597</a></p>",
        "id": 197604597,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589483777
    },
    {
        "content": "<p>Do you have the newest VScode lean extension? One was released today, I think.</p>",
        "id": 197604610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589483784
    },
    {
        "content": "<p>Search for \"toggle updating\" in the keyboard shortcuts.</p>",
        "id": 197604617,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589483788
    },
    {
        "content": "<p>There's also a very new feature that freezes the position that's being inspected in the goal window. I haven't played around with that yet.</p>",
        "id": 197604696,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589483844
    },
    {
        "content": "<p>there's sticky position</p>",
        "id": 197604699,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589483845
    },
    {
        "content": "<p>oh, it doesn't show up in the commands but DOES show up in the keybindings. Ok that's just simply confusing :P</p>",
        "id": 197605170,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589484074
    },
    {
        "content": "<p>We could easily add it to the commands. I'll open a PR to do it later tonight if no one beats me to it.</p>",
        "id": 197605638,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589484320
    },
    {
        "content": "<p>As a general rule, I think we should have the commands available through the commands panel. Until today I didn't even know that it was possible for a keybind to <em>not</em> show up in the commands list.</p>",
        "id": 197605833,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589484426
    },
    {
        "content": "<p>This ended up being a bigger PR than I thought it would be: <a href=\"https://github.com/leanprover/vscode-lean/issues/161\">leanprover/vscode-lean#161</a> .</p>",
        "id": 197640417,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589507996
    },
    {
        "content": "<p>Does anyone have any useful \"tactic state filters\" they use frequently (beyond the two included by default)? <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> is looking for a few test cases.</p>",
        "id": 201410195,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592582804
    },
    {
        "content": "<p>I've found some in the default config of vscode</p>",
        "id": 201410230,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592582825
    },
    {
        "content": "<p>So far I've got:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;regex&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;^_&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;match&quot;</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;flags&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;goals only&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;regex&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;^(‚ä¢|\\\\d+ goals|case|$)&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;match&quot;</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;flags&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span><span class=\"err\">,</span>\n</code></pre></div>",
        "id": 201410328,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592582869
    },
    {
        "content": "<p>I'd be keen to see a filter which doesn't make it say <code>no info found at scratch6.lean:1:2</code> at the top at all times.</p>",
        "id": 201413884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592584777
    },
    {
        "content": "<p>Would it be better to just not show anything?</p>",
        "id": 201414081,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592584896
    },
    {
        "content": "<p>My instinct as a user (I've been using the widget stuff for about 24 hours now) is that whenever I'm in the middle of a proof, I just want to look at the very top of the output on the right and see my current goal. I found it a bit disorientating that there was always something above it.</p>",
        "id": 201414245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592584996
    },
    {
        "content": "<p>:/ It shouldn't show <code>no info found</code> if the current goal is there</p>",
        "id": 201414346,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592585046
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/OyyqDoOuZMlpMzbDuJcFqqni/lean-0.15.15.vsix\">lean-0.15.15.vsix</a></p>",
        "id": 201414937,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1592585402
    },
    {
        "content": "<p>Oh, my current version shows \"Error updating: . Try again.\" at the top of lean goal mode. I'll try updating.</p>",
        "id": 201446885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592605744
    },
    {
        "content": "<p>ooh that fixed it</p>",
        "id": 201446987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592605828
    },
    {
        "content": "<p>In VSCode over Remote-SSH, in the public lean extension (0.15.x), the freeze/unfreeze button is wonky:</p>\n<p><a href=\"/user_uploads/3121/85Oihp88Lxw9eFact4ZQciIH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/85Oihp88Lxw9eFact4ZQciIH/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/85Oihp88Lxw9eFact4ZQciIH/image.png\"></a></div>",
        "id": 201815643,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592980936
    },
    {
        "content": "<p>Yes, loading local resources is pretty broken in vscode at the moment. <a href=\"https://github.com/microsoft/vscode/issues/89038\">https://github.com/microsoft/vscode/issues/89038</a>  There was a fix planned for this month's release, but the fix is delayed.<br>\nAs a workaround, we're running an http server on localhost.  I'm not surprised this doesn't work over ssh.</p>",
        "id": 201819547,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592984808
    },
    {
        "content": "<p>Any idea how hard/easy it would be to provide some rudimentary refactoring? We have go to definition and peek definition. One that I feel is missing and would be super helpful would be rename. This is not just a simple regex replace, because of variable shadowing, so we'd want the right variable to be renamed.</p>",
        "id": 204304432,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1595085629
    },
    {
        "content": "<p>I agree this would be really helpful, but it seems like it would be pretty difficult to me. VS Code does provide an API for <a href=\"https://code.visualstudio.com/api/references/vscode-api#RenameProvider\">extensions to perform \"symbol renames\"</a>, however we would need a new Lean server command that would be able to search through all files in the project and figure out what edits would be appropriate.</p>\n<p>As far as I know, the Lean 3 server doesn't currently have any way to search through files without opening them, so for a gigantic project like mathlib, that might take a very long time. I'm also not sure whether Lean currently remembers anything about the syntactic form of defs / theorems / proofs (other than where declarations are initially defined).</p>\n<p>I seem to recall <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> had some secret tool using <a href=\"https://github.com/leanprover-community/lean-client-python\">lean-client-python</a> that could do some of this though?</p>",
        "id": 204308495,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595091676
    },
    {
        "content": "<p>It was actually <span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> that wrote the secret tool</p>",
        "id": 204308642,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595091881
    },
    {
        "content": "<p>Oh I see. When I asked about this, I wasn't so much thinking large-scale refactoring as more like rename an <code>m</code> to an <code>s</code> inside of a function.</p>",
        "id": 204313861,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1595099758
    },
    {
        "content": "<p>would that be easier?</p>",
        "id": 204313903,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1595099777
    },
    {
        "content": "<p>Not sure. Like I said, the Lean server doesn't have functionality like this currently so it would have to be added in any case. Feel free to create an issue at <a href=\"https://github.com/leanprover-communtiy/lean/issues\">https://github.com/leanprover-communtiy/lean/issues</a> but it might be something that won't appear before Lean 4.</p>",
        "id": 204317750,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595106291
    },
    {
        "content": "<p>It also depends on how good the secret tool is; hopefully <span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> will show up and say more...</p>",
        "id": 204317787,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595106352
    },
    {
        "content": "<p>The \"secret tool\" is not so much as a secret as something that isn't as developed as it could be.  The code is here (currently in its own branch): <a href=\"https://github.com/leanprover-community/lean-client-python/blob/find-and-replace-example/examples/find_and_replace.py\">https://github.com/leanprover-community/lean-client-python/blob/find-and-replace-example/examples/find_and_replace.py</a></p>",
        "id": 204320161,
        "sender_full_name": "Jason Rute",
        "timestamp": 1595110214
    },
    {
        "content": "<p>Basically it is a fairly simple use case of the lean server, specifically Patrick's <a href=\"https://github.com/leanprover-community/lean-client-python\">lean-client for python</a>.  We first find all strings of the desired form and then use the lean server to check if they are instances of the definition in question.  It will only work for instances that the lean server info command works on.  So it won't say work on the original definition (but that particular case could be fixed.)  Depending on the number of instances of the string it could take from minutes to hours to refactor.</p>",
        "id": 204320165,
        "sender_full_name": "Jason Rute",
        "timestamp": 1595110221
    },
    {
        "content": "<p>The reason that this tool is not as developed as it could be is:</p>\n<ol>\n<li>The Lean client for python is still going through some significant bug fixes.  I dropped the ball here, but will try to finish them up.</li>\n<li>This is really just a quick implementation of an idea.  (I wrote it in an afternoon.)  If someone is more ambitious (and knows about Python's <code>await</code>), they could try to turn it into a product.  (I have a number of ideas, but not the time or motivation to work on them now.)   The code above should be readable and if not, I can give you a walkthrough.  Also, I have shared step-by-step instructions with <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> that I'd be happy to share out with anyone.</li>\n</ol>",
        "id": 204320166,
        "sender_full_name": "Jason Rute",
        "timestamp": 1595110223
    },
    {
        "content": "<p>More about that tool can be found here: <a href=\"#narrow/stream/144837-PR-reviews/topic/.232953.20submodule.2Esubtype/near/199815692\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.232953.20submodule.2Esubtype/near/199815692</a></p>",
        "id": 204320233,
        "sender_full_name": "Jason Rute",
        "timestamp": 1595110341
    }
]