[
    {
        "content": "<p>I'm seeing massive memory use while running <code>lean --make --recursive --ast --tlean src</code> on mathlib (exceeding 64gb). </p>\n<p>I'm currently trying again with <code>-j4</code> to see if that helps. In the meantime I'm wondering if there's a memory leak.</p>\n<ol>\n<li><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, do you have any sense whether this is unlikely/plausible?</li>\n<li>I tried running <code>valgrind --undef-value-errors=no --leak-check=yes /Users/scott/.elan/toolchains/lean3-debug/bin/lean --make --recursive --ast --tlean src</code>, but something is wrong with my setup and <code>valgrind</code> isn't actually seeing memory allocations:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">==</span><span class=\"mi\">79936</span><span class=\"bp\">==</span> <span class=\"n\">HEAP</span> <span class=\"n\">SUMMARY</span><span class=\"o\">:</span>\n<span class=\"bp\">==</span><span class=\"mi\">79936</span><span class=\"bp\">==</span>     <span class=\"k\">in</span> <span class=\"n\">use</span> <span class=\"n\">at</span> <span class=\"n\">exit</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">bytes</span> <span class=\"k\">in</span> <span class=\"mi\">0</span> <span class=\"n\">blocks</span>\n<span class=\"bp\">==</span><span class=\"mi\">79936</span><span class=\"bp\">==</span>   <span class=\"n\">total</span> <span class=\"n\">heap</span> <span class=\"n\">usage</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">allocs</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"n\">frees</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"n\">bytes</span> <span class=\"n\">allocated</span>\n</code></pre></div>\n<p>Does anyone have experience running valgrind or equivalent on lean, and can point me in the right direction?</p>",
        "id": 260205785,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635978256
    },
    {
        "content": "<p>can you test just one or the other?</p>",
        "id": 260205808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635978278
    },
    {
        "content": "<p>i.e. <code>--ast</code> or <code>--tlean</code>, not both</p>",
        "id": 260205826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635978292
    },
    {
        "content": "<p>Will do.</p>",
        "id": 260205878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635978341
    },
    {
        "content": "<p>Increased memory usage as a result of <code>--ast</code> is possible, but it's hard to estimate the impact ab initio</p>",
        "id": 260205941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635978369
    },
    {
        "content": "<p>there are a variety of things that can be done to decrease memory usage that were deferred absent evidence of an issue</p>",
        "id": 260205985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635978410
    },
    {
        "content": "<p>If <code>--ast</code> is at fault, it's probably not a memory leak (well I suppose it could be, but it could also just be that we are holding on to a lot of memory)</p>",
        "id": 260206064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635978480
    },
    {
        "content": "<p>Okay, it's definitely the <code>--tlean</code>. Compiling with <code>--ast</code> peaks at about 10gb. I've only just started recompiling with <code>--tlean</code>, but it has already blown through 10gb around when it's finished with <code>tactic/</code>.</p>",
        "id": 260212898,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635983218
    },
    {
        "content": "<p><code>--ast</code> already compiles nearly the same information as <code>--tlean</code>, but binport has not yet been adapted to make use of the information. Do you see the same results when compiling with the usual export format?</p>",
        "id": 260216691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635986856
    },
    {
        "content": "<p>No, compiling with <code>--export</code> behaves like <code>--ast</code>: looks like it is going to peak around 10gb.</p>",
        "id": 260219128,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635989343
    },
    {
        "content": "<p>So something fishy is going on with <code>--tlean</code>.</p>",
        "id": 260219131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635989355
    },
    {
        "content": "<p>I've noted this as <a href=\"https://github.com/leanprover-community/lean/issues/647\">https://github.com/leanprover-community/lean/issues/647</a></p>",
        "id": 260608265,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636336900
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/648\">https://github.com/leanprover-community/lean/pull/648</a></p>",
        "id": 260650784,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636375020
    }
]