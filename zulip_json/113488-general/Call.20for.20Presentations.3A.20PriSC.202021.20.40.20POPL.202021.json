[
    {
        "content": "<p>Apologies if you're getting this message multiple times -- I thought this might be of interest to several people in the Lean community. We haven't had very many Lean-based talks in this workshop so if anyone is doing something relevant we'd love to see you submit! :)</p>\n<p>All details are on the PriSC site<br>\n&lt;<a href=\"https://popl21.sigplan.org/home/prisc-2021\">https://popl21.sigplan.org/home/prisc-2021</a>&gt; and in this email.</p>\n<p>================================================<br>\nCall for Presentations: PriSC 2021 @ POPL 2021<br>\n================================================</p>\n<p>The emerging field of secure compilation aims to preserve security<br>\nproperties of programs when they have been compiled to low-level<br>\nlanguages such as assembly, where high-level abstractions don’t exist,<br>\nand unsafe, unexpected interactions with libraries, other programs,<br>\nthe operating system and even the hardware are possible. For unsafe<br>\nsource languages like C, secure compilation requires careful handling<br>\nof undefined source-language behavior (like buffer overflows and<br>\ndouble frees). Formally, secure compilation aims to protect high-level<br>\nlanguage abstractions in compiled code, even against adversarial<br>\nlow-level contexts, thus enabling sound reasoning about security in<br>\nthe source language. A complementary goal is to keep the compiled code<br>\nefficient, often leveraging new hardware security features and<br>\nadvances in compiler design. Other necessary components are<br>\nidentifying and formalizing properties that secure compilers must<br>\npossess, devising efficient security mechanisms (both software and<br>\nhardware), and developing effective verification and proof techniques.<br>\nResearch in the field thus puts together advances in compiler design,<br>\nprogramming languages, systems security, verification, and computer<br>\narchitecture.</p>\n<p>5th Workshop on Principles of Secure Compilation (PriSC 2021)<br>\n=============================================================</p>\n<p>The Workshop on Principles of Secure Compilation (PriSC) is a<br>\nrelatively new, informal 1-day workshop without any proceedings. The<br>\ngoal is to bring together researchers interested in secure compilation<br>\nand to identify interesting research directions and open challenges.<br>\nThe 5th edition of PriSC will be held on January 17 online,<br>\ntogether with the ACM SIGPLAN Symposium on Principles of<br>\nProgramming Languages (POPL), 2021.</p>\n<p>Important Dates<br>\n===============</p>\n<ul>\n<li>Fri 30 Oct 2020: Submission deadline</li>\n<li>Wed 25 Nov 2020: Notification</li>\n<li>Sun 17 Jan 2021: Workshop</li>\n</ul>\n<p>Presentation Proposals and Attending the Workshop<br>\n=================================================</p>\n<p>Anyone interested in presenting at the workshop should submit an<br>\nextended abstract (up to 2 pages, details below) covering past,<br>\nongoing, or future work. Any topic that could be of interest to secure<br>\ncompilation is in scope. Secure compilation should be interpreted very<br>\nbroadly to include any work in security, programming languages,<br>\narchitecture, systems or their combination that can be leveraged to<br>\npreserve security properties of programs when they are compiled or to<br>\neliminate low-level vulnerabilities.  Presentations that provide a<br>\nuseful outside view or challenge the community are also welcome. This<br>\nincludes presentations on new attack vectors such as<br>\nmicroarchitectural side-channels, whose defenses could benefit from<br>\ncompiler techniques.</p>\n<p>Specific topics of interest include but are not limited to:</p>\n<ul>\n<li>Attacker models for secure compiler chains.</li>\n<li>\n<p>Secure compiler properties: fully abstract compilation and similar<br>\nproperties, memory safety, control-flow integrity, preservation of<br>\nsafety, information flow and other (hyper-)properties against<br>\nadversarial contexts, secure multi-language interoperability.</p>\n</li>\n<li>\n<p>Secure interaction between different programming languages: foreign<br>\nfunction interfaces, gradual types, securely combining different<br>\nmemory management strategies.</p>\n</li>\n<li>\n<p>Enforcement mechanisms and low-level security primitives: static<br>\nchecking, program verification, typed assembly languages, reference<br>\nmonitoring, program rewriting, software-based isolation/hiding<br>\ntechniques (SFI, crypto-based, randomization-based,<br>\nOS/hypervisor-based), security-oriented architectural features such as<br>\nIntel’s SGX, MPX and MPK, capability machines, side-channel defenses,<br>\nobject capabilities.</p>\n</li>\n<li>\n<p>Experimental evaluation and applications of secure compilers.</p>\n</li>\n<li>\n<p>Proof methods relevant to compilation: (bi)simulation, logical<br>\nrelations, game semantics, trace semantics, multi-language semantics,<br>\nembedded interpreters.</p>\n</li>\n<li>\n<p>Formal verification of secure compilation chains (protection<br>\nmechanisms, compilers, linkers, loaders), machine-checked proofs,<br>\ntranslation validation, property-based testing.</p>\n</li>\n</ul>\n<p>Guidelines for Submitting Extended Abstracts<br>\n============================================</p>\n<p>Extended abstracts should be submitted in PDF format and not exceed 2<br>\npages (references not including). They should be formatted in<br>\ntwo-column layout, 10pt font, and be printable on A4 and US Letter<br>\nsized paper. We recommend using the new acmart LaTeX style in sigplan<br>\nmode.</p>\n<p>Submissions are not anonymous and should provide sufficient detail to<br>\nbe assessed by the program committee. Presentation at the workshop<br>\ndoes not preclude publication elsewhere.</p>\n<p>Contact and More Information<br>\n============================</p>\n<p>You can find more information on the workshop website:<br>\n<a href=\"https://popl21.sigplan.org/home/prisc-2021\">https://popl21.sigplan.org/home/prisc-2021</a></p>\n<p>For questions please contact the workshop chairs, Jonathan Protzenko<br>\nand Deian Stefan.</p>",
        "id": 210180502,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1600199201
    }
]