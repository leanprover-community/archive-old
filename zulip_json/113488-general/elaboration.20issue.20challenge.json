[
    {
        "content": "<p>I have a great new elaboration issue for the most experts users of this distinguished place. The only bad point is it's not minimized. In order to play, you need to <code>leanproject get mathlib:sgouezel_multilinear</code>, then <code>code mathlib_sgouezel_multilinear</code> and open <code>analysis/normed_space/multilinear</code> and go to line 247. Have a quick look at the statement of the next lemma, and take the firm decision to fix that ugly string of underscores.</p>\n<p>Now, before that lemma, end the multilinear_map namespace, and paste the following section:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"c1\">--set_option pp.implicit true</span>\n<span class=\"kn\">lemma</span>  <span class=\"n\">multilinear_map</span><span class=\"bp\">.</span><span class=\"n\">restr_norm_le</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">multilinear_map</span> <span class=\"err\">ùïú</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">E‚ÇÇ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"err\">‚à•</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"err\">‚à•</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"err\">‚à•</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">restr</span>  <span class=\"n\">s</span> <span class=\"n\">hk</span> <span class=\"n\">z</span> <span class=\"n\">v</span><span class=\"err\">‚à•</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"err\">‚à•</span><span class=\"n\">z</span><span class=\"err\">‚à•</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"err\">‚à•</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">multilinear_map</span> <span class=\"err\">ùïú</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">E‚ÇÇ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"err\">‚à•</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"err\">‚à•</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">H</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">multilinear_map</span><span class=\"bp\">.</span><span class=\"n\">restr_norm_le&#39;</span> <span class=\"o\">:</span> <span class=\"err\">‚à•</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">restr</span>  <span class=\"n\">s</span> <span class=\"n\">hk</span> <span class=\"n\">z</span> <span class=\"n\">v</span><span class=\"err\">‚à•</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"err\">‚à•</span><span class=\"n\">z</span><span class=\"err\">‚à•</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"err\">‚à•</span><span class=\"o\">)</span>\n <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191282282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584728356
    },
    {
        "content": "<p>Note how the first statement is rejected, and the second one is accepted.</p>",
        "id": 191282330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584728380
    },
    {
        "content": "<p>On surface level, the only difference is the second lemma has all arguments passed as variables.</p>",
        "id": 191282408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584728405
    },
    {
        "content": "<p>Now un-comment the <code>set_option</code> line, replace the first statement by <code>sorry</code> and spot the differences in context.</p>",
        "id": 191282481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584728442
    },
    {
        "content": "<p>Did you get it? It's in the <code>[‚àÄi, add_comm_group (M‚ÇÅ i)]</code> argument to <code>multilinear_map</code>. Here <code>M‚ÇÅ</code> is the constant function from <code>fin n</code> to <code>Type</code> with value <code>G</code>.</p>",
        "id": 191282773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584728581
    },
    {
        "content": "<p>When it works, the inferred instance features  boring naked <code>G</code>. In the failing case you'll see <code>(Œª (i : fin n), G) i</code>.</p>",
        "id": 191282940,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584728648
    },
    {
        "content": "<p>Now the challenge is to explain the issue, and PR a fix to Lean 3.7.3.</p>",
        "id": 191283009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584728680
    },
    {
        "content": "<p>Let me ping <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> since this happens in his PR.</p>",
        "id": 191283246,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584728778
    },
    {
        "content": "<p>Is it documented that <code>leanproject get mathlib:sgouezel_multilinear</code> works to get a mathlib branch? I hadn't realised this, I've been getting mathlib and then switching branches and getting the oleans. This way is much cooler :-)</p>",
        "id": 191291490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584732621
    },
    {
        "content": "<p>So the failure gives the error</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  multilinear_map.restr f\nterm\n  f\nhas type\n  multilinear_map ùïú (Œª (i : fin n), G) E‚ÇÇ : Type (max wG w‚ÇÇ)\nbut is expected to have type\n  multilinear_map ?m_1 (Œª (i : fin ?m_2), ?m_3) ?m_4 : Type (max ? ?)\n</pre></div>\n\n\n<p>which is the kind of frustrating error which one sees occasionally, because clearly one can solve for the metavariables. Are you saying that you might be able to understand this failure and perhaps the prettyprinter is lying to us?</p>",
        "id": 191292545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584733203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/elaboration.20issue.20challenge/near/191291490\" title=\"#narrow/stream/113488-general/topic/elaboration.20issue.20challenge/near/191291490\">said</a>:</p>\n<blockquote>\n<p>Is it documented that <code>leanproject get mathlib:sgouezel_multilinear</code> works to get a mathlib branch? I hadn't realised this, I've been getting mathlib and then switching branches and getting the oleans. This way is much cooler :-)</p>\n</blockquote>\n<p>Yes, last paragraph of \"Getting an existing Lean project\" at <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/master/README.md#getting-an-existing-lean-project\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/master/README.md#getting-an-existing-lean-project\">https://github.com/leanprover-community/mathlib-tools/blob/master/README.md#getting-an-existing-lean-project</a></p>",
        "id": 191301193,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584737741
    },
    {
        "content": "<p>Elaboration fails to fill in metavariables presumably because it fails some class instance search, because there is application which is not <code>random.choice(['alpha', 'beta', 'gamma', 'delta', 'zeta'])</code>-reduced.</p>",
        "id": 191301414,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584737851
    },
    {
        "content": "<p>Aren't you missing <code>eta</code>?</p>",
        "id": 191301542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584737912
    },
    {
        "content": "<p>Do you think it's <code>eta</code>? Doesn't sound likely to my ear <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 191301626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584737962
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Lambda_calculus#Reduction\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Lambda_calculus#Reduction\">https://en.wikipedia.org/wiki/Lambda_calculus#Reduction</a></p>",
        "id": 191301772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584738029
    },
    {
        "content": "<p>Wikipedia says beta</p>",
        "id": 191301836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584738073
    },
    {
        "content": "<p>Johan was looking there too :)</p>",
        "id": 191301875,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584738090
    },
    {
        "content": "<p>Ooh, I was just complaining that your Russian roulette was missing out on some options.</p>",
        "id": 191301912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584738104
    },
    {
        "content": "<p>I know.</p>",
        "id": 191301932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584738117
    },
    {
        "content": "<p>We should have a general purpose Zulip shortcut to insert <code>random.choice(['alpha', 'beta', 'gamma', 'delta', 'eta' 'zeta'])</code></p>",
        "id": 191302033,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584738161
    },
    {
        "content": "<p>In the mean time, I hope some expert will have a look, or at least <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  will post his standard: \"this is fixed in Lean 4\" message.</p>",
        "id": 191302130,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584738219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> it's a bit sad no expert seems to have anything to say here, but I still recommend you but the multilinear map in a variable (you can leave everything else in the lemma), and have the nice statement.</p>",
        "id": 191342096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584791429
    },
    {
        "content": "<p>Since you're calling the experts, I can give you one more workaround:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span>  <span class=\"n\">multilinear_map</span><span class=\"bp\">.</span><span class=\"n\">restr_norm_le</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">multilinear_map</span> <span class=\"err\">ùïú</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">E‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"err\">‚à•</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"err\">‚à•</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"err\">‚à•</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">restr</span>  <span class=\"n\">s</span> <span class=\"n\">hk</span> <span class=\"n\">z</span> <span class=\"n\">v</span><span class=\"err\">‚à•</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"err\">‚à•</span><span class=\"n\">z</span><span class=\"err\">‚à•</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"err\">‚à•</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191343069,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584793212
    },
    {
        "content": "<p>I assume that is also the elaboration difference between variables and arguments: types of variables are apparently elaborated without expected type, but arguments are elaborated with expected type <code>Sort*</code>.</p>",
        "id": 191343086,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584793288
    },
    {
        "content": "<p>Thanks Gabriel!</p>",
        "id": 191343828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584794409
    },
    {
        "content": "<p>S√©bastien, did you see that?</p>",
        "id": 191343849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584794424
    },
    {
        "content": "<p>If we went through Lean's library and replaced every <code>(a : A)</code> function input with <code>(a : (A : _))</code> would anything break?</p>",
        "id": 191344618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584795751
    },
    {
        "content": "<p>it seems unlikely, but lean works in mysterious ways</p>",
        "id": 191345900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584797677
    },
    {
        "content": "<p>In Lean 4, there will actually be no difference between variables and regular parameters, because the former are simply macros and are re-elaborated inside each declaration that uses them.</p>",
        "id": 191347374,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1584799784
    },
    {
        "content": "<p>Here is a version which uses only mathlib master and uses much less of it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span>\n\n<span class=\"o\">{</span><span class=\"err\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">ùïú</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">ùïú</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">mm</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span>  <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">M‚ÇÅ</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M‚ÇÅ</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"bp\">.</span>\n\n<span class=\"c1\">-- M&#39; is implicit and we will show that Lean can&#39;t guess it below</span>\n<span class=\"n\">def</span> <span class=\"n\">mmrest</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">mm</span> <span class=\"n\">R</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M&#39;</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">mm</span> <span class=\"n\">R</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">F</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">mm</span> <span class=\"err\">ùïú</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- works fine</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">restr_norm_le</span> <span class=\"o\">:</span> <span class=\"n\">mmrest</span> <span class=\"err\">ùïú</span> <span class=\"n\">I</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">mmrest</span> <span class=\"err\">ùïú</span> <span class=\"n\">I</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- also works</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">restr_norm_le&#39;</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mm</span> <span class=\"err\">ùïú</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n<span class=\"bp\">@</span><span class=\"n\">mmrest</span> <span class=\"err\">ùïú</span> <span class=\"bp\">_</span> <span class=\"n\">G</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>  <span class=\"n\">I</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">mmrest</span> <span class=\"err\">ùïú</span> <span class=\"n\">I</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- removing G makes it fail</span>\n\n<span class=\"c1\">-- Lean can&#39;t guess G</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">restr_norm_le&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mm</span> <span class=\"err\">ùïú</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n<span class=\"n\">mmrest</span> <span class=\"err\">ùïú</span> <span class=\"n\">I</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">mmrest</span> <span class=\"err\">ùïú</span> <span class=\"n\">I</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  mmrest ùïú I F</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  F</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  mm ùïú I (Œª (i : I), G)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  mm ùïú I (Œª (i : I), ?m_1)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 191347524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584799992
    },
    {
        "content": "<p>Lean is failing to infer <code>G</code> from <code>(Œª i : I, G)</code></p>",
        "id": 191347579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584800060
    },
    {
        "content": "<p>When it succeeds. <code>F</code> has type</p>\n<div class=\"codehilite\"><pre><span></span>F :\n  @mm ùïú\n    (@normed_ring.to_ring ùïú\n       (@normed_field.to_normed_ring ùïú (@nondiscrete_normed_field.to_normed_field ùïú _inst_1)))\n    I\n    (Œª (i : I), G)\n    (Œª (i : I), @normed_group.to_add_comm_group G _inst_2)\n    (Œª (i : I),\n       @normed_space.to_module ùïú G (@nondiscrete_normed_field.to_normed_field ùïú _inst_1) _inst_2 _inst_3)\n</pre></div>\n\n\n<p>and when it fails, it has the defeq type</p>\n<div class=\"codehilite\"><pre><span></span>  @mm ùïú\n    (@normed_ring.to_ring ùïú\n       (@normed_field.to_normed_ring ùïú (@nondiscrete_normed_field.to_normed_field ùïú _inst_1)))\n    I\n    (Œª (i : I), G)\n    (Œª (i : I), @normed_group.to_add_comm_group ((Œª (i : I), G) i) _inst_2)\n    (Œª (i : I),\n       @normed_space.to_module ùïú ((Œª (i : I), G) i) (@nondiscrete_normed_field.to_normed_field ùïú _inst_1) _inst_2\n         _inst_3)\n</pre></div>",
        "id": 191347763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584800327
    },
    {
        "content": "<p>The issue lies in unification: we need to solve <code>?m1 =?= (fun x, G) i</code> where <code>?m1</code> may not contain <code>i</code>.</p>",
        "id": 191348138,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584800842
    },
    {
        "content": "<p>How about <code>?m1=G</code>?</p>",
        "id": 191348194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584800904
    },
    {
        "content": "<p>I have fixed the PR following <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> 's advice. Thanks Gabriel!</p>",
        "id": 191348419,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1584801218
    },
    {
        "content": "<p>Another fix would be to make the implicit variable explicit -- the one which unification can't guess.</p>",
        "id": 191348553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584801365
    },
    {
        "content": "<p>You are asking Lean to guess <code>G from </code>(f : multilinear_map ùïú (Œª i : fin n, G) E‚ÇÇ)` and perhaps we learn here that it is not always capable of such guesses.</p>",
        "id": 191348584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584801436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/elaboration.20issue.20challenge/near/191348194\" title=\"#narrow/stream/113488-general/topic/elaboration.20issue.20challenge/near/191348194\">said</a>:</p>\n<blockquote>\n<p>How about <code>?m1=G</code>?</p>\n</blockquote>\n<p>This is exactly the solution that we would like, <em>in this case</em>.  So you say, \"how about we just beta-reduce the right-hand side whenever we assign a meta-variable\"?  And in this case, it would work.  However changes in the unifier have the unfortunate habit of breaking things elsewhere in unexpected places.  Since it is not 100% clear to me that this the right behavior, I'm not too eager to change the unifier unless this problem pops up more often.</p>",
        "id": 191349317,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584802396
    },
    {
        "content": "<p>I see!</p>",
        "id": 191349748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584802908
    },
    {
        "content": "<p>Forgive the noob question, but this made me think about a problem I encountered earlier today: is it possible to manually assign a metavariable? If I have <code>m1</code> in scope in a goal, can I specify <code>m1</code> somehow without having to track down where exactly the metavariable arose?</p>",
        "id": 191352293,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584806331
    },
    {
        "content": "<p>It means that you'll have multiple goals.</p>",
        "id": 191352377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584806404
    },
    {
        "content": "<p>So you can use <code>swap 4</code> to jump to goal number 4. And use <code>exact foobar</code> close it.</p>",
        "id": 191352402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584806429
    },
    {
        "content": "<p>You will have to figure out manually which goal corresponds to <code>?m1</code></p>",
        "id": 191352411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584806446
    },
    {
        "content": "<p>I think that in general you might want to try and avoid metavariables in goals. Usually when one appears for me, I instantly stomp on it by changing the line which created it. It is often not hard to do this, it is usually an <code>_</code> which just needed to be filled in explicitly. Having metavariables around can actually mess you up, some tactics can get confused for example.</p>",
        "id": 191352754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584806810
    }
]