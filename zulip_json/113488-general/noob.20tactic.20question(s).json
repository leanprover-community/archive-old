[
    {
        "content": "<p>Without providing a MWE, I hope that the experts can quickly help me back on track.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">replace_target_lhs</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">:</span> <span class=\"n\">tracked_rewrite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target_lhs_rhs</span><span class=\"o\">,</span>\n   <span class=\"o\">(</span><span class=\"n\">new_lhs</span><span class=\"o\">,</span> <span class=\"n\">prf</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">rw</span><span class=\"bp\">.</span><span class=\"kn\">eval</span><span class=\"o\">,</span>\n   <span class=\"n\">replace_target_side</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">%%</span><span class=\"n\">new_lhs</span> <span class=\"err\">%%</span><span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"err\">%%</span><span class=\"n\">r</span> <span class=\"n\">L</span> <span class=\"err\">%%</span><span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"n\">prf</span>\n</pre></div>\n\n\n<p>I've decomposed the target into <code>(r, lhs, rhs)</code> where <code>r</code> is the <code>name</code> of a relation. Out of a black box I have procured an expression <code>new_lhs</code>. And now I want to substitute the <code>new_lhs</code> for the old <code>lhs</code>.</p>\n<p>My problems is, Lean doesn't seem to like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">%%</span><span class=\"n\">new_lhs</span> <span class=\"err\">%%</span><span class=\"n\">rhs</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>What is the right syntax here?</p>",
        "id": 194473930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587144474
    },
    {
        "content": "<p>Is there some sort of antiquotation for names?<br>\n(I also tried <code>``(apply %%new_lhs %%rhs)</code> but that didn't seem to help either.)</p>",
        "id": 194474881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587144931
    },
    {
        "content": "<p>What do you know about <code>r</code>? Can you assume it has no universe parameters and no implicit arguments? And do you really want to give <code>pexpr</code>s to <code>replace_target_side</code>?</p>",
        "id": 194479693,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587147122
    },
    {
        "content": "<p>If the answers are \"no,\" you probably want to use  the tactic<code>mk_app r [new_lhs, rhs]</code>.</p>",
        "id": 194479769,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587147156
    },
    {
        "content": "<p>Something like <code> ``(%%(expr.const r [] : pexpr) %%new_lhs %%rhs)</code> will avoid calling the elaborator, but notice that it's returning a pexpr and you're telling it that <code>r</code> takes no universe parameters.</p>",
        "id": 194480136,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587147311
    },
    {
        "content": "<p>Well I guess I want to support the case where <code>r</code> is either <code>=</code> or <code>\\iff</code>.</p>",
        "id": 194480821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587147670
    },
    {
        "content": "<p>So now I'm trying</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">replace_target_lhs</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">:</span> <span class=\"n\">tracked_rewrite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target_lhs_rhs</span><span class=\"o\">,</span>\n   <span class=\"o\">(</span><span class=\"n\">new_lhs</span><span class=\"o\">,</span> <span class=\"n\">prf</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">rw</span><span class=\"bp\">.</span><span class=\"kn\">eval</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"n\">r</span> <span class=\"o\">[</span><span class=\"n\">new_lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">],</span>\n   <span class=\"n\">replace_target_side</span> <span class=\"n\">e</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"err\">%%</span><span class=\"n\">r</span> <span class=\"n\">L</span> <span class=\"err\">%%</span><span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"n\">prf</span>\n</pre></div>",
        "id": 194480846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587147683
    },
    {
        "content": "<p>But it doesn't like the <code>e</code> in the last line, because it expects a <code>pexpr</code> instead of an <code>expr</code></p>",
        "id": 194480886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587147703
    },
    {
        "content": "<p>I thought that every <code>expr</code> is also a <code>pexpr</code>? (I.e., I expected a coercion.) But I guess I'm naive (-;</p>",
        "id": 194480982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587147744
    },
    {
        "content": "<p>Ooh wait, isn't that what <code>%%</code> is doing?</p>",
        "id": 194481434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587147968
    },
    {
        "content": "<p>I'm completely stuck. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> would you mind enlightening me?<br>\nI've got</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"c1\">-- some relation</span>\n<span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"c1\">-- the &quot;old&quot; left hand side</span>\n<span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"c1\">-- the right hand side</span>\n<span class=\"n\">new_lhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"c1\">-- the &quot;new&quot; left hand side</span>\n<span class=\"n\">prf</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"c1\">-- a proof that lhs = new_lhs</span>\n</pre></div>\n\n\n<p>Now I've run</p>\n<div class=\"codehilite\"><pre><span></span>   <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"n\">r</span> <span class=\"o\">[</span><span class=\"n\">new_lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">],</span> <span class=\"c1\">-- the new target</span>\n</pre></div>\n\n\n<p>But now I want to run <code>tactic.replace target</code>, and I need a proof that the new target is equivalent to the old one.<br>\nThis should be more or less <code>congr_arg (λ L, r L rhs) prf</code>, except that this is not how meta code works. What is the correct variant now? I can't use <code>mk_app</code> here, I think...</p>",
        "id": 194485501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587150024
    },
    {
        "content": "<p>The version for <code>rhs</code> is easier. This is what I have now</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">replace_target_side</span> <span class=\"o\">(</span><span class=\"n\">new_target</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prf</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">prf&#39;</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"err\">%%</span><span class=\"n\">lam</span> <span class=\"err\">%%</span><span class=\"n\">prf</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">replace_target</span> <span class=\"n\">new_target</span> <span class=\"n\">prf&#39;</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">replace_target_lhs</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">:</span> <span class=\"n\">tracked_rewrite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target_lhs_rhs</span><span class=\"o\">,</span>\n   <span class=\"o\">(</span><span class=\"n\">new_lhs</span><span class=\"o\">,</span> <span class=\"n\">prf</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">rw</span><span class=\"bp\">.</span><span class=\"kn\">eval</span><span class=\"o\">,</span>\n   <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"n\">r</span> <span class=\"o\">[</span><span class=\"n\">new_lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">],</span>\n   <span class=\"n\">replace_target_side</span> <span class=\"n\">t</span> <span class=\"bp\">_</span> <span class=\"n\">prf</span> <span class=\"c1\">-- FIXME</span>\n   <span class=\"c1\">--  ``(λ L, %%r L %%rhs)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">replace_target_rhs</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">:</span> <span class=\"n\">tracked_rewrite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target_lhs_rhs</span><span class=\"o\">,</span>\n   <span class=\"o\">(</span><span class=\"n\">new_rhs</span><span class=\"o\">,</span> <span class=\"n\">prf</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">rw</span><span class=\"bp\">.</span><span class=\"kn\">eval</span><span class=\"o\">,</span>\n   <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"n\">r</span> <span class=\"o\">[</span><span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">new_rhs</span><span class=\"o\">],</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"n\">r</span> <span class=\"o\">[</span><span class=\"n\">lhs</span><span class=\"o\">],</span>\n   <span class=\"n\">replace_target_side</span> <span class=\"n\">t</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">prf</span>\n</pre></div>",
        "id": 194486964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587150728
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tracked_rewrite</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tracked_rewrite</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">:</span> <span class=\"n\">tracked_rewrite</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">replace_target_side</span> <span class=\"o\">(</span><span class=\"n\">new_target</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prf</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">prf&#39;</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"err\">%%</span><span class=\"n\">lam</span> <span class=\"err\">%%</span><span class=\"n\">prf</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">replace_target</span> <span class=\"n\">new_target</span> <span class=\"n\">prf&#39;</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">replace_target_lhs</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">:</span> <span class=\"n\">tracked_rewrite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">r</span> <span class=\"n\">lhs</span><span class=\"o\">)</span> <span class=\"n\">rhs</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"o\">(</span><span class=\"n\">new_lhs</span><span class=\"o\">,</span> <span class=\"n\">prf</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">rw</span><span class=\"bp\">.</span><span class=\"kn\">eval</span><span class=\"o\">,</span>\n   <span class=\"n\">replace_target_side</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">new_lhs</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"err\">%%</span><span class=\"n\">r</span> <span class=\"n\">L</span> <span class=\"err\">%%</span><span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"n\">prf</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">replace_target_rhs</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">:</span> <span class=\"n\">tracked_rewrite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">r</span> <span class=\"n\">lhs</span><span class=\"o\">)</span> <span class=\"n\">rhs</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"o\">(</span><span class=\"n\">new_rhs</span><span class=\"o\">,</span> <span class=\"n\">prf</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">rw</span><span class=\"bp\">.</span><span class=\"kn\">eval</span><span class=\"o\">,</span>\n   <span class=\"n\">replace_target_side</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">lhs</span> <span class=\"n\">new_rhs</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">lhs</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">prf</span>\n</pre></div>",
        "id": 194507155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587161887
    },
    {
        "content": "<p>Aah, nice! So why does <code>(r, lhs, rhs) ← target_lhs_rhs</code> not do the same thing as <code>expr.app (expr.app r lhs) rhs ← target</code>? Is there a reason for this?</p>",
        "id": 194526476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587186162
    },
    {
        "content": "<p>So now I have compiling code again! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> There is only one minor little problem.... it doesn't do what I want <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 194527138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587187402
    },
    {
        "content": "<p>I just pushed stuff to the <code>nth-rewrite</code> branch</p>",
        "id": 194527195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587187510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Does</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">r</span> <span class=\"n\">lhs</span><span class=\"o\">)</span> <span class=\"n\">rhs</span> <span class=\"err\">←</span> <span class=\"n\">target</span>\n</pre></div>\n\n\n<p>take care of implicit variables etc...?<br>\nSuppose I have <code>a = b</code> where <code>a b : nat</code>. Then I would like <code>r</code> to be <code>@eq nat</code> and <code>lhs</code> and <code>rhs</code> to be <code>a</code> and <code>b</code> respectively.</p>",
        "id": 194527375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587187849
    },
    {
        "content": "<p>My understand is that what you wrote should work the way I want... So maybe the bug is somewhere else</p>",
        "id": 194527435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587187991
    },
    {
        "content": "<p>Hmmm, it woks with <code>Prop</code> so maybe it's universe issues:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">nth_rewrite_rhs</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">nth_rewrite_rhs</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">h₁</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">nth_rewrite_rhs</span> <span class=\"mi\">0</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194527547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587188189
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">nth_rewrite_rhs</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"n\">nth_rewrite_rhs</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">h₁</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">nth_rewrite_rhs</span> <span class=\"mi\">0</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194527571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587188232
    }
]