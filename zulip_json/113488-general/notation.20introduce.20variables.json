[
    {
        "content": "<p>Is it possible to write notation that will allow introducing variables?  e.g. have something like the following work:</p>\n<div class=\"codehilite\"><pre><span></span>local notation `flet` var `:=` rhs `fin` body := let var := rhs in body\nexample : ℕ := flet x := 1 fin x\n</pre></div>",
        "id": 131200648,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1533853459
    },
    {
        "content": "<p>Yes, the following can be found in <code>core.lean</code>: <code>notation `exists` binders `, ` r:(scoped P, Exists P) := r</code> which illustrates how the binder / scoped notation works.</p>\n<p>It let's you tell Lean how to parse a lambda abstract and choose a function (i.e. <code>Exists</code>) to feed that lambda expression to.</p>",
        "id": 131200900,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533853845
    },
    {
        "content": "<p>I think your notation could work as <code>local notation `flet` binder `:=` rhs `fin` body:(scoped P, P rhs) := body</code></p>",
        "id": 131200992,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533853957
    },
    {
        "content": "<p>To help with the pretty printing, you may way to define a function that Lean will associate with your notation:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">my_let</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">flet</span><span class=\"bp\">`</span> <span class=\"n\">binder</span> <span class=\"bp\">`</span><span class=\"o\">:=</span><span class=\"bp\">`</span> <span class=\"n\">rhs</span> <span class=\"bp\">`</span><span class=\"n\">fin</span><span class=\"bp\">`</span> <span class=\"n\">body</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">my_let</span> <span class=\"n\">P</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">body</span>\n</pre></div>",
        "id": 131201428,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533854562
    },
    {
        "content": "<p>Great.  Thanks for finding that.</p>",
        "id": 131202287,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1533855997
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span> To be fair, a few months back, there was intense session on gitter, looking through the C++ code and figuring out the ins and outs of the <code>notation</code> notation</p>",
        "id": 131202453,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533856259
    }
]