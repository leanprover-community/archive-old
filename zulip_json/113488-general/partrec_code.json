[
    {
        "content": "<p>Is <code>def nat.partrec.code.eval</code> slow for everyone or just me? The definition times out in with <code>-T100000</code></p>",
        "id": 195933228,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588310357
    },
    {
        "content": "<p>I'm trying to fix compile failures in <a href=\"https://github.com/leanprover-community/mathlib/issues/2579\" title=\"https://github.com/leanprover-community/mathlib/issues/2579\">#2579</a> coming from mid-proof <code>simp</code>s simplifying more than expected.</p>",
        "id": 195933394,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588310574
    },
    {
        "content": "<p>If I remember the theorem you are talking about, it was slow but not that slow when I wrote it</p>",
        "id": 195933533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588310766
    },
    {
        "content": "<p>Oh, it's just the definition?</p>",
        "id": 195933555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588310791
    },
    {
        "content": "<p>there is nothing at all expensive in the definition</p>",
        "id": 195933559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588310809
    },
    {
        "content": "<p>I thought you were talking about <code>rec_computable</code></p>",
        "id": 195933577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588310875
    },
    {
        "content": "<p>Try to compile it in <code>master</code>...</p>",
        "id": 195933618,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588310893
    },
    {
        "content": "<p>It's hard for me to fix this because I don't understand what is happening in this file.</p>",
        "id": 195933641,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588310972
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">parsing</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"n\">ms</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">of</span> <span class=\"kn\">eval</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"n\">s</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">of</span> <span class=\"kn\">eval</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0133</span><span class=\"n\">ms</span>\n<span class=\"n\">decl</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">processing</span> <span class=\"n\">of</span> <span class=\"kn\">eval</span> <span class=\"n\">took</span> <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">22</span><span class=\"n\">ms</span>\n</code></pre></div>\n\n\n<p>on <code>d84de80</code> (12 Apr)</p>",
        "id": 195933691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588311019
    },
    {
        "content": "<p>/me is downloading .oleans for this revision</p>",
        "id": 195933766,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588311136
    },
    {
        "content": "<p>Confirmed timeout on master</p>",
        "id": 195933769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588311151
    },
    {
        "content": "<p>There is nothing at all remarkable about the definition. It's a recursion over the simple inductive type <code>code</code>, and there are no complicated elaboration problems in it</p>",
        "id": 195933786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588311196
    },
    {
        "content": "<p>I'll <code>git bisect</code> this and come back later.</p>",
        "id": 195933789,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588311206
    },
    {
        "content": "<p>Is <a href=\"https://github.com/leanprover-community/mathlib/issues/2573\" title=\"https://github.com/leanprover-community/mathlib/issues/2573\">#2573</a> related?</p>",
        "id": 195933910,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588311364
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"k\">show</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→.</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">unpair</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>this is slow</p>",
        "id": 195933934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588311400
    },
    {
        "content": "<p>aha, it's using the coercion to roption</p>",
        "id": 195933944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588311441
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"k\">show</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→.</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">roption</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">unpair</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>is fine</p>",
        "id": 195933947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588311468
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">roption</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- also slow</span>\n</code></pre></div>",
        "id": 195933993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588311534
    },
    {
        "content": "<p>oh, there is no coercion to roption anymore</p>",
        "id": 195934007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588311579
    },
    {
        "content": "<p>Oh, there never was. There is a coercion from <code>A -&gt; B</code> to <code>A -&gt;. B</code> but the roption version of that doesn't exist because these instances don't compose:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">roption</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">of_option</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">coe_option</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 195934205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588311894
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→.</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- fast</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→.</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- slow</span>\n</code></pre></div>",
        "id": 195934305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588312028
    },
    {
        "content": "<p>Apparently the order of operations has changed here, or there is a missing fallback or something</p>",
        "id": 195934308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588312055
    },
    {
        "content": "<p>I think it tries to coerce <code>nat</code> to <code>roption nat</code> inside the lambda instead of coercing the function types</p>",
        "id": 195934352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588312090
    },
    {
        "content": "<p>anyway, if you are in the middle of a refactor <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I would suggest changing those lines to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">left</span>         <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">roption</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">unpair</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">right</span>        <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">roption</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">unpair</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and everything else seems to still work.</p>",
        "id": 195934376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588312193
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 195934427,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588312222
    },
    {
        "content": "<p>I think the coercion was kind of a bad idea anyway</p>",
        "id": 195934428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588312225
    },
    {
        "content": "<p><code>↑(λ n : ℕ, n.unpair.1)</code> is fast too</p>",
        "id": 195934556,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588312450
    },
    {
        "content": "<p>I noticed this slowness yesterday as well.  I think there is a general problem with the coercion from integers to arbitrary rings see <a href=\"https://github.com/leanprover-community/mathlib/issues/2573\" title=\"https://github.com/leanprover-community/mathlib/issues/2573\">#2573</a>.  Unfortunately my PR seems to time out somewhere.</p>",
        "id": 195935169,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588313543
    },
    {
        "content": "<p>The first \"bad\" commit is ffb99a338</p>",
        "id": 195935593,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588314277
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2363\" title=\"https://github.com/leanprover-community/mathlib/issues/2363\">#2363</a></p>",
        "id": 195935605,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588314303
    },
    {
        "content": "<p>I have no idea why it slows down elaboration in <code>partrec_code</code>.</p>",
        "id": 195935621,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588314330
    },
    {
        "content": "<p>But in the previous commit the elaboration is much faster.</p>",
        "id": 195935628,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588314358
    },
    {
        "content": "<p>BTW, with an explicit <code>↑(λ n : ℕ, n.unpair.1)</code> it is 10x faster than before <a href=\"https://github.com/leanprover-community/mathlib/issues/2363\" title=\"https://github.com/leanprover-community/mathlib/issues/2363\">#2363</a> (and 100x faster than after <a href=\"https://github.com/leanprover-community/mathlib/issues/2363\" title=\"https://github.com/leanprover-community/mathlib/issues/2363\">#2363</a>).</p>",
        "id": 195935821,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588314637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Compile failed in a <code>simp</code> lemma in <code>data.int.basic</code>. I don't know why it timed out instead of failing.</p>",
        "id": 195935891,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588314757
    },
    {
        "content": "<p>But the whole file is still very slow compared to what we had before <a href=\"https://github.com/leanprover-community/mathlib/issues/2363\" title=\"https://github.com/leanprover-community/mathlib/issues/2363\">#2363</a></p>",
        "id": 195936174,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588315311
    }
]