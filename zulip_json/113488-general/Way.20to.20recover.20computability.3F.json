[
    {
        "content": "<p>I find it odd, that the following doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp</span>\n<span class=\"kn\">open</span> <span class=\"n\">finsupp</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>It fails with the message <code>code generation failed, VM does not have code for 'classical.choice'</code>, presumably because <code>data.finsupp</code> is a noncomputable theory. However, if I copy the definition of <code>single</code>, adding that the parameters must have decidable equality, it works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_single</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">∅</span> <span class=\"k\">else</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">pi.single</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">],</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a'</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pi.single_eq_of_ne'</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">my_single</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which seems to indicate that <code>decidable_eq</code> was actually the missing non-computable component, not <code>choice</code>. Which in turn means, that if I copy the entire data/finsupp/defs.lean file into my own project and add decidability assumptions on everything, I should be able to <code>#eval</code> my functions then.</p>\n<p>My question is, if there is a way to propagate decidability information in Lean (maybe Lean4?) so that I don't have to that, and can just rely on the mathlib as-is?</p>\n<p>(Note, that what I actually want to use is data.mv_polynomials, which depend on finsupp and add_monoid_algebra, so duplicating everything and updating it to use my version will require some work.)</p>\n<p>Thank you advance for any hints you can give me :)</p>",
        "id": 322309906,
        "sender_full_name": "Andreas Poulsen",
        "timestamp": 1674142315
    },
    {
        "content": "<p>If you use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp\">docs#dfinsupp</a> instead then everything already has these assumptions</p>",
        "id": 322310632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674142479
    },
    {
        "content": "<p>If you don't mind a little <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, what's your personal motivation for computability? Are you wanting to write a program to compute something (and prove the program is correct)? Are you wanting to <code>#eval</code> a couple values to test things out? Are you wanting it to be computable out of principle?</p>",
        "id": 322310678,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674142492
    },
    {
        "content": "<p>In lean4 you can use a <code>@[csimp]</code> attribute to replace <code>single</code> with <code>my_single</code> in the VM</p>",
        "id": 322310845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674142526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I thought you couldn't -- <code>my_single</code> has a different type, but last I checked <code>csimp</code> needs a definition with the same type.</p>",
        "id": 322311108,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674142581
    },
    {
        "content": "<p>Of course, it's part of an experiment at school to see how much of Gröbner bases and Buchbergers algorithm we can formalize. But, not being able to run the resulting algorithm seems silly :)</p>",
        "id": 322311379,
        "sender_full_name": "Andreas Poulsen",
        "timestamp": 1674142649
    },
    {
        "content": "<p><code>finsupp</code> isn't a great data structure for actually computing with polynomials, which you might want to consider if you haven't already</p>",
        "id": 322312076,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674142788
    },
    {
        "content": "<p>There are a lot of performance issues (the sets only use decidable equality, so there are quadratic operations all over the place) and places where you can have accidental memory leaks (due to the coefficients being stored as functions; you'd need to periodically memoize them yourself).</p>",
        "id": 322312479,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674142887
    },
    {
        "content": "<p>That's true, but being able to just use <code>mv_polynomials</code> or <code>add_monoid_algebra</code> was tempting, since we're not going for speed.<br>\nOtherwise we have to spend a bunch of time proving basic ring axioms before we can get started</p>",
        "id": 322312578,
        "sender_full_name": "Andreas Poulsen",
        "timestamp": 1674142915
    },
    {
        "content": "<p>Maybe consider defining a polynomial typeclass and writing your algorithms to work with that, rather than specifically working with <code>mv_polynomials</code></p>",
        "id": 322312873,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674142978
    },
    {
        "content": "<p>and create an instance for <code>mv_polynomials</code> with the appropriate additional decidability assumptions to make things computable</p>",
        "id": 322313003,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674143010
    },
    {
        "content": "<p>Interesting idea. It'd be a hecking huge typeclass, but it could work.</p>",
        "id": 322313073,
        "sender_full_name": "Andreas Poulsen",
        "timestamp": 1674143036
    },
    {
        "content": "<p>That way (1) things are computable, as you want, and (2) one could swap in an efficient polynomial implementation at some point</p>",
        "id": 322313077,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674143037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Way.20to.20recover.20computability.3F/near/322313003\">said</a>:</p>\n<blockquote>\n<p>and create an instance for <code>mv_polynomials</code> with the appropriate additional decidability assumptions to make things computable</p>\n</blockquote>\n<p>I don't really see how that would work</p>",
        "id": 322313174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674143058
    },
    {
        "content": "<p>Your second point there is a very good point. Sometimes making things more abstract is actually a good way to make it more tractable</p>",
        "id": 322313292,
        "sender_full_name": "Andreas Poulsen",
        "timestamp": 1674143090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I guess something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">polynomial_like</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>but we might into the same issue with having to propagate the <code>decidable_eq</code>'s.</p>",
        "id": 322313992,
        "sender_full_name": "Andreas Poulsen",
        "timestamp": 1674143281
    },
    {
        "content": "<p>I don't see how that's going to help, because if you have <code>x : mv_polynomial A B</code> then that <code>x</code> is almost certainly noncomputable</p>",
        "id": 322314144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674143315
    },
    {
        "content": "<p>So any function converting it into your computable representation is too late</p>",
        "id": 322314197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674143329
    },
    {
        "content": "<p>I think the trick is that you're only ever going to be able to evaluate the Groebner basis algorithms on polynomials that Lean knows are computable, so you can assume such an <code>x</code> is computable</p>",
        "id": 322314556,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674143414
    },
    {
        "content": "<p>and inside the Groebner basis algorithms it's going to use the ring structure from the <code>polynomial_like</code> class, which you define in a computable way in that <code>instance</code>. (So I guess this doesn't save you from having to prove ring axioms...)</p>",
        "id": 322314933,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674143524
    },
    {
        "content": "<p>But, I think <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> has a point: right now I can't evaluate a <code>mv_polynomial</code>, even though every part of it is computable. So sticking it behind a computable typeclass would just move the problem somewhere else, I'd have the issue when I try implementing the type class</p>",
        "id": 322315073,
        "sender_full_name": "Andreas Poulsen",
        "timestamp": 1674143573
    },
    {
        "content": "<p>But maybe we'll start there. At least it'll get us started, then we can worry about implementing computable polynomials later on :)</p>",
        "id": 322315890,
        "sender_full_name": "Andreas Poulsen",
        "timestamp": 1674143789
    },
    {
        "content": "<p>You should not need to prove any ring axioms here. Just make a type of polynomial representations, and a function from that to <code>mv_polynomial</code> and prove that <code>repr (a + b) = repr a + repr b</code> etc</p>",
        "id": 322382109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674163488
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/onote\">docs#onote</a> is a good example of that pattern. It does ordinal arithmetic computably and then has a repr function to relate everything to arithmetic on \"real\" ordinals (which are noncomputable). You can infer all the axioms by lifting them across that function</p>",
        "id": 322382425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674163604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thank you for the reference, that seems like a good pattern to know about. Thank you all so much for your inputs, it's greatly appreciated :)</p>",
        "id": 322383416,
        "sender_full_name": "Andreas Poulsen",
        "timestamp": 1674163924
    }
]