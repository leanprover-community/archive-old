[
    {
        "content": "<p>I've found a bunch of cases where I want to make something a linear map, but it's only possible to do so when <code>R</code> is commutative - most notably, this comes up when the domain or codomain of my linear map is itself a linear map.</p>\n<p>How bad an idea is a definition like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">maybe_linear_map</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">add_monoid_hom</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">maybe_map_smul'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">c₁</span> <span class=\"bp\">*</span> <span class=\"n\">c₂</span> <span class=\"bp\">=</span> <span class=\"n\">c₂</span> <span class=\"bp\">*</span> <span class=\"n\">c₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">maybe_linear_map.to_linear_map</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">maybe_linear_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f.to_fun</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">f.map_add'</span><span class=\"o\">,</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">f.maybe_map_smul'</span> <span class=\"n\">mul_comm</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 224705627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612173917
    },
    {
        "content": "<p>Couldn't you restrict <code>R</code> instead?  (Aren't the commutative elements a subring?)</p>",
        "id": 224706098,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612174201
    },
    {
        "content": "<p>The centre (the elements that commute with all other elements) is a subring, but \"commutes\" is just a general predicate so doesn't cut out a subset. In your use case Eric is it true that the function commutes with the action of the centre?</p>",
        "id": 224706263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612174290
    },
    {
        "content": "<p>I don't really understand what problem this structure is solving yet. It's nothing more than <code>is_comm_ring R -&gt; blah</code>. Is the issue just that you want an <code>is_comm_ring</code> predicate?</p>",
        "id": 224706465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612174414
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.applyₗ\">docs#linear_map.applyₗ</a> is an example of where this is relevant</p>",
        "id": 224707897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612175378
    },
    {
        "content": "<p>I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.applyₗ'\">docs#linear_map.applyₗ'</a>  reveals the solution here - if you use a different <code>R</code> in every place that one is needed, then you don't require commutativity in R, just <code>smul_comm_class R1 R2</code>.</p>",
        "id": 225281513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612520572
    }
]