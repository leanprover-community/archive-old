[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">all</span> <span class=\"c1\">-- current mathlib master</span>\n\n<span class=\"c1\">-- simplify tactic failed to simplify</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">conj</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">conj_im</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sin_neg</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- works just fine</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">conj</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">conj_im</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sin_neg</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 189698995,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583333999
    },
    {
        "content": "<p>Ask <code>squeeze_simp</code>, it will give you the offending lemma.</p>",
        "id": 189699352,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1583334214
    },
    {
        "content": "<p>Unfortunately, simp fails in the first two calls.  So I don't think squeeze simp can do anything.</p>",
        "id": 189700885,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583335077
    },
    {
        "content": "<p>Try <code>set_option trace.simplify.rewrite true</code></p>",
        "id": 189701490,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583335440
    },
    {
        "content": "<p>If you do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">squeeze_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>you will see the simp lemmas that <code>simp</code> uses on your expression (the ones that prevent <code>complex.conj_im</code> from firing).</p>",
        "id": 189701600,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1583335494
    },
    {
        "content": "<p>If it was only that easy.  <code>squeeze_simp</code> also fails with \"simplify tactic failed to simplify\".  (Internally, <code>squeeze_simp</code> looks at the proof produced by <code>simp</code> to determine the used lemmas; if <code>simp</code> doesn't simplify, then there's no proof.)</p>",
        "id": 189706113,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583338191
    },
    {
        "content": "<p>Oh, that is weird. That error is supposed to mean that <code>simp</code> made no progress, right?</p>",
        "id": 189706275,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583338268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Any.20ideas.20on.20how.20to.20debug.20this.3F/near/189701490\" title=\"#narrow/stream/113488-general/topic/Any.20ideas.20on.20how.20to.20debug.20this.3F/near/189701490\">said</a>:</p>\n<blockquote>\n<p>Try <code>set_option trace.simplify.rewrite true</code></p>\n</blockquote>\n<p>That's my go-to option these days, but I don't see anything suspicious.  In fact, <code>complex.conj_im</code> even seems to be used:</p>\n<div class=\"codehilite\"><pre><span></span>2. [simplify.rewrite] [complex.conj_im]: (complex.conj z).im ==&gt; -z.im\n</pre></div>",
        "id": 189706322,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583338294
    },
    {
        "content": "<p>Another option is <code>set_option trace.simplify true</code> and search the log for <code>complex.conj_im</code></p>",
        "id": 189706342,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583338312
    },
    {
        "content": "<p>It occurs twice in the log, once for <code>z.conj.im</code> and once for <code>z.im</code>.  It even seems to rewrite the first term.</p>",
        "id": 189706501,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583338393
    },
    {
        "content": "<p>Seems like <code>simp</code> is just being grumpy then</p>",
        "id": 189706690,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583338498
    },
    {
        "content": "<p>OMG, <code>complex.im</code> seems to disable <code>simp</code> entirely:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">conj</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">conj</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 189707363,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583338930
    },
    {
        "content": "<p>A small dichotomy gives a failure with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">lie_algebra</span>\n       <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">conj</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">conj_im</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 189708261,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1583339426
    },
    {
        "content": "<p>The culprit for me was a memory problem. I increased the maximum memory in my Vscode, and the problem disappeared.</p>",
        "id": 189708592,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1583339602
    },
    {
        "content": "<p>I get the error on the command-line as well, even with the imports reduced to <code>algebra.lie_algebra</code> and <code>data.complex.basic</code>.</p>",
        "id": 189708905,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583339770
    },
    {
        "content": "<p>Mmmh, <code>import algebra.lie_algebra</code> seems to be the culprit.</p>",
        "id": 189709100,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583339888
    },
    {
        "content": "<p>Oh wow, it's an instance issue, again.</p>",
        "id": 189709287,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583340004
    },
    {
        "content": "<p>I've had a number of instances in the category theory library in which simp would refuse to apply a lemma for apparently no reason. Some cases were related to simp's handling of syntactic equality of implicit parameters but in other cases there seemed to be no explanation.</p>",
        "id": 189709335,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583340040
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances]  class-instance resolution trace\n[class_instances] (0) ?x_32 : @lie_ring ℝ real.add_comm_group := @lie_algebra.to_lie_ring ?x_33 ?x_34 ?x_35 ?x_36 ?x_37\n[class_instances] (1) ?x_35 : comm_ring ?x_33 := @subalgebra.comm_ring ?x_38 ?x_39 ?x_40 ?x_41 ?x_42 ?x_43\n[class_instances] (2) ?x_41 : comm_ring ?x_39 := @subalgebra.comm_ring ?x_44 ?x_45 ?x_46 ?x_47 ?x_48 ?x_49\n[class_instances] (3) ?x_47 : comm_ring ?x_45 := @subalgebra.comm_ring ?x_50 ?x_51 ?x_52 ?x_53 ?x_54 ?x_55\n[class_instances] (4) ?x_53 : comm_ring ?x_51 := @subalgebra.comm_ring ?x_56 ?x_57 ?x_58 ?x_59 ?x_60 ?x_61\n[class_instances] (5) ?x_59 : comm_ring ?x_57 := @subalgebra.comm_ring ?x_62 ?x_63 ?x_64 ?x_65 ?x_66 ?x_67\n[class_instances] (6) ?x_65 : comm_ring ?x_63 := @subalgebra.comm_ring ?x_68 ?x_69 ?x_70 ?x_71 ?x_72 ?x_73\n[class_instances] (7) ?x_71 : comm_ring ?x_69 := @subalgebra.comm_ring ?x_74 ?x_75 ?x_76 ?x_77 ?x_78 ?x_79\n[class_instances] (8) ?x_77 : comm_ring ?x_75 := @subalgebra.comm_ring ?x_80 ?x_81 ?x_82 ?x_83 ?x_84 ?x_85\n[class_instances] (9) ?x_83 : comm_ring ?x_81 := @subalgebra.comm_ring ?x_86 ?x_87 ?x_88 ?x_89 ?x_90 ?x_91\n[class_instances] (10) ?x_89 : comm_ring ?x_87 := @subalgebra.comm_ring ?x_92 ?x_93 ?x_94 ?x_95 ?x_96 ?x_97\n</pre></div>",
        "id": 189709352,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583340053
    },
    {
        "content": "<p>In some cases it also seems to get worse over time, that is, with new mathlib the simp stops working and there is no clear reason.</p>",
        "id": 189709507,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583340124
    },
    {
        "content": "<p>It's really funny. In</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">conj</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">conj_im</span><span class=\"o\">]</span>\n\n<span class=\"n\">class</span> <span class=\"n\">lie_algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">lie_ring</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lie_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"err\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"err\">⁆</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"err\">•</span> <span class=\"err\">⁅</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"err\">⁆</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">conj</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">conj_im</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>the first example works, and the second one fails. And yes, they are absolutely identical, but just adding a class inbetween has messed up typeclass search.</p>",
        "id": 189709568,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1583340158
    },
    {
        "content": "<p>aha! Well this <code>lie_algebra R L extends lie_ring L</code> is a known anti-pattern</p>",
        "id": 189709608,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583340191
    },
    {
        "content": "<p>We need a linter for this!</p>",
        "id": 189709680,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1583340232
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">conj</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">lie_skew</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>The <code>lie_skew</code> lemma has a <code>[lie_ring L]</code> argument which triggers this ugly search.</p>",
        "id": 189709693,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583340240
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> and <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> for debugging this!</p>",
        "id": 189710173,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583340487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Is there a standard replacement for this anti-pattern?</p>",
        "id": 189710195,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583340501
    },
    {
        "content": "<p>move <code>[lie_ring L]</code> to before <code>extends</code>, and then add it as another argument in 100 places</p>",
        "id": 189710295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583340573
    },
    {
        "content": "<p>Although perhaps <code>lie_ring</code> could <code>extend</code> <code>add_comm_group</code>, which would help a bit</p>",
        "id": 189710398,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583340625
    },
    {
        "content": "<p>I also have to say I don't understand why <code>simp</code> gets as far as trying to synthesize this instance</p>",
        "id": 189710662,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583340817
    },
    {
        "content": "<p>So concretely, change</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">lie_ring</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">has_bracket</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">lie_ring</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_bracket</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">lie_algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">lie_ring</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">lie_algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lie_ring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 189711744,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583341422
    },
    {
        "content": "<p>then delete <code>[add_comm_group L]</code> elsewhere or replace it by <code>[lie_ring L]</code> as appropriate</p>",
        "id": 189711847,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583341464
    },
    {
        "content": "<p>Is there a canonical Lie structure on a ring?  Lots of <code>lie_ring</code> definitions are not instances.</p>",
        "id": 189712393,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583341785
    },
    {
        "content": "<p>Yes, there is <code>lie_ring.of_associative_ring</code> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>X</mi><mi>Y</mi><mo>−</mo><mi>Y</mi><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">[X, Y] = XY - YX</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span>). I'm not sure why it is not an instance, but it seems reasonable to have it be opt-in.</p>",
        "id": 189712901,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583342057
    },
    {
        "content": "<p>Is it causing a problem?</p>",
        "id": 189712946,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583342091
    },
    {
        "content": "<p>You have to write more instances by hand now.  And the errors that you get when you have an extra <code>add_comm_group</code> instance lying around are not pretty.</p>",
        "id": 189713012,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583342137
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2084\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2084\">#2084</a></p>",
        "id": 189713104,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583342175
    },
    {
        "content": "<blockquote>\n<p>We need a linter for this!</p>\n</blockquote>\n<p>The linter <code>dangerous_instance</code>should find this. I will investigate why it doesn't.</p>",
        "id": 189713593,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1583342504
    },
    {
        "content": "<p>I see. There seem to be two changes going on here.</p>\n<ul>\n<li>Since <code>lie_algebra</code> no longer extends <code>lie_ring</code> but is indexed on it you have to write two instances instead of one.</li>\n<li>In the <code>lie_algebra</code> instance the <code>lie_ring</code> part can't be inferred from the definition, and also can't be inferred from instance search because what I've been calling instances are not actually instances at all.</li>\n</ul>",
        "id": 189713687,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583342544
    },
    {
        "content": "<p>For the second one maybe we can just make <code>lie_ring.of_associative_ring</code> an instance after all. <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> was there a strong reason to not have it be an instance? I assume it was discussed at some point on the github issue but there are way too many collapsed comments to go looking for it...</p>",
        "id": 189713886,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583342653
    },
    {
        "content": "<p>Gabriel, do you need this to bump the mathlib version or something?</p>",
        "id": 189714007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583342721
    },
    {
        "content": "<blockquote>\n<p>The linter <code>dangerous_instance</code>should find this. I will investigate why it doesn't.</p>\n</blockquote>\n<p>Oh, <code>dangerous_instance</code> does catch this problem:</p>\n<div class=\"codehilite\"><pre><span></span>The following arguments become metavariables. argument 1: (R : Type u)\n</pre></div>\n\n\n<p>The problem is that currently linters are disabled for automatically generated definitions. This is necessary for many linters, but linters that check the library more globally (like the instance checking and <code>simp</code>-lemma checking) should be enabled for automatically generated declarations. This in on my to-do list.</p>",
        "id": 189714159,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1583342802
    },
    {
        "content": "<p>Kind of, in the <code>lean36</code> branch the <code>simp_nf</code> linter produces lots of timeouts.  This is one of the timeouts.</p>",
        "id": 189714160,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583342804
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib/pull/1644#discussion_r343902029\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1644#discussion_r343902029\">https://github.com/leanprover-community/mathlib/pull/1644#discussion_r343902029</a> is about this lie ring of ring instance/def</p>",
        "id": 189714875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583343225
    },
    {
        "content": "<p>Yes, I remember now. Another concern is if you have an instance saying a product of Lie algebras is a Lie algebra, then a product of rings becomes a Lie algebra in two ways. In this case I believe the resulting definitions will work out to be defeq, but in general there could be a problem.</p>",
        "id": 189715352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583343544
    },
    {
        "content": "<p>Sorry for (partially) causing this mess.</p>",
        "id": 189715849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583343884
    },
    {
        "content": "<p>I think we didn't make it an instance because we thought it was better to be conservative for now.</p>",
        "id": 189715891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583343907
    },
    {
        "content": "<p>Gabriel I think your change looks fine. Actually the ones for <code>matrix n n R</code> really should be instances, I think, because this is the \"by definition\" instance. (Unless we wanted to make a synonym <code>gl n R := matrix n n R</code> and attach the instance to that instead.) That would save one occurrence of <code>@lie_algebra</code>.</p>",
        "id": 189716018,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583343984
    },
    {
        "content": "<p>Johan I think I even also argued that it should not be an instance.</p>",
        "id": 189716076,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583344029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> What is the best way forward? Should this be fixed in a separate PR?</p>",
        "id": 189716894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583344497
    },
    {
        "content": "<p>Because I guess that we are running the risk that the bump PR is going to be a huge mess of little changes, and if multiple people contribute, then there will be nobody who has an overview of whether the PR is still doing only harmless changes...</p>",
        "id": 189716968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583344548
    },
    {
        "content": "<p>Do you mean other than <a href=\"https://github.com/leanprover-community/mathlib/issues/2084\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2084\">#2084</a>?</p>",
        "id": 189717100,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583344622
    },
    {
        "content": "<p>or is that already a \"separate PR\"?</p>",
        "id": 189717122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583344639
    },
    {
        "content": "<p>Ooh, I hadn't seen that one yet...</p>",
        "id": 189717152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583344662
    },
    {
        "content": "<p>I think this is fine as is. I wouldn't be surprised if we want the <code>gl</code> synonym/abbreviation. We can always turn that <code>def</code> into an <code>instance</code> later.</p>",
        "id": 189717500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583344853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> If you can make the linter catch these errors that would be great. It would prevent future me from messing up again.</p>",
        "id": 189717655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583344930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I've put <a href=\"https://github.com/leanprover-community/mathlib/issues/2084\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2084\">#2084</a> on the merge queue</p>",
        "id": 189717873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583345043
    },
    {
        "content": "<p>The linter is upset with <a href=\"https://github.com/leanprover-community/mathlib/issues/2084\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2084\">#2084</a> because of</p>\n<div class=\"codehilite\"><pre><span></span>-- algebra/ordered_group.lean\n#print add_neg_le_iff_le_add /- Left-hand side simplifies from\n  a + -c ≤ b\nto\n  a ≤ c + b\nusing\n  [add_neg_le_iff_le_add&#39;]\nTry to change the left-hand side to the simplified term!\n -/\n</pre></div>",
        "id": 189725236,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583349680
    },
    {
        "content": "<p>How was this not a problem previously?</p>",
        "id": 189725366,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583349753
    },
    {
        "content": "<p>Do you remember my original complaint in this thread?  Apparently <code>simp</code> refuses to rewrite <em>anything</em> if the type class resolution fails (takes too long? not sure) for a single simp lemma.  (This looks like a bug.)  The <code>lie_skew</code> seems to apply to some (all?) negations and causes a loop in type class resolution.  Hence there were a lot of terms that simp did not rewrite, even though they could be simplified with some <code>by simp only [only simp lemmas here]</code>.  Now that the lie_algebra issue is fixed, simp is effectively more powerful and the linter can now detect more problems.</p>",
        "id": 189727615,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583351197
    },
    {
        "content": "<p>What I think is the most surprising thing about this is that these simp failures are indistinguishable from \"simp couldn't make any progress\", right?</p>",
        "id": 189728480,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583351696
    },
    {
        "content": "<p>So when simp fails to apply the lemma you expect, the reason could be that some other lemma is timing out?</p>",
        "id": 189728517,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583351726
    },
    {
        "content": "<p>while one might naively expect that that would instead result in a timeout?</p>",
        "id": 189728610,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583351775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Any.20ideas.20on.20how.20to.20debug.20this.3F/near/189728517\" title=\"#narrow/stream/113488-general/topic/Any.20ideas.20on.20how.20to.20debug.20this.3F/near/189728517\">said</a>:</p>\n<blockquote>\n<p>So when simp fails to apply the lemma you expect, the reason could be that some other lemma is timing out?</p>\n</blockquote>\n<p>Yes, this is very counterintuitive.  But it's the best explanation I have before looking into the C++ code.</p>",
        "id": 189728908,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583351961
    },
    {
        "content": "<p>Ah, thanks. Sorry for the noise, I was jumping in halfway through.</p>",
        "id": 189729218,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583352135
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/137\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/137\">https://github.com/leanprover-community/lean/issues/137</a></p>",
        "id": 189730458,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583352845
    },
    {
        "content": "<p>The linter actually ignored all errors from simp on purpose.  There is a <code>&lt;|&gt; pure none</code> line in the linter.  That's because I was getting lots of errors from type class resolution.</p>",
        "id": 189730559,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583352922
    },
    {
        "content": "<p>I've removed the line from the linter that ignores the errors.  Let's say what it says now: <a href=\"https://github.com/leanprover-community/mathlib/runs/485926769\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/runs/485926769\">https://github.com/leanprover-community/mathlib/runs/485926769</a></p>",
        "id": 189730898,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583353147
    },
    {
        "content": "<p>okay, but in general interactive use... I will just try the example, thanks</p>",
        "id": 189731020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583353216
    },
    {
        "content": "<p>\"neat\"</p>",
        "id": 189731052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583353244
    },
    {
        "content": "<p>Argh many apologies for mostly causing this mess, and many thanks for the PR which has fixed it.</p>",
        "id": 189738551,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1583358116
    },
    {
        "content": "<p>As you can see from this discussion, these are very subtle issues, and nobody as a good rule book here.</p>",
        "id": 189738687,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583358188
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I have just read through the thread and I still feel guilty, but I am too late to have anything to offer.</p>",
        "id": 189738951,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1583358326
    },
    {
        "content": "<p>This is exactly what the linters are for: hard to know you're doing something dangerous, hard for any reviewer to notice, but the computer can notice easily. Finding this kind of situation is good because we can improve the linters.</p>",
        "id": 189739094,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583358404
    },
    {
        "content": "<p>So I am assuming that <code>G_module_hom G M N</code> should not extend <code>add_monoid_hom M N</code> for the same reason?</p>",
        "id": 189945321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583537665
    },
    {
        "content": "<p>But I can still add a coercion manually, right?</p>",
        "id": 189945363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583537737
    },
    {
        "content": "<p>are these structures? The issue described here is only relevant to classes</p>",
        "id": 189945943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583538466
    },
    {
        "content": "<p>Aah! Great!</p>",
        "id": 189946028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583538530
    }
]