[
    {
        "content": "<p>I was proving some lemmas about disjoint finsets, and I was amazed to find that this goal was solved by <code>simp {contextual := tt}</code>, when I previously had a 10 line proof.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n    <span class=\"n\">a</span> <span class=\"err\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">disjoint</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">card</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"err\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">card</span> <span class=\"n\">t</span>\n</pre></div>\n\n\n<p>To solve this goal before I noticed that <code>simp</code> did it, I had to rewrite <code>card (insert a s) + card t</code> to <code>card s + card (insert a t)</code> which involves using <code>rw ← card_insert_of_not_mem</code>, where card_insert_of_not_mem is a <code>simp</code> lemma, used in the wrong direction, so I'm wondering how simp managed it. The only <code>@[simp]</code> lemma it used which isn't already in the library is <code>disjoint_insert_left [decidable_eq α] {a : α} {s t : finset α} :  disjoint (insert a s) t ↔ a ∉ t ∧ disjoint s t</code></p>",
        "id": 123265688,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1520177026
    },
    {
        "content": "<p>Chris -- you can find out how simp did it -- I ran into this when preparing my blog post on congruence being an equivalence relation</p>",
        "id": 123266504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520179065
    },
    {
        "content": "<p>and I wrote it up as something-which-might-be-useful-as-a-document at</p>",
        "id": 123266547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520179144
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/simp.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/simp.md\">https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/simp.md</a></p>",
        "id": 123266550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520179147
    },
    {
        "content": "<p>Do you want to edit it and then we could submit it as a PR?</p>",
        "id": 123266551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520179163
    },
    {
        "content": "<p>I still have no idea how simp works in practice, all I know is that it randomly looks through its database and tries stuff. I have no idea about its strategy though.</p>",
        "id": 123266554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520179202
    },
    {
        "content": "<p>It's way more sophisticated than I previously thought. Another capability that I only discovered today is that if a simp lemma of the form <code>p → x = y</code> can be used if there is a proof of p in the context. Looking at the trace I can see that it didn't use the method I used, and instead rewrote <code>card (insert a s ∪ t)</code> to <code>card (insert a (s ∪ t))</code> and then must have somehow worked out that it should try to prove and prove <code>a ∉  s ∪ t</code>, from proofs of <code>a ∉ s</code> and <code>a ∉ t</code> in the context, so it could use card_insert_of_not_mem, which seems quite sophisticated to me. I can't add to the docs really, because I don't know what's going on.</p>",
        "id": 123267383,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1520181218
    },
    {
        "content": "<p>i like how you mention Prolog-like search in your simp.md</p>",
        "id": 123267882,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520182413
    },
    {
        "content": "<p>I would amend that to backtracking search, as described in <a href=\"https://en.wikipedia.org/wiki/Backtracking\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Backtracking\">https://en.wikipedia.org/wiki/Backtracking</a>, if you want to give a good description of it</p>",
        "id": 123267935,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520182521
    },
    {
        "content": "<p>I agree with you that these days, nobody has heard of Prolog</p>",
        "id": 123268115,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520182919
    },
    {
        "content": "<blockquote>\n<p>I agree with you that these days, nobody has heard of Prolog</p>\n</blockquote>\n<p>Oh the reason I mention it is far more mundane! I have no CS background at all and had no idea what a Prolog-like search meant but the phrase is mentioned several times in the Lean docs so I just started using it as meaning \"something I don't understand at all\" because I had no idea how simp worked</p>",
        "id": 123268168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520183037
    },
    {
        "content": "<p>I'm not sure I like the word backtracking here.  The only place where simp backtracks in any meaningful sense is when you have a conditional simp lemma (such as <code>p -&gt; x = y</code> above), and simp fails to discharge the assumption.  Otherwise simp never goes back to a previous step.</p>",
        "id": 123268207,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520183061
    },
    {
        "content": "<p>i've been mislead</p>",
        "id": 123268208,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520183080
    },
    {
        "content": "<p>I am going to PR these simp docs in the hope that other people can actually make them correct and helpful.</p>",
        "id": 123268209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520183096
    },
    {
        "content": "<p>tpil describes simp as a prolog-like search, which in my mind means backtracking</p>",
        "id": 123268218,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520183110
    },
    {
        "content": "<p>Where does TPIL say that?  I can't find either backtrack or prolog.</p>",
        "id": 123268263,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520183186
    },
    {
        "content": "<p>If you're looking for a short buzzwordy description, I'd use \"simp applies a conditional term rewriting system\".</p>",
        "id": 123268267,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520183224
    },
    {
        "content": "<p>hmm, looking at the current version, it mentions it when describing the type class instance resolution mechanism</p>",
        "id": 123268271,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520183237
    },
    {
        "content": "<p>I can quite believe I've conflated the two. As I say, I was using the entire phrase as a joke for a while</p>",
        "id": 123268275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520183277
    },
    {
        "content": "<p>Indeed, type class inference is essentially a version of λProlog and uses backtracking.</p>",
        "id": 123268276,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520183278
    },
    {
        "content": "<p>I would just use it to describe anything I couldn't understand.</p>",
        "id": 123268315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520183287
    },
    {
        "content": "<p>i'll just claim that i was bamboozled by kevin :)</p>",
        "id": 123268316,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520183306
    },
    {
        "content": "<p>I'll fix it</p>",
        "id": 123268317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520183307
    },
    {
        "content": "<p>Prolog = try to <code>apply</code> all the theorems you know and repeat for the generated subgoals</p>",
        "id": 123268318,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520183327
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/simp.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/simp.md\">https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/simp.md</a></p>",
        "id": 123268378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520183487
    },
    {
        "content": "<p>With a bit of artistic license:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">prolog</span> <span class=\"o\">(</span><span class=\"n\">lemmas</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">first</span> <span class=\"err\">$</span> <span class=\"n\">lemmas</span><span class=\"bp\">.</span><span class=\"n\">for</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">applyc</span> <span class=\"n\">l</span><span class=\"bp\">;</span> <span class=\"n\">prolog</span>\n</pre></div>",
        "id": 123268379,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520183493
    },
    {
        "content": "<p>Re: documentation.  If you mention congruence, you could show off simp's support for congruence relations.  If you show reflexivity and transitivity for <code>cong</code>, and have congruence lemmas for <code>+</code>, etc., then you can rewrite with congruences as if they were equations.</p>",
        "id": 123268428,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520183637
    },
    {
        "content": "<p>I think you should mention the <code>@[simp] lemma my_lemma : fact &lt;-&gt; true</code> trick</p>",
        "id": 123268470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520183679
    },
    {
        "content": "<p>especially since it could be confusing when reading existing Lean code</p>",
        "id": 123268480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520183725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"chrishughes24@gmail.com\" data-user-id=\"110044\">@Chris Hughes</span>, if you just want to see what simp ended up doing (and not all the things that it didn't do), then I've found <code>set_option trace.simplify.rewrite true</code> to produce a more manageable amount of information.</p>",
        "id": 123272385,
        "sender_full_name": "Reid Barton",
        "timestamp": 1520192802
    },
    {
        "content": "<p>I've added Reid's comment. Patrick -- is this some trick for getting simp to know about facts which are not necessarily of the form <code>x=y</code> or <code>x iff y</code>? Assuming it is I've added it too. I am not sure I am competent enough to add Gabriel's comment so it's unedited at the bottom of <a href=\"https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/simp.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/simp.md\">https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/simp.md</a></p>",
        "id": 123273896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520196257
    },
    {
        "content": "<p>Yes. It's more a comment to your first bullet than a third one</p>",
        "id": 123273963,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520196475
    },
    {
        "content": "<p>If you want a cheap way to document stuff about simp not in TPIL you can also search for simp in <a href=\"https://github.com/leanprover/lean/blob/master/doc/changes.md\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/doc/changes.md\">https://github.com/leanprover/lean/blob/master/doc/changes.md</a></p>",
        "id": 123274002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520196527
    }
]