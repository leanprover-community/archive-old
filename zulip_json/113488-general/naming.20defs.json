[
    {
        "content": "<p>So here is something that isn't really addressed in the naming convention. Let's say I'm making a <code>def</code>. Obviously the name should describe what it \"is\". As a typical example, let's say that we have a particular function  <code>foo : α → β</code> that we want to bundle into some <code>bar</code>. Natural candidates for the name would be <code>foo_bar</code> or <code>bar_foo</code>, but which one is preferred in mathlib? As explicit example, how should the bundling of the map <code>λ x : ℝ≥0∞, x⁻¹</code> into an order isomorphism <code>ℝ≥0∞ ≃o order_dual ℝ≥0∞</code> be called?</p>",
        "id": 271228567,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644379659
    },
    {
        "content": "<p>/poll Naming bundles<br>\n<code>order_iso_inv_dual</code><br>\n<code>order_iso_dual_inv</code><br>\n<code>inv_order_iso_dual</code>?</p>",
        "id": 271228611,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644379686
    },
    {
        "content": "<p>Yours is a bit specific, so maybe it will inherit a trailing <code>_ennreal</code></p>",
        "id": 271228634,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644379747
    },
    {
        "content": "<p>yes, it's in the <code>ennreal</code> namespace</p>",
        "id": 271228640,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644379761
    },
    {
        "content": "<p>why the <code>.</code>? It won't allow for projection notation.</p>",
        "id": 271228646,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644379782
    },
    {
        "content": "<p>Ah, I think it should be in the <code>order_iso</code> namespace</p>",
        "id": 271228648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644379785
    },
    {
        "content": "<p>Interesting, why there over <code>ennreal</code>? I can't see using it specifically while I have <code>order_iso</code> open, but I can imagine using it when I have <code>ennreal</code> open.</p>",
        "id": 271228713,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644379853
    },
    {
        "content": "<p>I'm not against reconsidering it, but that's how mathlib already works for the most part.</p>",
        "id": 271228790,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644379950
    },
    {
        "content": "<p>To make sure I understand, <code>def</code>s of a bundle of type <code>bar</code> belong in the <code>bar</code> namespace, and not in the namespace of the type on which the underlying function is defined?</p>",
        "id": 271228881,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644380064
    },
    {
        "content": "<p>Exactly. In particular because most bundled homs aren't defined on a concrete type, or (more rarely) are defined on two (different) concrete type. They are homs after all!</p>",
        "id": 271228911,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644380133
    },
    {
        "content": "<p>and also because there are usually many strengthenings to be had. For example, I'm fairly sure yours is actually an order homeomorphism.</p>",
        "id": 271228978,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644380206
    },
    {
        "content": "<p>Sure, it is. Do we have a bundle that does both? If so, I'll add it in my PR.</p>",
        "id": 271229047,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644380288
    },
    {
        "content": "<p>I think the <code>inv</code> should come first, since it is <code>inv</code> with some stuff</p>",
        "id": 271229079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644380334
    },
    {
        "content": "<p>I don't think you need the <code>_dual</code> unless there is another inv order iso that isn't going to the dual</p>",
        "id": 271229108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644380373
    },
    {
        "content": "<p>ah, I see, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_iso.to_homeomorph\">docs#order_iso.to_homeomorph</a>, the homeomorphism comes for free because the topology on <code>ℝ≥0∞</code> is the order topology.</p>",
        "id": 271229297,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644380600
    },
    {
        "content": "<p>In this case, the order_iso namespace matches <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_iso.mul_left\">docs#order_iso.mul_left</a></p>",
        "id": 271246585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644397110
    },
    {
        "content": "<p>Also the family of maps named <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.id\">docs#monoid_hom.id</a>, that are <code>id</code> bundled into a <code>monoid_hom</code>.</p>",
        "id": 271255133,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644401792
    },
    {
        "content": "<p>I would say <code>inv_order_iso</code>, a la <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynonial.map_ring_hom\">docs#polynonial.map_ring_hom</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.eval_ring_hom\">docs#polynomial.eval_ring_hom</a>. But more than anything, why not replace the current definition with the bundled definition?</p>",
        "id": 271256909,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644402745
    },
    {
        "content": "<p>You want to replace <code>inv</code>? <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 271261778,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644405376
    },
    {
        "content": "<p>Why can't it be made an order_iso from the get go? I'm not sure how notation interfaces with coetofun but we've certainly been bundling more stuff...</p>",
        "id": 271263660,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644406412
    },
    {
        "content": "<p>Well, some <code>div_inv_monoid</code> are not ordered.</p>",
        "id": 271264317,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644406833
    },
    {
        "content": "<p>the <code>inv</code> is defined separately, it's not defined automatically</p>",
        "id": 271265052,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644407358
    },
    {
        "content": "<p>Still, I don't see how that makes sense. It's like asking \"Why is <code>id</code> not an homeomorphism?\"</p>",
        "id": 271265272,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644407513
    },
    {
        "content": "<p>I mean, it is when it can be defined in such a way. Just define <code>inv := the whole shebang</code>, then <code>has_inv := inv</code>, and it should all work out. a mathematician would treat it as an order_iso, why not lean?</p>",
        "id": 271265399,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644407589
    },
    {
        "content": "<p>The <code>inv</code> notation comes from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_inv\">docs#has_inv</a>. You can't put an <code>order_iso</code> in <code>has_inv</code>.</p>",
        "id": 271265486,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644407643
    },
    {
        "content": "<p>yeah you can, just put the coe_to_fun. and if the name <code>inv</code> isn't taken already, why not just use that?</p>",
        "id": 271265588,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644407707
    },
    {
        "content": "<p>Also, I don't see why the order structure would get priority. There are many other bundlings.</p>",
        "id": 271265614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644407725
    },
    {
        "content": "<p>that I can see, but we haven't seemed to need <code>inv</code> as a <code>ring_hom</code> or such like and I don't see any other bundling that is needed (as pointed out above, the homeomorphism is free)</p>",
        "id": 271265938,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644407908
    },
    {
        "content": "<p>This also causes a bootstrap problem. You'll have to prove many properties of <code>inv</code> as you're defining it.</p>",
        "id": 271266077,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644408000
    },
    {
        "content": "<p>and I didn't even mention that if you want to define own <code>inv</code>, you'll have to get it off the algebraic hierarchy. meaning for example that fields won't have an <code>inv</code> anymore.</p>",
        "id": 271266251,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644408046
    },
    {
        "content": "<p>For the record, I tried this with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_hull\">docs#convex_hull</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure_operator\">docs#closure_operator</a>, and I regret.</p>",
        "id": 271266426,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644408139
    },
    {
        "content": "<p>I'm not suggesting to remove it in general. I'm suggesting that <code>ennreal</code>'s inv, specifically, can be designed as an <code>order_iso</code>. yea there's bootstrapping stuff, but it shouldn't be too bad considering it's defined as an <code>Inf</code>.</p>",
        "id": 271267076,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644408542
    },
    {
        "content": "<p>I don't think you want it bundled anyway most of the time anyway. <code>inv</code> goes from <code>ennreal</code> to itself. The bundle goes to it's <code>order_dual</code>.</p>",
        "id": 271289656,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644418552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/naming.20defs/near/271265399\">said</a>:</p>\n<blockquote>\n<p>a mathematician would treat it as an order_iso, why not lean?</p>\n</blockquote>\n<p>I think the key thing here is that mathematicians continuously re-bundle their objects as they prove new things, but you can't really do this formally, because it just means you have to redefine everything all the time. So, in general it's better to provide a separation of concerns, which is why <code>has_inv</code> is just a notation. And when you want the order isomorphism you appeal to the bundle. But As Yaël said, why prefer one bundle over another?</p>",
        "id": 271318604,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644428802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I just changed my vote to <code>order_iso.inv_ennreal</code> because I just noticed that <code>order_iso.inv</code> already exists, and is basically the same thing but for groups, so it would be strange for this one to have a very different name.</p>",
        "id": 271382440,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1644464193
    },
    {
        "content": "<p>it just got put on the queue. If someone wants to stop it I'll switch the name. Or can I stop it?</p>",
        "id": 271401140,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644482593
    },
    {
        "content": "<p>Can you link the PR? I don't see it mentioned anywhere in this thread</p>",
        "id": 271405602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644485309
    },
    {
        "content": "<p>Is that a PR I put on the queue? There was a comment about names pointing to a zulip discussion, but it was marked as resolved, so I thought a conclusion had been reached</p>",
        "id": 271409299,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1644487495
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11869\">#11869</a> ?</p>",
        "id": 271409447,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1644487554
    },
    {
        "content": "<p>It was resolved, and then last minute became unresolved. No one's fault. Yes, it was <a href=\"https://github.com/leanprover-community/mathlib/pull/11869\">#11869</a>. I'll just submit another PR to change the name.</p>",
        "id": 271445564,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644506264
    },
    {
        "content": "<p>For future reference, if a PR isn't delegated to me, is it even possible for me to pull it off the queue with <code>bors r-</code>?</p>",
        "id": 271446390,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644506580
    },
    {
        "content": "<p>I don't think so (but I am not sure). Btw pushing a commit will do.</p>",
        "id": 271448181,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644507328
    },
    {
        "content": "<p>Sorry, this is my fault, I should have made it clear in the PR that there was one last thing to do.</p>",
        "id": 271448349,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1644507380
    },
    {
        "content": "<p><del>#11958</del></p>",
        "id": 271456791,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644510781
    },
    {
        "content": "<p>Whoops, sorry, something is off. I used the same branch and I think that's not good.</p>",
        "id": 271457055,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644510869
    },
    {
        "content": "<p>Okay, this looks correct: <a href=\"https://github.com/leanprover-community/mathlib/pull/11959\">#11959</a></p>",
        "id": 271459268,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1644511761
    }
]