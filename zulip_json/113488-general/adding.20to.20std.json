[
    {
        "content": "<p>Im currently working on a package that is meant to expand on lean's current std for lists, but I started considering whether I should add them to lean's std directly. I would like some input. Thank in advance, and also, here is the current <a href=\"https://github.com/crabbo-rave/lean4-Itertools\">repo</a></p>",
        "id": 272550260,
        "sender_full_name": "Joseph O",
        "timestamp": 1645313520
    },
    {
        "content": "<p>My suggestion is to add to mathlib4, for example here -&gt; <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/List/Defs.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/List/Defs.lean</a></p>",
        "id": 272550463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645313769
    },
    {
        "content": "<p>Ok, will do</p>",
        "id": 272550566,
        "sender_full_name": "Joseph O",
        "timestamp": 1645313890
    },
    {
        "content": "<p>But there are some I think would be important in the core std</p>",
        "id": 272550777,
        "sender_full_name": "Joseph O",
        "timestamp": 1645314230
    },
    {
        "content": "<p>the compiler <code>Std</code>'s purpose is to contain everything that the compiler needs to build itself that doesn't fit in other packages, everything else goes to mathlib 4 for now and will probably find a new home in some \"std-ext\" or whatever at some point.</p>",
        "id": 272551014,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645314532
    },
    {
        "content": "<p>Ok cool</p>",
        "id": 272556973,
        "sender_full_name": "Joseph O",
        "timestamp": 1645321502
    },
    {
        "content": "<p>Im pretty new to this, so I want to ask. Is this an ok docstring?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">`List.choose` filters list `l` of type `List α` with `chooser` which is of type `α → Option β`</span>\n<span class=\"sd\">It keeps the elements where `chooser x` is `some _` and discards the ones that are `none`</span>\n\n<span class=\"sd\">Example:</span>\n<span class=\"sd\">```</span>\n<span class=\"sd\">def oneTwo? : Nat → Option Nat</span>\n<span class=\"sd\">  | 1 =&gt; some 1</span>\n<span class=\"sd\">  | 2 =&gt; some 2</span>\n<span class=\"sd\">  | _ =&gt; none</span>\n\n<span class=\"sd\">[1, 2, 3, 5, 1, 4, 2] |&gt; choose oneTwo? = [1, 2, 1, 2]</span>\n<span class=\"sd\">```</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>",
        "id": 272561257,
        "sender_full_name": "Joseph O",
        "timestamp": 1645326499
    },
    {
        "content": "<p>This topic was moved to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/adding.20to.20std\">#mathlib4 &gt; adding to std</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 272563274,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645329151
    }
]