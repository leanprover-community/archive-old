[
    {
        "content": "<p>Hi all,<br>\nI was playing around with the definition of a list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n</code></pre></div>\n<p>where <code>#print list</code> shows the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"n\">constructors</span><span class=\"o\">:</span>\n<span class=\"n\">list.nil</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">list.cons</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>So, I tried to redefine list without binding <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> (just like how <code>#print</code> shows it).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">list</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>But now I get an error: <code>universe level of type_of(arg #1) of 'list.nil' is too big for the corresponding inductive datatype</code>. I found that I can fix this by changing the type of <code>list</code> to be <code>Sort u → Type u</code>. But I am not sure why that's necessary, and why this doesn't break with the original definition.</p>",
        "id": 265201418,
        "sender_full_name": "Julius Marozas",
        "timestamp": 1639680650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409986\">@Julius Marozas</span> The fix you found is equivalent to doing <code>Sort u -&gt; Sort (u + 1)</code> (since <code>Type u = Sort (u + 1)</code> in general). Thinking about it in a computational way, the idea is that each constructor in an inductive type is expected to actually store its arguments so that you can later <code>match</code> and operate on them.  Arguments to the type itself (the ones in the first line up to the colon) are not expected to be stored anywhere.</p>\n<p>Your redefined list is one where each node keeps track of which type it's from, compared to the original where they don't.  Recording types like this means the list must be in one universe higher -- otherwise <code>list</code> might be one of the types that can appear in one of the nodes, and impredicativity like that is not allowed (\"predicativity\" is that definitions can only ever refer to things that are defined before them; I guess the name \"predicate\" stuck, but only for one-argument <code>Prop</code>-valued functions).</p>\n<p>Since each node knows the type of its element, you can easily go to fully heterogeneous lists, though there's not much you can really do with a list like this other than compute its length:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">list</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n</code></pre></div>",
        "id": 265208582,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639683517
    },
    {
        "content": "<p>That's isomorphic to <code>list (sigma $ @id (Sort u))</code>, right?</p>",
        "id": 265210837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639684603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thanks for the explanation, it's much clearer now.<br>\n<span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> The code you provided doesn't seem to type check, maybe you meant this: <code>list (sigma $ @id (Sort (u + 1)))</code>?</p>",
        "id": 265216062,
        "sender_full_name": "Julius Marozas",
        "timestamp": 1639687092
    },
    {
        "content": "<p>Oh, I forgot that I wasn't allowed to put sorts in a list or sigma type</p>",
        "id": 265216151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639687149
    },
    {
        "content": "<p>I might also mean <code>list (sigma $ @id (Type u))</code> or <code>list (psigma $ @id (Sort u))</code></p>",
        "id": 265216204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639687181
    },
    {
        "content": "<p>Yeah, that seems to work. What's the point of having both <code>psigma</code> and <code>sigma</code>?</p>",
        "id": 265216509,
        "sender_full_name": "Julius Marozas",
        "timestamp": 1639687308
    },
    {
        "content": "<p><code>psigma</code> causes annoying universe elaboration issues, apparently</p>",
        "id": 265216598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639687329
    },
    {
        "content": "<p>Which aren't worth sufferring through for 90% of the cases when you know you only are dealing with Types</p>",
        "id": 265216658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639687353
    },
    {
        "content": "<p>Interesting, do you have any examples of such cases, or documentation on this topic?</p>",
        "id": 265217020,
        "sender_full_name": "Julius Marozas",
        "timestamp": 1639687532
    },
    {
        "content": "<p>It would be great if someone could add a library note for this, so we could reference it from psigma and pprod</p>",
        "id": 265217658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639687846
    },
    {
        "content": "<p>I already hint at it in the module docs of <code>data.sigma.basic</code></p>",
        "id": 265220673,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639689385
    }
]