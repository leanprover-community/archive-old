[
    {
        "content": "<p>In <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.transparency\">docs#tactic.transparency</a> there are 5 transparency settings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">all</span> <span class=\"o\">:</span> <span class=\"n\">tactic.transparency</span>\n<span class=\"n\">semireducible</span> <span class=\"o\">:</span> <span class=\"n\">tactic.transparency</span>\n<span class=\"n\">instances</span> <span class=\"o\">:</span> <span class=\"n\">tactic.transparency</span>\n<span class=\"n\">reducible</span> <span class=\"o\">:</span> <span class=\"n\">tactic.transparency</span>\n<span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"n\">tactic.transparency</span>\n</code></pre></div>\n<p>I always thought that the lower transparency settings always involved fewer declarations. However, I just noticed that the <code>instances</code> transparency even applies to instances that are marked <code>@[irreducible]</code> (which means it applies to some definitions that <code>semireducible</code> doesn't apply to):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[irreducible]</span> <span class=\"kd\">instance</span> <span class=\"n\">has_zero.bool</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n<span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">trace</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"c1\">-- 0</span>\n<span class=\"n\">e2</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span> <span class=\"n\">transparency.instances</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"c1\">-- ff</span>\n<span class=\"n\">e3</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span> <span class=\"n\">transparency.semireducible</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"n\">e3</span><span class=\"o\">,</span> <span class=\"c1\">-- 0</span>\n<span class=\"n\">skip</span>\n</code></pre></div>\n<p>Is this intended? It sounds unwanted - I think of the <code>instance</code> transparency to unfold slightly more definitions than the reducible ones.<br>\nBackground: I tried adding <code>@[simps]</code> to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.iso.op\">docs#category_theory.iso.op</a>, but this gives an error, because <code>@[simps]</code> has unfolded the (irreducible) type when applying <code>whnf ... transparency.instances</code> to the type.</p>",
        "id": 220844344,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608777264
    },
    {
        "content": "<p>This is fixed in <a href=\"https://github.com/leanprover-community/lean/issues/538\">lean#538</a>. Thanks <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>!</p>",
        "id": 228896394,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1614918535
    }
]