[
    {
        "content": "<p>I want to construct the following theorem:</p>\n<p>if <code>α</code> has a <code> γ </code>- module structure and <code>α ≃ β</code> then β has <code> γ </code>- module structure<br>\nI have a problem.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">data.equiv.algebra</span>  <span class=\"nn\">algebra.module</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"n\">variables</span> <span class=\"p\">{</span><span class=\"err\">α</span> <span class=\"p\">:</span> <span class=\"n\">Type</span> <span class=\"n\">u</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"err\">β</span> <span class=\"p\">:</span> <span class=\"n\">Type</span> <span class=\"n\">v</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"err\">γ</span> <span class=\"p\">:</span> <span class=\"n\">Type</span> <span class=\"n\">w</span><span class=\"p\">}</span>\n<span class=\"nb\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"n\">namespace</span> <span class=\"n\">equiv</span>\n<span class=\"n\">section</span> <span class=\"n\">instances</span>\n<span class=\"n\">variables</span> <span class=\"p\">(</span><span class=\"n\">e</span> <span class=\"p\">:</span> <span class=\"err\">α</span> <span class=\"err\">≃</span> <span class=\"err\">β</span><span class=\"p\">)</span>\n<span class=\"n\">protected</span> <span class=\"k\">def</span> <span class=\"nf\">has_scalar</span> <span class=\"p\">[</span><span class=\"n\">has_scalar</span> <span class=\"err\">γ</span> <span class=\"err\">β</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">has_scalar</span> <span class=\"err\">γ</span> <span class=\"err\">α</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"err\">⟨λ</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"err\">γ</span><span class=\"p\">)</span>  <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">symm</span> <span class=\"p\">(</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"err\">⟩</span>\n\n<span class=\"n\">lemma</span> <span class=\"n\">smul_def</span> <span class=\"p\">[</span><span class=\"n\">has_scalar</span> <span class=\"err\">γ</span> <span class=\"err\">β</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"err\">γ</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">:</span> <span class=\"err\">α</span><span class=\"p\">)</span> <span class=\"p\">:</span>\n  <span class=\"nd\">@has_scalar.smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"p\">(</span><span class=\"n\">equiv</span><span class=\"o\">.</span><span class=\"n\">has_scalar</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">symm</span> <span class=\"p\">(</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">protected</span> <span class=\"k\">def</span> <span class=\"nf\">mul_action</span> <span class=\"p\">[</span><span class=\"n\">monoid</span> <span class=\"err\">γ</span><span class=\"p\">][</span><span class=\"n\">mul_action</span> <span class=\"err\">γ</span>  <span class=\"err\">β</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">mul_action</span> <span class=\"err\">γ</span>  <span class=\"err\">α</span> <span class=\"p\">:</span><span class=\"o\">=</span>\n<span class=\"p\">{</span> <span class=\"n\">one_smul</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">by</span> <span class=\"n\">simp</span> <span class=\"p\">[</span><span class=\"n\">smul_def</span><span class=\"p\">],</span>\n  <span class=\"n\">mul_smul</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">by</span> <span class=\"n\">simp</span> <span class=\"p\">[</span><span class=\"n\">smul_def</span><span class=\"p\">,</span> <span class=\"n\">mul_action</span><span class=\"o\">.</span><span class=\"n\">mul_smul</span><span class=\"p\">],</span>\n  <span class=\"o\">..</span><span class=\"n\">equiv</span><span class=\"o\">.</span><span class=\"n\">has_scalar</span> <span class=\"n\">e</span>  <span class=\"p\">}</span>\n\n<span class=\"n\">protected</span> <span class=\"k\">def</span> <span class=\"nf\">distrib_mul_action</span> <span class=\"p\">[</span><span class=\"n\">monoid</span> <span class=\"err\">γ</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">add_monoid</span> <span class=\"err\">β</span><span class=\"p\">]</span>  <span class=\"p\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"err\">γ</span>  <span class=\"err\">β</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">distrib_mul_action</span> <span class=\"err\">γ</span> <span class=\"err\">α</span>  <span class=\"p\">:</span><span class=\"o\">=</span>\n<span class=\"p\">{</span> <span class=\"n\">smul_add</span>  <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">by</span> <span class=\"n\">simp</span> <span class=\"p\">[</span><span class=\"n\">smul_def</span><span class=\"p\">],</span>\n  <span class=\"n\">smul_zero</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">by</span> <span class=\"n\">simp</span> <span class=\"p\">[</span><span class=\"n\">zero_def</span><span class=\"p\">,</span> <span class=\"n\">smul_def</span><span class=\"p\">,</span> <span class=\"n\">distrib_mul_action</span><span class=\"p\">],</span>\n  <span class=\"o\">..</span><span class=\"n\">equiv</span><span class=\"o\">.</span><span class=\"n\">mul_action</span> <span class=\"n\">e</span><span class=\"p\">,</span>\n  <span class=\"o\">..</span><span class=\"n\">equiv</span><span class=\"o\">.</span><span class=\"n\">add_monoid</span> <span class=\"n\">e</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">end</span> <span class=\"n\">instances</span>\n<span class=\"n\">end</span> <span class=\"n\">equiv</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"nb\">type</span> <span class=\"k\">class</span> <span class=\"nc\">instance</span> <span class=\"k\">for</span>\n<span class=\"err\">α</span> <span class=\"p\">:</span> <span class=\"n\">Type</span> <span class=\"n\">u</span><span class=\"p\">,</span>\n<span class=\"err\">β</span> <span class=\"p\">:</span> <span class=\"n\">Type</span> <span class=\"n\">v</span><span class=\"p\">,</span>\n<span class=\"err\">γ</span> <span class=\"p\">:</span> <span class=\"n\">Type</span> <span class=\"n\">w</span><span class=\"p\">,</span>\n<span class=\"n\">e</span> <span class=\"p\">:</span> <span class=\"err\">α</span> <span class=\"err\">≃</span> <span class=\"err\">β</span><span class=\"p\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"p\">:</span> <span class=\"n\">monoid</span> <span class=\"err\">γ</span><span class=\"p\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"p\">:</span> <span class=\"n\">add_monoid</span> <span class=\"err\">β</span><span class=\"p\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"p\">:</span> <span class=\"n\">distrib_mul_action</span> <span class=\"err\">γ</span> <span class=\"err\">β</span>\n<span class=\"err\">⊢</span> <span class=\"n\">add_monoid</span> <span class=\"err\">α</span>\n</pre></div>\n\n\n<p>How can fix it?</p>",
        "id": 164380313,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1556446883
    },
    {
        "content": "<p>Yeah, you're not the only one with this sort of problem</p>",
        "id": 164380548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556447333
    },
    {
        "content": "<p>The computer scientists are working on it</p>",
        "id": 164380559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556447358
    },
    {
        "content": "<p>If you go into <code>data.equiv.algebra</code>, there are a bunch of definitions that will let you transfer the ring structure from alpha to beta.</p>",
        "id": 164380560,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556447378
    },
    {
        "content": "<p>@<strong> Chris Hughes</strong> I read <code>data.equiv.algebra</code> but I don't understand how to fix it. What is hidden in this error?</p>",
        "id": 164380832,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1556447853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, I need the computer scientist to explain this error.</p>",
        "id": 164381005,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1556448174
    },
    {
        "content": "<p>The error is that Lean doesn't know what the <code>add_monoid</code> structure is on <code>α</code>. You can fix this by putting an <code>add_monoid</code> structure on <code>α</code> like this.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">add_monoid</span> <span class=\"n\">e</span>\n</pre></div>\n\n\n<p>Depending on your application, it might just be better to make <code>add_monoid α</code> an assumption, and stipulate that <code>e</code> is an<code>add_equiv</code></p>",
        "id": 164381147,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556448420
    },
    {
        "content": "<p>I used <code>instance</code> but it is error</p>\n<div class=\"codehilite\"><pre><span></span> maximum class-instance resolution depth has been reached (the limit can be increased by setting option &#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option &#39;trace.class_instances&#39;)\n</pre></div>",
        "id": 164382199,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1556450059
    },
    {
        "content": "<p>we knew that  <code>equiv.add_monoid e</code> give  <code>add_monoid α</code> from hypothesis  <code>add_monoid β</code><br>\nIf you add  <code>H:add_monoid α</code>  monoid structure of α from <code>H</code> and monoid structure of <code>α</code> from <code>add_monoid β</code> can difference<br>\nIf you add <code>add_equiv</code> you have a problem with <code>has_scalar</code> and <code>has_add</code></p>",
        "id": 164382215,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1556450138
    },
    {
        "content": "<p>Sorry, the instance won't work because it depends on <code>e</code>. I would probably make <code>add_monoid α</code> an assumption to your <code>mul_action</code> definition, and then in any application, you'll have to make it an instance yourself, using the equiv you have available.</p>",
        "id": 164382466,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556450622
    }
]