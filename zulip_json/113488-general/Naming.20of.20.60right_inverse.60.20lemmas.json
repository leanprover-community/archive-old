[
    {
        "content": "<p>We seem to have a fairly established convention that lemmas with statement <code>injective foo</code> should be called <code>foo_injective</code>.</p>\n<p>However, we seem to have little precedent for how to name lemmas with statement <code>right_inverse foo_inv foo</code>.</p>\n<p>This came up in <a href=\"https://github.com/leanprover-community/mathlib/pull/5797/files#r559716964\">this PR</a>, where the question was what to name this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat_cast_right_inverse</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.right_inverse</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>The confusion comes when considering whether the lemma is saying \"there is a right inverse of \"nat_cast\" and it is this\" (which matches the name I use there), or \"val is a right inverse of something\" (which would suggest the lemma should be <code>val_right_inverse</code>)</p>\n<p>Something to consider when choosing the name is how the projection <code>the_name.surjective : function.surjective (coe : ℕ → zmod n)</code> reads.</p>",
        "id": 223148651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610991947
    },
    {
        "content": "<p><code>nat_cast</code> <em>is</em> a left inverse, and therefore surjective. Do we have <code>left_inverse.surjective</code>?</p>",
        "id": 223151566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610994307
    },
    {
        "content": "<p>No, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.left_inverse.injective\">docs#function.left_inverse.injective</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.right_inverse.surjective\">docs#function.right_inverse.surjective</a></p>",
        "id": 223154036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610996190
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.left_inverse.right_inverse\">docs#function.left_inverse.right_inverse</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.right_inverse.left_inverse\">docs#function.right_inverse.left_inverse</a> since the two are defeq with an argument swap, which suggests to me that the intended use case was for the argument of interest to be in the second position</p>",
        "id": 223154081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610996244
    },
    {
        "content": "<p>So if the declaration we provided was instead <code>function.left_inverse (coe : ℕ → zmod n) val</code>, the spelling would be <code>nat_cast_left_inverse.right_inverse.surjective</code> <del>which reads \"the right inverse of the thing that is left-inverse to nat_cast is surjective\"</del></p>",
        "id": 223154241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610996367
    },
    {
        "content": "<p>I think the existence of <code>right_inverse</code> as a definition is kind of strange, and I would just prove <code>val_coe</code>, or <code>coe_val</code> (I don't remember which way round it is).</p>",
        "id": 223193388,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1611040349
    },
    {
        "content": "<p>The motivation for using <code>right_inverse</code> is that you get useful projections like <code>.surjective</code></p>",
        "id": 223199207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611045725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> should we just define <code>left_inverse.surjective</code> and <code>right_inverse.injective</code>?</p>\n<p>@others if you have good suggestions about the convention here, please chime in</p>",
        "id": 223336539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611123875
    },
    {
        "content": "<p>My feeling is no, since at that point we'd have a <code>&gt;</code>/<code>&lt;</code>-type situation where the two are indistinguishable and we need to declare one simp-normal.</p>\n<p>If we decide the convention is backwards though, we could switch those members between left and right.</p>",
        "id": 223345988,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611132916
    },
    {
        "content": "<p>Why do we have both <code>left_inverse</code> and <code>right_inverse</code> anyway? Why not merge them into <code>one_sided_inverse</code>?</p>",
        "id": 223350346,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1611135794
    },
    {
        "content": "<p>Which side would be the \"one\" side?</p>",
        "id": 223350891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611136175
    },
    {
        "content": "<p>Preferably in the same order as they appear, so <code>one_sided_inverse f g</code> means <code>f \\circ g = id</code>.</p>",
        "id": 223351140,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1611136350
    },
    {
        "content": "<p>I think that's the current left_inverse then</p>",
        "id": 223351474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611136591
    },
    {
        "content": "<p>Note that if we did that rename then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_left_inverse\">docs#has_left_inverse</a> would no longer have a matching name</p>",
        "id": 223351666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611136734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Naming.20of.20.60right_inverse.60.20lemmas/near/223336539\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> should we just define <code>left_inverse.surjective</code> and <code>right_inverse.injective</code>?</p>\n</blockquote>\n<p>The names <code>left_inverse.inv_surjective</code> and <code>right_inverse.inv_injective</code> would be fine I think, to make it clear what the (in|sur)jectivity refers too - although I don't know if the extra API is needed</p>",
        "id": 223492229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611225934
    },
    {
        "content": "<p>As an alternative approach here - we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/embedding\">docs#embedding</a> to bundle a function with a proof of its injectivity - could we have two more bundled function types for function-with-right-inverse and function-with-left-inverse? The API could be roughly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">left_invertible</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_fun</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">left_inverse</span><span class=\"o\">:</span> <span class=\"n\">left_inverse</span> <span class=\"n\">inv_fun</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">right_invertible</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_fun</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">left_inverse</span><span class=\"o\">:</span> <span class=\"n\">left_inverse</span> <span class=\"n\">inv_fun</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">left_invertible.symm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">left_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">right_invertible</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">right_invertible.symm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">right_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">left_invertible</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">left_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">embedding</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- a pile of simp lemmas like those for equiv</span>\n\n<span class=\"c1\">-- no need for any fields any more</span>\n<span class=\"kd\">structure</span> <span class=\"n\">equiv</span> <span class=\"kd\">extends</span> <span class=\"n\">left_invertible</span><span class=\"o\">,</span> <span class=\"n\">right_invertible</span>\n</code></pre></div>\n<p>Can anyone think of better names than <code>left_invertible</code> and <code>right_invertible</code>? <code>injection</code> and <code>surjection</code>? Distinguishing the bundle with a computable inverse <code>left_invertible</code> from the bundled with a non-computable inverse <code>embedding</code> by name along seems difficult.</p>",
        "id": 223492688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611226267
    },
    {
        "content": "<p>I made a PR at <a href=\"https://github.com/leanprover-community/mathlib/issues/5829\">#5829</a> with the above</p>",
        "id": 223518112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611240723
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5797\">#5797</a> is stuck on this naming issue, right? Does anyone have any concrete suggestions for a way forward?</p>",
        "id": 225432650,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612649591
    },
    {
        "content": "<p>Yes, I think that PR is stuck on this thread - although perhaps I could just insert a todo comment referencing a github issue / add clear docstrings resolving name ambiguities to unstick it.</p>",
        "id": 225439890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612662241
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6167\">#6167</a> adds some new definitions taking <code>left_inverse</code> arguments. It would be great to unblock the naming problem so that we actually have those arguments to pass.</p>",
        "id": 226593101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613517297
    },
    {
        "content": "<p>Since this has gone on for a while without resolution, I think you should do whatever you feel is best and when someone later has a good idea to fix it, they can go ahead and implement it. (That person might turn out to be me, but no promises.)</p>",
        "id": 227316005,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614019286
    },
    {
        "content": "<p>Most of the content of <a href=\"https://github.com/leanprover-community/mathlib/issues/5797\">#5797</a> got merged in another PR - it's now just creating aliases of lemmas with defeq-but-different types for the sake of projection notation</p>",
        "id": 227316312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614019427
    },
    {
        "content": "<p>But I would probably lean to just merging it and sorting out renames later - the statement ought to be clear from its type, and the name should be enough to at least find it</p>",
        "id": 227316555,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614019517
    }
]