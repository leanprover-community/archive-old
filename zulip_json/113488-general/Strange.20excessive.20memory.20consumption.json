[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cyclotomic_field</span> <span class=\"mi\">8</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">χ</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"mi\">8</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>produces (after more than half a minute)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">excessive</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">replace'</span>\n</code></pre></div>\n<p>but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cyclotomic_field</span> <span class=\"mi\">8</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">χ</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"mi\">8</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">χ</span> <span class=\"mi\">17</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works fine.<br>\nWhat is going on here?</p>",
        "id": 284530901,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654027754
    },
    {
        "content": "<p>This can be related with a diamond about the <code>ℤ</code>-algebra structure. What happens if you <code>open_localy cyclotomic</code>?</p>",
        "id": 284532474,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654028647
    },
    {
        "content": "<p>I think its the noncomputabiliy checker again</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.basic</span>\n<span class=\"bp\">.</span>\n<span class=\"kd\">noncomputable</span><span class=\"bp\">!</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cyclotomic_field</span> <span class=\"mi\">8</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">χ</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"mi\">8</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works as intended</p>",
        "id": 284532683,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654028781
    },
    {
        "content": "<p>Ah you're right</p>",
        "id": 284532739,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654028834
    },
    {
        "content": "<p>OK, thanks. I'll try to remember using <code>noncomputable!</code> when I get such errors.</p>",
        "id": 284532864,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654028915
    }
]