[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">generalize</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>I have made a <code>generalize</code> in term mode</p>",
        "id": 125497304,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524325838
    },
    {
        "content": "<p>let's say this is the goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">refl_trans</span> <span class=\"n\">red</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">refl_trans</span> <span class=\"o\">(</span><span class=\"n\">refl_trans</span> <span class=\"n\">red</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">w</span> <span class=\"bp\">∧</span> <span class=\"n\">refl_trans</span> <span class=\"o\">(</span><span class=\"n\">refl_trans</span> <span class=\"n\">red</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125497307,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524325852
    },
    {
        "content": "<p>doing <code>generalize z _</code> will give you this on the underscore:</p>",
        "id": 125497313,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524325877
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">refl_trans</span> <span class=\"n\">red</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">refl_trans</span> <span class=\"o\">(</span><span class=\"n\">refl_trans</span> <span class=\"n\">red</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">w</span> <span class=\"bp\">∧</span> <span class=\"n\">refl_trans</span> <span class=\"o\">(</span><span class=\"n\">refl_trans</span> <span class=\"n\">red</span><span class=\"o\">)</span> <span class=\"n\">x_1</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125497314,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524325884
    },
    {
        "content": "<p>is this a good idea?</p>",
        "id": 125497315,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524325902
    },
    {
        "content": "<p>example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">generalize</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">refl_trans</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">refl_trans</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">step_trans</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">refl_trans</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">refl_trans</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">refl_trans</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">refl_trans</span> <span class=\"n\">red</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">refl_trans</span> <span class=\"n\">red</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">refl_trans</span> <span class=\"n\">red</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"n\">generalize</span> <span class=\"n\">z</span> <span class=\"err\">$</span> <span class=\"n\">refl_trans</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span> <span class=\"n\">ih</span> <span class=\"n\">w</span> <span class=\"n\">hzw</span><span class=\"o\">,</span>\n<span class=\"n\">refl_trans</span><span class=\"bp\">.</span><span class=\"n\">step_trans</span> <span class=\"n\">hxy</span> <span class=\"err\">$</span> <span class=\"n\">ih</span> <span class=\"n\">w</span> <span class=\"n\">hzw</span>\n</pre></div>",
        "id": 125497412,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524326120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> what do you guys think?</p>",
        "id": 125497413,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524326139
    },
    {
        "content": "<p>I'm afraid I still have to learn what the tactic mode <code>generalize</code> is good for</p>",
        "id": 125497453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524326177
    },
    {
        "content": "<p>I'm very curious because it came up a lot recently</p>",
        "id": 125497454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524326188
    },
    {
        "content": "<p>But I can't learn everything at the same time</p>",
        "id": 125497455,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524326206
    },
    {
        "content": "<p>well you know how <code>induction</code> works with <code>generalizing</code> right</p>",
        "id": 125497456,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524326211
    },
    {
        "content": "<p>No I don't</p>",
        "id": 125497457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524326222
    },
    {
        "content": "<p>hmm</p>",
        "id": 125497462,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524326234
    },
    {
        "content": "<p>I only do induction on natural numbers</p>",
        "id": 125497463,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524326236
    },
    {
        "content": "<p>so when you're proving that natural number addition is commutative</p>",
        "id": 125497464,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524326245
    },
    {
        "content": "<p>you want to prove that x+y=y+x</p>",
        "id": 125497465,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524326252
    },
    {
        "content": "<p>you induct on the proposition <code>\\forall y, x+y=y+x</code> instead</p>",
        "id": 125497466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524326268
    },
    {
        "content": "<p>(and you prove the base case and inductive step both by induction)</p>",
        "id": 125497467,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524326280
    },
    {
        "content": "<p>(I call this \"double induction')</p>",
        "id": 125497504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524326285
    },
    {
        "content": "<p>the very action of moving the goalpost from <code>x+y=y+x</code> to <code>\\forall y, x+y=y+x</code> is called generalizing</p>",
        "id": 125497509,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524326307
    },
    {
        "content": "<p><a href=\"https://math.stackexchange.com/a/2438135/328173\" target=\"_blank\" title=\"https://math.stackexchange.com/a/2438135/328173\">https://math.stackexchange.com/a/2438135/328173</a></p>",
        "id": 125497518,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524326362
    },
    {
        "content": "<p>here is it in Fitch style (only part 1 is relevant)</p>",
        "id": 125497520,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524326369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I'll have to get back to you a bit later. My nephew just arrived</p>",
        "id": 125497664,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524326659
    },
    {
        "content": "<p>ok</p>",
        "id": 125497665,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524326669
    },
    {
        "content": "<p>I can understand why you used your Kenny identity to post such an answer</p>",
        "id": 125497882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524327143
    },
    {
        "content": "<p>Thanks for the explanation</p>",
        "id": 125497883,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524327155
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">generalize</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">xnat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">xnat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">xnat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">xnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"err\">$</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">add_comm</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">generalize</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"n\">xnat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">x</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">xnat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">y</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span>\n     <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">ih1</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">xnat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">z</span>\n     <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"err\">$</span> <span class=\"n\">ih1</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">ih2</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"err\">$</span> <span class=\"n\">ih2</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n       <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">ih1</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih1</span> <span class=\"err\">$</span> <span class=\"n\">succ</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">xnat</span>\n</pre></div>",
        "id": 125497888,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> somehow it took me a long time to prove this</p>",
        "id": 125497890,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327203
    },
    {
        "content": "<p>but here you go</p>",
        "id": 125497891,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327204
    },
    {
        "content": "<p>why did I use my Kenny identity to post such an answer?</p>",
        "id": 125497892,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327214
    },
    {
        "content": "<p>and you can see that <code>generalize</code> is necessary because I used <code>ih1</code> twice</p>",
        "id": 125497894,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327228
    },
    {
        "content": "<p>I should make <code>show</code> a term-tactic</p>",
        "id": 125497934,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327251
    },
    {
        "content": "<p>well that won't really be necessary, forget that</p>",
        "id": 125497935,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327263
    },
    {
        "content": "<p>but I like my <code>generalize</code></p>",
        "id": 125497936,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327270
    },
    {
        "content": "<p>a tactic in term mode</p>",
        "id": 125497937,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327272
    },
    {
        "content": "<p>(a tactic, here, is one which converts your goal to something useful)</p>",
        "id": 125497938,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you think it is a good idea? I have too many <code>aux</code> theorems in my <code>free_group.lean</code> that can be eliminated by my new invention :P</p>",
        "id": 125497945,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327317
    },
    {
        "content": "<p>assuming that it is an invention</p>",
        "id": 125497946,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327323
    },
    {
        "content": "<p>bonus points! <code>generalize</code> also works as <code>revert</code></p>",
        "id": 125497988,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327406
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">generalize</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">generalize</span> <span class=\"n\">H</span> <span class=\"bp\">_</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">x y : ℕ,</span>\n<span class=\"cm\">H : x = y</span>\n<span class=\"cm\">⊢ x = y → false</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 125497993,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524327435
    },
    {
        "content": "<p>I think I made a mistake. What I have built is really <code>revert</code></p>",
        "id": 125499063,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330082
    },
    {
        "content": "<p>Here's the real <code>generalize</code>:</p>",
        "id": 125499065,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330087
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">generalize</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">generalize</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">m n : ℕ</span>\n<span class=\"cm\">⊢ ∀ (z : ℕ), m + n = z → z = 0</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 125499066,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330100
    },
    {
        "content": "<p>I always wondered how to revert in term mode, however not sure I've ever had to do it.</p>",
        "id": 125499110,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524330189
    },
    {
        "content": "<p>thanks for your appreciation</p>",
        "id": 125499111,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330205
    },
    {
        "content": "<p>so, for the sake of completeness:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">revert</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">generalize</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 125499112,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330224
    },
    {
        "content": "<p>in the old days when we didn't have a tactic mode you'd revert using clever <code>heq</code> tricks</p>",
        "id": 125499155,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524330306
    },
    {
        "content": "<p>Usually I just do this.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">add_comm</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">xnat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">x</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">xnat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">y</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span>\n     <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">ih1</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">xnat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">z</span>\n     <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"err\">$</span> <span class=\"bp\">@</span><span class=\"n\">ih1</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">ih2</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"err\">$</span> <span class=\"n\">ih2</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n       <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ih1</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ih1</span> <span class=\"err\">$</span> <span class=\"n\">succ</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 125499158,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524330307
    },
    {
        "content": "<p>right, that's what I did in my free group file</p>",
        "id": 125499159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330347
    },
    {
        "content": "<p>until I realized that I can build tactics in term mode</p>",
        "id": 125499160,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330354
    },
    {
        "content": "<p>does your generalize use <code>heq</code> under the hood?</p>",
        "id": 125499199,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524330380
    },
    {
        "content": "<p>Are there any examples where you can't just do that?</p>",
        "id": 125499200,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524330393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> so my file has a lot of auxiliary theorems</p>",
        "id": 125499201,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330394
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">H12</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L₃</span><span class=\"o\">},</span> <span class=\"n\">red</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"bp\">→</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span>\n<span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">H12</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"n\">ih</span> <span class=\"n\">L₃</span> <span class=\"n\">H23</span><span class=\"o\">,</span>\n<span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step_trans</span> <span class=\"n\">H1</span> <span class=\"err\">$</span> <span class=\"n\">ih</span> <span class=\"n\">H23</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">H12</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H23</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span>\n<span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"n\">H12</span> <span class=\"n\">H23</span>\n</pre></div>",
        "id": 125499202,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330397
    },
    {
        "content": "<p>now I can do it in one go:</p>",
        "id": 125499203,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330414
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">H12</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H23</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span>\n<span class=\"n\">revert</span> <span class=\"n\">H23</span> <span class=\"err\">$</span> <span class=\"n\">revert</span> <span class=\"n\">L₃</span> <span class=\"err\">$</span>\n<span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">H12</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"n\">ih</span> <span class=\"n\">L₃</span> <span class=\"n\">H23</span><span class=\"o\">,</span>\n<span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step_trans</span> <span class=\"n\">H1</span> <span class=\"err\">$</span> <span class=\"n\">ih</span> <span class=\"bp\">_</span> <span class=\"n\">H23</span>\n</pre></div>",
        "id": 125499204,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> are we talking about the same <code>heq</code>, i.e. the <code>heq</code> as in Lean? I don't know Coq at all. I showed you my code above though.</p>",
        "id": 125499210,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> not that I'm aware of</p>",
        "id": 125499211,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330447
    },
    {
        "content": "<p>I just built that an hour ago, I don't know everything about it</p>",
        "id": 125499212,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330459
    },
    {
        "content": "<p>yeah, because in Coq it'd be <code>JMeq</code>, heh</p>",
        "id": 125499213,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524330466
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">revert</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">generalize</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 125499214,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330477
    },
    {
        "content": "<p>I don't see any <code>heq</code> here</p>",
        "id": 125499237,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330482
    },
    {
        "content": "<p>when you print an example that uses generalize</p>",
        "id": 125499254,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524330488
    },
    {
        "content": "<p>do you get a <code>heq</code> term</p>",
        "id": 125499255,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524330492
    },
    {
        "content": "<p>it may or may not, i'm just curious</p>",
        "id": 125499257,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524330510
    },
    {
        "content": "<p>You can just do some extra lambdas. i.e<br>\n<code>theorem red.trans.aux  : ∀ {L₃}, red L₁ L₂ → red L₂ L₃ → red L₁ L₃</code><br>\nWhat's wrong with that?</p>",
        "id": 125499259,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524330512
    },
    {
        "content": "<p>I need to rec on the first red</p>",
        "id": 125499262,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330540
    },
    {
        "content": "<p>I see. Makes a lot of sense then.</p>",
        "id": 125499269,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524330572
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">revert</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">generalize</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">generalize</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem test : ∀ (m n : nat), @eq.{1} nat (@has_add.add.{0} nat nat.has_add m n) (@has_zero.zero.{0} nat nat.has_zero) :=</span>\n<span class=\"cm\">λ (m n : nat),</span>\n<span class=\"cm\">  @generalize.{1 0} nat (λ (_x : nat), @eq.{1} nat _x (@has_zero.zero.{0} nat nat.has_zero))</span>\n<span class=\"cm\">    (@has_add.add.{0} nat nat.has_add m n)</span>\n<span class=\"cm\">    (λ (z : nat) (hz : @eq.{1} nat (@has_add.add.{0} nat nat.has_add m n) z), sorry)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 125499270,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> is this what you're talking about?</p>",
        "id": 125499271,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> Are you talking about Kenny's generalize or tactics mode generalize?</p>",
        "id": 125499317,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524330621
    },
    {
        "content": "<p>in that case:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">revert</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">generalize</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">generalize</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem test : ∀ (m n : nat), @eq.{1} nat (@has_add.add.{0} nat nat.has_add m n) (@has_zero.zero.{0} nat nat.has_zero) :=</span>\n<span class=\"cm\">λ (m n : nat),</span>\n<span class=\"cm\">  @generalize.{1 0} nat (λ (_x : nat), @eq.{1} nat _x (@has_zero.zero.{0} nat nat.has_zero))</span>\n<span class=\"cm\">    (@has_add.add.{0} nat nat.has_add m n)</span>\n<span class=\"cm\">    (λ (z : nat) (hz : @eq.{1} nat (@has_add.add.{0} nat nat.has_add m n) z), sorry)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test&#39;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test&#39;</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem test&#39; : ∀ (m n : nat), @eq.{1} nat (@has_add.add.{0} nat nat.has_add m n) (@has_zero.zero.{0} nat nat.has_zero) :=</span>\n<span class=\"cm\">λ (m n : nat),</span>\n<span class=\"cm\">  (λ (z : nat) (h : @eq.{1} nat (@has_add.add.{0} nat nat.has_add m n) z), sorry)</span>\n<span class=\"cm\">    (@has_add.add.{0} nat nat.has_add m n)</span>\n<span class=\"cm\">    (@rfl.{1} nat (@has_add.add.{0} nat nat.has_add m n))</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 125499320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330659
    },
    {
        "content": "<p>hm, interesting, i'd have to dig further when I have time</p>",
        "id": 125499409,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524330861
    },
    {
        "content": "<p>thanks for your appreciation</p>",
        "id": 125499416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330921
    },
    {
        "content": "<p><code>heq</code> is important when doing dependent case analysis, which is why i was expecting heq to show up in the term there somewhere</p>",
        "id": 125499417,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524330923
    },
    {
        "content": "<p>it's probably buried in there somewhere... maybe... underneath one of the definitions</p>",
        "id": 125499418,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524330937
    },
    {
        "content": "<p>it's quite a low-level idea</p>",
        "id": 125499419,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524330940
    },
    {
        "content": "<p>or i could be really wrong about how lean works, and that also wouldn't surprise me</p>",
        "id": 125499421,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524330959
    },
    {
        "content": "<p>so, eh, which one?</p>",
        "id": 125499422,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330960
    },
    {
        "content": "<p><code>eq</code> is already an inductive type</p>",
        "id": 125499463,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330972
    },
    {
        "content": "<p>i can't say because i'm a lean scrub</p>",
        "id": 125499464,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524330974
    },
    {
        "content": "<p>it doesn't depend on <code>heq</code></p>",
        "id": 125499465,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330975
    },
    {
        "content": "<p>I don't think it uses <code>heq</code> anywhere</p>",
        "id": 125499467,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524330993
    },
    {
        "content": "<p>Here's an alternative method</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">add_comm</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">xnat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">x</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">xnat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">y</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span>\n     <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">ih1</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">xnat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">z</span>\n     <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"err\">$</span> <span class=\"bp\">@</span><span class=\"n\">ih1</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">ih2</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"err\">$</span> <span class=\"n\">ih2</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n       <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ih1</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ih1</span> <span class=\"err\">$</span> <span class=\"n\">succ</span> <span class=\"n\">z</span><span class=\"o\">)))</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 125499522,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524331181
    },
    {
        "content": "<p>sure, and why that might be is interesting to me, most other tactics in coq that do this sort of thing use <code>heq</code></p>",
        "id": 125499524,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524331186
    },
    {
        "content": "<p><a href=\"https://coq.inria.fr/refman/proof-engine/detailed-tactic-examples.html\" target=\"_blank\" title=\"https://coq.inria.fr/refman/proof-engine/detailed-tactic-examples.html\">https://coq.inria.fr/refman/proof-engine/detailed-tactic-examples.html</a></p>",
        "id": 125499525,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524331190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> interesting. usually it fails if I put <code>y</code> at the end</p>",
        "id": 125499568,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524331208
    },
    {
        "content": "<p>I still like my method more :P</p>",
        "id": 125499571,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524331218
    },
    {
        "content": "<p>I was expecting it not to work.</p>",
        "id": 125499572,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524331230
    },
    {
        "content": "<p>did you do anything more than my eyes could see</p>",
        "id": 125499574,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524331245
    },
    {
        "content": "<p>I can't really tell if you changed anything in the middle</p>",
        "id": 125499575,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524331251
    },
    {
        "content": "<p>No.</p>",
        "id": 125499576,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524331255
    },
    {
        "content": "<p>very curious indeed</p>",
        "id": 125499579,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524331260
    },
    {
        "content": "<p>more examples: <a href=\"https://github.com/kckennylau/Lean/commit/c9d0c76f7d807f48f4cea0c6043bcc9caf48e09a#diff-fdee7d198ee1f7316cba5649313e084a\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/commit/c9d0c76f7d807f48f4cea0c6043bcc9caf48e09a#diff-fdee7d198ee1f7316cba5649313e084a\">https://github.com/kckennylau/Lean/commit/c9d0c76f7d807f48f4cea0c6043bcc9caf48e09a#diff-fdee7d198ee1f7316cba5649313e084a</a></p>",
        "id": 125500272,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524332791
    },
    {
        "content": "<p>Congratulations!</p>",
        "id": 125500481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524333303
    },
    {
        "content": "<p>Two docstrings is a very good start!</p>",
        "id": 125500485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524333311
    },
    {
        "content": "<p>:P</p>",
        "id": 125500486,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524333315
    },
    {
        "content": "<p>I was making docstrings</p>",
        "id": 125500488,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524333321
    },
    {
        "content": "<p>and then I got carried away by <code>revert</code> and <code>generalize</code></p>",
        "id": 125500490,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524333328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you like this?</p>",
        "id": 125521584,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524383682
    },
    {
        "content": "<p>recap:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">revert</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">generalize</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 125521591,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524383708
    },
    {
        "content": "<p>I'm not sure I buy the particular applications you've used it for, but this seems okay for <code>logic.basic</code></p>",
        "id": 125521631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524383772
    },
    {
        "content": "<p>probably should be <code>reducible</code></p>",
        "id": 125521632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524383781
    },
    {
        "content": "<p>woohoo, tactics in term mode</p>",
        "id": 125521633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524383803
    },
    {
        "content": "<p>I mean, you can use <code>match</code> to the same effect</p>",
        "id": 125521638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524383830
    },
    {
        "content": "<p>but I usually just set up my intros in the right order so this isn't needed</p>",
        "id": 125521640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524383867
    },
    {
        "content": "<p>right, but setting up them make for a bunch of auxiliary theorems</p>",
        "id": 125521641,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524383881
    },
    {
        "content": "<p>not in my experience</p>",
        "id": 125521682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524383893
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/commit/c9d0c76f7d807f48f4cea0c6043bcc9caf48e09a#diff-fdee7d198ee1f7316cba5649313e084a\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/commit/c9d0c76f7d807f48f4cea0c6043bcc9caf48e09a#diff-fdee7d198ee1f7316cba5649313e084a\">https://github.com/kckennylau/Lean/commit/c9d0c76f7d807f48f4cea0c6043bcc9caf48e09a#diff-fdee7d198ee1f7316cba5649313e084a</a></p>",
        "id": 125521683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524383894
    },
    {
        "content": "<p>here</p>",
        "id": 125521684,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524383895
    },
    {
        "content": "<p>why don't you use the equation compiler?</p>",
        "id": 125521691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524383964
    },
    {
        "content": "<p>that also needs to be auxiliary</p>",
        "id": 125521693,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524383976
    },
    {
        "content": "<p>for <code>red.trans</code></p>",
        "id": 125521694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524383978
    },
    {
        "content": "<p>because <code>rec_on</code> is shorter</p>",
        "id": 125521695,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524383997
    },
    {
        "content": "<p>eww</p>",
        "id": 125521739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524384014
    },
    {
        "content": "<p>I thought someone likes short proofs</p>",
        "id": 125521740,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524384023
    },
    {
        "content": "<p>I like straightforward proofs</p>",
        "id": 125521742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524384036
    },
    {
        "content": "<p>the equation compiler makes it really clear how an induction proceeds, and what is the IH</p>",
        "id": 125521749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524384082
    },
    {
        "content": "<p>plus, I very much doubt you recouped the loss of having to state an auxiliary</p>",
        "id": 125521751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524384109
    },
    {
        "content": "<p>We haven't talked about it much since they appear to be going extinct, but it's possible to write brittle term proofs too</p>",
        "id": 125521794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524384186
    },
    {
        "content": "<p>this was a big problem in lean 2</p>",
        "id": 125521797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524384196
    },
    {
        "content": "<p>when you do a proof with lots of omitted type information relying on lean to pick up the pieces, if something changes in the unification algorithm or something it can be very difficult to understand the broken proof</p>",
        "id": 125521838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524384265
    }
]