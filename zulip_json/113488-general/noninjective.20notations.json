[
    {
        "content": "<p>I could have sworn this was statically disallowed, but apparently you don't need to use the variables in a notation only once. The result is a dag-like pexpr that can be elaborated simultaneously to two different types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">F</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.numerals</span> <span class=\"n\">false</span>\n<span class=\"k\">#check</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- foo (@id ℤ (@has_one.one ℤ int.has_one)) (@id ℕ (@has_one.one ℕ nat.has_one)) : Prop</span>\n</code></pre></div>\n<p>Note the lack of coercion in the two instances of <code>id 1</code>, they are really different functions even though the term was only written once</p>",
        "id": 242051222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623238601
    },
    {
        "content": "<p>Only slightly less surprising is notations which don't use their arguments at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">G</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"k\">#check</span> <span class=\"n\">G</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"c1\">-- true : Prop</span>\n</code></pre></div>",
        "id": 242051436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623238714
    },
    {
        "content": "<p>I'm 99.9% sure we don't ever declare such notations in mathlib. Thoughts on banning them in a lean 3 patch? It will be helpful for the port.</p>",
        "id": 242051818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623238943
    },
    {
        "content": "<p>I'm pretty sure you can go for it</p>",
        "id": 242052319,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623239221
    },
    {
        "content": "<p>And if it doesn't badly break current mathlib then we'll never look back</p>",
        "id": 242052363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623239239
    },
    {
        "content": "<p>Indeed we'll never even notice or think to look back :-)</p>",
        "id": 242052702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623239405
    },
    {
        "content": "<p>I actually tried to use a notation like this in <a href=\"https://github.com/leanprover-community/mathlib/pull/6152/files#diff-48c4d86a6f8902ed17b9728588594da05839379ca05b4dcabc31a3999850cf65R68-R69\">https://github.com/leanprover-community/mathlib/pull/6152/files#diff-48c4d86a6f8902ed17b9728588594da05839379ca05b4dcabc31a3999850cf65R68-R69</a>, but lean wasn't good at reducing it when I wanted it to</p>",
        "id": 242052805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623239459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/noninjective.20notations/near/242051818\">said</a>:</p>\n<blockquote>\n<p>I'm 99.9% sure we don't ever declare such notations in mathlib. Thoughts on banning them in a lean 3 patch? It will be helpful for the port.</p>\n</blockquote>\n<p>This is 100% kosher in Lean 4, so I'm against banning it in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"F\"</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"n\">F</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 242053480,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623239822
    },
    {
        "content": "<p>Maybe the term goal feature should be adapted to show both expected types though.  But the goal state already works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">▶ 2 goals</span>\n\n<span class=\"cm\">⊢ Int</span>\n\n<span class=\"cm\">⊢ Nat</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 242053753,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623240001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/noninjective.20notations/near/242053480\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/noninjective.20notations/near/242051818\">said</a>:</p>\n<blockquote>\n<p>I'm 99.9% sure we don't ever declare such notations in mathlib. Thoughts on banning them in a lean 3 patch? It will be helpful for the port.</p>\n</blockquote>\n<p>This is 100% kosher in Lean 4, so I'm against banning it in Lean 3:</p>\n</blockquote>\n<p>It might be okay in lean 4, but I'm contemplating an implementation of the porting architecture that would really prefer for the mapping from written syntax to pexpr / expr to be 1-1 where possible. So it would be fine to introduce these notations post-port but for simplicity we would avoid them until then.</p>\n<p>It's also just a weird thing to do, and it makes unexpansion a lot harder, so I don't think it deserves to exist.</p>",
        "id": 242117125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623266858
    },
    {
        "content": "<p>I'm sure there will be other challenges as well once the porting architecture crosses the threshold from contemplation to evaluation.<br>\nThis problem seems to be completely hypothetical, and I think it is easy to clean up <em>if</em> it pops up.  I fully support removing <code>notation `F` x := foo x x</code> from mathlib when that happens.</p>",
        "id": 242117877,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623267193
    }
]