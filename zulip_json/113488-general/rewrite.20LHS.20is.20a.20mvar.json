[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (h : ∀ a : nat, a = 0) : 0 = 2 := by rw h\n-- rewrite tactic failed, lemma lhs is a metavariable\nexample (h : ∀ a : nat, a = 0) : 0 = 2 := by rw ← h\n-- rewrite tactic failed, lemma lhs is a metavariable\nexample (h : ∀ a : nat, 0 = a) : 0 = 2 := by rw h --ok\nexample (h : ∀ a : nat, 0 = a) : 0 = 2 := by rw ← h\n-- rewrite tactic failed, did not find instance of the pattern in the target expression\n--   ?m_1\n</pre></div>\n\n\n<p>rewrite talks about LHS but apparently it doesn't take into account symmetry</p>",
        "id": 123653459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520945831
    },
    {
        "content": "<p><code>example (h : ∀ a : nat, a = 0) : 0 = 2 := by rw h 2 -- succeeds!</code></p>",
        "id": 123653641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946235
    },
    {
        "content": "<p>oh this is more complicated than I thought. Of course that succeeds.</p>",
        "id": 123653703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946351
    },
    {
        "content": "<p>That first example is really hard. I can see why it fails. How should it have a clue what to set a?</p>",
        "id": 123653754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946422
    },
    {
        "content": "<p>Actually, in my view none of them should fail. <code>rw</code> actually should not have any issues with the LHS being an arbitrary variable; it will just trigger very easily.</p>",
        "id": 123653809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520946500
    },
    {
        "content": "<p>How is <code>rw</code> supposed to do the first one?</p>",
        "id": 123653812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946517
    },
    {
        "content": "<p>It has a tool for showing an arbitrary thing is 0, but it has to match 0 = 2</p>",
        "id": 123653819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946548
    },
    {
        "content": "<p>I think if I were rw I would let a be the first nat I found in the goal</p>",
        "id": 123653820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946561
    },
    {
        "content": "<p>which is 0</p>",
        "id": 123653822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946564
    },
    {
        "content": "<p>and then rewrite and get <code>0=2</code> and then decide I failed</p>",
        "id": 123653827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946584
    },
    {
        "content": "<p>Isn't that how it works? I just spent some time trying to figure this out.</p>",
        "id": 123653880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946614
    },
    {
        "content": "<p>compare to when I wrap everything in <code>id</code>:</p>\n<div class=\"codehilite\"><pre><span></span>example (h : ∀ a : nat, id a = id 0) : id 0 = id 2 := by rw h -- ⊢ id 0 = id 2\nexample (h : ∀ a : nat, id a = id 0) : id 0 = id 2 := by rw ← h -- done\nexample (h : ∀ a : nat, id 0 = id a) : id 0 = id 2 := by rw h -- done\nexample (h : ∀ a : nat, id 0 = id a) : id 0 = id 2 := by rw ← h -- ⊢ id 0 = id 2\n</pre></div>",
        "id": 123653883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520946623
    },
    {
        "content": "<p>As I just said, I am unsurprised by the first one.</p>",
        "id": 123653892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946648
    },
    {
        "content": "<p>Why do you think it should work?</p>",
        "id": 123653895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946654
    },
    {
        "content": "<p><code>rw</code> should trigger on the first matching occurrence of the pattern. If the LHS is a metavar, that's just the first type correct subterm</p>",
        "id": 123653906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520946699
    },
    {
        "content": "<p>and indeed this is a=0 for the first one</p>",
        "id": 123653909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946714
    },
    {
        "content": "<p>it matches <code>id 0</code> so sets a=0</p>",
        "id": 123653951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946728
    },
    {
        "content": "<p>and now you're doomed</p>",
        "id": 123653954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946736
    },
    {
        "content": "<p>No, that's intended behavior</p>",
        "id": 123653958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520946746
    },
    {
        "content": "<p>I'm not expecting it to solve the goal, but it shouldn't fail</p>",
        "id": 123653960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520946761
    },
    {
        "content": "<p>Aah I see.</p>",
        "id": 123653962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946769
    },
    {
        "content": "<p>the question is why I get a bunch of weird and inconsistent failures when I remove the <code>id</code></p>",
        "id": 123653975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520946821
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (h : ∀ a : nat, a = 0) : 0 = 2 := by rw ← h\n-- rewrite tactic failed, lemma lhs is a metavariable\nexample (h&#39; : ∀ a : nat, 0 = a) : 0 = 2 := by rw h&#39;\n-- succeeds\n</pre></div>",
        "id": 123653981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946834
    },
    {
        "content": "<p>I had imagined these were synonymous</p>",
        "id": 123653983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946839
    },
    {
        "content": "<p>exactly my point</p>",
        "id": 123654025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520946848
    },
    {
        "content": "<p>there's a funny lhs metavar check that literally checks <em>the left side</em> even if that's the destination, not the source</p>",
        "id": 123654032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520946877
    },
    {
        "content": "<p>I see. The issue is not that they fail, it's how they fail. I understand your point now.</p>",
        "id": 123654035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520946902
    },
    {
        "content": "<p>and the final example is even stranger - <code>example (h : ∀ a : nat, 0 = a) : 0 = 2 := by rw ← h</code> is using backwards rewrite to circumvent the buggy lhs metavar check, and instead hits a search bug, probably what the lhs metavar check was trying to avoid</p>",
        "id": 123654103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520947022
    },
    {
        "content": "<p><code>example (h : ∀ a : nat, id 0 = id a) : id 0 = id 2 := by rw ← h -- ⊢ id 0 = id 2</code></p>",
        "id": 123654110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520947024
    },
    {
        "content": "<p>I have no idea what to do with this one. It seems there are two reasonable ways to behave?</p>",
        "id": 123654115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520947054
    },
    {
        "content": "<p>I would argue that all the <code>id</code> examples are consistent</p>",
        "id": 123654120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520947081
    },
    {
        "content": "<p>First I could spot the id 0 on the LHS and just replace it with <code>id a</code></p>",
        "id": 123654163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520947104
    },
    {
        "content": "<p>Here, just like the forward rewrite version, it is rewriting <code>id ?m</code> -&gt; <code>id 0</code> and spots the first matching pattern <code>id 0</code>, so <code>?m := 0</code></p>",
        "id": 123654169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520947131
    },
    {
        "content": "<p>oh ha ha I missed the \\l</p>",
        "id": 123654178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520947155
    },
    {
        "content": "<p>It's this one that confuses me:</p>",
        "id": 123654182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520947176
    },
    {
        "content": "<p><code>example (h : ∀ a : nat, id 0 = id a) : id 0 = id 2 := by rw h -- done</code></p>",
        "id": 123654183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520947179
    },
    {
        "content": "<p>Presumably it doesn't spot the <code>id 0</code> in the goal and then announce that it's going to replace it with <code>id ?m</code></p>",
        "id": 123654234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520947216
    },
    {
        "content": "<p><code>kabstract</code> with a metavar will only match other metavars, it's probably trying to avoid that</p>",
        "id": 123654238,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520947225
    },
    {
        "content": "<p>instead it has to decide what to do with the <code>a</code> first</p>",
        "id": 123654243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520947235
    },
    {
        "content": "<p>why is that? As I said it seems inconsistent with the <code>id ?m</code> behavior. Is it being special cased? I feel like you would have to work hard to make that happen</p>",
        "id": 123654262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520947313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> actually that's exactly what it does. It is rewriting <code>id 0</code> -&gt; <code>id ?m</code>, and spots the first matching pattern <code>id 0</code>, but <code>?m</code> is unconstrained by this and the result is <code>id ?m = id 2</code>. The proof is finished with the automatic <code>refl</code> after <code>rw</code></p>",
        "id": 123654329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520947428
    },
    {
        "content": "<p>ha ha</p>",
        "id": 123654360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520947443
    },
    {
        "content": "<p>yes I just noticed that this works too:</p>",
        "id": 123654374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520947451
    },
    {
        "content": "<p><code>example (h : ∀ a : nat, 0 = a) : 2 = 0 := by rw h -- done</code></p>",
        "id": 123654377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520947458
    },
    {
        "content": "<p>and here we really seem to have no option other than to leave the metavariable alone and make the match</p>",
        "id": 123654386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520947481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> It's using keyed matching, which uses structural equality for the head</p>",
        "id": 123654477,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520947588
    }
]