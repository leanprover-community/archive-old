[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">topological_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">),</span>\n<span class=\"n\">R₀</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_subring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"n\">R₀</span><span class=\"o\">,</span>\n<span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R₀</span><span class=\"o\">),</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_ideal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R₀</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">R₀</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">)</span>\n    <span class=\"n\">I</span>\n<span class=\"err\">⊢</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n</pre></div>\n\n\n<p>Why can this even fail?</p>",
        "id": 127760290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528444362
    },
    {
        "content": "<p>Because type class inference is not looking at your context, maybe?</p>",
        "id": 127760358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444481
    },
    {
        "content": "<p>Right... so how is it ever supposed to figure things out if it doesn't look at my context?</p>",
        "id": 127760423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528444591
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127760424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444591
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nG : Type,\na : comm_group G,\na b : G\n⊢ has_mul G\n</pre></div>",
        "id": 127760425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444604
    },
    {
        "content": "<p>The system doesn't look there</p>",
        "id": 127760427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444619
    },
    {
        "content": "<p>Shouldn't it?</p>",
        "id": 127760433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528444627
    },
    {
        "content": "<p>That's not a question I'm qualified to answer</p>",
        "id": 127760435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444637
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127760437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444654
    },
    {
        "content": "<p>That works</p>",
        "id": 127760441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444658
    },
    {
        "content": "<p>the square brackets mean \"add me to the type class inference system\"</p>",
        "id": 127760445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444668
    },
    {
        "content": "<p>This feels extremely counterintuitive to me... after all, we go through pains to make sure there is only one instance of a class... so if there is <em>one</em> instance in my context there won't be any others. (I promise!)</p>",
        "id": 127760488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528444701
    },
    {
        "content": "<p>However there are commands which explicitly add stuff to the type class inference system</p>",
        "id": 127760489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> What does <code>set_option pp.all true</code> before that tell you?</p>",
        "id": 127760490,
        "sender_full_name": "Sean Leather",
        "timestamp": 1528444704
    },
    {
        "content": "<p>Do you know about <code>letI</code>?</p>",
        "id": 127760491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444714
    },
    {
        "content": "<p>Maybe search for that in the type class inference thread</p>",
        "id": 127760493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444722
    },
    {
        "content": "<p>Aha, I don't know about <code>letI</code>.</p>",
        "id": 127760497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528444737
    },
    {
        "content": "<p>I half-understand it</p>",
        "id": 127760498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444741
    },
    {
        "content": "<p>the main gotcha is that this is defined in mathlib</p>",
        "id": 127760504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> I already have that set to true. You see it in the output.</p>",
        "id": 127760505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528444756
    },
    {
        "content": "<p>so you have to import _some_ mathlib file before it works</p>",
        "id": 127760506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444764
    },
    {
        "content": "<p>Is this one of our mathematical promises playing up again?</p>",
        "id": 127760507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528444773
    },
    {
        "content": "<p>stream:general topic:more+type+class+inference+issues leti</p>",
        "id": 127760552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528444807
    },
    {
        "content": "<p><a href=\"#narrow/search/i.20would.20rather.20just.20make.20type.20class.20inference.20work.2E\" title=\"#narrow/search/i.20would.20rather.20just.20make.20type.20class.20inference.20work.2E\">https://leanprover.zulipchat.com/#narrow/search/i.20would.20rather.20just.20make.20type.20class.20inference.20work.2E</a></p>",
        "id": 127760631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445004
    },
    {
        "content": "<p>Kenny teaching me about letI in pretty much the same situation</p>",
        "id": 127760632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445011
    },
    {
        "content": "<p>Right, so I insert</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n</pre></div>\n\n\n<p>in the middle of my definition, and it works. Ugly!</p>",
        "id": 127760634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528445027
    },
    {
        "content": "<p>I totally agree that it is ugly</p>",
        "id": 127760659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445042
    },
    {
        "content": "<p>And they have no plans to change it in Lean 4</p>",
        "id": 127760677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445054
    },
    {
        "content": "<p>Mario wrote all this letI and exactI and haveI when Leo made some non-trivial changes which broke a lot of stuff</p>",
        "id": 127760686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445111
    },
    {
        "content": "<p>For some reason, liberal type class inference was making Lean slow</p>",
        "id": 127760688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445129
    },
    {
        "content": "<p>for his application</p>",
        "id": 127760690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445133
    },
    {
        "content": "<p>so he made it stricter</p>",
        "id": 127760691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445140
    },
    {
        "content": "<p>and then a whole bunch of mathlib broke</p>",
        "id": 127760694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445146
    },
    {
        "content": "<p>and if this letI hack hadn't worked</p>",
        "id": 127760713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445162
    },
    {
        "content": "<p>then it would not surprise me if mathlib would still be broken</p>",
        "id": 127760737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445175
    },
    {
        "content": "<p>On the other hand</p>",
        "id": 127760751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445231
    },
    {
        "content": "<p>I'm not sure you can have \"mathematician inference\"</p>",
        "id": 127760753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445237
    },
    {
        "content": "<p>I think we're too clever</p>",
        "id": 127760757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445255
    },
    {
        "content": "<p>If you can formalise some nice MWE of something which you feel would be nice if it worked but doesn't work</p>",
        "id": 127760799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445299
    },
    {
        "content": "<p>then you could ask Sebastian or Mario why it doesn't work</p>",
        "id": 127760800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445308
    },
    {
        "content": "<p>but I fear the answer might be</p>",
        "id": 127760803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445315
    },
    {
        "content": "<p>something like \"if that worked, then this important file would take 100 years to compile\"</p>",
        "id": 127760804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445341
    },
    {
        "content": "<p>But I'm not sure, what happened with the changes to type class inference is beyond my pay grade</p>",
        "id": 127760811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528445371
    }
]