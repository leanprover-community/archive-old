[
    {
        "content": "<p>I've complained that <code>ring</code> didn't do its job (sorry <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>) but I figured out what's wrong.<br>\nHere's the example that I had:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The reason that <code>ring</code> fails, is that the coercion <code>↑((x * y + 1) * k)</code> first needs to be pushed through the products and sum.</p>",
        "id": 176073403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568875679
    },
    {
        "content": "<p><code>simp</code> can do that, but you end up with a non-terminal simp, or an ugly <code>simp only</code> line.</p>",
        "id": 176073449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568875699
    },
    {
        "content": "<p>does norm_cast help?</p>",
        "id": 176073451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568875708
    },
    {
        "content": "<p>Nope</p>",
        "id": 176073454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568875714
    },
    {
        "content": "<p>I forget if I've said this before, but nonterminal <code>simp</code> is fine if it is followed by a \"blasty\" tactic, which doesn't care so much about the exact form of the goal</p>",
        "id": 176073473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568875759
    },
    {
        "content": "<p>I guess the <code>hom</code> tactic would help. But it is still under construction.</p>",
        "id": 176073474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568875761
    },
    {
        "content": "<p>This has nothing to do with <code>hom</code>, I thought.</p>",
        "id": 176073485,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568875780
    },
    {
        "content": "<p>Isn't this exactly the sort of thing that <code>norm_cast</code> and friends are for?</p>",
        "id": 176073499,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568875800
    },
    {
        "content": "<p>Maybe we're just missing some attributes on lemmas.</p>",
        "id": 176073555,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568875817
    },
    {
        "content": "<p>Ok, maybe we need to add attributes to <code>int.coe_mul</code> or something like that...</p>",
        "id": 176073767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568876045
    },
    {
        "content": "<p>Anyway, I've pushed again. For the moment I'll just prove them with <code>simp, ring</code></p>",
        "id": 176073779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568876065
    },
    {
        "content": "<p>you can find <code>simp, ring</code> in <code>complex.lean</code> in mathlib IIRC</p>",
        "id": 176074376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568876768
    },
    {
        "content": "<p>Yeah, this looks like exactly what <code>norm_cast</code> should do, so there's probably a missing attribute. <code>simp, ring</code> is fine here but <code>norm_cast, ring</code> would be better.</p>",
        "id": 176077761,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1568880730
    }
]