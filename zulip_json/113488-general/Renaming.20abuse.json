[
    {
        "content": "<p>Consider this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">conditionally_complete_linear_ordered_field</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>This fails with an exotic error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"kd\">structure</span><span class=\"bp\">'</span> <span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">max_def'</span> <span class=\"k\">from</span> <span class=\"bp\">'</span><span class=\"n\">conditionally_complete_linear_order'</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">type</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">=</span> <span class=\"n\">max_default</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"reflexivity\"</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"interactive\"</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"tactic\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)))</span>\n<span class=\"n\">and</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"bp\">=</span> <span class=\"n\">max_default</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"reflexivity\"</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"interactive\"</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"tactic\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>and I believe the culprit is <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s <a href=\"https://github.com/leanprover-community/mathlib/pull/11309\">#11309</a>!</p>",
        "id": 274618088,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646779104
    },
    {
        "content": "<p>In this specific case, I'm more than happy to not use old structures, but this seems to go against the style of the algebraic hierarchy.</p>",
        "id": 274618326,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646779283
    },
    {
        "content": "<p>We could always rename <code>min</code> to inf globally to make that specific problem go away, I just was too lazy too (as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order\">docs#linear_order</a> is still in core)</p>",
        "id": 274618683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646779515
    },
    {
        "content": "<p>I believe it's in core because it's used to order actions within tactics.</p>",
        "id": 274618730,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646779553
    },
    {
        "content": "<p>Solved it temporarily by <code>renaming</code> the fields myself.</p>",
        "id": 277428421,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648824201
    }
]