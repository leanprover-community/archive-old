[
    {
        "content": "<p>I've just noticed that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_equiv.symm_to_linear_equiv\">docs#continuous_linear_equiv.symm_to_linear_equiv</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_equiv.symm_to_homeomorph\">docs#continuous_linear_equiv.symm_to_homeomorph</a> simplify similar expressions in the opposite directions. Each form <code>e.symm.to_weaker_equiv</code> and <code>e.to_weaker_equiv.symm</code> has its advantages but I think that we should decide which one should be the simp normal form.</p>",
        "id": 228641270,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614795782
    },
    {
        "content": "<p>/poll Which form is better as the simp normal form?</p>",
        "id": 228641340,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614795806
    },
    {
        "content": "<p>I think we typically try to push <code>symm</code> and <code>trans</code> as far down as possible.</p>",
        "id": 228641549,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614795878
    },
    {
        "content": "<p>In case of <code>e.symm.to_weaker_equiv</code> we can automatically simplify <code>(e.symm.to_weaker_equiv : M → N)</code>. In the other case we can automatically apply lemmas like <code>weaker_equiv.trans_symm</code></p>",
        "id": 228641650,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614795909
    },
    {
        "content": "<p>Lemmas about <code>continuous_linear_equiv.to_linear_equiv</code> and <code>symm</code>/<code>trans</code> go in the opposite direction.</p>",
        "id": 228641951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614795986
    },
    {
        "content": "<p>And I don't want to work on a refactor here without a poll.</p>",
        "id": 228642012,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614796008
    },
    {
        "content": "<p>My instinct is the same as that of Gabriel, but I'm not sure about the particular advantages/disadvantages of each decision.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/simp.20normal.20form.20for.20.60e.2Eto_equiv.2Esymm.60/near/228641650\">said</a>:</p>\n<blockquote>\n<p>In case of <code>e.symm.to_weaker_equiv</code> we can automatically simplify <code>(e.symm.to_weaker_equiv : M → N)</code>. In the other case we can automatically apply lemmas like <code>weaker_equiv.trans_symm</code></p>\n</blockquote>\n<p>We will still have to prove <code>trans_symm</code> for the stronger equivalences as well, independent of our choice here, right? So I'm not sure if the second point is a big advantage.</p>",
        "id": 228642860,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1614796330
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.trans_symm\">docs#equiv.trans_symm</a> refers to expressions like <code>e.symm.to_weaker_equiv.trans e.to_weaker_equiv</code>, right?</p>",
        "id": 228643196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614796445
    },
    {
        "content": "<p>If you have <code>e : M ≃L[R] M'</code> then with the second approach you can simplify <code>e.symm.to_linear_equiv.trans e.to_linear_equiv</code>.</p>",
        "id": 228643359,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614796508
    },
    {
        "content": "<p>But I guess as long you also have a lemma sending <code>f.to_weaker_equiv.trans g.to_weaker_equiv</code> to <code>(f.trans g).to_weaker_equiv</code> then that should be ok</p>",
        "id": 228643378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614796513
    },
    {
        "content": "<p>So we need things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_equiv.to_add_equiv_trans\">docs#ring_equiv.to_add_equiv_trans</a>, which I assume we don't currently have?</p>",
        "id": 228643566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614796582
    },
    {
        "content": "<p>I thought it was implied in the question that if <code>e.symm.to_weaker_equiv</code> is simp-normal form, then <code>(e.trans e').to_weaker_equiv</code> is also simp-normal form. So then we can use <code>stronger_equiv.trans_symm</code> to rewrite <code>(e.trans e.symm).to_weaker_equiv</code> to <code>weaker_equiv.refl</code></p>",
        "id": 228643598,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1614796601
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_equiv.to_ring_hom_trans\">docs#ring_equiv.to_ring_hom_trans</a> also goes in the wrong direction</p>",
        "id": 228643697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614796642
    },
    {
        "content": "<p>Unless we decide that <code>e.to_same_hom</code> gets different rules</p>",
        "id": 228644106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614796781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I just forgot about this simp lemma.</p>",
        "id": 228644297,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614796833
    },
    {
        "content": "<p>An argument for the second option:</p>\n<p>If I have some (complicated) construction on <code>stronger_equiv</code>, like <code>stronger_equiv_foo</code>, then I probably want a simp lemma that<br>\n<code>stronger_equiv_foo.to_weaker_equiv = weaker_equiv_foo</code>. We can think of <code>to_weaker_equiv</code> as a \"field\" of <code>stronger_equiv</code> (independent of whether it actually is a field), so this simp lemma makes sense.<br>\nIf I have some operation on <code>stronger_equiv</code> like the product of two such equivalences, what direction does the simp lemma go?</p>\n<ul>\n<li><code>(e.prod e').to_weaker_equiv = e.to_weaker_equiv.prod e'.to_weaker_equiv</code> since <code>to_weaker_equiv</code> is a field?</li>\n<li><code>e.to_weaker_equiv.prod e'.to_weaker_equiv = (e.prod e').to_weaker_equiv</code> because we want to push <code>to_weaker_equiv</code> to the outside, like for <code>symm</code>?</li>\n</ul>\n<p>I'm not so sure about this case, but I think it makes sense to have the same rule for <code>symm</code>, <code>trans</code>, <code>prod</code> and all the other operations on equivalences.</p>",
        "id": 228645064,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1614797131
    },
    {
        "content": "<p>I can't help feeling we're doomed to quadratically many lemmas (equiv strength x equiv operations) or worse no matter what we do</p>",
        "id": 228648191,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614798245
    },
    {
        "content": "<p>A related issue I've observed (to the explosion of simp lemmas) is that we apparently need <code>e.symm (e x) = e</code> for every kind of equivalence.</p>",
        "id": 228648601,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614798383
    },
    {
        "content": "<p>The usual way out of this type of explosion is polymorphism / multiple dispatch, which in lean would be typeclasses</p>",
        "id": 228648692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614798423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Could you please tell us what are your arguments in favor of <code>e.to_weaker_equiv.symm</code>?</p>",
        "id": 228651970,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614799618
    },
    {
        "content": "<p>I definitely don't want to start a refactor with your vote against it.</p>",
        "id": 228652063,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614799648
    },
    {
        "content": "<p>Can <code>norm_cast</code> help with <code>to_X</code> casts?</p>",
        "id": 228655098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614800735
    },
    {
        "content": "<p>My impression is that we try to push most operations to the lowest level. For instance, the canonical form of <code>coe (f + g)</code> is <code>coe f + coe g</code>, where we push the <code>+</code> to the weaker class. In the same way, <code>coe (-f)</code> is <code>- coe f</code>, pushing <code>neg</code> to the lowest level. If you replace <code>neg</code> with <code>symm</code> and <code>coe</code> with <code>to_weaker_equiv</code>, this hints at a normal form <code>e.to_weaker_equiv.symm</code>. But I don't feel very strongly about it, so if everyone agrees the other form is better then go for it!</p>",
        "id": 228658712,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614802016
    },
    {
        "content": "<p>While the other point of view is that <code>to_weaker_equiv</code> is <code>neg</code> in this case, while <code>symm</code> is <code>coe</code>?</p>",
        "id": 228659019,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614802120
    },
    {
        "content": "<p>Except that <code>to_weaker_equiv</code> is really a form of coercion, and <code>symm</code> is really a form of <code>neg</code>. I didn't choose this example completely randomly :-)</p>",
        "id": 228662748,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614803472
    },
    {
        "content": "<p>One more argument for the second choice. If we have <code>e.to_weaker_equiv.trans e'.to_weaker_equiv</code>, where <code>e</code> and <code>e'</code> are of different types, then we can't transform it to a form similar to choice 1 without some <code>norm_cast</code> magic.</p>",
        "id": 228664292,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614804078
    },
    {
        "content": "<p>So, I move to \"undecided\".</p>",
        "id": 228664373,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614804112
    },
    {
        "content": "<p>It would be nice to have <code>norm_cast</code> treat all functions marked with some attribute as coercions.</p>",
        "id": 228664520,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614804162
    },
    {
        "content": "<p>So that we can mark theorems like <code>coe_to_equiv</code> with <code>norm_cast</code> and use them in <code>norm_cast</code>/<code>push_cast</code>.</p>",
        "id": 228664623,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614804209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/simp.20normal.20form.20for.20.60e.2Eto_equiv.2Esymm.60/near/228664520\">said</a>:</p>\n<blockquote>\n<p>It would be nice to have <code>norm_cast</code> treat all functions marked with some attribute as coercions.</p>\n</blockquote>\n<blockquote>\n<p>So that we can mark theorems like <code>coe_to_equiv</code> with <code>norm_cast</code> and use them in <code>norm_cast</code>/<code>push_cast</code>.</p>\n</blockquote>\n<p>I was thinking at some point that it would be nice to let <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.C\">docs#polynomial.C</a> be treated as a coercion.<br>\n<a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/norm_cast.20for.20algebras\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/norm_cast.20for.20algebras</a></p>",
        "id": 228665553,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614804573
    },
    {
        "content": "<p>I came across this again today; <code>simps</code> appears to work best with the second option that results in <code>e.symm.to_weaker_equiv</code>, as once the goal ends up in that state,<a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_to_add_equiv\">docs#coe_to_add_equiv</a> will strip the <code>to_weaker_equiv</code> and then the generated <code>e_symm_apply</code> will unfold the <code>e.symm</code>.</p>",
        "id": 248416742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628115821
    },
    {
        "content": "<p>The second option makes <code>e.to_weaker_equiv.symm</code> the <code>simp</code>-normal form. This version needs a lemma like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/diffeomorph.to_equiv_coe_symm\">docs#diffeomorph.to_equiv_coe_symm</a> in the API.</p>",
        "id": 248440152,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628141459
    },
    {
        "content": "<p>Whoops, that was a typo</p>",
        "id": 248445021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628147482
    },
    {
        "content": "<p>Did we finally make a decision here? I don't think the choice matters much (even though I still stand with option (2)), but I think that making a choice is important, to know what to use when writing new statements. Also, the question is both for <code>symm</code> and <code>trans</code>, i.e., should the normal form be <code>f.to_weaker_equiv.trans g.to_weaker_equiv</code> or <code>(f.trans g).to_weaker_equiv</code>? (The two questions are related, to make sure that simp works nicely).</p>",
        "id": 254664695,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1632469669
    },
    {
        "content": "<p>Reading the thread I've added my vote to (2), but this is contrary to my initial instinct, so I remain uncertain!</p>",
        "id": 254665506,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632470136
    },
    {
        "content": "<p>I guess one way to think about it is \"if we have an interesting strong-equiv, is it more likely that we have a nice description of its <code>symm</code>, or that we have a nice description of its <code>to_weaker_equiv</code>?\" I would guess the latter, and hence 2).</p>",
        "id": 254665661,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632470217
    },
    {
        "content": "<p>Don't bother about my opinion too much because I'm not using those much, but the first thing I want to do when seeing <code>(f.trans g).to_weaker_equiv</code> is to \"simp\" it to <code>f.to_weaker_equiv.trans g.to_weaker_equiv</code>.<br>\nMy idea is that the stronger equiv is just here for its further properties, so when you don't need them you want that overbundling gone as much as possible.</p>",
        "id": 254670302,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632472652
    },
    {
        "content": "<p>Also, <code>f.to_weaker_equiv.trans g.to_weaker_equiv</code> is closer to <code>f.to_weaker_equiv.trans g</code> and <code>f.trans g.to_weaker_equiv</code>, when only one of the equivalences has to be weakened.</p>",
        "id": 254670465,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632472714
    },
    {
        "content": "<p>(2) is the direction consistent with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.functor.map_inv\">docs#category_theory.functor.map_inv</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.functor.map_comp\">docs#category_theory.functor.map_comp</a></p>",
        "id": 254678775,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632477337
    },
    {
        "content": "<p>Also there's a third player here, <code>refl</code>--obviously we want <code>stronger_equiv.refl.to_weaker_equiv = weaker_equiv.refl</code>, and not the other way around</p>",
        "id": 254678917,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632477424
    },
    {
        "content": "<p>I've changed my mind to the first option, because I just spent three hours fixing a simp call in <a href=\"https://github.com/leanprover-community/mathlib/pull/2819\">#2819</a>. There I have <code>e (e.to_linear_equiv.to_continuous_linear_equiv.to_homeomorph.to_measurable_equiv.symm a)</code>, and all the simp lemmas were working against me!</p>",
        "id": 316326494,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671213332
    },
    {
        "content": "<p><code>trans</code> is already pushed down because of distributivity considerations. We don't have such considerations for<code>symm</code>, so it's really up to us. And in that case, because we can simplify <code>e.symm.to_equiv a</code> but not <code>e.to_equiv.symm a</code>, I think we should push down.</p>",
        "id": 316327152,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671213504
    },
    {
        "content": "<p>I am doubtful of the argument that we want the other way for simp to find things of the form <code>e.trans e.symm</code> because this lemma works against distributivity and this is not really simp's job (indeed, a <code>norm_cast</code>-like tactic would be much better suited).</p>",
        "id": 316328081,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671213747
    }
]