[
    {
        "content": "<p>So here is an exact statement -&gt; <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/00_first_proofs.lean#L160\">https://github.com/leanprover-community/tutorials/blob/master/src/exercises/00_first_proofs.lean#L160</a> I don't quite understand. hx.2 is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">x</span> <span class=\"bp\">\\</span><span class=\"k\">in</span> <span class=\"n\">up_bounds</span><span class=\"o\">(</span><span class=\"n\">low_bounds</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and we sort of apply it as a function? I don't really understand how can we turn the above statement into a function or I'm just mistaken and this is something completely different?</p>",
        "id": 224778298,
        "sender_full_name": "Daniel Papp",
        "timestamp": 1612207679
    },
    {
        "content": "<p>What's the definition of <code>up_bounds</code>?</p>",
        "id": 224778556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612207784
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/00_first_proofs.lean#L27\">https://github.com/leanprover-community/tutorials/blob/master/src/exercises/00_first_proofs.lean#L27</a></p>",
        "id": 224778688,
        "sender_full_name": "Daniel Papp",
        "timestamp": 1612207823
    },
    {
        "content": "<p>Notice that it's a forall</p>",
        "id": 224778704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612207831
    },
    {
        "content": "<p><code>x \\in {y | \\forall a, P(y,a)}</code> unfolds to <code>\\forall a, P(x, a)</code> so applying it to <code>b</code> yields <code>P(x, b)</code></p>",
        "id": 224778831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612207883
    },
    {
        "content": "<p>In fact, the notation <code>∀ a ∈ A, a ≤ x</code> is sugar for <code>∀ a, ∀ (H : a ∈ A), a ≤ x</code> so it's two foralls, hence two applications are used in the proof</p>",
        "id": 224779034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612207970
    },
    {
        "content": "<p>Wait <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">a \\in A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is the type of H?</p>",
        "id": 224779182,
        "sender_full_name": "Daniel Papp",
        "timestamp": 1612208024
    },
    {
        "content": "<p>yes</p>",
        "id": 224779191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612208029
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/propositions+as+types\">Propositions are types</a></p>",
        "id": 224779217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612208039
    },
    {
        "content": "<p>Yeah, I have to get used to that.</p>",
        "id": 224779282,
        "sender_full_name": "Daniel Papp",
        "timestamp": 1612208052
    },
    {
        "content": "<p>I watched Wadler's talk at Strangeloop in the end. Now I have a good idea.</p>",
        "id": 224792546,
        "sender_full_name": "Daniel Papp",
        "timestamp": 1612214348
    },
    {
        "content": "<p>Is there a part of the documentation which gives some idea how to desugar things in lean?</p>",
        "id": 224792610,
        "sender_full_name": "Daniel Papp",
        "timestamp": 1612214374
    },
    {
        "content": "<p>most of that is defined when the notation is introduced. I don't have any particular place to point to for this one; the basic idea is that if you have a binder like <code>\\all (a op b), ...</code> or <code>\\ex (a op b), ...</code> where <code>op</code> is some infix operator and <code>a</code> is a variable, then it duplicates the binder to <code>\\all a, \\all (H : a op b)</code> or <code>\\ex a, \\ex (H : a op b)</code>.</p>",
        "id": 224793093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612214605
    },
    {
        "content": "<p>I see. Maybe a stupid question, but how are the quantifiers transformed into types? I mean I understand that conjunction is transformed into the product type and implication transformed into functions, but how is the universal quantifier transformed into a type?</p>",
        "id": 224793859,
        "sender_full_name": "Daniel Papp",
        "timestamp": 1612214983
    },
    {
        "content": "<p>A universal quantifier is the same (literally the same thing in lean) as the Pi type, a dependent function type</p>",
        "id": 224793955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612215020
    },
    {
        "content": "<p><code>\\forall x : A, B x</code> is the type of functions <code>f</code> such that for <code>a</code> in <code>A</code>, <code>f a : B a</code></p>",
        "id": 224794035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612215055
    },
    {
        "content": "<p>You can also use <code>\\Pi</code> instead of <code>\\forall</code>; lean prefers <code>\\forall</code> in pretty printing if <code>B x</code> is a proposition</p>",
        "id": 224794104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612215095
    },
    {
        "content": "<p>Lean 4 is switching to the adga-style notation <code>(x : A) -&gt; B x</code> which makes the notational similarity to implication more obvious</p>",
        "id": 224794264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612215158
    },
    {
        "content": "<p>in lean <code>A -&gt; B</code> is both the nondependent function type and also implication of propositions, and is a special case of Pi/forall when the rhs doesn't depend on the lhs</p>",
        "id": 224794384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612215231
    },
    {
        "content": "<p>Ok, I guess I need to read up on this too. The wikipedia page says that the Sigma type is the pair of the existential quantifier in a similar sense.</p>",
        "id": 224794858,
        "sender_full_name": "Daniel Papp",
        "timestamp": 1612215452
    },
    {
        "content": "<p>Yep, <code>\\ex (x : A), B x</code> is a pair of an <code>a : A</code> and <code>b : B a</code></p>",
        "id": 224795561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612215781
    },
    {
        "content": "<p>in this case though lean has a distinct definition called <code>\\Sigma</code> which does the same thing but for data (non-propositions)</p>",
        "id": 224795705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612215847
    },
    {
        "content": "<p>the reason being that an existential is always a proposition even if <code>A</code> is not, so there is no \"first projection\" function from <code>\\ex (x : A), B x</code> to <code>A</code>, while there is a first and second projection for <code>\\Sigma</code></p>",
        "id": 224795865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612215948
    }
]