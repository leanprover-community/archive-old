[
    {
        "content": "<p>I'm new to lean, and this is an example from the tutorials:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">even_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">odd_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even_fun</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">even_fun</span> <span class=\"n\">g</span> <span class=\"bp\">→</span>  <span class=\"n\">even_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>instead of <code>def</code>s and <code>... → ... → ...</code>, how do I make a type for even function? This is want I want to write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">EvenFunction</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">???</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Moreover, what should I write at the <code>???</code> part to claim that <code>f + g</code> still has type <code>EvenFunction ℝ ℝ</code>?</p>",
        "id": 307852140,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667514786
    },
    {
        "content": "<p>Did you already write <code>EvenFunction</code>? How did you define it? Or is that part of the question as well?</p>",
        "id": 307852424,
        "sender_full_name": "Julian Berman",
        "timestamp": 1667514939
    },
    {
        "content": "<p>That's part of the question <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 307852688,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667514994
    },
    {
        "content": "<p>I am not at a level too much beyond where you are, but part of what you're asking might have to do with <a href=\"https://leanprover-community.github.io/glossary.html#bundled-vs-unbundled\">glossary#bundled-vs-unbundled</a>.</p>\n<p>You can define a simple type which is a function along with a proof that it's even via e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">even_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">odd_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">even_function</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_even_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">even_fun</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">even_function.add</span> <span class=\"o\">:</span> <span class=\"n\">even_function</span> <span class=\"bp\">→</span> <span class=\"n\">even_function</span> <span class=\"bp\">→</span> <span class=\"n\">even_function</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f.to_fun</span> <span class=\"bp\">+</span> <span class=\"n\">g.to_fun</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span>  <span class=\"n\">even_function</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">add</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">even_function</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>but now you see you may need to teach lean even how to add those (which involves filling in the proof you were talking about).</p>",
        "id": 307853701,
        "sender_full_name": "Julian Berman",
        "timestamp": 1667515483
    },
    {
        "content": "<p>In type theory, if you make a new type <code>EvenFunction ℝ ℝ</code> then there are two issues: firstly if <code>f</code> has type <code>EvenFunction ℝ ℝ</code> then it will <em>not</em> have type <code>ℝ → ℝ</code>, in other words it definitely will not be a function from <code>ℝ</code> to <code>ℝ</code>. You will be able to tell Lean to <em>interpret</em> it as a function from the reals to the reals, but it will add a little up-arrow in front of it -- this will be an \"invisible function\" from the type <code>EvenFunction ℝ ℝ</code> to the type <code>ℝ → ℝ</code>, just like in Lean there are invisible functions from the naturals to the integers to the rationals to the reals to the complexes, from the rationals to the 37-adic numbers etc etc. And second it will not be a <em>theorem</em> that <code>f + g</code> still has type <code>EvenFunction ℝ ℝ</code> -- the assertion that a term has a given type is just some inbuilt thing in type theory, it's not something you can prove. So if you do it this way then the assertion will still have the same content but it will be wrapped up differently -- it will be a <em>definition</em> of an addition on the type <code>EvenFunction ℝ ℝ</code>, and then a theorem that <code>f+g</code>, when interpreted via the \"invisible function\", or coercion, and evaluated at a real <code>x</code>, will equal the coercion of <code>f</code> evaluated at <code>x</code>, add the coercion of <code>g</code> evaluated at <code>x</code>. So it's all the same information but packaged up in a totally different way.</p>\n<p>To make the coercion in Lean 3 you need to know about <code>has_coe_to_fun</code> and to make the addition you need to know about the <code>has_add</code> typeclass.</p>",
        "id": 307854153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667515714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> thanks! those are two different approaches. I was more thinking in line with Kevin. Interesting to know <code>structure</code> exists too!</p>",
        "id": 307855026,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667516155
    },
    {
        "content": "<p>actually maybe not too different? structure seems to be a \"frontend\" for defining inductive types?</p>",
        "id": 307855219,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667516243
    },
    {
        "content": "<p>You can read about structures in chapter 9 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a></p>",
        "id": 307856252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667516717
    }
]