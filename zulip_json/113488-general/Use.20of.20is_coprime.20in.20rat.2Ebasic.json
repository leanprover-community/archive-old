[
    {
        "content": "<p>Hello  <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p>I have been working on a small contribution  to the rat api.  And I have a question  about dependencies .</p>\n<p>For context here is the MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">rat.denom_add_int</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"n\">q.denom</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rat.add_num_denom</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">rat.coe_int_denom</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_zero</span><span class=\"o\">,</span> <span class=\"n\">rat.coe_int_num</span><span class=\"o\">,</span>\n    <span class=\"n\">int.coe_nat_succ</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"o\">(</span><span class=\"n\">rat.denom_div_eq_of_coprime</span>\n    <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">q.denom</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">q.pos</span><span class=\"o\">)</span>\n    <span class=\"bp\">$</span> <span class=\"n\">int.coprime_iff_nat_coprime.mp</span> <span class=\"bp\">$</span> <span class=\"n\">is_coprime.add_mul_left_left</span>\n    <span class=\"o\">(</span><span class=\"n\">int.coprime_iff_nat_coprime.mpr</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">q.cop</span> <span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I have run into the  following issue.  The <code>is_coprime</code> api is under <code>ring_theory</code> and not accessible  in <code>rat.data.basic</code>.  Presumably this is due to the dependency  order of the lean files.  There seem to be 2 ways to resolve this problem.</p>\n<ol>\n<li>Create a new file in the rat folder with this dependency .</li>\n<li>Find a way to show the same thing using <code>nat.gcd</code> .</li>\n</ol>\n<p>I tried 2 for a bit and it felt like reinventing the wheel, however based on the theorem statement alone, I would expect this sort of thing to live in the basic file.  The <code>is_coprime</code> api seems really useful for proving these sort of things, I think the lemmas about rationals could benefit a lot from it.</p>\n<p>Is there consensus on how to resolve these chicken or egg type problems?</p>",
        "id": 254936934,
        "sender_full_name": "Ender Doe",
        "timestamp": 1632667973
    },
    {
        "content": "<p>Have you tried induction on <code>z</code>? This seems like a low-powered of proving this specific lemma. Else, importing more files about abstract theory in files about concrete structures (which is what you're doing here) is often fine.</p>",
        "id": 254938452,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632669293
    },
    {
        "content": "<p>But also adding new files is cheap. In that case, <code>data.rat.basic</code> is of medium size and I can't see an obvious split.</p>",
        "id": 254938768,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632669575
    },
    {
        "content": "<p>Can't you put it in the same file as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.denom_div_eq_of_coprime\">docs#rat.denom_div_eq_of_coprime</a>?</p>",
        "id": 254941006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632671546
    },
    {
        "content": "<p>Or is the problem that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_coprime\">docs#is_coprime</a> exists but not its API?</p>",
        "id": 254941030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632671572
    },
    {
        "content": "<p>I believe  <code>rat.basic</code> uses <code>nat.coprime</code> which is a smaller nat specific thing, with fewer available lemmas.  The file<br>\n<code>ring_theory.coprime</code> defines the proper relationship <a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/coprime.html#nat.is_coprime_iff_coprime\">here</a>.  Which is not available in <code>rat.basic</code>.</p>",
        "id": 254942041,
        "sender_full_name": "Ender Doe",
        "timestamp": 1632672473
    },
    {
        "content": "<p><code>ring_theory.coprime</code> looks like it should benefit from a split</p>",
        "id": 254942750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632673047
    },
    {
        "content": "<p><code>ring_theory.coprime</code> looks like it should benefit from a split</p>",
        "id": 254945703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632675735
    },
    {
        "content": "<p>I'll have a look. I love cutting stuff in half.</p>",
        "id": 254945852,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632675903
    },
    {
        "content": "<p>Where are you proposing a split Eric? It seems all fairly elementary</p>",
        "id": 254947783,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632677668
    },
    {
        "content": "<p>Avoiding the fintype or big_operator imports might be sensible</p>",
        "id": 254950377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632679963
    },
    {
        "content": "<p>I am also happy to help  contribute here.  </p>\n<p>However the effort  to split the file will be much larger than directly proving the denom lemma surely.</p>",
        "id": 254962991,
        "sender_full_name": "Ender Doe",
        "timestamp": 1632691204
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9403\">#9403</a></p>",
        "id": 255033868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632743200
    }
]