[
    {
        "content": "<p>Does mathlib have an empty function, i.e. something of type <code>empty -&gt; X</code>? Also, how would you define this as a lambda?</p>",
        "id": 267131362,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641513063
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/empty.elim\">docs#empty.elim</a></p>",
        "id": 267131642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641513284
    },
    {
        "content": "<p>Ah. Makes sense.</p>",
        "id": 267131688,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641513327
    },
    {
        "content": "<p><code>empty.rec</code> also does the trick. You can usually find such functions using <code>library_search</code> or <code>suggest</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">empty</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">empty.rec</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">suggest</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">empty.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">empty</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 267131724,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1641513352
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.unique</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 267131776,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641513366
    },
    {
        "content": "<p>If you have <code>x : X</code> to hand, you can just use <code>λ _ : empty, x</code>. If <code>X</code> is also empty, then you can't write it as a lambda and you have to use <code>empty.rec</code></p>",
        "id": 267131783,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641513370
    },
    {
        "content": "<p>Again, equation compiler trickery. Since <code>empty</code> has no constructors, <code>.</code> means \"discharge all cases... oh wait, there are no cases\".</p>",
        "id": 267131820,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641513409
    },
    {
        "content": "<p>In tactic mode (don't use tactic mode for most data definitions):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 267131838,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641513431
    },
    {
        "content": "<p>(Also, <code>X : Sort*</code> works here of course)</p>",
        "id": 267131847,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641513450
    },
    {
        "content": "<p>Ah, you can write it as a lambda after all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">empty</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"kd\">end</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Where <code>match e with end</code> is just a really verbose version of the <code>.</code> Yakov used.</p>",
        "id": 267131848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641513452
    },
    {
        "content": "<p>Nice. Thanks folks.</p>",
        "id": 267131870,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641513473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416322\">@Bernd Losert</span> you should also know about the difference between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/empty\">docs#empty</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pempty\">docs#pempty</a></p>",
        "id": 267137202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641516619
    },
    {
        "content": "<p>I don't know what you're using this for, but if you want universe polymorphic constructions, then <code>pempty</code> is the way to go.</p>",
        "id": 267137237,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641516670
    },
    {
        "content": "<p>By the way, mathlib4 introduces the syntax <code>fun.</code> (or <code>λ.</code>) as a term level equivalent for the <code>example (X : Type*) : empty → X .</code> trick (which doesn't work in lean 4), so you can write <code>example (X : Type*) : Empty → X := λ.</code> in lean 4 (which macro expands to <code>fun x =&gt; match x with.</code> like Eric's version).</p>",
        "id": 267150505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641529951
    }
]