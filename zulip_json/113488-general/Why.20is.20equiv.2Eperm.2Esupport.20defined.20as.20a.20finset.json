[
    {
        "content": "<p>I found that <a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/perm/support.html#equiv.perm.support\">equiv.perm.support</a> is defined as a <code>finset</code>. Is there any particular reason for this? If not, should it be lifted so <code>set</code> instead? I found this painful for deducing the rearrangement inequality in a linear order (see <a href=\"https://github.com/leanprover-community/mathlib/pull/10861\">#10861</a>), as then you cannot really afford the <code>fintype</code> instance on the index set for the most common applications , so you can no longer use <code>equiv.perm.support</code>. Thanks!</p>",
        "id": 265503902,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1639953074
    },
    {
        "content": "<p>I had a branch on which I generalized <a href=\"http://perm.support\">perm.support</a> to work on types that are not necessarily fintype. However, membership in the support simp-normalizes to \"f x != x\" anyway. So you can express things in that way.</p>",
        "id": 265504790,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639954410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/Why.20is.20equiv.2Eperm.2Esupport.20defined.20as.20a.20finset/near/265504790\">said</a>:</p>\n<blockquote>\n<p>I had a branch on which I generalized <a href=\"http://perm.support\">perm.support</a> to work on types that are not necessarily fintype. However, membership in the support simp-normalizes to \"f x != x\" anyway. So you can express things in that way.</p>\n</blockquote>\n<p>Yeah, that is clearly the alternative. I'll go with it then, just thought that I'd rather try to use <code>equiv.perm.support</code> because it exists</p>",
        "id": 265545648,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1639996584
    }
]