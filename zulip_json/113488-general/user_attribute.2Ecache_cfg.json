[
    {
        "content": "<p>Hi, what is the purpose of <code>user_attribute.cache_cfg</code>. In particular, what does <code>to_additive.cache_cfg</code> do?<br>\nHere is the code:</p>\n<div class=\"codehilite\"><pre><span></span>cache_cfg := ⟨λ ns, ns.mfoldl (λ dict n, do\n    val ← to_additive_attr.get_param n,\n    pure $ dict.insert n val) mk_name_map, []⟩\n</pre></div>",
        "id": 171355364,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563683433
    },
    {
        "content": "<p>Unfortunately this is poorly documented... Simon Hudon has explained it to me at least once, but since none of my tactics have ended up using it I still don't know the details.</p>",
        "id": 171362557,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563697125
    },
    {
        "content": "<p>The <code>ns</code> input is a list of all declarations that have the attribute, and the function is responsible for filling the cache from the list</p>",
        "id": 171362798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563697553
    },
    {
        "content": "<p>In this case, the cache keeps track of the mapping of mul -&gt; add definitions, and the data is stored in the attribute data, so we have to look up each definition and put the stored parameter in the map</p>",
        "id": 171362865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563697669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> When Lean calls this function?</p>",
        "id": 171364095,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563700036
    },
    {
        "content": "<p>when the user attribute is applied to a new theorem</p>",
        "id": 171364097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563700065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think it might applied more lazily than that. The cache may be invalidated every time you apply the attribute to a new definition / theorem but you don't actually need to rebuild the cache right then and there. You can wait until the next time the cache gets queried.</p>",
        "id": 171470451,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1563831590
    }
]