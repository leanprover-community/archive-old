[
    {
        "content": "<p>I'm still trying to discover what a Lean file can reveal about itself. I found <a href=\"https://github.com/leanprover/lean/blob/master/library/init/meta/environment.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/meta/environment.lean\">https://github.com/leanprover/lean/blob/master/library/init/meta/environment.lean</a> and <a href=\"https://github.com/leanprover/lean/blob/master/library/init/meta/declaration.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/meta/declaration.lean\">https://github.com/leanprover/lean/blob/master/library/init/meta/declaration.lean</a> but there still very basic questions I can't answer. Say I have an environment and a declaration name. I can distinguish a lemma/theorem from a definition or constant (although I'm not sure what's the difference between definition and constant). But how can I distinguish between <code>def</code>, <code>class</code>, <code>instance</code>, <code>structure</code>, <code>inductive</code>? I saw the series of functions around <a href=\"https://github.com/leanprover/lean/blob/master/library/init/meta/environment.lean#L47\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/meta/environment.lean#L47\">https://github.com/leanprover/lean/blob/master/library/init/meta/environment.lean#L47</a> but trying them on examples only confuses me.</p>",
        "id": 132184814,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534350868
    },
    {
        "content": "<p><code>class</code> means <code>@[class] structure</code> so you can use the attribute</p>",
        "id": 132184954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534351040
    },
    {
        "content": "<p>similarly <code>@[instance]</code> is an attribute</p>",
        "id": 132184971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534351073
    },
    {
        "content": "<p>How do you get attributes of a declaration?</p>",
        "id": 132185017,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534351092
    },
    {
        "content": "<p>Can one strip off <code>Pi</code> from an <code>expr</code> and get to the first function appearing next? (This would be to understand what an instance declaration is an instance of)</p>",
        "id": 132185129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534351221
    },
    {
        "content": "<p><code>tactic.has_attribute</code></p>",
        "id": 132185232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534351331
    },
    {
        "content": "<p>Is it possible do use this outside of a tactic? (in meta land of course)</p>",
        "id": 132185432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534351608
    },
    {
        "content": "<p>I doubt it, it looks like environment doesn't know anything about attributes</p>",
        "id": 132185506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534351722
    },
    {
        "content": "<p>Do you see away to get the list of classes defined in the currently opened file then?</p>",
        "id": 132185695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534352005
    },
    {
        "content": "<p>It also doesn't seem possible to get any information on what notation is defined.</p>",
        "id": 132185760,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1534352046
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import tactic.basic\n\nclass foo : Type.\nstructure bar : Type.\n@[class] def baz : Type := nat\n\nopen tactic\nrun_cmd do\n  env ← get_env,\n  env.fold skip $ λ d t, do\n    when (env.in_current_file&#39; d.to_name) $ try $\n      tactic.has_attribute `class d.to_name &gt;&gt;\n      trace d.to_name,\n    t\n-- foo baz\n</pre></div>",
        "id": 132186062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534352411
    },
    {
        "content": "<p>alternatively:</p>\n<div class=\"codehilite\"><pre><span></span>run_cmd do\n  env ← get_env,\n  l ← attribute.get_instances `class,\n  l.mmap&#39; $ λ n, do\n    when (env.in_current_file&#39; n) (trace n)\n-- baz foo\n</pre></div>",
        "id": 132186126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534352492
    },
    {
        "content": "<p>as I'm sure you've heard by now, this introspection stuff is getting an overhaul in lean 4, so fingers crossed</p>",
        "id": 132186311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534352751
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 132186593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534353118
    },
    {
        "content": "<p>What is the difference between <code>run_cmd</code> and <code>#eval</code> here?</p>",
        "id": 132186636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534353138
    },
    {
        "content": "<p>Inside a function which will ultimately return a <code>tactic unit</code> can I have some <code>if</code> consuming a <code>tactic Prop</code> or <code>tactic bool</code>?</p>",
        "id": 132187368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534354059
    },
    {
        "content": "<p>there is <code>mcond</code> as a shortcut for this, but you can always do <code>b &lt;- tac, if b then ... else ...</code></p>",
        "id": 132187933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534354650
    },
    {
        "content": "<p>thanks</p>",
        "id": 132188027,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534354706
    },
    {
        "content": "<p>I'm sorry I'm very slowly getting used to monads</p>",
        "id": 132188037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534354723
    },
    {
        "content": "<p>Do you have ideas to traverse an <code>expr</code> until you see what an instance is an instance of?</p>",
        "id": 132188081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534354787
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">get_pi_app_fn</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">get_pi_app_fn</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span>                 <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">``</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">get_pi_app_fn</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">n</span>\n<span class=\"c1\">-- decidable_eq</span>\n</pre></div>",
        "id": 132188330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534355005
    },
    {
        "content": "<p>great!</p>",
        "id": 132188717,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534355357
    },
    {
        "content": "<p>I think I even understand this code (but wouldn't have none where to search)</p>",
        "id": 132188810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534355426
    },
    {
        "content": "<p>Two last questions and then I cook dinner: how would you distinguish between <code>inductive</code> and <code>structure</code> declarations? What does constant mean in the definition of the declaration type? How is is more constant than a definition?</p>",
        "id": 132189258,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534355840
    },
    {
        "content": "<p>Mario, do you also have hints for me?</p>",
        "id": 132197062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534363770
    },
    {
        "content": "<p><code>declaration.cnst</code> is the kind of declaration you get if you write <code>constant A : ℕ</code>. It's an undefined constant, basically the same as an axiom.</p>",
        "id": 132197217,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1534363921
    },
    {
        "content": "<p>You can have a <code>meta constant</code> but not a <code>meta axiom</code>. I'm not sure if there are any other differences between the two.</p>",
        "id": 132197290,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1534364006
    },
    {
        "content": "<p>I'm sorry but this doesn't match what I'm seeing</p>",
        "id": 132197349,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534364049
    },
    {
        "content": "<p>I think <code>constant</code> is to <code>axiom</code> as <code>def</code> is to <code>theorem</code></p>",
        "id": 132197431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534364151
    },
    {
        "content": "<p>What are you seeing?</p>",
        "id": 132197478,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1534364166
    },
    {
        "content": "<p>The differences between def and theorem are when the bodies get elaborated, right? But there are no bodies in a constant or axiom.</p>",
        "id": 132197543,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1534364264
    },
    {
        "content": "<p>And you can have axioms with non-<code>Prop</code> type.</p>",
        "id": 132197609,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1534364324
    },
    {
        "content": "<p>Actually, it looks like using the <code>axiom</code> command with a non-<code>Prop</code> type creates a <code>declaration.cnst</code> in the end. (edit- scratch that, typo)</p>",
        "id": 132197749,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1534364518
    },
    {
        "content": "<p>I'm going through the code now, trying to figure out the difference</p>",
        "id": 132197798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534364553
    },
    {
        "content": "<p>it is disambiguated in loads of places just so it can print <code>constant</code> instead of <code>axiom</code> but that's not so helpful</p>",
        "id": 132197808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534364579
    },
    {
        "content": "<p>Sorry I was interrupted. Maybe there is a misunderstanding, I'm talking about <a href=\"https://github.com/leanprover/lean/blob/master/library/init/meta/declaration.lean#L67\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/meta/declaration.lean#L67\">https://github.com/leanprover/lean/blob/master/library/init/meta/declaration.lean#L67</a></p>",
        "id": 132198136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534365026
    },
    {
        "content": "<p>See </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">environment</span> <span class=\"n\">declaration</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">toto</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tata</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">local_decls</span> <span class=\"o\">:=</span> <span class=\"n\">decls</span><span class=\"bp\">.</span><span class=\"n\">filter</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">in_current_file&#39;</span> <span class=\"n\">curr_env</span> <span class=\"o\">(</span><span class=\"n\">to_name</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">to_name</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_internal</span><span class=\"o\">),</span>\n   <span class=\"n\">local_decls</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">decl</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">,</span>\n       <span class=\"k\">match</span> <span class=\"n\">decl</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">trace</span> <span class=\"s2\">&quot;theorem&quot;</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">defn</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">trace</span> <span class=\"s2\">&quot;def&quot;</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cnst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">trace</span> <span class=\"s2\">&quot;cnst&quot;</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ax</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">trace</span> <span class=\"s2\">&quot;ax&quot;</span>\n  <span class=\"kn\">end</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>lots of cnst there</p>",
        "id": 132198153,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534365046
    },
    {
        "content": "<p>\"Built-ins\" are implemented as constants too. So when you declare an inductive type, the constructors, recursor, etc. are constants.</p>",
        "id": 132198311,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1534365273
    },
    {
        "content": "<p>If you change a line to <code>| (cnst nm _ _ _) := do trace \"cnst\", trace nm</code> you can see what the constants are called.</p>",
        "id": 132198325,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1534365305
    },
    {
        "content": "<p>Did you know about <code>#print definition</code>?</p>",
        "id": 132198345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534365338
    },
    {
        "content": "<p>I just discovered that you can print definitions with <code>#print definition foo</code>. it's the same as <code>#print foo</code> but the printout is slightly different and it doesn't work on constants</p>",
        "id": 132198404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534365375
    },
    {
        "content": "<p>I had no idea, heh.</p>",
        "id": 132198494,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1534365494
    },
    {
        "content": "<p>I know, maybe it's clearer with </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">environment</span> <span class=\"n\">declaration</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">toto</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tata</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">local_decls</span> <span class=\"o\">:=</span> <span class=\"n\">decls</span><span class=\"bp\">.</span><span class=\"n\">filter</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">in_current_file&#39;</span> <span class=\"n\">curr_env</span> <span class=\"o\">(</span><span class=\"n\">to_name</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">to_name</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_internal</span><span class=\"o\">),</span>\n   <span class=\"n\">local_decls</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">decl</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">,</span>\n       <span class=\"k\">match</span> <span class=\"n\">decl</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cnst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">trace</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">to_name</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">skip</span>\n  <span class=\"kn\">end</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 132198658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534365658
    },
    {
        "content": "<p>you see that <code>toto</code> is also <code>cnst</code></p>",
        "id": 132198673,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534365668
    },
    {
        "content": "<p>Oh, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I found out that even lean internally doesn't store the list of attributes associated to a definition. When printing a definition with <code>#print</code>, it gets the list of all attributes and just asks for each whether <code>foo</code> has that attribute</p>",
        "id": 132198710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534365714
    },
    {
        "content": "<p>but where does the answer come from then?</p>",
        "id": 132198786,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534365778
    },
    {
        "content": "<p>Yeah. When you declare an inductive type <code>T</code>, you're basically saying, \"there is a type <code>T</code>. This is how you create a <code>T</code> (the constructors). This is how you use a <code>T</code> (the recursors).\"</p>",
        "id": 132198801,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1534365809
    },
    {
        "content": "<p>You're not defining <code>T</code> in terms of something else, so there's no value for the declaration <code>T</code> to have.</p>",
        "id": 132198813,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1534365835
    },
    {
        "content": "<p>Makes sense, thanks</p>",
        "id": 132198884,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534365894
    },
    {
        "content": "<p>Do you have an idea to distinguish between <code>inductive</code> and <code>structure</code>?</p>",
        "id": 132198896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534365916
    },
    {
        "content": "<p>I'm working on it</p>",
        "id": 132199003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534366070
    },
    {
        "content": "<p>in the meantime, I found something odd:</p>\n<div class=\"codehilite\"><pre><span></span>structure foo : Type.\n#print foo\n-- inductive foo : Type\n-- constructors:\n-- foo.mk : foo\n</pre></div>",
        "id": 132199047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534366097
    },
    {
        "content": "<p>lean does not remember structureness</p>",
        "id": 132199052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534366111
    },
    {
        "content": "<p>or at least, nullary structures don't count as structures</p>",
        "id": 132199131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534366207
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">toto</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tata</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">toto</span>\n</pre></div>",
        "id": 132199175,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534366288
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">toto</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"n\">toto</span><span class=\"bp\">.</span><span class=\"n\">tata</span> <span class=\"o\">:</span> <span class=\"n\">toto</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n</pre></div>",
        "id": 132199245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534366350
    },
    {
        "content": "<p>Lean reconstructs structurehood based on structure like things</p>",
        "id": 132199271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534366400
    },
    {
        "content": "<p>specifically, the projections</p>",
        "id": 132199282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534366418
    },
    {
        "content": "<p>where do you see the code of <code>#print</code>?</p>",
        "id": 132199802,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534367094
    },
    {
        "content": "<p>are you looking at <a href=\"https://github.com/leanprover/lean/blob/703d12d594f1591296d529e72794a00ba42dbade/src/frontends/lean/structure_cmd.cpp#L111\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/703d12d594f1591296d529e72794a00ba42dbade/src/frontends/lean/structure_cmd.cpp#L111\">https://github.com/leanprover/lean/blob/703d12d594f1591296d529e72794a00ba42dbade/src/frontends/lean/structure_cmd.cpp#L111</a>?</p>",
        "id": 132200606,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534368250
    },
    {
        "content": "<p>I think this replicates lean's <code>is_structure</code> function</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">deinternalize_field</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">name</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"n\">s</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">mk_iterator</span> <span class=\"k\">in</span>\n  <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">curr</span> <span class=\"bp\">=</span> <span class=\"err\">&#39;</span><span class=\"bp\">_</span><span class=\"err\">&#39;</span> <span class=\"k\">then</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">next</span><span class=\"bp\">.</span><span class=\"n\">next_to_string</span> <span class=\"k\">else</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">is_structure</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n  <span class=\"n\">guardb</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">is_inductive</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_option</span><span class=\"o\">,</span>\n  <span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"err\">←</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">constructors_of</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">inductive_num_indices</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">nparams</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">inductive_num_params</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">di</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">intro</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_option</span><span class=\"o\">,</span>\n  <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">iterate</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n      <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">body</span> <span class=\"err\">←</span> <span class=\"n\">pure</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n      <span class=\"n\">f</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"n\">nparams</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n      <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">x</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">←</span> <span class=\"n\">pure</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">++</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">deinternalize_field</span><span class=\"o\">,</span>\n      <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">is_projection</span> <span class=\"n\">f</span> <span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">())</span>\n    <span class=\"n\">di</span><span class=\"bp\">.</span><span class=\"n\">type</span>\n</pre></div>",
        "id": 132200886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534368620
    },
    {
        "content": "<p>Nice!</p>",
        "id": 132226399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534409177
    },
    {
        "content": "<blockquote>\n<p>I think this replicates lean's <code>is_structure</code> function</p>\n</blockquote>\n<p>I'm sorry, I wasted your time. For some mysterious reason I missed <a href=\"https://github.com/leanprover/lean/blob/776b440d5595e5eaa3f16e633c9ca85a834f147a/library/init/meta/environment.lean#L87\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/776b440d5595e5eaa3f16e633c9ca85a834f147a/library/init/meta/environment.lean#L87\">https://github.com/leanprover/lean/blob/776b440d5595e5eaa3f16e633c9ca85a834f147a/library/init/meta/environment.lean#L87</a> (and its implementation <a href=\"https://github.com/leanprover/lean/blob/776b440d5595e5eaa3f16e633c9ca85a834f147a/src/library/vm/vm_environment.cpp#L227\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/776b440d5595e5eaa3f16e633c9ca85a834f147a/src/library/vm/vm_environment.cpp#L227\">https://github.com/leanprover/lean/blob/776b440d5595e5eaa3f16e633c9ca85a834f147a/src/library/vm/vm_environment.cpp#L227</a>)</p>",
        "id": 132487331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534807565
    },
    {
        "content": "<p>Does Lean keep any trace of whether something was declared as a lemma or a theorem? Or are they purely synonym from the parsing stage on?</p>",
        "id": 132542303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534886099
    },
    {
        "content": "<p>pure synonyms</p>",
        "id": 132542417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534886235
    },
    {
        "content": "<p>thanks</p>",
        "id": 132542484,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534886300
    }
]