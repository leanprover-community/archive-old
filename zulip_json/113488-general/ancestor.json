[
    {
        "content": "<p>Can someone explain what the ancestor attribute is for? (It doesn't appear as an attribute in <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html\">https://leanprover-community.github.io/mathlib_docs/attributes.html</a>, and is only mentioned in <code>to_additive</code> there). For instance, I can see in <code>field.lean</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">protect_proj</span><span class=\"o\">,</span> <span class=\"n\">ancestor</span> <span class=\"n\">division_ring</span> <span class=\"n\">comm_ring</span><span class=\"o\">]</span>\n<span class=\"n\">class</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">nontrivial</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>which mentions as ancestor<code>division_ring</code>, but not <code>has_inv</code> or <code>nontrivial</code>, so I have a hard time guessing how it should be used in general.</p>",
        "id": 206956321,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597426841
    },
    {
        "content": "<p>I think <code>field</code>'s ancestry was changed</p>",
        "id": 206956452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597426928
    },
    {
        "content": "<p>it's supposed to list the contents of the <code>extends</code> clause, because this information is not preserved by <code>old_structure_cmd</code> structures</p>",
        "id": 206956530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597426979
    },
    {
        "content": "<p>ok, so in the case of <code>field</code> it should just be <code>comm_ring has_inv nontrivial</code>?</p>",
        "id": 206956788,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597427119
    },
    {
        "content": "<p>And if you extend things with less params (for instance <code>bar (a b) extends foo1 a, foo2 b</code>), should it just be <code>ancestor foo1 foo2</code> or is there some more trickery do be done?</p>",
        "id": 206956973,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597427227
    },
    {
        "content": "<p>I think this is used only by the subtype instance tactic which is maybe no longer used now everything is bundled.</p>",
        "id": 206958334,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597427949
    },
    {
        "content": "<p>I think it is just <code>ancestor foo1 foo2</code></p>",
        "id": 206959490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597428579
    },
    {
        "content": "<p>that said, you shouldn't be doing that in the first place</p>",
        "id": 206959559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597428608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/ancestor/near/206956973\">said</a>:</p>\n<blockquote>\n<p>And if you extend things with less params (for instance <code>bar (a b) extends foo1 a, foo2 b</code>), should it just be <code>ancestor foo1 foo2</code> or is there some more trickery do be done?</p>\n</blockquote>\n<p>Isn't this an antipattern?</p>",
        "id": 206960157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597428998
    },
    {
        "content": "<p>This is an antipattern for classes, as typeclass search will go crazy, but for normal structures it shouldn't be a problem.</p>",
        "id": 206964386,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597431328
    },
    {
        "content": "<p><code>ancestor</code> is used by <code>to_additive</code> to automatically map <code>to_*</code> functions. I don't know who else uses this information.</p>",
        "id": 206998953,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597454990
    },
    {
        "content": "<p>In particular, I don't know if there is some code using <code>@[ancestor]</code> on <code>field</code>.</p>",
        "id": 206999011,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597455024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/ancestor/near/206998953\">said</a>:</p>\n<blockquote>\n<p><code>ancestor</code> is used by <code>to_additive</code> to automatically map <code>to_*</code> functions. I don't know who else uses this information.</p>\n</blockquote>\n<p>Oh, I didn't know about the <code>ancestor</code> attribute. We could use this for the <code>is_auto_generated</code> definition to check which instances are auto-generated (which is useful for e.g. linters).</p>",
        "id": 207043597,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597532205
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#ancestor\">attr#ancestor</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#to_additive\">attr#to_additive</a> now collectively document this i think</p>",
        "id": 226852283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613671252
    }
]