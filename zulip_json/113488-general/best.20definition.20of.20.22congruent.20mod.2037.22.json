[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">r1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n<span class=\"kn\">definition</span> <span class=\"n\">r2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"mi\">37</span>\n<span class=\"kn\">definition</span> <span class=\"n\">r3</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"mi\">37</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n<span class=\"kn\">definition</span> <span class=\"n\">r4</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span>\n<span class=\"c1\">-- I&#39;m open to more suggestions</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">r1</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">r1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r1</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hk</span><span class=\"o\">],</span> <span class=\"c1\">-- b + -a = -(37 * k)</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">r2</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">r2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r2</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hk</span><span class=\"o\">],</span> <span class=\"c1\">-- b + -a = -(k * 37)</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">r3</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">r3</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r3</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hk</span><span class=\"o\">]</span> <span class=\"c1\">-- success!</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">r4</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">r4</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r4</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hk</span><span class=\"o\">]</span> <span class=\"c1\">-- success!</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>If you'd asked me in advance which relations would be easiest to work with I realise I would have no idea. But it seems <code>r3</code> and <code>r4</code> are better than <code>r1</code> and <code>r2</code>. Why is this?</p>",
        "id": 132741889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535188642
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"n\">def</span> <span class=\"n\">r5</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">37</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">r5</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">r5</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r5</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">H</span>\n</pre></div>",
        "id": 132741991,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535188820
    },
    {
        "content": "<p>Of course you could also try<br>\n<code>definition r6 (a b : ℤ) := ∃ k : ℤ, a = b + 37 * k</code><br>\nI have no idea if it is easy to work with...</p>",
        "id": 132741992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535188825
    },
    {
        "content": "<p>You could insert <code>eq.symm</code> in your simp</p>",
        "id": 132742000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535188850
    },
    {
        "content": "<p>My \"objection\" to Kenny's approach is that my question is really about how one writes the interface, not the fact that it's there already.</p>",
        "id": 132742152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535189145
    },
    {
        "content": "<p>My objection to Patrick's is that sure I could work a bit harder and get stuff to work, but why do I have to do this for some and not others? Is it the case that <code>r3</code> and <code>r4</code> are actually <em>better</em> in some way?</p>",
        "id": 132742206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535189202
    },
    {
        "content": "<p>I think r6 is better</p>",
        "id": 132742216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535189274
    },
    {
        "content": "<p>because you can use <code>rw Hk, ring</code></p>",
        "id": 132742255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535189291
    },
    {
        "content": "<p><code>simp</code> works for <code>r6</code> too</p>",
        "id": 132742258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535189317
    },
    {
        "content": "<p>One problem with r1 -- r4 is that you can't use rw with any of them</p>",
        "id": 132742264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535189348
    },
    {
        "content": "<p>Johan's definition generalizes to a semiring :-)</p>",
        "id": 132742265,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1535189351
    },
    {
        "content": "<p>I don't think symmetry is true for a semiring :-)</p>",
        "id": 132742268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535189366
    },
    {
        "content": "<p>Kevin, do you see what you've done to your students?</p>",
        "id": 132742275,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535189393
    },
    {
        "content": "<p>only one of them!</p>",
        "id": 132742311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535189403
    },
    {
        "content": "<p>Oh yeah, the other one became a constructivist...</p>",
        "id": 132742324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535189425
    },
    {
        "content": "<p>:-)</p>",
        "id": 132742327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535189431
    },
    {
        "content": "<p>maybe I need to rethink this entire thing</p>",
        "id": 132742334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535189443
    },
    {
        "content": "<p>I think r3-r6 are better than r1 and r2 because it allows to write the same thing as in real world: <code>cases H with k Hk,  existsi -k,  finish</code></p>",
        "id": 132742387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535189553
    },
    {
        "content": "<p>But isn't this answer just like mine -- \"try all ways, see which ones work, decide those must be the best ways\"</p>",
        "id": 132742450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535189723
    },
    {
        "content": "<p>I was interested in knowing which was the best way before I started</p>",
        "id": 132742451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535189739
    },
    {
        "content": "<p>I don't see how to figure it out a priori</p>",
        "id": 132742453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535189760
    },
    {
        "content": "<p>I think that we could have anticipated that Johan's version would be easier to rewrite</p>",
        "id": 132742492,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535189768
    },
    {
        "content": "<p>yes; I didn't instinctively mention that possibility because it looked so asymmetric</p>",
        "id": 132742625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535190021
    },
    {
        "content": "<p>which is counter to my intuition, but which seems to play a big role here</p>",
        "id": 132742627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535190041
    },
    {
        "content": "<p>Mathematicians even _say_ \"a and b are congruent mod 37\" and there's an implicit symmetry implied when we say \"and\", but when you have to prove symmetry the first thing you have to do is to break it I guess</p>",
        "id": 132742632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535190088
    },
    {
        "content": "<p>and Johan's breaks it the most</p>",
        "id": 132742634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535190096
    },
    {
        "content": "<p>The point is that <code>x = ...</code> can't fail to rewrite <code>x</code></p>",
        "id": 132742637,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535190101
    },
    {
        "content": "<p>whatever you do to <code>x</code> in your expression</p>",
        "id": 132742670,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535190123
    },
    {
        "content": "<blockquote>\n<p>My \"objection\" to Kenny's approach is that my question is really about how one writes the interface, not the fact that it's there already.</p>\n</blockquote>\n<p>my objection to your objection is that my answer prompts one to look at the definition in mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">modeq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">%</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">≡</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">b</span> <span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">modeq</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">modeq</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">rfl</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"n\">c</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">c</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n</pre></div>",
        "id": 132746777,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535198367
    },
    {
        "content": "<p>Yes but my actual question is: \"I am defining some new relation on some new type completely unrelated to the integers, and I want to prove it's an equivalence relation. I've just realised that mathematically equivalent definitions of the relation will behave differently in Lean, so I need some pointers about how to formulate my relation so that I can use it efficiently\".</p>",
        "id": 132746937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535198657
    },
    {
        "content": "<p>my objection is that you don't just have some random types</p>",
        "id": 132746951,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535198707
    },
    {
        "content": "<p>if it's a group like the integers are, then you should just use quotient groups</p>",
        "id": 132746954,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535198717
    }
]