[
    {
        "content": "<p>I just pushed a new update for the vscode extension.  A few bugfixes and features have accumulated over the last few months:</p>\n<ul>\n<li>The new <code>visibleRanges</code> API in vscode is supported now.  Per default, we no longer check the whole file on every keystroke, but only the currently visible lines (and the rest of the file above).  This new API is only present in vscode &gt;=1.22 (released in March), no idea if it works with older vscode versions.  Please complain (or upgrade) if you run into any troubles.</li>\n<li>You can now input ⦃⦄ using <code>\\{{</code></li>\n<li>Fewer complaints about <code>leanpkg.path</code> changes.</li>\n</ul>",
        "id": 125499751,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524331565
    },
    {
        "content": "<p>can you also type ⟦⟧ using <code>\\[[</code>?</p>",
        "id": 125504461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524342481
    },
    {
        "content": "<p>No, it seems.</p>",
        "id": 125504757,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524343073
    },
    {
        "content": "<p>How do you check what version of the extension is used? How do you upgrade?</p>",
        "id": 125505099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524343705
    },
    {
        "content": "<p>I clicked on extensions on the left pane, and I clicked the reload button. Try typing<code> \\{{</code> and  if it turns into special brackets, you have the upgrade.</p>",
        "id": 125505255,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524344061
    },
    {
        "content": "<p>I didn't see a reload button</p>",
        "id": 125505262,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524344115
    },
    {
        "content": "<p>I'll search more</p>",
        "id": 125505263,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524344119
    },
    {
        "content": "<p>I have a feeling it might do it automatically if you restart, so I would try the brackets thing.</p>",
        "id": 125505271,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524344153
    },
    {
        "content": "<p>Ok, I've found a menu containg \"search updates\" (or something like this, this part is in French here)</p>",
        "id": 125505313,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524344185
    },
    {
        "content": "<p>I'm updated</p>",
        "id": 125505315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524344203
    },
    {
        "content": "<blockquote>\n<p>can you also type ⟦⟧ using <code>\\[[</code>?</p>\n</blockquote>\n<p>You can, as of a minute ago.</p>",
        "id": 125520061,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524379797
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 125523356,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524388133
    },
    {
        "content": "<p>Very easy suggestion: make a command (usable through Ctrl-p like the Restart server command) that opens up <a href=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\">https://github.com/leanprover/vscode-lean/blob/master/translations.json</a> in a new tab (not fetching it from the web, opening the one which is actually used on the current install)</p>",
        "id": 125523927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524389612
    },
    {
        "content": "<p>What about having syntax highlighting in the Lean message window? Would that be complicated to do?</p>",
        "id": 125571378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524493863
    },
    {
        "content": "<p>If \"message window\" is the info view (with the pause button on the top right), then this is a bit complicated.  Unfortunately we do not have any programmatic access to vscode's syntax highlighter.  AFAIK there is also no pure javascript package that can use these syntax highlighting files.  I'll keep it in mind though.</p>",
        "id": 125572368,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524495165
    },
    {
        "content": "<p>Yes this is what I meant. We do spend quite some time staring at this window, and it's a bit austere.</p>",
        "id": 125572400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524495213
    },
    {
        "content": "<blockquote>\n<p>If \"message window\" is the info view (with the pause button on the top right), then this is a bit complicated.  Unfortunately we do not have any programmatic access to vscode's syntax highlighter.  AFAIK there is also no pure javascript package that can use these syntax highlighting files.  I'll keep it in mind though.</p>\n</blockquote>\n<p>I just played a bit with this. Here is what I currently see in my VScode:</p>",
        "id": 126270759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795133
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/nyFVDaVWTFbkyaDebw9CTNRE/colored_tactic_state.png\" target=\"_blank\" title=\"colored_tactic_state.png\">colored_tactic_state.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nyFVDaVWTFbkyaDebw9CTNRE/colored_tactic_state.png\" target=\"_blank\" title=\"colored_tactic_state.png\"><img src=\"/user_uploads/3121/nyFVDaVWTFbkyaDebw9CTNRE/colored_tactic_state.png\"></a></div>",
        "id": 126270769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795146
    },
    {
        "content": "<p>I think it's already useful (to me at least)</p>",
        "id": 126270776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795177
    },
    {
        "content": "<p>It's super low tech and unreliable, based on:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">function</span> <span class=\"nx\">formatTacticState</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">s</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/^(\\d+ goals)/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;strong style=&quot;color:#569cd6;&quot;&gt;$1&lt;/strong&gt; :&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/^([^ ][^:\\n⊢]*) :/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;strong style=&quot;color:#dcdc00;&quot;&gt;$1&lt;/strong&gt; :&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/\\n([^ ⊢][^:\\n⊢]*) :/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\n&lt;strong style=&quot;color:#dcdc00;&quot;&gt;$1&lt;/strong&gt; :&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/\\n⊢/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\n&lt;strong style=&quot;color:#569cd6;&quot;&gt;⊢&lt;/strong&gt;&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 126270840,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795225
    },
    {
        "content": "<p>Which is called in <code>InfoProvider.renderGoal</code></p>",
        "id": 126270853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> What do you think about that?</p>",
        "id": 126270859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795277
    },
    {
        "content": "<p>I would object to this on purity grounds, but TBH the standard syntax highlighter isn't much better</p>",
        "id": 126270862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525795281
    },
    {
        "content": "<p>Indeed it couldn't be less pure</p>",
        "id": 126270911,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795339
    },
    {
        "content": "<p>And the next Lean file I'll open will probably tell me I missed some edge case</p>",
        "id": 126270920,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795355
    },
    {
        "content": "<p>You can probably parse a tactic print string pretty reliably by classifying the lines that don't start with whitespace</p>",
        "id": 126270925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525795360
    },
    {
        "content": "<p>But Gabriel told me the syntax highlighter is not available here</p>",
        "id": 126270940,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795400
    },
    {
        "content": "<p>Yes, a classification function would help</p>",
        "id": 126270946,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795415
    },
    {
        "content": "<p>At least make things more modular</p>",
        "id": 126270948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795422
    },
    {
        "content": "<p>With the above method, trying to catch anything new would likely break things</p>",
        "id": 126270990,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795450
    },
    {
        "content": "<p>This looks great!  I'll just make sure it is also readable with a white background.</p>",
        "id": 126270991,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1525795454
    },
    {
        "content": "<p>don't forget the <code>case</code> line of tactic state</p>",
        "id": 126270999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525795499
    },
    {
        "content": "<p>There should be away to have proper CSS interacting with the selected theme instead of hardcoded colors</p>",
        "id": 126271008,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795517
    },
    {
        "content": "<p>presumably it's as simple as just <code>&lt;span class=\"x\"&gt;</code></p>",
        "id": 126271012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525795546
    },
    {
        "content": "<p>The question is not there: where should we put classes definitions?</p>",
        "id": 126271065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> did you just put the <code>&lt;strong&gt;</code> inside the <code>&lt;pre&gt;</code>?</p>",
        "id": 126271069,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1525795598
    },
    {
        "content": "<p>The CSS is in <code>infoview.css</code></p>",
        "id": 126271075,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1525795610
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    <span class=\"kr\">private</span> <span class=\"nx\">renderGoal</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">curGoalState</span> <span class=\"o\">||</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">displayMode</span> <span class=\"o\">!==</span> <span class=\"nx\">DisplayMode</span><span class=\"p\">.</span><span class=\"nx\">OnlyState</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"sb\">`&lt;div id=&quot;goal&quot;&gt;&lt;h1&gt;Tactic State&lt;/h1&gt;&lt;pre&gt;</span><span class=\"si\">${</span><span class=\"nx\">formatTacticState</span><span class=\"p\">(</span><span class=\"nx\">escapeHtml</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">curGoalState</span><span class=\"p\">))</span><span class=\"si\">}</span><span class=\"sb\">&lt;/pre&gt;&lt;/div&gt;`</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n</pre></div>",
        "id": 126271078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795621
    },
    {
        "content": "<p>Reading <code>infoview.css</code> is very interesting</p>",
        "id": 126271182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795770
    },
    {
        "content": "<p>Indeed it should be very easy to use</p>",
        "id": 126271185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525795777
    },
    {
        "content": "<p>The colorization has been deployed.  Please complain if the fancy colors distract you too much.</p>",
        "id": 126272070,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1525797180
    },
    {
        "content": "<p>Wow, you're fast</p>",
        "id": 126272161,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525797329
    },
    {
        "content": "<p>I was working on it</p>",
        "id": 126272166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525797334
    },
    {
        "content": "<p>But not fast enough <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 126272171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525797345
    },
    {
        "content": "<p>I didn't know about the <code>m</code> flag in <code>replace</code></p>",
        "id": 126272212,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525797364
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/vscode-lean/commit/8a1e35e6495593620fbaacad5ff98929c15c7793#diff-66e057b4386ca2dfc39356a2fbecb4f2R354\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/commit/8a1e35e6495593620fbaacad5ff98929c15c7793#diff-66e057b4386ca2dfc39356a2fbecb4f2R354\">https://github.com/leanprover/vscode-lean/commit/8a1e35e6495593620fbaacad5ff98929c15c7793#diff-66e057b4386ca2dfc39356a2fbecb4f2R354</a> is not good</p>",
        "id": 126272253,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525797474
    },
    {
        "content": "<p>There can be space before the colon</p>",
        "id": 126272297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525797492
    },
    {
        "content": "<p>when several variables share a common type</p>",
        "id": 126272300,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525797504
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/VUbq6QDeA0f2v-1YIVC0v3Vu/bug.png\" target=\"_blank\" title=\"bug.png\">bug.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VUbq6QDeA0f2v-1YIVC0v3Vu/bug.png\" target=\"_blank\" title=\"bug.png\"><img src=\"/user_uploads/3121/VUbq6QDeA0f2v-1YIVC0v3Vu/bug.png\"></a></div>",
        "id": 126272324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525797574
    },
    {
        "content": "<p>But I do like this orange</p>",
        "id": 126272327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525797588
    },
    {
        "content": "<p>Also, you forgot the <code>|</code> showing current goal in conversion mode</p>",
        "id": 126272394,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525797666
    },
    {
        "content": "<p>In my current version I gave it the same formatting as the ⊢</p>",
        "id": 126272404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525797697
    },
    {
        "content": "<p>Should be fixed now.</p>",
        "id": 126272597,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1525798046
    },
    {
        "content": "<p>Nice!</p>",
        "id": 126272796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525798330
    },
    {
        "content": "<p>oh oh...</p>",
        "id": 126272820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525798441
    },
    {
        "content": "<p>New bug</p>",
        "id": 126272857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525798445
    },
    {
        "content": "<p>I also had that one at some point</p>",
        "id": 126272862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525798451
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/aLyRDIXg6KqbSFhRTd0_j6AI/bug2.png\" target=\"_blank\" title=\"bug2.png\">bug2.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/aLyRDIXg6KqbSFhRTd0_j6AI/bug2.png\" target=\"_blank\" title=\"bug2.png\"><img src=\"/user_uploads/3121/aLyRDIXg6KqbSFhRTd0_j6AI/bug2.png\"></a></div>",
        "id": 126272887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525798522
    },
    {
        "content": "<p>I can see you are too much used to proved software. In the real world you need to test your software with real world data</p>",
        "id": 126272938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525798587
    },
    {
        "content": "<p>It's spreading!</p>",
        "id": 126272939,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525798587
    },
    {
        "content": "<p>In Emacs, all flycheck errors are now highlighted with the Lean syntax highlighter btw</p>",
        "id": 126272963,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525798652
    },
    {
        "content": "<p>:)</p>",
        "id": 126272964,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525798653
    },
    {
        "content": "<p>For the record, before you told us you 0.11.2 was out, the state of my regexs was:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">function</span> <span class=\"nx\">formatTacticState</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">s</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/^(\\d+ goals)/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;strong class=&quot;goals-number&quot;&gt;$1&lt;/strong&gt; :&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/^([^ ][^:\\n⊢]*) :/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;strong class=&quot;context-element&quot;&gt;$1&lt;/strong&gt; :&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/\\n([^ ⊢][^:\\n⊢]*) :/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\n&lt;strong class=&quot;context-element&quot;&gt;$1&lt;/strong&gt; :&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/^case ([^\\n]*)/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;strong class=&quot;case&quot;&gt;case $1&lt;/strong&gt; :&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/\\ncase ([^\\n]*)/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\n&lt;strong class=&quot;case&quot;&gt;case $1&lt;/strong&gt; :&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/^⊢/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;strong class=&quot;goal&quot;&gt;⊢&lt;/strong&gt;&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/\\n⊢/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\n&lt;strong class=&quot;goal&quot;&gt;⊢&lt;/strong&gt;&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/^\\|/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;strong class=&quot;goal&quot;&gt;|&lt;/strong&gt;&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/\\n\\|/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\n&lt;strong class=&quot;goal&quot;&gt;|&lt;/strong&gt;&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/no goals/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39;🎉 &#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 126272967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525798659
    },
    {
        "content": "<p>I should really try Lean in spacemacs at some point</p>",
        "id": 126273026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525798732
    },
    {
        "content": "<p>I don't why I'm affraid</p>",
        "id": 126273030,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525798740
    },
    {
        "content": "<p>I should really write a Lean spacemacs layer at some point</p>",
        "id": 126273041,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525798781
    },
    {
        "content": "<p>Sebastian, do you have plans to make more structured tactic state output in Lean 4?</p>",
        "id": 126273048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525798802
    },
    {
        "content": "<p>Like, we wouldn't have to regex the output</p>",
        "id": 126273099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525798820
    },
    {
        "content": "<p>It could be useful also to build more powerful IDEs</p>",
        "id": 126273115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525798893
    },
    {
        "content": "<p>(where we could click on stuff in the tactic state and see cool things happen)</p>",
        "id": 126273165,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525798934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <a href=\"https://github.com/leanprover/lean/issues/1693\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1693\">https://github.com/leanprover/lean/issues/1693</a></p>",
        "id": 126273244,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525799066
    },
    {
        "content": "<p>Ok, I see you already discussed this quite a bit</p>",
        "id": 126273395,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525799293
    },
    {
        "content": "<p>Is this in the Lean 4 TODO list then? I guess the priority is not super high</p>",
        "id": 126273404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525799322
    },
    {
        "content": "<p>We're currently more focused on the structured traces (<a href=\"https://github.com/leanprover/lean/issues/1692\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1692\">https://github.com/leanprover/lean/issues/1692</a>) since that influences how we write Lean-in-Lean code. I suspect structured term output will come a bit later.</p>",
        "id": 126275103,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525801562
    },
    {
        "content": "<p>Great</p>",
        "id": 126279875,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525808546
    },
    {
        "content": "<blockquote>\n<p>I can see you are too much used to proved software. In the real world you need to test your software with real world data</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span> We don't have a single test in vscode-lean.  But the new bug is fixed now.</p>",
        "id": 126301917,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1525847681
    },
    {
        "content": "<p>Patrick do you test your theorems about manifolds with real world data?</p>",
        "id": 126302503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525849022
    },
    {
        "content": "<p>Of course I do! How else could we get confidence in our theorems until proof assistants are ready for the real battlefield?</p>",
        "id": 126303394,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525850949
    },
    {
        "content": "<p>Have a look at my latest preprint for instance</p>",
        "id": 126303396,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525850963
    },
    {
        "content": "<p>The main result is checked against the canonical contact structures on spheres and projective spaces</p>",
        "id": 126303397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525850986
    },
    {
        "content": "<p>Conclusions were already known to hold for spheres and known not to hold for projective spaces (with the nice corollary that the hypothesis of the theorem does not hold for projective spaces, something that we have no other way to prove at the moment)</p>",
        "id": 126303450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525851066
    },
    {
        "content": "<p>Oh crap, my VScode doesn't like the tada unicode in the Tactic state window</p>",
        "id": 126303453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525851099
    },
    {
        "content": "<p>I forgot I kept that experiment in the regex I posted</p>",
        "id": 126303456,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525851116
    },
    {
        "content": "<p>I tried it and the tada emoji works here, but I have a font installed for it.</p>",
        "id": 126303546,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1525851269
    },
    {
        "content": "<p>I have just enabled the highlighting for error messages as well.  It looks a bit weird for <code>#print</code> results, but I think it's a definite improvement for failed tactics.</p>",
        "id": 126303661,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1525851536
    },
    {
        "content": "<p>I recommend against seriously using the tada emoji in the vscode extension</p>",
        "id": 126303925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525852122
    },
    {
        "content": "<p>At least put it after the words \"no goals\"</p>",
        "id": 126303926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525852138
    },
    {
        "content": "<p>Yes, it comes right after the two words.  But I'll remove it.</p>",
        "id": 126303990,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1525852256
    },
    {
        "content": "<blockquote>\n<p><a href=\"/user_uploads/3121/aLyRDIXg6KqbSFhRTd0_j6AI/bug2.png\" target=\"_blank\" title=\"bug2.png\">bug2.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/aLyRDIXg6KqbSFhRTd0_j6AI/bug2.png\" target=\"_blank\" title=\"bug2.png\"><img src=\"/user_uploads/3121/aLyRDIXg6KqbSFhRTd0_j6AI/bug2.png\"></a></div></blockquote>\n<p>This also happen in conversion mode...</p>",
        "id": 126321127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525881283
    },
    {
        "content": "<p>Here is tricky new bug: <code>#reduce λ x, x</code>. Maybe we should try to detect <code>information reduce result</code> on top</p>",
        "id": 126508439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526242722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  Same remark about detecting class instance trace (and probably also other kinds of traces?)</p>",
        "id": 126992808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527104103
    },
    {
        "content": "<p>We skip all information messages now.  I kind of liked it that <code>trace_state</code> was colorized, but we can't distinguish it from a class trace.</p>",
        "id": 127021300,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1527155225
    },
    {
        "content": "<p>I have no clue at all if this is possible: can you show matching parens in the goal. (So if I select one, the other gets some highlighting?)</p>",
        "id": 127073426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527241824
    },
    {
        "content": "<p>It's possible.  But we'd have to implement the highlight code ourselves (it's just an html page with javascript).</p>",
        "id": 127073444,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1527241899
    },
    {
        "content": "<p>Ok, but there is probably some js lib doing this already, right?</p>",
        "id": 127073780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527242450
    },
    {
        "content": "<p>I didn't find anything off-the-shelf after a quick search.  But it shouldn't be too hard.  Listen to mouse move events, if we're over a (, [, or { inside a <code>&lt;pre&gt;</code>, then look for a matching paren and put a <code>&lt;span class='paren-highlighted'&gt;</code> around it, and remove previous <code>.paren-highlighted</code> spans.</p>",
        "id": 127074433,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1527243389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I have vscode-lean github downloaded and hooked up to my VSCode install, but I forget how to compile the extension from source. Could you remind me (and possibly put the instructions on the README)?</p>",
        "id": 127075431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527245339
    },
    {
        "content": "<p>The easiest way is to open the extension in vscode and press <code>F5</code>. This will compile it and start a new vscode window with the development version of the extension.  This is also documented in the README: <a href=\"https://github.com/leanprover/vscode-lean#development\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean#development\">https://github.com/leanprover/vscode-lean#development</a></p>",
        "id": 127075505,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1527245451
    }
]