[
    {
        "content": "<p>Does anyone know why this often happens when using jump-to-definition? (I'm in emacs if it matters.)</p>",
        "id": 127445373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527898848
    },
    {
        "content": "<p>I get the same error.</p>",
        "id": 127445391,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527898888
    },
    {
        "content": "<p>I thought it might be a problem with <code>company-mode</code> but I wasn't able to find anything. Are you also on a Mac?</p>",
        "id": 127445442,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527898950
    },
    {
        "content": "<p>Linux here</p>",
        "id": 127445454,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527898995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> also I think and I remember he didn't have the same error so I thought it might be because of mac. It must be something else</p>",
        "id": 127445516,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527899107
    },
    {
        "content": "<p>Are you well versed in Emacs Lisp?</p>",
        "id": 127445523,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527899120
    },
    {
        "content": "<p>Not especially, but I would try to debug it if the issue is not already understood.</p>",
        "id": 127445624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527899314
    },
    {
        "content": "<p>It's quite irritating</p>",
        "id": 127445625,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527899322
    },
    {
        "content": "<p>it is indeed. I just added print statements in  <code>lean-find-definition</code> in <code>lean-mode</code> but I can't get it to fail now ... :/</p>",
        "id": 127446322,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527900699
    },
    {
        "content": "<p>Do you have:</p>\n<div class=\"codehilite\"><pre><span></span>(global-set-key (kbd &quot;S-SPC&quot;) #&#39;company-complete)\n</pre></div>\n\n\n<p>in your init file? I found a thread on the github repo (<a href=\"https://github.com/company-mode/company-mode/issues/69\" target=\"_blank\" title=\"https://github.com/company-mode/company-mode/issues/69\">https://github.com/company-mode/company-mode/issues/69</a>) that suggests replacing it with:</p>\n<div class=\"codehilite\"><pre><span></span>(define-key company-mode-map (kbd &quot;S-SPC&quot;) #&#39;company-complete)\n</pre></div>\n\n\n<p>It seems to help but the bug has been showing up inconsistently. Can you try it and tell me if it helps?</p>",
        "id": 127446785,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527901518
    },
    {
        "content": "<p>I got <code>Symbol's value as variable is void: company-mode-map</code></p>",
        "id": 127446911,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527901743
    },
    {
        "content": "<p>Is that the right issue?</p>",
        "id": 127446917,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527901747
    },
    {
        "content": "<p>okay, a <code>(require 'company)</code> fixed that</p>",
        "id": 127446984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527901870
    },
    {
        "content": "<p>That's the one that helped me. Do you have <code>(require 'company)</code> before that line?</p>",
        "id": 127446986,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527901871
    },
    {
        "content": "<p>Well, it's working at the moment, but it usually does after restarting emacs :)</p>",
        "id": 127446989,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527901888
    },
    {
        "content": "<p>Oh, it already stopped working</p>",
        "id": 127447104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527902070
    },
    {
        "content": "<p>Darn! I was hoping!</p>",
        "id": 127447116,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527902098
    },
    {
        "content": "<p>In <code>lean-input.el</code>, in <code>lean-find-definition</code>, can you try adding print statements inside the lambda expression? Like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">lean-find-definition</span> <span class=\"p\">()</span>\n  <span class=\"s\">&quot;Jump to definition of thing at point&quot;</span>\n  <span class=\"p\">(</span><span class=\"k\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nv\">lean-get-info-record-at-point</span>\n   <span class=\"p\">(</span><span class=\"nb\">lambda</span> <span class=\"p\">(</span><span class=\"nv\">info-record</span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"nf\">print</span> <span class=\"s\">&quot;begin&quot;</span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"nv\">-if-let</span> <span class=\"p\">(</span><span class=\"nv\">source-record</span> <span class=\"p\">(</span><span class=\"nf\">plist-get</span> <span class=\"nv\">info-record</span> <span class=\"nb\">:source</span><span class=\"p\">))</span>\n         <span class=\"p\">(</span><span class=\"nf\">apply</span> <span class=\"nf\">#&#39;</span><span class=\"nv\">lean-find-definition-cont</span> <span class=\"nv\">source-record</span><span class=\"p\">)</span>\n       <span class=\"p\">(</span><span class=\"nv\">-if-let</span> <span class=\"p\">(</span><span class=\"nv\">id</span> <span class=\"p\">(</span><span class=\"nf\">plist-get</span> <span class=\"nv\">info-record</span> <span class=\"nb\">:full-id</span><span class=\"p\">))</span>\n           <span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"s\">&quot;no source location available for %s&quot;</span> <span class=\"nv\">id</span><span class=\"p\">)</span>\n         <span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"s\">&quot;unknown thing at point&quot;</span><span class=\"p\">)))</span>\n     <span class=\"p\">(</span><span class=\"nf\">print</span> <span class=\"s\">&quot;end&quot;</span><span class=\"p\">))))</span>\n</pre></div>",
        "id": 127447977,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527903711
    },
    {
        "content": "<p>Well... I tried adding those and it's working again.<br>\nDid editing the <code>.el</code> file cause emacs to reload the mode automatically?</p>",
        "id": 127448179,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527904101
    },
    {
        "content": "<p>I don't know. I wonder if the printing introduces a delay. Let's try removing the print statements</p>",
        "id": 127448391,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527904555
    },
    {
        "content": "<p>Unfortunately I finished proving the thing I was trying to prove</p>",
        "id": 127448441,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527904615
    },
    {
        "content": "<p>I guess we'll never know</p>",
        "id": 127448556,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527904812
    },
    {
        "content": "<p>This is a known issue (to me :) ) where go-to-definition doesn't work while the goal display is open</p>",
        "id": 127456608,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1527923314
    },
    {
        "content": "<p>That's very good to know! Is this on the emacs side or on the Lean side?</p>",
        "id": 127462600,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527938180
    },
    {
        "content": "<p>That requests are interrupted by unrelated requests is an issue with the Lean server. But lean-mode could try to work around that by not sending a goal request directly after a find definition request.</p>",
        "id": 127510537,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1528049349
    },
    {
        "content": "<p>Do you think if we set a timer for masking requests for half a second after find definition that might be good enough?</p>",
        "id": 127511362,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528051358
    },
    {
        "content": "<p>It should be sufficient to suppress the next execution of <code>lean-show-goal--handler</code> after <code>lean-find-definition</code> has run, probably?</p>",
        "id": 127511592,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1528051893
    },
    {
        "content": "<p>That seems to be enough. Do you want a PR for it?</p>",
        "id": 127514811,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528059018
    },
    {
        "content": "<p>Sure, thanks</p>",
        "id": 127514912,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1528059288
    },
    {
        "content": "<p>Done</p>",
        "id": 127515061,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528059604
    }
]