[
    {
        "content": "<p>A particularly weird error message from this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"n\">sigma.reflect</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sigma.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">hβ</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"n\">sigma.reflect₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"c1\">-- error on the second α</span>\n  <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">hγ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">sigma.reflect</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"bp\">@</span><span class=\"n\">sigma.reflect</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hγ</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>gives the punchline</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">α</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 286150553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655253079
    },
    {
        "content": "<p>A smaller mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">reflected</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 286197839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655292138
    },
    {
        "content": "<p>why is there no reflected instances that are universe polymorphic?</p>",
        "id": 286200044,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655293530
    },
    {
        "content": "<p>No idea</p>",
        "id": 286200124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655293574
    },
    {
        "content": "<p>I think the limitation is in the elaborator</p>",
        "id": 286208795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655298425
    },
    {
        "content": "<p><code> `(@id.{37}) </code> works, but not <code> `(@id.{u}) </code></p>",
        "id": 286208828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655298443
    },
    {
        "content": "<p>I don't think expr quotations can have variables at all (universe variables are just a particularly common special case)</p>",
        "id": 286217641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655302455
    },
    {
        "content": "<p>Ah indeed, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">reflected</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">γ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(regarding the non-variable case)</p>",
        "id": 286218270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655302705
    },
    {
        "content": "<p>So it looks look like <code>by apply_instance</code> is inventing an illegal instance on the spot</p>",
        "id": 286218287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655302717
    },
    {
        "content": "<p>This solves my original puzzle:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"n\">sigma.reflect₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">hγ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">sigma.reflect</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">sigma.reflect</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">γ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hγ</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 286218604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655302864
    },
    {
        "content": "<p>Is it possible to write meta code along the lines of the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">reflect_univ</span> <span class=\"o\">:</span> <span class=\"n\">level</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 286218811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655302953
    },
    {
        "content": "<p>I think you could do something with type classes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">class</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">reflected_univ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lvl</span> <span class=\"o\">:</span> <span class=\"n\">level</span><span class=\"o\">)</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">reflect_univ</span> <span class=\"o\">[</span><span class=\"n\">reflected_univ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">level</span> <span class=\"o\">:=</span> <span class=\"n\">reflected_univ.lvl</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"n\">reflect_univ.zero</span> <span class=\"o\">:</span> <span class=\"n\">reflected_univ.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">level.zero</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[instance]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">reflect_univ.succ</span> <span class=\"o\">[</span><span class=\"n\">reflected_univ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">reflected_univ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">level.succ</span> <span class=\"n\">reflect_univ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}⟩</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">reflect_univ.</span><span class=\"o\">{</span><span class=\"mi\">20</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">to_string</span>\n</code></pre></div>",
        "id": 286219497,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1655303252
    },
    {
        "content": "<p>Ah nice. I guess the remaining question is whether there's a nice way to provide a <code>reflected (foo.{u})</code> instance in a generalized way</p>",
        "id": 286223896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655304986
    },
    {
        "content": "<p>I suppose that should be easy to do with a tactic</p>",
        "id": 286223944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655305003
    },
    {
        "content": "<p>Filed a bug report for the original issue at <a href=\"https://github.com/leanprover-community/lean/issues/731\">https://github.com/leanprover-community/lean/issues/731</a>, so that I can reference it in workarounds</p>",
        "id": 286329210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655372734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Term.20has.20type.201/near/286200044\">said</a>:</p>\n<blockquote>\n<p>why is there no reflected instances that are universe polymorphic?</p>\n</blockquote>\n<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib/pull/14766\">#14766</a> using <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s idea above</p>",
        "id": 286341550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655380418
    },
    {
        "content": "<p>Ugh, this doesn't actually work very well where I wanted to use it; while you can now happily declare these <code>has_reflect</code> instances, lean gets immediately stuck when it needs to synthesize things like <code>reflected _ (α → β)</code>  when <code>α</code> and <code>β</code> live in reflected universes</p>",
        "id": 287644873,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656368329
    }
]