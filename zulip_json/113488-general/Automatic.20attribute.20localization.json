[
    {
        "content": "<p>Would it be possible/desirable to have a tag on <code>ìnstance</code> declarations to make it a <code>def</code> with the <code>instance</code> attribute in the specified locale? Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[locale foo]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">--same as</span>\n\n<span class=\"sd\">/-- Blabla I'm required to write a docstring because this is technically not an instance. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">baz.bar</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">\"attribute [instance] baz.bar\"</span> <span class=\"k\">in</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>Of course, it doesn't have to be restricted to <code>instance</code>, that's just the most obviously useful example. We could make it support any attribute, kind of like <code>derive</code>.</p>",
        "id": 275732727,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647553857
    },
    {
        "content": "<p>I'm working on the instances in <a href=\"https://tqft.net/mathlib/algebra/pointwise\">file#algebra/pointwise</a> and managing the manual attribute declarations is slightly more bookkeeping than I can bear. With added pain because of <code>to_additive</code>.</p>",
        "id": 275732885,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647553929
    },
    {
        "content": "<p>One advantage I see is that declaring instances in locales will more closely resemble declaring instances globally, meaning that it might nudge people into using locales more.</p>",
        "id": 275733126,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647554078
    },
    {
        "content": "<p>I wonder if we can backport the <code>scoped instance</code> feature from Lean 4 to Lean 3. This ties the instance to a particular namespace, and then when you <code>open</code> the namespace it becomes available.</p>",
        "id": 275733480,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647554275
    },
    {
        "content": "<p>I looked into what it would take to support scoped instances in Lean 3, if it's something we wanted. A simplish implementation might be:</p>\n<ul>\n<li>introduce a <code>scoped_instance</code> attribute</li>\n<li>when the <code>scoped_instance</code> attribute is present when defining an instance, prevent the definition command from adding the <code>instance</code> attribute and (not sure how exactly) have it add <code>instance</code> as a local attribute</li>\n<li>modify the <code>namespace</code> and <code>open</code> commands to find definitions with the <code>scoped_instance</code> in the relevant namespace and locally give them the <code>instance</code> attribute.</li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>'s example would then look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kd\">@[scoped_instance]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>Then for mathport, I think this would be translated to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 275922507,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647714054
    },
    {
        "content": "<p>We don't want definitions to be attached to a <em>namespace</em> though. People might want to speak about pointwise operations without opening <code>set</code>, <code>finset</code>, <code>submodule</code>, etc... and reciprocally people might want to work on <code>set</code> without being polluted with the pointwise operations.</p>",
        "id": 275922615,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647714231
    },
    {
        "content": "<p>I forgot to mention something nonobvious -- you can put your instances in, say, the <code>set.extra_instances</code> namespace</p>",
        "id": 275922739,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647714396
    },
    {
        "content": "<p>And then <code>open set.extra_instances</code> to get the scoped instances.</p>",
        "id": 275922752,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647714416
    },
    {
        "content": "<p>Whatever the solution, getting the <code>locale</code> attribute to work on an <code>instance</code> will involve modifying Lean, and I figure it'd be better to backport Lean 4 features to make things easier for mathport.</p>",
        "id": 275922892,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647714594
    },
    {
        "content": "<p>That only addresses the second part of my rebutal. I still don't know how that will make it possible to work with pointwise operations on more complicated objects without opening the namespaces of all simple ones.</p>",
        "id": 275923024,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647714723
    },
    {
        "content": "<p>Doesn't that rebuttal also apply to your original proposal?</p>",
        "id": 275923049,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647714769
    },
    {
        "content": "<p>No, because all instances are still put in one single <code>pointwise</code> locale. Or several if you want. The point is that you have the choice.</p>",
        "id": 275923070,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647714821
    },
    {
        "content": "<p>In general, overloading namespaces with such functionalities means losing in flexibility.</p>",
        "id": 275923126,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647714855
    },
    {
        "content": "<p>Then you better let Leo know that <code>scoped</code> is a bad idea <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 275923133,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647714872
    },
    {
        "content": "<p>Oh yeah my criticism is not much about you backporting <code>scoped</code> than about <code>scoped</code> itself. If <code>scoped</code> wasn't interfering with namespaces but instead let you decide which locale to dump stuff into, I'd be happy!</p>",
        "id": 275923223,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647714986
    },
    {
        "content": "<p>What's preventing you from putting things into the <code>pointwise</code> namespace?</p>",
        "id": 275923234,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647715006
    },
    {
        "content": "<p>You have the freedom to do that.</p>",
        "id": 275923238,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647715014
    },
    {
        "content": "<p>That still mixes up worlds...</p>",
        "id": 275923335,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647715114
    },
    {
        "content": "<p>There's <code>scoped notation</code> too in Lean 4. I'm pretty sure <code>localized</code> will eventually be phased out.</p>",
        "id": 275923429,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647715219
    },
    {
        "content": "<p>We'll probably have <code>open big_operators</code> instead of <code>open_locale big_operators</code> for example.</p>",
        "id": 275923463,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647715284
    },
    {
        "content": "<p>Or maybe <code>open locale.big_operators</code>, who knows.</p>",
        "id": 275923518,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647715331
    },
    {
        "content": "<p>I really liked locales...</p>",
        "id": 275923656,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647715517
    },
    {
        "content": "<p>They were confusing for users. If I import <code>big_operators</code> then of course I want to <code>open_locale big_operators</code>.</p>",
        "id": 275928089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647721866
    },
    {
        "content": "<p>You will have to <code>open big_operators</code> instead. Is that really more user friendly?</p>",
        "id": 275928138,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647721925
    },
    {
        "content": "<p>Yes it is, because the students already know about <code>open</code>.</p>",
        "id": 275928393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647722303
    },
    {
        "content": "<p>If you call the namespace <code>locale.pointwise</code> then you can write <code>open locale.pointwise</code> if you really want to</p>",
        "id": 276127871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647906081
    }
]