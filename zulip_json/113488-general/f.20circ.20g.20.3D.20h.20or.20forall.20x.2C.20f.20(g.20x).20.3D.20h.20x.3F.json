[
    {
        "content": "<p>I am constantly proving that various functions are equal because they are both the unique function with some property. A lot of my proofs naturally prove <code>f circ g = h</code>. However Kenny often writes such goals as <code>forall x, f (g x) = h x</code>. Normally in Lean I would prove <code>f circ g = h</code>  by applying funext and then <code>intro x</code>. However in the kind of mathematics I'm currently doing this is not the way to prove things -- in fact I hardly ever get my hands dirty with explicit terms, I'm just chasing around universal properties.</p>",
        "id": 125544509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438317
    },
    {
        "content": "<p>Kenny set up a structure with things like <code>function.left_inverse g f</code> and <code>function.right_inverse g f</code> and I had assumed these would unravel to <code>g circ f = id</code> etc but even these core functions evaluate to <code>forall x, g (f x) = x</code></p>",
        "id": 125544552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438383
    },
    {
        "content": "<p>The left inverse thing is convenient because that way you can write <code>function.left_inverse g f x</code></p>",
        "id": 125544560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524438465
    },
    {
        "content": "<p>What's a nice convenient way to deduce \"forall x, g (f x) = h x\" from \"g circ f = h\" ? I keep having to enter tactic mode and then rewriting the goal with rw, and usually rw \\l.</p>",
        "id": 125544561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438466
    },
    {
        "content": "<p>Is there a proof of <code>g circ f = h -&gt; forall x, g (f x) = h x</code>?</p>",
        "id": 125544600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438496
    },
    {
        "content": "<p>I am using it all the time</p>",
        "id": 125544601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438499
    },
    {
        "content": "<p>then make it a lemma</p>",
        "id": 125544603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524438525
    },
    {
        "content": "<p>fair do's</p>",
        "id": 125544606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438543
    },
    {
        "content": "<p>what's it called?</p>",
        "id": 125544612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438549
    },
    {
        "content": "<p>it's a bit too specific for my taste, but if you fold it in with one of your definitions I'm sure it will work well</p>",
        "id": 125544615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524438567
    },
    {
        "content": "<p>I think what I'd rather do is to rewrite all the definitions which we have which involve the x</p>",
        "id": 125544618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438590
    },
    {
        "content": "<p>however I am concerned that end users might need the \"explicit\" versions</p>",
        "id": 125544672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438605
    },
    {
        "content": "<p>then have a special constructor for your more user-facing theorems that accepts the explicit version</p>",
        "id": 125544675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524438631
    },
    {
        "content": "<p>I don't understand this</p>",
        "id": 125544677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438645
    },
    {
        "content": "<p>I would make that lemma a biconditional BTW, you will want both directions</p>",
        "id": 125544678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524438656
    },
    {
        "content": "<p>I know that 9 times out of 10 when i'm trying to prove f = g the first thing I do is apply funext</p>",
        "id": 125544679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438658
    },
    {
        "content": "<p>but here it's never true</p>",
        "id": 125544682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438665
    },
    {
        "content": "<p>My initial thought on this is to use functions, you are basically doing category theory lite</p>",
        "id": 125544687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524438697
    },
    {
        "content": "<p>right</p>",
        "id": 125544689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438703
    },
    {
        "content": "<p>I don't care about my actual definition of a localised ring</p>",
        "id": 125544691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438721
    },
    {
        "content": "<p>all I ever use is the universal property</p>",
        "id": 125544730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438727
    },
    {
        "content": "<p>which is a real relief</p>",
        "id": 125544731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438730
    },
    {
        "content": "<p>because the localised ring is a quotient type</p>",
        "id": 125544733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438738
    },
    {
        "content": "<p>and they are awkward to use</p>",
        "id": 125544735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438742
    },
    {
        "content": "<p>So when do you actually need the <code>x</code>?</p>",
        "id": 125544740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524438750
    },
    {
        "content": "<p>no idea</p>",
        "id": 125544741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438761
    },
    {
        "content": "<p>I am not sure I do</p>",
        "id": 125544749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438790
    },
    {
        "content": "<p>At the very least you have some notion of a \"user\" that will use one of the theorems and prove a hypothesis by funext</p>",
        "id": 125544750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524438790
    },
    {
        "content": "<p>which theorems are most likely candidates for this?</p>",
        "id": 125544753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524438815
    },
    {
        "content": "<p>I am not sure I have a clear notion of a user</p>",
        "id": 125544755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438830
    },
    {
        "content": "<p>I think I am the only user at the minute</p>",
        "id": 125544756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438837
    },
    {
        "content": "<p>hence the quotes</p>",
        "id": 125544794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524438844
    },
    {
        "content": "<p>Maybe if Kenny does more exercises in Atiyah-Macdonald he'll become another user</p>",
        "id": 125544799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438856
    },
    {
        "content": "<p>Maybe I'll just rip out all the x's.</p>",
        "id": 125544801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438869
    },
    {
        "content": "<p>or maybe your theorem has a conclusion that is a function equality, and the mythical user wants to congr_fun that equality</p>",
        "id": 125544802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524438869
    },
    {
        "content": "<p>you should identify the most outward-facing of your theorems and make them as pleasant to use as you can</p>",
        "id": 125544810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524438907
    },
    {
        "content": "<p>This exercise (wanting a theory of localization because I have a use for it, but asking Kenny to prove the theorems) has really clarified for me how this whole process of writing a library works.</p>",
        "id": 125545016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524439335
    },
    {
        "content": "<blockquote>\n<p>by applying funext and then <code>intro x</code></p>\n</blockquote>\n<p>Side remark: you can write <code>funext x</code> instead of <code>funext, intro x</code>. Soon you'll even be able to write <code>ext x</code> without thinking about whether you deal with an actual function or any other object for which extensionality makes sense</p>",
        "id": 125558389,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524470234
    }
]