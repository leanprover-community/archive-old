[
    {
        "content": "<p>Does <code>generalize_proofs</code> ever work?</p>",
        "id": 148900772,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543624899
    },
    {
        "content": "<p>I get this error <code>unknown declaration '1'</code></p>",
        "id": 148900782,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543624915
    },
    {
        "content": "<p>What did you write?</p>",
        "id": 148901101,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1543625297
    },
    {
        "content": "<p>I think <code>generalize_proofs</code> is obsolete. I remember <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> saying that <code>h_generalize</code> does the work <code>generalize_proofs</code> was intended to do</p>",
        "id": 148901129,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1543625366
    },
    {
        "content": "<p>something very complicated</p>",
        "id": 148901289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543625530
    },
    {
        "content": "<p>ah, let me try that</p>",
        "id": 148901307,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543625573
    },
    {
        "content": "<p>hmm, I realized I need to also generalize the type that it is being converted to, and that seems tricky</p>",
        "id": 148901538,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543625806
    },
    {
        "content": "<p>I'll just go back to my interim solution</p>",
        "id": 148901543,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543625812
    },
    {
        "content": "<p>Try <code>h_generalize! h : my_var == new_name</code> then you can generalize the type of the new variable</p>",
        "id": 148901761,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1543626037
    },
    {
        "content": "<p>Does changing the definition of <code>collect_proofs_in</code> in <code>tactic.generalize_proofs</code> to this work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">collect_proofs_in</span> <span class=\"o\">:</span>\n  <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"n\">mcond</span> <span class=\"o\">(</span><span class=\"n\">is_prop</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n     <span class=\"n\">first</span> <span class=\"o\">(</span><span class=\"n\">hs</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n       <span class=\"n\">t&#39;</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n       <span class=\"n\">is_def_eq</span> <span class=\"n\">t</span> <span class=\"n\">t&#39;</span><span class=\"o\">,</span>\n       <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n       <span class=\"n\">change</span> <span class=\"err\">$</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">replace</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">none</span><span class=\"o\">),</span>\n       <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span>\n     <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">ns</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">`_</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">[])</span>\n        <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">::</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ns</span><span class=\"o\">)</span>\n        <span class=\"kn\">end</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"n\">do</span> <span class=\"n\">generalize</span> <span class=\"n\">e</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n         <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n         <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">::</span><span class=\"n\">hs</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">)))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"n\">return</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">local_const</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">collect_proofs_in</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">t</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">collect_proofs_in</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>     <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">nh</span><span class=\"o\">,</span> <span class=\"n\">collect_proofs_in</span> <span class=\"n\">f</span> <span class=\"n\">ctx</span> <span class=\"n\">nh</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">collect_proofs_in</span> <span class=\"n\">x</span> <span class=\"n\">ctx</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">nh</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">nh</span> <span class=\"err\">←</span> <span class=\"n\">collect_proofs_in</span> <span class=\"n\">d</span> <span class=\"n\">ctx</span> <span class=\"n\">nh</span><span class=\"o\">,</span>\n    <span class=\"n\">var</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">collect_proofs_in</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">instantiate_var</span> <span class=\"n\">e</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span><span class=\"bp\">::</span><span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">nh</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">nh</span> <span class=\"err\">←</span> <span class=\"n\">collect_proofs_in</span> <span class=\"n\">d</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">),</span>\n  <span class=\"n\">var</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">collect_proofs_in</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">instantiate_var</span> <span class=\"n\">e</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span><span class=\"bp\">::</span><span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">nh</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">elet</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">nh</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">nh</span> <span class=\"err\">←</span> <span class=\"n\">collect_proofs_in</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span> <span class=\"n\">nh</span><span class=\"o\">,</span>\n    <span class=\"n\">nh</span> <span class=\"err\">←</span> <span class=\"n\">collect_proofs_in</span> <span class=\"n\">d</span> <span class=\"n\">ctx</span> <span class=\"n\">nh</span><span class=\"o\">,</span>\n    <span class=\"n\">collect_proofs_in</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">instantiate_var</span> <span class=\"n\">e</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">ctx</span> <span class=\"n\">nh</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">macro</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">nh</span><span class=\"o\">,</span> <span class=\"n\">mfoldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">collect_proofs_in</span> <span class=\"n\">e</span> <span class=\"n\">ctx</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">nh</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>                  <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148902893,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543627641
    },
    {
        "content": "<p>I think the problem is that <code>infer_type</code> fails given a <code>sort</code></p>",
        "id": 148903419,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543628339
    },
    {
        "content": "<p><code>generalize_proofs</code> is not so much obsolete as broken and abandoned</p>",
        "id": 148905988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543633443
    },
    {
        "content": "<p>I think it works as long as there are no binders in the goal</p>",
        "id": 148905991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543633464
    }
]