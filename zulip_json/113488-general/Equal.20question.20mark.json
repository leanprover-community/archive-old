[
    {
        "content": "<p>Hello,<br>\nDoes anyone know what the Lean equivalent of the Coq =? operator (<a href=\"https://coq.inria.fr/library/Coq.Init.Nat.html\">https://coq.inria.fr/library/Coq.Init.Nat.html</a>) is?<br>\nMany thanks.</p>",
        "id": 230836178,
        "sender_full_name": "Phiroc",
        "timestamp": 1616060813
    },
    {
        "content": "<p>Do you mean a <code>bool</code> valued equality operator?</p>",
        "id": 230837154,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616061386
    },
    {
        "content": "<p>You're asking about boolean equality on nats? In Lean we have this <code>decidable</code> typeclass which I think means that we can avoid this definition completely.</p>",
        "id": 230837160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616061391
    },
    {
        "content": "<p>We don't do it that way: <code>=</code> is <code>Prop</code> valued.</p>",
        "id": 230837165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616061397
    },
    {
        "content": "<p>and then as Kevin says :-)</p>",
        "id": 230837175,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616061402
    },
    {
        "content": "<p><code>def nat.beq (m n : ℕ) := if m = n then tt else ff</code> . This compiles because equality on nats is decidable. But why would you need it in Lean? What is it used for in Coq? (I know very little about theorem provers in general, I should say)</p>",
        "id": 230837213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616061433
    },
    {
        "content": "<p>I’ll give you an example from Sofware Foundations in a sec</p>",
        "id": 230837320,
        "sender_full_name": "Phiroc",
        "timestamp": 1616061489
    },
    {
        "content": "<p>Theorem plus_1_neq_0 : ∀ n : nat,<br>\n  (n + 1) =? 0 = false.<br>\nProof.<br>\n  intros n. destruct n as [| n'] eqn:E.</p>\n<p>- reflexivity.<br>\n  - reflexivity. Qed.<br>\nCf. <a href=\"https://softwarefoundations.cis.upenn.edu/lf-current/Basics.html\">https://softwarefoundations.cis.upenn.edu/lf-current/Basics.html</a></p>",
        "id": 230837373,
        "sender_full_name": "Phiroc",
        "timestamp": 1616061536
    },
    {
        "content": "<p>Also, if equality is decidable, it can be implicitly converted to bool (but as said, it's not idiomatic)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n<span class=\"k\">#print</span> <span class=\"n\">b</span> <span class=\"c1\">-- to_bool (2 = 3)</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">b</span> <span class=\"c1\">-- ff</span>\n</code></pre></div>",
        "id": 230837384,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1616061546
    },
    {
        "content": "<p>The example you give just makes me more confused. Why is it not just more sensible to prove <code>n + 1 ≠ 0</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">plus_one_ne_zeto</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm asking \"what is the point of having a boolean equality\" and your response is \"because then we can prove theorems that involve boolean equalities, giving us twice as many theorems\". I was hoping for a better answer in some sense.</p>",
        "id": 230837753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616061726
    },
    {
        "content": "<p>I’m a newbie. I don’t know why they use that operator in the SF book. Let me think about it.</p>",
        "id": 230838385,
        "sender_full_name": "Phiroc",
        "timestamp": 1616062063
    },
    {
        "content": "<p>aah, I see: is the point that after induction you can prove the result with <code>refl</code>? Such proofs are discouraged in Lean because we ran into situations where clever rewrites would do the job more quickly than laboriously reducing complex terms and checking for definitional equality. I think it might be a cultural issue here -- the mathlib community is not really focused on constructivism.</p>",
        "id": 230838407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616062074
    },
    {
        "content": "<p>Although I am only at the beginning of the book, I’ve noticed that the Lean tactics to the SF theorems and exercises are often simpler than those provided by the authors.</p>",
        "id": 230838852,
        "sender_full_name": "Phiroc",
        "timestamp": 1616062295
    },
    {
        "content": "<p>OK if you're not an expert then I will just leave you with the following comment. There is a <em>type</em> called <code>bool</code> with two terms <code>tt</code> and <code>ff</code> in Lean. I don't think I've ever used it. There is also a <em>Universe</em> called <code>Prop</code> which has a much richer structure, but if you believe in the law of the excluded middle and propositional extensionality then <code>Prop</code> and <code>bool</code> biject with each other. This proves that they are interchangeable unless you are a constructivist who does not believe in LEM. In Coq they take constructivism very seriously so perhaps have a prop-valued equality and a bool-valued one too. In mathlib, the biggest Lean development, we do not take constructivism particularly seriously, and the constructivists have the <code>decidable</code> typeclass which is doing the explicit translation between <code>Prop</code> and <code>bool</code> in cases where it can be done, but it's just more convenient when doing nonconstructive stuff to work in <code>Prop</code> because it is a richer environment, being  a universe and not just a type.</p>",
        "id": 230838933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616062327
    },
    {
        "content": "<p>What is « constructivism »?</p>",
        "id": 230839112,
        "sender_full_name": "Phiroc",
        "timestamp": 1616062431
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Intuitionistic_logic\">https://en.wikipedia.org/wiki/Intuitionistic_logic</a></p>",
        "id": 230839454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616062596
    }
]