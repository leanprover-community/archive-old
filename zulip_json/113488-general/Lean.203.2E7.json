[
    {
        "content": "<p>Now that we've finally completed the 3.6 transition, it is time to think about the future.  After the 3.6 release, which focused on breaking the library, I think the 3.7 release should now focus on breaking the C++ code.  We already have enough PRs to make porting mathlib interesting: <a href=\"https://github.com/leanprover-community/lean/milestone/2\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/milestone/2\">https://github.com/leanprover-community/lean/milestone/2</a></p>\n<p>I'm thinking about including the following features:</p>\n<ul>\n<li><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> has been tweaking the congruence lemmas so that simp can rewrite subsingletons: <a href=\"https://github.com/leanprover-community/lean/pull/134\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/134\">https://github.com/leanprover-community/lean/pull/134</a></li>\n<li><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> is currently working on tweaking unification so that <code>(Î» a b, a + b) = (+)</code> is true by reflexivity.  (PR should come in any moment now.)</li>\n<li>I have tweaked the type class resolution a bit to make it faster: <a href=\"https://github.com/leanprover-community/lean/pull/135\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/135\">https://github.com/leanprover-community/lean/pull/135</a></li>\n<li>I have also backported the change from Lean 4 that instance arguments are processed from right to left in type class resolution: <a href=\"https://github.com/leanprover-community/lean/pull/139\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/139\">https://github.com/leanprover-community/lean/pull/139</a></li>\n<li><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> has changed the type class resolution order in the <code>apply</code> tactic: <a href=\"https://github.com/leanprover-community/lean/pull/67\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/67\">https://github.com/leanprover-community/lean/pull/67</a></li>\n</ul>\n<p>There's also various uncontroversial additions to the metaprogramming API by <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>.<br>\nI don't want to merge any changes to the core library this time to keep the mathlib porting effort reasonable.</p>\n<p>(As usual, I'm posting this here because I don't think too many people are closely following the core Lean repo.  This is your chance to complain!)</p>",
        "id": 189796944,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583418779
    },
    {
        "content": "<p>The PR just came in: <a href=\"https://github.com/leanprover-community/lean/pull/141\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/141\">https://github.com/leanprover-community/lean/pull/141</a> <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 189798858,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1583419956
    },
    {
        "content": "<p>When making a PR to leanprover-community/lean, is there currently a way to fetch build artifacts from somewhere?</p>",
        "id": 189814956,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1583428687
    },
    {
        "content": "<p>Btw, you might be interested in something like the <code>trace.import</code> trace class I added to Lean 4 before removing that file altogether: <a href=\"https://github.com/leanprover/lean4/commit/75b2b09c08be9206732bc7a9934c7c18b5f094b2\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/commit/75b2b09c08be9206732bc7a9934c7c18b5f094b2\">https://github.com/leanprover/lean4/commit/75b2b09c08be9206732bc7a9934c7c18b5f094b2</a></p>",
        "id": 189816815,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583429734
    },
    {
        "content": "<p>Also <a href=\"https://github.com/leanprover/lean4/commit/15d11cc48362330f6e90791a2101444798734e21\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/commit/15d11cc48362330f6e90791a2101444798734e21\">https://github.com/leanprover/lean4/commit/15d11cc48362330f6e90791a2101444798734e21</a></p>",
        "id": 189816981,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583429820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/Lean.203.2E7/near/189814956\" title=\"#narrow/stream/113488-general/topic/Lean.203.2E7/near/189814956\">said</a>:</p>\n<blockquote>\n<p>When making a PR to leanprover-community/lean, is there currently a way to fetch build artifacts from somewhere?</p>\n</blockquote>\n<p><code>leanproject get-cache</code>?</p>",
        "id": 189819293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583431268
    },
    {
        "content": "<p>(you'll need to install <code>leanproject</code> from a branch, as it hasn't quite merged yet: <a href=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/188884880\" title=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/188884880\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/188884880</a>)</p>",
        "id": 189819333,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583431310
    },
    {
        "content": "<p>Oh yes, I haven't been following all the development of <code>leanproject</code>, but I'll try that!</p>",
        "id": 189821349,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1583432671
    },
    {
        "content": "<p>It is awesome, and hopefully merged real soon now. :-)</p>",
        "id": 189821804,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583432985
    }
]