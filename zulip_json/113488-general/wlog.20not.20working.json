[
    {
        "content": "<p>So I wanted to PR the following </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">gcd_self_pow</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">gcd_eq_left</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pow_dvd_pow</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and my idea was to put this in <code>data/nat/gcd</code> but in there the <code>wlog</code> doesn't work (specifically it still asks for me to prove the <code>m ≤  n</code> case).  Is there some specific <code>import</code> that will get it working? where I was working I had <code>import number_theory.padics.padic_val</code> which does make it work, but I can't add it to <code>data/nat/gcd</code>  as I think it becomes circular.  I could just change the proof, but I have other things with <code>wlog</code> which give me the same problems so I wanted to see if there is an easy fix.</p>",
        "id": 285673144,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654866664
    },
    {
        "content": "<p>There's the swap_var tactic which is much weaker but can be used wherever</p>",
        "id": 285673500,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1654866878
    },
    {
        "content": "<p>You might need to do this:<br>\n<code>wlog h : n ≤ m using [n m, m n]</code>?</p>",
        "id": 285673604,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654866944
    },
    {
        "content": "<p>You need to tell wlog about the symmetry</p>",
        "id": 285673660,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654866963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/113488-general/topic/wlog.20not.20working/near/285673604\">said</a>:</p>\n<blockquote>\n<p>You might need to do this:<br>\n<code>wlog h : n ≤ m using [n m, m n]</code>?</p>\n</blockquote>\n<p>No, it seems this gives me three goals instead :( (it asks to also prove <code>n ≤ m ∨ m ≤ n</code>)</p>",
        "id": 285673971,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654867118
    },
    {
        "content": "<p>I suspect ultimately that is the issue yes.</p>",
        "id": 285674002,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654867138
    },
    {
        "content": "<p>I suspect in your context you don't have that?</p>",
        "id": 285674065,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654867170
    },
    {
        "content": "<p>Well it seems with the correct imports the proof I have above works. I could just prove it without the wlog but I wanted to see if it was easy to get this one working</p>",
        "id": 285674266,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654867268
    },
    {
        "content": "<p>I don't understand how you don't but there it is.</p>",
        "id": 285674331,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654867305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/113488-general/topic/wlog.20not.20working/near/285673971\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/113488-general/topic/wlog.20not.20working/near/285673604\">said</a>:</p>\n<blockquote>\n<p>You might need to do this:<br>\n<code>wlog h : n ≤ m using [n m, m n]</code>?</p>\n</blockquote>\n<p>No, it seems this gives me three goals instead :( (it asks to also prove <code>n ≤ m ∨ m ≤ n</code>)</p>\n</blockquote>\n<p>The problem isnt the specific 0extra goal it adds, its that it adds goals at all</p>",
        "id": 285674340,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654867311
    },
    {
        "content": "<p>Yeah I never use wlog tbh</p>",
        "id": 285674347,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654867314
    },
    {
        "content": "<p>Cursed tactic</p>",
        "id": 285674362,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1654867322
    },
    {
        "content": "<p>It looks like the actual important import is <code>ring_theory.int.basic</code></p>",
        "id": 285675251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654867700
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.gcd</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_commutative</span> <span class=\"n\">nat</span> <span class=\"n\">nat.gcd</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_associative</span> <span class=\"n\">nat</span> <span class=\"n\">nat.gcd</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">gcd_self_pow</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.gcd_eq_left</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pow_dvd_pow</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works</p>",
        "id": 285675369,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1654867773
    },
    {
        "content": "<p>Which is automatic from the gcd_monoid instance in r.i.b, I guess</p>",
        "id": 285675509,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1654867823
    },
    {
        "content": "<p>Yeah exactly, it needs the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.gcd_monoid\">docs#nat.gcd_monoid</a> instance in that file</p>",
        "id": 285675608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654867869
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_commutative</span> <span class=\"n\">nat</span> <span class=\"n\">nat.gcd</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">nat.gcd_comm</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_associative</span> <span class=\"n\">nat</span> <span class=\"n\">nat.gcd</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">nat.gcd_assoc</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>easiest sorries of the day</p>",
        "id": 285675657,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1654867897
    },
    {
        "content": "<p>I guess we could provide that commutativity instance earlier</p>",
        "id": 285675665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654867904
    },
    {
        "content": "<p>Does it actually need both instances?</p>",
        "id": 285675674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654867911
    },
    {
        "content": "<p>I didn't check</p>",
        "id": 285675688,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1654867918
    },
    {
        "content": "<p>Looks like it does</p>",
        "id": 285675794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654867948
    },
    {
        "content": "<p>I guess it uses <code>ac_refl</code> somewhere</p>",
        "id": 285675810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654867955
    },
    {
        "content": "<p>Yeah</p>",
        "id": 285676011,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1654868046
    },
    {
        "content": "<p>Oh nice that does work. Would adding those instances before the lemma be fine then? We could put the lemma somewhere else, it just seemed that this was the natural place to have it</p>",
        "id": 285676025,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654868055
    },
    {
        "content": "<p>(or just prove it without wlog...)</p>",
        "id": 285676090,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654868087
    },
    {
        "content": "<p>Is this property true in all gcd_monoids?</p>",
        "id": 285676230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654868148
    },
    {
        "content": "<p>Yes, I think it is, stated as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">normalize</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 285676947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654868499
    },
    {
        "content": "<p>I can prove </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">gcd_self_pow</span> <span class=\"o\">[</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">cancel_comm_monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normalized_gcd_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">normalize</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Ill think more about  how to change <code>normalized_gcd_monoid</code> for <code>gcd_monoid</code></p>",
        "id": 285683996,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1654871601
    },
    {
        "content": "<p>I suspect that's all you need to prove</p>",
        "id": 285686214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654872583
    }
]