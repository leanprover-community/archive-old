[
    {
        "content": "<p>Another question I had about recursive functions was under what conditions an expression is definitionally equal to what it expands into, including its recursive call.<br>\nFor example, given this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myfun</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">myfun</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">myfun_check</span> <span class=\"o\">:</span> <span class=\"n\">myfun</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">myfun</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">myfun_check</span> <span class=\"o\">:</span> <span class=\"n\">myfun</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">myfun</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">myfun</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>\n<p>I cannot prove <code>myfun_check</code> using <code>refl</code>, despite the left side expanding into the right side through computation. However, unfolding seems to work for some reason. I didn't realize it was possible for <code>unfold</code> to close a goal when <code>refl </code>doesn't. Is there a reason why <code>refl</code> doesn't work? I tried giving <code>myfun</code> the <code>reducible</code> attribute, but it didn't change anything.</p>",
        "id": 316547201,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671344984
    },
    {
        "content": "<p>If you <code>#print myfun._main._pack</code> you'll see the equation compiler compiles this recursive definition using well-founded recursion, and for some reason the computation rule for well-founded recursion can't be made rfl. (Most recent discussion in <a href=\"#narrow/stream/113488-general/topic/subject.20reduction/near/312227755\">this thread</a>.)</p>",
        "id": 316548047,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671345848
    },
    {
        "content": "<p>I'm still having a bit of difficulty understanding that thread you linked, since I mostly treat the equation compiler as a sort of black box program that rewrites recursion in terms of induction, and have never actually thought about how it worked in practice. I can perhaps take a closer look at thread later, but I guess its understandable that <code>rfl</code> doesn't work for axiomatic reasons.<br>\nI'm fine if this isn't a definitional equality, but is there a way to, for example, expand one level of a recursive function in general, without going into the details behind well-foundedness (which I know little about)? <code>unfold</code> seems to work in this case, but it can be a bit annoying to use, especially, when unfolding something like an operator that is actually a typeclass instance.</p>",
        "id": 316550364,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671348224
    },
    {
        "content": "<p>In general the answer is <code>unfold</code>. If there is a type class or something involved then it can also be a good idea to create your own \"equational lemmas\" phrased in a convenient way, and rewrite with them</p>",
        "id": 316550569,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671348426
    },
    {
        "content": "<p>I guess if <code>unfold</code> works best I'll use that. I guess I was originally confused because I had previously thought that <code>rfl</code> worked by computing both sides of the equation until they equaled the same thing but I guess it's more complicated than that.</p>",
        "id": 316551084,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671348930
    },
    {
        "content": "<p>\"computing\" is a complicated word</p>",
        "id": 316551182,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671349026
    },
    {
        "content": "<p>Yes, it is. My current understanding of computing, when it comes to Lean, is that lambda expressions are evaluated by replacing all instances of the bound variable with the argument, so that <code>(fun x, x + 2) 3</code> is definitionally equal to <code>3 + 2</code>. In addition, whenever Lean encounters a \"recursor\" it evaluates it according to special rules so that <code>(nat.cases_on 3 \"hello\" (λ n, \"world\") : string)</code> reduces to <code>\"world\"</code> despite the fact that <code>nat.cases_on</code> is not defined as a lambda expression.<br>\nHowever, I could see how in really complicated expressions generated by the equation compiler, it could potentially get stuck on a recursor with some variable inside. I don't know if this is why <code>rfl</code> doesn't work on all well-founded recursive functions though.</p>",
        "id": 316552012,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671349760
    },
    {
        "content": "<p>If you do <code>#print prefix myfun</code> then you'll see the equation lemmas generated by the definition. Those are what <code>unfold</code> knows. In an ideal world they'd all be proved by <code>rfl</code> but for technical reasons this is not always the case.</p>",
        "id": 316555924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671352793
    }
]