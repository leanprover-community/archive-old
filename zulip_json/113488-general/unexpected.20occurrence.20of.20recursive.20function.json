[
    {
        "content": "<p>The following snippet does not compile: <code>unexpected occurrence of recursive function</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">height</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">height</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>I am very disturbed!</p>",
        "id": 167936797,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560338838
    },
    {
        "content": "<p>Did you mean <code>id height n</code> (which is <code>(id height) n</code>, of course) or <code>id (height n)</code>?  I am not surprised that the former fails.</p>",
        "id": 167937146,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1560339237
    },
    {
        "content": "<p>I mean't the former---why is it expected that it fails?</p>",
        "id": 167937362,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560339413
    },
    {
        "content": "<p>It wouldn't be so great if you instead had <code>id' height n</code> where <code>id' f n := f (n+1)</code></p>",
        "id": 167937423,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560339467
    },
    {
        "content": "<p>So basically you're asking Lean to reduce the right hand side before attempting to determine whether it is syntactically a valid recursive call</p>",
        "id": 167937512,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560339517
    },
    {
        "content": "<p>Sure, but normally when this happens we get <code>could not prove recursive application is decreasing well-founded relation</code> (or something like that I'm just remembering), and instead this time it seems like lean just goes \"nope not even trying this time\".</p>",
        "id": 167937549,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560339554
    },
    {
        "content": "<p>Well because you don't even have an application of <code>height</code></p>",
        "id": 167937564,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560339571
    },
    {
        "content": "<p>aha! ok. Thanks! :)</p>",
        "id": 167937644,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560339633
    },
    {
        "content": "<p>What's the right way to phrase a recursive <code>show</code> function like this one? I get a <code>unexpected occurrence of recursive function</code> error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.buffer.parser.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">tree</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tree</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tree.show</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">leaf</span>   <span class=\"n\">s</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">branch</span> <span class=\"n\">s</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">l.bind</span> <span class=\"n\">tree.show</span>\n</code></pre></div>",
        "id": 232691491,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617241199
    },
    {
        "content": "<p>Or is this an issue of a nested inductive?</p>",
        "id": 232691659,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617241344
    },
    {
        "content": "<p>I guess this is what is preferred:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.buffer.parser.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tree</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tree.show</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">leaf</span>   <span class=\"n\">s</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">branch</span> <span class=\"n\">s</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">hd.show</span> <span class=\"bp\">++</span> <span class=\"n\">tl.show</span>\n</code></pre></div>",
        "id": 232691822,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617241527
    },
    {
        "content": "<p>TPIL says that Lean supports type definitions like the one you originally wrote:<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#mutual-and-nested-inductive-types\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#mutual-and-nested-inductive-types</a></p>\n<p>I don't know what that error means, though.</p>",
        "id": 232695407,
        "sender_full_name": "Greg Price",
        "timestamp": 1617244665
    },
    {
        "content": "<p>I'm going to try lean4 later to see if it fares better here</p>",
        "id": 232696254,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617245513
    },
    {
        "content": "<p>Ah, there's also some perhaps helpful information in the previous history of this topic:<br>\n<a href=\"#narrow/stream/113488-general/topic/unexpected.20occurrence.20of.20recursive.20function/near/167937423\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/unexpected.20occurrence.20of.20recursive.20function/near/167937423</a><br>\n(Which I happened to notice above this just now.)</p>",
        "id": 232700477,
        "sender_full_name": "Greg Price",
        "timestamp": 1617249607
    },
    {
        "content": "<p>In your example, I think the point is then that when Lean is looking at the definition of <code>tree.show</code>, it doesn't know that <code>list.bind</code> is itself a well-behaved recursive function that's compatible with the recursion you're doing here -- so it can't prove the recursion terminates</p>",
        "id": 232700557,
        "sender_full_name": "Greg Price",
        "timestamp": 1617249658
    },
    {
        "content": "<p>So one way you could resolve that is like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.buffer.parser.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">tree</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tree</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">tree.show</span><span class=\"o\">,</span> <span class=\"n\">tree.show_list</span>\n<span class=\"k\">with</span> <span class=\"n\">tree.show</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">leaf</span>   <span class=\"n\">s</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">branch</span> <span class=\"n\">s</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">tree.show_list</span> <span class=\"n\">l</span>\n<span class=\"k\">with</span> <span class=\"n\">tree.show_list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span>  <span class=\"o\">[]</span>      <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tree.show</span> <span class=\"n\">h</span> <span class=\"bp\">++</span> <span class=\"n\">tree.show_list</span> <span class=\"n\">t</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">branch</span> <span class=\"s2\">\"a\"</span> <span class=\"o\">[</span><span class=\"n\">leaf</span> <span class=\"s2\">\"b\"</span><span class=\"o\">,</span> <span class=\"n\">leaf</span> <span class=\"s2\">\"c\"</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"k\">show</span> <span class=\"c1\">-- [\"a\", \"b\", \"c\"]</span>\n</code></pre></div>\n<p>Basically inlining <code>list.bind</code> as part of a mutual recursion.</p>",
        "id": 232701063,
        "sender_full_name": "Greg Price",
        "timestamp": 1617250129
    },
    {
        "content": "<p>You may also be able to do it while using <code>list.bind</code> itself, if you can exhibit an appropriate well-founded relation. I haven't tried that feature of Lean, and I'm not sure if it's possible to apply in this situation.</p>",
        "id": 232701386,
        "sender_full_name": "Greg Price",
        "timestamp": 1617250413
    },
    {
        "content": "<p>Mario has suggested to unravel mutual inductives into a plain inductive, and warns against nested inductives here: <a href=\"#narrow/stream/113488-general/topic/nested.20recursion\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/nested.20recursion</a> . Also, definitions based on wf aren't as compute friendly, so while this doesn't matter so much here, I do want to find a way to not have to rely on a wf proof.</p>",
        "id": 232702398,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617251339
    },
    {
        "content": "<p>Ah, I see:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/nested.20recursion/near/226720037\">said</a>:</p>\n<blockquote>\n<p>nested inductives are not really supported in lean, they are compiled (badly) to inductive types. It's better to roll your own inductive type if you want the right recursion principle</p>\n</blockquote>\n<p>Good to know, then.</p>",
        "id": 232702546,
        "sender_full_name": "Greg Price",
        "timestamp": 1617251494
    },
    {
        "content": "<p>Later in the same thread Mario suggests another solution, if just running this code is what you're interested in and not proving theorems about it: you could use <code>meta def</code> for the function and then write the recursion however you like.</p>",
        "id": 232702612,
        "sender_full_name": "Greg Price",
        "timestamp": 1617251566
    },
    {
        "content": "<p>Right. I followed the second solution regarding unfolding. Since it's a simple type, I think it will be okay to have it unraveled (with an additional <code>nil</code> constructor). For reference, here is my lean4 attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">tree</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tree</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tree.show</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">loop</span> <span class=\"n\">t</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">loop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"n\">s</span>      <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"n\">s</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">xs.bind</span> <span class=\"n\">loop</span>\n\n\n<span class=\"c1\">-- fail to show termination for</span>\n<span class=\"c1\">--   show.loop</span>\n<span class=\"c1\">-- with errors</span>\n<span class=\"c1\">-- structural recursion cannot be used</span>\n\n<span class=\"c1\">-- well founded recursion has not been implemented yet</span>\n</code></pre></div>",
        "id": 232702878,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617251791
    },
    {
        "content": "<p>I think this definition is more likely to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">def</span> <span class=\"n\">tree.show</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"n\">s</span>      <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"n\">s</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">show_list</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tree.show_list</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">«</span><span class=\"k\">show</span><span class=\"bp\">»</span> <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"n\">show_list</span> <span class=\"n\">ts</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but \"mutual structural recursion\" is not implemented yet</p>",
        "id": 232720499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617265264
    }
]