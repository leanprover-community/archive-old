[
    {
        "content": "<p>Is there a tactic that merges identical subgoals?</p>",
        "id": 158608755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550231566
    },
    {
        "content": "<p>I'm doing a <code>blah; blah; rw foobar; blah</code> and because the <code>rw</code> acts on multiple goals it creates a whole bunch of subgoals that are identical.</p>",
        "id": 158608776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550231610
    },
    {
        "content": "<p>no, but that sounds like a good exercise</p>",
        "id": 158609045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550231957
    },
    {
        "content": "<p>For me?</p>",
        "id": 158609053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550231973
    },
    {
        "content": "<p>it's not much harder than <code>assumption</code>, you just unify all the goals together that have matching types</p>",
        "id": 158609238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550232210
    },
    {
        "content": "<p>I'll see what I can do (-;</p>",
        "id": 158609325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550232305
    },
    {
        "content": "<p>This is what I have so far</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">assumption</span>\n\n<span class=\"c1\">-- Copied from all_goals_core</span>\n<span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">merge_goals_core</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>        <span class=\"n\">ac</span> <span class=\"o\">:=</span> <span class=\"n\">set_goals</span> <span class=\"n\">ac</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">::</span> <span class=\"n\">gs</span><span class=\"o\">)</span> <span class=\"n\">ac</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mcond</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">merge_goals_core</span> <span class=\"n\">gs</span> <span class=\"n\">ac</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n    <span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n       <span class=\"bp\">_</span>\n       <span class=\"n\">new_gs</span> <span class=\"err\">←</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n       <span class=\"n\">all_goals_core</span> <span class=\"n\">gs</span> <span class=\"o\">(</span><span class=\"n\">ac</span> <span class=\"bp\">++</span> <span class=\"n\">new_gs</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">merge_goals</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">merge_goals_core</span> <span class=\"n\">gs</span> <span class=\"o\">[]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">merge_goals</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">merge_goals</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</pre></div>",
        "id": 158617924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550241186
    },
    {
        "content": "<p>Can any of the tactic-writing experts give me a hint on how to continue?</p>",
        "id": 158617937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550241207
    },
    {
        "content": "<p>Aah, wait, the <code>mcond</code> is coming to early.</p>",
        "id": 158618026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550241269
    },
    {
        "content": "<p>I should first infer the type of <code>g</code></p>",
        "id": 158618046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550241303
    },
    {
        "content": "<p>And then I want to check if there is a <code>g_old ∈ gs</code> that also has type <code>t ← infer_type g</code></p>",
        "id": 158618087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550241344
    },
    {
        "content": "<p>If so, I want to say that a proof of <code>g_old</code> is also a proof of <code>g</code>.</p>",
        "id": 158618104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550241362
    },
    {
        "content": "<p>How do I do that?</p>",
        "id": 158618149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550241368
    },
    {
        "content": "<p>might <code>tactic.unify</code> help?</p>",
        "id": 158618325,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550241538
    },
    {
        "content": "<p>Ah, interesting, let me try...</p>",
        "id": 158618363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550241586
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">map_unify</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>        <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">unify</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">map_unify</span> <span class=\"n\">xs</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">merge_goals_core</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>        <span class=\"n\">ac</span> <span class=\"o\">:=</span> <span class=\"n\">set_goals</span> <span class=\"n\">ac</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">::</span> <span class=\"n\">gs</span><span class=\"o\">)</span> <span class=\"n\">ac</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">map_unify</span> <span class=\"n\">g</span> <span class=\"n\">ac</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">merge_goals_core</span> <span class=\"n\">gs</span> <span class=\"n\">ac</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">merge_goals_core</span> <span class=\"n\">gs</span> <span class=\"o\">(</span><span class=\"n\">ac</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">merge_goals</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">merge_goals_core</span> <span class=\"n\">gs</span> <span class=\"o\">[]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">merge_goals</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">merge_goals</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span><span class=\"o\">))</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(((</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">merge_goals</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</pre></div>",
        "id": 158620321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550243045
    },
    {
        "content": "<p>I guess <code>map_unify</code> can be inlined. But I don't know which runes to use (-;</p>",
        "id": 158620360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550243078
    },
    {
        "content": "<p>Is the tactic in this thread (from a year ago) still interesting to people? It seems useful to me, and no version of this made it to mathlib right?</p>",
        "id": 194385485,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587084687
    },
    {
        "content": "<p>Looks worthy of a PR to me.</p>",
        "id": 194385592,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587084759
    },
    {
        "content": "<p>What's the intended behaviour here? If I have two <code>nat</code> goals, is this meant to insist they are the same?</p>",
        "id": 194385766,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587084936
    },
    {
        "content": "<p>If I have three goals, a nat, a Type, and a term of that type, will it insist that the Type is nat, and we give the same answer for both term goals??</p>",
        "id": 194385826,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587084990
    },
    {
        "content": "<p>I would say it should be conservative, probably that means only working on subsingletons (or just Props).</p>",
        "id": 194385939,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587085137
    }
]