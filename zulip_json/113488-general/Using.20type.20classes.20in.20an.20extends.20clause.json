[
    {
        "content": "<p>I'm finding that this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"c1\">-- works fine without this</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"sd\">/-- A semigroup is a type with an associative op. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">base_semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op_assoc'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">mul_semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">base_semigroup</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>gives me the weird error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_mul.mul</span> <span class=\"n\">G</span> <span class=\"n\">mul</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">mul</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_mul</span> <span class=\"n\">G</span>\n</code></pre></div>\n\n<p>If I remove <code>old_structure_cmd</code> then it works fine.</p>",
        "id": 212324362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601915492
    },
    {
        "content": "<p>Using <code>(@has_mul.mul G ‹has_mul G›)</code> doesn't help either, it still infers an object of the wrong type</p>",
        "id": 212324645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601915647
    },
    {
        "content": "<p>Pinging this since I'm still curious what's going on here</p>",
        "id": 213268535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602670399
    },
    {
        "content": "<p><code>old_structure_cmd</code> doesn't handle dependencies between parents</p>",
        "id": 213268707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602670535
    },
    {
        "content": "<p>What actually needs to go in that position is <code>(@has_mul.mul G ⟨mul⟩)</code>, but it seems that the elaboration context is not correct to even allow you to write this</p>",
        "id": 213269032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602670755
    },
    {
        "content": "<p>the workaround is to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">mul_semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op_assoc'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mul_semigroup.to_base_semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_semigroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">base_semigroup</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mul_semigroup.op_assoc'</span><span class=\"o\">⟩</span>\n</code></pre></div>\n\n<p>which is what <code>old_structure_cmd</code> does anyway</p>",
        "id": 213269223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602670908
    },
    {
        "content": "<p>Unfortunately that creates repetition where I was trying to eliminate it</p>",
        "id": 213269589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602671174
    },
    {
        "content": "<p>But I suppose it does at least enable the generalization I was hoping for</p>",
        "id": 213269672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602671244
    },
    {
        "content": "<p>For context, my motivation is needing two different group structures on the same type, <code>(⋏)</code> and <code>(*)</code></p>",
        "id": 213270060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602671522
    },
    {
        "content": "<p>can you use a type alias?</p>",
        "id": 213270412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602671737
    },
    {
        "content": "<p>No, because if I use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbreviation</span> <span class=\"n\">mul_semigroup</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">base_semigroup</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>then every user of <code>mul_semigroup</code> has to remember to provide <code>has_mul</code> explicitly.</p>",
        "id": 213278026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602677026
    },
    {
        "content": "<p>(oh, unless you meant to make <code>a ⋏ b = to_wedge a * to_wedge b</code>, in which case yes, that was my backup plan)</p>",
        "id": 213278440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602677285
    }
]