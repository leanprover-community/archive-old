[
    {
        "content": "<p>I can't find <code>nat.pow</code> in <a href=\"https://github.com/leanprover-community/lean/tree/master/src/library/vm\">https://github.com/leanprover-community/lean/tree/master/src/library/vm</a><br>\nDoes it mean that <code>nat.pow</code> has no vm override and we can remove it from core?</p>",
        "id": 198635576,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590385787
    },
    {
        "content": "<p>Related: <a href=\"https://github.com/leanprover-community/lean/issues/128\">lean#128</a></p>",
        "id": 198636024,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590386495
    },
    {
        "content": "<p>In this discussion <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> says that <code>nat.pow</code> has an efficient vm implementation. I can't find it.</p>",
        "id": 198636930,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590387461
    },
    {
        "content": "<p>Is it done by GMP? cf. <a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/src/util/numerics/mpz.h\">https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/src/util/numerics/mpz.h</a></p>",
        "id": 198637529,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590388107
    },
    {
        "content": "<p>Where does C++ code register an override?</p>",
        "id": 198637688,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590388323
    },
    {
        "content": "<p>Maybe <a href=\"https://github.com/leanprover-community/lean/blob/303d31f1f1e4af8727761098b43dbe59d7c67d64/src/library/vm/vm.cpp#L1007\">this function</a>? I'm really just guessing though.</p>",
        "id": 198638048,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590388800
    },
    {
        "content": "<p>Do you see <code>pow</code> in this function? I don't. Let's wait for <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> .</p>",
        "id": 198638211,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590388971
    },
    {
        "content": "<p>This is very fuzzy, but my working theory is that <code>pow</code> is overridden by a method for GMP's <code>mpz</code> type in the first file I linked. Somewhere in the second file, Lean <code>nat</code>s are replaced by <code>mpz</code> in the VM.</p>",
        "id": 198638374,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590389144
    },
    {
        "content": "<p>But yes, let's see what Gabriel says.</p>",
        "id": 198638429,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590389175
    },
    {
        "content": "<p>Many other overrides are explicitly listed <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/vm/vm_nat.cpp#L335\">here</a></p>",
        "id": 198638459,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590389233
    },
    {
        "content": "<p>(probably the answer is \"<code>nat.pow</code> is not here but should be\")</p>",
        "id": 198640562,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590391150
    },
    {
        "content": "<p>There are lots of other useful functions from gmp that could be exposed but aren't</p>",
        "id": 198640653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590391222
    },
    {
        "content": "<p>Yeah, I think I was wrong. <code>nat.pow</code> doesn't seem to be overridden after all?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">code_gen</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"mi\">3</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[compiler.code_gen]  _main 0</span>\n<span class=\"cm\">0: scnstr #3</span>\n<span class=\"cm\">1: scnstr #3</span>\n<span class=\"cm\">2: cfun nat.mul -- I guess this means it&#39;s calling a C++ function</span>\n<span class=\"cm\">3: cfun nat.repr</span>\n<span class=\"cm\">4: ret</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">3</span><span class=\"bp\">^</span><span class=\"mi\">3</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[compiler.code_gen]  _main 0</span>\n<span class=\"cm\">0: scnstr #3</span>\n<span class=\"cm\">1: scnstr #3</span>\n<span class=\"cm\">2: ginvoke nat.pow._main -- this is just using the Lean definition?</span>\n<span class=\"cm\">3: cfun nat.repr</span>\n<span class=\"cm\">4: ret</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 198640806,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590391381
    },
    {
        "content": "<p>From <a href=\"https://gmplib.org/manual/Number-Theoretic-Functions.html#Number-Theoretic-Functions\">https://gmplib.org/manual/Number-Theoretic-Functions.html#Number-Theoretic-Functions</a> I see: gcd, lcm, legendre/jacobi/kronecker symbols, fibonacci and lucas numbers, modular inverses, probabilistic primes (dunno if this is useful without a proof of correctness)</p>",
        "id": 198640828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590391397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/nat.2Epow.20in.20core/near/198636930\">said</a>:</p>\n<blockquote>\n<p>In this discussion <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> says that <code>nat.pow</code> has an efficient vm implementation. I can't find it.</p>\n</blockquote>\n<p>Ooops, no idea what I got that impression from.  Indeed, I can confirm that there is no VM implementation of <code>int.pow</code> or <code>nat.pow</code>.  It's a bit of an odd omission, there are like three different efficient implementations division: right shifts, division by two, a function that returns the pair (division by two, modulo 2).</p>",
        "id": 198641733,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590392203
    },
    {
        "content": "<p>that was me</p>",
        "id": 198642525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590392840
    },
    {
        "content": "<p>Most of my work there was on the lean side, I think there is only basic support from the C++ side</p>",
        "id": 198642607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590392887
    },
    {
        "content": "<p>But I guess this means that nat.pow is implemented in unary wrt the exponent?</p>",
        "id": 198642669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590392929
    },
    {
        "content": "<p>Actually I think the support for bitwise stuff is not great, most importantly because <code>bit0</code> is not a left shift</p>",
        "id": 198642807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590393009
    },
    {
        "content": "<p>Another nice GMP function I wish we had is <code>divexact</code>, which is a partial version of integer division that is only defined when the result is representable (i.e. the denominator divides the numerator)</p>",
        "id": 198643086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590393248
    }
]