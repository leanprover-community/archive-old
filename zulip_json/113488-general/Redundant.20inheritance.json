[
    {
        "content": "<p>Is there a way to let a class by an extension of two class who are extensions of the same class : <br>\nSomething like this :<br>\nA<br>\n| \\<br>\nB C<br>\n|  /<br>\nD</p>",
        "id": 254707199,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1632491566
    },
    {
        "content": "<p>Yes, see for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid/src\">src#monoid</a></p>",
        "id": 254707364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632491641
    },
    {
        "content": "<p>Which uses <code>set_option old_structure_cmd true</code></p>",
        "id": 254707466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632491663
    },
    {
        "content": "<p>If you don't want to use that option, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action_with_zero/src\">src#mul_action_with_zero</a> for an example</p>",
        "id": 254707513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632491682
    },
    {
        "content": "<p>Hmm, i probably misunderstand or misread something because mul_action_with_zero only inherit from one class ?</p>",
        "id": 254708725,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1632492107
    },
    {
        "content": "<p><code>mul_action_with_zero</code> seems to say that the answer is \"copy the fields manually\". The thing about <code>set_option old_structure_cmd true</code> is that it makes structures which can be slow to use for some reason; old structures have been removed from Lean 4.</p>",
        "id": 254708753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632492114
    },
    {
        "content": "<p>Yes, Kevin is correct; without <code>old_structure_cmd</code>, the answer is \"you can't do it automatically\", but also \"you can do it manually by defining <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action_with_zero.to_smul_with_zero\">docs#mul_action_with_zero.to_smul_with_zero</a> yourself\".</p>",
        "id": 254708916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632492168
    },
    {
        "content": "<p><code>mul_action_with_zero</code> \"extends from <code>smul_with_zero</code>\" in the weak sense that it copies the fields manually. If the old structure command setting is set, then you can just extend like you would imagine, and it works.</p>",
        "id": 254708943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632492184
    },
    {
        "content": "<p>I tried the settings but i got a <code>don't know how to synthesize placeholder</code> error</p>",
        "id": 254709364,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1632492341
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 254709576,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1632492403
    },
    {
        "content": "<p>I'm on it</p>",
        "id": 254710249,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1632492635
    },
    {
        "content": "<p>Erfff, sorry, i saw a typo while reducing to a MWE...<br>\nfor my defense, the typo was three line below where the error was showing</p>",
        "id": 254711756,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1632493180
    },
    {
        "content": "<p>Yeah, sometimes I get into the habit of writing <code>#exit</code> directly after the bit where I'm totally confused to see if this helps :-)</p>",
        "id": 254711946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632493236
    },
    {
        "content": "<p>I wonder why the functionality was disabled tho, there was a bad trade-off ?</p>",
        "id": 254711983,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1632493252
    },
    {
        "content": "<p>It can have bad performance</p>",
        "id": 254712205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632493340
    },
    {
        "content": "<p>For many years the mathematicians here just complained about how it was going to disappear, and then around a year ago we started getting bad slowdown when doing some stuff and it finally dawned on us why Leo hated it so much :-)</p>",
        "id": 254712261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632493362
    },
    {
        "content": "<p>Try <code>#print linear_ordered_field</code> if you want to be scared</p>",
        "id": 254712317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632493394
    },
    {
        "content": "<p>Here's a detailed explanation of why Leo wanted to switch: <a href=\"https://github.com/leanprover/lean/wiki/Refactoring-structures\">https://github.com/leanprover/lean/wiki/Refactoring-structures</a></p>",
        "id": 254712389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632493425
    },
    {
        "content": "<p>In that message, \"currently\" := \"old_structure_cmd\", and \"the new proposal\" is the current default.</p>",
        "id": 254712510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632493456
    },
    {
        "content": "<p>Okayyy, i can see the problem<br>\nHope there will be a way one day because the new way of redundant inheritance is... well, it still can be usefull, but it loose usefullness</p>",
        "id": 254712806,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1632493574
    },
    {
        "content": "<p>And is there a way to not add new field ?<br>\nSince i only wanted to unifies two different class.<br>\n(let's say, for exemple, i have the injective class and the surjective class and i want to create the bijective class)<br>\nIt seem useless, but i need it for a software who use lean in backend</p>",
        "id": 254714272,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1632494145
    },
    {
        "content": "<p>Yes, just end the line with a <code>.</code> after <code>extends foo α, bar α β</code>, no <code>:=</code>.</p>",
        "id": 254714747,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1632494300
    },
    {
        "content": "<p>Oh well</p>",
        "id": 254714804,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1632494322
    },
    {
        "content": "<p>(Usually a <code>.</code> to end a statement can be left out, in this case I think you need it to help the parser.)</p>",
        "id": 254714920,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1632494371
    }
]