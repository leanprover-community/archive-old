[
    {
        "content": "<p>Is there some <code>control.functor</code> fu that will give me</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"err\">≃</span> <span class=\"n\">τ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">finset</span> <span class=\"n\">σ</span> <span class=\"err\">≃</span> <span class=\"n\">finset</span> <span class=\"n\">τ</span>\n</code></pre></div>\n\n\n<p>for free?</p>",
        "id": 200153698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591649047
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#equiv_rw_type\">tactic#equiv_rw_type</a></p>",
        "id": 200153888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591649181
    },
    {
        "content": "<p>Does this actually work? From the man page: <code>have e' : option α ≃ option β := by equiv_rw_type e</code></p>",
        "id": 200153985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591649261
    },
    {
        "content": "<p>I should have made the docs clearer; generally <code>equiv_rw_type</code> is \"for internal use only\", and I'd typically imagined users to just use<code>equiv_rw</code>.</p>",
        "id": 200174505,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591666054
    },
    {
        "content": "<p>If it were <code>option</code> here, either of these would work:</p>",
        "id": 200174508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591666065
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">equiv_rw</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"err\">≃</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">σ</span> <span class=\"err\">≃</span> <span class=\"n\">option</span> <span class=\"n\">τ</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">equiv_rw</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"err\">≃</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">σ</span> <span class=\"err\">≃</span> <span class=\"n\">option</span> <span class=\"n\">τ</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">equiv_rw_type</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 200174554,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591666104
    },
    {
        "content": "<p>However it doesn't work out of the box with <code>finset</code>. Let me look into that.</p>",
        "id": 200174561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591666117
    },
    {
        "content": "<p>Nope, I'm not going to have a quick answer for you. :-) I haven't thought about using <code>equiv_rw</code> for quotient types yet.</p>",
        "id": 200174742,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591666357
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200177540,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591670781
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200177629,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591670910
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200177726,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591671065
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200177781,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591671125
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200177783,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591671131
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200177791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591671153
    },
    {
        "content": "<p>Sorry, my solution above was completely dumb. (It was me attempting to \"be a robot\", but I neither managed to avoid using any human knowledge of <code>finset</code> and <code>multiset</code>, or write something sensible.)</p>",
        "id": 200178088,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591671674
    },
    {
        "content": "<p>What you want is just this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">equiv_rw</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">equiv_functor</span> <span class=\"n\">multiset</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">e</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl_to_embedding</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span> <span class=\"bp\">=</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map_refl</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">equiv_functor</span> <span class=\"n\">finset</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">e</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"err\">≃</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">σ</span> <span class=\"err\">≃</span> <span class=\"n\">finset</span> <span class=\"n\">τ</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">equiv_rw</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 200178091,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591671684
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2997\">#2997</a></p>",
        "id": 200179146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591673402
    }
]