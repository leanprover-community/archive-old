[
    {
        "content": "<p>I was thinking of proving some basic properties of the fundamental groupoid functor, such as the fact that it preserves products and coproducts, or the fact that it maps homotopic maps to equivalent (i.e. naturally isomorphic) maps between groupoids.</p>\n<p>To this end, I wrote a proof of the following fact: given an indexed family of topological spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>∈</mo><mi mathvariant=\"script\">I</mi></mrow><annotation encoding=\"application/x-tex\">i\\in \\mathcal{I}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.07382em;\">I</span></span></span></span>, we have</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mrow><mo fence=\"true\">(</mo><msub><mo>∏</mo><mrow><mi>i</mi><mo>∈</mo><mi mathvariant=\"script\">I</mi></mrow></msub><msub><mi>X</mi><mi>i</mi></msub><mo fence=\"true\">)</mo></mrow><mo>=</mo><msub><mo>∏</mo><mrow><mi>i</mi><mo>∈</mo><mi mathvariant=\"script\">I</mi></mrow></msub><mi>π</mi><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\"> \\pi\\left(\\prod_{i\\in\\mathcal{I}} X_i\\right) = \\prod_{i\\in\\mathcal{I}} \\pi X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.35em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathcal mtight\" style=\"margin-right:0.07382em;\">I</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathcal mtight\" style=\"margin-right:0.07382em;\">I</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>Here, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> is the fundamental groupoid functor.</p>\n<p>The code so far is here: <a href=\"https://github.com/prakol16/lean-fundamental-groupoid/tree/master\">https://github.com/prakol16/lean-fundamental-groupoid/tree/master</a>. I'd like to pull request this to mathlib sometime soon,  although I'm not really sure how big changes are supposed to be before a pull request.</p>\n<p>In the meantime, I'd appreciate any comments about the code/style. I'd also like to know what the usual procedure is for going from products indexed over a family <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">I</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{I}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.07382em;\">I</span></span></span></span> to binary products. I'd like to be able to just plug in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">I</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{I} = \\{0, 1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.07382em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>, but maybe it is actually easier to just redo all the lemmas for binary products as well, because I notice in mathlib, some theorems are done separately for binary product types and for pi types.</p>",
        "id": 265530571,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1639987098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"437861\">@Praneeth Kolichala</span> Welcome! Thanks for working on this!</p>\n<blockquote>\n<p>I'm not really sure how big changes are supposed to be before a pull request</p>\n</blockquote>\n<p>We generally advise to start with something small, just to get acquainted with the process. So if you have some standalone piece of &lt; 50 lines, that would make a great first PR. Even after that, most PRs try to stay &lt; 300 lines.<br>\nMore importantly, PRs should follow the \"unix philosophy\" of doing one thing, and doing it well. That makes them so much easier to review.</p>\n<blockquote>\n<p>I'd appreciate any comments about the code/style.</p>\n</blockquote>\n<p>A lot of the code looks pretty good style-wise. Although I noticed some things that don't follow the style guide (<code>e.g., </code>:` should be at the end of the line, not the beginning of the next line).</p>\n<blockquote>\n<p>I'd also like to know what the usual procedure is for going from products indexed over a family <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">I</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{I}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.07382em;\">I</span></span></span></span> to binary products</p>\n</blockquote>\n<p>It is true that mathlib duplicates the API for binary products. Hopefully, you can deduce it from your general API by plugging in <code>I = bool</code> or <code>I = fin 2</code>. But probably there will be some hiccups. Those hiccups are exactly the reason why we duplicate the API: you want to deal with them once, instead of at every place the results are used.</p>",
        "id": 265533074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639988694
    },
    {
        "content": "<p>The main issue with going from indexed products to binary products is that <code>X × Y</code> allows <code>X</code> and <code>Y</code> to be in different universes while <code>Π i : fin 2, Type*</code> doesn't allow this.</p>",
        "id": 265558323,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640004795
    },
    {
        "content": "<p>Probably, we should add a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod_equiv_pi_fin_two\">docs#prod_equiv_pi_fin_two</a> that inserts appropriate <code>ulift</code>s on the right.</p>",
        "id": 265558498,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640004952
    },
    {
        "content": "<p>But you need to go through an explicit <code>equiv</code> or <code>homeomorph</code> anyway.</p>",
        "id": 265558572,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640004988
    }
]