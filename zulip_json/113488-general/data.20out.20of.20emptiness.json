[
    {
        "content": "<p>Look at the following (on current mathlib):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.determinant</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">linear_equiv.of_det_ne_zero</span>\n  <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"bp\">ùïú</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">linear_map.det</span> <span class=\"n\">f</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">M</span> <span class=\"bp\">‚âÉ‚Çó</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">linear_map.det_to_matrix</span> <span class=\"o\">(</span><span class=\"n\">finite_dimensional.fin_basis</span> <span class=\"bp\">ùïú</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goals accomplished</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Lean says that there is no goal left, after an innocent rewrite. Printing the def, it turns out that it uses <code>linear_equiv.refl ùïú M</code> as the definition. My guess is that <code>rw</code> tries <code>refl</code> after a rewrite, and indeed here <code>refl</code> works, but it is not the usual one :-) I am sure I can work this around, but I wanted to share this with you as the unexpected proof of the day.</p>",
        "id": 252183312,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1630938538
    },
    {
        "content": "<p>Are the refl, symm, and trans tags for (linear_)equivs solely to make calc mode for data work properly?</p>",
        "id": 252184542,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630939085
    },
    {
        "content": "<p>Of course <code>refl</code> also works to close the goal, so this proof is not so surpsiring. Note that in contrast to the term <code>rfl</code>, the tactic <code>refl</code> will close any goal of the form <code>R X X</code> with <code>R</code> a reflexive relation such that theorem saying <code>R X X</code> is tagged with <code>@[refl]</code> (and <code>#print linear_equiv.refl</code> shows that it is).</p>",
        "id": 252187611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630940348
    },
    {
        "content": "<p>I think that the <code>symmetry</code> tactic looks for <code>@[symm]</code> tags.</p>",
        "id": 252187723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630940398
    },
    {
        "content": "<p>I don't think <code>rw ... at</code> has any right to touch the main goal, so IMO this is a bug</p>",
        "id": 252215925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630957238
    },
    {
        "content": "<p><code>rw</code> does a weak version of <code>refl</code> at the end.  It does <code>tactic.reflexivity reducible</code>, where <code>refl</code> does <code>tactic.reflexivity semireducible</code>.  I gather that this means <code>rw</code>'s version of <code>refl</code> will only unfold definitions marked <code>reducible</code>, for example abbreviations.</p>",
        "id": 252216774,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630957714
    },
    {
        "content": "<p>I don't think it should do that for <code>rw ... at h</code>, only for <code>rw ...</code> or <code>rw ... at ‚ä¢</code>. I can't think of any situation in which doing it for the former would be anything but surprising and unhelpful</p>",
        "id": 252217220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630957939
    },
    {
        "content": "<p>I just mean to confirm Sebastien's guess (though with the caveat that it's not quite <code>refl</code>).</p>\n<p>If you wanted to make it only do this when it's rewriting the goal, this might be a replacement for <code>rw_core</code> (though I didn't test it)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rw_core</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">rw_rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loca</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">loca</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">loc.wildcard</span> <span class=\"o\">:=</span> <span class=\"n\">loca.try_apply</span> <span class=\"o\">(</span><span class=\"n\">rw_hyp</span> <span class=\"n\">cfg</span> <span class=\"n\">rs.rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rw_goal</span> <span class=\"n\">cfg</span> <span class=\"n\">rs.rules</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">reflexivity</span> <span class=\"n\">reducible</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>            <span class=\"o\">:=</span> <span class=\"n\">loca.apply</span> <span class=\"o\">(</span><span class=\"n\">rw_hyp</span> <span class=\"n\">cfg</span> <span class=\"n\">rs.rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rw_goal</span> <span class=\"n\">cfg</span> <span class=\"n\">rs.rules</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">reflexivity</span> <span class=\"n\">reducible</span><span class=\"o\">))</span>\n<span class=\"kd\">end</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">returnopt</span> <span class=\"n\">rs.end_pos</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">save_info</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 252218055,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630958454
    },
    {
        "content": "<p>I think it'd be nice if we could give it a separate argument for reducibility - I find often that I want to do <code>rw!</code> where it does <code>rw</code> and then a stronger <code>refl</code>. Would everyone be fine with both of these in core lean?</p>",
        "id": 252219373,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630959362
    },
    {
        "content": "<p>I prefer using <code>rw; refl</code> for this</p>",
        "id": 252226914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630965579
    },
    {
        "content": "<p>Is the conclusion that <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> was indeed right ‚Äî that <code>rw</code> does a weak version of <code>refl</code> even when it is called as<code>rw ... at h</code>? Or is it something else that closed the goal?</p>",
        "id": 252316933,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1631025988
    },
    {
        "content": "<p>That was a question. I am really confused now.</p>",
        "id": 252327737,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1631030340
    },
    {
        "content": "<p>You can experiment for yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252328060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631030443
    },
    {
        "content": "<p>That is correct, Martin. <code>rw ... at h</code> does try a weak version of <code>refl</code>.</p>",
        "id": 252329188,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1631030854
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 252329347,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1631030911
    },
    {
        "content": "<p>If you have a multiple choice question I recommend separate messages to avoid reactions being confusing!</p>",
        "id": 252332454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631032161
    }
]