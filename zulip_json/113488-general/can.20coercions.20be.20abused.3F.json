[
    {
        "content": "<p>I've added some questionable coercions to a lean file I am working on:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">le_of_eq</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>They work great in the file that I am working on because it means I can now do things like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span>  <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n</pre></div>\n\n\n<p>Within a bigger proof and I don't have to use any tactics or faff around making sure equalities match up.<br>\nAre there any pitfalls to this approach or is it good practice?</p>",
        "id": 134514643,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1537780186
    },
    {
        "content": "<p>wow</p>",
        "id": 134514725,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537780255
    },
    {
        "content": "<p>In particular I am worried that stuff like <code>has_coe (a = b) (b = a)</code> will cause a loop of doom in the elaborator.</p>",
        "id": 134514812,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1537780411
    },
    {
        "content": "<p>it will</p>",
        "id": 134514910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537780510
    },
    {
        "content": "<p>you will probably get a timeout coercing <code>a = b</code> to <code>a = c</code></p>",
        "id": 134514920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537780542
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n</pre></div>\n\n\n<p>doesn't loop forever with the above coercion. How can I get the bad behaviour?</p>",
        "id": 134514993,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1537780622
    },
    {
        "content": "<p>hm, not sure in that case. I will downgrade from \"bad\" to \"highly suspicious\"</p>",
        "id": 134515063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537780736
    },
    {
        "content": "<p>I will leave it in and keep coding and see if it explodes anywhere.</p>",
        "id": 134515081,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1537780779
    },
    {
        "content": "<p>seems reasonable</p>",
        "id": 134515084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537780791
    },
    {
        "content": "<p>It has saved me a lot of typing.</p>",
        "id": 134515127,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1537780811
    },
    {
        "content": "<p>I can believe it</p>",
        "id": 134515134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537780849
    },
    {
        "content": "<p>Ed, have you tried Simon's mono tactic, from <a href=\"https://github.com/leanprover-community/mathlib-nursery/blob/master/src/tactic/monotonicity/interactive.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-nursery/blob/master/src/tactic/monotonicity/interactive.lean\">https://github.com/leanprover-community/mathlib-nursery/blob/master/src/tactic/monotonicity/interactive.lean</a> (see also <a href=\"https://github.com/leanprover-community/mathlib-nursery/blob/master/docs/monotonicity.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-nursery/blob/master/docs/monotonicity.md\">https://github.com/leanprover-community/mathlib-nursery/blob/master/docs/monotonicity.md</a>)</p>",
        "id": 134515368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537781213
    },
    {
        "content": "<p>That's a nice tactic. I am now thinking that it is bad practice to use coercions to do reasoning because your code now depends directly on the minutiae of how the elaborator works, which is somewhat opaque and subject to change. Whereas the tactics have well-defined behaviour and can be tuned.<br>\nHowever it is cool that the elaborator was able deal with my coercion abuse nicely. Are there any docs which specify precisely what the elaborator is doing when it looks for coercions?</p>",
        "id": 134515866,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1537781922
    },
    {
        "content": "<p>source code?</p>",
        "id": 134515882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537781969
    }
]