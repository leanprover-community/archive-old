[
    {
        "content": "<p>I'm getting \"deterministic timeout\" on a definition, but only when the variables are declared within the definition itself. When variables are declared under the <code>variables</code> keyword beforehand, all is good. Below is the best <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I could come up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.smooth_manifold_with_corners</span>\n<span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.algebra.lie_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.units</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">manifold</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">units</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">charted_space</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"n\">open_embedding_coe.singleton_charted_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">chart_at_apply</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">chart_at</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">chart_at_source</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">source</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"bp\">𝕜</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">smooth_manifold_with_corners</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span>\n<span class=\"n\">open_embedding_coe.singleton_smooth_manifold_with_corners</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">lie_group</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">units</span>\n\n<span class=\"c1\">-- deterministic timeout:</span>\n<span class=\"c1\">-- example {𝕜 : Type*} [nontrivially_normed_field 𝕜]</span>\n<span class=\"c1\">--   {M : Type*} [normed_add_comm_group M] [complete_space M] [normed_space 𝕜 M]</span>\n<span class=\"c1\">--  : lie_group 𝓘(𝕜, M →L[𝕜] M) (M →L[𝕜] M)ˣ := sorry</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">lie_group</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 292230532,
        "sender_full_name": "Winston Yin",
        "timestamp": 1659757139
    },
    {
        "content": "<p>It seems the issue is something to do with universes, this works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n <span class=\"o\">:</span> <span class=\"n\">lie_group</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 292230642,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659757300
    },
    {
        "content": "<p>On a different note, would it be worth it to register an instance that can otherwise be synthesised, in order to speed up the synthesis?</p>",
        "id": 292230698,
        "sender_full_name": "Winston Yin",
        "timestamp": 1659757352
    },
    {
        "content": "<p>I can't speak for this particular area, but yes there are instances of typeclass short circuits in mathlib already (normally with a comment saying so), so if its a decent speed up I'd say go for it</p>",
        "id": 292231088,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659757959
    }
]