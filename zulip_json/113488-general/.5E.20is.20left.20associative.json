[
    {
        "content": "<p>Is that normal? <code>#eval 2^3^2</code> gives 64. I don't know any other language where this is the case. I just tried python, pari, sage and they all give me 2^(3^2)=512.</p>",
        "id": 123659529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520955875
    },
    {
        "content": "<p>Wikipedia page on associativity <a href=\"https://en.wikipedia.org/wiki/Operator_associativity\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Operator_associativity\">https://en.wikipedia.org/wiki/Operator_associativity</a> explicitly mentions <code>^</code> as being essentially a canonical example of a right associative operator. This is a very bizarre implementation decision. Whatever reason is there for it? <code>(a^b)^c</code> is just <code>a^(b*c)</code> but <code>a^(b^c)</code> cannot be written in any simpler way and is hence the natural choice. Should I file an issue? Is this just an oversight? Should I just fix it and submit a PR?</p>",
        "id": 123670890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520973030
    },
    {
        "content": "<p>I might be at fault for that issue. As far as I know, I was the first one to commit code for the exponential operator and I think I didn't put much thought into its associativity. It's worth filing an issue. It's also easy to fix so they might be happy if you file a PR that they just have to merge</p>",
        "id": 123670972,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520973210
    },
    {
        "content": "<p>We're talking init/data/nat/basic.lean, copyright 2014 Floris van Doora and Leo de Moura</p>",
        "id": 123671027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520973279
    },
    {
        "content": "<p>i think this falls under the nitpicking issues will not be tolerated clause</p>",
        "id": 123671157,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520973488
    },
    {
        "content": "<p>:/ but i agree ideally it should be right associative</p>",
        "id": 123671166,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520973513
    },
    {
        "content": "<p>:/</p>",
        "id": 123671419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520973843
    },
    {
        "content": "<p>It's not a nitpicking issue, it's a nitpicking PR!</p>",
        "id": 123671428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520973856
    },
    {
        "content": "<p>If it breaks anything, the thing it breaks deserves to be broken!</p>",
        "id": 123671439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520973885
    },
    {
        "content": "<blockquote>\n<p>We're talking init/data/nat/basic.lean, copyright 2014 Floris van Doora and Leo de Moura</p>\n</blockquote>\n<p>I initially put it in a <code>pow</code> file. They probably merged it with basic and dropped my name</p>",
        "id": 123671737,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520974258
    },
    {
        "content": "<p>Wasn't there a discussion that this should be generalized to a typeclass anyway? If someone PRs those changes, they'll get a \"looks good to me\" from me.</p>",
        "id": 123672684,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520975666
    },
    {
        "content": "<p>that type class exists in <code>mathlib</code>. It would be great indeed to move it to core. That would remove the operator clash</p>",
        "id": 123673194,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520976395
    },
    {
        "content": "<p>Alternatively, do a PR that removes the notation :P</p>",
        "id": 123673243,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520976505
    },
    {
        "content": "<p>Isn't it used in core?</p>",
        "id": 123673328,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520976655
    },
    {
        "content": "<p>I see that bitvec uses it</p>",
        "id": 123673342,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520976707
    },
    {
        "content": "<p>Is that something that should be moved to <code>mathlib</code>?</p>",
        "id": 123673469,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520976892
    },
    {
        "content": "<p>Well so far I have cloned lean, changed <code>infix `^` := pow</code> to <code>infixr `^` := pow</code>, recompiled, and found that <code>#print notation ^</code> still reports <code>_ `^`:80 _:80 := nat.pow #1 #0</code></p>",
        "id": 123673796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520977461
    },
    {
        "content": "<p>I could have made a mistake I guess.</p>",
        "id": 123673800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520977483
    },
    {
        "content": "<p>Ok so I did it again and the same thing happened. Changing line 204 of <code>library/init/data/nat/basic.lean</code> from <code>infix `^` = pow</code> to <code>`infixr </code>^<code> = pow</code> and then compiling lean and feeding a test file into it directly with <code>./lean ~/test.lean</code> still gives me left associativity. Aah well.</p>",
        "id": 123674953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520979581
    },
    {
        "content": "<p>PS It's needed as a map <code>G x Z -&gt; G</code> (G a group, Z the integers), as a map <code>M x N -&gt; M</code> (M a multiplicative monoid, N the naturals) etc. Is a typeclass the best solution? I think Mario explained all this once to me on gitter but I doubt I'll ever find it :-/</p>",
        "id": 123675029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520979699
    },
    {
        "content": "<p>Your modification is correct, I think you aren't compiling something</p>",
        "id": 123675077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520979735
    },
    {
        "content": "<p>I'm just cut and pasting from the generic build instructions like a moron</p>",
        "id": 123675099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520979810
    },
    {
        "content": "<p>I surely don't have to use git in any way?</p>",
        "id": 123675109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520979840
    },
    {
        "content": "<p>I am just cloning, editing the file, and then making</p>",
        "id": 123675151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520979853
    },
    {
        "content": "<p>I've done it three times now so I suspect that it's not me failing to edit the file or failing to run the correct binary, I think now that it's more likely either that the generic build instructions are somehow clobbering my edits or that there's something else I'm missing. I've tried defining a new right associative operator to mean nat.pow and it works fine. It's just <code>^</code> that is still misbehaving</p>",
        "id": 123675216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520979972
    }
]