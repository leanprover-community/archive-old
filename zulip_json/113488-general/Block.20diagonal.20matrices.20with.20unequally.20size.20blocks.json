[
    {
        "content": "<p>We currently have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.block_diagonal\">docs#matrix.block_diagonal</a>, which produces rectangular matrices <code>matrix (m × o) (n × o) α</code> consisting of a diagonal of equally-sized <code>matrix m n</code> blocks.</p>\n<p>I'm finding myself wanting a depedently-typed version <code>matrix (Σ i, m i) (Σ i, n i) α</code> so that I can define the jordan canonical form, and have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">o</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">o</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">o</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">block_diagonal</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">k'</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k'</span> <span class=\"k\">then</span> <span class=\"n\">M</span> <span class=\"n\">k</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">n</span> <span class=\"n\">h.symm</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Should this <code>Σ</code> version replace the <code>×</code> version (assuming I can fix all the uses)? If not, what should it be called?</p>",
        "id": 233352161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617727456
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7068\">#7068</a> adds this under the primed name.</p>",
        "id": 233375227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617737439
    }
]