[
    {
        "content": "<p>I was writing some random universal property code</p>",
        "id": 125627176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586565
    },
    {
        "content": "<p>and I got the good old \"maximum class-instance resolution depth has been reached\" error</p>",
        "id": 125627183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586578
    },
    {
        "content": "<p>and we all know what that means</p>",
        "id": 125627184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586583
    },
    {
        "content": "<p>so I restarted Lean</p>",
        "id": 125627185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586586
    },
    {
        "content": "<p>and I got the error again.</p>",
        "id": 125627186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586590
    },
    {
        "content": "<p><em>sigh</em></p>",
        "id": 125627188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586593
    },
    {
        "content": "<p>so I guess I know what that means</p>",
        "id": 125627192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586610
    },
    {
        "content": "<p>and I decided I'd made some sort of error with my types</p>",
        "id": 125627194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586623
    },
    {
        "content": "<p>so I carefully wrote down the types of everything in my statement</p>",
        "id": 125627201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586632
    },
    {
        "content": "<p>and managed to make sure that everything really had the type I thought it would have</p>",
        "id": 125627202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586641
    },
    {
        "content": "<p>and I restarted Lean</p>",
        "id": 125627203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586643
    },
    {
        "content": "<p>and I got the error again.</p>",
        "id": 125627207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586648
    },
    {
        "content": "<p><em>sigh</em></p>",
        "id": 125627208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586651
    },
    {
        "content": "<p>The error in its Lean 3.4 form says</p>",
        "id": 125627212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586661
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>maximum class-instance resolution depth has been reached (the limit can be increased by setting option &#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option &#39;trace.class_instances&#39;)\n</pre></div>",
        "id": 125627217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586674
    },
    {
        "content": "<p>so I figured that it was about time I read the error properly</p>",
        "id": 125627263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586693
    },
    {
        "content": "<p>and I realised it was hard for me to increase the max_depth</p>",
        "id": 125627272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586712
    },
    {
        "content": "<p>because I didn't know what it currently was</p>",
        "id": 125627275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586717
    },
    {
        "content": "<p>so I looked at the trace</p>",
        "id": 125627285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586727
    },
    {
        "content": "<p>and it was really long</p>",
        "id": 125627288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586734
    },
    {
        "content": "<p>and complicated</p>",
        "id": 125627290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586736
    },
    {
        "content": "<p>and I spent some time trying to understand it</p>",
        "id": 125627294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586743
    },
    {
        "content": "<p>and in total spent over half an hour on this issue</p>",
        "id": 125627301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586754
    },
    {
        "content": "<p>before it occurred to me</p>",
        "id": 125627302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586759
    },
    {
        "content": "<p>that actually</p>",
        "id": 125627304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586761
    },
    {
        "content": "<p>maybe</p>",
        "id": 125627307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586764
    },
    {
        "content": "<p>the maximum class-instance resolution depth <em>had</em> been reached!</p>",
        "id": 125627313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586777
    },
    {
        "content": "<p>So I wrote <code>set_option class.instance_max_depth 100</code></p>",
        "id": 125627325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586792
    },
    {
        "content": "<p>and the error went away!</p>",
        "id": 125627326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586798
    },
    {
        "content": "<p>lol</p>",
        "id": 125627387,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524586816
    },
    {
        "content": "<p>So I came to the conclusion</p>",
        "id": 125627390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586823
    },
    {
        "content": "<p>that either my code is really really cool and I am using type class resolution like a pro now</p>",
        "id": 125627397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586835
    },
    {
        "content": "<p>or</p>",
        "id": 125627398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586836
    },
    {
        "content": "<p>maybe my code is really really bad</p>",
        "id": 125627399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586840
    },
    {
        "content": "<p>and anyone who needs to change the default setting of the max class-instance resolution might want to take a look at what they're doing and how they're doing it.</p>",
        "id": 125627428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586889
    },
    {
        "content": "<p>And one thing that occured to me was that I might be being sloppy with the difference between proofs and data</p>",
        "id": 125627491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586965
    },
    {
        "content": "<p>but this might not be relevant, I'm not sure.</p>",
        "id": 125627503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586993
    },
    {
        "content": "<p>Here's a structure:</p>",
        "id": 125627506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524586996
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Here is the way KMB wants to package all these things together.</span>\n<span class=\"kn\">structure</span> <span class=\"n\">is_unique_R_alg_hom</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">sα</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sβ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">sα</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">sβ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">R_alg_hom</span> <span class=\"o\">:</span> <span class=\"n\">sβ</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">sα</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_unique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">sβ</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">sα</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125627513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587005
    },
    {
        "content": "<p>You make an instance of that structure by giving two proofs.</p>",
        "id": 125627516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587026
    },
    {
        "content": "<p>But the structure turns out to be a Type.</p>",
        "id": 125627567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587067
    },
    {
        "content": "<p>I could have rewritten this as <code>is_unique_R_alg_hom blah := proof1 and proof2</code></p>",
        "id": 125627576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587098
    },
    {
        "content": "<p>and then it would be a Prop.</p>",
        "id": 125627579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587104
    },
    {
        "content": "<p>Should I change this, or does it not make a difference to anything?</p>",
        "id": 125627604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587147
    },
    {
        "content": "<p>And is it completely unrelated to the max class-instance resolution?</p>",
        "id": 125627619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587159
    },
    {
        "content": "<p>Oh I seem to just be able to make the structure a Prop anyway</p>",
        "id": 125627672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587195
    },
    {
        "content": "<p>aah, and now I don't need <code>set_option class.instance_max_depth 52</code> (for 52 was the min to make it work)</p>",
        "id": 125627773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587324
    },
    {
        "content": "<p>Probably best to make it a Prop, to avoid issues with not recognizing that two instances of the same thing are equal.</p>",
        "id": 125627776,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524587327
    },
    {
        "content": "<p>because I seem to have forgotten things</p>",
        "id": 125627779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587331
    },
    {
        "content": "<p>Whyever would Lean make a structure whose constructor involved giving two proofs into a type??</p>",
        "id": 125627801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587365
    },
    {
        "content": "<p>Probably also best to make it into a Prop, because then I don't need to change a max depth to 52</p>",
        "id": 125627865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587422
    },
    {
        "content": "<p>no, the error is back</p>",
        "id": 125627989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587598
    },
    {
        "content": "<p>I am still getting used to new lean in VS Code</p>",
        "id": 125627992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587609
    },
    {
        "content": "<p>OK so my question remains</p>",
        "id": 125628001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587632
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">52</span> <span class=\"c1\">-- !!</span>\n<span class=\"c\">/-</span><span class=\"cm\">- universal property of inverting one element and then another -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">away_away_universal_property</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">loc</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">sγ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">sγ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">sγ</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">Hg</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">away</span><span class=\"bp\">.</span><span class=\"n\">extend_map_of_im_unit</span> <span class=\"n\">sγ</span> <span class=\"n\">Hf</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">is_unique_R_alg_hom</span>\n  <span class=\"o\">((</span><span class=\"n\">of_comm_ring</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">of_comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">f</span><span class=\"o\">)))</span>\n  <span class=\"n\">sγ</span>\n  <span class=\"o\">(</span><span class=\"n\">away</span><span class=\"bp\">.</span><span class=\"n\">extend_map_of_im_unit</span> <span class=\"o\">(</span><span class=\"n\">away</span><span class=\"bp\">.</span><span class=\"n\">extend_map_of_im_unit</span> <span class=\"n\">sγ</span> <span class=\"n\">Hf</span><span class=\"o\">)</span> <span class=\"n\">Hg</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125628044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587649
    },
    {
        "content": "<p>Is that first line evidence that I am doing something wrong?</p>",
        "id": 125628048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587656
    },
    {
        "content": "<p>If I <code>set_option trace.class_instances true</code></p>",
        "id": 125628155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587847
    },
    {
        "content": "<p>then I get things like <a href=\"https://gist.github.com/kbuzzard/2a135ef1486fc55c3b4c70ca11cf50b4\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/2a135ef1486fc55c3b4c70ca11cf50b4\">https://gist.github.com/kbuzzard/2a135ef1486fc55c3b4c70ca11cf50b4</a></p>",
        "id": 125628159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587858
    },
    {
        "content": "<p>How deep do you have to go if you try to do type class inference by hand? Maybe it's just a really hard type class inference problem, that requires that depth?</p>",
        "id": 125628161,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524587860
    },
    {
        "content": "<p>I don't think it's hard</p>",
        "id": 125628162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587871
    },
    {
        "content": "<p>I compose two ring homomorphisms</p>",
        "id": 125628205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587886
    },
    {
        "content": "<p>and I want the result to be a ring homomorphism</p>",
        "id": 125628209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587894
    },
    {
        "content": "<p>It's difficult to know where the exact problem is</p>",
        "id": 125628238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587956
    },
    {
        "content": "<p>because when I set trace.class_instances true pretty much everything gets underlined in green</p>",
        "id": 125628251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587978
    },
    {
        "content": "<p>and if I let it be 51</p>",
        "id": 125628255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524587984
    },
    {
        "content": "<p>then the name of the theorem gets underlined in red</p>",
        "id": 125628305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524588006
    },
    {
        "content": "<p>The biggest number I can find in brackets is (14)</p>",
        "id": 125628350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524588106
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances] (14) ?x_314 : discrete_linear_ordered_field R := rat.discrete_linear_ordered_field\n</pre></div>",
        "id": 125628352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524588110
    },
    {
        "content": "<p>the mind boggles</p>",
        "id": 125628356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524588122
    },
    {
        "content": "<p>why is Lean wondering if my ring is a discrete linear ordered field?</p>",
        "id": 125628401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524588150
    },
    {
        "content": "<p>because type class instance search is really dumb,  it's basically searching the graph of all paths that might reach your proof</p>",
        "id": 125631291,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524591959
    },
    {
        "content": "<p>the more definitions and lemmas that you use with nested type class arguments, the bigger you'll need to set the search depth to</p>",
        "id": 125631353,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524592025
    },
    {
        "content": "<p>So are you saying that there is a non-zero chance that I might actually have to set the search depth to 52 and this doesn't just mean that my code is crappy?</p>",
        "id": 125631548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524592235
    },
    {
        "content": "<p>in most cs applications the type class tree search is going to be somewhat shallow</p>",
        "id": 125631768,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524592487
    },
    {
        "content": "<p>I am pushing it</p>",
        "id": 125631782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524592509
    },
    {
        "content": "<p>but I didn't realise I was pushing that hard</p>",
        "id": 125631784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524592515
    },
    {
        "content": "<p>if you think it's going to be super deep, i wouldn't use type class search</p>",
        "id": 125631789,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524592528
    },
    {
        "content": "<p>I didn't think it was going to be super deep</p>",
        "id": 125631794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524592541
    },
    {
        "content": "<p>I am surprised that I need 52</p>",
        "id": 125631798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524592545
    },
    {
        "content": "<p>in the sense that I thought that all I was doing was trying to get Lean to spot that (a) the output of some function is a ring homomorphism and (b) the composite of two ring homomorphisms is a ring homomorphism</p>",
        "id": 125631847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524592575
    },
    {
        "content": "<p>I don't understand how to find out where the pushing is occurring</p>",
        "id": 125631852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524592586
    },
    {
        "content": "<p>I wonder whether you actually need 52, or it's going off in some other unsuccessful part of the search that needs depth 52</p>",
        "id": 125631853,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524592587
    },
    {
        "content": "<p>I don't know how to find out</p>",
        "id": 125631856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524592595
    },
    {
        "content": "<p>Me neither</p>",
        "id": 125631861,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524592603
    },
    {
        "content": "<p>I put the debugging on and am immediately swimming in output</p>",
        "id": 125631863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524592612
    },
    {
        "content": "<p>Maybe have a look at <a href=\"https://github.com/leanprover/mathlib/blob/master/data/real/basic.lean#L74\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/data/real/basic.lean#L74\">https://github.com/leanprover/mathlib/blob/master/data/real/basic.lean#L74</a></p>",
        "id": 125632444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524593344
    },
    {
        "content": "<p>Sometimes you can help the type class resolution algorithm</p>",
        "id": 125632453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524593362
    },
    {
        "content": "<p>By precomputing some shortcut</p>",
        "id": 125632460,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524593375
    },
    {
        "content": "<p>I have no idea if this applies in your case</p>",
        "id": 125632465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524593384
    },
    {
        "content": "<p>Do you have something I can test here myself?</p>",
        "id": 125632645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524593604
    },
    {
        "content": "<p>I have a MWE but it didn't need 52</p>",
        "id": 125633311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524594451
    },
    {
        "content": "<p>:P</p>",
        "id": 125633314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524594454
    },
    {
        "content": "<p>I can point you to a theorem in lean-stacks-project if that's what you mean</p>",
        "id": 125633460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524594635
    },
    {
        "content": "<p>line 138 of tag01HR.lean</p>",
        "id": 125633469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524594649
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-stacks-project\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project\">https://github.com/kbuzzard/lean-stacks-project</a></p>",
        "id": 125633498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524594687
    },
    {
        "content": "<p>wait</p>",
        "id": 125633510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524594714
    },
    {
        "content": "<p>I need to push</p>",
        "id": 125633511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524594717
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-stacks-project/blob/179ff95b6bd8d4998e1a007b2e8942179d9e24a8/src/tag01HR.lean#L138\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project/blob/179ff95b6bd8d4998e1a007b2e8942179d9e24a8/src/tag01HR.lean#L138\">https://github.com/kbuzzard/lean-stacks-project/blob/179ff95b6bd8d4998e1a007b2e8942179d9e24a8/src/tag01HR.lean#L138</a></p>",
        "id": 125633590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524594789
    },
    {
        "content": "<p>Thanks for pointing that out Patrick. I don't know if this applies in my situation because I have no idea what the problem is. I didn't think I was doing anything too weird.</p>",
        "id": 125633753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524594969
    },
    {
        "content": "<p>PS <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I commented everything out from line 171 onwards (I mention this because it's not so easy to spot in VS Code)</p>",
        "id": 125633780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524595028
    },
    {
        "content": "<p>By the way another way to comment everything out after a certain point is <code>#exit</code>, which also causes a notification so it's not so hard to spot</p>",
        "id": 125637889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524600913
    },
    {
        "content": "<p>woohoo</p>",
        "id": 125643878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524608884
    },
    {
        "content": "<p>new record</p>",
        "id": 125643888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524608895
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">definition</span> <span class=\"n\">loc_is_loc_loc</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">R_alg_equiv</span>\n  <span class=\"o\">((</span><span class=\"n\">of_comm_ring</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"o\">(</span><span class=\"n\">of_comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)))</span>\n  <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">of_comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">f</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">of_comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 125643894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524608908
    },
    {
        "content": "<p>proof that <code>R[1/f][1/g] = R[1/fg]</code></p>",
        "id": 125643897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524608920
    },
    {
        "content": "<p><code>set_option class.instance_max_depth 93</code></p>",
        "id": 125643904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524608928
    },
    {
        "content": "<p>:-)</p>",
        "id": 125643905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524608931
    },
    {
        "content": "<p>I don't like the way this is going...</p>",
        "id": 125643910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524608936
    },
    {
        "content": "<p>Here's the proof:</p>",
        "id": 125644005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524609094
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">R_alg_equiv_of_unique_homs</span>\n  <span class=\"o\">(</span><span class=\"n\">away_away_universal_property&#39;</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">of_comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">unit_of_loc_more_left</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"c1\">-- proof that f is aunit in R[1/fg]</span>\n    <span class=\"o\">(</span><span class=\"n\">unit_of_loc_more_right</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"c1\">-- proof that g is a unit in R[1/fg]</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">away_universal_property</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"n\">of_comm_ring</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"o\">(</span><span class=\"n\">of_comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)))</span>\n      <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">of_comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">f</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">tag01HR</span><span class=\"bp\">.</span><span class=\"n\">unitfg</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"c1\">-- proof that fg is a unit in R[1/f][1/g]</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">away_away_universal_property&#39;</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">((</span><span class=\"n\">of_comm_ring</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"o\">(</span><span class=\"n\">of_comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)))</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">of_comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">f</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">tag01HR</span><span class=\"bp\">.</span><span class=\"n\">unitf</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"c1\">-- proof that f is a unit in R[1/f][1/g]</span>\n    <span class=\"o\">(</span><span class=\"n\">tag01HR</span><span class=\"bp\">.</span><span class=\"n\">unitg</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"c1\">-- proof that g is a unit in R[1/f][1/g]</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">id_unique_R_alg_from_loc</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125644007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524609099
    },
    {
        "content": "<p>All universal properties</p>",
        "id": 125644009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524609105
    }
]