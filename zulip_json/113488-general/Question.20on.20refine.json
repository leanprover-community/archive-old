[
    {
        "content": "<p>I understand that <code>refine</code> doesn't accept to change a goal in something else which is not definitionally equal to it. Yet, if my goal is <code>⊢ ∃ (a : A), P a</code> and I have a hypothesis <code> h : ∃ (a : A), P₀ a</code>, I hoped that saying <code>refine h</code> and then putting appropriate <code>_</code>'s at the right places, it would say something \"OK, for the time being you' ve produced a term of type <code>∃ (a : A), P₀ a</code>: if you cook up a function from <code>∃ (a : A), P₀ a</code> to <code>∃ (a : A), P a</code>, then I'll forgive you\". Is it the case?</p>\n<p>Concretely, in the MWE below, I am sure that my proof is horrible and that it must exist a one-line version of it (actually, if there is a two-line proof using <code>refine</code> I would be even happier, as I still understand this tactic poorly):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">P₀</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P₀</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P₀</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P₀</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">q</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224713070,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612178907
    },
    {
        "content": "<p><code>convert</code> is made for this</p>",
        "id": 224713137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612178970
    },
    {
        "content": "<p>but it will use <code>congr</code> to strip away as much as possible from the two \"equal\" pieces.</p>",
        "id": 224713222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612179015
    },
    {
        "content": "<p>So you will end up with a goal asking you to prove <code>P = P0</code>.</p>",
        "id": 224713249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612179033
    },
    {
        "content": "<p>The problem with <code>convert</code> is that it asks for equalities</p>",
        "id": 224713265,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612179045
    },
    {
        "content": "<p>And I only have <code>P -&gt; P0</code></p>",
        "id": 224713279,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612179058
    },
    {
        "content": "<p>You can restrict how far it strips using <code>convert h using n</code> where <code>n = 1,2,3,4,...</code></p>",
        "id": 224713280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612179059
    },
    {
        "content": "<p>Does <code>convert h using 0</code> help you?</p>",
        "id": 224713305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612179078
    },
    {
        "content": "<p>it has the same effect than <code>convert h</code> (and btw it produces <em>two</em> goals, which I don't understand why)</p>",
        "id": 224713430,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612179173
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">P₀</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P₀</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P₀</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">Exists.imp</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 224713601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612179279
    },
    {
        "content": "<p><code>logic.basic</code> is your friend with goals like this.</p>",
        "id": 224713649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612179311
    },
    {
        "content": "<p>PS <code>library_search</code> finds this proof.</p>",
        "id": 224713753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612179367
    },
    {
        "content": "<p>Your problem is exactly that you want to commute the exists and the imp before you can use <code>apply</code>, and this is a lemma in the library.</p>",
        "id": 224713834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612179428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Question.20on.20refine/near/224713834\">said</a>:</p>\n<blockquote>\n<p>Your problem is exactly that you want to commute the exists and the imp before you can use <code>refine</code>, and this is a lemma in the library.</p>\n</blockquote>\n<p>Yes, indeed!</p>",
        "id": 224713860,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612179451
    },
    {
        "content": "<p>But then, actually, you don't even use a <code>refine</code>! Do you think it was overall a bad idea? I can't really figure out its scope...</p>",
        "id": 224714007,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612179527
    },
    {
        "content": "<p>At any rate, thanks so much for the <code>Exists.imp</code>, it saves me 5 lines!</p>",
        "id": 224714038,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612179545
    },
    {
        "content": "<p><code>refine</code> is just \"exact with holes\".</p>",
        "id": 224714073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612179580
    },
    {
        "content": "<p>And you basically use when one of the holes wouldn't be a short proof but a long one? Because you can write <code>exact h a b</code> if <code>h a b</code> is a term which finishes the goal... you are saying that if to produce this term you need 10 lines, you prefer to have a new goal asking for this term?</p>",
        "id": 224714155,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612179623
    },
    {
        "content": "<p>so you need the function giving the complete proof of your goal, except that you don't have some of the inputs, so you use <code>_</code> and come back to them later.</p>",
        "id": 224714163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612179627
    },
    {
        "content": "<p><code>refine</code> is a really powerful tactic. I often use it instead of <code>apply</code> now, because it makes me fill in the right number of underscores. Yes, the problem is precisely when one or more of the holes isn't just some easy term you can fill in, but something which takes a ten line tactic proof. It's perfect in cases where this tactic proof needs things like <code>rw</code> which are problematic when there is a lot of junk around (e.g. you don't want to rewrite all of the <code>a</code>'s, or you are rewriting under a binder etc).</p>",
        "id": 224714664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612180050
    },
    {
        "content": "<p>In your original post, you seem to be describing something like the <code>suffices</code> tactic?</p>",
        "id": 224714795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612180134
    },
    {
        "content": "<p>In theory you could use <code>refine _ h</code> for the example in the original post, but lean doesn't like underscores in function position. You can do <code>revert h</code> to do roughly the same thing</p>",
        "id": 224714974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612180276
    },
    {
        "content": "<p>that said this usually isn't the kind of move that makes progress, unless you are specifially trying to <code>apply Exists.imp</code> or something along those lines</p>",
        "id": 224715065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612180338
    },
    {
        "content": "<p>I think the \"natural\" proof is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">P₀</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P₀</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P₀</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"n\">q</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224715171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612180435
    },
    {
        "content": "<p>(this is not the golfed version; as Kevin showed this can be compressed to just <code>(h q).imp H</code>)</p>",
        "id": 224715253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612180480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Question.20on.20refine/near/224714664\">said</a>:</p>\n<blockquote>\n<p><code>refine</code> is a really powerful tactic. I often use it instead of <code>apply</code> now, because it makes me fill in the right number of underscores. Yes, the problem is precisely when one or more of the holes isn't just some easy term you can fill in, but something which takes a ten line tactic proof. It's perfect in cases where this tactic proof needs things like <code>rw</code> which are problematic when there is a lot of junk around (e.g. you don't want to rewrite all of the <code>a</code>'s, or you are rewriting under a binder etc).</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 224720065,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612183667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Question.20on.20refine/near/224715171\">said</a>:</p>\n<blockquote>\n<p>I think the \"natural\" proof is something like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">P₀</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P₀</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P₀</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"n\">q</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you very much, this also helps a lot. It is indeed the proof I was looking for (for self-pedagogical reasons, I agree Kevin's is the best proof). But can you explain the underscore in <code>H _ h</code>? And also how to pass from <code>Exists.imp H ( h q )</code> to <code>(h q).imp H</code>? I guess that there must be a general rule explaining what it really means \"to append a dot\", but I ignore it.</p>",
        "id": 224720435,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612183866
    },
    {
        "content": "<p>The general rule is that if <code>x</code> is a term of type Y (or more generally of type <code>Y a b c</code>) then <code>x.foo</code> means <code>Y.foo x</code>. The backwards E notation is notation, it's not the name of the actual type. The type itself is called <code>Exists ...</code>. You can easily tell notation from regular type names, notation is fancy Unicode or LaTeX characters, like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>.</p>",
        "id": 224723425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612185386
    },
    {
        "content": "<p>This dot thing is a secret, it's not written down anywhere as far as I know</p>",
        "id": 224723477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612185416
    },
    {
        "content": "<p>You can replace that last underscore with an <code>a</code>. The reason you don't have to is that when lean sees the type of <code>h</code> it can figure out that the missing input must be <code>a</code>.</p>",
        "id": 224723667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612185501
    },
    {
        "content": "<p>If in your theorem statement you had written <code>H : forall {a : A}, ...</code> then you would not need the underscore at all</p>",
        "id": 224723845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612185589
    },
    {
        "content": "<p><code>H</code> is just a function which expects an input and then a proof involving the input (this is what is known as a dependent function, where the type of an input depends on the terms previously inputted) and if lean can see the later inputs explicitly then it might not need to hear the earlier inputs. This is what these <code>{}</code> brackets are all about.</p>",
        "id": 224724323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612185757
    },
    {
        "content": "<p>I'm almost certain projection notation is described in the reference manual et al</p>",
        "id": 224724592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612185890
    },
    {
        "content": "<p>A proof of Fermat's last theorem is a dependent function because the inputs are a,b,c,n and then proofs that n&gt;2 and a^n+b^n=c^n, ie terms of types which depend on a,b,c,n. The output is a proof that abc=0</p>",
        "id": 224724610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612185901
    },
    {
        "content": "<p>Maybe it's in the reference manual, it would be nice to know so we can point people there</p>",
        "id": 224724698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612185937
    },
    {
        "content": "<p>There are two short paragraphs about \"dot notation\" at <a href=\"https://leanprover.github.io/reference/expressions.html#constructors-projections-and-matching\">https://leanprover.github.io/reference/expressions.html#constructors-projections-and-matching</a></p>",
        "id": 224724923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612186015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Question.20on.20refine/near/224724323\">said</a>:</p>\n<blockquote>\n<p><code>H</code> is just a function which expects an input and then a proof involving the input (this is what is known as a dependent function, where the type of an input depends on the terms previously inputted) and if lean can see the later inputs explicitly then it might not need to hear the earlier inputs. This is what these <code>{}</code> brackets are all about.</p>\n</blockquote>\n<p>Oh, this is a nice explanation of many cabbalistic phenomena!</p>",
        "id": 224726320,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612186685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Question.20on.20refine/near/224724923\">said</a>:</p>\n<blockquote>\n<p>There are two short paragraphs about \"dot notation\" at <a href=\"https://leanprover.github.io/reference/expressions.html#constructors-projections-and-matching\">https://leanprover.github.io/reference/expressions.html#constructors-projections-and-matching</a></p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 224728116,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612187594
    }
]