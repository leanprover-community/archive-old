[
    {
        "content": "<p>Is there a way to ask Lean to list all fully qualified names (I mean including namespaces) defined by a particular file? I'd like to check I didn't messed up with name spaces</p>",
        "id": 129832050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531857758
    },
    {
        "content": "<p>The way I would do it is I would write a command in a <code>run_cmd</code> block and use <code>environment.fold</code> to iterate over all the visible declarations, get their names and use <code>environment.in_current_file</code> to filter out any declaration that comes from outside. It will give you a list of fully qualified names.</p>",
        "id": 129832621,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531858455
    },
    {
        "content": "<p>Oh, and in a tactic, you use  <code>get_env</code> to get the current environment.</p>",
        "id": 129832647,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531858503
    },
    {
        "content": "<p>Thanks Simon, but I'm afraid you assume too much knowledge from me.</p>",
        "id": 129832672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531858541
    },
    {
        "content": "<p>No worries, I like starting with a brief overview but I'm happy to go step by step with you if need be.</p>",
        "id": 129832755,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531858623
    },
    {
        "content": "<p>Let's start with a script that just prints all the visible names (even the ones from other files).</p>",
        "id": 129832776,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531858656
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">,</span> <span class=\"c1\">-- this loops over all the visible declarations and, using `list.cons`, accumulate them in a list</span>\n   <span class=\"k\">let</span> <span class=\"n\">names</span> <span class=\"o\">:=</span> <span class=\"n\">decls</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"o\">,</span> <span class=\"c1\">-- this takes the name of each declaration.</span>\n   <span class=\"n\">trace</span> <span class=\"n\">names</span>\n</pre></div>",
        "id": 129832960,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531858881
    },
    {
        "content": "<p>Does it make sense so far?</p>",
        "id": 129832979,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531858902
    },
    {
        "content": "<p>It makes sense to me but not to Lean</p>",
        "id": 129833046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531858955
    },
    {
        "content": "<p>\"type of sorry macro is not a sort\"</p>",
        "id": 129833049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531858960
    },
    {
        "content": "<p>probably missing import or open</p>",
        "id": 129833051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531858969
    },
    {
        "content": "<p>that makes sense. Try <code>open tactic</code>.</p>",
        "id": 129833133,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531859049
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 129833146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531859076
    },
    {
        "content": "<p><code>deep recursion was detected at 'formatter' (potential solution: increase stack space in your system)</code></p>",
        "id": 129833150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531859080
    },
    {
        "content": "<p>\"deep recursion was detected at 'formatter' (potential solution: increase stack space in your system)\"</p>",
        "id": 129833151,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859080
    },
    {
        "content": "<p><span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 129833163,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859104
    },
    {
        "content": "<p>Maybe we have infinitely nested namespaces</p>",
        "id": 129833183,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859126
    },
    {
        "content": "<p>Interesting. What if you just do <code>trace names.length</code>?</p>",
        "id": 129833186,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531859128
    },
    {
        "content": "<p>22573</p>",
        "id": 129833195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859145
    },
    {
        "content": "<p><span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span></p>",
        "id": 129833201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859157
    },
    {
        "content": "<p>Maybe we should jump to the filtered version</p>",
        "id": 129833250,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859172
    },
    {
        "content": "<p>Good. That will be good enough for now. The problem is that we have a lot of definitions but we don't care about all of them. Let's filter the list and then we can print them all out</p>",
        "id": 129833253,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531859184
    },
    {
        "content": "<p>You're using so few words to express my idea. I'm jealous</p>",
        "id": 129833264,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531859206
    },
    {
        "content": "<p>Do you have an idea on how to do the filtering?</p>",
        "id": 129833280,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531859246
    },
    {
        "content": "<p>Yes: using <code>environment.in_current_file</code></p>",
        "id": 129833300,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859282
    },
    {
        "content": "<p>I'm such a good student <span class=\"emoji emoji-1f62e\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 129833353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859312
    },
    {
        "content": "<p>You get an A! Good job!</p>",
        "id": 129833372,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531859351
    },
    {
        "content": "<p>Once you've done that and defined a new list <code>local_names</code>, you can print them more nicely as <code>local_names.mmap' trace</code></p>",
        "id": 129833461,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531859423
    },
    {
        "content": "<p>\"code generation failed, VM does not have code for 'classical.choice'\". I may have taken a wrong turn...</p>",
        "id": 129833763,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859761
    },
    {
        "content": "<p>I was trying to get rid of that damn <code>environment.in_current_file curr_env has type   name → bool but is expected to have type   name → Prop</code></p>",
        "id": 129833821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859801
    },
    {
        "content": "<p>I'm probably beaten for my preamble</p>",
        "id": 129833849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859845
    },
    {
        "content": "<p>Yeah, in a fresh file Lean complains it wants a decidable instance</p>",
        "id": 129833920,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859914
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 129833964,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859975
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 129833972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531859988
    },
    {
        "content": "<p>I give up, it seems I don't know enough. I tried <code>let noms := names.filter (environment.in_current_file curr_env),</code> but Lean wants a decidable function to prop, not a function to bool</p>",
        "id": 129834267,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531860254
    },
    {
        "content": "<p>Try <code>let noms := names.filter (λ n, curr_env.in_current_file n)</code></p>",
        "id": 129834884,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531861008
    },
    {
        "content": "<p>This works if there is mathematics preamble</p>",
        "id": 129834993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531861126
    },
    {
        "content": "<p>Which preamble?</p>",
        "id": 129835012,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531861157
    },
    {
        "content": "<p><code>local attribute [instance] classical.prop_decidable</code></p>",
        "id": 129835022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531861184
    },
    {
        "content": "<p>that's obviously a bad idea if you are writing code</p>",
        "id": 129835067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531861204
    },
    {
        "content": "<p>You shouldn't need that. Booleans are decidable propositions</p>",
        "id": 129835078,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531861209
    },
    {
        "content": "<p>Of course it means I should define the command in its own file and execute it where I need it</p>",
        "id": 129835119,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531861258
    },
    {
        "content": "<p>If you use <code>classical.prop_decidable</code> try <code>local attribute [instance, priority 0] classical.prop_decidable</code>. This way, if you have computable instances they will be chosen instead.</p>",
        "id": 129835136,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531861270
    },
    {
        "content": "<p>It mostly works, but I see the <code>quot</code> namespace is not filtered out</p>",
        "id": 129835321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531861491
    },
    {
        "content": "<p>For the record, I think I wrote the solution at some point, but was confused by the decidability related error message</p>",
        "id": 129835352,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531861550
    },
    {
        "content": "<p>It would also be nice to filter out all <code>_proof_</code> and <code>_eqn_</code></p>",
        "id": 129835516,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531861764
    },
    {
        "content": "<p>Let's say <code>quot.lift</code>is one of those that aren't filtered out. Try printing <code>`curr_env.in_current_file </code>quot.lift` just to double check.</p>",
        "id": 129835564,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531861806
    },
    {
        "content": "<p>you can use <code>name.is_internal</code> to filter</p>",
        "id": 129835591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531861859
    },
    {
        "content": "<p>it checks that none of the name components have an initial underscore</p>",
        "id": 129835612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531861897
    },
    {
        "content": "<p>Simon, could you try to fix quotes in your last message? I don't know where to put them</p>",
        "id": 129835818,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531862159
    },
    {
        "content": "<p><code>name.is_internal</code> does allow to get rid of underscored stuff</p>",
        "id": 129835860,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531862176
    },
    {
        "content": "<p><code>curr_env.in_current_file `quot.lift</code></p>",
        "id": 129835902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531862258
    },
    {
        "content": "<p>better yet <code>curr_env.in_current_file ``quot.lift</code></p>",
        "id": 129835957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531862287
    },
    {
        "content": "<p>Lean indeed answers <code>tt</code></p>",
        "id": 129836041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531862402
    },
    {
        "content": "<p>To make sure we are on the same page, the current version I have is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">print_names</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">in_current_file</span> <span class=\"bp\">``</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"o\">)),</span>\n   <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">,</span> <span class=\"c1\">-- this loops over all the visible declarations and, using `list.cons`, accumulate them in a list</span>\n   <span class=\"k\">let</span> <span class=\"n\">names</span> <span class=\"o\">:=</span> <span class=\"n\">decls</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"o\">,</span> <span class=\"c1\">-- this takes the name of each declaration.</span>\n   <span class=\"k\">let</span> <span class=\"n\">local_names</span> <span class=\"o\">:=</span> <span class=\"n\">names</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">in_current_file</span> <span class=\"n\">curr_env</span> <span class=\"n\">x</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">not</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">is_internal</span><span class=\"o\">),</span>\n   <span class=\"n\">local_names</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"n\">trace</span>\n</pre></div>",
        "id": 129836105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531862477
    },
    {
        "content": "<p>you can see from the definition of <code>in_current_file</code> that it just checks that <code>decl_olean</code> returns none</p>",
        "id": 129836290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531862719
    },
    {
        "content": "<p>but <code>quot.lift</code> was never defined, it magically comes into being from the <code>init_quotient</code> one-time command</p>",
        "id": 129836307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531862761
    },
    {
        "content": "<p>If you also require that <code>decl_pos</code> is not <code>none</code>, that should get rid of <code>quot</code> stuff</p>",
        "id": 129836558,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531863071
    },
    {
        "content": "<p>in a new file, I get this:</p>\n<div class=\"codehilite\"><pre><span></span>open tactic\n#eval do env ← get_env,\n  env.fold skip $ λ d t,\n  let n := d.to_name in\n  when (env.in_current_file n) (trace n) &gt;&gt; t\n\n-- quot.mk\n-- quot.ind\n-- quot\n-- quot.lift\n-- _main\n</pre></div>",
        "id": 129836623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531863150
    },
    {
        "content": "<p>I guess <code>_main</code> is the tactic I am <code>#eval</code>ing, the rest come from <code>init_quotient</code></p>",
        "id": 129836631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531863182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You may want to use <code>mfold</code> instead of <code>fold</code> for monadic functions</p>",
        "id": 129836707,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531863256
    },
    {
        "content": "<p>there is no <code>env.mfold</code></p>",
        "id": 129836719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531863280
    },
    {
        "content": "<p>If I use <code>(env.decl_pos n).is_none</code> instead, I get</p>\n<div class=\"codehilite\"><pre><span></span>interactive.loc.has_reflect\nprod.has_reflect\nquot.mk\nquot.ind\nbool.has_reflect\nsum.has_reflect\nquot\nquot.lift\noption.has_reflect\npos.has_reflect\n</pre></div>",
        "id": 129836802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531863371
    },
    {
        "content": "<p>Sorry, you're right, I was thinking of expressions</p>",
        "id": 129836820,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531863401
    },
    {
        "content": "<p>I'm not sure why e.g. <code>option.has_reflect</code> has no position, but I can confirm that vscode F12 has no idea where it is</p>",
        "id": 129836848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531863473
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>attribute [derive has_reflect] bool prod sum option interactive.loc pos\n</pre></div>\n\n\n<p>I see</p>",
        "id": 129836903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531863494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I am surprised to discover that there is no <code>add_decl</code> variant or option to set the position of a new declaration</p>",
        "id": 129837051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531863668
    },
    {
        "content": "<p>Yes, well, the Lean 3 meta API is just that incomplete</p>",
        "id": 129837226,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1531863899
    },
    {
        "content": "<p>I know it's cheating, but can't we just filter out <code>quot.*</code> using a plain regex?</p>",
        "id": 129837293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531863974
    },
    {
        "content": "<p>You can, but it would be more accurate to say that it is only those four definitions specifically, not everything in <code>quot</code></p>",
        "id": 129837309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531864036
    },
    {
        "content": "<p>also it wouldn't be a regex exactly</p>",
        "id": 129837318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531864058
    },
    {
        "content": "<p>those four definitions specifically would be even better</p>",
        "id": 129837368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531864089
    },
    {
        "content": "<p>it is easy enough to filter out those four by name</p>",
        "id": 129837376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531864119
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>meta def environment.in_current_file&#39;\n  (env : environment) (n : name) : bool :=\nenv.in_current_file n &amp;&amp; (n ∉ [``quot, ``quot.mk, ``quot.lift, ``quot.ind])\n</pre></div>",
        "id": 129837475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531864279
    },
    {
        "content": "<p>I missed that last message. Thanks!</p>",
        "id": 129840382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531868638
    },
    {
        "content": "<p>I think this command is really useful</p>",
        "id": 129840429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531868660
    },
    {
        "content": "<p>It's much easier than trying to keep track of which namespaces we are in</p>",
        "id": 129840507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531868769
    },
    {
        "content": "<p>Do we have mathlib guidelines about nested namespaces?</p>",
        "id": 129840513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531868785
    },
    {
        "content": "<p>That command would be even nicer if we had versions listing only definitions or only instances or only lemmas/theorems</p>",
        "id": 129840549,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531868871
    },
    {
        "content": "<p>But I need to sleep now</p>",
        "id": 129840589,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531868892
    },
    {
        "content": "<p>We could even have a tree view</p>",
        "id": 129840615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531868975
    },
    {
        "content": "<p>what kind of guidelines do you mean?</p>",
        "id": 129840623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531868995
    },
    {
        "content": "<p>it could be pushing towards flat hierarchy or deep hierarchy</p>",
        "id": 129840680,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869018
    },
    {
        "content": "<p>I would say it's currently more flat than deep</p>",
        "id": 129840688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869051
    },
    {
        "content": "<p>My completion file currently has:</p>\n<div class=\"codehilite\"><pre><span></span>uniform_space.completion_is_complete\nuniform_space.completion_extension\nuniform_space.completion_is_separated\nuniform_space.completion_extension.lifts\nuniform_space.completion_lift.uniform_continuity\nuniform_space.completion_is_uniform_space\nuniform_space.to_completion\nuniform_space.eq_of_separated_of_uniform_continuous\nuniform_space.completion_lift\nuniform_space.completion_lift.unique\nuniform_space.completion_extension.uniform_continuity\nuniform_space.to_completion.dense\nuniform_space.completion_lift.comp\nuniform_space.completion_lift.lifts\nuniform_space.completion_extension.unique\nuniform_space.separated_of_uniform_continuous\nuniform_space.nonempty_completion_iff\nuniform_space.completion\nuniform_space.to_completion.uniform_continuous\n</pre></div>",
        "id": 129840689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869062
    },
    {
        "content": "<p>there are some instances of large scale namespaces like <code>measure_theory</code>, but most definitions are only one namespace deep</p>",
        "id": 129840702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869096
    },
    {
        "content": "<p>everything is inside the uniform_space namespace. But then the completion, completion_lift and completion_extension get their sub-namespace</p>",
        "id": 129840703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869106
    },
    {
        "content": "<p>but this sub-namespacing could be replaced by underscores</p>",
        "id": 129840757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869159
    },
    {
        "content": "<p>I think that makes sense - <code>completion</code> is defined on <code>uniform_space</code>, and theorems about <code>completion</code> should go in a namespace for it</p>",
        "id": 129840758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869159
    },
    {
        "content": "<p>because there is no structure involved, so we can't use the projection trick</p>",
        "id": 129840772,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869185
    },
    {
        "content": "<p>Even so I think that <code>uniform_space.completion</code> is better than <code>completion</code> because of the need for disambiguation here</p>",
        "id": 129840782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869226
    },
    {
        "content": "<p>I could also put (almost) everything from that file in a <code>uniform_space.completion</code> namespace</p>",
        "id": 129840785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869239
    },
    {
        "content": "<p>you could use <code>completion.lift</code> instead of <code>completion_lift</code> for example</p>",
        "id": 129840831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869273
    },
    {
        "content": "<p>I would avoid repeating things from the namespace in the name though</p>",
        "id": 129840857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869319
    },
    {
        "content": "<p><code>lattice.lattice</code> reads redundantly</p>",
        "id": 129840859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869332
    },
    {
        "content": "<p>There are two related but distinct thing. <code>completion_lift</code> is a definition, lifting a function (not necessarily uniformly continuous!) to completion, and a lemma <code>completion_lift.lifts</code>  saying that the lift indeed lifts the map, under uniform continuity assumption</p>",
        "id": 129840914,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869377
    },
    {
        "content": "<p>I might say <code>lift_is_lift</code> for something like that</p>",
        "id": 129840920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869414
    },
    {
        "content": "<p>Deciding and namespaces and names for these two things is exactly the kind of question I have</p>",
        "id": 129840922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869417
    },
    {
        "content": "<p>although depending on what exactly \"lift\" means it might have a more specific name</p>",
        "id": 129840938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869472
    },
    {
        "content": "<p>i.e. if it is something like <code>lift o mk = id</code> (I'm making things up) then I might call it <code>lift_comp_mk</code>, but if it is <code>is_lift lift</code> then I would say <code>is_lift_lift</code> or <code>lift_is_lift</code></p>",
        "id": 129840990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869530
    },
    {
        "content": "<p><a href=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean#L187\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean#L187\">https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean#L187</a></p>",
        "id": 129841003,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869580
    },
    {
        "content": "<p>and its friend <a href=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean#L136\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean#L136\">https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean#L136</a></p>",
        "id": 129841058,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869617
    },
    {
        "content": "<p>I would write that the other way and say <code>lift_to_completion</code></p>",
        "id": 129841063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869629
    },
    {
        "content": "<p>(probably <code>to_completion</code> should be a coercion)</p>",
        "id": 129841075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869648
    },
    {
        "content": "<p>I wouldn't be able to state those lemmas without writing <code>to_completion</code>, even with a coercion, right?</p>",
        "id": 129841138,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869748
    },
    {
        "content": "<p>you can say <code>coe</code></p>",
        "id": 129841151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869790
    },
    {
        "content": "<p>I fear it would obscure the statement. But I could still define the coercion for later use</p>",
        "id": 129841161,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869823
    },
    {
        "content": "<p>Also I don't know if using all these composes in the statement doesn't make your work harder</p>",
        "id": 129841215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869853
    },
    {
        "content": "<p>I know that's how mathematicians like to write it but sometimes it is nicer to just put a point in</p>",
        "id": 129841229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869900
    },
    {
        "content": "<p>Do you mean you would state <code>forall x, ...</code>?</p>",
        "id": 129841231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869903
    },
    {
        "content": "<p>yes</p>",
        "id": 129841252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869934
    },
    {
        "content": "<p>True, I really think about this from a categorical perspective, there are no points at all</p>",
        "id": 129841255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869940
    },
    {
        "content": "<p>Only morphisms</p>",
        "id": 129841258,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869945
    },
    {
        "content": "<p>Certainly <code>completion_extension.lifts</code> should be stated as <code>completion_extension f \\u x = f x</code></p>",
        "id": 129841307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531869969
    },
    {
        "content": "<p>Points would really obscure statements</p>",
        "id": 129841309,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531869971
    },
    {
        "content": "<p>maybe, but none of the work done in this file so far is really categorical in nature</p>",
        "id": 129841334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531870039
    },
    {
        "content": "<p>ok, that one could be clearer with a <code>forall x : a, completion_extension f  x = f x</code></p>",
        "id": 129841335,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531870042
    },
    {
        "content": "<p>What? Everything building <code>completion_lift</code> from <code>completion_extension</code> is purely categorical</p>",
        "id": 129841389,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531870101
    },
    {
        "content": "<p>With proper mathlib help, there would be a single tactic to invoke to build <code>completion_lift</code> from <code>completion_extension</code></p>",
        "id": 129841429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531870184
    },
    {
        "content": "<p>looks like just specializing theorems to me</p>",
        "id": 129841430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531870191
    },
    {
        "content": "<p><code>completion_lift</code> should be called <code>completion.map</code> though</p>",
        "id": 129841486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531870235
    },
    {
        "content": "<p>The composition proof has slightly more than specializing. <code>completion_extension.unique</code> is crucial</p>",
        "id": 129841504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531870269
    },
    {
        "content": "<p>but it is just specializing - <code>completion_lift.unique</code> just applies <code>completion_extension.unique</code></p>",
        "id": 129841554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531870323
    },
    {
        "content": "<p>I'm talking about the proof of <code>completion_lift.comp</code>, not <code>completion_lift.unique</code></p>",
        "id": 129841579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531870371
    },
    {
        "content": "<p>Anyway, I really need to sleep now. But I'll probably use all these suggestions tomorrow (although I should also be doing real work...)</p>",
        "id": 129841594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531870435
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 129841636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531870447
    },
    {
        "content": "<p>Returning to this full names thread since Kevin also had a use case, are we interested to have this in mathlib? The version I currently have here is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">string</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- `run_cmd print_names` print all names defined in the current file.</span>\n<span class=\"cm\">    This is useful when checking namespaces and writing doc -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">print_names</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">names</span> <span class=\"o\">:=</span> <span class=\"n\">decls</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">local_names</span> <span class=\"o\">:=</span> <span class=\"n\">names</span><span class=\"bp\">.</span><span class=\"n\">filter</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">in_current_file&#39;</span> <span class=\"n\">curr_env</span> <span class=\"n\">x</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">not</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">is_internal</span><span class=\"o\">),</span>\n   <span class=\"k\">let</span> <span class=\"n\">sorted_names</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">merge_sort</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">local_names</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">to_string</span><span class=\"o\">),</span>\n   <span class=\"n\">sorted_names</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"n\">trace</span>\n</pre></div>\n\n\n<p>With some argument parsing skill we could make sorting optional, and have an optional prefix filtering.</p>",
        "id": 129957604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532035157
    },
    {
        "content": "<p>I think it should return a <code>list name</code> rather than printing it if you want to make this more widely usable</p>",
        "id": 129957823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532035388
    },
    {
        "content": "<p>why isn't it sorted in declaration order?</p>",
        "id": 129957834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532035414
    },
    {
        "content": "<p>yesterday my main goal was to check namespaces, and alphabetical order was therefore more useful</p>",
        "id": 129957907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532035456
    },
    {
        "content": "<p>it all seems a bit ad hoc</p>",
        "id": 129957910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532035463
    },
    {
        "content": "<p>Alphabetical order has been around for a while</p>",
        "id": 129957920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532035473
    },
    {
        "content": "<p>but I guess you could call it ad hoc</p>",
        "id": 129957926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532035483
    },
    {
        "content": "<p>I'm not even sure it's in declaration order before sorting</p>",
        "id": 129957927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532035488
    },
    {
        "content": "<p>It's not universe-independent</p>",
        "id": 129957933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532035503
    },
    {
        "content": "<p>I think it's the right length for a small program that slices data the way you want</p>",
        "id": 129957940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532035510
    },
    {
        "content": "<p>or even country-independent</p>",
        "id": 129957944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532035512
    },
    {
        "content": "<p>I don't understand what you mean by that length comment</p>",
        "id": 129957971,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532035552
    },
    {
        "content": "<p>there isn't much mathlib can do to make that definition shorter without getting too specific</p>",
        "id": 129958036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532035585
    },
    {
        "content": "<p>Ok, I'll keep it around here then</p>",
        "id": 129958105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532035660
    },
    {
        "content": "<p>If I add that exact tactic to mathlib, then of course your definition becomes very short (just a reference to my definition) but it also becomes less flexible - if you want to print them in a different order or get type information for each definition or something else you will have to start from scratch again (or copy paste the mathlib tactic)</p>",
        "id": 129958195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532035723
    },
    {
        "content": "<p>I still have a question about that small function. I don't want to be rude, or break the etiquette of this fine place, by using words from imperative programming. But I don't really understand how the main l**p works. What does the first line do exactly?</p>",
        "id": 129958219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532035760
    },
    {
        "content": "<p><code>get_env</code>?</p>",
        "id": 129958228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532035780
    },
    {
        "content": "<p>What is <code>get_env</code> returning?</p>",
        "id": 129958229,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532035782
    },
    {
        "content": "<p>a reference to the environment object</p>",
        "id": 129958234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532035794
    },
    {
        "content": "<p>which is the thing that stores all definitions</p>",
        "id": 129958276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532035805
    },
    {
        "content": "<p>what's the point of not having directly the list that the second line creates?</p>",
        "id": 129958351,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532035921
    },
    {
        "content": "<p>hitting F12 only gives meta constant everywhere</p>",
        "id": 129958446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532035998
    },
    {
        "content": "<p>because the environment isn't stored as a list</p>",
        "id": 129958530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532036066
    },
    {
        "content": "<p>I understand that, my question is: how is it more than a list of stuff?</p>",
        "id": 129958551,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532036098
    },
    {
        "content": "<p>for one thing, it should have an index to speed up looking up definitions by name</p>",
        "id": 129958597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532036150
    },
    {
        "content": "<p>Actually I understand nothing about this monad thing. What the difference between the first line and its arcane <code>a &lt;- b</code> syntax and the friendlier looking lines with <code>let a := b</code>?</p>",
        "id": 129958655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532036166
    },
    {
        "content": "<p>so it's closer to a python dictionary than list?</p>",
        "id": 129958675,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532036185
    },
    {
        "content": "<p>Literally, <code>a &lt;- b</code> is syntax for the <code>bind</code> operator, while <code>let a := b</code> is just <code>let</code></p>",
        "id": 129958982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532036449
    },
    {
        "content": "<p>Most operations which have a sequential character or otherwise non-functional behavior have to work inside a monad, and <code>bind</code> puts them together with a notation that is deliberately similar to <code>let a := b</code></p>",
        "id": 129959029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532036511
    },
    {
        "content": "<p>yes, it is basically a dictionary, probably a hash map. In particular, looping over all definitions (which is what you are doing) is one of the least efficient things you can do with it, so it is rather slow</p>",
        "id": 129959114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532036601
    },
    {
        "content": "<p>I'm sorry but I still don't see any difference between: \"I want to call <code>curr_env</code> the thing returned by <code>get_env</code>\" and \"I want to call <code>decls</code> the thing returned by <code>curr_env.fold [] list.cons</code>\"</p>",
        "id": 129959174,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532036668
    },
    {
        "content": "<p>but clearly I cannot switch between <code>&lt;-</code> and <code>let</code></p>",
        "id": 129959182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532036690
    },
    {
        "content": "<p>probably <code>get_env</code> is a bad example since it's basically functional, so consider the following instead:</p>\n<div class=\"codehilite\"><pre><span></span>do a &lt;- random,\n   b &lt;- random,\n   c &lt;- random,\n   return [a, b, c]\n</pre></div>\n\n\n<p>Let's say that <code>random</code> returns a random number. Then this program will probably return three different numbers</p>",
        "id": 129959252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532036800
    },
    {
        "content": "<p>On the other hand, with</p>\n<div class=\"codehilite\"><pre><span></span>let a := random,\n    b := random,\n    c := random in\n[a, b, c]\n</pre></div>\n\n\n<p>there is no implementation of <code>random</code> that will cause three different numbers to be produced</p>",
        "id": 129959271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532036857
    },
    {
        "content": "<p>Patrick do you know all about this monad business?</p>",
        "id": 129959337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532036936
    },
    {
        "content": "<p>All of this <code>&lt;-</code> is sugar for <code>monad.bind</code> etc</p>",
        "id": 129959350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532036956
    },
    {
        "content": "<p>I don't see why you would get the same number with let</p>",
        "id": 129959412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532037018
    },
    {
        "content": "<p>The part of \"programming in Lean\" about the state monad gave me some idea about what was going on here. The <code>&lt;-</code> can change the state of things.</p>",
        "id": 129959413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532037020
    },
    {
        "content": "<p>Kevin, I tried to read that part of PIL several time, but it doesn't stick at all</p>",
        "id": 129959428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532037040
    },
    {
        "content": "<p>but in functional programming you can't change state</p>",
        "id": 129959432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532037043
    },
    {
        "content": "<p>as there is no state</p>",
        "id": 129959435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532037052
    },
    {
        "content": "<p><code>&lt;-</code> can expand to \"...and let x = x + 1 while you're doing this\"</p>",
        "id": 129959448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532037093
    },
    {
        "content": "<p>notice that the second program is definitionally equal to <code>[random, random, random]</code> and <code>(\\lam x, [x, x, x]) random</code></p>",
        "id": 129959454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532037110
    },
    {
        "content": "<p>Sure. But then what happens at execution? Isn't random called three times?</p>",
        "id": 129959537,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532037200
    },
    {
        "content": "<p>with the same inputs maybe</p>",
        "id": 129959543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532037225
    },
    {
        "content": "<p>there is no input</p>",
        "id": 129959583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532037245
    },
    {
        "content": "<p>right</p>",
        "id": 129959587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532037249
    },
    {
        "content": "<p>so the same thing happens three time</p>",
        "id": 129959594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532037280
    },
    {
        "content": "<p>but with <code>&lt;-</code> there are hidden variables</p>",
        "id": 129959603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532037301
    },
    {
        "content": "<p>it's not a contradiction that \"intro x\" can do different things at different points in the middle of a tactic proof</p>",
        "id": 129959626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532037354
    },
    {
        "content": "<p>because the goal might be different</p>",
        "id": 129959627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532037361
    },
    {
        "content": "<p>A very small example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">counter</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">α</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">counter</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">n&#39;</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">count</span> <span class=\"o\">:</span> <span class=\"n\">counter</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">run</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">counter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">run</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n  <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">count</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">count</span><span class=\"o\">,</span>\n  <span class=\"n\">c</span> <span class=\"err\">←</span> <span class=\"n\">count</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- [0, 1, 2]</span>\n</pre></div>",
        "id": 129959724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532037472
    },
    {
        "content": "<p>If I <code>#check</code> instead, it says</p>\n<div class=\"codehilite\"><pre><span></span>run (count &gt;&gt;= λ (a : ℕ), count &gt;&gt;= λ (b : ℕ), count &gt;&gt;= λ (c : ℕ), return [a, b, c]) : list ℕ\n</pre></div>",
        "id": 129959800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532037568
    },
    {
        "content": "<p>I have <em>no idea</em> what's going on in your snippet</p>",
        "id": 129959869,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532037633
    },
    {
        "content": "<p><code>&lt;-</code> is running <code>bind</code> which can change the nat. The nat is a variable which is hidden in the notation but still exists. If you unravel you can see the nat. <code>&gt;&gt;=</code> also means bind</p>",
        "id": 129959873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532037638
    },
    {
        "content": "<p>Start with the first line</p>",
        "id": 129959876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532037653
    },
    {
        "content": "<p><code>counter A</code> is a function from <code>nat</code> to <code>nat x A</code></p>",
        "id": 129959884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532037666
    },
    {
        "content": "<p><code>do</code> puts you into monad mode, and the monad here is <code>counter</code> which is hiding a nat.</p>",
        "id": 129959887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532037672
    },
    {
        "content": "<p>Zulip just told me your snippet was written yesterday. I probably mean it's too late to understand this</p>",
        "id": 129959894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532037702
    },
    {
        "content": "<p>I should really sleep. Since my family left for vacations, I'm drifting towards night. Today (Zulip claims I mean yesterday) I reached the point where I got up too late to have lunch with my colleagues. So I'll try to drift back. But I promise I'll try to understand your code tomorrow, after reading back a bit of PIL. Thank you!</p>",
        "id": 129960051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532037874
    },
    {
        "content": "<p>By the way, that code is roughly analogous to the following C code:</p>\n<div class=\"codehilite\"><pre><span></span>int state = 0;\nint a = state++;\nint b = state++;\nint c = state++;\nreturn [a, b, c]; // &lt;- okay, not really C style...\n</pre></div>",
        "id": 129960242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532038097
    },
    {
        "content": "<blockquote>\n<p>Returning to this full names thread since Kevin also had a use case, are we interested to have this in mathlib? The version I currently have here is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">string</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- `run_cmd print_names` print all names defined in the current file.</span>\n<span class=\"cm\">    This is useful when checking namespaces and writing doc -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">print_names</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">names</span> <span class=\"o\">:=</span> <span class=\"n\">decls</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">local_names</span> <span class=\"o\">:=</span> <span class=\"n\">names</span><span class=\"bp\">.</span><span class=\"n\">filter</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">in_current_file&#39;</span> <span class=\"n\">curr_env</span> <span class=\"n\">x</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">not</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">is_internal</span><span class=\"o\">),</span>\n   <span class=\"k\">let</span> <span class=\"n\">sorted_names</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">merge_sort</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">local_names</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">to_string</span><span class=\"o\">),</span>\n   <span class=\"n\">sorted_names</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"n\">trace</span>\n</pre></div>\n\n\n</blockquote>\n<p>Ooh this was just really handy for me. Faced with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">is_ring_hom</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_subring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">is_ring_hom</span>\n</pre></div>\n\n\n<p>and after 2 minutes of failing to guess what Lean might have called this instance, I ran the code and got it immediately. </p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 130303691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532554481
    },
    {
        "content": "<p>Answers on a postcard</p>",
        "id": 130303706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532554512
    },
    {
        "content": "<p>In this case I think <code>#print instances is_ring_hom</code> will tell you too.</p>",
        "id": 130308592,
        "sender_full_name": "Reid Barton",
        "timestamp": 1532560873
    },
    {
        "content": "<p>Aah! I use <code>#print prefix</code> a fair bit but I don't think I'd internalised <code>#print instances</code></p>",
        "id": 130327524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532590867
    },
    {
        "content": "<p>So we have this <code>print_names</code> command. We can put it in a file, import that file in another file, run the command there, and get our answer in the Lean messages window. How could we get the same information from the command line without modifying the file we want to inspect?</p>",
        "id": 131947719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533981679
    },
    {
        "content": "<p>In Haskell, ghc has the option <code>-e</code> which allows you to provide an expression to evaluate from the command line. Lean does not have that. What I would do is write a bash script to generate a .lean file that imports your <code>print_names</code> definition and the file you want to check, then call Lean on that file.</p>",
        "id": 131958856,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534000643
    },
    {
        "content": "<p>lean has a <code>--run</code> option</p>",
        "id": 131960186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534003142
    },
    {
        "content": "<p>I thought it only ran the <code>main</code> function</p>",
        "id": 131961097,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534004910
    },
    {
        "content": "<p>That's also what the documentation and experiment suggest</p>",
        "id": 131965768,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534014970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> do you confirm there is no way to do what I asked?</p>",
        "id": 131965831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534015115
    },
    {
        "content": "<p>More generally, it would help with documentation if we knew more about Lean's introspection capabilities. For instance, suppose we get hold of some definition of lemma using <code>get_env</code>, is there any way we could get a list of types of objects appearing in the statement or, even better, a list of all lemmas and definitions used in the proof (before it gets erased by proof irrelevance)?</p>",
        "id": 131965902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534015318
    },
    {
        "content": "<blockquote>\n<p>is there any way we could get a list of types of objects appearing in the statement or, even better, a list of all lemmas and definitions used in the proof (before it gets erased by proof irrelevance)?</p>\n</blockquote>\n<p>I believe that is possible. Let me just work something out.</p>",
        "id": 131966166,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534015841
    },
    {
        "content": "<p>Here's what I got. This version lists all the constants (definition, theorem, axiom or constant, actually) used in the <em>statement</em> of the theorem. I have worked out a version I thought would do the same about the proof but I run into weird errors.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">list_constant</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"o\">:=</span>\n<span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"bp\">_</span> <span class=\"n\">cs</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">is_constant</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">const_name</span> <span class=\"err\">∈</span> <span class=\"n\">cs</span>\n  <span class=\"k\">then</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">const_name</span> <span class=\"bp\">::</span> <span class=\"n\">cs</span>\n  <span class=\"k\">else</span> <span class=\"n\">cs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">declaration</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">const_in_def</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">t</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">get_decl</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"c1\">-- let v := v.get,</span>\n   <span class=\"c1\">-- trace v.is_constant,</span>\n   <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">list_constant</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">const_in_def</span> <span class=\"bp\">`</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse_append</span>\n</pre></div>",
        "id": 131966604,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534016784
    },
    {
        "content": "<p>Nice!</p>",
        "id": 131966679,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534016984
    },
    {
        "content": "<p>I think I will play of lot with that function</p>",
        "id": 131966724,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534017006
    },
    {
        "content": "<p>Cool! Please let me know if you manage to get <code>v.get</code> to work. What I think is that the proof tree might be stored nowhere so <code>v.get</code> can only fail. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> may shed some light on that.</p>",
        "id": 131966786,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534017190
    },
    {
        "content": "<p>What error are you getting?  This works just fine for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">list_constant</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"o\">:=</span>\n<span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"bp\">_</span> <span class=\"n\">cs</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">is_constant</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">const_name</span> <span class=\"err\">∈</span> <span class=\"n\">cs</span>\n  <span class=\"k\">then</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">const_name</span> <span class=\"bp\">::</span> <span class=\"n\">cs</span>\n  <span class=\"k\">else</span> <span class=\"n\">cs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">declaration</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">const_in_def</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">t</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">get_decl</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">list_constant</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">list_constant</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">const_in_def</span> <span class=\"bp\">`</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse_append</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">scratch20180811.lean:17:0: information trace output</span>\n<span class=\"cm\">[list.append_assoc,</span>\n<span class=\"cm\"> list.reverse_cons,</span>\n<span class=\"cm\"> list.cons_append,</span>\n<span class=\"cm\"> list.cons,</span>\n<span class=\"cm\"> trivial,</span>\n<span class=\"cm\"> eq_self_iff_true,</span>\n<span class=\"cm\"> propext,</span>\n<span class=\"cm\"> list.append_nil,</span>\n<span class=\"cm\"> list.reverse_nil,</span>\n<span class=\"cm\"> eq.refl,</span>\n<span class=\"cm\"> has_append,</span>\n<span class=\"cm\"> list.nil_append,</span>\n<span class=\"cm\"> congr_arg,</span>\n<span class=\"cm\"> congr,</span>\n<span class=\"cm\"> eq.trans,</span>\n<span class=\"cm\"> id,</span>\n<span class=\"cm\"> true,</span>\n<span class=\"cm\"> list.nil,</span>\n<span class=\"cm\"> eq.mpr,</span>\n<span class=\"cm\"> list.has_append,</span>\n<span class=\"cm\"> has_append.append,</span>\n<span class=\"cm\"> list.reverse,</span>\n<span class=\"cm\"> eq,</span>\n<span class=\"cm\"> list.rec,</span>\n<span class=\"cm\"> list]</span>\n<span class=\"cm\">[list.has_append, has_append.append, list.reverse, eq, list]</span>\n\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 131967066,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1534017750
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>excessive memory consumption detected at &#39;replace&#39; (potential solution: increase memory consumption threshold)\n</pre></div>",
        "id": 131967321,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534018282
    },
    {
        "content": "<p>I'm invoking it from within emacs. Does that matter?</p>",
        "id": 131967322,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534018300
    },
    {
        "content": "<p>Gabriel's code also works here (in VScode).</p>",
        "id": 131967371,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534018374
    },
    {
        "content": "<p>and in command line as well</p>",
        "id": 131967379,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534018396
    },
    {
        "content": "<p>No it doesn't matter which editor you use.  Make sure you run <code>leanpkg build</code> before, this reduced the required amount of memory.  Typically, when you see excessive memory usage errors, the only way forward is to restart the server.</p>",
        "id": 131967430,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1534018450
    },
    {
        "content": "<p>The plot thickens: I just called <code>#print list.reverse_append</code> and got:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse_append</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">incorrect</span> <span class=\"k\">proof</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>So I'll delete all the <code>.olean</code> files and build from scratch.</p>",
        "id": 131967502,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534018573
    },
    {
        "content": "<p>It did solve the problem. Thanks <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> !</p>",
        "id": 131967760,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534019086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, if you want to restrict the output of that program to lemmas you can use  <code>tactic.is_proof</code> to filter those names. Other options can help you restrict it to types or functions.</p>",
        "id": 131967822,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534019173
    },
    {
        "content": "<p>you mean filter the output of list_constant?</p>",
        "id": 131967891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534019298
    },
    {
        "content": "<p>Yes exactly.</p>",
        "id": 131967962,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534019433
    },
    {
        "content": "<p>Since we're at it, how would you list all file imported by the current file. That one I could implement in python with regex  :-)</p>",
        "id": 131967979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534019481
    },
    {
        "content": "<p>for instance, you can do it as <code>cs.mfilter $ λ c, mk_const c &gt;&gt;= is_proof</code></p>",
        "id": 131967980,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534019483
    },
    {
        "content": "<p>(if <code>cs</code> is the result of <code>list_constant</code>)</p>",
        "id": 131967985,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534019519
    },
    {
        "content": "<p>What is the m doing in <code>mfilter</code>? Does it mean meta? Wouldn't it work with regular filter?</p>",
        "id": 131968030,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534019564
    },
    {
        "content": "<p>I would have simply written <code>cs.filter is_proof</code></p>",
        "id": 131968084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534019655
    },
    {
        "content": "<p>No the <code>m</code> is for monad becaus <code>mk_const</code> and <code>is_proof</code> use the <code>tactic</code> monad.</p>",
        "id": 131968163,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534019813
    },
    {
        "content": "<p>It works in trusted functions as well.</p>",
        "id": 131968171,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534019828
    },
    {
        "content": "<p>That's what I meant. To me monad = tactic monad = meta. I may try to refine that vision at some point</p>",
        "id": 131968218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534019891
    },
    {
        "content": "<blockquote>\n<p>Since we're at it, how would you list all file imported by the current file. That one I could implement in python with regex  :-)</p>\n</blockquote>\n<p>I'm stumped. I think there is very little information available about the file / module structure.</p>",
        "id": 131968221,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534019898
    },
    {
        "content": "<p>That's great. The only thing which is easy to do with regex is hard in Lean!</p>",
        "id": 131968236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534019950
    },
    {
        "content": "<p>Ah! I see. a monad is a category theoretic concept of which <code>tactic</code> is only one instance. It's a good way of structuring programs when you want to prove things about them.</p>",
        "id": 131968240,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534019968
    },
    {
        "content": "<p>I'm half joking, I know there are other monads</p>",
        "id": 131968284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534020005
    },
    {
        "content": "<p>Haha! Using the parser framework, you may decide to read the current file and do some of your regex work that way. And it all stays in Lean. I wouldn't call it a proper way but it would get the job done.</p>",
        "id": 131968294,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534020034
    },
    {
        "content": "<blockquote>\n<p>I'm half joking, I know there are other monads</p>\n</blockquote>\n<p>The pedantic explanation that people throw around might actually clarify things for you :P \"it's simple! A monad is just a monoid in the category of endofunctors\"</p>\n<p>... speaking of only half understanding ... :P</p>",
        "id": 131968350,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534020127
    },
    {
        "content": "<p>What is <code>mk_const</code> doing in your filtering stuff?</p>",
        "id": 131968362,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534020236
    },
    {
        "content": "<p>Actually I can't used the filtered list, I get <code>failed to synthesize type class instance for has_to_tactic_format (tactic (list name))</code></p>",
        "id": 131968408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534020273
    },
    {
        "content": "<p>I assume you tried <code>trace (mfilter ... )</code>. The <code>mfilter</code> expression is a monadic command so you have to execute it before using its result:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">r</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mfilter</span> <span class=\"c\">/-</span><span class=\"cm\"> rest -/</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"n\">r</span>\n</pre></div>",
        "id": 131968517,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534020490
    },
    {
        "content": "<p>indeed this works better</p>",
        "id": 131968535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534020569
    },
    {
        "content": "<p>The comma here is as if you were using <code>&gt;&gt;=</code>, that is the sequential composition of two commands: the <code>mfilter</code> expression and the <code>trace</code> expression:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mfilter</span> <span class=\"c\">/-</span><span class=\"cm\"> stuff -/</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">r</span>\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mfilter</span> <span class=\"c\">/-</span><span class=\"cm\"> stuff -/</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n</pre></div>\n\n\n<p>after η-reduction.</p>",
        "id": 131968593,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534020616
    },
    {
        "content": "<p>Thank you very much. I think I'll learn of lot from this. But right now I'm required for shooting stars hunting.</p>",
        "id": 131968936,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534021396
    },
    {
        "content": "<p>Good luck!</p>",
        "id": 131969262,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534022058
    },
    {
        "content": "<blockquote>\n<p>The pedantic explanation that people throw around might actually clarify things for you :P \"it's simple! A monad is just a monoid in the category of endofunctors\"</p>\n</blockquote>\n<p>But you also have to remember that if a computer scientist says that to you, they probably really mean \"... in the category of endofuctors of the category of types\"!</p>",
        "id": 131969820,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534023199
    },
    {
        "content": "<p>(similarly if they just say <code>functor</code> they mean endofunctor of the category of types: we even have this in mathlib)</p>",
        "id": 131969821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534023242
    },
    {
        "content": "<p>I stand corrected ... or my knowledge stands improved</p>",
        "id": 131970139,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534023858
    },
    {
        "content": "<p>I should really start taking advantage of the fact that so many category theorists hang around here. I've been thinking of doing a categorical treatment of liveness properties in temporal logic but it doesn't bode well: I already mess up the terminology!</p>",
        "id": 131970150,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534023958
    },
    {
        "content": "<p>Given that more computer scientists use \"monad\" now than mathematicians, my vote would be to give it to them (i.e. add \"in the category of types\" to the fancy-pants definition), and go back to using \"triple\", or \"triad\" from the earlier category theory literature for the general case)</p>",
        "id": 131970246,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534024128
    },
    {
        "content": "<p>What a shame! I thought we might make friends with mathematicians with those category theoretic ideas! Now you're giving us \"we knew about monad before it was cool\"</p>",
        "id": 131970302,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534024278
    },
    {
        "content": "<p>:-) I certainly learnt what a monad was from its CS usage before the category-theoretic obscurity.</p>",
        "id": 131970709,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534025159
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, would you object if I added <code>@[extensionality]</code> to <code>propext</code>?</p>",
        "id": 131970763,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534025236
    },
    {
        "content": "<p>I find its CS usage has a pretty funny story. They didn't know how to do IO in a pure way in Haskell so they held they breath until someone unearthed an obscure category theory paper, found someone to explain it to computer scientists and help them translate those pies in the sky into physical world phenomena</p>",
        "id": 131970830,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534025347
    },
    {
        "content": "<p>No objections. Do you see any downside to doing it?</p>",
        "id": 131970839,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534025396
    },
    {
        "content": "<p>My whole research field (tensor categories, topological field theory) is the same: just a toy for mathematicians who couldn't cope with quantum field theory, until some physicists came along and said \"we've discovered this stuff we call 'topological matter'\"</p>",
        "id": 131970901,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534025480
    },
    {
        "content": "<blockquote>\n<p>Good luck!</p>\n</blockquote>\n<p>We have been very lucky, including one amazing one. Now I'll go sleeping</p>",
        "id": 131971051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534025809
    },
    {
        "content": "<p>I find it so mind blowing when that happens. My favorite example is Euler's number theory work being useful in cryptography after he had his fun with it.</p>",
        "id": 131971107,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534025956
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 132010173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534106037
    },
    {
        "content": "<p>I had a go at making Simon's code return all the definitions used transitively. Why doesn't this work? I think it has something to do with <code>list.mmap</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">list_constant</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"o\">:=</span>\n<span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"bp\">_</span> <span class=\"n\">cs</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">is_constant</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">const_name</span> <span class=\"err\">∈</span> <span class=\"n\">cs</span>\n  <span class=\"k\">then</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">const_name</span> <span class=\"bp\">::</span> <span class=\"n\">cs</span>\n  <span class=\"k\">else</span> <span class=\"n\">cs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">declaration</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">const_in_def</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">),</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">t</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">get_decl</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">list_constant</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"err\">←</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"n\">const_in_def</span><span class=\"o\">,</span>\n<span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase_dup</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">const_in_def&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">l</span> <span class=\"err\">←</span> <span class=\"n\">const_in_def</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">const_in_def&#39;</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span>\n</pre></div>",
        "id": 133604168,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536489726
    },
    {
        "content": "<p>I see \"match failed\", is that what you mean by doesn't work?</p>",
        "id": 133604311,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536490099
    },
    {
        "content": "<p>I assume it's the match <code>(thm _ _ t v) ← get_decl n</code>, there are going to be constants reachable from anything as well as theorems.</p>",
        "id": 133604318,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536490185
    },
    {
        "content": "<p>If you add <code>trace n, </code> at the start of that line you can see that it's processing <code>trivial</code>, which is a <code>defn</code>, not a <code>thm</code></p>",
        "id": 133604372,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536490284
    },
    {
        "content": "<p>Thanks. got it working now.</p>",
        "id": 133606586,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536494885
    },
    {
        "content": "<p>You can have a look at <a href=\"https://github.com/leanprover-community/leancrawler/blob/master/src/leancrawler/deps.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/leancrawler/blob/master/src/leancrawler/deps.lean\">https://github.com/leanprover-community/leancrawler/blob/master/src/leancrawler/deps.lean</a> for more stuff you can extract from Lean (and of course you can also use the python part)</p>",
        "id": 133620373,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536517824
    }
]