[
    {
        "content": "<p>I'm seeing some odd behavior where<code>(λ x, x + b)</code> and <code>(+ b)</code> have the same pretty-printed representation, yet behave differently under function application</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- same</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_x</span><span class=\"o\">,</span> <span class=\"n\">_x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- λ (_x : ℕ), _x + b : ℕ → ℕ</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>          <span class=\"c1\">-- λ (_x : ℕ), _x + b : ℕ → ℕ</span>\n\n<span class=\"c1\">-- different?</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"c1\">-- (λ (x : ℕ), x + b) a : ℕ</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">a</span>  <span class=\"c1\">-- (λ (x : ℕ), x + b) a : ℕ</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span>        <span class=\"c1\">-- a + b : ℕ</span>\n</code></pre></div>\n<p>What's going on here?</p>",
        "id": 235072004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618752349
    },
    {
        "content": "<p>Aren't these definitionally the same thing?</p>",
        "id": 235073415,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618753685
    },
    {
        "content": "<p>i was gonna say it was just b-red, but <code>pp.beta</code> causes even more confusion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.beta</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- different?</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"c1\">-- a + b : ℕ</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">a</span>  <span class=\"c1\">-- (λ (_x : ℕ), _x + b) a : ℕ</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span>        <span class=\"c1\">-- a + b : ℕ</span>\n</code></pre></div>",
        "id": 235073890,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1618754198
    },
    {
        "content": "<p>Yes, they're all defeq, but I need syntactic equality to make the elaborator behave</p>",
        "id": 235074195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618754485
    },
    {
        "content": "<p>Don't use <code>set_option pp.beta true</code>, it performs beta reduction in the pretty printer which makes it hard to tell what term you are actually looking at</p>",
        "id": 235109699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618788053
    },
    {
        "content": "<p>I would guess that this is parser magic, it sees that you have applied a function slice operator to some arguments and pre-composes it</p>",
        "id": 235109800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618788136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Applying.20.28.CE.BB.20x.2C.20x.20.2B.20b.29.20and.20.28.2B.20b.29.20give.20different.20expressions/near/235109699\">said</a>:</p>\n<blockquote>\n<p>Don't use <code>set_option pp.beta true</code>, it performs beta reduction in the pretty printer which makes it hard to tell what term you are actually looking at</p>\n</blockquote>\n<p>why is β-red in the pretty printer bad? I've got a lot of λs flying about so they make my proofs a lot easier</p>",
        "id": 235109886,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1618788277
    },
    {
        "content": "<p>because they aren't making your proofs easier, they are making your proofs look easier</p>",
        "id": 235110336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618788829
    },
    {
        "content": "<p>it doesn't do anything at all to the state</p>",
        "id": 235110337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618788838
    },
    {
        "content": "<p>if you want to do beta reduction use <code>dsimp only</code></p>",
        "id": 235110376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618788852
    },
    {
        "content": "<p>if you want to pretend beta reduction doesn't exist then use <code>pp.beta</code></p>",
        "id": 235110409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618788874
    },
    {
        "content": "<p>but then you will get weird errors when on identical (looking!) states <code>rw</code> will work in one case and fail in the other</p>",
        "id": 235110420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618788906
    },
    {
        "content": "<p>wow, surprised that hasn't bit me yet. turned it off; thanks!</p>",
        "id": 235110685,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1618789207
    }
]