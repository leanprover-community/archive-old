[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1634\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1634\">#1634</a> proposes adding a full linting check to the CI for mathlib pull requests. Right now we have linters that check for missing doc strings, bad instance priorities, illegal constants in types, and some other things. Putting this in a CI check will give contributors faster feedback and remove some burden from PR reviewers.</p>\n<p>Since mathlib still fails some of these checks spectacularly, we can't run the test over the whole library yet. We can get around it by generating a list of failing declarations and whitelisting them right before we run the check. It's a little inelegant, but I'm not sure of a better way to do this without making all of mathlib compliant. (Obviously I'd like to get there eventually. It's a long road.)</p>\n<p>Any more thoughts or feedback here?</p>",
        "id": 180133303,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573134649
    },
    {
        "content": "<p>I'm in favour of your proposal (unless it blows up the time that Travis spends on checking a PR).</p>",
        "id": 180133820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573134961
    },
    {
        "content": "<blockquote>\n<p>I'm in favour of your proposal (unless it blows up the time that Travis spends on checking a PR).</p>\n</blockquote>\n<p>It doesn't. Should add at most a few minutes.</p>",
        "id": 180133985,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573135026
    },
    {
        "content": "<p>In the metamath <a href=\"http://set.mm\" target=\"_blank\" title=\"http://set.mm\">set.mm</a> repo we do something similar. There is a list of theorems whose use is \"discouraged\", meaning that you are allowed to reference them but there is an extra \"I know what I'm doing\" step. To accomplish this, we autogenerate a list of all theorems referencing discouraged theorems and check it in, and the CI regenerates the file and requires that it match. This means that if you want to get CI to pass, you have to also update the discouraged file, and this update shows in the git history.</p>\n<p>If we apply this to the mathlib lints, it suggests making a list of all excluded lints and checking it into the repo. Then if you add anything beyond what is in the list you don't pass CI, unless you also update the excluded list, and this gives PR reviewers a place to heckle you.</p>",
        "id": 180134171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573135137
    },
    {
        "content": "<p>That's exactly the proposed setup. <code>nolints.txt</code> is stored in the <code>scripts</code> directory. Adding something noncompliant means you have to either touch that file or use the <code>nolint</code> attribute, both of which should be obvious in a PR.</p>",
        "id": 180134305,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573135209
    },
    {
        "content": "<p>ah, okay it wasn't clear to me that the txt file is actually checked in</p>",
        "id": 180134360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573135242
    },
    {
        "content": "<p>I should have linked <a href=\"https://github.com/leanprover-community/mathlib/issues/1636\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1636\">#1636</a> too. It's easy to autogenerate it.</p>",
        "id": 180134427,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573135279
    },
    {
        "content": "<p>It has to be checked in, because Travis can't generate the list of \"acceptable\" failing lints itself. It would have to find the root commit of the PR, build it, and generate the list there. That would basically double the time of the Travis check.</p>",
        "id": 180134556,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573135350
    },
    {
        "content": "<p>even if you could do that, I wouldn't recommend it. It is too brittle, \"the last commit\" is not very well defined</p>",
        "id": 180134731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573135450
    },
    {
        "content": "<p>(oops, that example isn't right)</p>",
        "id": 180135197,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573135721
    },
    {
        "content": "<p>There are situations where good PRs will break the tests. Renaming/refactoring, of course, but also:</p>\n<blockquote>\n<p>Suppose def <code>f {T : Type} [group T] (t : T) := t</code> and theorem <code>g {T : Type} [group T] (t : T) : f t = t := rfl</code>. <code>f</code> will end up on the list because the group instance is unused, but <code>g</code> won't. If someone fixes <code>f</code>, the test will fail because <code>g</code> now has an unused argument.</p>\n</blockquote>\n<p>I think these won't happen accidentally though. It should be obvious to reviewers what's going on.</p>",
        "id": 180135743,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573136058
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1636\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1636\">#1636</a> is merged and the whitelist is added. <a href=\"https://github.com/leanprover-community/mathlib/issues/1634\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1634\">#1634</a> is updated.</p>",
        "id": 180229856,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573220239
    },
    {
        "content": "<p>If anything gets merged to master before <a href=\"https://github.com/leanprover-community/mathlib/issues/1634\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1634\">#1634</a>, we'll need to update the whitelist once that lands.</p>",
        "id": 180229947,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573220293
    },
    {
        "content": "<p>Are we ready to merge <a href=\"https://github.com/leanprover-community/mathlib/issues/1634\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1634\">#1634</a>?</p>",
        "id": 181105629,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574165875
    },
    {
        "content": "<p><code>nolints.txt</code> will have to be updated first, but that's easy enough.</p>",
        "id": 181105674,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574165890
    },
    {
        "content": "<p>I'm thinking it might be better to remove the <code>instance_priority</code> test from linting at first. I started a branch a little while ago to see how hard it would be to pass that test, and it seemed tricky. There were some unexpected errors. It would be safer to investigate that first before adding it to CI.</p>",
        "id": 181105736,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574165992
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1634\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1634\">#1634</a> has landed. What this means for you: Travis will complain about your PRs if they add declarations that don't pass our linting tests. This means that all definitions must have doc strings, there should be no unused arguments to declarations, you have to use <code>def</code> and <code>lemma</code>/<code>theorem</code> in the right places, and a few other things.</p>",
        "id": 181138291,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574186986
    },
    {
        "content": "<p>If your PR adds something that fails a test, but you think it should be allowed anyway, you can use the <code>@[nolint]</code> attribute, with a comment justifying its use. Reviewers should look for this and question whether it's really necessary.</p>",
        "id": 181138437,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574187061
    },
    {
        "content": "<p>PRs that rename a lot of existing declarations could lead to failures. The solution here is to regenerate <code>scripts/nolints.txt</code> using <code>scripts/mk_nolint.lean</code>. We'll see in practice how often this is necessary.</p>",
        "id": 181138627,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574187156
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1700\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1700\">#1700</a> has just failed the linting test, and therefore it hasn't been merged. This shows that the set up works fine!</p>",
        "id": 181217436,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574263534
    }
]