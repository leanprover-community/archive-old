[
    {
        "content": "<p>Something about the interaction between casting and <code>ring</code> is different between <code>ℂ</code> and <code>ℝ</code>.  Why is this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">--fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">--works (EDIT: actually, doesn't work)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">--works</span>\n</code></pre></div>\n\n<p>Whatever is going on, it's not an issue for <code>abel</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">abel</span> <span class=\"c1\">--works</span>\n</code></pre></div>",
        "id": 213367734,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602722177
    },
    {
        "content": "<p>What happens with an arbitrary field?</p>",
        "id": 213367849,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602722344
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>  <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>  <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 213368027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602722466
    },
    {
        "content": "<p>strange.</p>",
        "id": 213368030,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602722468
    },
    {
        "content": "<p>The following works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 213368154,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602722603
    },
    {
        "content": "<p>The good news is <code>field_simp</code>works for both</p>",
        "id": 213368166,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602722622
    },
    {
        "content": "<p>Apparently Lean is interpreting <code>2</code> as something other than <code>ℂ</code>. Then <code>ring</code> not working makes sense, as I don't expect <code>ring</code> to do casts.</p>",
        "id": 213368172,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602722637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113488-general/topic/.60ring.60.20behaviour/near/213368154\">said</a>:</p>\n<blockquote>\n<p>The following works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n\n</blockquote>\n<p>Oops, that is wrong.</p>",
        "id": 213368214,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602722655
    },
    {
        "content": "<p>What actually works is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_one.one</span><span class=\"o\">,</span>\n  <span class=\"c1\">--unfold has_one.one monoid.one ring.one comm_ring.one,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213368220,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602722669
    },
    {
        "content": "<p>I just assume <code>ring</code> would work without the <code>unfold</code>s, my bad.</p>",
        "id": 213368228,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602722682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113488-general/topic/.60ring.60.20behaviour/near/213368172\">said</a>:</p>\n<blockquote>\n<p>Apparently Lean is interpreting <code>2</code> as something other than <code>ℂ</code>. Then <code>ring</code> not working makes sense, as I don't expect <code>ring</code> to do casts.</p>\n</blockquote>\n<p>But then why does it work for <code>ℝ</code>?  Because <code>2</code> presumably gets cast (here to a real number) from a natural number in that case, too.</p>",
        "id": 213368254,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602722728
    },
    {
        "content": "<p>You can see what Lean thinks the <code>2</code> is if you add <code>set_option pp.numerals false</code> and <code>set_option pp.implicit true</code>.</p>",
        "id": 213368274,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602722758
    },
    {
        "content": "<p>What is <code>bit0</code>?</p>",
        "id": 213368339,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602722800
    },
    {
        "content": "<p>Basically \"times two.\"</p>",
        "id": 213368388,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602722864
    },
    {
        "content": "<p>okay, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> is defined as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1 + 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> is the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> in the ring.</p>",
        "id": 213368448,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602722903
    },
    {
        "content": "<p><code>bit0 has_one.one</code> is <code>2</code> or, in binary, <code>10</code>.</p>",
        "id": 213368455,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602722917
    },
    {
        "content": "<p>And <code>coe 2</code> is the coercion from nat.</p>",
        "id": 213368463,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602722929
    },
    {
        "content": "<p>But so why is it different between <code>ℂ</code> and <code>ℝ</code>?</p>",
        "id": 213368632,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602723118
    },
    {
        "content": "<p>There must be a better way of doing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_one.one</span> <span class=\"n\">monoid.one</span> <span class=\"n\">ring.one</span> <span class=\"n\">comm_ring.one</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">coe</span> <span class=\"n\">lift_t</span> <span class=\"n\">has_lift_t.lift</span> <span class=\"n\">coe_t</span> <span class=\"n\">has_coe_t.coe</span> <span class=\"n\">coe_b</span> <span class=\"n\">has_coe.coe</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>It is interpreting <code>2</code> as a complex number as it should, it seems.</p>",
        "id": 213368677,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602723133
    },
    {
        "content": "<p>Weird, I don't know exactly how unfolding expressions works withing tactics, but maybe <code>ring</code> is will equipped to deal with so many?</p>",
        "id": 213368693,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602723165
    },
    {
        "content": "<p>You noticed that this works?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">--works</span>\n</code></pre></div>",
        "id": 213368702,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602723181
    },
    {
        "content": "<p>Lean is getting stuck for me on that example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- orange bar is stuck, Lean never returns</span>\n</code></pre></div>\n\n<p>I think I'm using the most recent version of Lean + mathlib?</p>",
        "id": 213368714,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602723206
    },
    {
        "content": "<p>Oh, it finally errored with <code>(deterministic) timeout</code>.</p>",
        "id": 213368729,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602723235
    },
    {
        "content": "<p>Oh interesting, you're right, it just took a while to load and I assumed it worked :)</p>",
        "id": 213368785,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602723262
    },
    {
        "content": "<p>Maybe there is some <code>coe</code> loop between types which is making <code>ring</code> and get stuck somehow?</p>",
        "id": 213368818,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602723307
    },
    {
        "content": "<p>Well, also, like I said, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">abel</span> <span class=\"c1\">--works</span>\n</code></pre></div>",
        "id": 213368820,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602723308
    },
    {
        "content": "<p>Also <code>simp</code> just works.</p>",
        "id": 213368825,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602723316
    },
    {
        "content": "<p>I had the impression that <code>ring</code> was more-or-less a call to <code>simp</code> with a certain collection of lemmas.</p>",
        "id": 213368877,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602723365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/.60ring.60.20behaviour/near/213368877\">said</a>:</p>\n<blockquote>\n<p>I had the impression that <code>ring</code> was more-or-less a call to <code>simp</code> with a certain collection of lemmas.</p>\n</blockquote>\n<p>I think <code>abel</code> is like this, but my impression is that <code>ring</code> is more complicated (it normalizes to deal with commutativity, which I don't see how <code>simp</code> could do).</p>",
        "id": 213368903,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602723411
    },
    {
        "content": "<p>I thought <code>abel</code> was built on top of <code>ring</code> or vice-versa.</p>",
        "id": 213368932,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602723450
    },
    {
        "content": "<p>Yeah simp can't handle commutativity because it would loop.</p>",
        "id": 213368969,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602723474
    },
    {
        "content": "<p>Let's just define </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ring'</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">simp</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ring</span> <span class=\"o\">]</span>\n</code></pre></div>\n\n<p>and call it a day :)</p>",
        "id": 213369039,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602723531
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">ring'</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">simp</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ring</span> <span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring'</span>\n</code></pre></div>",
        "id": 213369124,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602723599
    },
    {
        "content": "<p>This is very funny, but I'm still curious about why there's a difference :)</p>",
        "id": 213369324,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602723705
    },
    {
        "content": "<p>But why doesn't ring just call <code>simp</code> before it does it's magic?!</p>",
        "id": 213369328,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602723710
    },
    {
        "content": "<p>Yeah it's really strange I agree</p>",
        "id": 213369356,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602723723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/.60ring.60.20behaviour/near/213369328\">said</a>:</p>\n<blockquote>\n<p>But why doesn't ring just call <code>simp</code> before it does it's magic?!</p>\n</blockquote>\n<p>I guess this would count as a nonterminal simp?</p>",
        "id": 213369392,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602723759
    },
    {
        "content": "<p>I had the impression that writing <code>(2 : R)</code> where <code>R</code> was a ring was defeq to the coercion from nat.</p>",
        "id": 213369399,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602723767
    },
    {
        "content": "<p>Yeah, you'd sure think so!</p>",
        "id": 213369411,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602723786
    },
    {
        "content": "<p>I guess this would work too</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">ring'</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">abel</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ring</span> <span class=\"o\">]</span>\n</code></pre></div>\n\n<p>without the terminal simp, and it actually makes sense to try the \"abelian group\" tactic before the \"ring\" tactic.</p>",
        "id": 213369648,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602724043
    },
    {
        "content": "<p>By the way, if you replace division with multiplication then <code>ring</code> works fine.</p>",
        "id": 213369854,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602724242
    },
    {
        "content": "<p>Yes, I noticed, it's very odd.</p>",
        "id": 213369887,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602724281
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"n\">foo</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n\n<p>WAT?!</p>",
        "id": 213369954,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602724338
    },
    {
        "content": "<p>Okay, I really have no clue what's happening now.</p>",
        "id": 213370016,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602724434
    },
    {
        "content": "<p>I don't know enough about the internals of <code>ring</code> to say more, but maybe this is progress:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- simp doesn't seem to be called</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- simp gives up after 8 rewrites</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"bp\">/↑</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">try_for</span> <span class=\"mi\">4000</span> <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">}</span> <span class=\"c1\">-- the simp output loops after a while</span>\n</code></pre></div>",
        "id": 213371032,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602725625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/.60ring.60.20behaviour/near/213368877\">said</a>:</p>\n<blockquote>\n<p>I had the impression that <code>ring</code> was more-or-less a call to <code>simp</code> with a certain collection of lemmas.</p>\n</blockquote>\n<p>Nope, <code>ring</code> lifts the identity it wants to prove to a polynomial expression. (So in this case to the polynomial ring over <code>\\C</code> with variables <code>x</code> and <code>y</code>.) After that, it puts the polynomials into (some) normal form, and checks whether they are equal. (This depends on an order on the variables, which it chooses itself.)</p>",
        "id": 213380713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602738151
    },
    {
        "content": "<p><code>ring</code> does not use <code>simp</code> at all. Both it and <code>abel</code> are from scratch tactics, although <code>abel</code> uses <code>ring</code> as a subroutine and <code>ring</code> uses <code>norm_num</code> (the internal parts of it, not the user facing version that uses <code>simp</code>)</p>",
        "id": 213381479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602739251
    },
    {
        "content": "<p>Oh, but to complicate matters, <code>ring</code> has a fallback that is basically <code>simp</code> with a specific simp set, which is only called if the main <code>ring</code> routine fails. The purpose is to clean up the polynomial identity to see why it didn't work, although sometimes people just use it as \"nonterminal <code>ring</code>\"</p>",
        "id": 213381548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602739377
    },
    {
        "content": "<p>You can use <code>ring1</code> if you don't want the nonterminal ring cleanup behavior on failure</p>",
        "id": 213381560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602739410
    },
    {
        "content": "<p><code>ring1</code> gives a nice and clear error message here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"bp\">/↑</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring1</span>\n<span class=\"c1\">-- tactic.mk_instance failed to generate instance for</span>\n<span class=\"c1\">--   ordered_semiring ℂ</span>\n</code></pre></div>",
        "id": 213381618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602739493
    },
    {
        "content": "<p>Why does ring care about ordered semirings you ask? ...good question</p>",
        "id": 213381639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602739558
    },
    {
        "content": "<p>Ah, the <code>x/foo</code> example isn't as mysterious as you might think. It is reduced to <code>x - x * foo⁻¹ + x * foo⁻¹ = x</code>, which is in fact a polynomial identity</p>",
        "id": 213381929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602740042
    },
    {
        "content": "<p>Do numerals work differently in ordered semirings somehow?</p>",
        "id": 213382134,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602740400
    },
    {
        "content": "<p>IIRC this is all about whether ring can figure out if 2 is not zero. If the ring is an ordered semiring then 2 is definitely not zero</p>",
        "id": 213382176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602740413
    },
    {
        "content": "<p><code>char_zero</code> looks like a better class.</p>",
        "id": 213382192,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602740445
    },
    {
        "content": "<p>But it's not ring's job to go running around trying to verify that denominators are nonzero, that's field stuff. I don't think we had char_zero when ring was written</p>",
        "id": 213382198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602740467
    },
    {
        "content": "<p><code>char_zero</code> has been around forever, I think.</p>",
        "id": 213382210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602740495
    },
    {
        "content": "<p><code>char_p</code> is it's younger brother</p>",
        "id": 213382218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602740510
    },
    {
        "content": "<p>But I think I remember from a discussion long ago that this was why ring cared about ordered fields</p>",
        "id": 213382219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602740519
    },
    {
        "content": "<p>I'm pretty sure this is due to <code>norm_num</code> in some way</p>",
        "id": 213382293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602740635
    },
    {
        "content": "<p>still tracing through it</p>",
        "id": 213382335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602740646
    },
    {
        "content": "<p>If this surprising behavior doesn't end up being a bug somewhere then we should probably mention something about ordered semirings or whatnot in the tactic doc entry or docstring.</p>",
        "id": 213382341,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602740666
    },
    {
        "content": "<p><code>norm_num</code> actually has several modules for proving inequalities of numerals, one of which works on <code>char_zero</code></p>",
        "id": 213382356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602740699
    },
    {
        "content": "<p>I narrowed it down to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">ic</span> <span class=\"bp\">←</span> <span class=\"n\">mk_instance_cache</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℂ</span><span class=\"o\">),</span>\n  <span class=\"n\">norm_num.prove_ne_zero</span> <span class=\"n\">ic</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>The implementation makes it clear where we've gone wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given `a` a rational numeral, returns `⊢ a ≠ 0`. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">prove_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">instance_cache</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">instance_cache</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">match_neg</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">prove_ne_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c.mk_app</span> <span class=\"bp\">``</span><span class=\"n\">ne_zero_neg</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">prove_pos</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c.mk_app</span> <span class=\"bp\">``</span><span class=\"n\">ne_zero_of_pos</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213382951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602741643
    },
    {
        "content": "<p>This is called when evaluating, for example, <code>(1 / 2 : ℂ) * 1 = ?</code></p>",
        "id": 213383055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602741784
    },
    {
        "content": "<p>After Mario's explanation, this isn't too surprising, but I thought it was funny:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.prime_two</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring1</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring1</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 213384818,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602743875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60ring.60.20behaviour/near/213381548\">said</a>:</p>\n<blockquote>\n<p>Oh, but to complicate matters, <code>ring</code> has a fallback that is basically <code>simp</code> with a specific simp set, which is only called if the main <code>ring</code> routine fails. The purpose is to clean up the polynomial identity to see why it didn't work, although sometimes people just use it as \"nonterminal <code>ring</code>\"</p>\n</blockquote>\n<p>It's bad that this <code>simp</code> set can loop though, right?</p>",
        "id": 213384889,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602743933
    },
    {
        "content": "<p>yes, I haven't looked in detail at that</p>",
        "id": 213385501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602744632
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4626\">#4626</a></p>",
        "id": 213385517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602744658
    },
    {
        "content": "<p>Actually I can't replicate the issue after <a href=\"https://github.com/leanprover-community/mathlib/issues/4626\">#4626</a></p>",
        "id": 213385791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602744965
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"bp\">/↑</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n<span class=\"c1\">-- tactic failed, there are unsolved goals</span>\n<span class=\"c1\">-- state:</span>\n<span class=\"c1\">-- x z : ℂ</span>\n<span class=\"c1\">-- ⊢ x + (-(↑2)⁻¹ + 1 / 2) * z = x</span>\n</code></pre></div>",
        "id": 213385810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602744988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/.60ring.60.20behaviour/near/213368969\">said</a>:</p>\n<blockquote>\n<p>Yeah simp can't handle commutativity because it would loop.</p>\n</blockquote>\n<p>Actually this isn't true; simp checks for commutativity looking lemmas and rewrites them only if they decrease in a term order, which prevents looping. I use <code>by simp [add_assoc, add_comm, add_left_comm]</code> all the time</p>",
        "id": 213385940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602745126
    },
    {
        "content": "<p><code>simp</code> is wicked smart <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 213385958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745161
    },
    {
        "content": "<p>however this handling is specific to commutativity lemmas. If you give it anything else you can cause a loop, particularly if you have lemmas <code>x ~&gt; y</code> and <code>y ~&gt; x</code></p>",
        "id": 213385985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602745188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/.60ring.60.20behaviour/near/213369328\">said</a>:</p>\n<blockquote>\n<p>But why doesn't ring just call <code>simp</code> before it does it's magic?!</p>\n</blockquote>\n<p>Because <code>simp</code> is usually more expensive than <code>ring</code>. It's not a good choice to put on the critical path of a normalization tactic</p>",
        "id": 213386385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602745448
    },
    {
        "content": "<p>User should write <code>simp; ring</code></p>",
        "id": 213386414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/.60ring.60.20behaviour/near/213369399\">said</a>:</p>\n<blockquote>\n<p>I had the impression that writing <code>(2 : R)</code> where <code>R</code> was a ring was defeq to the coercion from nat.</p>\n</blockquote>\n<p>It's not, the associativity of the 1's is different (and in any case it would be exponential time to verify this defeq, even if addition was definitionally associative on the ring in question)</p>",
        "id": 213386552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602745587
    },
    {
        "content": "<p><code>4 : R</code> is <code>(1 + 1) + (1 + 1)</code>, <code>\\u 4 : R</code> is <code>(((0 + 1) + 1) + 1) + 1</code></p>",
        "id": 213386619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602745652
    }
]