[
    {
        "content": "<p>For first-order solving, Isabelle and HOL4 have <a href=\"http://www.gilith.com/metis/\">Metis</a>, HOL Light has Meson, and Coq has <a href=\"https://coq.inria.fr/refman/proof-engine/tactics.html#coq:tacn.firstorder\">firstorder</a> and <a href=\"https://github.com/lukaszcz/coqhammer#tactics\">sauto</a>. What is the closest Lean analogue currently and is it known how it performs on some benchmark? (This would be interesting to know since the <a href=\"https://www.mimuw.edu.pl/~lukaszcz/sauto.pdf\">work on sauto</a> will be presented at IJCAR <a href=\"https://easychair.org/smart-program/IJCAR2020/2020-07-03.html#session:46059\">next week</a>).</p>",
        "id": 202246177,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593365555
    },
    {
        "content": "<p>As far as I know, <code>by {[smt] eblast}</code> is the only thing we have related to first order automation.</p>",
        "id": 202246568,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593366178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116585\">@Seul Baek</span> has two PRs to write bindings, one for Vampire and one for SPASS, but I don't think they're almost finished.</p>",
        "id": 202246576,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593366218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span>, anything to add?</p>",
        "id": 202246580,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593366230
    },
    {
        "content": "<p>so <code>eblast</code> calls external solvers and does proof reconstruction? (If so, this is a bit different from Metis or firstorder, which runs inside the proof assistant like a \"regular\" tactic.)</p>",
        "id": 202246732,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593366466
    },
    {
        "content": "<p><code>eblast</code> is not a binding. It is implemented as part of Lean using smt reasoning style</p>",
        "id": 202246791,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593366543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198375\">Karl Palmskog</span> <a href=\"#narrow/stream/113488-general/topic/State.20of.20first-class.20first-order.20tactics.20in.20Lean.203.2F4/near/202246732\">said</a>:</p>\n<blockquote>\n<p>so <code>eblast</code> calls external solvers and does proof reconstruction? (If so, this is a bit different from Metis or firstorder, which runs inside the proof assistant like a \"regular\" tactic.)</p>\n</blockquote>\n<p>this description more closely describes Seul's Vampire bindings</p>\n<p><code>eblast</code> performs e-matching (heuristic instantiation) and congruence closure in a loop</p>\n<p>there was a <code>super</code> tactic for superposition reasoning, but iirc it's not being maintained</p>",
        "id": 202247095,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1593366998
    },
    {
        "content": "<p>The paper on sauto focuses on the orthogonal complement of mathlib (intuitionistic computer science) so I wouldn't be surprised if we have nothing like that.</p>",
        "id": 202248196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593368625
    },
    {
        "content": "<p><code>sauto</code> was evaluated on (problems from) CompCert, which uses classical logic. It had about 17% success rate, which is lower than for the general Coq library benchmark, but still pretty high I think.</p>",
        "id": 202248800,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1593369523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116045\">Jesse Michael Han</span> <a href=\"#narrow/stream/113488-general/topic/State.20of.20first-class.20first-order.20tactics.20in.20Lean.203.2F4/near/202247095\">said</a>:</p>\n<blockquote>\n<p>there was a <code>super</code> tactic for superposition reasoning, but iirc it's not being maintained</p>\n</blockquote>\n<p>Yes, here is the original one: <a href=\"https://github.com/leanprover/super\">https://github.com/leanprover/super</a>  And here is a recent rewrite: <a href=\"https://github.com/gebner/super2/\">https://github.com/gebner/super2/</a><br>\nHere is talk about it from the Matryoshka 2018 workshop: <a href=\"https://gebner.org/pdfs/2018-06-27_super.pdf\">https://gebner.org/pdfs/2018-06-27_super.pdf</a><br>\n<code>super</code> kind of works but its main problem is that it's slow.  It uses the built-in unification of Lean, and while this works great in many cases, you quickly run into corner cases with horrific performance or obscure bugs.  The other issue is that the Lean 3 API hasn't exposed the primitives (such as temporary metavariables) intended for this kind of application (this has improved a bit in the community edition though).</p>",
        "id": 202282670,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593418715
    }
]