[
    {
        "content": "<p>Question: how much instances of <code>decidable (fin n)</code> are found by Lean? And why does it matter? Answer: <a href=\"https://github.com/johoelzl/tc-log-parser/blob/master/problem.md#answer\" target=\"_blank\" title=\"https://github.com/johoelzl/tc-log-parser/blob/master/problem.md#answer\">https://github.com/johoelzl/tc-log-parser/blob/master/problem.md#answer</a></p>\n<p><code>fin n</code> is just an example, even <code>decidable</code> is not the problem in itself. The problem will happen with each diamond where we have two ways to construct the same instance.</p>",
        "id": 161435867,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553250134
    },
    {
        "content": "<p>It looks like this is something we cannot solve in mathlib, but requires changes in Lean. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>: the type class search in Lean 4 will be the same as in Lean 3? So it would make sense to improve it in Lean 3 and then port it to Lean 4?</p>",
        "id": 161435923,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553250228
    },
    {
        "content": "<p>Semantically it will probably stay the same, but Leo wants to look into possible optimizations. I will note this as one potential optimization opportunity, thanks for the write-up. No promises though.</p>",
        "id": 161436171,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1553250484
    },
    {
        "content": "<p>Good to hear!</p>",
        "id": 161436237,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553250590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> Could you tell us more about this repository?</p>",
        "id": 161446859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553260992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I think you should ask <span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> about ideas to improve the type class search semantic. In Amsterdam he told several things that got added to Coq recently and seemed like they could be very useful for large scale type class search</p>",
        "id": 161446963,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553261054
    },
    {
        "content": "<p>The idea is to have a parser for the log produced by Lean when searching for type class instances. All it currently does is to outpute the computed instances until a <code>mark ff</code> instance is looked up. This was the essential information I needed. </p>\n<p>But I'm sure it can be used to analyse other problems too</p>",
        "id": 161534653,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553361728
    },
    {
        "content": "<p>Hm, this problem seams to be even worse: <code>is_add_monoid_hom (coe : ℤ → ℤ)</code> does not terminate. Now <code>is_ring_hom (coe : ℤ → ℤ)</code> doesn't work due to some unification problems. But <code> is_ring_hom.is_semiring_hom</code> <code>is_semiring_hom.is_add_monoid_hom</code> is looking for a <code>ring</code> instance and then for the <code>is_ring_hom</code> instance. The <code>is_ring_hom</code> instance is not found, hence it starts to enumerate all the ways to construct <code>ring</code> for <code>int</code>. </p>\n<p>Maybe a solution would be to annotate <code>class</code> constants with a attribute, saying that there should be no backtracking, i.e. there should be only one canonical instance.</p>",
        "id": 161692440,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553551534
    },
    {
        "content": "<blockquote>\n<p>Maybe a solution would be to annotate <code>class</code> constants with a attribute, saying that there should be no backtracking, i.e. there should be only one canonical instance.</p>\n</blockquote>\n<p>Isn't this how type class search is supposed to work anyway. So we can just bake that assumption in. If you found an instance, and it didn't work, just stop. No need to look for another instance.</p>",
        "id": 161737408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553584481
    },
    {
        "content": "<p>Right, it should be the default behaviour.</p>",
        "id": 161740631,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553588624
    },
    {
        "content": "<p>Or even not configurable</p>",
        "id": 161740635,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553588631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213273\">@Paul-Nicolas Madelaine</span>  and I came across a problem that I've seen before. Because of left-to-right elaboration, Lean won't coerce <code>n</code> to <code>ℤ</code> here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Instead, it decides that <code>&lt;</code> is over <code>ℕ</code> and tries to coerce <code>z</code>. This should fail, but in practice it times out. I've noticed this many times but never had a chance to investigate. Turns out this is is another instance of the same type class issue Johannes reports. <code>int.cast_coe</code> looks, in order, for <code>has_zero ℕ</code>, <code>has_one ℕ</code>, <code>has_add ℕ</code>, and <code>has_neg ℕ</code>. There are tons of paths to the first three. (Presumably. I didn't count.) The last one fails. So the search goes effectively forever.</p>\n<p>There's an easy solution for this particular case, though: change <code>int.cast_coe</code> to look for <code>has_neg</code> first. Then it fails fast. Nothing in mathlib breaks with this change. (I didn't compare compilation times.) This points to a general design strategy, as long as type class inference has this behavior: put the hardest (rarest, least likely) classes as early as possible.</p>",
        "id": 161848744,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1553684764
    },
    {
        "content": "<p>Good idea. I'll try to keep it in mind while writing code.</p>",
        "id": 161851148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553687233
    },
    {
        "content": "<p>So today will be remembered as the day that the age old question of why Lean times out when failing to coerce from int to nat is solved! <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> this trips up beginner mathematicians and is hard for them to debug. I think Johannes has found a fundamental issue which needs some serious thought.</p>",
        "id": 161894979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553716614
    },
    {
        "content": "<p>So what Rob is saying, I think, is that in <code>data.int.basic</code> in mathlib, one of the lines here</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">cast</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Canonical homomorphism from the integers to any ring(-like) structure `α` -/</span>\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">cast</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"n\">cast_coe</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"bp\">ℤ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>should be changed: the <em>order</em> of the variables should be changed.</p>",
        "id": 161895570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553717001
    },
    {
        "content": "<p>Yes</p>",
        "id": 161895583,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553717019
    },
    {
        "content": "<p>That seems like an easy PR <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 161895711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553717109
    },
    {
        "content": "<p>Could even do that from the Github editor (-;</p>",
        "id": 161895757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553717148
    },
    {
        "content": "<p>Another thing we need to change is actually Lean 3. We could fork Lean 3 and remove the ability to backtrack in Lean 3 and see what breaks in mathlib. This would make the type class search much easier.</p>",
        "id": 161895819,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553717170
    },
    {
        "content": "<p>Who is keeping track of all the benefits of forking?</p>",
        "id": 161895885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553717227
    },
    {
        "content": "<p>There was a thread about this somewhere, right?</p>",
        "id": 161895892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553717231
    },
    {
        "content": "<p>This is an edit to mathlib we're talking about here</p>",
        "id": 161895908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553717248
    },
    {
        "content": "<p>Oh I see, Johannes is suggesting changing the C++ code?</p>",
        "id": 161895967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553717283
    },
    {
        "content": "<p>The edit to mathlib should happen. And it seems worthwhile to experiment with a different type class search in a forked Lean. I would not want to port mathlib to this forked Lean 3, at least not without more knowledge of the Lean 4 type class mechanism.</p>",
        "id": 161896211,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1553717509
    },
    {
        "content": "<p>Results of a completely unscientific test; on this desktop, it took just under 15 minutes to compile mathlib HEAD, and then with the variable line in <code>data/int/basic.lean</code> changed to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>(100% reversal) it took just under 14 minutes.</p>",
        "id": 161899676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553720157
    },
    {
        "content": "<p>and <code>example : has_coe ℤ ℕ := by apply_instance</code> now fails instantly! I have never seen that before!</p>",
        "id": 161899966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553720379
    },
    {
        "content": "<p>We should make a Lean 4 todo list.</p>",
        "id": 161903595,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553723412
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances]  class-instance resolution trace\n[class_instances] (0) ?x_0 : has_one ℕ := @with_top.has_one ?x_1 ?x_2 ?x_3\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_one ℕ := @with_bot.has_one ?x_4 ?x_5\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_one ℕ := @with_zero.has_one ?x_6 ?x_7\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_one ℕ := @with_one.has_one ?x_8\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_one ℕ := @units.has_one ?x_9 ?x_10\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_one ℕ := unsigned.has_one\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_one ℕ := @fin.has_one ?x_11\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_one ℕ := int.has_one\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_one ℕ := nat.has_one\n</pre></div>\n\n\n<p>Which one should Lean have tried first, to find a one for nat? <code>with_zero.has_one</code> or <code>nat.has_one</code>?</p>",
        "id": 161905685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553725428
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances]  class-instance resolution trace\n[class_instances] (0) ?x_0 : has_to_format tactic_state := int.has_to_format\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_to_format tactic_state := @with_top.has_to_format ?x_1 ?x_2\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_to_format tactic_state := @with_bot.has_to_format ?x_3 ?x_4\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_to_format tactic_state := tactic.rcases_patt.has_to_format\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_to_format tactic_state := tactic.rcases_patt_inverted.has_to_format\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_to_format tactic_state := @array.has_to_format ?x_5 ?x_6 ?x_7\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_to_format tactic_state := subsingleton_info.has_to_format\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_to_format tactic_state := fun_info.has_to_format\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_to_format tactic_state := param_info.has_to_format\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_to_format tactic_state := occurrences.has_to_format\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_to_format tactic_state := tactic_state.has_to_format\n</pre></div>\n\n\n<p>rofl</p>",
        "id": 161905782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553725499
    },
    {
        "content": "<p><code>with_top</code> very popular I see.</p>",
        "id": 161905805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553725520
    },
    {
        "content": "<p>All from the output of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 161905935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553725680
    },
    {
        "content": "<p>The instances added last get checked first. But this is usually not a problem, unification fails fast in these cases. The problem is if they match and the instance search runs in the wrong direction...</p>",
        "id": 161906005,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553725723
    },
    {
        "content": "<p>Aah I see.</p>",
        "id": 161906035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553725761
    },
    {
        "content": "<p>I had the same issue here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">class</span> <span class=\"n\">real_inner_product_space</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inner_axioms</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"c\">/-</span><span class=\"cm\"> (axioms omitted here) -/</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">is_normed_space</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">real_inner_product_space</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"c\">/-</span><span class=\"cm\"> This easy instance cannot be found any more (infinte loop):</span>\n<span class=\"cm\">[class_instances]  class-instance resolution trace</span>\n<span class=\"cm\">[class_instances] (0) ?x_0 : add_comm_group ℝ := @normed_group.to_add_comm_group ?x_1 ?x_2</span>\n<span class=\"cm\">[class_instances] (1) ?x_2 : normed_group ℝ := @normed_space.to_normed_group ?x_3 ?x_4 ?x_5 ?x_6</span>\n<span class=\"cm\">[class_instances] (2) ?x_6 : @normed_space ?x_3 ℝ ?x_5 := @is_normed_space ?x_7 ?x_8 ?x_9</span>\n<span class=\"cm\">[class_instances] (3) ?x_8 : add_comm_group ℝ := @normed_group.to_add_comm_group ?x_10 ?x_11</span>\n<span class=\"cm\">[class_instances] (4) ?x_11 : normed_group ℝ := @normed_space.to_normed_group ?x_12 ?x_13 ?x_14 ?x_15</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\"> -/</span>\n</pre></div>\n\n\n<p>My current workaround is to put <code>add_comm_group V</code> after <code>extends</code> in <code>real_inner_product_space</code>, i.e.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">real_inner_product_space</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>But of course this could lead to a messy hierarchy if I wanted to extend <code>real_inner_product_space</code> further.</p>",
        "id": 161986165,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1553802360
    },
    {
        "content": "<blockquote>\n<p>Another thing we need to change is actually Lean 3. We could fork Lean 3 and remove the ability to backtrack in Lean 3 and see what breaks in mathlib. This would make the type class search much easier.</p>\n</blockquote>\n<p>For what it's worth, GHC has no backtracking in instance search (even with GHC extensions) and it seems to work pretty well for Haskell. Hard to say if it would also work well for a project like mathlib of course.</p>",
        "id": 162106045,
        "sender_full_name": "Reid Barton",
        "timestamp": 1553924369
    },
    {
        "content": "<blockquote>\n<p>Results of a completely unscientific test; on this desktop, it took just under 15 minutes to compile mathlib HEAD, and then with the variable line in <code>data/int/basic.lean</code> changed to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_neg</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>(100% reversal) it took just under 14 minutes.</p>\n</blockquote>\n<p>Anyone who wants to merge <a href=\"https://github.com/leanprover-community/mathlib/issues/877\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/877\">#877</a>?</p>",
        "id": 162387567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554252097
    }
]