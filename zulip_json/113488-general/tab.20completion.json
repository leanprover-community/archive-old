[
    {
        "content": "<p>Here is a question that just came up in the lftcm session. Consider the following proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_le_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>At the <code>apply</code>, it would be helpful if we could start typing <code>sum_le</code> and have tab completion help. But in VS Code, with <code>sum_le</code>, tab completion returns nothing, and even <code>finset.sum_le_sum</code> doesn't find it. But then <code>sum_le_</code> finds the right fact.</p>\n<p>Has there been a discussion on Zulip before about tab completion's mysterious ways?</p>",
        "id": 204204649,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594992085
    },
    {
        "content": "<p>In my experience, tab completion only provides things that are in its \"cache\", and ctrl-space has to be relied on to access more completion options.</p>",
        "id": 204207468,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594993636
    },
    {
        "content": "<p>It'd be nice if the ctrl-space options defaulted to the first type-relevant item. Maybe they already do.</p>",
        "id": 204207536,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594993672
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> made a few threads about the suggestions in the ctrl+space menu. Note that these are all provided to the VS Code extension by the Lean server, so it might be useful to open an issue on the community Lean repo with some examples.</p>",
        "id": 204207632,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594993720
    },
    {
        "content": "<p>Indeed, ctrl+space helps. That's good to know.</p>",
        "id": 204224629,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1595001699
    }
]