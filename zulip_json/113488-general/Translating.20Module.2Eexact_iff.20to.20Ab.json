[
    {
        "content": "<p>Hi, I am trying to prove the equivalent statement to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module.exact_iff\">docs#Module.exact_iff</a> for <code>AddCommGroup</code> instead of <code>Module</code>, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exact_iff</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⟶</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⟶</span> <span class=\"n\">O</span><span class=\"o\">):</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"n\">f.range</span> <span class=\"bp\">=</span> <span class=\"n\">g.ker</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If you can explain me why this isn't needed or how to do it with the forgetful functor from <code>Module \\Z</code>, I'd be very grateful.<br>\nFor now, I thought I'll have to translate the proof, which involves first getting the respective statements for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module.kernel_cone\">docs#Module.kernel_cone</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module.kernel_is_limit\">docs#Module.kernel_is_limit</a> etc.<br>\n<span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>  It seems you have written this for <code>Module</code>. What yould you recommend?</p>",
        "id": 273634913,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646139068
    },
    {
        "content": "<p>I would prove that an equivalences of categories preserves exactness (that it's relevant in its own). Then I <em>suppose</em> we know that the forgetful functor is an equivalence. But it's very possible there is a shorter way.</p>",
        "id": 273635554,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646139354
    },
    {
        "content": "<p>yes, we do know that</p>",
        "id": 273635835,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646139485
    },
    {
        "content": "<p>If you know that the forgetful functor preserves and reflects exact sequences then it should be easy</p>",
        "id": 273635910,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1646139527
    },
    {
        "content": "<p>So this is a good reason to finish my review of <a href=\"https://github.com/leanprover-community/mathlib/pull/12071\">#12071</a></p>",
        "id": 273636378,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646139678
    },
    {
        "content": "<p>uhh, nice!</p>",
        "id": 273636532,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646139773
    },
    {
        "content": "<p>So I really suggest to prove the general about equivalences of categories, and use it.</p>",
        "id": 273637343,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646140185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210057\">@Fabian Glöckle</span> <code>AddCommGroup.exact_iff</code> is already in LTE.</p>",
        "id": 273668581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646152307
    },
    {
        "content": "<p>ohh</p>",
        "id": 273669007,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646152477
    },
    {
        "content": "<p>wait, doesn't VSCode Ctrl-T search your own <code>src/</code> as well?</p>",
        "id": 273669074,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646152508
    },
    {
        "content": "<p>Je ne sais pas. But I think you want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">AddCommGroup</span><span class=\"bp\">/</span><span class=\"n\">exact.lean</span>\n<span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"kd\">theorem</span> <span class=\"n\">exact_iff</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"n\">f.range</span> <span class=\"bp\">=</span> <span class=\"n\">g.ker</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 273669283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646152579
    },
    {
        "content": "<p>yes yes I've found it</p>",
        "id": 273669361,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646152612
    },
    {
        "content": "<p>but I thought I had checked in advance what's there</p>",
        "id": 273669391,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646152626
    },
    {
        "content": "<p>so do you grep your repo to find lemmas others have written or do you all just have a very good overview over what's there?</p>",
        "id": 273669471,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646152660
    },
    {
        "content": "<p>and so you did rewrite the <code>def kernel_is_limit : is_limit (kernel_cone f)</code> :D</p>",
        "id": 273669577,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646152689
    },
    {
        "content": "<p>thank you a lot<br>\nthat saved me a bunch of time!</p>",
        "id": 273669631,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646152711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210057\">Fabian Glöckle</span> <a href=\"#narrow/stream/113488-general/topic/Translating.20Module.2Eexact_iff.20to.20Ab/near/273669471\">said</a>:</p>\n<blockquote>\n<p>so do you grep your repo to find lemmas others have written or do you all just have a very good overview over what's there?</p>\n</blockquote>\n<p>both (-;</p>",
        "id": 273680146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646156401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> If you're happy with <a href=\"https://github.com/leanprover-community/mathlib/pull/12071\">#12071</a> don't forget to merge it!</p>",
        "id": 274042624,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646342820
    }
]