[
    {
        "content": "<p>Should we have special predicates for equivalent <code>a ≤ b ∧ b ≤ a</code> and incomparable <code>¬ a ≤ b ∧ ¬ b ≤ a</code> elements in a preorder?</p>",
        "id": 288841122,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657216053
    },
    {
        "content": "<p>I raise this because in a preorder, there's four ways that two things can compare as: less than, greater than, equivalent, or incomparable</p>",
        "id": 288841181,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657216079
    },
    {
        "content": "<p>And these are mutually exclusive</p>",
        "id": 288841241,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657216091
    },
    {
        "content": "<p>I'm coding a preorder analog for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cmp\">docs#cmp</a>, which I'm planning to use throughout the game API, and I'm wondering if I should be writing these conditions in full</p>",
        "id": 288841297,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657216128
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/antisymm_rel\">docs#antisymm_rel</a></p>",
        "id": 288841465,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657216205
    },
    {
        "content": "<p>I was thinking yesterday that I should rename this to <code>order.indistinguishable</code>.</p>",
        "id": 288841541,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657216242
    },
    {
        "content": "<p>Oh nice, so I should use <code>antisymm_rel (≤)</code>?</p>",
        "id": 288841872,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657216365
    },
    {
        "content": "<p>At least you can!</p>",
        "id": 288842009,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657216419
    },
    {
        "content": "<p>Oh darn it, I actually can't</p>",
        "id": 288842583,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657216627
    },
    {
        "content": "<p>Cyclic import</p>",
        "id": 288842591,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657216629
    },
    {
        "content": "<p>I'm going to try something</p>",
        "id": 288842873,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657216731
    },
    {
        "content": "<p>Feel free to move <code>antisymm_rel</code> earlier.</p>",
        "id": 288843590,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657217036
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15168\">#15168</a></p>",
        "id": 288846080,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657218161
    },
    {
        "content": "<p>I moved <code>antisymm_rel</code> to a new file earlier in the import chain, and defined <code>incomp_rel</code> along with it</p>",
        "id": 288846140,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657218187
    }
]