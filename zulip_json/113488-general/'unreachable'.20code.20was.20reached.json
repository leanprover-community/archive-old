[
    {
        "content": "<p>This produces an error message I've never seen before on the <code>{</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">is_unital</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">is_left_id</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">is_right_id</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">e.</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_one_class.is_unital</span> <span class=\"o\">[</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">mul_one_class</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_unital</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">left_id</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">right_id</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span> <span class=\"o\">}</span>\n</code></pre></div>\n<blockquote>\n<p>'unreachable' code was reached</p>\n</blockquote>",
        "id": 236159036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619437552
    },
    {
        "content": "<p>Oh classy! That one used to show up all the time, until Gabriel hacked core Lean to make it go away. I've not seen it for years!</p>",
        "id": 236159332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619437698
    },
    {
        "content": "<p>There are still about 100 <code>lean_unreachable()</code> calls in lean core, so it's not entirely clear which one is being hit here</p>",
        "id": 236159458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619437781
    },
    {
        "content": "<p>It looks like if you have a debug build of lean it actually shows file/line numbers</p>",
        "id": 236159524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619437808
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">File</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">frontends</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">elaborator.cpp</span>\n<span class=\"n\">Line</span><span class=\"o\">:</span> <span class=\"mi\">3025</span>\n</code></pre></div>",
        "id": 236163714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619439815
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/af06b6aab669edfee7e310c5eab4c948bba173bb/src/frontends/lean/elaborator.cpp#L3025\">https://github.com/leanprover-community/lean/blob/af06b6aab669edfee7e310c5eab4c948bba173bb/src/frontends/lean/elaborator.cpp#L3025</a></p>",
        "id": 236165562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619440678
    },
    {
        "content": "<p>I have this issue where having an encodable instance causes the 'unreachable' code was reached error. Here's the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bottom</span> <span class=\"o\">:</span> <span class=\"n\">Form</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">vars</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_bot</span> <span class=\"o\">(</span><span class=\"n\">Form</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Form.Bottom</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Form.Var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>However if I reorder it as below, the error disappears:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bottom</span> <span class=\"o\">:</span> <span class=\"n\">Form</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_bot</span> <span class=\"o\">(</span><span class=\"n\">Form</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Form.Bottom</span><span class=\"o\">⟩</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">vars</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Form.Var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 269621726,
        "sender_full_name": "Alyssa Renata",
        "timestamp": 1643310351
    },
    {
        "content": "<p>Alyssa is on my course and this is her first coursework :-/</p>",
        "id": 269621994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643310478
    },
    {
        "content": "<p>Mathlib-free:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bottom</span> <span class=\"o\">:</span> <span class=\"n\">Form</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">vars</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_bot</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`⊥`</span> <span class=\"o\">:=</span> <span class=\"n\">has_bot.bot</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pattern</span><span class=\"o\">]</span> <span class=\"n\">has_bot.bot</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_bot</span> <span class=\"o\">(</span><span class=\"n\">Form</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Form.Bottom</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"c1\">-- 'unreachable' code was reached</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Form.Var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 269624605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643311650
    },
    {
        "content": "<p>If you use a type in a definition or a lemma, then lean pulls all instances from variables for this type</p>",
        "id": 269968767,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643590605
    },
    {
        "content": "<p>Probably unused args cause the trouble later because lean can't unify them</p>",
        "id": 269968843,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643590689
    },
    {
        "content": "<p>This is just a guess</p>",
        "id": 269968848,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643590702
    },
    {
        "content": "<p>I get this error in <code>refl_zero</code>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">dependent</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">dependent</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">dependent</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">dependent</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">ᵈ</span><span class=\"o\">::</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"o\">:=</span> <span class=\"n\">list.dependent.cons</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`ᵈ</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">list.dependent.cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">list.dependent.nil</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">function_type</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>        <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">function_type</span> <span class=\"n\">tl</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">function_type.equiv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"n\">args.dependent</span> <span class=\"n\">setoid</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">),</span>\n  <span class=\"n\">function_type</span> <span class=\"n\">args</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">function_type</span> <span class=\"n\">args</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"bp\">ᵈ</span><span class=\"o\">[]</span>      <span class=\"n\">β</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:=</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᵈ</span><span class=\"o\">::</span><span class=\"n\">ss</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">s.r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">function_type.equiv</span> <span class=\"n\">ss</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">refl_zero</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function_type.equiv</span> <span class=\"n\">list.dependent.nil</span> <span class=\"n\">β</span> <span class=\"n\">b</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n</div></div>\n<p>I have to write <code>by { dsimp [function_type.equiv], refl }</code> to get rid of this error.</p>",
        "id": 321747468,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1673924874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span> A simpler workaround is <code>by exact rfl</code>.</p>\n<p>This \"unreachable code was reached\" error comes from a small bug that likely won't be fixed since this workaround exists. <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/simp_lemmas.cpp#L887\">Here's the line</a> that raises the alarm. I haven't done an in-depth analysis, but here is what I believe is going on: First, there is a feature in Lean called a \"rfl lemma.\" These are lemmas that <code>dsimp</code> is allowed to use, since any equality that is provable by <code>rfl</code> is a definitional equality. The way Lean determines what is a rfl lemma is by looking at the literal proof and seeing if it's <code>rfl</code> or <code>iff.rfl</code> (so your lemma is a rfl lemma due to this check). Then this part of the code is checking whether this rfl lemma is an iff or an equality, since both of these are handled a little differently, and once processed they're added to the list of rfl lemmas. However, your lemma produces a <code>function_type.equiv</code>, which is neither, so this supposedly unreachable code on line 887 is reached.</p>\n<p>By using <code>by exact rfl</code> instead, the proof isn't literally <code>rfl</code>, so then Lean doesn't think it's a rfl lemma, and so it doesn't try processing it as one.</p>",
        "id": 321786158,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673947656
    },
    {
        "content": "<p>Is this possible to reproduce with something like <code>1 ∈ [1] := rfl</code>?</p>",
        "id": 321810319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673955683
    },
    {
        "content": "<p>Yeah, it's easy to come up with something that reproduces it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">blah</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">blah</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Note that it also reports \"not a rfl-lemma, even though marked as rfl\" in addition to \"'unreachable' code was reached\". Removing the <code>@[simp]</code> causes it to report just the \"not a rfl-lemma\" error.</p>",
        "id": 321850998,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673967673
    }
]