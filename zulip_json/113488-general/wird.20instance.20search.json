[
    {
        "content": "<p>It's been a long time, but I don't understand what is going on with a typeclass search. Unfortunately, I haven't a mwe. In the file <code>topology/uniform_space/pi</code>, we have an instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">complete</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Since this instance fails to fire in non-dependent situations, I have added just below a new instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">complete_nondep</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">complete</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Then, let's open a new file, and paste</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>The instance search fails because it reaches the maximum recursion level. The trace starts with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span>  <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">metric_space.to_uniform_space'</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_pseudo_metric_space</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_2</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">metric_space.to_uniform_space'</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_pseudo_metric_space</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">complete_nondep</span> <span class=\"bp\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">?</span><span class=\"n\">x_3</span> <span class=\"bp\">?</span><span class=\"n\">x_4</span> <span class=\"bp\">?</span><span class=\"n\">x_5</span> <span class=\"bp\">?</span><span class=\"n\">x_6</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">complete_space</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_uniform_space'</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_pseudo_metric_space</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_2</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"n\">caching</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span> <span class=\"bp\">@</span><span class=\"n\">complete_space</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_uniform_space'</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_pseudo_metric_space</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n<span class=\"n\">_inst_2</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_3</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_2</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_7</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_8</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_9</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_3</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_2</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">uniform_space.separation_quotient.uniform_space</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_10</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_11</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_11</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_10</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_12</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_13</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_14</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_11</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_10</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">uniform_space.separation_quotient.uniform_space</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_15</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_16</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then starts repeating itself. </p>\n<p>Am I doing something wrong here? My new instance seems perfectly reasonable to me...</p>",
        "id": 270296304,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643753329
    },
    {
        "content": "<p>Sorry, please ignore.</p>",
        "id": 270296644,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643753475
    }
]