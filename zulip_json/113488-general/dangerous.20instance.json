[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra_tower</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">is_algebra_tower</span><span class=\"bp\">.</span><span class=\"n\">of_ring_hom</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_algebra_tower</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">to_algebra</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_algebra</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">is_algebra_tower</span><span class=\"bp\">.</span><span class=\"n\">of_algebra_map_eq</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">commutes</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">/- Checking 1 declarations (plus 1 automatically generated ones) in the current file -/</span>\n\n<span class=\"cm\">/- The `instance_priority` linter reports: -/</span>\n<span class=\"cm\">/- DANGEROUS INSTANCE PRIORITIES.</span>\n<span class=\"cm\">The following instances always apply, and therefore should have a priority &lt; 1000.</span>\n<span class=\"cm\">If you don&#39;t know what priority to choose, use priority 100.</span>\n\n<span class=\"cm\">If this is an automatically generated instance (using the keywords `class` and `extends`),</span>\n<span class=\"cm\">see note [lower instance priority] and see note [default priority] for instructions to change the priority: -/</span>\n<span class=\"cm\">#print is_algebra_tower.of_ring_hom /- set priority below 1000 -/</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 205626749,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596221078
    },
    {
        "content": "<p>why is this a dangerous instance?</p>",
        "id": 205626768,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596221085
    },
    {
        "content": "<p>given R-algebras A and B, and an R-alg hom f : A -&gt; B, this is asserting that R, A, B form an algebra tower</p>",
        "id": 205626811,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596221105
    },
    {
        "content": "<p>where the structure of A-algebra on B is given by f</p>",
        "id": 205626840,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596221115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 205628595,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596221939
    },
    {
        "content": "<p>Johan is away for the next two weeks</p>",
        "id": 205628821,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596222069
    },
    {
        "content": "<p>oh</p>",
        "id": 205629133,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596222244
    },
    {
        "content": "<p>would you know why linter didn't like my instance?</p>",
        "id": 205629146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596222259
    },
    {
        "content": "<p>is <code>(ring_hom.to_algebra f)</code> appearing as a <code>[]</code> argument?</p>",
        "id": 205629273,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596222343
    },
    {
        "content": "<p>that might be how the linter decides whether the instance matches on any variables</p>",
        "id": 205629415,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596222420
    },
    {
        "content": "<p>only check <code>()</code> variables</p>",
        "id": 205629422,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596222426
    },
    {
        "content": "<p>I'm just speculating though.</p>",
        "id": 205629515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596222483
    },
    {
        "content": "<p>so is that a bug?</p>",
        "id": 205629627,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596222572
    },
    {
        "content": "<p>Probably not, but it doesn't necessarily mean your instance is bad</p>",
        "id": 205629734,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596222634
    },
    {
        "content": "<p>The linter does not say it is a bad instance, only that the priority should be lowered to 100 because this is an instance that always applies.</p>",
        "id": 205635118,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596225375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> but it doesn't always apply right</p>",
        "id": 205637568,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596226956
    },
    {
        "content": "<p>it's specifically for <code>ring_hom.to_algebra</code></p>",
        "id": 205637575,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596226966
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> knows whether this instance is actually bad for lean.</p>",
        "id": 205639508,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596228187
    },
    {
        "content": "<p>What are all the stub arguments in the instance?</p>",
        "id": 205653747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596240202
    },
    {
        "content": "<p>Looking at the linter source, it looks like <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> is correct. Any variables appearing in instance arguments are ignored for the purpose of determining if an instance \"always applies\"</p>",
        "id": 205653981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596240419
    },
    {
        "content": "<p>all arguments to <code>is_algebra_tower</code> are instance arguments except <code>R A B</code></p>",
        "id": 205654099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596240553
    },
    {
        "content": "<p>I think it should be fine either way. You could either decrease the priority like it suggests, or <code>@[nolint instance_priority]</code></p>",
        "id": 205654239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596240664
    },
    {
        "content": "<p>Although it is worth considering what you want to happen if this instance is competing with an instance for e.g. <code>is_algebra_tower A (B x C) D</code></p>",
        "id": 205654280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596240721
    },
    {
        "content": "<p>The question is whether Lean quickly decides that it can't apply this instance if <code>[algebra]</code> structure on <code>B</code> is not given by <code>ring_hom.to_algebra _</code>.</p>",
        "id": 205660354,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596250264
    },
    {
        "content": "<p>If yes, then this is a false positive of the linter.</p>",
        "id": 205660358,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596250293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/dangerous.20instance/near/205654280\">said</a>:</p>\n<blockquote>\n<p>Although it is worth considering what you want to happen if this instance is competing with an instance for e.g. <code>is_algebra_tower A (B x C) D</code></p>\n</blockquote>\n<p>the point is that it will not, because then <code>f</code> would have to have type <code>B \\times C \\ra[A] D</code></p>",
        "id": 205665256,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596258951
    },
    {
        "content": "<p>Have you tried using this instance? Does Lean even apply it?</p>\n<p>I'm worried that a typical case in which type-class inference for <code>is_algebra_tower</code> has to fire is when Lean knows the first 3 (explicit) arguments and doesn't know the last 6 (instance) arguments, so it needs to find an instance for <code>@is_algebra_tower R A B ?m1 ?m2 ?m3 ?m4 ?m5 ?m6</code>. In that case, this instance will happily unify, by setting <code>?m5 := ring_hom.to_algebra ?f</code>. However, there is no way that <code>?f</code> can be figured out by Lean.</p>\n<p>I guess if Lean has to figure out something of the form <code>@is_algebra_tower R A B ?m1 ?m2 ?m3 ?m4 (ring_hom.to_algebra f) ?m6</code>, then this instance is useful, but I don't know when this actually happens (Lean infers type-class arguments from right to left, so how did it already know one of the type-class arguments?</p>",
        "id": 205668917,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596265349
    }
]