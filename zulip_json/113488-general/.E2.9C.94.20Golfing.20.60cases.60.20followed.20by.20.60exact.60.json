[
    {
        "content": "<p>I often write tactic mode proofs that end in <code>cases</code> and <code>exact</code>, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"c1\">-- hx: ∃ (a : ℤ) ...</span>\n<span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"bp\">$</span> <span class=\"n\">sub_one_lt</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"c1\">-- ⊢ ∃ (a : ℤ) ...</span>\n</code></pre></div>\n<p>What's the equivalent in term-mode? Is there a way to combine the two lines?</p>",
        "id": 273028933,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1645660512
    },
    {
        "content": "<p>It depends what the type of <code>hx</code> is</p>",
        "id": 273028982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645660549
    },
    {
        "content": "<p><code>refine h.imp _</code> might work there</p>",
        "id": 273029009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645660562
    },
    {
        "content": "<p>It's an existential.</p>",
        "id": 273029037,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1645660563
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 273029074,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1645660590
    },
    {
        "content": "<p>is the tactic state.</p>",
        "id": 273029081,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1645660596
    },
    {
        "content": "<p><code>Exists.imp</code> was indeed what I wanted. Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>!</p>",
        "id": 273030422,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1645661462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457867\">Dylan MacKenzie (ecstatic-morse)</span> has marked this topic as resolved.</p>",
        "id": 273030431,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645661467
    },
    {
        "content": "<p>The general answer is of course that there's isn't always such a function</p>",
        "id": 273030468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645661495
    },
    {
        "content": "<p>But you can write <code>let ⟨a, ha⟩  := hx in ...</code> to do cases in term mode.</p>",
        "id": 273030498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645661522
    }
]