[
    {
        "content": "<p>What do you think about replacing all our <code>has_subset</code> instances with the following generic instance?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"n\">has_mem</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 269794922,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643400574
    },
    {
        "content": "<p>(and similarly for <code>has_ssubset</code>)</p>",
        "id": 269794946,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643400586
    },
    {
        "content": "<p>Are you aware of <a href=\"https://github.com/leanprover-community/mathlib/pull/11381\">#11381</a>?</p>",
        "id": 269795221,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643400703
    },
    {
        "content": "<p>It's a less hardcoding proposition to make more lemmas available cross-structure</p>",
        "id": 269795331,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643400742
    },
    {
        "content": "<p>The only problem I see is that there are still a few lemmas that can't be generalized (although arguably not that much and not the important ones) and that I get elaboration issues as <code>⊆</code> acts like a function.</p>",
        "id": 269795502,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643400832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> might actually have things to say</p>",
        "id": 269795542,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643400842
    },
    {
        "content": "<p>Sorry to ping you virtually everywhere <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 269795597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643400871
    },
    {
        "content": "<p>I'm aware of <a href=\"https://github.com/leanprover-community/mathlib/pull/11381\">#11381</a> but I think that our current <code>has_subset</code>/<code>has_ssubset</code> are too general: all instances I know about have this generic form.</p>",
        "id": 269799881,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643402725
    },
    {
        "content": "<p>So, we can actually replace <code>subset</code>/<code>ssubset</code> with <code>def</code>s in terms of <code>has_mem</code>.</p>",
        "id": 269799917,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643402749
    },
    {
        "content": "<p>or just a general instance in terms of <code>has_mem</code>?</p>",
        "id": 269799981,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643402767
    },
    {
        "content": "<p>Thinking again, that's probably not a good idea to trigger typeclass search when there's only one satisfying typeclass.</p>",
        "id": 269800043,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643402815
    },
    {
        "content": "<p>If we're going to have only one instance, then I prefer a <code>def</code>.</p>",
        "id": 269800198,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643402887
    },
    {
        "content": "<p>One thing you have to consider is whether we'll ever need definitional properties for <code>⊂</code>.</p>",
        "id": 269800318,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643402954
    },
    {
        "content": "<p>I think not</p>",
        "id": 269800327,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643402960
    },
    {
        "content": "<p>But I would prefer to hear from people who work on core and on Lean 4 migration.</p>",
        "id": 269800341,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643402964
    },
    {
        "content": "<p>I think that the correct question is: will we ever need an instance of <code>has_ssubset</code> that is not defeq to \"subset and not subset\".</p>",
        "id": 269800450,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643403005
    },
    {
        "content": "<p>Do we have many instances of lt which are not defeq to le_and_not_le?</p>",
        "id": 269850393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643446336
    },
    {
        "content": "<p>Lots. Notably, every time you make <code>&lt;=</code> and <code>&lt;</code> primitive on a new type, eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum.has_lt\">docs#sum.has_lt</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma\">docs#sigma</a><br>\nhas_lt, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum.lex.has_lt\">docs#sum.lex.has_lt</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma.lex.has_lt\">docs#sigma.lex.has_lt</a>. There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.colex\">docs#finset.colex</a> whose <code>&lt;</code> is primitive and <code>&lt;=</code> derived.</p>",
        "id": 269858834,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643456700
    },
    {
        "content": "<p>Oh -- I had imagined that people would in practice be using the autoparam to fill in the field in <code>preorder</code></p>",
        "id": 269865059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643463849
    },
    {
        "content": "<p>They do, but only when you can't lift <code>&lt;</code> itself.</p>",
        "id": 269865557,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643464367
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.partial_order\">docs#complex.partial_order</a></p>",
        "id": 269872456,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643472128
    },
    {
        "content": "<p>For what it's worth, <code>instance</code> does nothing with <code>out_param</code>s: the elaborator checks for <code>out_param</code> in the class before the first instance of a search is tried. (And I should have fixed <code>out_param</code> instance parameters in one of the lean 3.35-3.37 releases, so that <code>β : out_param Type</code> implies that <code>has_mem β α</code> is effectively also an <code>out_param</code>.) So since <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_mem\">docs#has_mem</a> already has <code>β</code> as <code>out_param</code>, we can just write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 270011700,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643626047
    },
    {
        "content": "<p>I would replace the <code>has_mem</code> constraint with <code>set_like</code> instead, since <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_like.partial_order\">docs#set_like.partial_order</a> already provides the correct definition for <code>≤</code> and makes <code>&lt;</code> defeq to <code>≤</code> and not <code>≥</code>.</p>",
        "id": 270012240,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643626309
    },
    {
        "content": "<p>So my proposal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨(</span><span class=\"bp\">≤</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_ssubset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨(</span><span class=\"bp\">&lt;</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 270012337,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643626350
    },
    {
        "content": "<p>These instances don't work, e.g., for <code>list</code>s.</p>",
        "id": 270046636,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643641974
    },
    {
        "content": "<p>Nor <code>multiset</code></p>",
        "id": 270046765,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643642030
    },
    {
        "content": "<p>Those can still have their own instances, no?</p>",
        "id": 270049486,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643643057
    },
    {
        "content": "<p>My idea was to either unify all instances of <code>has_subset</code>/<code>has_ssubset</code>, or to replace them with <code>def</code>s.</p>",
        "id": 270051751,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643643822
    },
    {
        "content": "<p>BTW, does it make sense to have <code>set_like (set α)</code>?</p>",
        "id": 270051925,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643643874
    },
    {
        "content": "<p>I mean, will it create any strange instances?</p>",
        "id": 270051984,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643643898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Generic.20.60has_subset.60.3F/near/270051751\">said</a>:</p>\n<blockquote>\n<p>My idea was to either unify all instances of <code>has_subset</code>/<code>has_ssubset</code>, or to replace them with <code>def</code>s.</p>\n</blockquote>\n<p>I see, then your proposal also looks good to me!</p>",
        "id": 270052258,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643643973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Generic.20.60has_subset.60.3F/near/270051925\">said</a>:</p>\n<blockquote>\n<p>BTW, does it make sense to have <code>set_like (set α)</code>?</p>\n</blockquote>\n<p>If it's like <code>fun_like (α → β)</code>, then it might insert some unnecessary <code>coe : set α → set α</code>. Otherwise I didn't see any real weirdnesses.</p>",
        "id": 270052530,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643644060
    },
    {
        "content": "<p>/poll What should we do with <code>has_subset</code>/<code>has_ssubset</code>?<br>\nLeave them as is<br>\nAdd generic instances and use them instead of type-specific ones<br>\nReplace with <code>def</code>s</p>",
        "id": 270065140,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643648250
    },
    {
        "content": "<p>Actually, couldn't we generalize even more and allow an heterogenous <code>subset</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 271708190,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644697626
    },
    {
        "content": "<p>Doing so, we wouldn't have to rely on the coercion to sets to compare finsets and lists, for example.</p>",
        "id": 271708277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644697771
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_subset\">docs#has_subset</a> used anywhere in core Lean?</p>",
        "id": 271708463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644698030
    },
    {
        "content": "<p>I get the feeling making it heterogenous would be a bad idea</p>",
        "id": 271708805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644698626
    },
    {
        "content": "<p>As then things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.subset\">docs#set.finite.subset</a> wouldn't obviously apply if one of your sets is a finset</p>",
        "id": 271708864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644698682
    },
    {
        "content": "<p>What does <code>set.finite.subset</code> have to do with anything? This statement wouldn't change, right?</p>",
        "id": 271709081,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644699009
    },
    {
        "content": "<p>Sure the statement would be the same, but the hypothesis would be harder to satisfy</p>",
        "id": 271714635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644707273
    },
    {
        "content": "<p>As now someone would have likely have <code>fs ⊆ s</code>, but need to produce <code>(↑fs : set _) ⊆ s</code> to apply the lemma. They're probably defeq, but I don't think <code>library_search</code> will know that.</p>",
        "id": 271714679,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644707307
    },
    {
        "content": "<p>My point is that probably all useful lemmas will be stated about the homogenous version, and so the heterogeneous version will just be harder to work with for little benefit</p>",
        "id": 271714708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644707381
    }
]