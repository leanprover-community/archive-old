[
    {
        "content": "<p>i'm trying to understand the proof of subtype eq of value eq (at a primitive level using recursors/rewrites).<br>\nthe kernel terms of the library proofs weren't all that insightful.</p>\n<p>when trying it myself, i ran into the following issue:<br>\nthe idea is to start with <code>eq.refl (subtype.mk a_val a_property)</code> and rewrite the second part of the equality type.<br>\nthe issue is, trying to rewrite it to <code>eq  (subtype.mk a_val a_property) (subtype.mk **b_val** a_property)</code> using <code>a_val = b_val</code> results in a type error. <code>a_property: P a_val</code>, not <code>P b_val</code>. since <code>a_val = b_val</code> these types are the same, but i'm not sure how to tell lean that. in a way, i'd have to rewrite both <code>a_val</code> and <code>a_property</code> to <code>b_val</code> and <code>b_property</code> simultaneously.</p>\n<p>this is what i tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subtype.eq_of_value_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">P</span><span class=\"o\">):</span> <span class=\"n\">a.val</span> <span class=\"bp\">=</span> <span class=\"n\">b.val</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">eq.refl</span> <span class=\"o\">(</span><span class=\"n\">subtype.mk</span> <span class=\"n\">a_val</span> <span class=\"n\">a_property</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">heq'</span><span class=\"o\">:</span> <span class=\"n\">a_val</span> <span class=\"bp\">=</span> <span class=\"n\">b_val</span> <span class=\"o\">:=</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">heq'</span> <span class=\"n\">at</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 303409241,
        "sender_full_name": "Leonard Wigman",
        "timestamp": 1665488683
    },
    {
        "content": "<p>the general question here is:<br>\nif i have a structure with dependent fields (<code>foo: A, bar: B[foo]</code>), and i have two values <code>foo', bar'</code> and proofs that <code>foo = foo'</code>, <code>bar = bar'</code>, how do i rewrite both in the term <code>{ foo, bar }</code>?</p>",
        "id": 303409880,
        "sender_full_name": "Leonard Wigman",
        "timestamp": 1665488925
    },
    {
        "content": "<p>the issue being that neither can really be replaced individually, due to their dependence at type level.</p>",
        "id": 303409986,
        "sender_full_name": "Leonard Wigman",
        "timestamp": 1665488972
    },
    {
        "content": "<p>there's probably some trick to do that kind of thing that i'm not aware of.</p>",
        "id": 303410039,
        "sender_full_name": "Leonard Wigman",
        "timestamp": 1665488992
    },
    {
        "content": "<p>You can use <code>subst heq'</code> instead of <code>rw</code>.</p>",
        "id": 303410826,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665489301
    },
    {
        "content": "<p>Another option is to <code>congr</code> and then force your way out.<br>\nAlso, you should not be able to obtain <code>bar = bar'</code> since the types are not definitionally equal.<br>\nThe best you could have is <code>bar == bar'</code>.</p>",
        "id": 303411796,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665489626
    },
    {
        "content": "<p>huh, that works indeed.<br>\nbut presumably only because of proof irrelevance.</p>\n<p>how would this work if <code>a_property</code> wasn't a <code>Prop</code> and i instead had a proof <code>a_property = b_property</code>?<br>\ncould i give subst both equality proofs?</p>",
        "id": 303411891,
        "sender_full_name": "Leonard Wigman",
        "timestamp": 1665489653
    },
    {
        "content": "<p>If you had a proof <code>a_property == b_property</code>, then after <code>subst heq'</code> both sides will have the same type, and you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/heq_iff_eq\">docs#heq_iff_eq</a> to turn it into an eq that can then be used to rewrite.</p>",
        "id": 303422477,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665489858
    },
    {
        "content": "<p>ok, thanks! <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>",
        "id": 303424263,
        "sender_full_name": "Leonard Wigman",
        "timestamp": 1665490273
    },
    {
        "content": "<p>ok, i figured out what's going on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Subtype.eq_of_value_eq'</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">v1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">v2</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"bp\">=</span> <span class=\"n\">v2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Subtype.mk</span> <span class=\"n\">v1</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">Subtype.mk</span> <span class=\"n\">v2</span> <span class=\"n\">p2</span>\n<span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">heq</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">@</span><span class=\"n\">Eq.rec</span> <span class=\"n\">T</span> <span class=\"n\">v1</span>\n      <span class=\"c1\">-- this takes `p2` of type `P v2` to avoid the type error.</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">v2</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">forall</span> <span class=\"n\">p2</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">Subtype.mk</span> <span class=\"n\">v1</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">Subtype.mk</span> <span class=\"n\">v2</span> <span class=\"n\">p2</span><span class=\"o\">)</span>\n      <span class=\"c1\">-- this is expected to yield `{v1, p1} = {v1, p2}`, which is def-eq by proof irrelevance.</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"n\">Subtype.mk</span> <span class=\"n\">v1</span> <span class=\"n\">p1</span><span class=\"o\">))</span>\n      <span class=\"n\">v2</span>\n      <span class=\"n\">heq</span>\n      <span class=\"n\">p2</span>\n</code></pre></div>\n<p>without proof irrelevance, the motive would look like this:<br>\n<code>fun v2 _ =&gt; forall p2: P v2, HEq p1 p2 -&gt; Subtype.mk v1 p1 = Subtype.mk v2 p2)</code></p>\n<p>so instead of replacing things simultaneously, it does work sequentially, but you have to \"feed the later fields and proofs through the motive\" to make sure the types work out.</p>",
        "id": 303438554,
        "sender_full_name": "Leonard Wigman",
        "timestamp": 1665495231
    },
    {
        "content": "<p>this \"feed through\" thing essentially rewrites the types of the other fields.<br>\nwhich is the issue i had initially - that the second field's type would cause issues.</p>",
        "id": 303439199,
        "sender_full_name": "Leonard Wigman",
        "timestamp": 1665495422
    },
    {
        "content": "<p>You can try the \"without proof irrelevance\" version by playing the same game with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma\">docs#sigma</a> (the lemma you're proving is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma.ext\">docs#sigma.ext</a>)</p>",
        "id": 303495498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665512787
    }
]