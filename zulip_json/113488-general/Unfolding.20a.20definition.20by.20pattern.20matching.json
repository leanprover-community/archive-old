[
    {
        "content": "<p>Can someone please enlighten me on how to fill in the <code>sorry</code> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_matrix</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_matrix_def_not_the_first_row</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">my_matrix</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- delta my_matrix,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>delta my_matrix</code> makes progress, but I'm still lost.<br>\nIs there a better/easier to work with way of defining something like <code>my_matrix</code>?</p>",
        "id": 223162237,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1611002625
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_matrix</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_matrix_def_not_the_first_row</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ipos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">my_matrix</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">my_matrix</span><span class=\"o\">,</span> <span class=\"n\">ipos.symm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 223166617,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611006813
    },
    {
        "content": "<p>A <code>matrix</code> is just a function \"of two arguments\", which in functional programming is a function that produces another function that produces a value</p>",
        "id": 223166695,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611006873
    },
    {
        "content": "<p>You won't be working with matrices of <code>fin 0</code>, so I already defined your <code>my_matrix</code> to work on matrices of dimenions at least 1.</p>",
        "id": 223166716,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611006904
    },
    {
        "content": "<p>That allows using the <code>0</code>  that is available for all <code>fin (n + 1)</code>. Additionally, it gets rid of the <code>(hn : 0 &lt; n)</code> in your lemma</p>",
        "id": 223166806,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611006965
    },
    {
        "content": "<p>Then, in the proof, I can <code>rw my_matrix</code>, which makes it into an <code>ite</code> on some arbitrary <code>i</code> and <code>j</code>. I could have <code>simp only</code> to do beta reduction, then <code>split_ifs</code> to split into the <code>i = 0</code> and <code>i \\ne 0</code> cases, show a contradiction in the first, etc... Or done <code>rw if_neg ipos.symm</code> to do that in one go... Or just do all of these steps in a single <code>simp</code> call like above.</p>",
        "id": 223166971,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611007176
    },
    {
        "content": "<p>Hey what have you got against the 0x0 matrix?</p>",
        "id": 223170538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611010085
    },
    {
        "content": "<p>You're right Kevin. So here is a formalization following exactly the definition provided by Paul:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_matrix</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_matrix_def_not_the_first_row</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">my_matrix</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">fin_zero_elim</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h0</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">my_matrix</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223171288,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611010877
    },
    {
        "content": "<p>Unfolding/rewriting an equation-compiler definition requires getting the expression where the definition is used to be in the same form as how the equation compiler has it.</p>",
        "id": 223171324,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611010918
    },
    {
        "content": "<p>So I break down the <code>i</code> into a <code>⟨0, _⟩</code> or <code>⟨i.succ, _⟩</code> form.</p>",
        "id": 223171398,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611010963
    },
    {
        "content": "<p>The first contradictory case can be discharged with either contradiction based on <code>0 &lt; 0</code> or that having a term of <code>fin 0</code> is already contradictory.</p>",
        "id": 223171438,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611011007
    },
    {
        "content": "<p>The second contradictory case is based on how inequality of subtypes means inequalities of values, so <code>0 ≠ 0</code> will follow from <code>h0</code> . <code>simpa</code> takes care of discharging the goal with the contradiction.</p>",
        "id": 223171533,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611011088
    },
    {
        "content": "<p>Finally, the main case remains, which requires just the unfolding of the definition.</p>",
        "id": 223171567,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611011126
    },
    {
        "content": "<p>Wow, thanks for the detailed answer Yakov. This certainly taught me quite a few new tricks! I think I'll go with the <code>ite</code> definition, but it is good to know that the other definition is also workable.</p>",
        "id": 223172733,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1611012365
    },
    {
        "content": "<p>Honestly, is the <code>0x0</code> matrix useful? Or was it a joke?</p>",
        "id": 223195043,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611042221
    },
    {
        "content": "<p>It's very useful in edge cases that would otherwise be very annoying.</p>",
        "id": 223195297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611042481
    },
    {
        "content": "<p>It's not a joke at all. Is the zero-dimensional vector space useful? It's not like it's something which <em>does not exist</em> -- it's something which makes the theory complete. It's the kernel of an injective linear map. An endomorphism of that space is represented by a 0 x 0 matrix. It's an edge case, but it's no more an edge case than the idea that 0 is a natural number. The entire theory works and the proofs are all the same in the 0 x 0 case. It's nothing to be scared of :-) The trace is 0, the det is 1, the char poly is 1, the theorems in your linear algebra book are all true.</p>",
        "id": 223195816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611043008
    },
    {
        "content": "<p>What about the zero-dimensional vector space over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">F</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 223196254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611043333
    },
    {
        "content": "<p>That's just Spec(Z) -&gt; Spec(Z) as a toric variety, if my understanding is correct</p>",
        "id": 223196289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611043370
    }
]