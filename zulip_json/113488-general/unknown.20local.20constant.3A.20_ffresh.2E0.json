[
    {
        "content": "<p>Has anyone seen an otherwise successful <code>def</code> error with <code>unknown local constant: _ffresh.0</code>?</p>",
        "id": 169356858,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561934272
    },
    {
        "content": "<p>do you use <code>variable</code> or <code>parameter</code>? Do you use <code>include</code>?</p>",
        "id": 169356956,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1561934509
    },
    {
        "content": "<p>Yes to all of the above. :-) Changing the name of an argument of the function solved the problem.... Looks bug-ish to me, but I don't have time to minimise now so will proceed with slightly strange argument names!</p>",
        "id": 169357004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561934606
    },
    {
        "content": "<p>you probably have variable <code>x</code>, assumption <code>h</code> mentioning <code>x</code>, <code>include h</code> and then you declare <code>x</code> as an argument to your definition</p>",
        "id": 169357047,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1561934685
    },
    {
        "content": "<p>Lean does not include the <code>variable</code> but includes <code>h</code></p>",
        "id": 169357054,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1561934705
    },
    {
        "content": "<p>Has anyone else seen this error? I tried renaming the variables but the error still persists.<br>\nA <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.stalks</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">opposite</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Top</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">presheaf</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">concrete_category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">concrete_category.has_coe_to_sort</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">submonoid_presheaf</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">mul_one_class</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">monoid_hom_class</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">X.presheaf</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">localization</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">X.presheaf</span> <span class=\"n\">CommRing.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">F.submonoid_presheaf</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">X.presheaf</span> <span class=\"n\">CommRing</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">presheaf</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Top</span>\n</code></pre></div>",
        "id": 289281953,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657605203
    },
    {
        "content": "<p>The error for me is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"kn\">local</span> <span class=\"kd\">constant</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">_fresh.771.40</span>\n</code></pre></div>\n<p>As far as I'm concerned this is a new error, so you get a point. Congratulations!</p>",
        "id": 289320492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657631307
    },
    {
        "content": "<p>What about the one from 2019 upthread?</p>",
        "id": 289322970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657632469
    },
    {
        "content": "<p>oh darn it</p>",
        "id": 289337484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657638140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> <code>G : @submonoid_presheaf _ CommRing _ _ _ _ F</code> works.</p>",
        "id": 289343059,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657640294
    },
    {
        "content": "<p>It also works if I use <code>variables {F : X.presheaf CommRing.{w}} (G : F.submonoid_presheaf)</code> instead.<br>\nI have no idea why though.</p>",
        "id": 289417361,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657690359
    }
]