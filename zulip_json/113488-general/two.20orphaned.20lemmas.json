[
    {
        "content": "<p>I'm trying to slice up <code>algebra.big_operators</code> into small files, both because it was getting quite jumbled, and also because every time I look at the output of <code>leanproject import-graph --to X</code> there's an unpleasant knot at <code>algebra.big_operators</code>. :-)</p>",
        "id": 204541914,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595335299
    },
    {
        "content": "<p>This has mostly gone well, but I've been left with two lemmas, neither of which get used anywhere in mathlib, and neither of which has a natural home anymore.</p>",
        "id": 204541995,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595335323
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kn\">lemma</span> <span class=\"n\">sum_nat_coe_enat</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">x</span>  <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"kn\">using</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">ih</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204542026,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595335337
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- A product over all subsets of `s ∪ {x}` is obtained by multiplying the product over all subsets</span>\n<span class=\"cm\">of `s`, and over all subsets of `s` to which one adds `x`. -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_powerset_insert</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">powerset_insert</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_union</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_image</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">t₁</span> <span class=\"n\">h₁</span> <span class=\"n\">t₂</span> <span class=\"n\">h₂</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase_insert</span> <span class=\"o\">(</span><span class=\"n\">not_mem_of_mem_powerset_of_not_mem</span> <span class=\"n\">h₁</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n        <span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase_insert</span> <span class=\"o\">(</span><span class=\"n\">not_mem_of_mem_powerset_of_not_mem</span> <span class=\"n\">h₂</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">heq</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">disjoint_iff_ne</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">t₁</span> <span class=\"n\">h₁</span> <span class=\"n\">t₂</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">t₃</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">H₃₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">H₃₂</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ne_insert_of_not_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">not_mem_of_mem_powerset_of_not_mem</span> <span class=\"n\">h₁</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204542041,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595335346
    },
    {
        "content": "<p>Please use suitable emojis to indicate their preferred fate. :-)</p>",
        "id": 204542061,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595335359
    },
    {
        "content": "<p>More seriously, suggestions where to put them welcome.</p>",
        "id": 204542080,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595335372
    },
    {
        "content": "<p>Put them in <code>algebra.big_operators.orphans</code>?</p>",
        "id": 204542145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595335419
    },
    {
        "content": "<p>They're currently in <code>algebra.big_operators.others</code> :-)</p>",
        "id": 204542156,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595335435
    },
    {
        "content": "<p><code>sum_nat_coe_enat</code> is just a case of <code>sum_hom</code>, right? Then we can just delete it.</p>",
        "id": 204543613,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595336282
    },
    {
        "content": "<p>Alas, <code>enat</code> is not an <code>add_monoid</code></p>",
        "id": 204543685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595336306
    },
    {
        "content": "<p>Why not?</p>",
        "id": 204543798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595336363
    },
    {
        "content": "<p>Ooh, is it?</p>",
        "id": 204543833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595336381
    },
    {
        "content": "<p>It's not cancellative</p>",
        "id": 204543863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595336397
    },
    {
        "content": "<p>Aah, it's multiplication that is an issue</p>",
        "id": 204543869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595336400
    },
    {
        "content": "<p>There is even an <code>instance : add_comm_monoid enat</code></p>",
        "id": 204543910,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595336403
    },
    {
        "content": "<p>Right</p>",
        "id": 204543914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595336404
    },
    {
        "content": "<p>/me should think before talking</p>",
        "id": 204543955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595336421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> That signs its fate, I think (and mine??? <span aria-label=\"worried\" class=\"emoji emoji-1f61f\" role=\"img\" title=\"worried\">:worried:</span> )</p>",
        "id": 204543998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595336442
    },
    {
        "content": "<p>Great. I might go look at the git blame to see who wanted the other lemma.</p>",
        "id": 204544414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595336650
    },
    {
        "content": "<p>(Now that I've said that, it's going to be me, and I'll feel weirdly awkward for having no memory of it.)</p>",
        "id": 204544462,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595336670
    },
    {
        "content": "<p>Two days ago I asked someone if some fact about digits was in mathlib and they replied \"you PRed it last week\"</p>",
        "id": 204544678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595336772
    },
    {
        "content": "<p>Sebastien introduced into back in <a href=\"https://github.com/leanprover-community/mathlib/issues/1908\">#1908</a>, but didn't use it in that PR.</p>",
        "id": 204544698,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595336786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/two.20orphaned.20lemmas/near/204544678\">said</a>:</p>\n<blockquote>\n<p>Two days ago I asked someone if some fact about digits was in mathlib and they replied \"you PRed it last week\"</p>\n</blockquote>\n<p><a href=\"https://mathoverflow.net/questions/23989/are-the-norms-of-graphs-dense-in-any-interval#comment50174_23993\">https://mathoverflow.net/questions/23989/are-the-norms-of-graphs-dense-in-any-interval#comment50174_23993</a></p>",
        "id": 204544768,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595336831
    },
    {
        "content": "<p>Ah, I'm making false accusations against Sebastien. He used the additive version.</p>",
        "id": 204544989,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595336955
    },
    {
        "content": "<p>And I'm wrong that it's orphaned, oops!</p>",
        "id": 204545115,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595337029
    }
]