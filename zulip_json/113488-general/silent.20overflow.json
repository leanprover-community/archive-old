[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">id</span> <span class=\"c1\">-- all seems fine</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1000</span> <span class=\"bp\">*</span> <span class=\"mi\">1000</span> <span class=\"bp\">=</span> <span class=\"mi\">123456</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- no error reported</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">id</span> <span class=\"c1\">-- all still seems fine</span>\n</pre></div>",
        "id": 124842273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523289605
    },
    {
        "content": "<p>changing <code>example</code> to <code>theorem X</code> shows that there is a problem</p>",
        "id": 124842287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523289639
    },
    {
        "content": "<p><code> deep recursion was detected at 'replace' (potential solution: increase stack space in your system) </code></p>",
        "id": 124842294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523289658
    },
    {
        "content": "<p>but the error is not triggered if we use <code>example</code></p>",
        "id": 124842302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523289675
    },
    {
        "content": "<p>no error reported!</p>",
        "id": 124842353,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523289725
    },
    {
        "content": "<p>Changing example to theorem also gives us the <code> not a rfl-lemma, even though marked as rfl </code> error</p>",
        "id": 124842357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523289735
    },
    {
        "content": "<p>and perhaps this is relevant</p>",
        "id": 124842368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523289744
    },
    {
        "content": "<p>because <code>example : 1000  *  1000  =  123456  :=  by refl</code> gives the recursion error</p>",
        "id": 124842378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523289769
    },
    {
        "content": "<p>no error reported! So maybe we can prove 0=1</p>",
        "id": 124842389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523289790
    },
    {
        "content": "<p>but it's hard to work with</p>",
        "id": 124842394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523289805
    },
    {
        "content": "<p>I guess proving 1000000 = 123456 is just as good</p>",
        "id": 124842396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523289818
    },
    {
        "content": "<p>Do you know how to run this through Lean with max paranoia options on?</p>",
        "id": 124842398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523289834
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>buzzard@bob:~$ more wrong.lean\nexample : 1000 * 1000 = 123456 := rfl -- no error reported\nbuzzard@bob:~$ lean --trust=0 wrong.lean\nbuzzard@bob:~$\n</pre></div>",
        "id": 124842637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523290195
    },
    {
        "content": "<p>looks good to me</p>",
        "id": 124842681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523290206
    },
    {
        "content": "<p>dammit <code>example : 0 = 1 := @nat.add_left_cancel (1000 * 1000) 0 1 rfl\n</code> doesn't work :-(</p>",
        "id": 124842908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523290564
    },
    {
        "content": "<p>you get the recursion error</p>",
        "id": 124842921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523290611
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"mi\">1000</span> <span class=\"bp\">*</span> <span class=\"mi\">1000</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1000</span> <span class=\"bp\">*</span> <span class=\"mi\">1000</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_left_cancel</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1000</span> <span class=\"bp\">*</span> <span class=\"mi\">1000</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1000</span> <span class=\"bp\">*</span> <span class=\"mi\">1000</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- no problem</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- recursion error</span>\n</pre></div>",
        "id": 124843274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523291161
    },
    {
        "content": "<p>so near and yet so far</p>",
        "id": 124843311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523291164
    },
    {
        "content": "<p>\" As far as we know, no proof of <code>false</code> has ever been accepted by Lean when using <code>-t0</code>. \" (from the FAQ)</p>",
        "id": 124843350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523291249
    },
    {
        "content": "<p>who is <code>-t0</code>?</p>",
        "id": 124843354,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523291264
    },
    {
        "content": "<p>same as <code>--trust 0</code></p>",
        "id": 124843359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523291271
    },
    {
        "content": "<p>\"trust no-one\"</p>",
        "id": 124843363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523291277
    },
    {
        "content": "<p><code>0 means do not trust any macro, and type check all imported modules</code></p>",
        "id": 124843411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523291308
    },
    {
        "content": "<p>My session earlier had Lean accepting wrong.lean even at <code>-t0</code> but it's not a proof of false, it's just a proof of something which is false :-)</p>",
        "id": 124843433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523291348
    },
    {
        "content": "<p>well, AFAIK it's false</p>",
        "id": 124843442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523291379
    },
    {
        "content": "<p>This would be really awesome, but I get an error:</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch, term\n  rfl\nhas type\n  ?m_2 = ?m_2\nbut is expected to have type\n  1000 * 1000 + 0 = 1000 * 1000 + 1\n</pre></div>",
        "id": 124843924,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523292096
    },
    {
        "content": "<p>ooh</p>",
        "id": 124843933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523292122
    },
    {
        "content": "<p>so maybe there's a problem with my set-up</p>",
        "id": 124843973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523292133
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ lean --version\nLean (version 3.3.1, nightly-2018-04-06, commit 8f55ec4c5037, Release)\n</pre></div>",
        "id": 124843980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523292148
    },
    {
        "content": "<p>Ubuntu 16.04</p>",
        "id": 124843982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523292153
    },
    {
        "content": "<p>mathlib HEAD</p>",
        "id": 124843985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523292156
    },
    {
        "content": "<p>Nothing to do with VS Code because I can reproduce on the command line</p>",
        "id": 124843992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523292178
    },
    {
        "content": "<p>I can reproduce the issue</p>",
        "id": 124844000,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1523292191
    },
    {
        "content": "<p>I now see it with the nightly as well, but not with my git build from master..</p>",
        "id": 124844011,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523292224
    },
    {
        "content": "<p>...using my git build :)</p>",
        "id": 124844059,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1523292246
    },
    {
        "content": "<p>Let me know if you want me to open an issue</p>",
        "id": 124844068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523292274
    },
    {
        "content": "<p>...in release mode, could be relevant</p>",
        "id": 124844077,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1523292304
    },
    {
        "content": "<p>I'm always running relwithdebinfo.</p>",
        "id": 124844096,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523292322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Some initial observations:<br>\n1) the exception is not reported by <a href=\"https://github.com/leanprover/lean/blob/bdea7d420dbcdb7cce700eb62c129387707016fc/src/frontends/lean/definition_cmds.cpp#L711\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/bdea7d420dbcdb7cce700eb62c129387707016fc/src/frontends/lean/definition_cmds.cpp#L711\">check_example</a> because <code>stack_space_exception</code> is not a <code>lean::exception</code><br>\n2) It's then caught by <a href=\"https://github.com/leanprover/lean/blob/69322cd523e4087530af7cefe3198a1315f6379d/src/util/task.cpp#L60\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/69322cd523e4087530af7cefe3198a1315f6379d/src/util/task.cpp#L60\">task_queue::execute</a> but never reported, apparently</p>",
        "id": 124845066,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1523293698
    },
    {
        "content": "<p>Yeah, <code>task_queue::execute</code> doesn't report errors.</p>",
        "id": 124845166,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523293844
    },
    {
        "content": "<p>I guess we should catch all exceptions in <code>check_example</code> to be consistent with <code>add</code> in <code>module.cpp</code>.</p>",
        "id": 124845241,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523293941
    },
    {
        "content": "<p>I can now reproduce the error as well.  It just takes a slightly larger number:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1000</span><span class=\"bp\">*</span><span class=\"mi\">1000</span><span class=\"bp\">*</span><span class=\"mi\">100</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1000</span><span class=\"bp\">*</span><span class=\"mi\">1000</span><span class=\"bp\">*</span><span class=\"mi\">100</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- no problem</span>\n</pre></div>",
        "id": 124845319,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523294058
    },
    {
        "content": "<p>Surely we should try and report the caught exception at some point...?</p>",
        "id": 124845399,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1523294166
    },
    {
        "content": "<p>Yes, in <code>check_example</code>.  We just need to add <code>std::</code> in front of the exception, and add a second catch-all <code>...</code> case like in <code>add</code>.</p>",
        "id": 124845410,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523294208
    },
    {
        "content": "<p>That too, but the task_queue shouldn't just swallow exceptions silently</p>",
        "id": 124845431,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1523294261
    },
    {
        "content": "<p><del>Mmh, good point.  At least some debugging output on stderr would be good.  For exceptions inheriting <code>std::exception</code> we can even print the error message.</del></p>",
        "id": 124845501,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523294347
    },
    {
        "content": "<p>That won't work, many tasks end in an exceptional state.  And these exceptions are eventually reported.  We wouldn't want to print something to stderr for every red squiggle the user sees.</p>",
        "id": 124845565,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523294434
    },
    {
        "content": "<p>This is similar to the failed promise issue in javascript.  There, a promise can also fail without throwing an exception or printing anything, you only get notified of the error if you listen to it.</p>",
        "id": 124845579,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523294498
    },
    {
        "content": "<p>In the sane promise APIs I know, not extracting the exception will make the promise throw it in its destructor. Which may kill the process if the exception is not caught in a background thread.</p>",
        "id": 124845952,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1523295020
    },
    {
        "content": "<p>We could do the same</p>",
        "id": 124845954,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1523295031
    }
]