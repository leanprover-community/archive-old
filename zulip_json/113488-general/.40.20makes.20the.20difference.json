[
    {
        "content": "<p>I'm debugging <a href=\"https://github.com/leanprover-community/mathlib/issues/1049\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1049\">#1049</a>. At some point, I have now written</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eval₂_hom_X</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I also have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">eval₂_hom_X</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">eval₂_hom_X :</span>\n<span class=\"cm\">  ∀ {β : Type u_2} [_inst_4 : comm_ring β] {α : Type u_1} [_inst_6 : decidable_eq α] (c : ℤ → β)</span>\n<span class=\"cm\">  [_inst_7 : is_ring_hom c] (f : mv_polynomial α ℤ → β) [_inst_8 : is_ring_hom f] (x : mv_polynomial α ℤ),</span>\n<span class=\"cm\">    eval₂ c (f ∘ X) x = f x</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 166358371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558616743
    },
    {
        "content": "<p>This code works. But if I replace <code>(@eval₂_hom_X _ _ _ _ _ _ f _)</code> with <code>(eval₂_hom_X f)</code> it times out.</p>",
        "id": 166358438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558616778
    },
    {
        "content": "<p>Can someone explain to me why? Does <code>@</code> do more than just making all arguments explicit?</p>",
        "id": 166358466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558616808
    },
    {
        "content": "<p>Yes, it changes the elaboration strategy. You can see descriptions of the three possibilities if you look at the autocomplete for <code>@[elab</code>. <code>elab_with_expected_type</code>is the default, but if you use <code>@</code>, it changes to <code>elab_simple</code>.</p>",
        "id": 166360056,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558617989
    },
    {
        "content": "<p>It's a bit ugly... but I'll stick with the <code>@</code> version, in that case.</p>",
        "id": 166360252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558618164
    },
    {
        "content": "<p>You could do <code>local attribute [elab_simple]</code> if you think it's less ugly, but I'm not so sure.</p>",
        "id": 166360365,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558618244
    },
    {
        "content": "<p>I use this <code>local attribute [elab_simple]</code> solution fairly often but I'm also not sure whether it is really better than using <code>@</code>.</p>",
        "id": 166364621,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558621086
    },
    {
        "content": "<p>I do feel like it better expresses my frustration at the elaborator being dumb though <span aria-label=\"angry\" class=\"emoji emoji-1f620\" role=\"img\" title=\"angry\">:angry:</span></p>",
        "id": 166364874,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558621263
    }
]