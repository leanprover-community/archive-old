[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/18082\">#18082</a> I'm trying to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option\">docs#option</a>.map₂ here and there. The build fails claiming that 2 instances are not defeq. How can I test this? For some reason, all data fields are defeq (<code>refl</code> proves the equalities) but the whole instances aren't.</p>",
        "id": 319919162,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673079612
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18081\">#18081</a></p>",
        "id": 319923972,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673082400
    },
    {
        "content": "<p>Possible idea: <code>option.map_2</code> has the matches swapped compared to what was before.<br>\nThat doesn't really explain the data fields being defeq, though...</p>",
        "id": 319924754,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673082945
    },
    {
        "content": "<p>No, <code>option.map₂</code> unfolds to exactly the same <code>bind</code>+<code>map</code>.</p>",
        "id": 319983362,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673109850
    },
    {
        "content": "<p>The only definition that changes defeq is <code>with_top.mul_zero_class</code> but it is not used here.</p>",
        "id": 319983419,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673109883
    },
    {
        "content": "<p><code>attribute [semireducible] with_zero</code> makes them defeq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.order.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.group.type_tags</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.with_zero</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℤₘ₀</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">with_zero</span> <span class=\"c1\">-- fails without this</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">with_zero.mul_zero_one_class</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">multiplicative.mul_one_class</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n<span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_one_class</span> <span class=\"n\">ℤₘ₀</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">group_with_zero.to_monoid_with_zero</span> <span class=\"n\">ℤₘ₀</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_group_with_zero.to_group_with_zero</span> <span class=\"n\">ℤₘ₀</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_group_with_zero.to_comm_group_with_zero</span> <span class=\"n\">ℤₘ₀</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_zero.linear_ordered_comm_group_with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">multiplicative.linear_ordered_comm_group</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_add_comm_group</span><span class=\"o\">)))))</span>\n <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319987231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673111983
    },
    {
        "content": "<p>Is <code>with_zero</code> irreducible?</p>",
        "id": 319987517,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673112190
    },
    {
        "content": "<p>Yes</p>",
        "id": 319987547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673112211
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_zero\">docs#with_zero</a> says so</p>",
        "id": 319987557,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673112221
    },
    {
        "content": "<p>I see this now.</p>",
        "id": 319987581,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673112231
    },
    {
        "content": "<p>Does the test above fail on master?</p>",
        "id": 319987592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673112238
    },
    {
        "content": "<p>I.e., has the instance path somehow changed, or is there something weird about one of our instances?</p>",
        "id": 319987659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673112259
    },
    {
        "content": "<p>What are our plans for <code>with_one</code>/<code>with_zero</code> reducibility in Lean 4?</p>",
        "id": 319987666,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673112260
    },
    {
        "content": "<p>They will probably get turned into one-field structures.</p>",
        "id": 319987694,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673112279
    },
    {
        "content": "<p>Or maybe <code>opaque</code>?</p>",
        "id": 319987719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673112294
    },
    {
        "content": "<p>Isn't that overkill?</p>",
        "id": 319987736,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673112305
    },
    {
        "content": "<p>Currently, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithZero#doc\">docs4#WithZero</a> is still a regular def.</p>",
        "id": 319987749,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673112315
    },
    {
        "content": "<p>There's something pretty weird going on with my example above; try using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">mul_zero_one_class.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">mul_zero_one_class.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The LHS doesn't reduce to a constructor application</p>",
        "id": 319987907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673112411
    },
    {
        "content": "<p><code> dunfold with_zero.mul_zero_one_class,</code> makes progress, but then <code>congr</code> doesn't work to equat the arguments!</p>",
        "id": 319988225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673112608
    },
    {
        "content": "<p>This is how far I can get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.order.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.group.type_tags</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.with_zero</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℤₘ₀</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">with_zero.mul_zero_one_class</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">multiplicative.mul_one_class</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n<span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_one_class</span> <span class=\"n\">ℤₘ₀</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">group_with_zero.to_monoid_with_zero</span> <span class=\"n\">ℤₘ₀</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_group_with_zero.to_group_with_zero</span> <span class=\"n\">ℤₘ₀</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_group_with_zero.to_comm_group_with_zero</span> <span class=\"n\">ℤₘ₀</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_zero.linear_ordered_comm_group_with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">multiplicative.linear_ordered_comm_group</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_add_comm_group</span><span class=\"o\">)))))</span>\n <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">mul_zero_one_class.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">with_zero.mul_zero_one_class</span> <span class=\"n\">with_zero.linear_ordered_comm_group_with_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">congr_fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">congr_fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">congr_fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span>\n    <span class=\"n\">with_zero.linear_ordered_comm_monoid_with_zero</span>\n    <span class=\"n\">with_zero.comm_monoid_with_zero</span>\n    <span class=\"n\">with_zero.mul_zero_class</span>\n    <span class=\"n\">linear_ordered_comm_group_with_zero.to_comm_group_with_zero</span>\n    <span class=\"n\">comm_group_with_zero.to_group_with_zero</span>\n    <span class=\"n\">group_with_zero.to_monoid_with_zero</span>\n    <span class=\"n\">monoid_with_zero.mul</span>\n    <span class=\"n\">group_with_zero.mul</span>\n    <span class=\"n\">comm_group_with_zero.mul</span>\n    <span class=\"n\">linear_ordered_comm_monoid_with_zero.mul</span>\n    <span class=\"n\">linear_ordered_comm_group_with_zero.mul</span>\n    <span class=\"n\">comm_monoid_with_zero.mul</span>\n    <span class=\"n\">mul_zero_one_class.mul</span>\n    <span class=\"n\">mul_zero_class.mul</span>\n    <span class=\"n\">monoid_with_zero.one</span>\n    <span class=\"n\">group_with_zero.one</span>\n    <span class=\"n\">comm_group_with_zero.one</span>\n    <span class=\"n\">linear_ordered_comm_monoid_with_zero.one</span>\n    <span class=\"n\">linear_ordered_comm_group_with_zero.one</span>\n    <span class=\"n\">mul_zero_one_class.one</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319989075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673113170
    },
    {
        "content": "<p>I think <code>with_zero.mul_zero_one_class</code> is to blame</p>",
        "id": 319989174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673113210
    },
    {
        "content": "<p>I pushed a fix</p>",
        "id": 319989752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673113589
    },
    {
        "content": "<p>Perhaps we should turn on <code>linter.check_type</code> for generated lemmas</p>",
        "id": 319989892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673113700
    },
    {
        "content": "<p>For instance, this fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_decl</span> <span class=\"bp\">`</span><span class=\"n\">with_zero.semigroup_with_zero._proof_1</span><span class=\"o\">,</span>\n  <span class=\"n\">none</span> <span class=\"bp\">←</span> <span class=\"n\">check_type</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.skip</span>\n</code></pre></div>",
        "id": 319990353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673114000
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>, since you wrote that linter</p>",
        "id": 319990615,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673114157
    },
    {
        "content": "<p>There was some discussion about this in the PR that added the linter <a href=\"https://github.com/leanprover-community/mathlib/pull/7694\">#7694</a>. There were some issues (false positives) with turning <code>linter.check_type</code> on for automatically generated lemmas. But it might be fine, so feel free to try if you think that is better.</p>",
        "id": 320017402,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673135621
    },
    {
        "content": "<p>It would be great if there wwere some way to adjust \"run on automated lemmas\" on a local basis</p>",
        "id": 320019297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673137229
    }
]