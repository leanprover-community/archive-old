[
    {
        "content": "<p>Is there any tactics for handling program containing computationally irrelevant proof?<br>\nSometimes it's annoying that the non-trivial proof been replace by <code>_</code>...</p>",
        "id": 154428282,
        "sender_full_name": "AHan",
        "timestamp": 1546627747
    },
    {
        "content": "<p>All proofs are irrelevant.</p>",
        "id": 154428517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546627960
    },
    {
        "content": "<p>That's a design choice.</p>",
        "id": 154428527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546627973
    },
    {
        "content": "<p>You shouldn't ever have to care about them again.</p>",
        "id": 154428543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546627993
    },
    {
        "content": "<p><code>set_option pp.proofs true</code></p>",
        "id": 154428601,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546628067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Why shouldn't I have to care about them again ? <br>\nI mean what if I can proof my goal with just unfold definitions of some functions, but they're hided by <code>_</code>?</p>",
        "id": 154429152,
        "sender_full_name": "AHan",
        "timestamp": 1546628641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  Thanks this is exactly what i'm looking for !</p>",
        "id": 154429205,
        "sender_full_name": "AHan",
        "timestamp": 1546628662
    },
    {
        "content": "<p>The reason they are hidden is because it doesn't matter what is there; all proofs are definitionally equal (so if you unify with a term which has a different proof in that slot it doesn't matter), and proofs are computationally irrelevant (they do not affect control flow in any way) and they are literally thrown away by the VM.</p>",
        "id": 154429544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546629026
    },
    {
        "content": "<p>if you can prove your goal only by unfolding definitions, then probably <code>rfl</code> or similar will finish the job</p>",
        "id": 154429587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546629089
    },
    {
        "content": "<p>Thanks for the explanation!</p>",
        "id": 154430687,
        "sender_full_name": "AHan",
        "timestamp": 1546630027
    },
    {
        "content": "<p>is there any rw tactic to deal with programs containing computationally irrelevant proofs? like, sometimes I want to rewrite a subterm in a goal, but  the type  of the computationally irrelevant proof depends on that subterm</p>",
        "id": 154464288,
        "sender_full_name": "petercommand",
        "timestamp": 1546676335
    },
    {
        "content": "<p>and that makes it really annoying to manually rewrite that particular subterm</p>",
        "id": 154464297,
        "sender_full_name": "petercommand",
        "timestamp": 1546676357
    },
    {
        "content": "<p>I would very much want a tactic to deal with this :3</p>",
        "id": 154464343,
        "sender_full_name": "petercommand",
        "timestamp": 1546676418
    },
    {
        "content": "<p>like, a tactic that can rewrite the type of the proof simutaneously</p>",
        "id": 154464356,
        "sender_full_name": "petercommand",
        "timestamp": 1546676502
    },
    {
        "content": "<p>(and the type of the terms of the type of the proof etc)</p>",
        "id": 154464407,
        "sender_full_name": "petercommand",
        "timestamp": 1546676629
    },
    {
        "content": "<p>There is <code>subst</code>, but that isn't too powerful at the moment.</p>",
        "id": 154465158,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546678091
    },
    {
        "content": "<p><code>simp</code> will do this, but probably not in the full generality you expect</p>",
        "id": 154465872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546679529
    },
    {
        "content": "<p>the full problem is actually quite hard</p>",
        "id": 154465873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546679538
    },
    {
        "content": "<p>but it is because of things like this that I try to avoid partial functions</p>",
        "id": 154465880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546679599
    },
    {
        "content": "<p>there are a variety of tricks for totalizing functions so that there is no proof argument in the way</p>",
        "id": 154465883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546679637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> does that include using <code>epsilon</code> instead of <code>some</code>?</p>",
        "id": 154466144,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546680163
    },
    {
        "content": "<p>I usually just pair <code>some</code> with an if statement</p>",
        "id": 154466359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546680623
    },
    {
        "content": "<p>There are other options too, you aren't necessarily removing the proof argument. You could push the proof into the domain, making it a subtype domain like <code>finset</code>, or you could push it into the codomain producing an <code>roption</code> function</p>",
        "id": 154466537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546681037
    },
    {
        "content": "<p>This conversation is too abstract for me. Can someone post some examples of what people are saying should be avoided?</p>",
        "id": 154470598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546688948
    },
    {
        "content": "<p>Stuff like <code>log : Π z : ℂ, z ≠ 0 → ℂ </code> because then if I have <code>log x hx</code> in my goal and <code>x = y</code> it's hard to rewrite.</p>",
        "id": 154470962,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546689695
    },
    {
        "content": "<p>Teaser: my talk in Amsterdam will feature this discussion on some example</p>",
        "id": 154471014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546689794
    },
    {
        "content": "<p>Oh yes, you can't rewrite because hx isn't a proof of the right thing. Thanks.</p>",
        "id": 154471076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546689945
    },
    {
        "content": "<p>The CS guys should just fix this</p>",
        "id": 154471078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546689960
    },
    {
        "content": "<p>It's a problem with their system. They shouldn't be working around it. We should be making maths the way mathematicians do it, not moaning about things like this. Why can't it be fixed? Can it be fixed in Lean 4?</p>",
        "id": 154471130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546690038
    },
    {
        "content": "<p>It seems the general case is hard for good reasons. But I agree Lean should have tactics that try heuristic or special cases</p>",
        "id": 154471182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546690087
    },
    {
        "content": "<p>I get the sense that it might be much easier to make something that works 95% of the time, and the last 5% is super hard.</p>",
        "id": 154471192,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546690153
    },
    {
        "content": "<p>\"Perfect is the enemy of good\" has never been more appropriate!</p>",
        "id": 154499678,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1546748117
    },
    {
        "content": "<p>maybe write a tactic to do it</p>",
        "id": 154509503,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546768524
    },
    {
        "content": "<p>I don't understand what's difficult here, but I'm sure there is something difficult because I'm aware that this issue comes up now and again</p>",
        "id": 154520838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546790118
    },
    {
        "content": "<p>It feels the same as the \"replace this ring with this isomorphic ring\" issue</p>",
        "id": 154520840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546790154
    },
    {
        "content": "<blockquote>\n<p>It feels the same as the \"replace this ring with this isomorphic ring\" issue</p>\n</blockquote>\n<p>I would think that \"replace this ring with this isomorphic ring\" would be even harder than substituting propositionally equal term</p>",
        "id": 154551482,
        "sender_full_name": "petercommand",
        "timestamp": 1546845883
    },
    {
        "content": "<p>since two isomorphic rings are not necessarily propositionally equal</p>",
        "id": 154551494,
        "sender_full_name": "petercommand",
        "timestamp": 1546845912
    },
    {
        "content": "<p>Right! Mathematicians have a code of honour where we only do things to rings which would work if you replaced the ring with an isomorphic one</p>",
        "id": 154552001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546846777
    },
    {
        "content": "<p>so you mean functors</p>",
        "id": 154554248,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546850630
    },
    {
        "content": "<p>To resurrect this a bit, has there been a tactic that just introduces casts as needed?   In the log example, with <code>log : Π z : ℂ, z ≠ 0 → ℂ</code>, if you have the term <code>log x h</code> and equality<code>e: x = y</code>, the tactic could rewrite <code>log x h</code> to <code>log y (eq.rec h e)</code>.    I've tried this on an ad-hoc basis and sometimes run into problems later dealing with terms like <code>(eq.rec h e)</code>, but perhaps a tactic could systematically rewrite through rec.</p>",
        "id": 154941811,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1547236121
    },
    {
        "content": "<p><code>subst</code> already does this but only for local constants. Apparently the problem is very hard in general.</p>",
        "id": 154942122,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1547236380
    },
    {
        "content": "<p>You can often get <code>simp</code> to do this, or <code>conv</code>, because they use congruence lemmas for rewriting</p>",
        "id": 154948114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547241747
    }
]