[
    {
        "content": "<p>How to prove this? I don't need it, I'm just curious.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">γ</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">δ</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 128498549,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529709035
    },
    {
        "content": "<p>I think there’s a meta theorem that says it can’t be proved in DTT</p>",
        "id": 128498682,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529709286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 128498686,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529709296
    },
    {
        "content": "<p>In that case, same question for</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">g</span> <span class=\"n\">b</span>\n</pre></div>",
        "id": 128498834,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529709500
    },
    {
        "content": "<p>I think you would need an equality <code>α = β</code> and <code>γ = δ</code>  for this to be provable. Then, you can deduce <code>f = g</code>. I saw the theorem in a talk by Cody Roux. If I remember correctly, when you want to prove <code>f x₀ .. xᵢ = g y₀ .. yᵢ</code>, from <code>x₀ == y₀</code> .. <code>xᵢ == yᵢ</code>, you need <code>f = g</code> for the statement to be provable.</p>",
        "id": 128499127,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529710102
    },
    {
        "content": "<p>Leo has a whole paper on how he works around the unprovability of this theorem</p>",
        "id": 128505009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529722086
    },
    {
        "content": "<p>(co-authored with Cody IIRC)</p>",
        "id": 128505013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529722125
    },
    {
        "content": "<p>Although I think the actual unprovability is only folklore, I don't know an explicit proof although there is probably a way to modify the set model to get it</p>",
        "id": 128505054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529722202
    },
    {
        "content": "<p>He basically generates all the relevant theorems right? I think that's what <code>congr</code> does for <code>heq</code> goals</p>",
        "id": 128505074,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529722225
    },
    {
        "content": "<p>yes, he's implemented a tactic meta-theorem for the version you stated</p>",
        "id": 128505091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529722313
    }
]