[
    {
        "content": "<p>I am just compiling the latest mathlib. I got an error</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">\\</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"n\">scripts</span><span class=\"err\">\\</span><span class=\"n\">mk_nolint</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">allKK</span><span class=\"err\">\u001b</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"n\">K</span>\n<span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">resolve</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">all</span>\n</pre></div>",
        "id": 180209336,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1573199787
    },
    {
        "content": "<p>Never mind, I should just <code>make src</code>.</p>",
        "id": 180209494,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1573200029
    },
    {
        "content": "<p>Edit - never mind, I misread this, sorry.</p>",
        "id": 180213362,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573204459
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 180213388,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573204495
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1786\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1786\">#1786</a> has just been merged, and it contains the following line:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">compact_space</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>I thought that the linter was supposed to ask for a reduced priority on this kind of instance. Has it been deactivated?</p>",
        "id": 182788778,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575656725
    },
    {
        "content": "<p>I think the instance checker is not yet one of the active linters:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/827e78b1638868734de786baac70b5d3f1d5118e/scripts/mk_nolint.lean#L28\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/827e78b1638868734de786baac70b5d3f1d5118e/scripts/mk_nolint.lean#L28\">https://github.com/leanprover-community/mathlib/blob/827e78b1638868734de786baac70b5d3f1d5118e/scripts/mk_nolint.lean#L28</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/740168bf22c86e2d83b98e069b85ac7360dbba8c/scripts/mk_all.sh#L42\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/740168bf22c86e2d83b98e069b85ac7360dbba8c/scripts/mk_all.sh#L42\">https://github.com/leanprover-community/mathlib/blob/740168bf22c86e2d83b98e069b85ac7360dbba8c/scripts/mk_all.sh#L42</a></p>",
        "id": 182793450,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575659702
    },
    {
        "content": "<p>(not sure which of these lists is the relevant one, or whether it is necessary that those two lists are the same at all time)</p>",
        "id": 182793496,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575659738
    },
    {
        "content": "<p>The second is the relevant one, and it's most important that the second is a subset of the first. It should be safe to add the priority check back to CI now. With Floris' PRs, I guess almost all of mathlib is passing now. So there should be very few changes to <code>nolints.txt</code>, or none if we update the remaining failures.</p>",
        "id": 182794781,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575660484
    },
    {
        "content": "<p>I vote for enabling it, as this is really a useful check.</p>",
        "id": 182796917,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575661694
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1787\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1787\">#1787</a> passed. Luckily the <code>fintype.compact_space</code> instance was the only bad one that snuck in.</p>",
        "id": 182807502,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575668201
    },
    {
        "content": "<p>I recently learned that it can be dangerous to have a class with more explicit parameters than one which it is extending: <a href=\"#narrow/stream/113488-general/topic/typeclass.20problems/near/184192445\" title=\"#narrow/stream/113488-general/topic/typeclass.20problems/near/184192445\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/typeclass.20problems/near/184192445</a></p>",
        "id": 184261727,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577366930
    },
    {
        "content": "<p>I'm not quite sure exactly what the rule would be, but I wonder if this is the sort of thing we could have the linter warn about?</p>",
        "id": 184261744,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577366964
    },
    {
        "content": "<p>Yes, this is definitely something we can have the linter warn about. I think the rule is<br>\n\"There cannot be a local constant in one of the (type-class) hypotheses that does not occur in the conclusion (and cannot be inferred from the type of the local constants in the conclusion).\"<br>\nI'm not sure if the parenthetical is necessary.</p>\n<p>There are instances which violate this rule, <code>coe_trans</code> comes to mind:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">coe_trans</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">],</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n</pre></div>\n\n\n<p>However, instances like those do raise issues:<br>\n<a href=\"#narrow/stream/113488-general/topic/remove.20all.20instances.20with.20variable.20domain\" title=\"#narrow/stream/113488-general/topic/remove.20all.20instances.20with.20variable.20domain\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/remove.20all.20instances.20with.20variable.20domain</a></p>",
        "id": 184909272,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1578320331
    },
    {
        "content": "<p>outparams are also excepted from this rule</p>",
        "id": 184962951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578349118
    },
    {
        "content": "<p>I have a small laptop and failing eyesight (meaning that when I can't find my specs I have to turn font size up), and I really like the rule which says that lines in mathlib are supposed to be at most 100 characters long. Not every line in mathlib has this property though. I would be very happy if this became a hard and fast rule. Can we lint for it, or is this considered to just be some sort of guideline and most people don't actually care about it?</p>",
        "id": 191422772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584921285
    },
    {
        "content": "<p>I have a PR with a slightly longer line that I can't (or at least don't want to) break. It is a markdown link to a section of a Wikipedia page.</p>",
        "id": 191428126,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584931022
    },
    {
        "content": "<p>Currently 2258 lines in <code>*.lean</code> files have &gt;100 characters.</p>",
        "id": 191428189,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584931131
    },
    {
        "content": "<p>And another ~600 have =100 characters. So people try to follow this rule.</p>",
        "id": 191428198,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584931171
    },
    {
        "content": "<p>One problem with such a linter is that it's not so easy to write a <code>nolint</code> attribute for it. (I think.)</p>",
        "id": 191441049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584950415
    },
    {
        "content": "<p>This kind of thing doesn't fit in the current linter framework. The linter has no access to the source code.</p>",
        "id": 191453037,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1584958634
    },
    {
        "content": "<p>If someone wants to implement a syntactic linter, I won't complain, but it's basically a separate tool from the existing linters.</p>",
        "id": 191453069,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1584958662
    },
    {
        "content": "<p>I was running <code>#lint</code> on a new file, and noticed that it did <em>not</em> complain about the missing copyright header and missing module docstring. Is that because those are more \"syntactic\" issues? Or could the linter do that as well?</p>",
        "id": 191666235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585081036
    },
    {
        "content": "<p>I think the missing module docstring should be lintable.  But the copyright header is out of scope.</p>",
        "id": 191666357,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585081086
    },
    {
        "content": "<p>But even the module docstring linter doesn't fit into the current framework at all.</p>",
        "id": 191666408,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585081123
    },
    {
        "content": "<p>I've been working on a small change to the tactic parser so that we can specify linters for specific tactics. It looks something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">lint</span><span class=\"bp\">.</span><span class=\"n\">tactic</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linter</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cur_pos</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"n\">simp</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n<span class=\"n\">gs</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n<span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"n\">gs</span><span class=\"bp\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">advice</span> <span class=\"n\">p</span> <span class=\"s2\">&quot;non-terminal use of `simp`&quot;</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linter</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">my_proof</span> <span class=\"o\">:</span> <span class=\"n\">something</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n   <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- prints advice here</span>\n   <span class=\"c1\">-- more stuff</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191667304,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585081555
    },
    {
        "content": "<p>does that sound useful?</p>",
        "id": 191667516,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585081651
    },
    {
        "content": "<p>This particular advice could be bolted in the core library but if we want to define linter in mathlib (or other libraries) for tactics defined in core, that would seems useful</p>",
        "id": 191667638,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585081699
    },
    {
        "content": "<p>Not directly related to the linter, but my students often use non-terminal <code>simp</code>s and it would be nice if such a thing generated some kind of warning. I believe that <code>simp, ring</code> is used in mathlib though.</p>",
        "id": 191667784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585081763
    },
    {
        "content": "<p>Yeah, unfortunately a nonterminal simp lint is going to generate a lot of false positives</p>",
        "id": 191678313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585087114
    },
    {
        "content": "<p>Yeah, this is not pitch for this specific rule so much as a way of building such rules</p>",
        "id": 191678369,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585087147
    },
    {
        "content": "<p>However, if we can make constructions like this, does this mean we can get access to the tactic scripts now? I know that there were other lints that needed that</p>",
        "id": 191678415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585087180
    },
    {
        "content": "<p>Yes, I think so. I'm looking into using that right now</p>",
        "id": 191678520,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585087224
    },
    {
        "content": "<p>it would be great if we could store these into olean files for later analysis</p>",
        "id": 191678728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585087358
    },
    {
        "content": "<p>I'm trying to remember what the use cases were... I think the imported files lint has false positives if a file is imported for its tactics</p>",
        "id": 191678879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585087478
    },
    {
        "content": "<p>Yeah, I remember. I'm not touching the olean file right now but I see where the tactic is parsed. It seems to be discarded quickly</p>",
        "id": 191678957,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585087551
    },
    {
        "content": "<p>maybe create an auxiliary def with the tactic that was used? Could be a bit noisy, but there aren't very many other ways to store data</p>",
        "id": 191679085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585087639
    },
    {
        "content": "<p>maybe it only produces the def if some <code>set_option</code> is set</p>",
        "id": 191679240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585087763
    },
    {
        "content": "<p>I like that idea</p>",
        "id": 191688026,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585094331
    },
    {
        "content": "<p>The switch and the extra definion</p>",
        "id": 191688075,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585094373
    },
    {
        "content": "<p>Currently it takes 64 minutes to lint mathlib on PRs even if you only change one file. Can we make this faster perhaps by caching?</p>",
        "id": 217275661,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605795924
    },
    {
        "content": "<p>I think that especially for the simp linter, this is hard. And I expect that's also one of the slower linters.</p>",
        "id": 217276669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605796342
    },
    {
        "content": "<p>Can we run the linters in parallel with each other (in separate processes or even jobs) rather than sequentially?</p>",
        "id": 217289165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605801392
    },
    {
        "content": "<p>I tried to parallelize the linters (i.e. running one task per linter):<br>\n<a href=\"https://github.com/leanprover-community/mathlib/compare/parlint\">https://github.com/leanprover-community/mathlib/compare/parlint</a></p>",
        "id": 217289956,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605801686
    },
    {
        "content": "<p>This doesn't help much because (at least at the time) the simp linter takes 95% of the runtime.</p>",
        "id": 217290010,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605801705
    },
    {
        "content": "<p>You can't run each declaration in a task either, because that's expensive (see comment in PR ^^).</p>",
        "id": 217290098,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605801727
    },
    {
        "content": "<p>I think the best approach would be to split the declaration list into chunks and then run each chunk in a task.</p>",
        "id": 217290188,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605801764
    },
    {
        "content": "<p>I tried this (naively) at some points and it led to segfaults. Never investigated beyond that though, it's quite possible I was doing something wrong.</p>",
        "id": 217292032,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605802431
    },
    {
        "content": "<blockquote>\n<p>Note: in Lean 3, VM functions executed in tasks need to copy their whole closure and return values twice.</p>\n</blockquote>\n<p>Additional note: Lean segfaults when copying lists that are more than few hundred elements long.</p>\n<p>The branch I've linked to ^^ solves this by using <code>buffer</code> instead.</p>",
        "id": 217301113,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605806105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/linter/near/217301113\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Note: in Lean 3, VM functions executed in tasks need to copy their whole closure and return values twice.</p>\n</blockquote>\n<p>Additional note: Lean segfaults when copying lists that are more than few hundred elements long.</p>\n</blockquote>\n<p>Solved in Lean 4, it now prints a proper stack overflow error message</p>",
        "id": 217303347,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1605807025
    },
    {
        "content": "<p>Oh, it also doesn't copy closures to begin with...</p>",
        "id": 217303365,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1605807034
    }
]