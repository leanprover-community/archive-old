[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find</span>\n\n<span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"c1\">-- workaround</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"c1\">-- no output</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">add_pos</span>\n<span class=\"c1\">-- add_pos : 0 &lt; ?M_3 → 0 &lt; ?M_4 → 0 &lt; ?M_3 + ?M_4</span>\n</pre></div>\n\n\n<p>Why doesn't this work? Am I not using <code>#find</code> correctly?</p>",
        "id": 156939491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548533454
    },
    {
        "content": "<p>I suspect <code>add_pos</code> is not specifically for natural numbers. Meanwhile, <code>0</code> defaults to natural type</p>",
        "id": 156940333,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548534952
    },
    {
        "content": "<p>You could try:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 156940388,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548535000
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"c1\">-- still no output :-(</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">add_pos</span>\n<span class=\"c1\">-- add_pos : 0 &lt; ?M_3 → 0 &lt; ?M_4 → 0 &lt; ?M_3 + ?M_4</span>\n</pre></div>\n\n\n<p>Do I have to guess that it's a theorem about cancellative additive monoids?</p>",
        "id": 156940966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548536083
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_cancel_comm_monoid</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"c1\">-- still no output :-(</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">add_pos</span>\n<span class=\"c1\">-- add_pos : ∀ {α : Type u_2} [_inst_1 : ordered_cancel_comm_monoid α] {a b : α},</span>\n<span class=\"c1\">-- 0 &lt; a → 0 &lt; b → 0 &lt; a + b</span>\n</pre></div>\n\n\n<p>gaargh</p>",
        "id": 156941025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548536168
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_cancel_comm_monoid</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"c1\">-- still no output :-(</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">add_pos</span>\n<span class=\"c1\">-- add_pos : ∀ {α : Type u_2} [_inst_1 : ordered_cancel_comm_monoid α] {a b : α},</span>\n<span class=\"c1\">-- 0 &lt; a → 0 &lt; b → 0 &lt; a + b</span>\n</pre></div>\n\n\n<p>I need more hints :-)</p>",
        "id": 156941035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548536248
    },
    {
        "content": "<p>How does it work in Coq?</p>",
        "id": 156941045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548536268
    },
    {
        "content": "<p>I think it will need a closer look. On github, can you open an issue and put in this information? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>, should we start putting issues on <code>leanprover-community</code>?</p>",
        "id": 156941241,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548536582
    },
    {
        "content": "<p>I think <code>#find</code> just isn't very good; I suspect the implication has something to do with it</p>",
        "id": 156941255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548536621
    },
    {
        "content": "<p>shouldn't the issue go in mathlib, where <code>#find</code> is?</p>",
        "id": 156941318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548536707
    },
    {
        "content": "<p>It probably deserves a fresh look. Having an issue would allow us to assign it to someone and follow progress</p>",
        "id": 156941323,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548536739
    },
    {
        "content": "<p>By <code>leanprover-community</code>, I meant <code>leanprover-community/mathlib</code> of course</p>",
        "id": 156941325,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548536756
    }
]