[
    {
        "content": "<p>I know that I probably don't want to be at this goal state in the first place, but is this true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)))</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_heq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cast_heq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- fails, for reasons I don't understand</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cast_heq\">docs#cast_heq</a> doesn't seem to apply properly</p>",
        "id": 231466721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616504963
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)))</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_heq</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">cast_heq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231467092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616505110
    },
    {
        "content": "<p><code>cast_heq</code>wants the <code>a</code>'s in <code>cast h a == a</code> to have the same type, but yours don't</p>",
        "id": 231467248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616505173
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 231468619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616505718
    },
    {
        "content": "<p>Now why doesn't my attempt to generalize this work...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cast_pi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">A</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">cast_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)))</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- exact cast_pi (λ i, (0 : A i)) _, -- works</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cast_pi</span><span class=\"o\">,</span> <span class=\"c1\">--fails</span>\n  <span class=\"c1\">-- refine cast_pi _ _, --fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231468687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616505735
    },
    {
        "content": "<p>mumble mumble apply bug?</p>",
        "id": 231481462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616510567
    },
    {
        "content": "<p>mumble mumble higher order unification problem? Actually that might be it, guessing a function is hard,</p>",
        "id": 231481952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616510758
    },
    {
        "content": "<p>I guess I'm surprised that it doesn't just give me a goal filled with metavariables</p>",
        "id": 231485506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616511947
    },
    {
        "content": "<p>I created <a href=\"https://github.com/leanprover-community/mathlib/issues/6834\">#6834</a> which hopefully eliminates some of the pain I'm feeling, but it doesn't help the case I presented here.</p>",
        "id": 231485627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616511982
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib/issues/6837\">#6837</a> has some gross solutions to nasty versions of the one I started this thread with</p>",
        "id": 231519853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616524213
    }
]