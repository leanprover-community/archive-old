[
    {
        "content": "<p>Yury is currently busy backporting the coercion type classes from Lean 4.  I'm wondering if it makes sense to backport the coercion unfolding as well.  This will break a <em>lot</em> of stuff in mathlib.  Therefore it could make sense to do this refactoring before the port.  I am just bringing it up as an option.  Making the change in core is not too involved, but I don't think I'll be able to take on the mathlib refactoring.</p>",
        "id": 230907604,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616089125
    },
    {
        "content": "<p>What changed about the coercion unfolding in Lean 4?</p>",
        "id": 230910382,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616090164
    },
    {
        "content": "<p>About <code>coe_fn</code>, could you please fix the pretty printer? I guess the broken function is <code>pp_hide_coercion_fn</code>but I'm not sure. The broken test is <code>tests/lean/coe4</code>.</p>",
        "id": 230910643,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616090281
    },
    {
        "content": "<p>One more issue: now Lean fails to generate instance names for <code>has_coe_to_fun</code> instances.</p>",
        "id": 230911815,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616090662
    },
    {
        "content": "<blockquote>\n<p>I'm not sure if everybody realizes this, but Lean 4 doesn't have <code>⇑</code> or <code>↑</code>.  The coercion is immediately eliminated after/during elaboration:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"mi\">8</span>\n<span class=\"c1\">-- (fun (b : Nat) =&gt; 4 + b) 8 : Nat</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 230913516,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616091246
    },
    {
        "content": "<p>So, we'll see explicit <code>(e : E →L[R] F).to_linear_map</code>, <code>subtype.val</code> etc?</p>",
        "id": 230915792,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616092197
    },
    {
        "content": "<p>I mean, in the proof state.</p>",
        "id": 230915975,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616092252
    },
    {
        "content": "<p>Yes.</p>",
        "id": 230916034,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616092278
    },
    {
        "content": "<p>:(</p>",
        "id": 230916257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616092371
    },
    {
        "content": "<p>But we won't need <code>coe_mk</code> etc. :-)</p>",
        "id": 230916522,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616092488
    },
    {
        "content": "<p>But we'll need a new <code>norm_cast</code> that tracks all functions used as coercions, not only <code>coe</code>/<code>coe_fn</code>.</p>",
        "id": 230918081,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616093171
    },
    {
        "content": "<p>One will need some pretty-printer tweaking so that <code>subtype.val</code> shows up as a little arrow, as well as all the other functions we are used to as coercions. Then the situation should not be really different from what we are used to.</p>",
        "id": 230924977,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616096099
    },
    {
        "content": "<p>No way to have <code>@[simp] lemma [is_monoid_hom (coe : M → N)] (x y : M) : ((x * y : M) : N) = x * y := ...</code> (though we want to have it as a <code>rfl</code> simp lemma in many cases anyway)</p>",
        "id": 230929439,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616098071
    },
    {
        "content": "<p>How does this unfolding work? Is <code>CoeFun</code> special cased in the elaborator?</p>",
        "id": 230930167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616098402
    },
    {
        "content": "<p>Do subclasses of it get unfolded in the same way?</p>",
        "id": 230930194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616098417
    },
    {
        "content": "<p>I don't think we should bother backporting this. We can eliminate coercions in mathport, but this is going to need a lot of manual work to make it work well and I'd rather do that work in a context where the rest of lean 4 is available</p>",
        "id": 231089462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616187704
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, Lean core builds with the new <code>has_coe_to_fun</code> and <code>has_coe_to_sort</code>. I've started porting <code>mathlib</code> and found out that <code>has_coe_to_sort</code> doesn't work as expected (by me):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>now fails with message \"5:29: invalid constructor ⟨...⟩, 'has_coe_to_sort.coe' is not an inductive type\"</p>",
        "id": 231872531,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616704801
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/coe-fn-backport\">branch#coe-fn-backport</a></p>",
        "id": 231872635,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616704830
    },
    {
        "content": "<p>This sounds like something that <a href=\"https://github.com/leanprover-community/mathlib/issues/6768\">#6768</a> might make worse</p>",
        "id": 231879054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616707740
    },
    {
        "content": "<p>Did the elaborator have special support for this before that we forgot to patch?</p>",
        "id": 231879143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616707792
    },
    {
        "content": "<p>This works just fine if you remove the ↥.</p>",
        "id": 231931787,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616748774
    },
    {
        "content": "<p>So this is like the opposite of the <code>let</code> bug I found recently that required the arrow?</p>",
        "id": 231932183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616749006
    },
    {
        "content": "<p>If you will.  I'm not completely sure why it worked before, but I've pushed a fix to the branch.</p>",
        "id": 231932475,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616749194
    },
    {
        "content": "<p>I'm trying to adjust <code>simps</code>. Currently it uses this code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"n\">e_inst_type</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"o\">((</span><span class=\"n\">expr.const</span> <span class=\"n\">class_nm</span> <span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">pexpr.of_expr</span> <span class=\"n\">e_str</span><span class=\"o\">)),</span>\n        <span class=\"n\">e_inst</span> <span class=\"bp\">←</span> <span class=\"n\">try_for</span> <span class=\"mi\">1000</span> <span class=\"o\">(</span><span class=\"n\">mk_instance</span> <span class=\"n\">e_inst_type</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>to find an instance of <code>has_coe_to_fun</code>/<code>has_coe_to_sort</code>. This no longer works because these classes now take one more argument. How do I fix this?</p>",
        "id": 232029569,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616791722
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> here</p>",
        "id": 232108551,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616869721
    },
    {
        "content": "<p>Fixed <code>simps</code>. The next expression that used to work with the old <code>coe_fn</code> but fails now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">End</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">End</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">End.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- This works fine</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">End</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"c1\">-- This fails with error</span>\n<span class=\"c1\">-- failed to synthesize type class instance for</span>\n<span class=\"c1\">-- f g : End ℕ</span>\n<span class=\"c1\">-- ⊢ has_coe_to_fun (End ℕ) (λ {f : End ℕ}, End ℕ)\"</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">End</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 232145327,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616911494
    },
    {
        "content": "<p>One more problem: <code>derive has_coe_to_sort</code> no longer works because <code>has_coe_to_sort new_def</code> is not a <code>Sort*</code></p>",
        "id": 232176606,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616948495
    },
    {
        "content": "<p>Does <code>derive [\\lam T, has_coe_to_sort T (A \\to B)]</code>?</p>",
        "id": 232176979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616948874
    },
    {
        "content": "<p>I'll try tonight (or you can try on <a href=\"https://github.com/leanprover-community/mathlib/tree/coe-fn-backport\">branch#coe-fn-backport</a>)</p>",
        "id": 232177497,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616949337
    },
    {
        "content": "<p>Also, I can't understand why Lean fails to simplify using <code>swap_apply_left</code> in <code>group_theory/perm/sign</code>, line 439</p>",
        "id": 232177587,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616949415
    },
    {
        "content": "<p>Oh, I bet in the context of the derive handler <code>A</code> and <code>B</code> aren't available yet</p>",
        "id": 232177903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616949790
    },
    {
        "content": "<p>So far I was replacing <code>derive</code> with explicit <code>instance</code>s.</p>",
        "id": 232177966,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616949853
    },
    {
        "content": "<p>I think that's probably fine</p>",
        "id": 232177991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616949892
    },
    {
        "content": "<p>I have no idea why it fails in <code>perm/sign</code>.</p>",
        "id": 232178108,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616949989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Could you please fix <code>elementwise</code> in <a href=\"https://github.com/leanprover-community/mathlib/tree/coe-fn-backport\">branch#coe-fn-backport</a>? In this branch we moved <code>F</code>/<code>S</code> in <code>has_coe_to_fun</code>/<code>has_coe_to_sort</code> from output to an <code>out_params</code> argument.</p>",
        "id": 232684385,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617235411
    },
    {
        "content": "<p>Certainly I can try, but unfortunately I won't really have time until next Tuesday. I've already exceeded my Lean budget today and should start packing for the weekend! I've starred this message.</p>",
        "id": 232684488,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617235484
    },
    {
        "content": "<p>I had a go at fixing this in <a href=\"https://github.com/leanprover-community/mathlib/tree/coe-fn-backport-bmehta-test\">branch#coe-fn-backport-bmehta-test</a> (so as not to mess up anyone else's work), I think it worked? The CI error is in a different file now at least</p>",
        "id": 232692978,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617242503
    },
    {
        "content": "<p>Thank you! Merged back to my branch, fixing other errors.</p>",
        "id": 232699920,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617249018
    },
    {
        "content": "<p>I fixed all compile errors in <code>src/</code>, see <a href=\"https://github.com/leanprover-community/mathlib/issues/7033\">#7033</a>, but there are a few regressions that may be related to the changes in C++ code. I'll try to make <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>'s tonight.</p>\n<ul>\n<li>sometimes <code>exact ⟨_, by simp, a + b⟩</code> fails to deduce the value of <code>_</code> from <code>a + b</code> before evaluating <code>by simp</code>, see <a href=\"https://github.com/leanprover-community/mathlib/pull/7033/files#diff-974198b01e68e2f07fa52ee6391a9234237738fa4009a5565e3754dae15ba7dfL630\">these lines</a> of the diff.</li>\n<li>sometimes Lean needs more type annotations, may be related to the previous item, see <a href=\"https://github.com/leanprover-community/mathlib/pull/7033/files#diff-21c4e0febee1d0ac977944b0ba0d0ae83e8c4b3a2a5cfaff2f60eec313ec6449\">here</a>;</li>\n<li><code>@[derive has_coe_to_fun]</code> no longer works because <code>has_coe_to_fun my_type</code> is not a <code>Sort*</code>. Is it hard to make <code>derive</code> work when <code>myclass mytype</code> is <code>Π (arg : Type . out_param), Sort*</code>?</li>\n<li><code>simp</code> can't use <code>coe_fn_coe_base</code>, see <a href=\"https://github.com/leanprover-community/mathlib/pull/7033/files#diff-21c4e0febee1d0ac977944b0ba0d0ae83e8c4b3a2a5cfaff2f60eec313ec6449\">here</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/7033/files#diff-29a16c03884a7a902d4ae9eaed0b63eaf7cb329734950ecc58618a155fe80bc4L1276\">here</a>;</li>\n<li><code>lemma coe_inj {e₁ e₂ : α ≃ β} : ⇑e₁ = e₂ ↔ e₁ = e₂ :=</code> no longer works, now we need <code>lemma coe_inj {e₁ e₂ : α ≃ β} : (e₁ : α → β) = e₂ ↔ e₁ = e₂ :=</code>;</li>\n<li><code>change ... with ...</code> causes timeout <a href=\"https://github.com/leanprover-community/mathlib/pull/7033/files#diff-0100cf1cb979093e120d1b72c06e27a069fbe492f5d8eabec094dbe9b3ce80dd\">here</a>;</li>\n<li>in <a href=\"https://github.com/leanprover-community/mathlib/pull/7033/files#diff-126733ed2b8b67441355f6f20dbb566366f0dd0844a7d7b6ee5e7c6671c46e68\">one proof</a> <code>simp</code> fails to use <code>swap_apply_left</code> and <code>swap_apply_right</code></li>\n</ul>",
        "id": 233715815,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617910755
    },
    {
        "content": "<p>And tests still fail. Some of them indicate that we need to fix linters about <code>coe_fn</code>.</p>",
        "id": 233715898,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617910802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Ping here</p>",
        "id": 233888943,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1618001919
    },
    {
        "content": "<p>I've updated both Lean branch and mathlib branch.</p>",
        "id": 253682323,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631847636
    },
    {
        "content": "<p>Pushed to <a href=\"https://github.com/leanprover-community/mathlib/issues/7033\">#7033</a>, waiting for CI. Probably there will be some new failures.</p>",
        "id": 253682354,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631847665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 253682702,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631847984
    },
    {
        "content": "<p>See also the list of regressions from April. I guess, it's still the same.</p>",
        "id": 253682736,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631848012
    },
    {
        "content": "<p>Thanks for the update! I'll take a look in about 1 hour.</p>",
        "id": 253705308,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631865735
    },
    {
        "content": "<p>Pushed some fixes</p>",
        "id": 253736328,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631882918
    },
    {
        "content": "<p>I don't know how to fix the deterministic timeout (see CI).</p>",
        "id": 253877618,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631981141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I've pushed a fix for this timeout.</p>",
        "id": 253992012,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632107212
    },
    {
        "content": "<p>Fixed everything in <code>src/</code> and some things in <code>test/</code>, now merging master and seeing what broke in the meantime.</p>",
        "id": 255201429,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1632828892
    },
    {
        "content": "<p>Another bump, fixed <code>src</code> and some more files in <code>test</code>. We're nearly there now...</p>",
        "id": 257350780,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634125528
    },
    {
        "content": "<p><code>src</code> and <code>test</code> now fully build on my machine. Let's hope the CI runner doesn't crash this time.</p>",
        "id": 257366769,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634132423
    },
    {
        "content": "<p>Another week, another bump. All tests passed on my machine before the merge, let's see what they do now.</p>",
        "id": 258216568,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634657768
    },
    {
        "content": "<p>Should we freeze the queue and prioritize this?</p>",
        "id": 258216961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634657891
    },
    {
        "content": "<p>What is the state with mathlib?  Can we expect to port mathlib to the change in a timely manner?</p>",
        "id": 258218493,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634658375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I think that's what <a href=\"https://github.com/leanprover-community/mathlib/issues/7033\">#7033</a> is doing.</p>",
        "id": 258229077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634661791
    },
    {
        "content": "<p>Ah ok, that one only has failures in the tests.</p>",
        "id": 258229200,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634661838
    },
    {
        "content": "<p>I'm happy with merging <a href=\"https://github.com/leanprover-community/lean/issues/557\">lean#557</a></p>",
        "id": 258229535,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634661936
    },
    {
        "content": "<p>Let's go for it.</p>",
        "id": 258230745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634662316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Backporting.20coercions/near/258229200\">said</a>:</p>\n<blockquote>\n<p>Ah ok, that one only has failures in the tests.</p>\n</blockquote>\n<p>It even built completely once on my machine, except mathlib got some new <code>has_coe_to_fun</code> definitions :P</p>",
        "id": 258251587,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634669348
    },
    {
        "content": "<p>Seems like bors is having trouble to find time for <a href=\"https://github.com/leanprover-community/lean/issues/557\">lean#557</a></p>",
        "id": 258257330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634671648
    },
    {
        "content": "<p>But I don't think it's waiting for a runner, right?</p>",
        "id": 258257527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634671723
    },
    {
        "content": "<p>The <code>staging</code> build has a job which appears to be stuck: <a href=\"https://github.com/leanprover-community/lean/runs/3941583934?check_suite_focus=true\">https://github.com/leanprover-community/lean/runs/3941583934?check_suite_focus=true</a></p>",
        "id": 258257947,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1634671911
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/557\">lean#557</a> is now merged. So <a href=\"https://github.com/leanprover-community/mathlib/issues/7033\">#7033</a> should become the corresponding \"bump lean\" PR, I guess.</p>",
        "id": 258317752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634710619
    },
    {
        "content": "<p>Ooh never mind, I guess we first need a lean release.</p>",
        "id": 258320564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634712862
    },
    {
        "content": "<p>Yeah, the previous PR (not even <a href=\"https://github.com/leanprover-community/mathlib/issues/557\">#557</a>) was stuck in the \"Build sanitized\" steps for an unknown reason.  I've put the other one back one queue again as well.</p>",
        "id": 258323025,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634714301
    },
    {
        "content": "<p>Could somebody please adjust the types of the coercion inductives to match Lean4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Coe.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_2</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_2</span><span class=\"o\">)</span>\n<span class=\"n\">Coeₓ.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_2</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">))</span>\n<span class=\"n\">CoeFun.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">outParam.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">u_2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_2</span><span class=\"o\">)</span>\n<span class=\"n\">CoeFunₓ.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">outParam.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">u_2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">u_2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">CoeSort.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span> <span class=\"bp\">→</span> <span class=\"n\">outParam.</span><span class=\"o\">{</span><span class=\"n\">u_2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_2</span><span class=\"o\">)</span>\n<span class=\"n\">CoeSortₓ.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span> <span class=\"bp\">→</span> <span class=\"n\">outParam.</span><span class=\"o\">{</span><span class=\"n\">u_2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">u_2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 258443240,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1634763530
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/632\">https://github.com/leanprover-community/lean/pull/632</a></p>",
        "id": 258460219,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634772228
    },
    {
        "content": "<p>I haven't done any testing, just handed it off to CI for now.</p>",
        "id": 258460921,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634772679
    },
    {
        "content": "<p>Thanks! I forgot that the mathlib-propagation happens later.</p>",
        "id": 258464299,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1634774784
    },
    {
        "content": "<p>It seems plausible that there may not be any changes required in mathlib. Later today I'll make a mathlib branch to test.</p>",
        "id": 258464641,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634774996
    },
    {
        "content": "<p>I suggest that we merge <a href=\"https://github.com/leanprover-community/mathlib/issues/9824\">#9824</a> without waiting for this.</p>",
        "id": 258470858,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634778571
    },
    {
        "content": "<p>Once <a href=\"https://github.com/leanprover-community/lean/issues/632\">lean#632</a> (and its <code>mathlib</code> part) are ready, we can release a new Lean and merge again.</p>",
        "id": 258470956,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634778613
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> Should I merge <a href=\"https://github.com/leanprover-community/mathlib/issues/9824\">#9824</a> once CI is happy? It was happy with the previous commit, and the last commit just removes a duplicate import, so I'm pretty sure that CI will be happy.</p>",
        "id": 258475801,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634781936
    },
    {
        "content": "<p>Can we edit Scott's post so the commit message says something about the coercion changes?</p>",
        "id": 258476181,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1634782199
    },
    {
        "content": "<p>Nothing long, but this is a big breaking change, it doesn't hurt to have it in the permanent record</p>",
        "id": 258476275,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1634782254
    },
    {
        "content": "<p>Otherwise I'm fine with merging</p>",
        "id": 258476285,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1634782265
    },
    {
        "content": "<p>I added a short commit message. Did I forget something?</p>",
        "id": 258477059,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634782887
    },
    {
        "content": "<p>I also see a new command <code>setup_tactic_parser</code>. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> could you please add its description to the commit message?</p>",
        "id": 258478103,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634783721
    },
    {
        "content": "<p><code>setup_tactic_parser</code> has been around for ages, looks like it just got a minor update because of the namespacing changes. <a href=\"https://github.com/leanprover-community/mathlib/pull/9824/files#diff-41e4d36d845844e40ede47bd45f062b5f9293b9517112eb65dcfed9f25ce17cfL1886\">https://github.com/leanprover-community/mathlib/pull/9824/files#diff-41e4d36d845844e40ede47bd45f062b5f9293b9517112eb65dcfed9f25ce17cfL1886</a></p>",
        "id": 258478656,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1634784168
    },
    {
        "content": "<p>We use <code>setup_tactic_parser</code> a lot more now, both because we should, and a lot of the <code>open</code> statements that it can replace needed fixing anyway.</p>",
        "id": 258480729,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634785821
    }
]