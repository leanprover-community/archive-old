[
    {
        "content": "<p>This is probably a very basic question, but I'm wondering about the best way to extend instances. I have a <code>slash_invariant_form</code> structure and a <code>modular_form</code> which extends it. I now want to prove an instance of <code>has_add</code> for each. Is there a way to make use of the <code>extends</code>? Specifically, I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œì</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">SL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">slash_invariant_form</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñç</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">slash_action_eq'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"bp\">Œì</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"bp\">‚à£</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_add</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">slash_invariant_form</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">--Say I have this</span>\n\n<span class=\"c1\">--Can I use this to make the following easier (i.e. only prove that `mdifferentible` and `bdd_` behaves well?</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">modular_form</span> <span class=\"kd\">extends</span> <span class=\"n\">slash_invariant_form</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hol'</span> <span class=\"o\">:</span> <span class=\"n\">mdifferentiable</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñç</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">bdd_at_infty'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">SL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)),</span> <span class=\"n\">is_bounded_at_im_infty</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"bp\">‚à£</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">]))</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">modular_form.has_add</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">modular_form</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It feels that I should be able to use the fact that <code>modular_form</code> extends <code>slash_invariant_form</code> to make it so that, if I define the add the same way, then I only need to check that <code>hol'</code> and <code>bdd_at_infty'</code> are additive, but I'm not sure how to do this.</p>",
        "id": 307504111,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1667389377
    },
    {
        "content": "<p>Have a look at how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.has_add\">docs#continuous_linear_map.has_add</a> is defined</p>",
        "id": 307510239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667391647
    },
    {
        "content": "<p>In general, you define the addition as <code> Œª x y, { new_field := _, .. x.to_foo + y.to_foo }</code> for old-style structures, or <code>Œª x y, { new_field := _, to_foo := x.to_foo + y.to_foo }</code> for new-style structures.</p>",
        "id": 307510597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667391772
    },
    {
        "content": "<p>perfect thats what I was looking for!</p>",
        "id": 307510699,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1667391820
    },
    {
        "content": "<p>Note that for things with to_fun we tend to prefer \"old\" style (<code>set_option old_structure_cmd true</code>)</p>",
        "id": 307510788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667391846
    }
]