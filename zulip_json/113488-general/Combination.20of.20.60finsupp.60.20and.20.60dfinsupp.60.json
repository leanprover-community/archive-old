[
    {
        "content": "<p>The following is not found by <code>apply_instance</code>. What's the easiest way to prove it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dfinsupp</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 301150858,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1664333519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329754\">@Antoine Labelle</span> This is a common problem with the direct sum.  The instance is there, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.add_comm_monoid\">docs#dfinsupp.add_comm_monoid</a>, but doesn't elaborate for some reason.</p>",
        "id": 301152715,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664335176
    },
    {
        "content": "<p>My usual workaround is to write a bunch of rubbish with @ to help Lean find it ... not sure if there's a better way.</p>",
        "id": 301152797,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664335252
    },
    {
        "content": "<p>In this case you could also use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum\">docs#direct_sum</a></p>",
        "id": 301153060,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664335496
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dfinsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.direct_sum.finsupp</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">direct_sum</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">⨁</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 301153069,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664335506
    },
    {
        "content": "<p>(which is defined with dfinsupp btw)</p>",
        "id": 301153092,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664335543
    },
    {
        "content": "<p>One sec, let me fix that code with the proper notation (fixed)</p>",
        "id": 301153095,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664335550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I also asked a question about the use of <code>direct_sum</code> versus <code>dfinsupp</code> (<a href=\"#narrow/stream/113488-general/topic/direct_sum.20vs.20dfinsup\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/direct_sum.20vs.20dfinsup</a>), so if you want to explain what <code>direct_sum</code> does differently I would be interested.</p>",
        "id": 301155511,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1664337916
    },
    {
        "content": "<p>Instead of adding a bunch of <code>@</code>s to help lean find it, you can also track down which instance it is that lean can't find, and add <code>instance : the_missing_one := @the_existing_one _ _ _ ...</code></p>",
        "id": 301181511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664354093
    },
    {
        "content": "<p>As a mathematician, I would say we should add all these instances, and use <code>direct_sum</code> in doing mathematics.</p>",
        "id": 301181892,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664354254
    },
    {
        "content": "<p>I think there are infinitely many such missing instances, so at best we can add them as we need them</p>",
        "id": 301183302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664354761
    },
    {
        "content": "<p>I think Lean 4 fixes the bug causing the issue</p>",
        "id": 301183378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664354780
    },
    {
        "content": "<p>I tried adding the instance used by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.add_comm_monoid\">docs#dfinsupp.add_comm_monoid</a>, but I get weird problems when I try to do this for modules. In the following code, the two definitions compile correctly but the second <code>haveI</code> in tactic environment fails. Any ideas?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dfinsupp</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">example1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">example2</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- The second line fails, but it succeeds if I remove the first line.</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 301350163,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1664410993
    },
    {
        "content": "<p>What happens if you replace the first <code>haveI</code> by <code>letI</code>?</p>",
        "id": 301375427,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664432954
    },
    {
        "content": "<p>It works, thanks!</p>",
        "id": 301434477,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1664456461
    },
    {
        "content": "<p>You should replace both!</p>",
        "id": 301452456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664461516
    },
    {
        "content": "<p>The technical reason is that <code>haveI</code>, like <code>lemma</code>, forgets the definition, so it's like assuming each <code>add_comm_monoid (α i →₀ R)</code> has some random unknown <code>add_comm_monoid</code> structure. <code>letI</code> remembers that the <code>add_comm_monoid</code> structure actually derives from <code>finsupp</code>.</p>",
        "id": 301452896,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1664461630
    },
    {
        "content": "<p>Basically, use <code>haveI</code> only with classes that live in <code>Prop</code>.</p>",
        "id": 301452973,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1664461649
    },
    {
        "content": "<p>I see, thanks for the explanation.</p>",
        "id": 301454722,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1664462116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Combination.20of.20.60finsupp.60.20and.20.60dfinsupp.60/near/301452973\">said</a>:</p>\n<blockquote>\n<p>Basically, use <code>haveI</code> only with classes that live in <code>Prop</code>.</p>\n</blockquote>\n<p>This is a valid rule when proving a lemma, but the real rule is more \"Use <code>haveI</code> unless you want to access the definition\" because <code>letI</code> adds a <code>let</code> binding which will mess your defeq if you're constructing a definition.</p>",
        "id": 301474811,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664467497
    }
]