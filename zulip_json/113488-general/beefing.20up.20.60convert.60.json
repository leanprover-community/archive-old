[
    {
        "content": "<p>I might have asked this before but I can't find the thread; perhaps someone already told me why this can't happen. I can imagine a beefed-up <code>convert</code> which makes much more progress on the goals below. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"c1\">-- proof that aₙ → t implies -aₙ → -t</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"c1\">-- using 4 or whatever</span>\n  <span class=\"c1\">-- want: ∀ n, |a n - t| = | -a n - -t|</span>\n  <span class=\"c1\">-- but get</span>\n  <span class=\"c1\">-- ⊢ ∀ ε, ... = ∀ ε, ...</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">--</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- workaround</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- I want this to be the goal so I don't have to type it</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"bp\">|</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">abs_sub_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- minimised convert \"failure\"</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ (P → R) = (P → Q)</span>\n  <span class=\"c1\">-- Why not `R = Q` or `R ↔ Q`?</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- expecting `b = a`</span>\n  <span class=\"c1\">-- ⊢ (∀ (n : ℕ), f n = b) = ∀ (n : ℕ), f n = a</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268971226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642876524
    },
    {
        "content": "<p>So the first-order explanation is that <code>congr</code> checks for a function application, and a Pi/forall/function type (<code>P → R</code>) is not a function application</p>",
        "id": 268971710,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642877179
    },
    {
        "content": "<p>But, I don't see why <code>congr</code> couldn't also try applying a suitable version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/forall_congr\">docs#forall_congr</a> (followed by <code>intro</code>) and then continuing</p>",
        "id": 268971733,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642877233
    },
    {
        "content": "<p>This reminds me of a tactic I wrote as an exercise that does sort of what you want here. <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Automatic.20intro.2Fcases.2Fspecialize.2Fuse.20dance/near/203997071\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Automatic.20intro.2Fcases.2Fspecialize.2Fuse.20dance/near/203997071</a></p>",
        "id": 268971896,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642877471
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">enter</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span> <span class=\"n\">B</span> <span class=\"n\">n</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">a : ℕ → ℝ,</span>\n<span class=\"cm\">t ε : ℝ,</span>\n<span class=\"cm\">εpos : 0 &lt; ε,</span>\n<span class=\"cm\">B n : ℕ,</span>\n<span class=\"cm\">hB : B ≤ n,</span>\n<span class=\"cm\">ha : |a n - t| &lt; ε</span>\n<span class=\"cm\">⊢ | -a n - -t| &lt; ε</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">enter</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">P Q R : Prop,</span>\n<span class=\"cm\">hP : P,</span>\n<span class=\"cm\">h : Q</span>\n<span class=\"cm\">⊢ R</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">enter</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">f : ℕ → ℝ,</span>\n<span class=\"cm\">a b : ℝ,</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">h : f n = a</span>\n<span class=\"cm\">⊢ f n = b</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268971899,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642877477
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">enter_aux_use</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">focus1</span> <span class=\"bp\">$</span> <span class=\"n\">tactic.exact</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">done</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">fconstructor</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">enter_aux_use</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">enter_get_local</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"n\">get_local</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic.fail</span> <span class=\"o\">(</span><span class=\"n\">format.join</span> <span class=\"o\">[</span><span class=\"s2\">\"enter failed: no such local '\"</span><span class=\"o\">,</span> <span class=\"n\">to_fmt</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"s2\">\"'\"</span><span class=\"o\">])</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">The implementation of `enter` for a hypothesis and the goal.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">enter_aux</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">nh</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"n\">nh</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">::</span> <span class=\"n\">ids</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">enter_get_local</span> <span class=\"n\">nh</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">e_intro</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.note</span> <span class=\"n\">nh</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n    <span class=\"n\">try</span> <span class=\"bp\">$</span> <span class=\"n\">tactic.clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"n\">nh</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">e_cases</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"o\">[(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">])]</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.cases</span> <span class=\"n\">h</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">nh</span><span class=\"o\">],</span>\n    <span class=\"n\">enter_aux_use</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"n\">h''.local_pp_name</span><span class=\"o\">),</span>\n  <span class=\"n\">h''</span> <span class=\"bp\">←</span> <span class=\"n\">e_intro</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">e_cases</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"o\">(</span><span class=\"n\">format.join</span> <span class=\"o\">[</span><span class=\"s2\">\"enter failed: could not use identifier '\"</span><span class=\"o\">,</span> <span class=\"n\">to_fmt</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"s2\">\"'\"</span><span class=\"o\">]),</span>\n  <span class=\"n\">enter_aux</span> <span class=\"n\">h''</span> <span class=\"n\">ids</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">The implementation of `enter` for two hypotheses.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">enter_at_aux</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">nh</span> <span class=\"n\">nh'</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"n\">nh</span> <span class=\"n\">nh'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">::</span> <span class=\"n\">ids</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e_cases</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">nh</span> <span class=\"n\">nh'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">enter_get_local</span> <span class=\"n\">nh</span><span class=\"o\">,</span>\n    <span class=\"n\">h'</span> <span class=\"bp\">←</span> <span class=\"n\">enter_get_local</span> <span class=\"n\">nh'</span><span class=\"o\">,</span>\n    <span class=\"o\">[(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">])]</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.cases</span> <span class=\"n\">h</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">nh</span><span class=\"o\">],</span>\n    <span class=\"n\">tactic.note</span> <span class=\"n\">nh'</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n    <span class=\"n\">try</span> <span class=\"bp\">$</span> <span class=\"n\">tactic.clear</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">h''.local_pp_name</span><span class=\"o\">,</span> <span class=\"n\">nh'</span><span class=\"o\">)),</span>\n  <span class=\"o\">(</span><span class=\"n\">nh</span><span class=\"o\">,</span> <span class=\"n\">nh'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">e_cases</span> <span class=\"n\">nh</span> <span class=\"n\">nh'</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">e_cases</span> <span class=\"n\">nh'</span> <span class=\"n\">nh</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"o\">(</span><span class=\"n\">format.join</span> <span class=\"o\">[</span><span class=\"s2\">\"enter failed: could not use identifier '\"</span><span class=\"o\">,</span> <span class=\"n\">to_fmt</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"s2\">\"'\"</span><span class=\"o\">]),</span>\n  <span class=\"n\">enter_at_aux</span> <span class=\"n\">nh</span> <span class=\"n\">nh'</span> <span class=\"n\">ids</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">`enter h with a₁ a₂ .. aₙ` takes a prefix of n quantifiers shared</span>\n<span class=\"cm\">by `h` and the goal and, effectively, uses `intro`, `specialize`,</span>\n<span class=\"cm\">`cases`, and `use` to enter the shared context.  The supplied</span>\n<span class=\"cm\">identifiers determine how many quantifiers to enter.</span>\n\n<span class=\"cm\">`enter h` does `enter h with a`, choosing a fresh identifier `a` for</span>\n<span class=\"cm\">you.</span>\n\n<span class=\"cm\">`enter h (with a₁ a₂ .. aₙ)? at h'` performs a similar effect between</span>\n<span class=\"cm\">hypotheses `h` and `h'`, where h' is as if it is the `push_neg` of a</span>\n<span class=\"cm\">goal.  That is to say existential quantifiers of `h` or `h'` are used</span>\n<span class=\"cm\">to specialize a universal quantifier of the other.</span>\n\n<span class=\"cm\">A \"quantifier\" is any pi (Π, ∀, or →) or any single-constructor</span>\n<span class=\"cm\">inductive type with two arguments (∃, sigma, ∧, etc.).</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">enter</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span> <span class=\"bp\">→</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"bp\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">\"at\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident_</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get_unused_name</span> <span class=\"s2\">\"a\"</span><span class=\"o\">,</span>\n             <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">o</span>\n<span class=\"bp\">|</span> <span class=\"n\">ids</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">propagate_tags</span> <span class=\"bp\">$</span> <span class=\"n\">enter_aux</span> <span class=\"n\">h</span> <span class=\"n\">ids</span>\n<span class=\"bp\">|</span> <span class=\"n\">ids</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">propagate_tags</span> <span class=\"bp\">$</span> <span class=\"n\">enter_at_aux</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"n\">ids</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">enter</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lim_infinity</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lim_infinity</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lim_infinity</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">enter</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_mul_self</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat.mul_le_mul</span> <span class=\"n\">h</span> <span class=\"n\">h</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"sd\">/-- Continuity of a function at a point  -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">continuous_at_pt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- 0073</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">seq_continuous_of_continuous</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at_pt</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">enter</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span><span class=\"o\">,</span>\n  <span class=\"n\">enter</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">δ</span> <span class=\"n\">δpos</span> <span class=\"n\">at</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n  <span class=\"n\">enter</span> <span class=\"n\">hu</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">nbig</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- proof that aₙ → t implies -aₙ → -t</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">enter</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span> <span class=\"n\">B</span> <span class=\"n\">n</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">a : ℕ → ℝ,</span>\n<span class=\"cm\">t ε : ℝ,</span>\n<span class=\"cm\">εpos : 0 &lt; ε,</span>\n<span class=\"cm\">B n : ℕ,</span>\n<span class=\"cm\">hB : B ≤ n,</span>\n<span class=\"cm\">ha : |a n - t| &lt; ε</span>\n<span class=\"cm\">⊢ | -a n - -t| &lt; ε</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- minimised convert \"failure\"</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">enter</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">P Q R : Prop,</span>\n<span class=\"cm\">hP : P,</span>\n<span class=\"cm\">h : Q</span>\n<span class=\"cm\">⊢ R</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">enter</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">f : ℕ → ℝ,</span>\n<span class=\"cm\">a b : ℝ,</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">h : f n = a</span>\n<span class=\"cm\">⊢ f n = b</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 268971902,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642877497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/beefing.20up.20.60convert.60/near/268971733\">said</a>:</p>\n<blockquote>\n<p>But, I don't see why <code>congr</code> couldn't also try applying a suitable version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/forall_congr\">docs#forall_congr</a> (followed by <code>intro</code>) and then continuing</p>\n</blockquote>\n<p>Maybe <code>convert</code>/<code>congr</code> could get a <code>with</code> clause so you can name those variables being introduced?</p>",
        "id": 268972345,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642878082
    },
    {
        "content": "<p><code>congr'</code> already has such a clause</p>",
        "id": 268980135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642887718
    }
]