[
    {
        "content": "<p><a href=\"https://competition.isabelle.systems/competitions/contest/13/tasks/2/\" target=\"_blank\" title=\"https://competition.isabelle.systems/competitions/contest/13/tasks/2/\">This</a> Proof Ground problem is actually almost exactly a lemma I want. Would somebody (<span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>?) like to PR a solution to mathlib?<br>\nMaybe as a mathlib lemma, it is more natural to use <code>equiv</code> in place of <code>bijective</code>, and replace the target <code>nat</code> by <code>denumerable</code></p>",
        "id": 176112619,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568907972
    },
    {
        "content": "<p>I discussed this with floris after the competition. I think it generalizes to embedding B &lt; A when A is an infinite cardinal</p>",
        "id": 176113991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568908707
    },
    {
        "content": "<p>Assuming AC, a+b=max(a,b) so A-B bijects with A-f(B)</p>",
        "id": 176115715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568909852
    },
    {
        "content": "<p>Yes, I'm going to PR this to mathlib. The current statement I am proving is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">extend_function_of_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">#</span><span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 176127061,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1568917195
    },
    {
        "content": "<p>Here <code>#</code> means <code>cardinal.mk</code></p>",
        "id": 176127152,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1568917227
    },
    {
        "content": "<p>I have already proved this in the case where <code>#α</code> is infinite.</p>\n<p><del>Now that I think of this, when <code>α</code> is infinite, I should probably replace the assumption <code>#s &lt; #α</code> with the weaker condition <code>#(-s : set α) = #α</code> (I already proved the lemma that the former implies the latter).</del><br>\nEDIT: Oh wait, then it's false.</p>",
        "id": 176127813,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1568917577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Could you elaborate on that proof? a+b=a does not imply a-b=a for cardinals</p>",
        "id": 176164017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568953238
    },
    {
        "content": "<p>I was imagining the generalisation being this: if B&lt;A is a subset, and |B|&lt;|A|, then any injection f:B -&gt; A can be extended to a bijection A -&gt; A. The proof is: write C=A\\B and D=A\\f(B) and observe that |C|=|A|=|D|. Did I slip up?</p>",
        "id": 176170582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568964091
    },
    {
        "content": "<p>Those facts are all true but I'm not sure how you are arguing them</p>",
        "id": 176171411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568965188
    },
    {
        "content": "<p>actually you forgot to assume A is infinite, else |C|=|A| fails</p>",
        "id": 176171464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568965219
    },
    {
        "content": "<p>I proved something similar as part of algebraic closure.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">schroeder_bernstein</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">thing_aux</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fxy</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">↪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fxz</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">↪</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hYZ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"err\">↪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"bp\">-</span><span class=\"n\">range</span> <span class=\"n\">fxy</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">↪</span> <span class=\"err\">↥</span><span class=\"bp\">-</span><span class=\"n\">range</span> <span class=\"n\">fxz</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"err\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hYZ</span> <span class=\"err\">$</span>\n    <span class=\"k\">calc</span> <span class=\"n\">Z</span> <span class=\"err\">↪</span> <span class=\"n\">range</span> <span class=\"n\">fxz</span> <span class=\"err\">⊕</span> <span class=\"err\">↥</span><span class=\"bp\">-</span><span class=\"n\">range</span> <span class=\"n\">fxz</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sum_compl</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span>\n    <span class=\"bp\">...</span> <span class=\"err\">↪</span> <span class=\"n\">range</span> <span class=\"n\">fxy</span> <span class=\"err\">⊕</span> <span class=\"err\">↥</span><span class=\"bp\">-</span><span class=\"n\">range</span> <span class=\"n\">fxy</span> <span class=\"o\">:</span>\n      <span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span>\n        <span class=\"o\">(((</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">_</span> <span class=\"n\">fxz</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n          <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">_</span> <span class=\"n\">fxy</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span><span class=\"o\">)</span>\n        <span class=\"n\">f</span>\n    <span class=\"bp\">...</span> <span class=\"err\">↪</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sum_compl</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span>\n\n<span class=\"n\">def</span> <span class=\"n\">thing</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fxy</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">↪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fxz</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">↪</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hYZ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"err\">↪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">↪</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">Y</span> <span class=\"err\">↪</span> <span class=\"n\">range</span> <span class=\"n\">fxy</span> <span class=\"err\">⊕</span> <span class=\"err\">↥</span><span class=\"bp\">-</span><span class=\"n\">range</span> <span class=\"n\">fxy</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sum_compl</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span>\n<span class=\"bp\">...</span> <span class=\"err\">↪</span> <span class=\"n\">range</span> <span class=\"n\">fxz</span> <span class=\"err\">⊕</span> <span class=\"err\">↥</span><span class=\"bp\">-</span><span class=\"n\">range</span> <span class=\"n\">fxz</span> <span class=\"o\">:</span> <span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span>\n  <span class=\"o\">((</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">_</span> <span class=\"n\">fxy</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n    <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">_</span> <span class=\"n\">fxz</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">thing_aux</span> <span class=\"n\">fxy</span> <span class=\"n\">fxz</span> <span class=\"n\">hYZ</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"err\">↪</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sum_compl</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">thing_commutes</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">fxy</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">↪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fxz</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">↪</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hYZ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"err\">↪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">fxy</span> <span class=\"n\">fxz</span> <span class=\"n\">hYZ</span> <span class=\"o\">(</span><span class=\"n\">fxy</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fxz</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">fxy</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_range_self</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"n\">fxy</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">_</span> <span class=\"n\">fxy</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">thing</span><span class=\"o\">,</span> <span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span>\n    <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">to_embedding_coe_fn</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sum_compl_symm_apply_of_mem</span> <span class=\"o\">(</span><span class=\"n\">mem_range_self</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">sum_congr_apply_inl</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sum_compl_apply_inl</span><span class=\"o\">,</span>\n    <span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">to_embedding_coe_fn</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176171515,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568965301
    },
    {
        "content": "<p>Somehow the assumption <code>(Z ↪ Y) → false</code> should be turned into <code>(Z ↪ X) → false</code></p>",
        "id": 176171600,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568965391
    },
    {
        "content": "<p>isn't that just transitivity?</p>",
        "id": 176171613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568965427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think your proof sketch is basically what floris did in the competition</p>",
        "id": 176171779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568965592
    },
    {
        "content": "<p>it would be nice to reduce it to a one liner of mathlib lemmas though</p>",
        "id": 176171805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568965633
    },
    {
        "content": "<p>Unfortunately I don't see how to apply chris's lemma directly here</p>",
        "id": 176172005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568965817
    },
    {
        "content": "<p>it only seems to construct an injection from Y to Z where |Y|&lt;|Z|, and the only obvious candidates are Y=B and Z=A, or Y=f(B) and Z=A, and neither is particularly helpful</p>",
        "id": 176172043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568965886
    },
    {
        "content": "<p>In this situation, we want Y=Z=A, but then <code>(Z ↪ Y) → false</code> fails</p>",
        "id": 176172190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568966049
    },
    {
        "content": "<p>But in the infinite case can we weaken the assumption to <code>(Z ↪ X) → false</code>?</p>",
        "id": 176172323,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568966216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I don't understand why you're calling it a sketch ;-)</p>",
        "id": 176172337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568966241
    },
    {
        "content": "<p>you have to reference actual theorems, and also prove the side conditions</p>",
        "id": 176172345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568966274
    },
    {
        "content": "<p>ideally the formal proof should actually be that short, but the side conditions are messy here</p>",
        "id": 176172396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568966327
    },
    {
        "content": "<p>The argument would convince any mathematician. That's the level where we operate. What we really need is an interface where I can just say what I said to you and then let tactics do the rest.</p>",
        "id": 176172398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568966331
    },
    {
        "content": "<p>we can try <code>cases, refl</code> on the side conditions or whatever. It's all noise.</p>",
        "id": 176172418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568966362
    },
    {
        "content": "<p>you also didn't prove what you claimed to... there are lots of issues with treating that literally as a proof</p>",
        "id": 176172422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568966367
    },
    {
        "content": "<p>Can you give me specific examples of issues? I'd be happy to talk about this but I have to run</p>",
        "id": 176172457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568966403
    },
    {
        "content": "<p>I think my proof is \"math-complete\"</p>",
        "id": 176172507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568966419
    },
    {
        "content": "<p>it's absolutely a sketch, but it's enough hints for a competent mathematician to fill in the rest of the proof</p>",
        "id": 176172517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568966428
    },
    {
        "content": "<p>but you should never confuse \"enough to communicate the main ideas\" with \"proof\"</p>",
        "id": 176172545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568966454
    },
    {
        "content": "<p>Isn't that the definition of <em>proof</em>?</p>",
        "id": 176172592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568966505
    },
    {
        "content": "<p>for one thing, communication depends on the target audience; computers should be treated as a particularly dumb student</p>",
        "id": 176172651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568966531
    },
    {
        "content": "<p>it is not really possible to give an actual definition of \"proof\" if you take that position seriously... in the limit, anything that is logically derivable can be considered \"proof by trivial\"</p>",
        "id": 176172782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568966652
    },
    {
        "content": "<p>This is trending philosophical, but one property I want the word \"proof\" to have is that it's objective or at least societally defined, whereas \"communication\" is context dependent</p>",
        "id": 176172862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568966763
    },
    {
        "content": "<p>Really, I prefer to just sidestep the whole matter and only talk about formal proof, which has a proper definition, but it makes it difficult for me to interpret Kevin when he wants a raised eyebrow to constitute a valid proof</p>",
        "id": 176173043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568966977
    },
    {
        "content": "<p>It depends whose eyebrow it is.</p>",
        "id": 176173760,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568967669
    },
    {
        "content": "<p>Here's the closest I got to Kevin's sketch, modulo the cardinality fact:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">prefix</span> <span class=\"bp\">`#`</span> <span class=\"o\">:=</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">mk_eq_mk</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">#</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">↪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">↪</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">X</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">#</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">≃</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mk_eq_mk</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)]),</span>\n  <span class=\"k\">have</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mk_eq_mk</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">g</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)]),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">e2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">e1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">e1</span> <span class=\"k\">with</span> <span class=\"n\">e1</span><span class=\"o\">,</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sum_compl</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">((</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"bp\">_</span> <span class=\"n\">e1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sum_compl</span> <span class=\"bp\">_</span><span class=\"o\">)),</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">g</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sum_compl_symm_apply_of_mem</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range_self</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_eq</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176175662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568969639
    },
    {
        "content": "<p>the cardinal fact is proved like this: If b&lt;a then a=b+(a-b)=max(b,a-b), hence a-b=a.</p>",
        "id": 176177182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568971104
    },
    {
        "content": "<p>Maybe some automatic theorem prover can find that fact about cardinals given what is in mathlib?</p>",
        "id": 176177224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568971179
    },
    {
        "content": "<p>I'm taking a look at your proof. It's annoying that hovering over <code>equiv.set.sum_compl</code> doesn't show me its type -- I think this is because we're in tactic mode.</p>",
        "id": 176177403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568971367
    },
    {
        "content": "<p>Note that the cardinal fact as I've stated it is false, so if you think you have proved it you should not trust your proof</p>",
        "id": 176177882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568971847
    },
    {
        "content": "<p>it would be pretty difficult to get nitpick or whatever counterexample generator to find why the statement is false too</p>",
        "id": 176177918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568971904
    },
    {
        "content": "<p>actually scratch that - the problem is with finite sets so they can probably handle it</p>",
        "id": 176177996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568971971
    },
    {
        "content": "<p>In chris's proof he uses calc blocks instead to build the equivs, which looks a bit nicer</p>",
        "id": 176178115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972075
    },
    {
        "content": "<p>I thought we were talking about the infinite case now. All this a+b=max(a,b) is only true in the infinite case, I've been assuming infinite.</p>\n<p>Your proof is extraordinary.</p>\n<div class=\"codehilite\"><pre><span></span>⊢ ⇑(equiv.trans (equiv.symm (equiv.set.sum_compl (set.range ⇑f)))\n         (equiv.trans (equiv.sum_congr (equiv.trans (equiv.symm (equiv.set.range ⇑f _)) (equiv.set.range ⇑g _)) e1)\n            (equiv.set.sum_compl (set.range ⇑g))))\n      (⇑f x) =\n    ⇑g x\n</pre></div>\n\n\n<p>We prove this by saying \"...and the diagram obviously commutes\". What is going on? This is trivial stuff.</p>",
        "id": 176178141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972093
    },
    {
        "content": "<p>there are side conditions</p>",
        "id": 176178162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972118
    },
    {
        "content": "<p>I can prove this whole thing by drawing one picture.</p>",
        "id": 176178164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972125
    },
    {
        "content": "<p>no, you can state the problem by drawing a picture</p>",
        "id": 176178169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972138
    },
    {
        "content": "<p>There aren't any side conditions. Assuming foo, we can prove the existence theorem. This is a really great example of a proof which can be done by a simple picture.</p>",
        "id": 176178182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972160
    },
    {
        "content": "<p>The only thing I wrote in the proof are side conditions</p>",
        "id": 176178227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972175
    },
    {
        "content": "<p>everything else is indeed being handled by simp</p>",
        "id": 176178232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972185
    },
    {
        "content": "<p>wow</p>",
        "id": 176178244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972209
    },
    {
        "content": "<p>The proof sketch you gave me essentially covers the first two lines of the proof</p>",
        "id": 176178280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972255
    },
    {
        "content": "<p>you never said what the bijection is or how to build it</p>",
        "id": 176178290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972273
    },
    {
        "content": "<p>that's all \"type tetris\"</p>",
        "id": 176178294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972280
    },
    {
        "content": "<p>with side conditions in the middle of it all</p>",
        "id": 176178340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972302
    },
    {
        "content": "<p>I think side conditions are the bane of any theorem prover, because there is no good way to write them, which makes it easy to ignore them for expositional purposes in math</p>",
        "id": 176178474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972448
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/FkyNkwO2aDMqTtrmgrUVbTo8/IMG_20190920_104043021.jpg\" target=\"_blank\" title=\"IMG_20190920_104043021.jpg\">IMG_20190920_104043021.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FkyNkwO2aDMqTtrmgrUVbTo8/IMG_20190920_104043021.jpg\" target=\"_blank\" title=\"IMG_20190920_104043021.jpg\"><img src=\"/user_uploads/3121/FkyNkwO2aDMqTtrmgrUVbTo8/IMG_20190920_104043021.jpg\"></a></div>",
        "id": 176178561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972524
    },
    {
        "content": "<p>Where is <code>equiv.set.sum_compl_symm_apply_of_mem</code> in my picture? What is going on?</p>",
        "id": 176178668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972654
    },
    {
        "content": "<p>Where's the bijection? I'm not even sure where f is in the picture</p>",
        "id": 176178672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972660
    },
    {
        "content": "<p>Two down arrows are f and g.</p>",
        "id": 176178680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972672
    },
    {
        "content": "<p>The bijection is because I identified the two sets Y and Z, the top halves are the same, and the bottom halves biject by a trivial lemma which I proved elsewhere on the board.</p>",
        "id": 176178697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972701
    },
    {
        "content": "<p><code>equiv.set.sum_compl_symm_apply_of_mem </code> says that if you are on the top half of the picture then you can go from y to the top half of y</p>",
        "id": 176178729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972747
    },
    {
        "content": "<p>I am working in the category of sets equipped with a map from X, so somehow the commutativity of the diagrams just all gets swallowed up by the machine.</p>",
        "id": 176178730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972749
    },
    {
        "content": "<p>Maybe I am using some better structure than you.</p>",
        "id": 176178778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972775
    },
    {
        "content": "<p>in lean there are two additional points in the picture, Y and Z</p>",
        "id": 176178793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972809
    },
    {
        "content": "<p>and maps from Y to the parts of Y</p>",
        "id": 176178804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972823
    },
    {
        "content": "<p>Aah, this is one of these instances where a mathematician thinks \"set-theoretically\" and all these issues melt away.</p>",
        "id": 176178833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972852
    },
    {
        "content": "<p>sure I'd love to do that, but DTT</p>",
        "id": 176178840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972864
    },
    {
        "content": "<p>(all the maps become the identity map in some sense)</p>",
        "id": 176178842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972866
    },
    {
        "content": "<p>actually it doesn't really solve anything, it just removes the function <code>equiv.set.sum_compl_symm_apply_of_mem</code> and leaves the side condition</p>",
        "id": 176178893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972896
    },
    {
        "content": "<p>Are we missing a tactic which does arguments like this?</p>",
        "id": 176178900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972902
    },
    {
        "content": "<p>meh</p>",
        "id": 176178912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972910
    },
    {
        "content": "<p>\"like this\" is never enough</p>",
        "id": 176178915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972926
    },
    {
        "content": "<p>I generalize from &gt;1 example</p>",
        "id": 176178927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972951
    },
    {
        "content": "<p>given that Y \\ f(X) bijects with Z \\ g(X), figure out the rest yourself. Is that too much for an AI?</p>",
        "id": 176178930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568972955
    },
    {
        "content": "<p>Probably not</p>",
        "id": 176178953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568972966
    },
    {
        "content": "<p>I can imagine an SMT prover can get this, but when it's all embedded in lean some things get obscured</p>",
        "id": 176179017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568973003
    }
]