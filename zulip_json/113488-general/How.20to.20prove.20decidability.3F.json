[
    {
        "content": "<p>I was reproving things about the natural numbers, when I thought it would be good to show that le (&lt;=) is decidable.<br>\ndecidable is an inductive class constructed either by p or (not p), so supposing I construct a function f taking in two natural numbers a and b, and gives a proof of either <code>a &lt;= b</code> or <code>\\not(a &lt;= b)</code>,  and additionally showed that f was decidable, then I could possibly show that &lt;= was decidable with some ite statement over another function g that tells us which statement we are trying to prove. But firstly, we would have to show g was decidable, and I can't seem to show that.</p>\n<p>How should I proceed to show the decidability of (a class of) statements?</p>\n<p>Edit: Now that I think of it, I'm not sure what the syntax of the statement I'm trying to prove is.</p>",
        "id": 184087098,
        "sender_full_name": "Li Yao'an",
        "timestamp": 1577084638
    },
    {
        "content": "<p>Certainly you can't prove decidability by case analysis. This is essentially assuming what you want to prove</p>",
        "id": 184088713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577087421
    },
    {
        "content": "<p>The actual statement you want to prove is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">decidable_le</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">&lt;=</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 184088721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577087456
    },
    {
        "content": "<p>In the case of le on natural numbers, the proof goes by induction on one argument and cases on the other</p>",
        "id": 184088735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577087492
    },
    {
        "content": "<p>You have to show that <code>0 &lt;= b</code> is true, <code>succ a &lt;= 0</code> is false, and <code>succ a &lt;= succ b</code> iff <code>a &lt;= b</code></p>",
        "id": 184088786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577087539
    },
    {
        "content": "<p>Thanks for the reply; I am now less confused.</p>\n<p>On a theoretical note, suppose I had written the function f (inductively). Additionally, I prove that f either outputs a proof of <code> a  &lt;= b </code> or <code>\\not a &lt;= b</code>. Is there any way to formalize the line of reasoning \"f is computable and hence proves that <code> a &lt;= b </code> is decidable?</p>\n<p>On a more practical note, I tried to fill in the sorry for the statement you gave (I sorried out the details):</p>\n<div class=\"codehilite\"><pre><span></span>instance decidable_le : decidable_rel ((≤) : nat -&gt; nat -&gt; Prop)\n|0 b := sorry\n|(succ a) 0 := sorry\n|(succ a) (succ b) :=\nbegin\n   specialize decidable_le a b, cases decidable_le with h h, admit, admit\nend\n</pre></div>\n\n\n<p>but I'm getting \"rec_fn_macro only allowed in meta definitions\". What is this error?</p>",
        "id": 184090659,
        "sender_full_name": "Li Yao'an",
        "timestamp": 1577090342
    },
    {
        "content": "<p>Are you sure? The following gives me no errors:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">instance</span> <span class=\"n\">decidable_le</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"mi\">0</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">decidable_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">decidable_le</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">admit</span><span class=\"o\">,</span> <span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 184097927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577099722
    },
    {
        "content": "<p>My bad, the error only seems to appear once I fill in the admits. Give me some time to generate a somewhat MWE. (I used lots of lemmas.)</p>",
        "id": 184145351,
        "sender_full_name": "Li Yao'an",
        "timestamp": 1577152533
    },
    {
        "content": "<p>Here's a code:</p>\n<div class=\"codehilite\"><pre><span></span>namespace hidden\n\ninductive nat : Type\n|zero : nat\n|succ : nat → nat\n\nnamespace nat\n\nconstant le : nat → nat → Prop\ninfix ` ≤ ` := le\n\naxiom p1 : ∀ b : nat, zero ≤ b\naxiom p2 : ∀ a : nat, ¬succ a ≤ zero\naxiom p3 : ∀ a b : nat, succ a ≤ succ b ↔ a ≤ b\n\ninstance decidable_le : decidable_rel ((≤) : nat -&gt; nat -&gt; Prop) -- rec_fn_macro only allowed in meta definitions\n|zero b := begin apply is_true, exact p1 b end\n|(succ a) zero := begin apply is_false, exact p2 a end\n|(succ a) (succ b) :=\nbegin\n  specialize decidable_le a b, cases decidable_le with h h,\n  apply is_false, rwa p3, apply is_true, rwa p3\nend\n\nend nat\nend hidden\n</pre></div>",
        "id": 184145892,
        "sender_full_name": "Li Yao'an",
        "timestamp": 1577153408
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 184162067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577183193
    },
    {
        "content": "<p>Interesting! Changing <code>instance</code> to <code>theorem</code> (which is not what you want) makes the error go away.</p>",
        "id": 184162640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577184169
    },
    {
        "content": "<p>It might be something to do with the fact that you're using constants. They get very little love here, nobody ever uses them (perhaps for reasons like this?)</p>",
        "id": 184162744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577184328
    },
    {
        "content": "<p>It has to do with the <code>noncomputable</code> markings associated with use of constants and axioms</p>",
        "id": 184168679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577192903
    },
    {
        "content": "<p>compare:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">≤</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">le</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">decidable_le</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"n\">zero</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">apply</span> <span class=\"n\">is_true</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">p1</span> <span class=\"n\">b</span> <span class=\"kn\">end</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">apply</span> <span class=\"n\">is_false</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">p2</span> <span class=\"n\">a</span> <span class=\"kn\">end</span>\n<span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">decidable_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">decidable_le</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_false</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">is_true</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">p3</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">nat</span>\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</pre></div>",
        "id": 184168693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577192929
    },
    {
        "content": "<p>Thanks. It seems fixed now.</p>\n<p>Previously, in my second case, I proved p2 directly: since le a b was defined as <code> \\exists x, a + x = b </code>, I used choice to pick an x and prove false. Changing this to cases resolves the computability issue and removes the error.</p>",
        "id": 184238962,
        "sender_full_name": "Li Yao'an",
        "timestamp": 1577325052
    }
]