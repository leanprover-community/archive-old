[
    {
        "content": "<p>I've found myself faced with a goal like <code>f a = a</code> multiple times now, where <code>f</code> is some bundled morphism.<br>\nIn these cases, I have tools availabe to work with equalities of morphisms directly, but <code>f</code> is some horrible expression so using <code>suffices : f = id</code> isn't feasible.</p>\n<p>It's tempting to add a lemma like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">linear_map.idem_iff_id</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.id</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">linear_map.ext</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Is this type of lemma sensible? Can anyone suggest a better name than <code>idem_iff_id</code>?</p>",
        "id": 223270858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611081038
    },
    {
        "content": "<p>If we have a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.ext_iff\">docs#linear_map.ext_iff</a> with <code>g</code> (and <code>f</code>) explicit, you could easily do what you want with that lemma by setting <code>g := linear_map.id</code>, and that would be a generalization of your lemma. I'm not sure if it's worth it to also add your lemma.</p>",
        "id": 223273325,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611081968
    }
]