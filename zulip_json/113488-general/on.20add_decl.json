[
    {
        "content": "<p>I am trying to understand how <code>to_additive</code> works. This led me to <code>add_decl</code>. I'm confused about the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_new_decl</span> <span class=\"o\">(</span><span class=\"n\">src_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">←</span>    <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">decl</span> <span class=\"err\">←</span>   <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">src_name</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">update_name</span> <span class=\"err\">$</span> <span class=\"bp\">`</span><span class=\"n\">xyzzyquux</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">update_type</span> <span class=\"err\">$</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">update_value</span> <span class=\"err\">$</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">value</span><span class=\"o\">,</span>\n   <span class=\"n\">add_decl</span> <span class=\"n\">decl</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">my_new_decl</span> <span class=\"bp\">`</span><span class=\"n\">has_mul</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">xyzzyquux</span>\n<span class=\"c1\">-- constant xyzzyquux : Type u → Type u</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">has_mul</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@[class, to_additive name.mk_string &quot;has_add&quot; name.anonymous]</span>\n<span class=\"cm\">structure has_mul : Type u → Type u</span>\n<span class=\"cm\">fields:</span>\n<span class=\"cm\">has_mul.mul : Π {α : Type u} [c : has_mul α], α → α → α</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</pre></div>",
        "id": 162810480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554725047
    },
    {
        "content": "<p>Why doesn't <code>#print xyzzyquux</code> give me a <code>structure</code> with fields?</p>",
        "id": 162810507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554725077
    },
    {
        "content": "<p>If you look at the constructors to <code>declaration</code>, <code>inductive</code> is not an option. <code>has_add</code> is a constant. I guess you probably want <code>tactic.add_inductive</code></p>",
        "id": 162811354,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554725877
    },
    {
        "content": "<p>Aha, let me take a look at that.</p>",
        "id": 162811706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554726162
    },
    {
        "content": "<p>But how is <code>to_additive</code> doing this? I thought I had drilled down to the bottom when I hit <code>add_decl</code>. Did I miss a branch?</p>",
        "id": 162811798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554726246
    },
    {
        "content": "<p>I don't think <code>to_additive</code> makes any new structures</p>",
        "id": 162811864,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554726344
    },
    {
        "content": "<p>the lean metaprogramming stuff is not good at creating inductives</p>",
        "id": 162811935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554726380
    },
    {
        "content": "<p>there is a patch in the fork</p>",
        "id": 162811962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554726392
    },
    {
        "content": "<p>but on stock lean, you have to do a whole bunch of <code>to_additive</code> things around each new structure</p>",
        "id": 162811997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554726433
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/group.lean#L636-L645\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/group.lean#L636-L645\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/group.lean#L636-L645</a></p>",
        "id": 162812233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554726606
    },
    {
        "content": "<p>Ok, so the fork has happened...</p>",
        "id": 162812316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554726667
    },
    {
        "content": "<p>But nobody is using it?</p>",
        "id": 162812327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554726676
    },
    {
        "content": "<p>right now it's just accumulating fixes</p>",
        "id": 162812772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554727018
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> Add a new inductive datatype to the environment</span>\n<span class=\"cm\">   name, universe parameters, number of parameters, type, constructors (name and type), is_meta -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">add_inductive</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">is_meta</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">updateex_env</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">add_inductive</span> <span class=\"n\">n</span> <span class=\"n\">ls</span> <span class=\"n\">p</span> <span class=\"n\">ty</span> <span class=\"n\">is</span> <span class=\"n\">is_meta</span>\n</pre></div>\n\n\n<p>Can someone explain how to turn <code>(ls : list name)</code> into list of universe parameters?</p>",
        "id": 162812792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554727035
    },
    {
        "content": "<p>I want just 1 universe</p>",
        "id": 162812804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554727046
    },
    {
        "content": "<p>we want to have a proper release at some point (see the tracking issue)</p>",
        "id": 162812806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554727047
    },
    {
        "content": "<p>And my type will be <code>Type (u + 1)</code>, for the corresponding <code>u</code></p>",
        "id": 162812827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554727071
    },
    {
        "content": "<p>and if mathlib moves to the fork I'm sure development will accelerate</p>",
        "id": 162812829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554727072
    },
    {
        "content": "<p>Don't use <code>add_inductive</code>. It works only for the loosest definition of \"works\"</p>",
        "id": 162812925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554727137
    },
    {
        "content": "<p>So what should I use?</p>",
        "id": 162812950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554727160
    },
    {
        "content": "<p>The fork?</p>",
        "id": 162812953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554727163
    },
    {
        "content": "<p>yes, that's the patch I mentioned</p>",
        "id": 162812964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554727178
    },
    {
        "content": "<p>Keeley has a (completely evil) trick for just emitting plain text for Lean to parse. So if you're desperate you can make inductive definitions programmatically using that. :-)</p>",
        "id": 162813035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554727210
    },
    {
        "content": "<p>another workaround that works on stock lean is to produce a string that looks like an inductive declaration and parse it into the environment</p>",
        "id": 162813041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554727216
    },
    {
        "content": "<p>what Scott said</p>",
        "id": 162813052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554727233
    },
    {
        "content": "<p>Hmmm... I will have to think about what I want to do then</p>",
        "id": 162813106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554727281
    },
    {
        "content": "<p>Switching a custom project to the fork should be easy, right?</p>",
        "id": 162813119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554727297
    },
    {
        "content": "<p>I think so... I'm not up on elan support</p>",
        "id": 162813136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554727319
    },
    {
        "content": "<p>I know Keeley and Ed have played with lean forks, they will know better</p>",
        "id": 162813215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554727376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Do you know what I should put in my toml?</p>",
        "id": 162813279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554727410
    },
    {
        "content": "<p>Where does the fork live?</p>",
        "id": 162813341,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554727457
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean\">https://github.com/leanprover-community/lean</a></p>",
        "id": 162813364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554727483
    },
    {
        "content": "<p>None of the PRs have actually been merged though, so <code>master</code> is still stock</p>",
        "id": 162813542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554727631
    },
    {
        "content": "<p>someone needs to work out why all the travis builds are failing</p>",
        "id": 162813554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554727646
    },
    {
        "content": "<p>I think you can just write <code>lean_version = \"leanprover-community/lean:BRANCH\"</code> in your leanpkg.toml.</p>",
        "id": 162813658,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554727717
    },
    {
        "content": "<p>hmm, maybe not</p>",
        "id": 162813720,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554727780
    },
    {
        "content": "<p>The relevant branch is <a href=\"https://github.com/leanprover-community/lean/pull/3\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/3\">https://github.com/leanprover-community/lean/pull/3</a></p>",
        "id": 162813791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554727810
    },
    {
        "content": "<p>Oh, someone needs to actually run something to make the build that elan pulls, and I've never done that.</p>",
        "id": 162813964,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554728015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>?</p>",
        "id": 162813970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554728025
    },
    {
        "content": "<p>Hmmm... I can't yet get it to work</p>",
        "id": 162814027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554728048
    },
    {
        "content": "<p>This works for me: <a href=\"https://github.com/khoek/leancache/blob/master/leanpkg.toml\" target=\"_blank\" title=\"https://github.com/khoek/leancache/blob/master/leanpkg.toml\">https://github.com/khoek/leancache/blob/master/leanpkg.toml</a></p>",
        "id": 162814062,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554728097
    },
    {
        "content": "<p>I haven't read this thread but have you guys made a release</p>",
        "id": 162814082,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554728110
    },
    {
        "content": "<p><code>khoek/klean:3.4.7</code> ... does that refer to a branch or a release?</p>",
        "id": 162814179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554728187
    },
    {
        "content": "<p>ohhh hang on, unless elan has been changed it doesn't pull from travis?</p>",
        "id": 162814195,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554728209
    },
    {
        "content": "<p>It pulls from <a href=\"https://github.com/leanprover-community/lean/releases\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/releases\">https://github.com/leanprover-community/lean/releases</a></p>",
        "id": 162814206,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554728223
    },
    {
        "content": "<p>Pulling from travis would be a great feature....</p>",
        "id": 162814227,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554728250
    },
    {
        "content": "<p>Aaah... sure. I currently don't have the time to setup the build toolchain</p>",
        "id": 162814443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554728421
    },
    {
        "content": "<p>So using the fork will have to wait.</p>",
        "id": 162814451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554728428
    },
    {
        "content": "<p>So for completeness, the syntax is <code>user/repo:releasename</code> where <code>releasename</code> is not a branch, but rather the name of the release on github without a \"v\" prepended (this was Leo's format).<br>\ne.g. <code>leanprover/lean:3.4.2</code>, where the github release is <code>v3.4.2</code></p>",
        "id": 162814461,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554728435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> It's alive! I would super duper like to merge two teeny functions which save and load <code>expr</code>s from disk using the C++ serializer/deserializer</p>",
        "id": 162814529,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554728498
    },
    {
        "content": "<p>I think it could be lifechanging for people who modify core mathlib stuff like e.g. <code>tactic.basic</code></p>",
        "id": 162814637,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554728571
    },
    {
        "content": "<p>If you can figure out why travis is failing, I'll merge it</p>",
        "id": 162814643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554728577
    },
    {
        "content": "<p>I think that more olean metaprogramming access would be a very useful thing</p>",
        "id": 162814679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554728624
    },
    {
        "content": "<p>On it :D</p>",
        "id": 162815414,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554729144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Works now</p>",
        "id": 162815804,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554729482
    },
    {
        "content": "<p>let me set up a fork</p>",
        "id": 162815845,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554729486
    },
    {
        "content": "<p>(As in, whole thing builds on my machine)</p>",
        "id": 162815856,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554729493
    },
    {
        "content": "<blockquote>\n<p>another workaround that works on stock lean is to produce a string that looks like an inductive declaration and parse it into the environment</p>\n</blockquote>\n<p>What Lean function is this?</p>",
        "id": 162833934,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554741838
    },
    {
        "content": "<p>In mathlib, it's called <code>emit_code_here</code></p>",
        "id": 162836723,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554743844
    },
    {
        "content": "<p>it's in <code>tactic.basic</code></p>",
        "id": 162836733,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554743851
    },
    {
        "content": "<p>There's a catch though. It's not a tactic. It's a parser command</p>",
        "id": 162836858,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554743931
    },
    {
        "content": "<p>That means that you can't invoke it in a tactic, you can only do it in the parser. For example, if you use <code>@[user_command]</code>, this is something you can use.</p>",
        "id": 162837044,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554744070
    },
    {
        "content": "<p>Does Lean know that <code>classX</code> extends <code>classY</code>? Or is the only way to approximate this, by checking whether the environment contains <code>classX.to_classY</code>?</p>",
        "id": 162838778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554745288
    }
]