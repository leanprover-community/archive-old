[
    {
        "content": "<p>how to show that ∀ a b : ℤ, a / b = 0 ↔ a = 0 ∨ b = 0 ? the converse is trivial because of int.zero_div and int.div_zero in the library but i can't prove the implication.</p>",
        "id": 191892809,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1585233219
    },
    {
        "content": "<p>it's false</p>",
        "id": 191893127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585233343
    },
    {
        "content": "<p><code>1 / 2 = 0</code></p>",
        "id": 191893140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585233350
    },
    {
        "content": "<p>i'm dumb sorry for this</p>",
        "id": 191893244,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1585233379
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">rcases</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hb</span> <span class=\"o\">},</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_nonneg</span> <span class=\"n\">a</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span> <span class=\"n\">a</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">div_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">div_eq_zero_of_lt_abs</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191895299,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585234268
    },
    {
        "content": "<p>that was a fun exercise</p>",
        "id": 191895321,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585234276
    },
    {
        "content": "<p>I think Lean should apologise for having such a silly division. Any kid could tell you <code>1/2</code> is not <code>0</code></p>",
        "id": 191895883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585234493
    },
    {
        "content": "<p>That <code>/</code> should just be replaced by the computer scientists' favourite pokemon character emoji or something</p>",
        "id": 191896003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585234538
    },
    {
        "content": "<p>That'd warn us</p>",
        "id": 191896035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585234548
    },
    {
        "content": "<p>Python uses <code>//</code> for integer \"division\".</p>",
        "id": 191896120,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585234570
    },
    {
        "content": "<p>are there any systems that return a <code>[quotient, remainder]</code> tuple for integer division?</p>",
        "id": 191897622,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585235141
    },
    {
        "content": "<p>Your computer, probably: <a href=\"https://www.felixcloutier.com/x86/div\" title=\"https://www.felixcloutier.com/x86/div\">the <code>div</code> instruction</a> produces both quotient and remainder</p>",
        "id": 191897875,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1585235235
    },
    {
        "content": "<p>The <code>truncate</code> function in common lisp also returns multiple values: <a href=\"http://clhs.lisp.se/Body/f_floorc.htm#truncate\" title=\"http://clhs.lisp.se/Body/f_floorc.htm#truncate\">http://clhs.lisp.se/Body/f_floorc.htm#truncate</a></p>",
        "id": 191897949,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585235270
    },
    {
        "content": "<p>Also <a href=\"https://forth-standard.org/standard/core/DivMOD\" title=\"https://forth-standard.org/standard/core/DivMOD\">/MOD</a> in Forth</p>",
        "id": 191898165,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1585235344
    },
    {
        "content": "<p>i didn't know of the by_cases tactic! i love it</p>",
        "id": 191898196,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1585235352
    },
    {
        "content": "<p>I wonder if this is an argument for redefining the type signature of division, and what effects that would have</p>",
        "id": 191898443,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585235453
    },
    {
        "content": "<p>Well, not of <code>has_div.div</code>, please</p>",
        "id": 191898847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585235622
    },
    {
        "content": "<p>We could have a <code>has_moddiv</code> class...</p>",
        "id": 191898939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585235648
    },
    {
        "content": "<p>is it not a common lean pattern to have multiple functions instead of one function that returns a conjunction or takes a disjunction?</p>",
        "id": 191898966,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585235656
    },
    {
        "content": "<p>Apart from design patterns, I expect that in practice users would project out either result often enough to make <code>div</code> a useful abbreviation anyway</p>",
        "id": 191899184,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1585235736
    },
    {
        "content": "<p>I am really surprised anyone here knows Forth; <code>FORTH LOVE IF HONK THEN !</code></p>",
        "id": 191899642,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585235902
    }
]