[
    {
        "content": "<p>It seems the ext tactic is sensitive to the order in which lemmas are stated and/or tagged as ext (this is what I think is happening but frankly I'm a bit confused still).<br>\nIn a PR me and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> are working on we reorder some a bunch of imports and correspondingly the proof at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebraic_geometry/presheafed_space/has_colimits.lean#L253\">https://github.com/leanprover-community/mathlib/blob/master/src/algebraic_geometry/presheafed_space/has_colimits.lean#L253</a> breaks.<br>\nYou can simulate this locally by adding the line <code>attribute [ext] continuous_map.ext</code> before that theorem, even though this is already an ext lemma, applying the ext attribute seems to cause this to fire first and leave the proof in a different state.</p>\n<p>The specific question is what if anything should we do about this sort of behaviour when we observe it? If this was about simp-lemmas I'd look for more lemmas to add to make the simp-set confluent again, should something analogous be done here? <br>\nIn this (or indeed any) specific example I can use <code>ext?</code> to replace the <code>ext</code> proof with some explicit <code>apply</code> statements, but I'd like to avoid that if possible.<br>\n<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I guess you know the design of this area the best?</p>",
        "id": 261581547,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637022420
    },
    {
        "content": "<p>What's the other ext lemma involved here that isn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.ext\">docs#continuous_map.ext</a>?</p>",
        "id": 261583234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637023582
    },
    {
        "content": "<p>Yes, <code>ext</code> applies lemmas tagged <code>@[ext]</code> (or automatically generated by putting the <code>@[ext]</code> attribute on a structure in reverse order as they have been added to the environment.</p>",
        "id": 261583267,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637023615
    },
    {
        "content": "<p>(i.e. most recent has priority)</p>",
        "id": 261583282,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637023623
    },
    {
        "content": "<p>I'm not sure there is a general purpose solution to this sort of problem.</p>",
        "id": 261583325,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637023665
    },
    {
        "content": "<p>Which is usually a feature, since things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.ext\">docs#linear_map.ext</a> should be in the same file as linear_map, making them the lowest priority by default compared to something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.lhom_ext\">docs#dfinsupp.lhom_ext</a></p>",
        "id": 261583399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637023701
    },
    {
        "content": "<p><code>ext</code> lemmas mean \"you can prove this identity by working 'componentwise' in some sense\", but there are situations where there are different valid interpretations of \"in some sense\".</p>",
        "id": 261583403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637023711
    },
    {
        "content": "<p>Sometimes using <code>ext1</code> is helpful. Other times I guess you'll have to resort to using <code>apply</code>.</p>",
        "id": 261583491,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637023793
    },
    {
        "content": "<p>The <code>ext</code> tactic itself can't be expected to be clever when you have defined multiple applicable <code>ext</code> lemmas.</p>",
        "id": 261583575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637023824
    },
    {
        "content": "<p>It looks like it will apply a specific <code>ext</code> lemma for a given type if you've registered one with <code>@[ext my_type]</code> before trying general <code>ext</code> lemmas, if I understand <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.ext1_core\">docs#tactic.ext1_core</a> correctly.  It seems like there can be exactly one registered. (Just mentioning this because I hadn't seen this feature before.)</p>",
        "id": 261583670,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637023903
    },
    {
        "content": "<p>I think to usefully diagnose this we need to know which two ext lemmas are fighting for priority here, which one is \"right\", and why we think it is \"right\"</p>",
        "id": 261584164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637024192
    },
    {
        "content": "<p>I shut my lean down for the night, but ext? should tell you the other one. I was wondering if giving ext lemmas priorities would help (currently it didn't do anything as far as I can tell)</p>",
        "id": 261587184,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637026725
    },
    {
        "content": "<p>As in I was wondering if we should add some knowledge of priorities to the ext tactic</p>",
        "id": 261587428,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637026940
    },
    {
        "content": "<p>They already can have priorities</p>",
        "id": 261612132,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637052920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Reordering.20ext.20lemmas/near/261612132\">said</a>:</p>\n<blockquote>\n<p>They already can have priorities</p>\n</blockquote>\n<p>How do they work?<br>\nExplicitly I want the following to apply <code>a</code> instead of <code>b</code>:<br>\nimport tactic.ext</p>\n<p>@[ext, priority 10000]<br>\nlemma a (f g : ℕ → ℕ) (h : f 1 = g 1) : f = g :=<br>\nsorry</p>\n<p>@[ext]<br>\nlemma b (f g : ℕ → ℕ) (h : f 2 = g 2) : f = g :=<br>\nsorry</p>\n<p>lemma c (f g : ℕ → ℕ) : f = g :=<br>\nbegin<br>\n  ext, -- want  <code>f 1 = g 1</code><br>\nend</p>",
        "id": 261638610,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637068731
    },
    {
        "content": "<blockquote>\n<p>What's the other ext lemma involved here that isn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.ext\">docs#continuous_map.ext</a>?</p>\n</blockquote>\n<p>Did somebody already answer this question?  The mathlib4 ext tactic uses term indexing for the extensionality lemmas, and I'd like to figure out if there's going to be a problem.</p>",
        "id": 261638943,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637068903
    },
    {
        "content": "<p>Nope I never answered sorry:<br>\nThe ext as it currently stands does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">apply</span> <span class=\"n\">category_theory.limits.colimit.hom_ext</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">continuous_map.ext</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>if <code>continuous_map.ext</code> applies first then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.colimit.hom_ext\">docs#category_theory.limits.colimit.hom_ext</a> doesn't apply</p>",
        "id": 261639145,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637069010
    },
    {
        "content": "<p>This should be fine as long as the hom doesn't reducible reduce to <code>continuous_map</code>.</p>",
        "id": 261640894,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637069812
    },
    {
        "content": "<p>It probably only instance reduces</p>",
        "id": 261643483,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637070929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Reordering.20ext.20lemmas/near/261583670\">said</a>:</p>\n<blockquote>\n<p>It looks like it will apply a specific <code>ext</code> lemma for a given type if you've registered one with <code>@[ext my_type]</code> before trying general <code>ext</code> lemmas, if I understand <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.ext1_core\">docs#tactic.ext1_core</a> correctly.  It seems like there can be exactly one registered. (Just mentioning this because I hadn't seen this feature before.)</p>\n</blockquote>\n<p>It is true that for every type it has one \"preferred\" <code>ext</code> lemma that it tries first. However, this <code>ext</code>attribute need not to have an explicit argument: it is the last <code>ext</code> lemma that proves an equality between objects of a specific type.</p>\n<p>Currently, <code>ext</code> completely ignores priorities. I think I can fix that, but I'm not sure if that is worth doing in Lean 3.</p>",
        "id": 261644998,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637071552
    },
    {
        "content": "<p>There was a long discussion in a previous PR about adding <code>priority</code> attributes to some <code>ext</code> lemmas (in the end we didn't). Was it really a no-op the whole time?</p>",
        "id": 261646226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637072083
    }
]