[
    {
        "content": "<p>Which of the following is easier for you to read?<br>\n<code>map f hf x * map f hf y</code><br>\nor<br>\n<code>(map f hf x) * (map f hf y)</code></p>",
        "id": 267131134,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641512897
    },
    {
        "content": "<p><code>@[simp] lemma diagonal_dot_product (i : m) : diagonal v i ⬝ w = v i * w i :=</code><br>\nor<br>\n<code>@[simp] lemma diagonal_dot_product (i : m) : (diagonal v i) ⬝ w = v i * w i :=</code></p>",
        "id": 267131351,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641513056
    },
    {
        "content": "<p>From <a href=\"https://github.com/leanprover-community/mathlib/pull/11289#discussion_r779937488\">the PR that spawned this question</a>, a bad regex search concludes that mathlib prefers the parenthesis-free version for binary-or-more functions by a factor of about 6:1. For unary functions, that increases to 12:1</p>",
        "id": 267131507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641513177
    },
    {
        "content": "<p>Thanks for the stats!</p>",
        "id": 267131540,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641513208
    },
    {
        "content": "<p>Of course, just because existing code does things a certain way doesn't mean that its current users prefer things that way, so asking on zulip like you've done here is never a bad idea</p>",
        "id": 267131623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641513257
    },
    {
        "content": "<p>I am a bit confused by the blue and yellow arrows.</p>",
        "id": 267131644,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641513285
    },
    {
        "content": "<p>It seemed a less noisy way of voting, up arrows mean the first option</p>",
        "id": 267131791,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641513374
    },
    {
        "content": "<p>Thanks for clarification and for removing the blue arrow!</p>",
        "id": 267131809,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641513396
    },
    {
        "content": "<p>OK. You clearly prefer the version without parentheses. I am very surprised and slightly uncomfortable. However, I will respect that.</p>",
        "id": 267133726,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641514574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 267133738,
        "sender_full_name": "Notification Bot",
        "timestamp": 1641514579
    },
    {
        "content": "<p>When I started using lean I was initially not a big fan of the lack of parentheses, but after a while I got used to them, and the rules mathlib uses to determine precedence (which means that if we end up in a situation where the bracketing gives unexpected results people adjust the precedences to fix it). Now that I am used to the fact that function application comes before operators and the second versions look noisy to me, in the second example its harder to tell from a glance where the arguments <code>(i : m)</code> end and the type <code>(diagonal v i)</code> begins. Things like hovering over the tactic state in VSCode using widgets to see where different terms start and ends by highlighting, and the similar highlighting in the docs,  normally clears up any confusion I have reading a statement very quickly if I have any (this is a technology which really isn't possible in a printed regular book!) so I think we gain from having less symbols on screen when Lean knows what to do with them</p>",
        "id": 267135165,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641515007
    }
]