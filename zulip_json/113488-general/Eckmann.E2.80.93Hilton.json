[
    {
        "content": "<p>Today I thought it was a good idea to stretch the type class system a bit. In fact, I ended up not using it at all <span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span><br>\n<a href=\"https://gist.github.com/jcommelin/2e031b5446ca54089576ea9f66f12abf\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/2e031b5446ca54089576ea9f66f12abf\">https://gist.github.com/jcommelin/2e031b5446ca54089576ea9f66f12abf</a><br>\nStatement: Two unital binary operations that distribute over each other are in fact one and the same. Also, they are commutative and associative, so in fact a monoid structure.<br>\nThis is used to prove that homotopy groups are abelian.</p>",
        "id": 133496192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536307649
    },
    {
        "content": "<p>Any comments are welcome.</p>",
        "id": 133496199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536307671
    },
    {
        "content": "<p>In particular, feel free to shoehorn this into the type class system.<br>\nGolfing is appreciated.</p>",
        "id": 133496250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536307695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Did you already have this somewhere in your repo?</p>",
        "id": 133496443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536307991
    },
    {
        "content": "<p>Nope I hadn't gotten that far. Cool!</p>",
        "id": 133496454,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536308017
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">`</span><span class=\"n\">m</span><span class=\"bp\">`</span> <span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">X</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>Does this really work? Also, it doesn't work for me. :)</p>",
        "id": 133496542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536308109
    },
    {
        "content": "<p>Oh nice. Copy and paste from github (even the raw page) doesn't preserve the source text correctly.</p>",
        "id": 133496632,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536308230
    },
    {
        "content": "<p>Maybe you could choose something less sneaky like <code>local notation a `&lt;`m`&gt;` b := @has_mul.mul X m a b</code></p>",
        "id": 133496705,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536308298
    },
    {
        "content": "<p>Hmm, maybe I should.</p>",
        "id": 133496835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536308505
    },
    {
        "content": "<p>But those are non-breaking spaces.</p>",
        "id": 133496843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536308513
    },
    {
        "content": "<p>Hmmm... that's really nasty of GitHub.</p>",
        "id": 133496999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536308666
    },
    {
        "content": "<p>They should know better.</p>",
        "id": 133497000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536308670
    },
    {
        "content": "<p>I'll use fishhooks, like you suggested.</p>",
        "id": 133497006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536308682
    },
    {
        "content": "<p>Somehow when I pasted the source into emacs, they turned into regular spaces.<br>\nNot sure whether github or firefox or emacs is to blame</p>",
        "id": 133497009,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536308687
    },
    {
        "content": "<p>Ok, fair enough.</p>",
        "id": 133497108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536308806
    },
    {
        "content": "<p>Anyway, it is fixed now.</p>",
        "id": 133497111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536308812
    },
    {
        "content": "<p>Haha, Lean prints both mul operations as <code>*</code>. It knows!!</p>",
        "id": 133497452,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536309355
    },
    {
        "content": "<p>Yes! I thought that was hilarious <span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 133497578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536309518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110294\">@Johannes HÃ¶lzl</span> What would be the proper place for this in mathlib? Somewhere in <code>group_theory</code>?</p>",
        "id": 133501859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536315379
    },
    {
        "content": "<p>PR'd this: <a href=\"https://github.com/leanprover/mathlib/pull/335\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/335\">https://github.com/leanprover/mathlib/pull/335</a></p>",
        "id": 133684290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536608642
    }
]