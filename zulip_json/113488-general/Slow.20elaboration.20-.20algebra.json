[
    {
        "content": "<p>I wrote a definition of adic completion of a ring at an ideal, but I am having trouble working with it because of slow elaboration. For instance, in the code below,  elaboration of <code>ring.adic_completion.algebra</code> takes 11.3 seconds on my laptop (however, if I use the commented version instead, it takes virtually no time). Does anyone know what could be causing this to be so slow?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The completion of a ring with respect to an ideal. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ring.adic_completion</span> <span class=\"o\">:</span>\n<span class=\"n\">subring</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">ideal.quotient.lift</span> <span class=\"o\">(</span> <span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ring_hom.mem_ker</span><span class=\"o\">,</span> <span class=\"n\">ideal.mk_ker</span><span class=\"o\">],</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">ideal.mul_top</span><span class=\"o\">]</span><span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n          <span class=\"n\">apply</span> <span class=\"n\">ideal.pow_le_pow</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.one_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.one_apply</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">mul_mem'</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.mul_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.mul_apply</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">hf</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"n\">hmn</span><span class=\"o\">],</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.zero_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.zero_apply</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">add_mem'</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.add_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.add_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">ring_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"n\">hmn</span><span class=\"o\">],</span>\n  <span class=\"n\">neg_mem'</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.neg_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.neg_apply</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_neg</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"n\">hmn</span><span class=\"o\">]</span> <span class=\"o\">}}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">ring.adic_completion</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"sd\">/-- The canonical ring map to the completion. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ring.adic_completion.of</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"o\">(</span><span class=\"n\">ring.adic_completion</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ring.adic_completion</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_hom.to_algebra</span> <span class=\"o\">(</span><span class=\"n\">ring.adic_completion.of</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> instance : algebra R (ring.adic_completion I):=</span>\n<span class=\"cm\">{ smul := λ r x, (ring.adic_completion.of I r) * x,</span>\n<span class=\"cm\">  commutes' := λ r x, by {rw mul_comm},</span>\n<span class=\"cm\">  smul_def' := λ r x, rfl,</span>\n<span class=\"cm\">  ..(ring.adic_completion.of I) } -/</span>\n</code></pre></div>",
        "id": 257730586,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1634317242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  wrote a related example which is also taking quite long:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+*</span> <span class=\"n\">foo</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℤ</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_hom.to_algebra</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">elaboration of foo.algebra took 4.99s</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 257731014,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1634317406
    },
    {
        "content": "<p>This is bizarre because <code>bar</code> / <code>ring.adic_completion.of</code> is having no problem finding the ring instances. Maybe it's not the type class inference system which is taking so long?</p>",
        "id": 257731454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634317570
    },
    {
        "content": "<p><code>ring_hom.to_algebra</code> takes 14 seconds on my system in Maria's example, and it's a really innocuous def.</p>",
        "id": 257731607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634317644
    },
    {
        "content": "<p>Why do you need this when we already have the algebraic story in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/adic_completion\">docs#adic_completion</a> and the topological one in <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/nonarchimedean/adic_topology.html\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/nonarchimedean/adic_topology.html</a>?</p>",
        "id": 257732106,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634317868
    },
    {
        "content": "<p>The adic completion of a ring is a ring, we don't seem to have this</p>",
        "id": 257732329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634317951
    },
    {
        "content": "<p>(unless we missed it)</p>",
        "id": 257732406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634317980
    },
    {
        "content": "<p>I mean, we _do_ have it now, because Maria's code above gives it us, but she's having real trouble using it and I have no idea what's going on</p>",
        "id": 257732552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634318042
    },
    {
        "content": "<p>Right, I found adic_completion for modules but I couldn't find a ring version, so my plan was to use my definition of ring.adic_completion and put the adic topology on it using <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/nonarchimedean/adic_topology.html\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/nonarchimedean/adic_topology.html</a>.</p>",
        "id": 257733276,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1634318319
    },
    {
        "content": "<p>Should the adic completion of <code>R</code> as a ring be defeq to its adic completion as <code>R</code>-module over itself? I assume this might come in handy at times?</p>",
        "id": 257738329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634320438
    },
    {
        "content": "<p>On the other hand, we probably want to be able to say that <code>ℤ_[p]</code> is the adic completion of <code>ℤ</code> as <code>ideal.span {p}</code>, but that certainly won't be by definition. So maybe we need a predicte <code>is_adic_completion</code>?</p>",
        "id": 257738486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634320496
    },
    {
        "content": "<p>On the other hand, we will need a construction anyway. It would be nice if it could reuse the construction for modules.</p>",
        "id": 257738836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634320635
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 257739613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634320938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Slow.20elaboration.20-.20algebra/near/257732329\">said</a>:</p>\n<blockquote>\n<p>The adic completion of a ring is a ring, we don't seem to have this</p>\n</blockquote>\n<p>We certainly have it for the topological story.</p>",
        "id": 257739615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634320939
    },
    {
        "content": "<p>Why not make it a subalgebra rather than a subring?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ring.adic_completion</span> <span class=\"o\">:</span>\n<span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">ideal.quotient.lift</span> <span class=\"o\">(</span> <span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ring_hom.mem_ker</span><span class=\"o\">,</span> <span class=\"n\">ideal.mk_ker</span><span class=\"o\">],</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">ideal.mul_top</span><span class=\"o\">]</span><span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n          <span class=\"n\">apply</span> <span class=\"n\">ideal.pow_le_pow</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">},</span>\n  <span class=\"n\">mul_mem'</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.mul_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.mul_apply</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">hf</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"n\">hmn</span><span class=\"o\">],</span>\n  <span class=\"n\">add_mem'</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.add_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.add_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">ring_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"n\">hmn</span><span class=\"o\">],</span>\n  <span class=\"n\">algebra_map_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 257739628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634320946
    },
    {
        "content": "<p>Then the instance you want already exists</p>",
        "id": 257739685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634320973
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.completion.comm_ring\">docs#uniform_space.completion.comm_ring</a></p>",
        "id": 257739725,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634320993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Slow.20elaboration.20-.20algebra/near/257738329\">said</a>:</p>\n<blockquote>\n<p>Should the adic completion of <code>R</code> as a ring be defeq to its adic completion as <code>R</code>-module over itself? I assume this might come in handy at times?</p>\n</blockquote>\n<p>In the topological story I took great care to ensure this. See <a href=\"https://github.com/leanprover-community/mathlib/blob/d6fd5f5fc4d020d0cec5af2106c7bafee45108ab/src/topology/algebra/nonarchimedean/adic_topology.lean#L36-L39\">https://github.com/leanprover-community/mathlib/blob/d6fd5f5fc4d020d0cec5af2106c7bafee45108ab/src/topology/algebra/nonarchimedean/adic_topology.lean#L36-L39</a></p>",
        "id": 257739891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634321069
    },
    {
        "content": "<p>Aah I see -- so we topologise R with the adic topology and then complete the corresponding topological ring</p>",
        "id": 257745633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634323494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Slow.20elaboration.20-.20algebra/near/257739725\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.completion.comm_ring\">docs#uniform_space.completion.comm_ring</a></p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 257746080,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1634323665
    },
    {
        "content": "<p>None of this explains why it takes 5 seconds to elaborate</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→+*</span> <span class=\"n\">foo</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℤ</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_hom.to_algebra</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">elaboration of foo.algebra took 4.99s</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>which to me still remains incomprehensible</p>",
        "id": 257774565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634336748
    },
    {
        "content": "<p>It takes 48s for me on gitpod</p>",
        "id": 257782115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634341607
    },
    {
        "content": "<p>I agree that this elaboration issue is bad.</p>",
        "id": 257833467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634392366
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+*</span> <span class=\"n\">foo</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_hom.to_algebra</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">elaboration of foo.algebra took 4.99s</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>is takes only 33% of the time, compared to Kevin's MWE, on my box.</p>",
        "id": 257833587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634392477
    },
    {
        "content": "<p>The difference between <code>ring</code> and <code>semiring</code> shouldn't have such an impact...</p>",
        "id": 261905914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637229165
    }
]