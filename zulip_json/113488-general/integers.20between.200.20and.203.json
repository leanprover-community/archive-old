[
    {
        "content": "<p><code>example : ∀ (r : ℤ), r ≥ 0 → r &lt; 3 → r = 0 ∨ r = 1 ∨ r = 2 := dec_trivial</code> doesn't work for me. Is there any easy way of getting from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>r</mi><mo>&lt;</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">0\\leq r&lt;3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mord mathrm\">0</span><span class=\"mrel\">≤</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mrel\">&lt;</span><span class=\"mord mathrm\">3</span></span></span></span> (with <code>r : int</code>) to the three cases?</p>",
        "id": 136162002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540027832
    },
    {
        "content": "<p>(with <code>nat</code> it works fine so there's a slightly painful way)</p>",
        "id": 136162014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540027919
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 136162377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540028677
    },
    {
        "content": "<p>So what is the equation compiler doing that <code>dec_trivial</code> can't do? It knows things which aren't decidable?</p>",
        "id": 136162649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540029345
    },
    {
        "content": "<p>PS thanks</p>",
        "id": 136162650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540029352
    },
    {
        "content": "<p>eew how do I sent this into the middle of a tactic proof?</p>",
        "id": 136162733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540029489
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"k\">match</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">H0</span><span class=\"o\">,</span> <span class=\"n\">H3</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 136162829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540029719
    },
    {
        "content": "<p>got it</p>",
        "id": 136162916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540029848
    },
    {
        "content": "<p>We need a decidable instance for bounded integer ranges</p>",
        "id": 136162917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540029878
    },
    {
        "content": "<p>that too. I was just tripped over by commas by the way. They're sometimes there and sometimes not.</p>",
        "id": 136162930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540029921
    },
    {
        "content": "<p>they are there in <code>match</code>, not in <code>def</code> patterns</p>",
        "id": 136162975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540029992
    },
    {
        "content": "<p>I agree that this is an annoying inconsistency, but it also makes sense locally, if you change it then it doesn't fit something else</p>",
        "id": 136162980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540030044
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n  <span class=\"bp\">⟨λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span> <span class=\"err\">$</span> <span class=\"n\">add_left_cancel</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mem_range_iff</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_map</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span> <span class=\"k\">in</span> <span class=\"n\">h2</span> <span class=\"bp\">▸</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">le_add_of_nonneg_right</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">add_lt_of_lt_sub_left</span> <span class=\"err\">$</span> <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_coe_nat</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n    <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_map</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">),</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">sub_nonneg_of_le</span> <span class=\"n\">h1</span><span class=\"o\">),</span>\n      <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">sub_nonneg_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">)))]</span><span class=\"bp\">;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">sub_lt_sub_right</span> <span class=\"n\">h2</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">sub_nonneg_of_le</span> <span class=\"n\">h1</span><span class=\"o\">),</span> <span class=\"n\">add_sub_cancel&#39;_right</span><span class=\"o\">]</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_bounded</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mem_range_iff</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 136163123,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540030334
    },
    {
        "content": "<p>Will this trigger if I have <code>1&lt;= r &lt;= 5</code>?</p>",
        "id": 136164321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540033027
    },
    {
        "content": "<p>you're welcome to write 3 more instances</p>",
        "id": 136167268,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540039494
    },
    {
        "content": "<p>but the answer is no</p>",
        "id": 136167269,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540039497
    },
    {
        "content": "<p>You should PR all four</p>",
        "id": 136167496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540039983
    },
    {
        "content": "<p>nah I'll wait till they accept my current PR</p>",
        "id": 136167500,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540040006
    },
    {
        "content": "<p>you can PR all four</p>",
        "id": 136167501,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540040009
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n  <span class=\"bp\">⟨λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span> <span class=\"err\">$</span> <span class=\"n\">add_left_cancel</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mem_range_iff</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_map</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span> <span class=\"k\">in</span> <span class=\"n\">h2</span> <span class=\"bp\">▸</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">le_add_of_nonneg_right</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">add_lt_of_lt_sub_left</span> <span class=\"err\">$</span> <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_coe_nat</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n    <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_map</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">),</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">sub_nonneg_of_le</span> <span class=\"n\">h1</span><span class=\"o\">),</span>\n      <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">sub_nonneg_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">)))]</span><span class=\"bp\">;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">sub_lt_sub_right</span> <span class=\"n\">h2</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">sub_nonneg_of_le</span> <span class=\"n\">h1</span><span class=\"o\">),</span> <span class=\"n\">add_sub_cancel&#39;_right</span><span class=\"o\">]</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_le_lt</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mem_range_iff</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_le_le</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mem_range_iff</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">lt_add_one_iff</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_lt_lt</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_le_lt</span> <span class=\"n\">P</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_lt_le</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_le_le</span> <span class=\"n\">P</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 136168035,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540041103
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/445\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/445\">https://github.com/leanprover/mathlib/pull/445</a> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 136655155,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540738565
    },
    {
        "content": "<p>Thank you Kenny</p>",
        "id": 136655417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540738992
    },
    {
        "content": "<p>Merged <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 136795548,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540923271
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 136801131,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540928099
    }
]