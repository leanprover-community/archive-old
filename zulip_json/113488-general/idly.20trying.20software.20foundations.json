[
    {
        "content": "<p>I am working through software foundations. I'm finding the first book relatively straightforward, which is a relief. I was trying to do the exercises in a golf-like way. Why doesn't this work:</p>",
        "id": 124286568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522180076
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive  ev : nat →  Prop\n| ev_0 : ev 0\n| ev_SS : ∀ n : nat, ev n → ev (n+2)\nopen ev\n</pre></div>",
        "id": 124286609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522180098
    },
    {
        "content": "<p><code>theorem  ev_plus4 : ∀ n, ev n → ev (n +  4) :=  λ _ _,ev_SS _ (ev_SS _ _)</code></p>",
        "id": 124286615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522180118
    },
    {
        "content": "<p>I thought there was every chance :-)</p>",
        "id": 124286618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522180125
    },
    {
        "content": "<p>but I get</p>",
        "id": 124286636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522180162
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>don&#39;t know how to synthesize placeholder\ncontext:\n_x : ℕ,\n_x : ev _x\n⊢ ev _x\n</pre></div>",
        "id": 124286637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522180168
    },
    {
        "content": "<p>what is software foundations?</p>",
        "id": 124286973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522180676
    },
    {
        "content": "<p>a book on the web</p>",
        "id": 124287015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522180701
    },
    {
        "content": "<p><a href=\"https://softwarefoundations.cis.upenn.edu/\" target=\"_blank\" title=\"https://softwarefoundations.cis.upenn.edu/\">https://softwarefoundations.cis.upenn.edu/</a></p>",
        "id": 124287019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522180722
    },
    {
        "content": "<p>They have exercises like this:</p>",
        "id": 124287026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522180741
    },
    {
        "content": "<p>You need to plug in the assumption for <code>ev n</code> somewhere.</p>",
        "id": 124287030,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522180745
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>definition  double (n : ℕ) := n + n\ntheorem  ev_double (n : ℕ) : ev (double n) := nat.rec_on n ev_0\n(λ n H, have (n+1)+(n+1)=n+n+2,by simp,show ev((n+1)+(n+1)),by {rw this;exact ev_SS _ H})\n</pre></div>",
        "id": 124287035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522180751
    },
    {
        "content": "<p>I wanted the elaborator to guess where. I have it as an underscore</p>",
        "id": 124287047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522180792
    },
    {
        "content": "<p>The underscores won't find it because it is not determined by unification.</p>",
        "id": 124287102,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522180822
    },
    {
        "content": "<p>I know that <code>theorem  ev_plus4 : ∀ n, ev n → ev (n +  4) :=  λ _ H,ev_SS _ (ev_SS _ H)</code> works but I...basically I am trying to get a feeling for what I can get away with with underscores</p>",
        "id": 124287111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522180850
    },
    {
        "content": "<p>it's the same reason <code> #check  λ n : nat, (rfl : _ +  4  = (_ +  2) +  2) </code> fails, I think</p>",
        "id": 124287122,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522180867
    },
    {
        "content": "<p>(obviously it's <code>n</code>!!)</p>",
        "id": 124287124,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522180880
    },
    {
        "content": "<p>It could also be 0, or 1, or...</p>",
        "id": 124287129,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522180898
    },
    {
        "content": "<p>Or <code>n!!</code> <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 124287133,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522180913
    },
    {
        "content": "<p>but <code>#check  λ n : nat, (rfl : _ +  4  = (_ +  4))</code> works...</p>",
        "id": 124287178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522180934
    },
    {
        "content": "<p>But I hope you get a metavariable and not n, right?</p>",
        "id": 124287191,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522180974
    },
    {
        "content": "<p>Yes, because check allows unsolved metavars. Otherwise <code>#check f</code> where f takes implicit parameters would be pretty useless.</p>",
        "id": 124287199,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522180992
    },
    {
        "content": "<p>ha ha</p>",
        "id": 124287278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522181079
    },
    {
        "content": "<p><code>#check (rfl : _ = _ +  0)</code></p>",
        "id": 124287283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522181084
    },
    {
        "content": "<p>didn't give what I expected</p>",
        "id": 124287290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522181099
    },
    {
        "content": "<p>but probably did give what everyone else expected.</p>",
        "id": 124287304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522181110
    },
    {
        "content": "<blockquote>\n<p>The underscores won't find it because it is not determined by unification.</p>\n</blockquote>\n<p>unification says \"this should be a proof of ev _x\", and there is something in the local context which is a proof of ev _x</p>",
        "id": 124287415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522181282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> my proof of ev_double is lame. Can you do better?</p>",
        "id": 124287449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522181338
    },
    {
        "content": "<p>This one surely qualifies for the \"this is mathematically obvious so it doesn't matter how obscure the proof is, just make it short\"</p>",
        "id": 124287472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522181388
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> my proof of ev_double is lame. Can you do better?</p>\n</blockquote>\n<p>I should do that with my PhD student, and see what comes out of it.</p>",
        "id": 124287521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522181414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  \"of course it's even, you just doubled it!\"</p>",
        "id": 124287523,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522181433
    },
    {
        "content": "<p>I mean asking about real proofs</p>",
        "id": 124287533,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522181459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> are you aiming for length?</p>",
        "id": 124287541,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522181516
    },
    {
        "content": "<p>brevity</p>",
        "id": 124287589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522181541
    },
    {
        "content": "<p>By the way, we have a new nice example of a real world theorem built purely on trusting the big guys in the field: <a href=\"https://arxiv.org/abs/1803.07997\" target=\"_blank\" title=\"https://arxiv.org/abs/1803.07997\">https://arxiv.org/abs/1803.07997</a> There are three ingredients: one was announced in 2001 and never written. One has a draft written in 2012 but the author doesn't want to make it into a publishable paper. The third one is published but none of the experts except the author understand the proof.</p>",
        "id": 124287618,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522181622
    },
    {
        "content": "<p>One day, proof assistants will change all that</p>",
        "id": 124287682,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522181682
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem  ev_double : ∀ (n : ℕ), ev (double n)\n| 0  := ev_0\n| (n+1) := (by simp [double] : double n +  2  = double (n+1)) ▸ ev_SS _ (ev_double n)\n</pre></div>",
        "id": 124287685,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522181687
    },
    {
        "content": "<p>how is this?</p>",
        "id": 124287687,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522181688
    },
    {
        "content": "<p>we all know there's so many things we need to do</p>",
        "id": 124287704,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522181725
    },
    {
        "content": "<p>we need to prove the equality somehow</p>",
        "id": 124287705,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522181730
    },
    {
        "content": "<p>and we need to use recursion</p>",
        "id": 124287707,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522181733
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span>  <span class=\"n\">ev_double</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ev</span> <span class=\"o\">(</span><span class=\"mi\">2</span>  <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">ev</span><span class=\"bp\">.</span><span class=\"n\">ev_0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">ev_SS</span> <span class=\"bp\">_</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 124287713,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522181741
    },
    {
        "content": "<p>well</p>",
        "id": 124287719,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522181755
    },
    {
        "content": "<p>Johannes has a bad influence on Chris</p>",
        "id": 124287764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522181773
    },
    {
        "content": "<p>changing the definition of <code>double</code> is called cheating :P</p>",
        "id": 124287771,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522181790
    },
    {
        "content": "<p>I see an unused eta contraction</p>",
        "id": 124287774,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522181796
    },
    {
        "content": "<p>What's the definition of double?</p>",
        "id": 124287779,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522181807
    },
    {
        "content": "<p><code> definition  double (n : ℕ) := n + n</code></p>",
        "id": 124287783,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522181817
    },
    {
        "content": "<p>and by eta contraction he means</p>\n<div class=\"codehilite\"><pre><span></span>lemma ev_double (n : ℕ) : ev (2  * n) :=\nnat.rec_on n ev.ev_0 (λ n, ev_SS _)\n</pre></div>",
        "id": 124287804,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522181851
    },
    {
        "content": "<p>My best attempt for double. I saved three characters by using <code>rec</code> instead of <code>rec_on</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span>  <span class=\"n\">ev_double</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ev</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">ev_0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">ev</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">succ_add</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">ev_SS</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 124288271,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522182428
    },
    {
        "content": "<p>do we count brevity by characters?</p>",
        "id": 124288275,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522182440
    },
    {
        "content": "<p>or by tokens</p>",
        "id": 124288283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182467
    },
    {
        "content": "<p>this is ridiculous</p>",
        "id": 124288286,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522182478
    },
    {
        "content": "<p>or by file size</p>",
        "id": 124288319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182482
    },
    {
        "content": "<p>if your goal is to save time, you should stick with what you have</p>",
        "id": 124288333,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522182502
    },
    {
        "content": "<p>(so then probably fancy unicode characters cost more)</p>",
        "id": 124288334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182502
    },
    {
        "content": "<p>and he opened nat! Is that allowed? you have to put <code>nat.succ_add</code></p>",
        "id": 124288353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182572
    },
    {
        "content": "<p>I think there should be bonus points for term style. I would have used eq.subst but it was longer.</p>",
        "id": 124288408,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522182609
    },
    {
        "content": "<p>I don't understand the syntax of Chris' answer! What is this ; from business? I've only ever seen ; in tactic mode.</p>",
        "id": 124288508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182781
    },
    {
        "content": "<p>oh we are in tactic mode?</p>",
        "id": 124288520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182795
    },
    {
        "content": "<p>Then my question is \"what is this from in tactic mode?\"</p>",
        "id": 124288525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182804
    },
    {
        "content": "<p>and now I hover over it and find out.</p>",
        "id": 124288572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182843
    },
    {
        "content": "<p>You can use from instead of exact, if you want to save one character.</p>",
        "id": 124288575,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522182843
    },
    {
        "content": "<p>I think that's the main reason they put it in.</p>",
        "id": 124288581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182854
    },
    {
        "content": "<p>Chris do you know about pyth? (as in \"pithy\")</p>",
        "id": 124288590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182891
    },
    {
        "content": "<p><a href=\"https://esolangs.org/wiki/Pyth\" target=\"_blank\" title=\"https://esolangs.org/wiki/Pyth\">https://esolangs.org/wiki/Pyth</a></p>",
        "id": 124288591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182892
    },
    {
        "content": "<p>you bunch are ridiculous</p>",
        "id": 124288595,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522182901
    },
    {
        "content": "<p>ok to be fair I use pyth when I need to compute something quickly</p>",
        "id": 124288603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522182917
    },
    {
        "content": "<p>and it's far more convenient than other programming languages</p>",
        "id": 124288610,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522182938
    },
    {
        "content": "<p>ha ha \"you bunch are ridiculous\" \"actually I use it IRL\"</p>",
        "id": 124288663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522182971
    },
    {
        "content": "<p>The <code>;</code> there is actually in tactic mode</p>",
        "id": 124288670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522182990
    },
    {
        "content": "<p>yes it all dawned on me later</p>",
        "id": 124288676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522183000
    },
    {
        "content": "<p>wait what?</p>",
        "id": 124288680,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522183005
    },
    {
        "content": "<p>I hadn't seen from in tactic mode before</p>",
        "id": 124288681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522183007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> he's saying that <code>;</code> itself is in tactic mode</p>",
        "id": 124288695,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522183028
    },
    {
        "content": "<p>it's just so you can write <code>have x, from y</code> in tactic mode</p>",
        "id": 124288697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522183030
    },
    {
        "content": "<p>I think we need \"coz\"</p>",
        "id": 124288700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522183042
    },
    {
        "content": "<p>which is from but one fewer letter</p>",
        "id": 124288702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522183047
    },
    {
        "content": "<p>I'll file an issue</p>",
        "id": 124288709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522183072
    },
    {
        "content": "<p>I prefer <code>exact</code> over <code>from</code> when it's not used after <code>show</code>, <code>have</code>, <code>suffices</code> or <code>let</code> tactics</p>",
        "id": 124288726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522183083
    },
    {
        "content": "<p>As for the golfing, I won't enter the ring. I'd emphasize good lemmas in this instance so you can write each individual theorem very concisely</p>",
        "id": 124288778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522183165
    },
    {
        "content": "<p>Aah I see. Perhaps double n = n * 2 or 2 * n would be worth proving before we launch into trying to prove stuff like this</p>",
        "id": 124288843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522183231
    },
    {
        "content": "<p>I hope the new parser will allow Kevin to define <code>coz</code> by adding one line near the top of his file</p>",
        "id": 124288849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522183243
    },
    {
        "content": "<p>Do code-golf belong to the target of \"domain specific language handling\"?</p>",
        "id": 124288871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522183290
    },
    {
        "content": "<p>You can define <code>coz</code> in one line today</p>",
        "id": 124288932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522183335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I've been a member of PPCG for 3 years</p>",
        "id": 124288935,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522183344
    },
    {
        "content": "<p>the people in the chat know me</p>",
        "id": 124288936,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522183348
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>meta def tactic.interactive.coz := tactic.interactive.from\n</pre></div>",
        "id": 124288953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522183375
    },
    {
        "content": "<p><em>message stared</em></p>",
        "id": 124288975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522183419
    },
    {
        "content": "<p>lol</p>",
        "id": 124288983,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522183442
    },
    {
        "content": "<p>and a solution a la Mario:</p>\n<div class=\"codehilite\"><pre><span></span>lemma  double.aux (n : ℕ) : double (n+1) = double n +  2  :=\nnat.succ_add _ _\n\nlemma ev_double (n : ℕ) : ev (double n) :=\nnat.rec ev_0 (λ n h, (double.aux n).symm ▸ ev_SS _ h) n\n</pre></div>",
        "id": 124289032,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522183474
    },
    {
        "content": "<blockquote>\n<p>By the way, we have a new nice example of a real world theorem built purely on trusting the big guys in the field: <a href=\"https://arxiv.org/abs/1803.07997\" target=\"_blank\" title=\"https://arxiv.org/abs/1803.07997\">https://arxiv.org/abs/1803.07997</a> There are three ingredients: one was announced in 2001 and never written. One has a draft written in 2012 but the author doesn't want to make it into a publishable paper. The third one is published but none of the experts except the author understand the proof.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> as long as the experts are happy, we're all happy, right?</p>",
        "id": 124289273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522183773
    },
    {
        "content": "<p>I would be most concerned about the third assumption I guess.</p>",
        "id": 124289337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522183811
    },
    {
        "content": "<p>Right. But there are not all happy about the third ingredient.</p>",
        "id": 124289340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522183819
    },
    {
        "content": "<p>Because the third ingredient was proved by an obscure polish mathematician</p>",
        "id": 124289351,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522183837
    },
    {
        "content": "<p>so you'll have to hope that the referees are either optimists or lazy</p>",
        "id": 124289357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522183850
    },
    {
        "content": "<p>Who didn't even get the Crafoord prize.</p>",
        "id": 124289375,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522183872
    },
    {
        "content": "<p>We have two more elaborate plans actually. First we'd like to try to read the Polish proof. And we have a backup plan which is to use an earlier weaker result (about <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mi>r</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span></span> diffeomorphisms, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mo>≤</mo><mn>1</mn><mo>+</mo><mi>dim</mi><mo>(</mo><mi>V</mi><mo>)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">r \\leq 1+\\dim(V)/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mrel\">≤</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">+</span><span class=\"mop\">dim</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mord mathrm\">/</span><span class=\"mord mathrm\">2</span></span></span></span>) to get a correspondingly weaker (but still new) result</p>",
        "id": 124289447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522183977
    },
    {
        "content": "<p>How do you get LaTeX rendering on this website?</p>",
        "id": 124289474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522184021
    },
    {
        "content": "<p>two $s</p>",
        "id": 124289523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522184056
    },
    {
        "content": "<p>weird</p>",
        "id": 124289529,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522184080
    },
    {
        "content": "<p>ooh Coq has an inversion tactic</p>",
        "id": 124289531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522184084
    },
    {
        "content": "<p>inverting what?</p>",
        "id": 124289535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522184092
    },
    {
        "content": "<p>is there a subversion tactic?</p>",
        "id": 124289536,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522184095
    },
    {
        "content": "<p>nooo subversion is dead</p>",
        "id": 124289545,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522184108
    },
    {
        "content": "<p>all cool kids use git nowadays</p>",
        "id": 124289553,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522184115
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Theorem evSS_ev : ∀ n,\n  ev (S (S n)) → ev n.\nProof.\n  intros n E.\n  inversion E as [| n&#39; E&#39;].\n  (* We are in the E = ev_SS n&#39; E&#39; case now. *)\n  apply E&#39;.\nQed.\n</pre></div>",
        "id": 124289557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522184135
    },
    {
        "content": "<p>induction n would not go down well here</p>",
        "id": 124289618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522184187
    },
    {
        "content": "<p>Coq knows that the only way to prove ev (S S n) is to prove ev n and deduce ev (S S n)</p>",
        "id": 124289625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522184222
    },
    {
        "content": "<p>is this the same as coinduction?</p>",
        "id": 124289721,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522184322
    },
    {
        "content": "<p>The question in full:</p>",
        "id": 124289727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522184330
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive  ev : nat →  Prop\n| ev_0 : ev 0\n| ev_SS : ∀ n : nat, ev n → ev (n+2)\n\nopen ev\n\nexample : ∀ n, ev (n+2) → ev n :=  sorry\n</pre></div>",
        "id": 124289736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522184350
    },
    {
        "content": "<p>oh no way, intros n H, cases H works!</p>",
        "id": 124289957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522184671
    },
    {
        "content": "<p>Yay, we have an inversion tactic!</p>",
        "id": 124289966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522184696
    },
    {
        "content": "<p>I still don't understand what this inversion tactic is meant to do.</p>",
        "id": 124289980,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522184717
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example : ¬ (ev 1) :=  begin\nintro H,\ncases H,\nend\n</pre></div>",
        "id": 124289984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522184735
    },
    {
        "content": "<p>(but I'm writing lecture notes on convex integration without integration in parallel of reading Zulip)</p>",
        "id": 124289987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522184748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I have a solution: do you want to see it?</p>",
        "id": 124290030,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522184767
    },
    {
        "content": "<p>inversion says \"You are assuming ev (n+2) and the only way to prove this would be by proving ev(n) and tehen applying ev_SS</p>",
        "id": 124290031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522184769
    },
    {
        "content": "<p>btw what you call \"inversion\" is just induction on the inductive predicate \"ev\"</p>",
        "id": 124290037,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522184785
    },
    {
        "content": "<p>(it's called <code>inductive</code> because you can do <code>induction</code>)</p>",
        "id": 124290045,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522184806
    },
    {
        "content": "<p>it's what software foundations calls inversion</p>",
        "id": 124290047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522184809
    },
    {
        "content": "<p>\"rule inversion\" is what computer scientists say when they mean \"case analysis\"</p>",
        "id": 124290129,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522184885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> for a second I thought this is something Lean doesn't have</p>",
        "id": 124290139,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522184905
    },
    {
        "content": "<p>(well, it's specific to inductive definitions usually)</p>",
        "id": 124290140,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522184905
    },
    {
        "content": "<p>So did I, that's why I mentioned it here</p>",
        "id": 124290152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522184929
    },
    {
        "content": "<p>case (hah) in point</p>\n<div class=\"codehilite\"><pre><span></span>example : ∀ n, ev (n+2) → ev n\n| n (ev_SS _ h) := h\n</pre></div>",
        "id": 124290244,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522185031
    },
    {
        "content": "<p>Kevin and Kenny, have you managed to prove an affine scheme is a scheme?</p>",
        "id": 124290266,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522185072
    },
    {
        "content": "<p>if we're allowed to assume <code>false</code>, then we've proved it</p>",
        "id": 124290273,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522185095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> hmm, I still have much to learn</p>",
        "id": 124290323,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522185130
    },
    {
        "content": "<p>you gave a 2-line solution</p>",
        "id": 124290326,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522185140
    },
    {
        "content": "<p>mine had 10 lines</p>",
        "id": 124290328,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522185146
    },
    {
        "content": "<p>I considered formatting it as one line</p>",
        "id": 124290333,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522185157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> do you have a link?</p>",
        "id": 124290711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522185669
    },
    {
        "content": "<p>For schemes? I think we're in the wrong topic. We are plenty of lemmas short of proving that an affine scheme is a scheme.</p>",
        "id": 124290779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522185749
    },
    {
        "content": "<p>Tom Hales told me he was going to mention it in his talk at AITP today</p>",
        "id": 124290787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522185772
    },
    {
        "content": "<p>so Kenny and I and Chris were hard at work trying to get it done</p>",
        "id": 124290788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522185781
    },
    {
        "content": "<p>and then Tom broke his toe and couldn't go to the conference :-/</p>",
        "id": 124290796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522185792
    },
    {
        "content": "<p>so I decided to leave the undergraduates alone so they can revise for their exams!</p>",
        "id": 124290799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522185809
    },
    {
        "content": "<p>as if they would really do so</p>",
        "id": 124290804,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522185822
    },
    {
        "content": "<p>Are you not revising mechanics?</p>",
        "id": 124290806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522185832
    },
    {
        "content": "<p>I'm building the function X -&gt; T</p>",
        "id": 124290850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522185855
    },
    {
        "content": "<p>There are not revising and you are code golfing...</p>",
        "id": 124290851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522185860
    },
    {
        "content": "<p>Go back to schemes!</p>",
        "id": 124290852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522185865
    },
    {
        "content": "<p><span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 124290853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522185869
    },
    {
        "content": "<blockquote>\n<p>Are you not revising mechanics</p>\n</blockquote>",
        "id": 124290874,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522185927
    },
    {
        "content": "<p>Let's look at my latest test scores</p>",
        "id": 124290876,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522185931
    },
    {
        "content": "<p>M1M2 100%</p>",
        "id": 124290882,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522185942
    },
    {
        "content": "<p>M1P2 100%</p>",
        "id": 124290885,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522185945
    },
    {
        "content": "<p>M1A1 100%</p>",
        "id": 124290886,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522185947
    },
    {
        "content": "<p>conclusion: continue building the map</p>",
        "id": 124290891,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522185955
    },
    {
        "content": "<p>are you arguing by induction?</p>",
        "id": 124290934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522185967
    },
    {
        "content": "<p>This is a dangerous technique :-)</p>",
        "id": 124290936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522185978
    },
    {
        "content": "<p>The final exam is worth 18 times more than the tests so you need to work 18 times as hard, right?</p>",
        "id": 124290941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522185997
    },
    {
        "content": "<p>This AITP looks interesting</p>",
        "id": 124290944,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522186001
    },
    {
        "content": "<p>what is AITP?</p>",
        "id": 124290948,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522186016
    },
    {
        "content": "<p>why did nobody mentioned that when we discussed ITP?</p>",
        "id": 124290949,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522186019
    },
    {
        "content": "<p><a href=\"http://aitp-conference.org/2017/\" target=\"_blank\" title=\"http://aitp-conference.org/2017/\">http://aitp-conference.org/2017/</a></p>",
        "id": 124290959,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522186029
    },
    {
        "content": "<p>a conference on the top of a mountain</p>",
        "id": 124290960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522186029
    },
    {
        "content": "<p>That link might be last year's...</p>",
        "id": 124290964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522186039
    },
    {
        "content": "<p>That where <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> must be then!</p>",
        "id": 124290968,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522186045
    },
    {
        "content": "<p>just at a guess</p>",
        "id": 124290969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522186047
    },
    {
        "content": "<p>conferences are always best when they are in a desireable location</p>",
        "id": 124290970,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522186048
    },
    {
        "content": "<p>I never think that</p>",
        "id": 124290972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522186055
    },
    {
        "content": "<p>My favourite conferences are in big cities</p>",
        "id": 124290973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522186067
    },
    {
        "content": "<p>that way I don't miss home so much</p>",
        "id": 124290975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522186071
    },
    {
        "content": "<p>I have been asked to go to exotic conferences in exotic places like Hawaii and have declined</p>",
        "id": 124291024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522186095
    },
    {
        "content": "<p>think of your graduate students who attend who can't afford holidays abroad without work kicking in a bit :)</p>",
        "id": 124291028,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522186103
    },
    {
        "content": "<p>because I was not sure I could handle a week there</p>",
        "id": 124291029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522186106
    },
    {
        "content": "<p>Last three conferences I went to were in Boston, Berkeley and LA</p>",
        "id": 124291039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522186138
    },
    {
        "content": "<p>Indeed I was probably looking for <a href=\"http://aitp-conference.org/2018/\" target=\"_blank\" title=\"http://aitp-conference.org/2018/\">http://aitp-conference.org/2018/</a></p>",
        "id": 124291041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522186143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> wait what</p>",
        "id": 124291057,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522186181
    },
    {
        "content": "<p>Oh, it's in Aussois!</p>",
        "id": 124291119,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522186222
    },
    {
        "content": "<p>I try to avoid going skiing in March, February is way better</p>",
        "id": 124291122,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522186236
    },
    {
        "content": "<p>I could have gone there easily (except that I'm teaching this week)</p>",
        "id": 124291146,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522186282
    },
    {
        "content": "<p>I read \"Robert Lewis: Toward AI for Lean, via metaprogramming\"</p>",
        "id": 124291153,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522186319
    },
    {
        "content": "<p>Looks like some people got proper training in grant proposal writing</p>",
        "id": 124291197,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522186340
    },
    {
        "content": "<p>I would fund that one</p>",
        "id": 124291199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522186355
    },
    {
        "content": "<p>is that paper available publicly?</p>",
        "id": 124291269,
        "sender_full_name": "Matt Wilson",
        "timestamp": 1522186450
    },
    {
        "content": "<p>I also like the spirit of the schedule:</p>\n<blockquote>\n<p><strong>March 25</strong><br>\n19:30 dinner<br>\n<strong>March 26</strong><br>\n...</p>\n</blockquote>",
        "id": 124291282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522186489
    },
    {
        "content": "<p>Oh, I didn't know Rob had a new paper</p>",
        "id": 124291443,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522186764
    },
    {
        "content": "<p>I love that the conference page concludes with ski rental prices</p>",
        "id": 124291449,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522186776
    },
    {
        "content": "<p>Does talking in this conference imply new paper?</p>",
        "id": 124291509,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522186850
    },
    {
        "content": "<p>(I'm trying to learn CS academic life)</p>",
        "id": 124291514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522186864
    },
    {
        "content": "<p>you have to hope that your labmates ski though; not one of mine in graduate school did</p>",
        "id": 124291520,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522186873
    },
    {
        "content": "<p>There is <a href=\"http://aitp-conference.org/2018/aitp18-proceedings.pdf\" target=\"_blank\" title=\"http://aitp-conference.org/2018/aitp18-proceedings.pdf\">http://aitp-conference.org/2018/aitp18-proceedings.pdf</a> but it contains only one page by Rob</p>",
        "id": 124291626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522187055
    },
    {
        "content": "<p>But it contains question relevant to Lean 4 (stuff about the VM)</p>",
        "id": 124291637,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522187103
    },
    {
        "content": "<p>I'd be curious to know what Hales intended to say</p>",
        "id": 124291904,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522187285
    },
    {
        "content": "<p>He was probably going to let out the secret.</p>",
        "id": 124291922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522187336
    },
    {
        "content": "<p>Which one? There are so many secrets</p>",
        "id": 124291938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522187365
    },
    {
        "content": "<p>He just got a big grant to fund formal abstracts</p>",
        "id": 124291942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522187380
    },
    {
        "content": "<p>Oooh</p>",
        "id": 124291952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522187395
    },
    {
        "content": "<p>and talking of secrets</p>",
        "id": 124291997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522187408
    },
    {
        "content": "<p>Fund what exactly?</p>",
        "id": 124292004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522187413
    },
    {
        "content": "<p>today I heard i'd been awarded a rather smaller grant to find my 13 undergraduates this summer</p>",
        "id": 124292007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522187422
    },
    {
        "content": "<p>I think Hales is going to pay people to type in statements of theorems in the Annals or whatever.</p>",
        "id": 124292017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522187445
    },
    {
        "content": "<p>into Lean</p>",
        "id": 124292023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522187463
    },
    {
        "content": "<p>Where will he find those people?</p>",
        "id": 124292034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522187483
    },
    {
        "content": "<p>If he's sitting at home with a broken toe he should come here and tell us the details :-)</p>",
        "id": 124292043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522187514
    },
    {
        "content": "<p>Hah, I guessed from the email I just got that I was mentioned here. There's no new paper, just a talk about some experiments that Minchao and I have been doing in our free time. Nothing very deep.</p>",
        "id": 124292550,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1522188133
    },
    {
        "content": "<p>The slides will eventually be online. The wifi here barely works, it took me ten minutes to email a picture of the scenery so I'm not gonna try to upload them now.</p>",
        "id": 124292584,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1522188229
    },
    {
        "content": "<p>Is this hammer thing the same as the stuff Isabelle users always talk  about?</p>",
        "id": 124292586,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522188232
    },
    {
        "content": "<p>Yeah. There's a recent paper that translates the idea to Coq.</p>",
        "id": 124292639,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1522188287
    },
    {
        "content": "<p>Great!</p>",
        "id": 124292663,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522188344
    },
    {
        "content": "<p>Do you have a public demo?</p>",
        "id": 124292716,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522188407
    },
    {
        "content": "<p>And, while you're here: are you considering have your Mathematica stuff turned into a Sage stuff?</p>",
        "id": 124292728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522188473
    },
    {
        "content": "<p>We've only worked out the relevance filter component, and it isn't quite fast enough for practical use yet. This is really just experimenting right now. There's some messy jumble of code on github but nothing you want to look at. Johannes and I have been talking to a masters student who is interested in this kind of automation though, so with some luck, the three of us will make some progress soon.</p>",
        "id": 124292865,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1522188666
    },
    {
        "content": "<p>The ideas behind the link will transfer easily enough. The engineering is another story, and I've never actually used Sage.</p>",
        "id": 124292868,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1522188700
    },
    {
        "content": "<p>It could happen, particularly with an application in mind, but it isn't at the top of my to-do list.</p>",
        "id": 124292906,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1522188726
    },
    {
        "content": "<p>I don't have any specific application in mind. But I was surprised by your paper because I know no Mathematica user, everybody uses Sage around me, and teaches Sage to students</p>",
        "id": 124292975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522188949
    },
    {
        "content": "<p>And Lean is open source software so it looks strange to choose Mathematica as a partner</p>",
        "id": 124293020,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522188988
    },
    {
        "content": "<p>(well Lean 4 development is not yet open source, but let's hope for the best)</p>",
        "id": 124293023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522189021
    },
    {
        "content": "<p>But I should be sleeping. Tomorrow I need to teach old fashioned algebraic geometry in Sage (computing projections of algebraic sets using resultants).</p>",
        "id": 124293079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522189109
    },
    {
        "content": "<p>Bye</p>",
        "id": 124293084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522189128
    },
    {
        "content": "<p>I had the opposite experience as an undergrad, they taught us Mathematica and nothing else. Most of the people I asked said similar, but it was definitely a biased sample. And there were people at Wolfram who were already interested in Lean, so it made sense at the time, heh.</p>",
        "id": 124293097,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1522189152
    },
    {
        "content": "<p>I should also call it a night!</p>",
        "id": 124293105,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1522189172
    },
    {
        "content": "<p>I'm still sitting here idly trying software foundations.</p>",
        "id": 124293282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522189467
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>namespace hidden\n\ninductive  le : nat → nat →  Prop\n| le_n : ∀ n, le n n\n| le_S : ∀ n m, (le n m) → (le n (nat.succ m))\n\nlocal  infix ` lq ` :50  :=  λ m n, le m n\n\nopen le\n\nlemma n_le_m__Sn_le_Sm : ∀ n m,\n  n lq m → nat.succ n lq nat.succ m :=\nbegin\n  intros n m H,\n  cases H with NOT_USED NOT_USED_EITHER q Hnq,\n  repeat {admit},\nend\n</pre></div>",
        "id": 124293292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522189507
    },
    {
        "content": "<p>cases is throwing away my variable names</p>",
        "id": 124293348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522189610
    },
    {
        "content": "<p>(I called it lq to avoid confusion with already-defined-things)</p>",
        "id": 124293359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522189649
    },
    {
        "content": "<p>I proved 2+2 isn't 6</p>",
        "id": 124295500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522193465
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>definition  S (n : ℕ) := nat.succ n\n\ninductive  R : nat → nat → nat →  Prop\n| c1 : R 0  0  0\n| c2 : ∀ m n o, R m n o → R (S m) n (S o)\n| c3 : ∀ m n o, R m n o → R m (S n) (S o)\n\nopen R\n\nexample : R 1  1  2  := c3 _ _ _ (c2 _ _ _ c1)\n\nexample : ¬ (R 2  2  6) :=  begin\nintro H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\ncases H with H H H H H H H H,\nend\n</pre></div>",
        "id": 124295506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522193510
    },
    {
        "content": "<p>Cases eats far too many variables which makes the proof look even more ridiculous</p>",
        "id": 124295555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522193584
    },
    {
        "content": "<p>Cut and paste from VS Code into zulipchat (ubuntu, firefox) isn't great. I get extra spaces, extra carriage returns</p>",
        "id": 124295607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522193650
    },
    {
        "content": "<p>I'm not sure what's up with zulip paste. I don't think it was doing that when we first moved</p>",
        "id": 124295722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522193901
    },
    {
        "content": "<p>Here's a shorter way to write that proof:</p>\n<div class=\"codehilite\"><pre><span></span>example : ¬ (R 2 2 6) | H := by casesm * [R _ _ _]\n</pre></div>",
        "id": 124295724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522193931
    },
    {
        "content": "<p>but if you look at the resulting proof, it's rather involved</p>",
        "id": 124295739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522193993
    },
    {
        "content": "<p>You can simplify the proof if you define <code>R</code> to avoid having both <code>c2</code> and <code>c3</code>; the proof length here increases exponentially</p>",
        "id": 124295788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522194050
    },
    {
        "content": "<blockquote>\n<p>cases is throwing away my variable names</p>\n</blockquote>\n<p>I tried once to make a version of cases that doesn't throw away names, but it's tough. What happens is that the names are allotted first, in the case splits, and then some cases are eliminated outright by inversion so you never see those names. I just put <code>_</code> for those</p>",
        "id": 124295898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522194306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> did you do the 4-star exercise proving that the two notions of evenness are equivalent?</p>",
        "id": 124359326,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522315112
    },
    {
        "content": "<p>Three notions :-)</p>",
        "id": 124359329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315128
    },
    {
        "content": "<p>I must be ahead of you ;-)</p>",
        "id": 124359330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315134
    },
    {
        "content": "<p>Link?</p>",
        "id": 124359338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315164
    },
    {
        "content": "<p>Use cases or induction on the inductive prop, if that's the issue. This blew my mind.</p>",
        "id": 124359397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315208
    },
    {
        "content": "<p><a href=\"https://softwarefoundations.cis.upenn.edu/lf-current/IndProp.html#lab206\" target=\"_blank\" title=\"https://softwarefoundations.cis.upenn.edu/lf-current/IndProp.html#lab206\">https://softwarefoundations.cis.upenn.edu/lf-current/IndProp.html#lab206</a></p>",
        "id": 124359405,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522315224
    },
    {
        "content": "<p>Yes I did that one</p>",
        "id": 124359407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315241
    },
    {
        "content": "<p>I did the exercise before that one as well, which IIRC I used.</p>",
        "id": 124359416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315275
    },
    {
        "content": "<p>Here's what I think Kenny is asking:</p>",
        "id": 124359594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315622
    },
    {
        "content": "<p>All I'm asking is \" did you do the 4-star exercise proving that the two notions of evenness are equivalent? \"</p>",
        "id": 124359603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522315641
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def  S  := nat.succ\n\ninductive  ev : nat →  Prop\n| ev_0 : ev 0\n| ev_SS : ∀ n : nat, ev n → ev (S (S n))\n\ninductive  ev&#39; : nat →  Prop\n| ev&#39;_0 : ev&#39; 0\n| ev&#39;_2 : ev&#39; 2\n| ev&#39;_sum : ∀ n m, ev&#39; n → ev&#39; m → ev&#39; (n + m)\n\ntheorem  ev&#39;_ev : ∀ n, ev&#39; n ↔ ev n :=  sorry\n</pre></div>",
        "id": 124359604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315644
    },
    {
        "content": "<p>right</p>",
        "id": 124359607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522315659
    },
    {
        "content": "<p>and the answer is \"yes, I did it whilst watching the football on Tuesday\"</p>",
        "id": 124359609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315670
    },
    {
        "content": "<p>did you use term mode or tactic mode?</p>",
        "id": 124359650,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522315694
    },
    {
        "content": "<p>tactic</p>",
        "id": 124359652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315712
    },
    {
        "content": "<p>why am i not surprised</p>",
        "id": 124359656,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522315732
    },
    {
        "content": "<p>I really like Software Foundations, because I can do the exercises no matter how many stars they have, which is a good confidence boost :-)</p>",
        "id": 124359657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315737
    },
    {
        "content": "<p>The first time I saw a 5-star one I thought \"oh gosh\", and then I just sat down and did it, and thought \"maybe I already know what they're trying to teach me here\"</p>",
        "id": 124359665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315774
    },
    {
        "content": "<p>maybe they're teaching you to quit using tactic mode</p>",
        "id": 124359670,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522315792
    },
    {
        "content": "<p>rofl</p>",
        "id": 124359672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315799
    },
    {
        "content": "<p>Coq is big on tactic mode</p>",
        "id": 124359722,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522315819
    },
    {
        "content": "<p>Term mode is favored by mathematicians who work in isabelle</p>",
        "id": 124359727,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522315848
    },
    {
        "content": "<p>Ish. Obviously there are exceptions</p>",
        "id": 124359734,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522315869
    },
    {
        "content": "<p>Lean docs seem to push term mode a lot at the start.</p>",
        "id": 124359737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315880
    },
    {
        "content": "<p>I did notice that Software foundations instantly starts with \"OK so here are some easy things, let's prove them in tactic mode\".</p>",
        "id": 124359740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315906
    },
    {
        "content": "<p>You mean Jeremy pushes term mode in TIPL <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 124359742,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522315911
    },
    {
        "content": "<p>As did a Coq tutorial I did before I came to Lean.</p>",
        "id": 124359743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315919
    },
    {
        "content": "<p>I think that mathematicians should start with tactic mode</p>",
        "id": 124359782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315930
    },
    {
        "content": "<p>because they typically have no idea what a functional language is or what a lambda is</p>",
        "id": 124359785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315939
    },
    {
        "content": "<p>mathematicians should start with formal proofs...</p>",
        "id": 124359787,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522315953
    },
    {
        "content": "<p>fitch, hilbert, whatever</p>",
        "id": 124359790,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522315958
    },
    {
        "content": "<p>right</p>",
        "id": 124359791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315959
    },
    {
        "content": "<p>via tactic mode</p>",
        "id": 124359792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522315963
    },
    {
        "content": "<p>via writing it down on pen and paper</p>",
        "id": 124359793,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522315969
    },
    {
        "content": "<p>You can get pretty far writing everything out with assume, show, and calc in lean</p>",
        "id": 124359841,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522316043
    },
    {
        "content": "<p>as far as Zeno got?</p>",
        "id": 124359857,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522316114
    },
    {
        "content": "<p>whenever I do a tactic proof I don't indent the line after <code>begin</code> and I can hear Johannes' voice in my head telling me that I can't get it PR'ed to mathlib that way</p>",
        "id": 124359906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522316199
    },
    {
        "content": "<p>Not familiar with his proofs, unfortunately</p>",
        "id": 124359907,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522316200
    },
    {
        "content": "<p>Haha, best fix your style or else you'll get another nasty email asking you to teach your students the mathlib style</p>",
        "id": 124359915,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522316250
    },
    {
        "content": "<p>It's the voices in my head I have to deal with</p>",
        "id": 124359917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522316268
    },
    {
        "content": "<p>be the compiler, be the journal editor... these voices are quite talented</p>",
        "id": 124359966,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522316359
    },
    {
        "content": "<p>yeah I have some pretty high-class voices in my head.</p>",
        "id": 124359971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522316384
    },
    {
        "content": "<p>Did you skip over the 5 star pumping lemma? That was quite an exercise</p>",
        "id": 124360082,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522316621
    },
    {
        "content": "<p>Actually even the one on palindromes in the same chapter was involved</p>",
        "id": 124360115,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522316643
    },
    {
        "content": "<p>I looked at that when I didn't have access to a computer</p>",
        "id": 124360123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522316647
    },
    {
        "content": "<p>and decided that mathematicians didn't care about pumping lemmas.</p>",
        "id": 124360126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522316656
    },
    {
        "content": "<p>I did do the 5 star constructive mathematics exercise even though the first time I saw it I figured mathematicians didn't care about that either.</p>",
        "id": 124360128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522316676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> try doing regex :P</p>",
        "id": 124360137,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522316725
    },
    {
        "content": "<p>I did the 4 star even question again just now, because I couldnt' find my original solution and Kenny asking it made me concerned I'd missed something.</p>",
        "id": 124360138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522316728
    },
    {
        "content": "<p>I saw that regex stuff. I am not convinced I need to learn this sort of skill. I'm sure I'd find it a lot of fun</p>",
        "id": 124360139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522316744
    },
    {
        "content": "<p>but I need to focus on other things.</p>",
        "id": 124360140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522316753
    },
    {
        "content": "<p>Kenny, my evenness proof is just <code>repeat {induction *, exact *}</code></p>",
        "id": 124360189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522316826
    },
    {
        "content": "<p>well, perhaps not quite that</p>",
        "id": 124360191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522316835
    },
    {
        "content": "<p>I have a 4-line 223-character solution</p>",
        "id": 124381653,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522353826
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive ev : nat → Prop\n| ev_0 : ev 0\n| ev_SS : ∀ n, ev n → ev (n + 2)\n\ninductive ev&#39; : nat → Prop\n| ev&#39;_0 : ev&#39; 0\n| ev&#39;_2 : ev&#39; 2\n| ev&#39;_sum : ∀ n m, ev&#39; n → ev&#39; m → ev&#39; (n + m)\n\nopen ev\nopen ev&#39;\n\ntheorem ev&#39;_ev.standalone : ∀ n, ev&#39; n ↔ ev n :=\nLine 1\nLine 2\nLine 3\nLine 4\n</pre></div>",
        "id": 124381654,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522353829
    },
    {
        "content": "<p>Let's see who can beat me</p>",
        "id": 124381656,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522353831
    },
    {
        "content": "<p>(I used appropriate spacings and I counted them in)</p>",
        "id": 124381658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522353840
    },
    {
        "content": "<p>i'm surprised there's so much interest in the \"three different definitions of even\" exercise</p>",
        "id": 124382012,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522354264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> beat me :P</p>",
        "id": 124382023,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522354288
    },
    {
        "content": "<p>i thought the most interesting ones in that chapter were the subseq and palindrome problems</p>",
        "id": 124382029,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522354304
    },
    {
        "content": "<p>i would give it a shot except i'm currently supposedly doing work at the moment</p>",
        "id": 124382078,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522354329
    },
    {
        "content": "<p>and i think the nodup and nostutter predicates are interesting since they are related to how finite sets are implemented in lean</p>",
        "id": 124382173,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522354490
    },
    {
        "content": "<p>I would be interested to know if anyone can prove the pigeonhole principle (last exercise of the IndProp chapter) without excluded_middle.</p>",
        "id": 124383111,
        "sender_full_name": "Ching-Tsun Chou",
        "timestamp": 1522355902
    }
]