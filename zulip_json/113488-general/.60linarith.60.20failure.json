[
    {
        "content": "<p>Why does <code>linarith</code> fail on the goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">d</span> <span class=\"n\">i</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>?<br>\nIf <code>linarith</code> doesn't work, what other tactic can be used?</p>",
        "id": 297565991,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662548777
    },
    {
        "content": "<p>Is it true if <code>l = 0</code>?</p>",
        "id": 297567019,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662549104
    },
    {
        "content": "<p>note that I suspect that your inequality with <code>0</code> is not really what you meant.</p>",
        "id": 297567057,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662549121
    },
    {
        "content": "<p>i.e. <code>0 ≤ l - i - 1</code> always holds for natural numbers.</p>",
        "id": 297567155,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662549149
    },
    {
        "content": "<p>Indeed, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"n\">i</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>though note that I changed <code>nat</code> to <code>int</code>.</p>",
        "id": 297567489,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662549272
    },
    {
        "content": "<p>If you deal with the subtraction by hand, then this also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"n\">i</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i0</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nat.exists_eq_add_of_le</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.sub_sub</span><span class=\"o\">,</span> <span class=\"n\">nat.add_sub_cancel_left</span><span class=\"o\">],</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>again, note the strengthened assumption on the inequality.</p>",
        "id": 297568535,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662549661
    },
    {
        "content": "<p>and finally, the first version was indeed not true: ( <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"n\">i</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Also, what role does <code>d</code> play in this?</p>",
        "id": 297569178,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662549899
    },
    {
        "content": "<p><code>d</code> was a left-over from the attempt at extracting an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 297572652,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662551340
    },
    {
        "content": "<p>You're right, of course, about the nat-subtraction. It is much too easy to fall into this trap!</p>",
        "id": 297572764,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662551384
    },
    {
        "content": "<p>Still, I would have expected <code>inarith</code> to work on the corrected version \"as-is\", without additional massaging...</p>",
        "id": 297573070,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662551498
    },
    {
        "content": "<p>I find that linarith works much better with groups, (and it does work with the <code>int</code> version).  As you say, <code>nat</code> is full of traps and it is so also for people writing tactics!  I would have liked <code>zify</code> to pick up on <code>l - i - 1</code> and the hypothesis <code>i + 1 ≤ l</code>, but it did not.  I do not know if some of these easy replacements are in scope for <code>zify</code>.</p>",
        "id": 297574554,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662552057
    },
    {
        "content": "<p>I always fall for the fact that <code>n + 1 - 1</code> is not equal to <code>n - 1 + 1</code>!  I always want to cancel a number and its opposite and that is where the symbol <code>-</code> shows its weakness.</p>",
        "id": 297575363,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662552341
    }
]