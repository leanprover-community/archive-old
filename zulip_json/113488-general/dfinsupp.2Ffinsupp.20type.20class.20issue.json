[
    {
        "content": "<p>The discussion about type class inference going on here</p>\n<p><a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/sigma_finsupp_to_dfinsupp/near/241170315\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/sigma_finsupp_to_dfinsupp/near/241170315</a></p>\n<p>isn't really relevant to that stream. Here's what's going on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dfinsupp</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- to see the traces uncomment this</span>\n\n<span class=\"c1\">--set_option trace.class_instances true</span>\n\n<span class=\"c1\">-- this fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Here's a part of the trace (click on \"apply_instance\"):</span>\n\n<span class=\"cm\">[class_instances] (0) ?x_0 : add_comm_monoid (Π₀ (i : ι), η i →₀ N) :=</span>\n<span class=\"cm\">  @dfinsupp.add_comm_monoid ?x_38 ?x_39 ?x_40</span>\n<span class=\"cm\">failed is_def_eq</span>\n\n<span class=\"cm\">??</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span>\n <span class=\"n\">finsupp.has_zero</span>\n <span class=\"n\">finsupp.add_zero_class</span>\n <span class=\"n\">finsupp.add_monoid</span>\n\n<span class=\"c1\">--set_option trace.class_instances true</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n\n<span class=\"cm\">Part of the trace:</span>\n\n<span class=\"cm\">[class_instances] (0) ?x_0 : add_comm_monoid (Π₀ (i : ι), η i →₀ N) := @dfinsupp.add_comm_monoid ?x_38 ?x_39 ?x_40</span>\n<span class=\"cm\">[class_instances] caching instance for add_comm_monoid (Π₀ (i : ι), η i →₀ N)</span>\n<span class=\"cm\">@dfinsupp.add_comm_monoid ι (λ (i : ι), η i →₀ N) (λ (i : ι), @finsupp.add_comm_monoid (η i) N _inst_2)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 241300314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622658685
    },
    {
        "content": "<p>Now mathlib-free (and addition-free!):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_zero</span> <span class=\"n\">M.</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dfinsupp</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">dfinsupp.has_zero</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">dfinsupp.add_zero_class</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span>      <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>             <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finsupp.has_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finsupp.add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span>      <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">finsupp.has_zero</span>\n<span class=\"c1\">-- now it works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>What is mathlib doing wrong here?</p>",
        "id": 241310936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622663669
    },
    {
        "content": "<p>Can you also do the Lean 4 analogue? If it also fails in Lean 4, we could ask the devs if something can be done about it. And if it works, great!</p>",
        "id": 241311523,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622663938
    },
    {
        "content": "<p>Here's the Lean 3 trace. You can see <code>failed is_def_eq</code> failing but then succeeding with a definitionally equal problem. I'll try it in Lean 4.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[class_instances] (0) ?x_0 : add_zero_class</span>\n<span class=\"cm\">  (@dfinsupp ι (λ (i : ι), @finsupp (η i) N (@add_zero_class.to_has_zero N _inst_1))</span>\n<span class=\"cm\">     (λ (i : ι), @finsupp.has_zero (η i) N (@add_zero_class.to_has_zero N _inst_1))) := @dfinsupp.add_zero_class ?x_4 ?x_5 ?x_6</span>\n<span class=\"cm\">failed is_def_eq</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">finsupp.has_zero</span>\n<span class=\"c1\">-- now it works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">dfinsupp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[class_instances] (0) ?x_0 : add_zero_class</span>\n<span class=\"cm\">  (@dfinsupp ι (λ (i : ι), @finsupp (η i) N (@add_zero_class.to_has_zero N _inst_1))</span>\n<span class=\"cm\">     (λ (i : ι),</span>\n<span class=\"cm\">        @add_zero_class.to_has_zero (@finsupp (η i) N (@add_zero_class.to_has_zero N _inst_1))</span>\n<span class=\"cm\">          (@finsupp.add_zero_class (η i) N _inst_1))) := @dfinsupp.add_zero_class ?x_4 ?x_5 ?x_6</span>\n<span class=\"cm\">[class_instances] caching instance for add_zero_class...</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">dfinsupp</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"n\">N</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">finsupp.has_zero</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"n\">N</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">dfinsupp</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"n\">N</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n        <span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"n\">N</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp.add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 241312521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622664395
    },
    {
        "content": "<p>Wow, thank you Kevin!! This looks deeper than I expected...</p>",
        "id": 241313222,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622664733
    },
    {
        "content": "<p>The first trace you're showing is failing with <code>@finsupp.add_zero_class</code>, while the second one succeeds but with <code>@dfinsupp.add_zero_class</code>. I guess you wanted to tell us that the first one also fails with the <code>dfinsupp</code> version?</p>",
        "id": 241313290,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622664772
    },
    {
        "content": "<p>oh that is probably a typo on my part (I copied the wrong thing, let me check). Update: yes, I copied the wrong line. I fixed it now.</p>",
        "id": 241313445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622664856
    },
    {
        "content": "<p>I couldn't get it to work in <a href=\"#narrow/stream/270676-lean4/topic/typeclass.20failure/near/241318335\">Lean 4</a> either.</p>",
        "id": 241318653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622667323
    },
    {
        "content": "<p>I don't have time today to think about it, but in <a href=\"https://github.com/leanprover-community/mathlib/issues/7818\">#7818</a> something even stranger happened. I was proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">finsupp.has_zero</span>\n\n<span class=\"sd\">/-- `finsupp.split` is an additive equivalence between `(Σ i, η i) →₀ N` and `Π₀ i, (η i →₀ N)`. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sigma_finsupp_add_equiv_dfinsupp</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">≃+</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">sigma_finsupp_equiv_dfinsupp</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">sigma_finsupp_equiv_dfinsupp.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"bp\">..</span> <span class=\"n\">sigma_finsupp_equiv_dfinsupp</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>that worked very well. Then <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> suggested to have <code>map_add'</code> as an isolated lemma, so I wanted to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">finsupp.has_zero</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sigma_finsupp_equiv_dfinsupp_add</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">sigma_finsupp_equiv_dfinsupp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sigma_finsupp_equiv_dfinsupp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n  <span class=\"o\">(</span><span class=\"n\">sigma_finsupp_equiv_dfinsupp</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n\n<span class=\"sd\">/-- `finsupp.split` is an additive equivalence between `(Σ i, η i) →₀ N` and `Π₀ i, (η i →₀ N)`. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sigma_finsupp_add_equiv_dfinsupp</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">≃+</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">sigma_finsupp_equiv_dfinsupp</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">sigma_finsupp_equiv_dfinsupp.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"bp\">..</span> <span class=\"n\">sigma_finsupp_equiv_dfinsupp</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The strange thing is that I get the <code>failed to synthesize type class instance for</code> error about <code>has_add (Π₀ (i : ι), η i →₀ N)</code> in <code>sigma_finsupp_equiv_dfinsupp_add</code>, but still <code>sigma_finsupp_add_equiv_dfinsupp </code> just below works.</p>",
        "id": 241629985,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622890228
    },
    {
        "content": "<p>A simpler example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">finsupp.has_zero</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">sigma_finsupp_equiv_dfinsupp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"c1\">--Π₀ (i : ι), η i →₀ N</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">sigma_finsupp_equiv_dfinsupp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sigma_finsupp_equiv_dfinsupp</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"c1\">--fails</span>\n</code></pre></div>",
        "id": 241630259,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622890651
    },
    {
        "content": "<p>What if you add an explicit type ascription to the failing check? (Maybe to both operands)</p>",
        "id": 241630424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622890860
    },
    {
        "content": "<p>I think sometimes that forces lean to redo a typeclass search</p>",
        "id": 241630436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622890884
    },
    {
        "content": "<p>Ah, <code>#check ((sigma_finsupp_equiv_dfinsupp f) + (sigma_finsupp_equiv_dfinsupp g) : (Π₀ (i : ι), η i →₀ N)) </code> works!</p>",
        "id": 241630655,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622891211
    },
    {
        "content": "<p>I think I had to do this higher up in the file you're working in</p>",
        "id": 241630811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622891472
    },
    {
        "content": "<p>But <code>smul</code> is different</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">--fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">dfinsupp.has_scalar</span> <span class=\"c1\">--OK</span>\n\n<span class=\"c1\">-- no problem here</span>\n<span class=\"sd\">/-- `finsupp.split` is a linear equivalence between `(Σ i, η i) →₀ N` and `Π₀ i, (η i →₀ N)`. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sigma_finsupp_lequiv_dfinsupp</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"bp\">..</span> <span class=\"n\">sigma_finsupp_add_equiv_dfinsupp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 241631202,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622892108
    },
    {
        "content": "<p>I assume you run into trouble again if you try to declare a standalone smul lemma?</p>",
        "id": 241632223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622893469
    },
    {
        "content": "<p>Yes, that's what I was trying to do</p>",
        "id": 241632566,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622893968
    },
    {
        "content": "<p>Your snippet above doesn't show that attempt</p>",
        "id": 241632921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622894475
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">--fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">dfinsupp.has_scalar</span> <span class=\"c1\">--OK</span>\n\n<span class=\"c1\">--this fails</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sigma_finsupp_equiv_dfinsupp_smul</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sigma_finsupp_equiv_dfinsupp</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">sigma_finsupp_equiv_dfinsupp</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- `finsupp.split` is a linear equivalence between `(Σ i, η i) →₀ N` and `Π₀ i, (η i →₀ N)`. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sigma_finsupp_lequiv_dfinsupp</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"bp\">..</span> <span class=\"n\">sigma_finsupp_add_equiv_dfinsupp</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>In the <code>add</code> lemma both examples worked <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 241633103,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622894717
    },
    {
        "content": "<p>What if you relax module to distrib_mul_action?</p>",
        "id": 241633172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622894777
    },
    {
        "content": "<p><code>module</code> is only needed for the bundled map</p>",
        "id": 241633193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622894833
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 241633361,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622895089
    },
    {
        "content": "<p>I mean replace <code>module R N</code></p>",
        "id": 241633439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622895184
    },
    {
        "content": "<p>Since <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.distrib_mul_action\">docs#dfinsupp.distrib_mul_action</a> doesn't need it</p>",
        "id": 241633449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622895224
    },
    {
        "content": "<p>Oh...</p>",
        "id": 241633462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622895242
    },
    {
        "content": "<p>You need <a href=\"https://github.com/leanprover-community/mathlib/issues/7664\">#7664</a> for that to work</p>",
        "id": 241633498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622895266
    },
    {
        "content": "<p>Ah yes, that doesn't work but indeed the lemma is really missing</p>",
        "id": 241633583,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622895382
    },
    {
        "content": "<p>Does <code>attribute [-instance] dfinsupp.distrib_mul_action dfinsupp.has_scalar</code> help?</p>",
        "id": 241633691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622895566
    },
    {
        "content": "<p>To force it to find the module instance</p>",
        "id": 241633702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622895590
    },
    {
        "content": "<p>Hmm...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>works, even without <code>local attribute [-instance] dfinsupp.distrib_mul_action dfinsupp.has_scalar</code>. But <code>has_scalar</code> does not.</p>",
        "id": 241633872,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622895809
    },
    {
        "content": "<p>And <code>has_scalar</code> doesn't work even with <code>local attribute [-instance] dfinsupp.distrib_mul_action dfinsupp.has_scalar</code>.</p>",
        "id": 241633916,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622895868
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sigma_finsupp_equiv_dfinsupp_smul</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">η</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sigma_finsupp_equiv_dfinsupp</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_scalar.smul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">η</span> <span class=\"n\">i</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">mul_action.to_has_scalar</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">sigma_finsupp_equiv_dfinsupp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 241637877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622901340
    },
    {
        "content": "<p>Typeclass search shows that it while trying to satisfy <code>finsupp.distrib_mul_action</code> it ends up rejecting <code>module.to_distrib_mul_action</code></p>",
        "id": 241637930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622901391
    },
    {
        "content": "<p>I think i'm seeing a similar issue to this one in <a href=\"https://github.com/leanprover-community/mathlib/issues/7834\">#7834</a></p>",
        "id": 241808189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623085440
    }
]