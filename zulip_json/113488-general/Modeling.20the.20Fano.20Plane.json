[
    {
        "content": "<p>The Fano plane is the smallest projective plane, comprising seven points and seven lines. Three points lie on each line and three lines pass through each point. I am trying to model this structure in lean4 as a pair of types <code>P, L</code> satisfying <code>Membership P L</code>, but my first attempt is turning out extremely tedious and verbose.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">FanoPoints</span> <span class=\"n\">where</span>\n  <span class=\"bp\">&lt;</span><span class=\"n\">seven</span> <span class=\"n\">constructors</span> <span class=\"n\">p1</span> <span class=\"bp\">…</span> <span class=\"n\">p7</span><span class=\"bp\">&gt;</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">FanoLines</span> <span class=\"n\">where</span>\n  <span class=\"bp\">&lt;</span><span class=\"n\">seven</span> <span class=\"n\">constructors</span> <span class=\"n\">l1</span> <span class=\"bp\">…</span> <span class=\"n\">l7</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>Then for the <code>Membership</code> instance I just write down formulas for each of the lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">FanoPoints</span> <span class=\"n\">FanoLines</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">l1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">p2</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=.</span><span class=\"n\">p3</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">p6</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">l2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">p1</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=.</span><span class=\"n\">p3</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">p4</span>\n    <span class=\"o\">[</span><span class=\"bp\">…</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This is not very elegant, but bearable. The real problem starts when I try to prove the formula <code>∀(p q : FanoPoints), ∃ (l : FanoLines), p ∈ l ∧ q ∈ l</code>, i.e. there is a line connecting any two points. I currently have a big case distinction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">l2</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">l3</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">)⟩</span>\n    <span class=\"o\">[</span><span class=\"bp\">…</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>with 49 cases (I haven't written all of them yet).</p>\n<p>Is my basic approach sound? Is there a significantly simpler way to do it? Are there ways I can at least have Lean auto-infer the proof part of the existentials I am building in my case distinction, if not the witnesses?</p>",
        "id": 323208305,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1674554561
    },
    {
        "content": "<p>I think you can derive <code>DecidableEq</code> for <code>FanoPoints</code>. After that, your proofs should hopefully be <code>by decide</code>.</p>",
        "id": 323209190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674554817
    },
    {
        "content": "<p>I added the annotation to <code>FanoPoints</code> and <code>FanoLines</code>, but when I try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">l2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I get <code>Failed to synthesize Decidable (p1 ∈ FanoLines.l2)</code>.</p>",
        "id": 323210321,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1674555181
    },
    {
        "content": "<p>Right, so after you define membership, you should prove that it's decidable</p>",
        "id": 323210421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674555220
    },
    {
        "content": "<p>Ah, I see. So something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">fanoMemDecidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">FanoPoints</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">FanoLines</span><span class=\"o\">):</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">Membership.mem</span> <span class=\"n\">p</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">[</span><span class=\"bp\">…</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Would I have to write out every case of (point, line) in this proof?</p>",
        "id": 323213388,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1674556047
    },
    {
        "content": "<p>I got it to work, thank you very much for your help :)</p>",
        "id": 323220324,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1674558087
    },
    {
        "content": "<p>You might be interested in <a href=\"https://drops.dagstuhl.de/opus/volltexte/2022/16734/\">Proof Pearl: Formalizing Spreads and Packings of the Smallest Projective Space PG(3,2) Using the Coq Proof Assistant</a> to see how they do it in Coq.</p>",
        "id": 323224086,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674559203
    },
    {
        "content": "<p>My personal opinion is that it is terribly ugly and <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> reimplemented some of Magaud's paper in Lean without the case bashs.</p>",
        "id": 323224443,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674559309
    },
    {
        "content": "<p>isn't there a way to present the fano plane as consisting of the nonzero points of <code>{0,1}^3</code>? (Maybe that's <code>F_2</code>.) I would imagine that using a more uniform representation like that would help to describe the different kinds of lines and points more than a 7-way enumeration</p>",
        "id": 323266145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674570595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"460941\">@Sebastian Zivota</span> It'd probably be better to use an algebraic formulation of the Fano plane, but given your original question this is what I came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">FanoPoints</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">p1</span> <span class=\"bp\">|</span> <span class=\"n\">p2</span> <span class=\"bp\">|</span> <span class=\"n\">p3</span> <span class=\"bp\">|</span> <span class=\"n\">p4</span> <span class=\"bp\">|</span> <span class=\"n\">p5</span> <span class=\"bp\">|</span> <span class=\"n\">p6</span> <span class=\"bp\">|</span> <span class=\"n\">p7</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">FanoLines</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">l1</span> <span class=\"bp\">|</span> <span class=\"n\">l2</span> <span class=\"bp\">|</span> <span class=\"n\">l3</span> <span class=\"bp\">|</span> <span class=\"n\">l4</span> <span class=\"bp\">|</span> <span class=\"n\">l5</span> <span class=\"bp\">|</span> <span class=\"n\">l6</span> <span class=\"bp\">|</span> <span class=\"n\">l7</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FanoLines.points</span> <span class=\"o\">:</span> <span class=\"n\">FanoLines</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">FanoPoints</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">l1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p4</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">l2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p5</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">l3</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p4</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p6</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">l4</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">p4</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p5</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p7</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">l5</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">p5</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p6</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p1</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">l6</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">p6</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p7</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p2</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">l7</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">p7</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p3</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">FanoMembership</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">FanoPoints</span> <span class=\"n\">FanoLines</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l.points</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">FanoPoints</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">FanoLines</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">FanoMembership</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">FanoLines</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">l</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">l1</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">l2</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">l3</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">l4</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">l5</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">l6</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">l7</span> <span class=\"k\">then</span>\n    <span class=\"n\">isTrue</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"n\">repeat</span>\n        <span class=\"n\">try</span> <span class=\"n\">rename_i</span> <span class=\"n\">h</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h</span>\n      <span class=\"n\">intro</span> <span class=\"n\">l</span>\n      <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">isFalse</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">H</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h</span>\n      <span class=\"n\">repeat</span>\n        <span class=\"n\">try</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">apply</span> <span class=\"n\">H</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> mathlib -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_forall</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> mathlib -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_exists</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> mathlib -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">FanoLines</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">l</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"k\">then</span>\n    <span class=\"n\">isFalse</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">isTrue</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_forall</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_line</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">FanoPoints</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">FanoLines</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 323290326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674576092
    },
    {
        "content": "<p>The key Decidable instance here is one for deciding universal quantifiers <code>∀ (l : FanoLines), P l</code>, which can be done since <code>FanoLines</code> has only finitely many terms.</p>\n<p>Then this gives a decidable instance for existentials, and in the end you don't need to go through each of the cases by hand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_line</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">FanoPoints</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">FanoLines</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 323292006,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674576465
    },
    {
        "content": "<p>That is really cool, thanks. It didn't occur to me to just use lists for the lines, nor to derive <code>Decidable</code> instances for the quantified formulas. One question though, don't <code>not_forall</code> and <code>not_not</code> turn the entire theory classical (or require it to be such)?</p>",
        "id": 323298159,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1674578032
    },
    {
        "content": "<p>There are some decidable versions of these in Mathlib that can apply here instead, but I personally don't mind using classical proofs.</p>",
        "id": 323298524,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674578122
    },
    {
        "content": "<p>The Decidable instances you get are still computable even if they depend on classical arguments.</p>",
        "id": 323298758,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674578186
    },
    {
        "content": "<p>Floris pointed out to me that you can go further and decide the entire proposition with one more instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">FanoPoints</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">l</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">p1</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">p2</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">p3</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">p4</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">p5</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">p6</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">.</span><span class=\"n\">p7</span> <span class=\"k\">then</span>\n    <span class=\"n\">isTrue</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"n\">repeat</span>\n        <span class=\"n\">try</span> <span class=\"n\">rename_i</span> <span class=\"n\">h</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h</span>\n      <span class=\"n\">intro</span> <span class=\"n\">l</span>\n      <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">isFalse</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">H</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h</span>\n      <span class=\"n\">repeat</span>\n        <span class=\"n\">try</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">apply</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_line</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">FanoPoints</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">FanoLines</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 323299156,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674578273
    },
    {
        "content": "<p>Don't we have that instance already for fintypes?</p>",
        "id": 323307022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674580270
    },
    {
        "content": "<p>Or does <code>deriving Fintype</code> not work yet?</p>",
        "id": 323307040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674580277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Modeling.20the.20Fano.20Plane/near/323266145\">said</a>:</p>\n<blockquote>\n<p>isn't there a way to present the fano plane as consisting of the nonzero points of <code>{0,1}^3</code>? (Maybe that's <code>F_2</code>.) I would imagine that using a more uniform representation like that would help to describe the different kinds of lines and points more than a 7-way enumeration</p>\n</blockquote>\n<p>Yeah, it's the projective plane over <code>zmod 2</code>. If you use Lean 3 there's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/projectivization\">docs#projectivization</a> for the points and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/projectivization.subspace\">docs#projectivization.subspace</a> for the lines in mathlib.</p>",
        "id": 323307315,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1674580346
    },
    {
        "content": "<p>Awesome, with that I now have a proof that the Fano plane is indeed a projective plane. (<code>FanoPoints</code> and <code>FanoLines</code> renamed to <code>Fano.Points</code> and <code>Fano.Lines</code>, respectively):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Fano.exists_connecting_line</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Points</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Lines</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fano.exists_intersection_point</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Lines</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Points</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Fano.triangle123</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">@</span><span class=\"n\">collinear</span> <span class=\"n\">_</span> <span class=\"n\">Lines</span> <span class=\"n\">_</span> <span class=\"n\">Points.p1</span> <span class=\"n\">Points.p2</span> <span class=\"n\">Points.p3</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">collinear</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Fano.triangle126</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">@</span><span class=\"n\">collinear</span> <span class=\"n\">_</span> <span class=\"n\">Lines</span> <span class=\"n\">_</span> <span class=\"n\">Points.p1</span> <span class=\"n\">Points.p2</span> <span class=\"n\">Points.p6</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">collinear</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Fano.triangle136</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">@</span><span class=\"n\">collinear</span> <span class=\"n\">_</span> <span class=\"n\">Lines</span> <span class=\"n\">_</span> <span class=\"n\">Points.p1</span> <span class=\"n\">Points.p3</span> <span class=\"n\">Points.p6</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">collinear</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Fano.triangle236</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">@</span><span class=\"n\">collinear</span> <span class=\"n\">_</span> <span class=\"n\">Lines</span> <span class=\"n\">_</span> <span class=\"n\">Points.p2</span> <span class=\"n\">Points.p3</span> <span class=\"n\">Points.p6</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">collinear</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Fano.quadrangle1236</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">isQuadrangle</span> <span class=\"n\">_</span> <span class=\"n\">Lines</span> <span class=\"n\">_</span> <span class=\"n\">Points.p1</span> <span class=\"n\">Points.p2</span> <span class=\"n\">Points.p3</span> <span class=\"n\">Points.p6</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Fano.triangle123</span><span class=\"o\">,</span> <span class=\"n\">Fano.triangle126</span><span class=\"o\">,</span> <span class=\"n\">Fano.triangle136</span><span class=\"o\">,</span> <span class=\"n\">Fano.triangle236</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Fano.point_line_uniq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Points</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Lines</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ProjectivePlane</span> <span class=\"n\">Points</span> <span class=\"n\">Lines</span> <span class=\"n\">where</span>\n  <span class=\"n\">exists_connecting_line</span> <span class=\"o\">:=</span> <span class=\"n\">Fano.exists_connecting_line</span>\n  <span class=\"n\">exists_intersection_point</span> <span class=\"o\">:=</span> <span class=\"n\">Fano.exists_intersection_point</span>\n  <span class=\"n\">exists_quadrangle</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">p6</span><span class=\"o\">,</span> <span class=\"n\">Fano.quadrangle1236</span><span class=\"o\">⟩</span>\n  <span class=\"n\">point_line_uniq</span> <span class=\"o\">:=</span> <span class=\"n\">Fano.point_line_uniq</span>\n</code></pre></div>\n<p>Having to spell out some of these <code>collinear</code>s and <code>quadrangle</code>s is a bit annoying, Lean can't seem to figure out that I want <code>Fano.Lines</code> as the lines type.</p>",
        "id": 323318469,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1674583404
    }
]