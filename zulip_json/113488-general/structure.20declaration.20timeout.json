[
    {
        "content": "<p>Can anyone explain what is going on with the interplay between <code>continuous_linear_map</code> and <code>prod</code> in these structure declarations? Some things seem fine, but as soon as a field in a structure includes a product of a continuous linear map with anything else, the declaration either times out, or almost does. It even does this if you pass all the arguments (including instances) to <code>continuous_linear_map</code> explicitly. Ideas appreciated. Remove the <code>#exit</code> to see what I mean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">okay₁</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">okay₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"k\">#exit</span>\n\n<span class=\"c1\">-- this is even slow with the minimal import `topology.algebra.module.basic`</span>\n<span class=\"c1\">-- moreover, it's slow even if you name all the instances and pass all arguments to</span>\n<span class=\"c1\">-- `continuous_linear_map` explicitly.</span>\n<span class=\"kd\">structure</span> <span class=\"n\">slow</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- with just a bit more type class inference, the structure above times out</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">okay₃</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">okay₄</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289547417,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1657769067
    },
    {
        "content": "<p>I'm unable to reproduce the timeout on current master; the declarations only takes a few seconds each. But in any case when you get such timeouts, <code>noncomputable!</code> should be a reasonable thing to try.</p>",
        "id": 289552214,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657775726
    }
]