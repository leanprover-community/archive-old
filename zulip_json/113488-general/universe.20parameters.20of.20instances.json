[
    {
        "content": "<p>Is this a known issue?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">cat</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"c1\">-- OK</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">cat</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">cat</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"c1\">-- Fails: &quot;invalid reference to undefined universe level parameter &#39;u_1&#39;&quot;</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127507965,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528043595
    },
    {
        "content": "<p>It is known in the sense that it is a design that's hard to work with.</p>",
        "id": 127508011,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528043680
    },
    {
        "content": "<p>It seems that the elaborator fails to gather the second universe variable of <code>cat</code></p>",
        "id": 127508012,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528043691
    },
    {
        "content": "<p>If you absolutely need to use it, you need to specify the universes as <code>cat.{u v} α</code></p>",
        "id": 127508022,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528043725
    },
    {
        "content": "<p>It makes it unpleasant to use though</p>",
        "id": 127508024,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528043738
    },
    {
        "content": "<p>That makes no difference (except the error message complains about <code>v</code> now)</p>",
        "id": 127508025,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528043746
    },
    {
        "content": "<p>I think this one is just a bug</p>",
        "id": 127508032,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528043755
    },
    {
        "content": "<p>I don't think so. Can you try <code>cat.{v u} α</code> instead?</p>",
        "id": 127508073,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528043785
    },
    {
        "content": "<p>why <code>{v u}</code>?</p>",
        "id": 127508077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528043807
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"c1\">-- Fails: &quot;invalid reference to undefined universe level parameter &#39;v&#39;&quot;</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127508082,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528043820
    },
    {
        "content": "<p>Sometimes, the order of the universes is weird</p>",
        "id": 127508083,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528043821
    },
    {
        "content": "<p><code>{v u}</code> gives many worse errors</p>",
        "id": 127508090,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528043830
    },
    {
        "content": "<p>I think if we could just, like, <code>include</code> the universe parameter <code>v</code>, then this would work</p>",
        "id": 127508093,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528043856
    },
    {
        "content": "<p>Is the error on the equality?</p>",
        "id": 127508095,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528043862
    },
    {
        "content": "<p>The error is located on the word <code>example</code></p>",
        "id": 127508096,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528043872
    },
    {
        "content": "<p>You may need <code>cat.x.{u v} α = cat.x.{u v} α</code></p>",
        "id": 127508130,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528043883
    },
    {
        "content": "<p>This here works for me:</p>\n<div class=\"codehilite\"><pre><span></span>section\nuniverses u v\nvariables {α : Type u} [cat.{u v} α]\nexample : cat.x.{u v} α = cat.x α := rfl\nend\n</pre></div>",
        "id": 127508153,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528043992
    },
    {
        "content": "<p>That does work</p>",
        "id": 127508207,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528044014
    },
    {
        "content": "<p>Can you show me an example where using two universes is necessary? Maybe I can show you a way around it</p>",
        "id": 127508220,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528044066
    },
    {
        "content": "<p>But, this also works</p>",
        "id": 127508221,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528044070
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"c1\">-- OK</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨⟩⟩⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127508223,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528044084
    },
    {
        "content": "<p>That makes sense. Every definition and theorem has an implicit list of free universe variables. The type of <code>example</code> did not mention <code>v</code> which meant that the instance of <code>cat</code> it needed was not necessarily parameterized by <code>v</code></p>",
        "id": 127508283,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528044211
    },
    {
        "content": "<p>So it really seems that the elaborator just does not understand that it ought to bind the universe variable <code>v</code></p>",
        "id": 127508285,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528044222
    },
    {
        "content": "<p>The type of <code>example</code> does mention <code>v</code> though</p>",
        "id": 127508326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528044267
    },
    {
        "content": "<p>I don't think I would say that it ought to.</p>",
        "id": 127508327,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528044276
    },
    {
        "content": "<p>Only the versions that work</p>",
        "id": 127508341,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528044325
    },
    {
        "content": "<p>No, all of them</p>",
        "id": 127508343,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528044343
    },
    {
        "content": "<p>since they are really <code>∀ {α : Type u} [_inst_1 : cat.{u v} α], ...</code></p>",
        "id": 127508344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528044353
    },
    {
        "content": "<p>Consider the other original working version, which did not use <code>variables</code></p>",
        "id": 127508386,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528044377
    },
    {
        "content": "<p>Its full inferred type is <code>ok.{u_1 u_2} : ∀ {α : Type u_1} [_inst_1 : cat.{u_1 u_2} α], cat.x.{u_1 u_2} α = cat.x.{u_1 u_2} α</code></p>",
        "id": 127508394,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528044434
    },
    {
        "content": "<p><code>v</code> does not appear in it either. It is inferred</p>",
        "id": 127508395,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528044439
    },
    {
        "content": "<p>Since it's not specified, it's found through unification. <code>v</code> starts off as a universe meta variable and <code>cat</code> and <code>cat.x</code> start off with different universe variables, we do instance resolution and then unification and then they are forced to be the same.</p>",
        "id": 127508442,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528044523
    },
    {
        "content": "<p>The the example with <code>variable</code>, the <code>cat</code> instance already has a universe so it's not inferred during elaboration</p>",
        "id": 127508453,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528044558
    },
    {
        "content": "<p>Universe polymorphism is a pretty nasty can of worms. Keep it to a minimum. <code>ulift</code> can help you with that.</p>",
        "id": 127508502,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528044629
    },
    {
        "content": "<p>I have to say I still don't really buy any of this!</p>",
        "id": 127508514,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528044703
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"c1\">-- OK</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span> <span class=\"n\">nonempty</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"bp\">⟩⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127508554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528044725
    },
    {
        "content": "<p>This is consistent with my explanation</p>",
        "id": 127508558,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528044756
    },
    {
        "content": "<p>Think of it as matching universe levels by name.</p>",
        "id": 127508570,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528044817
    },
    {
        "content": "<p>FWIW, this is the full error message with the failing version</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">kernel</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">type</span> <span class=\"kn\">check</span> <span class=\"n\">declaration</span> <span class=\"err\">&#39;</span><span class=\"n\">test&#39;</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"n\">usually</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">buggy</span> <span class=\"n\">tactic</span> <span class=\"n\">or</span> <span class=\"n\">a</span> <span class=\"n\">bug</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">builtin</span> <span class=\"n\">elaborator</span>\n<span class=\"n\">elaborated</span> <span class=\"n\">type</span><span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n    <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">β</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n<span class=\"n\">elaborated</span> <span class=\"n\">value</span><span class=\"o\">:</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"bp\">@</span><span class=\"n\">rfl</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">β</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"n\">undefined</span> <span class=\"kn\">universe</span> <span class=\"n\">level</span> <span class=\"kn\">parameter</span> <span class=\"err\">&#39;</span><span class=\"n\">v&#39;</span>\n</pre></div>",
        "id": 127508627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528044945
    },
    {
        "content": "<p>In <code>cat.x</code> we don't what the universes will be so they start off as meta variables. <code>α</code> brings in universe <code>u</code> and <code>γ</code> brings in <code>v</code></p>",
        "id": 127508628,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528044960
    },
    {
        "content": "<p>So why doesn't the instance resolution of <code>cat.x</code> bring in <code>v</code>?</p>",
        "id": 127508668,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528045006
    },
    {
        "content": "<p>Because its <code>v</code> is a local <code>v</code> to the class.</p>",
        "id": 127508674,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528045075
    },
    {
        "content": "<p>It's using this variable <code>_inst_1</code> whose type mentions <code>v</code>, and when I make it use the variables <code>γ</code> and <code>y</code> then it understands that it should bring in <code>v</code>.</p>",
        "id": 127508714,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528045089
    },
    {
        "content": "<p>I just tried:</p>\n<div class=\"codehilite\"><pre><span></span>universes u v\n\nclass cat (α : Type u) :=\n(β : Type v)\n(x : β)\n</pre></div>\n\n\n<p>and that doesn't work either. That's weird</p>",
        "id": 127508717,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528045102
    },
    {
        "content": "<p>Ok, I'm not sure now. Maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> or <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> can come clear this up</p>",
        "id": 127508727,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528045163
    },
    {
        "content": "<p>I guess it cannot \"see\" the dependence on the <code>variable</code> which was used through instance resolution as easily as it can see a direct reference</p>",
        "id": 127508833,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528045407
    },
    {
        "content": "<p>Or, here is another way to look at it. Intuitively, I expect <code>variables &lt;bindings&gt;</code> to prepend <code>&lt;bindings&gt;</code> to the parameters of every definition/lemma. Well that's not quite true, I only expect bindings that are used somehow to get prepended.</p>",
        "id": 127508981,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528045727
    },
    {
        "content": "<p>Here lean obviously understands that it needs to include the <code>cat</code> instance, since otherwise there would be an error earlier about <code>cat.x</code>. But, if I just manually prepend both variables, as in the first example, then it works fine.</p>",
        "id": 127508987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528045767
    },
    {
        "content": "<p>aha, here is another workaround!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">cat</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">inst</span>\n<span class=\"c1\">-- OK</span>\n<span class=\"n\">def</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">cat</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127509033,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528045826
    },
    {
        "content": "<p>not very surprising that that works, but certainly a palatable workaround. Actually, this could nicely solve my \"upgrading\" type class issue too. Just name both instances as variables and then <code>include</code> the one you want at any given time and <code>hide</code> it when done.</p>",
        "id": 127509248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528046303
    },
    {
        "content": "<p>Thanks for the interesting discussion here! I've absolutely run into this in my category theory library. Unfortunately, universe issues are a pain. Unavoidably, one needs to be able to discuss \"small_category\", where objects and morphisms live in the same universe, and \"large_category\", where objects live in a universe one higher than the morphisms.</p>",
        "id": 127520290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528070597
    },
    {
        "content": "<p>Rather than develop these in parallel (and deal with the combinatorial explosion of functors and natural transformations going between the worlds), I've settled on the somewhat ugly solution of having a single \"category\", with</p>",
        "id": 127520333,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528070643
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>abbreviation large_category (C : Type (u+1)) : Type (u+1) := category.{u+1 u} C\nabbreviation small_category (C : Type u)     : Type (u+1) := category.{u u} C\n</pre></div>",
        "id": 127520339,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528070670
    },
    {
        "content": "<p>If you're only dealing with small or large categories (or even one of each at the same time), everything works nicely, and typeclass inference remains your friend.</p>",
        "id": 127520354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528070733
    },
    {
        "content": "<p>If you're trying to write library code that covers both cases, it is slightly ugly, and we need to specify universes explicitly and do a certain amount of \"including\" typeclass instances.</p>",
        "id": 127520378,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528070762
    },
    {
        "content": "<p>As you might have guessed, <code>cat</code> stands for your <code>category</code> class.<br>\nIn my so far limited use, I haven't had any issues just using <code>category</code> directly where mathematically reasonable, aside from the issue discussed in this topic, which I now have a workaround for.</p>",
        "id": 127520399,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528070784
    },
    {
        "content": "<p>I have to write:</p>\n<div class=\"codehilite\"><pre><span></span>variable {C : Type u₁}\nvariable [𝒞 : category.{u₁ v₁} C]\nvariable {D : Type u₂}\nvariable [𝒟 : category.{u₂ v₂} D]\ninclude 𝒞 𝒟\n</pre></div>",
        "id": 127520400,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528070790
    },
    {
        "content": "<p>quite often!</p>",
        "id": 127520402,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528070794
    },
    {
        "content": "<p>Aha, so you already discovered the <code>include</code> workaround I guess.</p>",
        "id": 127520406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528070810
    },
    {
        "content": "<p>(But that said, that's usually as ugly as it gets, and after those includes everything works pretty naturally.)</p>",
        "id": 127520411,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528070830
    },
    {
        "content": "<p>Here's another, admittedly silly workaround for the issue here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">Type₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Type₂</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>Now the type of <code>C</code> mentions <code>v</code>, so the elaborator correctly includes <code>v</code></p>",
        "id": 127559852,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528138220
    },
    {
        "content": "<p>Hi, I am new in lean programming. I am attending to Hanoi FABS summer school 2018 and really interested in doing. <br>\nMy homework is formalizing the statement of Polignac Conjecture: <strong>For every even number 2n, there are infinitely many pairs of consecutive primes which differ by 2n.</strong><br>\nI have formalized and wonder regarding that: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Polignac</span> <span class=\"o\">:</span><span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">isEven</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">isPrime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">isPrime</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I need your help!</p>",
        "id": 127779348,
        "sender_full_name": "Thang Nguyen",
        "timestamp": 1528473542
    },
    {
        "content": "<p>Can you be a bit more specific? Why do you wonder about that definition? Or more precisely, what is giving you trouble about that definition?</p>",
        "id": 127779506,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528473726
    },
    {
        "content": "<p>It would be easier to actually use n as in the informal statement (and write <code>2*n</code> where you want 2n</p>",
        "id": 127779510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528473732
    },
    {
        "content": "<p>And the disjunction at the end is unnecessary</p>",
        "id": 127779524,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528473751
    },
    {
        "content": "<p>Note also that your attempt says nothing about p and q being consecutive</p>",
        "id": 127779645,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528473918
    },
    {
        "content": "<p>I need to define the statement of Polignac Conjecture. And I defined it and dont know that is okay.</p>",
        "id": 127779806,
        "sender_full_name": "Thang Nguyen",
        "timestamp": 1528474102
    },
    {
        "content": "<blockquote>\n<p>Note also that your attempt says nothing about p and q being consecutive</p>\n</blockquote>\n<p>so how to fix to p q consecutive</p>",
        "id": 127779824,
        "sender_full_name": "Thang Nguyen",
        "timestamp": 1528474174
    },
    {
        "content": "<p>What you wrote is not the correct statement, even assuming isEven and isPrime are defined</p>",
        "id": 127779871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528474203
    },
    {
        "content": "<p>You'd need to say every number between <code>p</code> and <code>q</code> is not prime. Using a different definition for that may be best</p>",
        "id": 127779910,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528474276
    },
    {
        "content": "<p>You could add a condition that no natural number between p and q (p and q excluded) is prime</p>",
        "id": 127779911,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528474278
    },
    {
        "content": "<p>And you don't need to have a notation for q</p>",
        "id": 127779916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528474292
    },
    {
        "content": "<p>You really want <code>n</code>, a prime <code>p</code> and asserting that <code>p+2*n</code> is also prime</p>",
        "id": 127779926,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528474317
    },
    {
        "content": "<p>and there is no prime number in between</p>",
        "id": 127779968,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528474335
    },
    {
        "content": "<p>That is correct?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Polignac</span> <span class=\"o\">:</span><span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">isPrime</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 127780320,
        "sender_full_name": "Thang Nguyen",
        "timestamp": 1528474836
    },
    {
        "content": "<p>No, it's not</p>",
        "id": 127782321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528477677
    },
    {
        "content": "<p>today I learned about <a href=\"https://en.wikipedia.org/wiki/Sexy_prime\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Sexy_prime\">https://en.wikipedia.org/wiki/Sexy_prime</a></p>",
        "id": 127785046,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528480999
    },
    {
        "content": "<p>I learned that when I got married: our age is 6 apart and both of our ages were prime numbers. It's probably partly responsible for my saying yes</p>",
        "id": 127785119,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528481098
    },
    {
        "content": "<p>(23, 29)?</p>",
        "id": 127786525,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528482820
    },
    {
        "content": "<p>(31,37)</p>",
        "id": 127786669,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528482963
    },
    {
        "content": "<p>Going back to his question, I feel like you would want to define a prime gap counting function, as in wikipedia (the number of prime gaps of size n below x). Then you take the limit as x goes to infinity. Is that a standard way to formalize it?</p>",
        "id": 127787334,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528483872
    },
    {
        "content": "<p>Given <code>k</code>the size of the gaps, I would write: <code>\\forall n, \\ex p, p &gt; n \\and is_prime_gap p k</code></p>",
        "id": 127787405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528483965
    },
    {
        "content": "<p>And then you need to express that <code>p</code> and <code>p+k</code> have a prime gap of size <code>k</code> in <code>is_prime_gap p k : Prop</code></p>",
        "id": 127787438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528484010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117668\">@Thang Nguyen</span>, just a suggestion --- in zulipchat you can set the \"topic\" name for a conversation, and it helps organise the conversation here a lot! For example, this one could have been \"help with a statement about primes\".</p>",
        "id": 127889246,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528706316
    }
]