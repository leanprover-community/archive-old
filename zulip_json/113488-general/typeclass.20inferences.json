[
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/enough_injectives.lean#L72\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/enough_injectives.lean#L72\">https://github.com/kckennylau/Lean/blob/master/enough_injectives.lean#L72</a><br>\nIn L72 of this, I needed to type <code>@linear_map R M (Hom_R_Q_div_Z R) _ _ (Hom_R_Q_div_Z.module R)</code>, i.e. I needed to manually provide the proof term <code>Hom_R_Q_div_Z.module R</code> that <code>Hom_R_Q_div_Z R</code> is a module, despite it being attributed as <code>instance</code>. Why is this the case?</p>",
        "id": 124695237,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522970629
    },
    {
        "content": "<p>When faced with this problem, I often try to write an example beforehand, which hopefully should summon the instance via <code>by apply_instance</code>, and see if I can get that working.</p>",
        "id": 124695367,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522970859
    },
    {
        "content": "<p>If I can't I start worrying about universe levels, which in my experience is a very common cause of typeclass inference failing.</p>",
        "id": 124695372,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522970878
    },
    {
        "content": "<p>(I haven't actually looked at your example.)</p>",
        "id": 124695410,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522970885
    },
    {
        "content": "<p>Having quickly looked at your example, I'd suggest trying to restrict to the case where the ring and the module live in the same universe.</p>",
        "id": 124695678,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522971448
    },
    {
        "content": "<p>hmm, would that break generality?</p>",
        "id": 124695682,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522971476
    },
    {
        "content": "<p><code>linear_map</code> accepts three universes</p>",
        "id": 124695722,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522971498
    },
    {
        "content": "<p>Yeah... but that's maybe dangerous as well.</p>",
        "id": 124695723,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522971516
    },
    {
        "content": "<p>so other universes don't have enough injectives lol</p>",
        "id": 124695729,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522971533
    },
    {
        "content": "<p>at least check if this solves the inference problem</p>",
        "id": 124695730,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522971541
    },
    {
        "content": "<p>If it doesn't then it's irrelevant. If it does, it's probably time to consult Mario for advice.</p>",
        "id": 124695735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522971557
    },
    {
        "content": "<p>(One can always <code>ulift</code> when you don't have enough universe polymorphism, and sometimes this is the better option.)</p>",
        "id": 124695736,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522971582
    },
    {
        "content": "<p>it doesn't</p>",
        "id": 124695738,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522971591
    },
    {
        "content": "<p>Oh well!</p>",
        "id": 124695782,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522971605
    },
    {
        "content": "<p>try replacing the points where you explicitly provide the instances with <code>by apply_instance</code>, and then set <code>pp.all</code></p>",
        "id": 124695794,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522971650
    },
    {
        "content": "<p>wait what</p>",
        "id": 124695869,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522971789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> once I removed L67-69, everything worked</p>",
        "id": 124695981,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522971992
    },
    {
        "content": "<p>except the fact that i of course need those lines</p>",
        "id": 124695982,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522971997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> any idea? In <a href=\"https://github.com/kckennylau/Lean/blob/master/enough_injectives.lean#L72\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/enough_injectives.lean#L72\">here</a>, I need <code> Hom_R_Q_div_Z.module R </code> to tell Lean that <code> Hom_R_Q_div_Z R </code> is a module, but once I remove L67-69, it is no longer necessary</p>",
        "id": 124697691,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522975541
    },
    {
        "content": "<p>I suspect it is because of the <code> injective.to_module </code></p>",
        "id": 124697743,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522975588
    },
    {
        "content": "<p>interfering with the typeclass resolutions</p>",
        "id": 124697747,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522975600
    }
]