[
    {
        "content": "<p>I seem to not understand universes properly, or more precisely how to use them properly. I ran into the following issue with some code:</p>",
        "id": 124734232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523042886
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"c1\">-- error</span>\n  <span class=\"n\">admit</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 124734247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523042916
    },
    {
        "content": "<p>The error was</p>",
        "id": 124734249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523042924
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  bar β\nterm\n  β\nhas type\n  Type u_3 : Type (u_3+1)\nbut is expected to have type\n  Type u_2 : Type (u_2+1)\nstate:\nX : Type u_1,\nbar : foo X,\nβ : Type u_3\n⊢ true\n</pre></div>",
        "id": 124734254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523042937
    },
    {
        "content": "<p>I figured I'd investigate more, so I next wrote this:</p>",
        "id": 124734270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523042977
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">x</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">universes</span> <span class=\"n\">true</span>\n<span class=\"kn\">definition</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"n\">true</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">baz&#39;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar&#39;</span> <span class=\"o\">:</span> <span class=\"n\">foo&#39;</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">bar&#39;</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"c1\">-- error</span>\n  <span class=\"n\">admit</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 124734321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043013
    },
    {
        "content": "<p>and this time I got</p>",
        "id": 124734337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043039
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  bar&#39; β\nterm\n  β\nhas type\n  Type x : Type (x+1)\nbut is expected to have type\n  Type u_1 : Type (u_1+1)\nstate:\nX : Type w,\nbar&#39; : foo&#39;.{w u_1} X,\nβ : Type x\n⊢ true\n</pre></div>",
        "id": 124734344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043044
    },
    {
        "content": "<p>This made me realise that I didn't understand what was going on, because there is still this universe <code>u_1</code> mentioned, even though I thought I'd just explicitly written down what universe everything was in.</p>",
        "id": 124734362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043077
    },
    {
        "content": "<p>In particular, <code>bar'</code> seems to mention this universe <code>u_1</code> and I'm not sure where this universe got involved.</p>",
        "id": 124734377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043112
    },
    {
        "content": "<p>Some experimentation led me to something which worked:</p>",
        "id": 124734425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043131
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">foo&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">baz&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">foo&#39;&#39;</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">bar&#39;&#39;</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 124734429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043140
    },
    {
        "content": "<p>i.e. \"keep X and beta in the same universe and you'll be fine\"</p>",
        "id": 124734435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043160
    },
    {
        "content": "<p>But this raises two questions for me:</p>",
        "id": 124734441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043177
    },
    {
        "content": "<p>1) why wasn't I fine before?</p>",
        "id": 124734444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043185
    },
    {
        "content": "<p>2) Will this fix cause me problems later?</p>",
        "id": 124734450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043197
    },
    {
        "content": "<p>In reality, X is a topological space and it is covered by open sets <code>U i</code> where each <code>i</code> has type <code>beta</code></p>",
        "id": 124734513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043256
    },
    {
        "content": "<p>that is, <code>U : beta -&gt; set X</code></p>",
        "id": 124734523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043283
    },
    {
        "content": "<p>My instinct is always to just let everything live in different universes because who cares about universes anyway, that's the joy of type theory</p>",
        "id": 124734570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043360
    },
    {
        "content": "<p>In ZFC I would just let X and beta be in Type</p>",
        "id": 124734615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043381
    },
    {
        "content": "<p>but that might be a bridge too far</p>",
        "id": 124734623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043388
    },
    {
        "content": "<p>When you defined <code>foo</code>, it had two universe parameters, corresponding to the two <code>Type*</code> instances</p>",
        "id": 124734636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043405
    },
    {
        "content": "<p>what does that even mean</p>",
        "id": 124734672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043452
    },
    {
        "content": "<p>foo is a thing</p>",
        "id": 124734676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043459
    },
    {
        "content": "<p>and it has a type</p>",
        "id": 124734677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043460
    },
    {
        "content": "<p>which lives in a universe</p>",
        "id": 124734681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043464
    },
    {
        "content": "<p>it is universe polymorphic</p>",
        "id": 124734686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043470
    },
    {
        "content": "<p>Think of it as being implicitly a forall over the universe variables</p>",
        "id": 124734733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043488
    },
    {
        "content": "<p>except that lean has no universe variable binders, so it's all just free variables and substitution</p>",
        "id": 124734745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043527
    },
    {
        "content": "<p><code>foo'</code> mentions a universe I don't even see</p>",
        "id": 124734749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043532
    },
    {
        "content": "<p>or at least something mentions this universe</p>",
        "id": 124734760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043549
    },
    {
        "content": "<p><code>foo</code> and <code>foo'</code> are the same</p>",
        "id": 124734763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043550
    },
    {
        "content": "<p>wait</p>",
        "id": 124734774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043562
    },
    {
        "content": "<p>are they exactly the same?</p>",
        "id": 124734777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043565
    },
    {
        "content": "<p>except <code>foo'</code> is more explicit about the two universe variables, <code>u</code> and <code>v</code></p>",
        "id": 124734780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043568
    },
    {
        "content": "<p>Should I think that <code>foo'</code> is really \"for all universes u, ...\"</p>",
        "id": 124734790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043587
    },
    {
        "content": "<p>yes, they are exactly the same as far as lean is concerned</p>",
        "id": 124734791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043587
    },
    {
        "content": "<p>yes. All universe polymorphic functions are like this</p>",
        "id": 124734842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043605
    },
    {
        "content": "<p>like when I make variables and then secretly I am writing \"for all v...\"</p>",
        "id": 124734852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043623
    },
    {
        "content": "<p>exactly</p>",
        "id": 124734853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043629
    },
    {
        "content": "<p>But where is this <code>u_1</code> coming from?</p>",
        "id": 124734858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043644
    },
    {
        "content": "<p>Didn't I name all my universes with <code>foo'</code>?</p>",
        "id": 124734860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043652
    },
    {
        "content": "<p><code>foo'</code> has two universe variables, named <code>u</code> and <code>v</code> in the definition, but since it's like a forall, whenever you use it these variables can be substituted for other things</p>",
        "id": 124734877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043696
    },
    {
        "content": "<p>gotcha</p>",
        "id": 124734880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043703
    },
    {
        "content": "<p>So <code>foo'</code> is <code>for all universes u and v, [what I wrote]</code></p>",
        "id": 124734925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043733
    },
    {
        "content": "<p>so why do I get a problem?</p>",
        "id": 124734930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043743
    },
    {
        "content": "<p>why can't we just do universe unification or something?</p>",
        "id": 124734932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043755
    },
    {
        "content": "<p><code>u_1</code> is the name of a universe variable in <code>baz'</code>, since you reference <code>foo' X</code> which only fixes its first parameter by unification, lean invents a second variable <code>u_1</code> so it becomes <code>bar' : foo'.{w u_1} X</code></p>",
        "id": 124734940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043775
    },
    {
        "content": "<p>aah</p>",
        "id": 124734953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043795
    },
    {
        "content": "<p>yes I just independently realised this</p>",
        "id": 124734955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043805
    },
    {
        "content": "<p>But now <code>bar'</code> should be \"for all universes u_1, ...\"</p>",
        "id": 124734965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043830
    },
    {
        "content": "<p>it is</p>",
        "id": 124735011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043849
    },
    {
        "content": "<p><code>bar'.{w x u_1}</code> has type <code>forall (X : Type w) (bar' : foo'.{w u_1} X) (β : Type x), true</code></p>",
        "id": 124735027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043882
    },
    {
        "content": "<p>And since <code>u_1</code> and <code>x</code> are separate universe variables being generalized, inside the proof you can't assume they are equal</p>",
        "id": 124735048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043917
    },
    {
        "content": "<p>so <code>bar' β</code> is a type error since <code>bar'</code> accepts a <code>Type u_1</code></p>",
        "id": 124735061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043947
    },
    {
        "content": "<p>OK so you have convinced me that the underlying way that universes work mean that my initial attempts should not work.</p>",
        "id": 124735108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523043988
    },
    {
        "content": "<p>So now the question is should I try to re-arrange things to make them work?</p>",
        "id": 124735113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523044003
    },
    {
        "content": "<p>just write <code>foo'.{w x}</code> instead of <code>foo'</code> in the type of <code>bar'</code></p>",
        "id": 124735122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523044023
    },
    {
        "content": "<p>Or should I go down the \"might bite me later and I have no understanding as to whether it will\" route of letting all universes be u</p>",
        "id": 124735127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523044028
    },
    {
        "content": "<p>aah, oh great, so I can do what I want to do.</p>",
        "id": 124735130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523044039
    },
    {
        "content": "<p>In general, I try to avoid types with \"internal universe variables\" like <code>foo'</code> here, which has a forall whose universe is not constrained by the input parameters</p>",
        "id": 124735186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523044087
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span>  <span class=\"n\">foo&#39;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">theorem</span>  <span class=\"n\">baz&#39;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar&#39;</span> <span class=\"o\">:</span> <span class=\"n\">foo&#39;</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">bar&#39;</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"c1\">-- works :-)</span>\n<span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 124735198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523044106
    },
    {
        "content": "<p>I need to think about the last thing you said</p>",
        "id": 124735206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523044129
    },
    {
        "content": "<p>that means to prefer <code>def foo' (X : Type u) := ∀ (β : Type u), true</code> over <code>def foo' (X : Type u) := ∀ (β : Type v), true</code></p>",
        "id": 124735215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523044157
    },
    {
        "content": "<p>because this is a massively minimised thing and in reality I will have to decide whether I can try to avoid the thing you want me to avoid</p>",
        "id": 124735219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523044162
    },
    {
        "content": "<p>Thanks a lot for the fix and the advice though.</p>",
        "id": 124735225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523044190
    },
    {
        "content": "<p>How do I know whether the thing you prefer will be safe for me?</p>",
        "id": 124735281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523044264
    },
    {
        "content": "<p>hmm, I need to go and feed children</p>",
        "id": 124735290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523044274
    },
    {
        "content": "<p>thanks</p>",
        "id": 124735295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523044277
    },
    {
        "content": "<p>It is slightly less universe parametric (it requires that two variables be the same), so you may need extra <code>ulift</code>s around, which may or may not be better than the often required <code>.{w x}</code> stuff that arises with this approach</p>",
        "id": 124735417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523044475
    },
    {
        "content": "<p>Generally you will have to be \"universe conscious\" when working with definitions with internal universe variables - lots of things will require annotation. <code>cardinal</code>, <code>ordinal</code>, and <code>Set</code> (the ZFC sets) are like this</p>",
        "id": 124735479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523044565
    },
    {
        "content": "<p><code>category</code> may also be, this exact thing was a point of discussion with Scott a few weeks ago</p>",
        "id": 124735490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523044612
    },
    {
        "content": "<p>What is happening here:</p>",
        "id": 126942604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020043
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">scheme</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">scheme_of_affine_scheme</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">scheme</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"c1\">-- universe issue</span>\n<span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n\n<span class=\"cm\">type mismatch at field &#39;β&#39;</span>\n<span class=\"cm\">  R</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Type u : Type (u+1)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type u_1 : Type (u_1+1)</span>\n\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 126942641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020048
    },
    {
        "content": "<p>Seems to me that scheme has decided that it wants to live in a different universe to beta and R</p>",
        "id": 126942655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020089
    },
    {
        "content": "<p>oh</p>",
        "id": 126942656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020091
    },
    {
        "content": "<p>heh</p>",
        "id": 126942657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020092
    },
    {
        "content": "<p>ignore the irrelevant names</p>",
        "id": 126942661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020100
    },
    {
        "content": "<p>If I change theorem to definition, it works</p>",
        "id": 126942676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020130
    },
    {
        "content": "<p>And this works too:</p>",
        "id": 126942682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020156
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">scheme_of_affine_scheme</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">scheme</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"c1\">-- works</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 126942700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020163
    },
    {
        "content": "<p>OK so maybe the answer is simply \"don't use theorem to define something which isn't a Prop\"</p>",
        "id": 126942731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020192
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">scheme_of_affine_scheme</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">scheme</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"c1\">-- works</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 126942856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020360
    },
    {
        "content": "<p>I guess I don't understand what's going on, but on the other hand I can see I was doing something dumb.</p>",
        "id": 126942867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020385
    },
    {
        "content": "<p>This gives some small insight.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">universes</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">scheme_of_affine_scheme</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">scheme</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">-- R : Type u</span>\n<span class=\"c1\">-- ⊢ scheme.{?l_1}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">scheme_of_affine_scheme</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">scheme</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">-- R : Type u</span>\n<span class=\"c1\">-- ⊢ scheme.{u_1}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126943048,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527020557
    },
    {
        "content": "<p>Aah so in the first case scheme is in some universe and Lean isn't too fussed, it will decide later</p>",
        "id": 126943257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020881
    },
    {
        "content": "<p>but in the second case Lean decided to go for it and make a decision</p>",
        "id": 126943303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020891
    },
    {
        "content": "<p>because it's a lemma so the universe is supposed to be Prop</p>",
        "id": 126943307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020900
    },
    {
        "content": "<p>and it wasn't Prop so Lean panicked</p>",
        "id": 126943312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527020915
    },
    {
        "content": "<p>The lemma <code>card_univ</code> below does not work without the <code>.{u}</code> in the <code>fintype</code> instance</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">fintype</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv_univ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">card_univ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]:</span>\n  <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card_congr</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">equiv_univ</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>The following do not work.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">universes</span> <span class=\"n\">true</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">card_univ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]:</span>\n  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">card_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv_univ</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>Gives the error</p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nα : Type u,\n_inst_1 : fintype.{u} α,\n_inst_2 : fintype.{?l_1} ↥univ.{u}\n⊢ fintype.{u} ↥univ.{u}\n</pre></div>\n\n\n<p>and  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">universes</span> <span class=\"n\">true</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">card_univ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]:</span>\n  <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card_congr</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">equiv_univ</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>Gives the error</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  card_congr.{u u_1} (equiv_univ.{u} α)\nterm\n  equiv_univ.{u} α\nhas type\n  equiv.{u+1 (max 1 (u+1))} α\n    (@coe_sort.{(max (u+1) 1) (max 1 (u+1))+1} (set.{u} α) (@set.has_coe_to_sort.{u} α) (@set.univ.{u} α)) : Type u\nbut is expected to have type\n  equiv.{u+1 u_1+1} α\n    (@coe_sort.{(max (u+1) 1) (max 1 (u+1))+1} (set.{u} α) (@set.has_coe_to_sort.{u} α)\n       (@set.univ.{u} α)) : Type (max (max u u_1) u_1 u)\n</pre></div>\n\n\n<p>What's going on here? And will the <code>.{u}</code> in the fintype instance make the lemma more difficult to use. It worked in my application, but will it always work?</p>",
        "id": 127406709,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527843156
    },
    {
        "content": "<blockquote>\n<p>And will the .{u} in the fintype instance make the lemma more difficult to use.</p>\n</blockquote>\n<p>No, not at all.  It is the only possible choice, the elaborator just can't figure it out for whatever reason.</p>",
        "id": 127406993,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1527843666
    },
    {
        "content": "<p>(The universe parameter <code>.{u}</code> is always there, whether you write it explicitly or not.)</p>",
        "id": 127407052,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1527843782
    }
]