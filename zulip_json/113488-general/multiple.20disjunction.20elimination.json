[
    {
        "content": "<p>If you have multiple hypotheses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span>\n<span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">p'</span> <span class=\"bp\">∨</span> <span class=\"n\">q'</span>\n<span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">p''</span> <span class=\"bp\">∨</span> <span class=\"n\">q''</span>\n</code></pre></div>\n<p>how would I combine them into a disjunction of conjuncts <code>(p ∧ p' ∧ p'') ∨ ...</code>? And how do you eliminate such a large disjuction? I hope I won't have to resort to writing deeply nested code.</p>",
        "id": 263769762,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638712754
    },
    {
        "content": "<p>One way to do it is to use the <code>;</code> combinator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h''</span> <span class=\"bp\">|</span> <span class=\"n\">h''</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h''</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 263770716,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638714146
    },
    {
        "content": "<p>another option is to use... the <code>tauto</code> tactic! for simple 1st order logic goals, <code>tauto</code> is great <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 263770902,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638714442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/multiple.20disjunction.20elimination/near/263770716\">said</a>:</p>\n<blockquote>\n<p>One way to do it is to use the <code>;</code> combinator:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h''</span> <span class=\"bp\">|</span> <span class=\"n\">h''</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h''</span><span class=\"o\">,</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don't understand that syntax. Is there a how-to or a tutorial explaining how to do this?</p>",
        "id": 263771120,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638714744
    },
    {
        "content": "<p>Another way is to use <code>all_goals</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">split_three_ors</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"n\">p''</span> <span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"n\">q''</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">p'</span> <span class=\"bp\">∨</span> <span class=\"n\">q'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">p''</span> <span class=\"bp\">∨</span> <span class=\"n\">q''</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p'</span> <span class=\"bp\">∧</span> <span class=\"n\">p''</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p'</span> <span class=\"bp\">∧</span> <span class=\"n\">q''</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n   <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q'</span> <span class=\"bp\">∧</span> <span class=\"n\">p''</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q'</span> <span class=\"bp\">∧</span> <span class=\"n\">q''</span><span class=\"o\">))</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p'</span> <span class=\"bp\">∧</span> <span class=\"n\">p''</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p'</span> <span class=\"bp\">∧</span> <span class=\"n\">q''</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n   <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">q'</span> <span class=\"bp\">∧</span> <span class=\"n\">p''</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">q'</span> <span class=\"bp\">∧</span> <span class=\"n\">q''</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- `tauto` probably works but is _very_ slow,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">],</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">h''</span> <span class=\"bp\">|</span> <span class=\"n\">h''</span> <span class=\"o\">:=</span> <span class=\"n\">h''</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">⟩}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263771314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638715018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416322\">Bernd Losert</span> <a href=\"#narrow/stream/113488-general/topic/multiple.20disjunction.20elimination/near/263771120\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/multiple.20disjunction.20elimination/near/263770716\">said</a>:</p>\n<blockquote>\n<p>One way to do it is to use the <code>;</code> combinator:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h''</span> <span class=\"bp\">|</span> <span class=\"n\">h''</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h''</span><span class=\"o\">,</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don't understand that syntax. Is there a how-to or a tutorial explaining how to do this?</p>\n</blockquote>\n<p>this is the ultimate guide on tactics <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a>. <code>;</code> is a tactic combinator and you can read about tactic combinators here <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#tactic-combinators\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html#tactic-combinators</a></p>",
        "id": 263771328,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638715040
    },
    {
        "content": "<p>The other thing to note is that <code>|</code> is part of the <code>obtain</code> syntax, which is the same as its meaning in <code>rcases</code> and <code>rintro</code></p>",
        "id": 263771417,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638715172
    },
    {
        "content": "<p>Thanks guys. I'll grep mathlib to find examples that I can copy/paste.</p>",
        "id": 263771609,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638715477
    },
    {
        "content": "<p>Also, <code>obtain</code> supports multiple destruction like so: <code>obtain ⟨h | h, h' | h', h'' | h''⟩ := ⟨h, h', h''⟩</code>. Thus:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">split_three_ors</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"n\">p''</span> <span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"n\">q''</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">p'</span> <span class=\"bp\">∨</span> <span class=\"n\">q'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">p''</span> <span class=\"bp\">∨</span> <span class=\"n\">q''</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p'</span> <span class=\"bp\">∧</span> <span class=\"n\">p''</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p'</span> <span class=\"bp\">∧</span> <span class=\"n\">q''</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n   <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q'</span> <span class=\"bp\">∧</span> <span class=\"n\">p''</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q'</span> <span class=\"bp\">∧</span> <span class=\"n\">q''</span><span class=\"o\">))</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p'</span> <span class=\"bp\">∧</span> <span class=\"n\">p''</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p'</span> <span class=\"bp\">∧</span> <span class=\"n\">q''</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n   <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">q'</span> <span class=\"bp\">∧</span> <span class=\"n\">p''</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">q'</span> <span class=\"bp\">∧</span> <span class=\"n\">q''</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h''</span> <span class=\"bp\">|</span> <span class=\"n\">h''</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263812673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638771816
    },
    {
        "content": "<p>Regarding <code>tauto</code> being slow: I am not sure why, this is a fairly trivial problem. <code>itauto</code> is quite fast on this problem</p>",
        "id": 263812798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638771976
    },
    {
        "content": "<p><code>tauto</code> doesn't seem to work for me with <code>split_three_ors</code>, but <code>finish</code> does work (somewhat slowly)</p>",
        "id": 263812837,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638772052
    },
    {
        "content": "<p>(<code>itauto</code> also produces exactly the proof term you would write by hand, which I like to see)</p>",
        "id": 263812850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638772080
    },
    {
        "content": "<p>Mario, does the <code>⟨h, h', h''⟩</code> there create an <code>and</code> term? Or is it special  notation that obtain parses directly?</p>",
        "id": 263819818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638779218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> It is special notation. (That notation would never parse normally, since the expected type is not known.) <code>rcases</code> is mutually recursive with a variation called <code>rcases_many</code> which handles many patterns at once (you need this to handle the list of subpatterns once you match a given n-ary pattern), and this is the surface level syntax to call <code>rcases_many</code> directly.</p>",
        "id": 263833646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638788126
    },
    {
        "content": "<p>You can also do <code>cases_matching* [_ ∨ _],</code></p>",
        "id": 263896034,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1638815828
    }
]