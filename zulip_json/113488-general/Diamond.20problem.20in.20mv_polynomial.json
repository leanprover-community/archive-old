[
    {
        "content": "<p>I'm running into problems trying to use theorems about <code>polynomial (mv_polynomial (fin n) R)</code> when <code>R</code> is a <code>comm_ring</code> instead of just a <code>comm_semiring</code>. The issue seems to be that the semiring instance inferred on <code>mv_polynomial (fin n) R</code> is different depending on the context of the terms, and these instances aren't definitionally equal. This should be a mwe of the type of thing I'm running into:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.equiv</span>\n<span class=\"c1\">-- The issue only appears if `ring_theory.polynomial.basic` has been imported</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- This instance is what is synthesized in the polynomial in the goal</span>\n  <span class=\"c1\">-- let sr2 : semiring (mv_polynomial (fin n) R) := ring.to_semiring,</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial.option_equiv_left</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- This instance is what is synthesized in the above expression</span>\n  <span class=\"c1\">-- let sr1 : semiring (mv_polynomial (fin n) R) := comm_semiring.to_semiring,</span>\n\n  <span class=\"c1\">-- the below expression times out, unless `hR` is replaced with `comm_semiring R`</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I've found a couple work-arounds for the specific use cases I have, but they seem like hacks and I feel there should probably be a better solution for this.</p>",
        "id": 221022295,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609101330
    },
    {
        "content": "<p>Is something marked <code>irreducible</code> here? Perhaps <code>mv_polynomial</code> or <code>polynomial</code>?</p>",
        "id": 221023651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609103852
    },
    {
        "content": "<p>It doesn't seem like anything is irreducible as far as I can tell, both definitions are just in terms of <code>finsupp</code>, but I'm not sure how to check for sure</p>",
        "id": 221024329,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609105014
    },
    {
        "content": "<p>So the code runs without error without the second import?</p>",
        "id": 221024391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609105166
    },
    {
        "content": "<p>Yes, I think you can go a step further and only import <code>data.mv_polynomial.comm_ring</code> and get the same error, since that is what gives the <code>comm_ring</code> instance on <code>mv_polynomial</code>, which I think is what gives the distinct <code>semiring</code> structure on the <code>mv_polynomial</code></p>",
        "id": 221024493,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609105348
    },
    {
        "content": "<p>I would guess this line causes the trouble: <a href=\"https://github.com/leanprover-community/mathlib/blob/5c8c122226776201eba48f45a991e86084d77375/src/ring_theory/polynomial/basic.lean#L32\">https://github.com/leanprover-community/mathlib/blob/5c8c122226776201eba48f45a991e86084d77375/src/ring_theory/polynomial/basic.lean#L32</a></p>",
        "id": 221024553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609105456
    },
    {
        "content": "<p>But yes if <code>data.mv_polynomial.equiv</code> is the only import then there isn't any issue</p>",
        "id": 221024556,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609105457
    },
    {
        "content": "<p>I would guess this line causes the trouble: <del>https://github.com/leanprover-community/mathlib/blob/5c8c122226776201eba48f45a991e86084d77375/src/ring_theory/polynomial/basic.lean#L32</del></p>",
        "id": 221024577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609105539
    },
    {
        "content": "<p>Where's the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.comm_semiring\">docs#mv_polynomial.comm_semiring</a> instance?</p>",
        "id": 221024622,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609105578
    },
    {
        "content": "<p>I think that is too high in the dependency tree to be the culprit, since just <code>data.mv_polynomial.comm_ring</code> causes the timeout without importing anything from <code>ring_theory/*</code></p>",
        "id": 221024624,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609105584
    },
    {
        "content": "<p>Somehow my clipboard had the wrong thing in it. I meant to link to the file you mentioned...</p>",
        "id": 221024681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609105687
    },
    {
        "content": "<p>I don't think there is just a <code>ring</code> instance on <code>mv_polynomial</code>, the derived <code>ring</code> instance just seems to come from the <code>comm_ring</code> instance</p>",
        "id": 221024766,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609105846
    },
    {
        "content": "<p>Oh sorry, I see your edit, the <code>comm_semiring</code> comes from <code>data.mv_polynomial.basic</code></p>",
        "id": 221024777,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609105887
    },
    {
        "content": "<p>Seems odd that they'd form a diamond</p>",
        "id": 221024883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609106088
    },
    {
        "content": "<p>Does <code>convert this</code> give any more helpful output than <code>exact this</code>? Or perhaps <code>convert this using 1</code></p>",
        "id": 221024895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609106139
    },
    {
        "content": "<p>Both still just timeout (although they take much longer to timeout than <code>exact</code>)</p>",
        "id": 221024954,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609106228
    },
    {
        "content": "<p>I'm not 100% sure it is a diamond problem but the different <code>semiring</code> instances were the only differences I could find between the terms.</p>",
        "id": 221025005,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609106299
    },
    {
        "content": "<p>If you change <code>{R : Type*}</code> to <code>{R : Type u}</code> then it works fine.</p>",
        "id": 221025277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609106765
    },
    {
        "content": "<p>There are other times when this sort of thing has happened and I'm not entirely sure that people have got to the bottom of it. <code>Type*</code> means \"Lean, solve this universe problem for me in the most general way possible automatically\"; <code>Type u</code> means \"Lean, I claim this choice works\".</p>",
        "id": 221025324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609106883
    },
    {
        "content": "<p>Ah, thank you, I hadn't even thought to try changing that, I didn't realize <code>Type*</code> could be dangerous to use.</p>",
        "id": 221025425,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609107084
    },
    {
        "content": "<p>It's just one of those things you pick up if you hang around here. I don't know why it's dangerous but you've got a pretty neat example here, I'm trying to minimise. Reid once told me he never used <code>Type*</code>. Right now I don't know whether the issue was that you just asked Lean to solve a super-hard universe unification question or whether it's something else.</p>",
        "id": 221025486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609107162
    },
    {
        "content": "<p>Is this a problem that goes away if you use <code>lemma</code> instead of <code>example</code>?</p>",
        "id": 221025493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609107204
    },
    {
        "content": "<p>Since I've seen <code>def</code> look at the body to determine it's type, but I haven't seen <code>lemma</code> do that</p>",
        "id": 221025523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609107244
    },
    {
        "content": "<p>Yes</p>",
        "id": 221025555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609107296
    },
    {
        "content": "<p>Although I can replicate it inside of a lemma in a much less minimized version (since I came across this while trying to prove a lemma)</p>",
        "id": 221025574,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609107348
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.equiv</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"c1\">-- uncomment this and the first example times out and the second two take much longer to compile</span>\n\n<span class=\"c1\">--noncomputable instance {R : Type u} [comm_ring R] {σ : Type v} : comm_ring (mv_polynomial σ R) :=</span>\n<span class=\"c1\">--add_monoid_algebra.comm_ring</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mv_polynomial.option_equiv_left</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mv_polynomial.option_equiv_left</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mv_polynomial.option_equiv_left</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 221025765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609107675
    },
    {
        "content": "<p>I still get a timeout when I'm trying to use some of these things internally to a lemma though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.equiv</span>\n<span class=\"c1\">-- The issue only appears if `ring_theory.polynomial.basic` has been imported</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.comm_ring</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- This times out unless `hR` is switched to `comm_semiring`</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">mv_polynomial.fin_succ_equiv</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n\n  <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221025993,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609108109
    },
    {
        "content": "<p>I think this might be a <del>bug</del> <em>feature I don't understand</em> in <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#have\">tactic#have</a>?</p>",
        "id": 221026952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609109849
    },
    {
        "content": "<p>The problem doesn't exist in term-mode have</p>",
        "id": 221026955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609109858
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">mv_polynomial.fin_succ_equiv</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221026969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609109882
    },
    {
        "content": "<p>Thanks, jumping in and out of term-mode seems to solve all the time-outs I was getting with <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#have\">tactic#have</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#let\">tactic#let</a>, although it does make the proofs look a bit strange</p>",
        "id": 221028451,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609112275
    },
    {
        "content": "<p>Does making universes explicit solve any problems?</p>",
        "id": 221029175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609113474
    },
    {
        "content": "<p>I've made all the proofs I'm writing explicit about universes and still have the issue. And <code>data.mv_polynomial.equiv</code> already uses explicit universes. I'll have to do some digging to see if any of the definitions I'm importing might still have implicit universes though, and see if modifying those helps.</p>",
        "id": 221029587,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1609114200
    },
    {
        "content": "<p>I think the universe thing all happens at compile time, I don't think changing <code>*</code>s to <code>u</code>s in other theorems will change anything -- it might change what happens when it compiles, but it won't change the type of the term at all I don't think.</p>",
        "id": 221029770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609114484
    },
    {
        "content": "<p>I don't think using <code>*</code> instead of <code>u</code> has any detrimental effects unless you can see the type of the theorem change</p>",
        "id": 221029834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609114569
    },
    {
        "content": "<p>I still think it is best to prefer <code>*</code> when possible, because lean's automatic universe handling is generally the right thing to do</p>",
        "id": 221029847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609114608
    },
    {
        "content": "<p>We have here an explicit example of where lean's automatic universe handling is timing out and telling it \"Type u works fine\" doesn't time out :-/</p>",
        "id": 221030093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609115013
    },
    {
        "content": "<p>It's not clear to me that universe handling is the problem though, it seems typeclass inference is to blame here</p>",
        "id": 221030141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115108
    },
    {
        "content": "<p>you are saying it works better if you are more explicit about things and yes that's probably true but it doesn't mean we shouldn't make the normal inference work</p>",
        "id": 221030154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115159
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>@ring_equiv.{u_1 u_1} (@mv_polynomial.{0 u_1} (option.{0} (fin n)) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n  (@polynomial.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n     (@ring.to_semiring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n        (@comm_ring.to_ring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n           (@mv_polynomial.comm_ring.{u_1 0} R _inst_2 (fin n)))))\n  (@distrib.to_has_mul.{u_1}\n     (@mv_polynomial.{0 u_1} (option.{0} (fin n)) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n     (@ring.to_distrib.{u_1}\n        (@mv_polynomial.{0 u_1} (option.{0} (fin n)) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n        (@comm_ring.to_ring.{u_1}\n           (@mv_polynomial.{0 u_1} (option.{0} (fin n)) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n           (@mv_polynomial.comm_ring.{u_1 0} R _inst_2 (option.{0} (fin n))))))\n  (@distrib.to_has_add.{u_1}\n     (@mv_polynomial.{0 u_1} (option.{0} (fin n)) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n     (@ring.to_distrib.{u_1}\n        (@mv_polynomial.{0 u_1} (option.{0} (fin n)) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n        (@comm_ring.to_ring.{u_1}\n           (@mv_polynomial.{0 u_1} (option.{0} (fin n)) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n           (@mv_polynomial.comm_ring.{u_1 0} R _inst_2 (option.{0} (fin n))))))\n  (@distrib.to_has_mul.{u_1}\n     (@polynomial.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n        (@ring.to_semiring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n           (@comm_ring.to_ring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n              (@mv_polynomial.comm_ring.{u_1 0} R _inst_2 (fin n)))))\n     (@ring.to_distrib.{u_1}\n        (@polynomial.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n           (@ring.to_semiring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n              (@comm_ring.to_ring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n                 (@mv_polynomial.comm_ring.{u_1 0} R _inst_2 (fin n)))))\n        (@polynomial.ring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n           (@comm_ring.to_ring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n              (@mv_polynomial.comm_ring.{u_1 0} R _inst_2 (fin n))))))\n  (@distrib.to_has_add.{u_1}\n     (@polynomial.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n        (@ring.to_semiring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n           (@comm_ring.to_ring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n              (@mv_polynomial.comm_ring.{u_1 0} R _inst_2 (fin n)))))\n     (@ring.to_distrib.{u_1}\n        (@polynomial.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n           (@ring.to_semiring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n              (@comm_ring.to_ring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n                 (@mv_polynomial.comm_ring.{u_1 0} R _inst_2 (fin n)))))\n        (@polynomial.ring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n           (@comm_ring.to_ring.{u_1} (@mv_polynomial.{0 u_1} (fin n) R (@comm_ring.to_comm_semiring.{u_1} R _inst_2))\n              (@mv_polynomial.comm_ring.{u_1 0} R _inst_2 (fin n))))))\n</code></pre></div>\n<p>is the problem, I suspect.</p>",
        "id": 221030155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609115162
    },
    {
        "content": "<p>Why do these goals always make me weep</p>",
        "id": 221030195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115182
    },
    {
        "content": "<p>That's what maths actually looks like when you do it this way</p>",
        "id": 221030198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609115201
    },
    {
        "content": "<p>This is not something that ever happens in metamath, and the problems that are dealt with are around the same level of complexity</p>",
        "id": 221030220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115247
    },
    {
        "content": "<p>so I don't buy the \"this is reality\" argument</p>",
        "id": 221030224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115278
    },
    {
        "content": "<p>right, I'm not saying maths is wrong, I'm saying the way this is all set up in Lean 3 is somehow wrong</p>",
        "id": 221030225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609115279
    },
    {
        "content": "<p>Isn't there an issue here that we train people to use <code>example</code> instead of <code>lemma</code>, but <code>example</code> fails above and lemma doesn't?</p>",
        "id": 221030270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609115311
    },
    {
        "content": "<p>Do we need a <code>lemma_example</code>?</p>",
        "id": 221030272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609115331
    },
    {
        "content": "<p>The reason that makes a difference is that <code>example</code> is like <code>def</code> in that the value of the definition affects the inference of the statement</p>",
        "id": 221030275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115344
    },
    {
        "content": "<p><code>lemma example</code> does that, I think</p>",
        "id": 221030277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609115347
    },
    {
        "content": "<p>wait what?</p>",
        "id": 221030282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115361
    },
    {
        "content": "<p>I mean just call the lemma <code>example</code></p>",
        "id": 221030288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609115372
    },
    {
        "content": "<p>Well, right now I assume <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> tells people to use <code>example</code></p>",
        "id": 221030294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609115392
    },
    {
        "content": "<p>oh, I thought you had discovered some long lost keyword combination</p>",
        "id": 221030336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115409
    },
    {
        "content": "<p>incidentally, you can't name a lemma <code>example</code> because it's a keyword</p>",
        "id": 221030346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115425
    },
    {
        "content": "<p>Huh, it doesn't actually recommend <code>example</code></p>",
        "id": 221030347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609115431
    },
    {
        "content": "<p>There is nothing wrong with <code>example</code> per se, it's just one part of the confluence that leads to the bug here</p>",
        "id": 221030363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115474
    },
    {
        "content": "<p>It's useful to have <code>example</code> perform inference of the statement from the value because otherwise you wouldn't be able to do e.g. <code>example := 1</code></p>",
        "id": 221030382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115511
    },
    {
        "content": "<p>with a lemma that would have to be <code>lemma foo : nat := 1</code> where <code>nat</code> is required</p>",
        "id": 221030427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115535
    },
    {
        "content": "<p>So somehow <code>mv_polynomial.option_equiv_left</code> is implicated in this issue</p>",
        "id": 221030440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115574
    },
    {
        "content": "<p>Sure, I'm not saying <code>example</code> is broken - just that encouraging people to use <code>example : some_prop := sorry</code> in zulip is setting an unnecessary trap that would be resolved if we had the hypothetical <code>lemma example</code></p>",
        "id": 221030512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609115661
    },
    {
        "content": "<p>Do you know where the part of lean is that defines <code>theorem</code> / <code>lemma</code> etc?</p>",
        "id": 221030529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609115739
    },
    {
        "content": "<p>I don't think it's a trap either</p>",
        "id": 221030532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115756
    },
    {
        "content": "<p>I think Kevin found a bug that involves <code>example</code> and <code>Type*</code></p>",
        "id": 221030575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115772
    },
    {
        "content": "<p>and it doesn't on its own mean that <code>example</code> and/or <code>Type*</code> should be avoided</p>",
        "id": 221030579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115801
    },
    {
        "content": "<p>Where is that list of useful <code>option</code>s? I want to see what typeclass stuff is happening</p>",
        "id": 221030582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609115806
    },
    {
        "content": "<p><code>set_option trace.class_instances true</code></p>",
        "id": 221030592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609115828
    },
    {
        "content": "<p>First we get lots of these:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @submodule.quotient.has_add ?x_1 ?x_2 ?x_3 ?x_4 ?x_5 ?x_6\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @linear_map.has_add ?x_7 ?x_8 ?x_9 ?x_10 ?x_11 ?x_12 ?x_13 ?x_14\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @finsupp.has_add ?x_15 ?x_16 ?x_17\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @finset.has_add ?x_18 ?x_19 ?x_20\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @set.has_add ?x_21 ?x_22\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := enat.has_add\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := ?x_28.has_add\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := ?x_31.has_add\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @matrix.has_add ?x_32 ?x_33 ?x_34 ?x_35 ?x_36 ?x_37\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := ?x_40.has_add\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := ?x_43.has_add\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @multiset.has_add ?x_44\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @opposite.has_add ?x_45 ?x_46\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := rat.has_add\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @with_top.has_add ?x_47 ?x_48\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @prod.has_add ?x_49 ?x_50 ?x_51 ?x_52\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @additive.has_add ?x_53 ?x_54\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @with_zero.has_add ?x_55 ?x_56\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @add_monoid_hom.has_add ?x_57 ?x_58 ?x_59 ?x_60\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @pi.has_add ?x_61 ?x_62 ?x_63\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := native.float.has_add\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := unsigned.has_add\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := @fin.has_add ?x_64\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := int.has_add\nfailed is_def_eq\n[class_instances] (0) ?x_0 : has_add\n  (@polynomial (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n     (@ring.to_semiring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n        (@comm_ring.to_ring (@mv_polynomial (fin n) R (@comm_ring.to_comm_semiring R _inst_2))\n           (@baz R _inst_2 (fin n))))) := options.has_add\n</code></pre></div>",
        "id": 221030666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609115967
    },
    {
        "content": "<p>Then all of a sudden, the breakthrough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">))</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">))</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">baz</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)))))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">distrib.to_has_add</span> <span class=\"bp\">?</span><span class=\"n\">x_65</span> <span class=\"bp\">?</span><span class=\"n\">x_66</span>\n</code></pre></div>\n<p>Could polynomials be a distrib?</p>",
        "id": 221030714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609116004
    },
    {
        "content": "<p>I think this is the core problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mv_polynomial.comm_semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mv_polynomial.comm_ring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>this is slow exactly in the same cases as the original</p>",
        "id": 221030891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609116329
    },
    {
        "content": "<p>I think that this sums up the problems with the diamond problems in lean 3. This <code>rfl</code> is true but lean has to do a stupid amount of work to prove it</p>",
        "id": 221030989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609116447
    },
    {
        "content": "<p>because it basically has to completely unfold the definition of mv_polynomials, look at all of the fields and note that they are the same</p>",
        "id": 221031041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609116498
    },
    {
        "content": "<p>If only we could prove these definitional equalities and maybe <em>hint</em> to the <em>unifier</em> to use them</p>",
        "id": 221031068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609116564
    },
    {
        "content": "<p>Lean 4 has unification hints! As does Lean 3, right?</p>",
        "id": 221031077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609116586
    },
    {
        "content": "<p>I don't know how well lean (or even DTT in general) can handle \"proofs of defeq\" though. Especially hypothetical defeq theorems, i.e. \"if A = B is defeq then C = D is defeq\" don't exist in DTT proper, even though they are as important as lemmas in regular mathematics in theory, providing super-exponential speedups in some problems</p>",
        "id": 221031200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609116745
    }
]