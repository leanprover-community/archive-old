[
    {
        "content": "<p>I'm getting very weird behavior in <a href=\"https://github.com/leanprover-community/mathlib/pull/11468\">#11468</a>, where <code>rw some_rfl_lemma_generated_by_simps</code> times out. Any suggestions for why this might be happening?</p>",
        "id": 268122917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642248929
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.exterior_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dual</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span> <span class=\"n\">u3</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">exterior_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">module.dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The map `g v (x, y) = (ι R v * x, -ι R v * y + B v • x)` -/</span>\n<span class=\"kd\">@[simps apply_apply]</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">module.dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">module.End</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">v_mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebra.lmul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_linear_map.comp</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">v_mul.compl₂</span> <span class=\"o\">(</span><span class=\"n\">linear_map.fst</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">v_mul.compl₂</span> <span class=\"o\">(</span><span class=\"n\">linear_map.snd</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n            <span class=\"n\">B.smul_right</span> <span class=\"o\">(</span><span class=\"n\">linear_map.fst</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)),</span>\n  <span class=\"n\">exact</span>\n    <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v₂</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">linear_map.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">prod.ext</span>\n        <span class=\"o\">(</span><span class=\"n\">linear_map.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">l.map_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">linear_map.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">r.map_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n      <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">linear_map.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">prod.ext</span>\n        <span class=\"o\">(</span><span class=\"n\">linear_map.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">l.map_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">linear_map.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">r.map_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">g_g</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">B</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">B</span> <span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">g_apply_apply</span><span class=\"o\">,</span> <span class=\"c1\">-- timeout!?</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">exterior_algebra</span>\n</code></pre></div>",
        "id": 268122995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642249036
    },
    {
        "content": "<p>Weirdly, if I write the lemma myself it's all fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">g_apply_apply'</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"n\">B</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">p.fst</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">p.snd</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">B</span> <span class=\"n\">v</span> <span class=\"bp\">•</span> <span class=\"n\">p.fst</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 268123148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642249290
    },
    {
        "content": "<p>Does <code>force_noncomputable</code> fix it? It's the first thing I try nowadays</p>",
        "id": 268123295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642249492
    },
    {
        "content": "<p>Several students here have it in their projects</p>",
        "id": 268123311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642249517
    },
    {
        "content": "<p>It looks like the problem is the difference between <code>module.End</code> and <code>linear_map</code>, the generated lemma talks about the former while the hand-written one talks about the latter</p>",
        "id": 268123327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642249553
    },
    {
        "content": "<p>That doesn't look like it is the problem. I get the same behavior if I unfold the definition of <code>End</code>.<br>\nThe problem is that <code>g_apply_apply</code> and <code>g_apply_apply'</code> are not syntactically equal, and Lean doesn't find it very easy to make them definitionally equal when working with expressions that are not fully elaborated. The only difference I could see is that there are different paths taken through the algebraic hierarchy (in the instance arguments of the types of the lemmas).<br>\nIn the following example, you can see some of the difficulties Lean has with unifying, but that (for example) the rewrite is better if you provide <code>B</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.exterior_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dual</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span> <span class=\"n\">u3</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">exterior_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">module.dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The map `g v (x, y) = (ι R v * x, -ι R v * y + B v • x)` -/</span>\n<span class=\"kd\">@[simps? apply_apply]</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">module.dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">v_mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebra.lmul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_linear_map.comp</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">v_mul.compl₂</span> <span class=\"o\">(</span><span class=\"n\">linear_map.fst</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">v_mul.compl₂</span> <span class=\"o\">(</span><span class=\"n\">linear_map.snd</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n            <span class=\"n\">B.smul_right</span> <span class=\"o\">(</span><span class=\"n\">linear_map.fst</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n  <span class=\"c1\">-- exact</span>\n    <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v₂</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">linear_map.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">prod.ext</span>\n        <span class=\"o\">(</span><span class=\"n\">linear_map.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">l.map_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">linear_map.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">r.map_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n      <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">linear_map.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">prod.ext</span>\n        <span class=\"o\">(</span><span class=\"n\">linear_map.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">l.map_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">linear_map.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">r.map_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">g_apply_apply'</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"n\">B</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">x.fst</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">x.snd</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">B</span> <span class=\"n\">v</span> <span class=\"bp\">•</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">g_apply_apply</span> <span class=\"n\">B</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"c1\">-- fine</span>\n<span class=\"c1\">-- by convert g_apply_apply B v x -- fine</span>\n<span class=\"c1\">-- g_apply_apply B v x -- not fine</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">g_g</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">B</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">B</span> <span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">g_apply_apply</span> <span class=\"n\">B</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n<span class=\"k\">#print</span> <span class=\"n\">g_apply_apply</span>\n<span class=\"k\">#print</span> <span class=\"n\">g_apply_apply'</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">exterior_algebra</span>\n</code></pre></div>",
        "id": 268269772,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642425866
    },
    {
        "content": "<p>This issue might be solved by making some strategic defs irreducible...</p>",
        "id": 268269819,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642425898
    },
    {
        "content": "<p>Nice diagnosis! Timeouts are sometimes really hard to pin down.</p>",
        "id": 268270429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642426222
    }
]