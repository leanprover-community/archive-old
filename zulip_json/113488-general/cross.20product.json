[
    {
        "content": "<p>One of the targets on <a href=\"https://github.com/leanprover-community/mathlib/wiki/Undergrad-TODO-trivial-targets\">https://github.com/leanprover-community/mathlib/wiki/Undergrad-TODO-trivial-targets</a> is the cross product. I agree that it is quite easy to define the cross product on <code>fin 3 → ℝ</code>. But presumably that is not the correct generality, and we want to define it on arbitrary 3-dimensional oriented Euclidean spaces, or something like that.<br>\nMaybe that's not even the right generality, and we want something else in fact...</p>\n<p>If you have an opinion on what the cross product in Lean should look like, please share it here.</p>",
        "id": 265410455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639822596
    },
    {
        "content": "<p>&lt;insert some property&gt; Lie bracket?</p>",
        "id": 265410467,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639822636
    },
    {
        "content": "<p>I don't think we should waste time here. If nobody is interested in the generalization then let's do the specific undergrad case and it will be refactored if anyone needs a generalization in the future. The optimal thing to do now is probably the case of an oriented three dimensional real inner product space, and it would be nice to make sure this applies to <code>fin 3 → ℝ</code>.</p>",
        "id": 265411073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639823571
    },
    {
        "content": "<p>Would the binary exterior product be a sensible thing to formalize relating to this?</p>",
        "id": 265411451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639824192
    },
    {
        "content": "<p>Maybe the binary specialization isn't as useful for the exterior product as it is for the tensor product.</p>",
        "id": 265411827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639824800
    },
    {
        "content": "<p>I think it would be good to have <code>cross_alternating : alternating_map R V V (fin 2)</code> somewhere.</p>",
        "id": 265411878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639824867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Would it be good enough to only deal with the case <code>fin 3 → ℝ</code>?</p>",
        "id": 265411885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639824906
    },
    {
        "content": "<p>(To be honest, I don't think I've ever used the cross product after some example sheet in my 1st year LinAlg course.)</p>",
        "id": 265411900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639824932
    },
    {
        "content": "<p>I agree we should probably have the generalization to an inner product space</p>",
        "id": 265412697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639825996
    },
    {
        "content": "<p>Otherwise we can't use it to talk about the model of polar coordinates <code>(r, θ, ψ)</code> without forcing the user to go via an equiv</p>",
        "id": 265412702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826031
    },
    {
        "content": "<p>Honestly, I think we could get away with doing only <code>fin 3 → ℝ</code>. This definition is really nothing important.</p>",
        "id": 265412864,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639826248
    },
    {
        "content": "<p>If we don't do the full generalization, we may as well do <code>fin 3 → R</code> so that we can take a cross product of integer vectors, right?</p>",
        "id": 265412926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826323
    },
    {
        "content": "<p>You need some <code>sin(θ)</code> in the definition, right?</p>",
        "id": 265414493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639828573
    },
    {
        "content": "<p>If you define it for a given basis, an arbitrary <code>comm_ring</code> should work.</p>\n<p>If you define it for an orientation without specifying a choice of basis, you need extra structure (such as the real inner product) to make the result (as a vector in the same space as the arguments) depend only on the orientation.</p>\n<p>I guess that means that the cross product with respect to a given basis is a sensible thing to define, whether or not we also define it with respect to an orientation and prove how it relates to <code>sin</code> in a real inner product space.</p>\n<p>We don't yet have \"given an orientation of a real inner product space, there exists an orthonormal basis corresponding to that orientation\" (but that's something <a href=\"https://github.com/leanprover-community/mathlib/pull/10737\">#10737</a> is aiming towards, being able to describe how concrete basis / alternating map manipulations relate to orientations).</p>",
        "id": 265415424,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1639829933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265414493\">said</a>:</p>\n<blockquote>\n<p>You need some <code>sin(θ)</code> in the definition, right?</p>\n</blockquote>\n<p>Johan -- the definition is <code>\\lam i, if i = 0 then a(1)*b(1)-a(2)*b(2) else if i = 1 then a(2)*b(0)-a(0)*b(2) else a(0)*b(1)-a(1)*b(0)</code></p>",
        "id": 265420380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639836581
    },
    {
        "content": "<p>Good point!</p>",
        "id": 265420485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639836709
    },
    {
        "content": "<p>Probably better with <code>![_, _, _]</code></p>",
        "id": 265420701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639836921
    },
    {
        "content": "<p>Is it meaningful to make the cross-product an instance of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_ring\">docs#lie_ring</a> on the type <code>fin 3 → R</code> for <code>[add_comm_group R]</code>?</p>",
        "id": 265433167,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1639851318
    },
    {
        "content": "<p>I don't know if that plays well with nice notation, though.</p>",
        "id": 265433224,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1639851364
    },
    {
        "content": "<p>wouldn't you need <code>(comm_)ring</code>? but yes, I'd agree that's sensible and then makes it very easy to state at any level of generality</p>",
        "id": 265433322,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639851539
    },
    {
        "content": "<p>I'm not very familiar with the implementation of <code>lie_ring</code>, but I think it has <code>add_comm_group</code> assumption.</p>\n<p>By the way, I agree with much of the previous discussion that it is not obvious what generalizations we would care about. The cross product is mathematically a bit odd; I think it is something of a \"law of small numbers\" that there are not too many antisymmetric bilinear gadgets with Jacobi identity on merely 3 dimensional spaces, and therefore the cross product coincides with many conceptually different things.</p>\n<p>But allowing e.g. integer entries seems meaningful, as <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> pointed out.</p>",
        "id": 265433597,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1639851885
    },
    {
        "content": "<p>The cross product is an isomorphism of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Lambda^2(\\mathbb{R}^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and its existence comes from the coincidence that 3 choose 2 is 3 again.</p>",
        "id": 265433794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639851951
    },
    {
        "content": "<p>One of the coincidences I had in mind, indeed.</p>",
        "id": 265433981,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1639851993
    },
    {
        "content": "<p>To me, the implementation of cross product as an instance of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_ring\">docs#lie_ring</a> would involve only two potential drawbacks: </p>\n<ul>\n<li>competing instances of <code>lie_ring</code> on <code>fin 3 → R</code> (although I don't currently see serious competitors)</li>\n<li>difficulty to use nice notation (or would <code>⁅u, v⁆</code> be acceptable as such for the cross product?).</li>\n</ul>",
        "id": 265434925,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1639852507
    },
    {
        "content": "<p>I meant the definition as Kevin wrote above to work, you need + and * so <code>comm_ring</code> seems like the sensible way to create the instance. The instance could be localised, too</p>",
        "id": 265436213,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639854023
    },
    {
        "content": "<p>Every ring <code>R</code> is a Lie algebra, so <code>fin 3 → R</code> would be the Lie algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mrow><mo>⊕</mo><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R^{⊕ 3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊕</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 265436988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639855081
    },
    {
        "content": "<p>I think that's what mathlib currently assumes it to be.</p>",
        "id": 265437030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639855099
    },
    {
        "content": "<p>I don't think we should have a globally registered notation for cross product. This is too specialized.</p>",
        "id": 265438429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639856665
    },
    {
        "content": "<p><code>×₃</code> as locale notation?</p>",
        "id": 265441297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639858972
    },
    {
        "content": "<p>Is anybody working on it? If not, I'd like to take this task. Since I am a beginner, this looks good for me because it is probably the easiest-to-implement TODO in mathlib right now.</p>",
        "id": 265535460,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1639990192
    },
    {
        "content": "<p>I suppose I would define cross product as a function of the type <code>(fin 3 → α) → (fin 3 → α)</code> and I would prove some trivial properties of it (like anticommutativity). Is there something I should be aware of before I start?</p>",
        "id": 265535759,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1639990384
    },
    {
        "content": "<p>I think you should be aware of the above discussion <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> (There are a tonne of generalizations, but I think the consensus is that it's ok to focus on <code>fin 3 → R</code> for now.)</p>",
        "id": 265536556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639990859
    },
    {
        "content": "<p>Also, please use <code>R</code> instead of <code>α</code>. It is a useful signal to the reader that <code>R</code> is not some random type, but caries a ring-like structure.</p>",
        "id": 265536596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639990887
    },
    {
        "content": "<p>Thank you! So you mean <code>R</code> not <code>ℝ</code> right?</p>",
        "id": 265541619,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1639994124
    },
    {
        "content": "<p>Thanks! Imma do it! I think it will be a great exercise to start with and experience the whole mathlib workflow before I dive into something complicated.</p>",
        "id": 265543652,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1639995394
    },
    {
        "content": "<p>Maybe at least bilinearity should be bundled (so <code>(fin 3 → R) →ₗ[R] (fin 3 → R) →ₗ[R] (fin 3 → R)</code>)?</p>",
        "id": 265557546,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1640004296
    },
    {
        "content": "<p>Should we be calling <code>star</code> on the output and requiring <code>star_ring R</code>? <a href=\"https://math.stackexchange.com/q/129227/1896\">https://math.stackexchange.com/q/129227/1896</a> suggests we probably should.</p>",
        "id": 265558475,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640004924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266253\">Joseph Myers</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265557546\">said</a>:</p>\n<blockquote>\n<p>Maybe at least bilinearity should be bundled (so <code>(fin 3 → R) →ₗ[R] (fin 3 → R) →ₗ[R] (fin 3 → R)</code>)?</p>\n</blockquote>\n<p>What does it mean?</p>",
        "id": 265558619,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640005025
    },
    {
        "content": "<p>It means exactly what Joseph said, that the map is bilinear</p>",
        "id": 265558777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640005141
    },
    {
        "content": "<p>i.e. linear in both arguments</p>",
        "id": 265558804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640005166
    },
    {
        "content": "<p>Yes but what is the syntax <code>→ₗ[R]</code> for?</p>",
        "id": 265558952,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640005220
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map\">docs#linear_map</a></p>",
        "id": 265559012,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640005251
    },
    {
        "content": "<p>If you type in the full type as above, you can hover over it in vs-code to find out what the syntax means</p>",
        "id": 265559067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640005280
    },
    {
        "content": "<p>Thank yall for helping the n00b!</p>",
        "id": 265559123,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640005312
    },
    {
        "content": "<p>Can I get your feedback on my wip please? This is my first time contributing (not only to Lean/mathlib but also to any open source).<br>\n<a href=\"https://github.com/madvorak/mathlib/blob/master/src/linear_algebra/cross_product.lean\">https://github.com/madvorak/mathlib/blob/master/src/linear_algebra/cross_product.lean</a></p>",
        "id": 265611110,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640031513
    },
    {
        "content": "<p>A quick golf</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- cross product is anti-commutative -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">cross_product_anticomm</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">×₃</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cross_product</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265612889,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640032609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265612889\">said</a>:</p>\n<blockquote>\n<p>A quick golf</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- cross product is anti-commutative -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">cross_product_anticomm</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">×₃</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cross_product</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks a lot!!!!!</p>\n<p>I will try to write more proofs in a similar manner.</p>",
        "id": 265613970,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640033249
    },
    {
        "content": "<p>Going back to the Dec 18 discussion, regarding the correct generalization: I think the cross product is commonly regarded as being a bilinear map on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>, and anyone who uses generalizations tends not to use the cross product itself.</p>\n<p>The property that completely determines the cross product is the triple product: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>u</mi><mo>×</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>w</mi><mo>=</mo><mi>det</mi><mo>⁡</mo><mo stretchy=\"false\">[</mo><mi>u</mi><mtext> </mtext><mi>v</mi><mtext> </mtext><mi>w</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">(u \\times v)\\cdot w=\\det[u\\ v\\ w]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">det</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">]</span></span></span></span>. The idea is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mo>↦</mo><mi>det</mi><mo>⁡</mo><mo stretchy=\"false\">[</mo><mi>u</mi><mtext> </mtext><mi>v</mi><mtext> </mtext><mi>w</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">w\\mapsto \\det[u\\ v\\ w]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">det</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">]</span></span></span></span> is an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">(\\mathbb{R}^3)^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>, and the dot product lets you take this dual vector and turn it back into a vector.</p>\n<p>A general version is that if you have some fixed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi><mo>∈</mo><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\omega\\in \\Lambda^{k+1}(V)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> is an inner product space, you can take vectors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>v</mi><mi>k</mi></msub><mo>∈</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">v_1,\\dots,v_k\\in V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, compute the iterated interior multiplication <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>i</mi><msub><mi>v</mi><mi>k</mi></msub></msub><msub><mi>i</mi><msub><mi>v</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub></msub><mo>⋯</mo><msub><mi>i</mi><msub><mi>v</mi><mn>1</mn></msub></msub><mo stretchy=\"false\">(</mo><mi>ω</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><msup><mi>V</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">i_{v_k}i_{v_{k-1}}\\cdots i_{v_1}(\\omega)\\in V^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0475em;vertical-align:-0.2975em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3488em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1512em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2559em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3488em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2107em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2975em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>, then dualize using the inner product to get an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>. This defines an alternating linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mi>k</mi></msup><mi>V</mi><mo>→</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda^k V\\to V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>.  The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">k=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> case when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> is the determinant form gives the cross product.</p>",
        "id": 265614301,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640033443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265612889\">said</a>:</p>\n<blockquote>\n<p>A quick golf</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- cross product is anti-commutative -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">cross_product_anticomm</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">×₃</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cross_product</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is the part <code>(v _) (w _)</code> needed?</p>",
        "id": 265615985,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640034437
    },
    {
        "content": "<p>Seems that it's not. Lean is smarter than I thought.</p>",
        "id": 265616115,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640034507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265616115\">said</a>:</p>\n<blockquote>\n<p>Seems that it's not. Lean is smarter than I thought.</p>\n</blockquote>\n<p>What is the process of finding out that <code>simp</code> with my definition and the only lemma <code>mul_comm</code> is enough?</p>",
        "id": 265616379,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640034657
    },
    {
        "content": "<p>after <code>simp [cross_product]</code>, you will see that the two sides of the equation only differs by some <code>mul_comm</code>.</p>",
        "id": 265616591,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640034808
    },
    {
        "content": "<p>Importantly, even though you could rewrite with <code>mul_comm</code> repeatedly forever, <code>simp</code> will put things into a normal form.</p>",
        "id": 265616730,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640034894
    },
    {
        "content": "<p>Oh! Now I see that sequence </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">cross_product</span><span class=\"o\">],</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>accomplishes the goal as well!</p>",
        "id": 265616876,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640034986
    },
    {
        "content": "<p>Btw, you can get it down to just one line with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cross_product_anticomm</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">×₃</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cross_product</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Here's another:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cross_product_anticomm'</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"bp\">×₃</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cross_product</span><span class=\"o\">,</span> <span class=\"n\">add_eq_zero_iff_eq_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 265617082,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640035132
    },
    {
        "content": "<p>If you add spaces around the notation, you'll get somewhat more legible output in the goal window:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">×₃</span> <span class=\"bp\">`</span><span class=\"o\">:</span> <span class=\"mi\">68</span> <span class=\"o\">:=</span> <span class=\"n\">cross_product</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">⬝</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">67</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.dot_product</span>\n</code></pre></div>",
        "id": 265617186,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640035209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265614301\">said</a>:</p>\n<blockquote>\n<p>Going back to the Dec 18 discussion, regarding the correct generalization: I think the cross product is commonly regarded as being a bilinear map on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>, and anyone who uses generalizations tends not to use the cross product itself.</p>\n<p>The property that completely determines the cross product is the triple product: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>u</mi><mo>×</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>w</mi><mo>=</mo><mi>det</mi><mo>⁡</mo><mo stretchy=\"false\">[</mo><mi>u</mi><mtext> </mtext><mi>v</mi><mtext> </mtext><mi>w</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">(u \\times v)\\cdot w=\\det[u\\ v\\ w]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">det</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">]</span></span></span></span>. The idea is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mo>↦</mo><mi>det</mi><mo>⁡</mo><mo stretchy=\"false\">[</mo><mi>u</mi><mtext> </mtext><mi>v</mi><mtext> </mtext><mi>w</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">w\\mapsto \\det[u\\ v\\ w]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">det</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">]</span></span></span></span> is an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">(\\mathbb{R}^3)^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>, and the dot product lets you take this dual vector and turn it back into a vector.</p>\n<p>A general version is that if you have some fixed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi><mo>∈</mo><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\omega\\in \\Lambda^{k+1}(V)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> is an inner product space, you can take vectors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>v</mi><mi>k</mi></msub><mo>∈</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">v_1,\\dots,v_k\\in V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, compute the iterated interior multiplication <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>i</mi><msub><mi>v</mi><mi>k</mi></msub></msub><msub><mi>i</mi><msub><mi>v</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub></msub><mo>⋯</mo><msub><mi>i</mi><msub><mi>v</mi><mn>1</mn></msub></msub><mo stretchy=\"false\">(</mo><mi>ω</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><msup><mi>V</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">i_{v_k}i_{v_{k-1}}\\cdots i_{v_1}(\\omega)\\in V^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0475em;vertical-align:-0.2975em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3488em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1512em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2559em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3488em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2107em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2975em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>, then dualize using the inner product to get an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>. This defines an alternating linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mi>k</mi></msup><mi>V</mi><mo>→</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda^k V\\to V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>.  The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">k=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> case when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> is the determinant form gives the cross product.</p>\n</blockquote>\n<p>Oh! That is a beautiful motivation!</p>",
        "id": 265618108,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640035882
    },
    {
        "content": "<p>BTW should we fork this conversation — move my n00bish implementation question to a separate thread?</p>",
        "id": 265618246,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640035963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> More golfing using a lemma with a questionable proof (it perhaps depends on the definition of <code>finset.sum</code> a bit too much?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dot_product_unfold'</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">⬝</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.dot_product</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cross_product_perpendicular_first_arg</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cross_product</span><span class=\"o\">,</span> <span class=\"n\">dot_product_unfold'</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265618575,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640036223
    },
    {
        "content": "<p>There's a nonterminal simp here, but that lemma is useful for the triple product permutation lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">triple_product_equality</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">u</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">×₃</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cross_product</span><span class=\"o\">,</span> <span class=\"n\">dot_product_unfold'</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265618865,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640036477
    },
    {
        "content": "<p>You can always use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_univ_succ\">docs#finset.sum_univ_succ</a> or whatever it's called</p>",
        "id": 265618972,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640036557
    },
    {
        "content": "<p>This works, too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">triple_product_equality</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">u</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">×₃</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cross_product</span><span class=\"o\">,</span> <span class=\"n\">dot_product_unfold'</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.head_cons</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_vec_bit0_eq_alt0</span><span class=\"o\">,</span> <span class=\"n\">matrix.empty_append</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_one</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.cons_vec_alt0</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_append</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265619020,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640036616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Great:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dot_product_unfold'</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">⬝</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.dot_product</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 265619103,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640036684
    },
    {
        "content": "<p>Do you still want me to create the PR in the end, even tho most of the code is yours?</p>",
        "id": 265619271,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640036814
    },
    {
        "content": "<p>Ye deserve the credit but I actually wanted to experience the whole workflow with Lean/mathlib. So I don't know now.</p>",
        "id": 265619407,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640036900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265619407\">said</a>:</p>\n<blockquote>\n<p>Ye deserve the credit but I actually wanted to experience the whole workflow with Lean/mathlib. So I don't know now.</p>\n</blockquote>\n<p>There's an \"Authors\" field at the top of <code>mathlib</code> files. You can credit Kyle and yourself there in alphabetic order. I've done if before and it was fine <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 265619647,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640037089
    },
    {
        "content": "<p>OK! And copyright goes to?</p>",
        "id": 265619756,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640037164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> Please create the PR! Creating the PR and shepherding it through the review process is a large part of the work.</p>",
        "id": 265619785,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640037192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265619756\">said</a>:</p>\n<blockquote>\n<p>OK! And copyright goes to?</p>\n</blockquote>\n<p>You're creating the file so I think it's you <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 265619819,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640037227
    },
    {
        "content": "<p>OK ok. But I should sort out the <code>→ₗ[R]</code> first, right?</p>",
        "id": 265619880,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640037248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> A possible framework. I don't know this part of the library well enough to know if this is the best way to do it though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cross_product</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">],</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"kd\">end</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265620735,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640037775
    },
    {
        "content": "<p>I made progress.<br>\n<a href=\"https://github.com/madvorak/mathlib/blob/master/src/linear_algebra/cross_product.lean\">https://github.com/madvorak/mathlib/blob/master/src/linear_algebra/cross_product.lean</a></p>\n<p>My current problem is that I don't know how to attack goals of this form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265627168,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640041934
    },
    {
        "content": "<p>Unless I am mistaken, I am on the outside level, hence I need to prove equality of two functions of the type <code>(fin 3 → R) →ₗ[R] (fin 3 → R)</code>.</p>",
        "id": 265627332,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640042070
    },
    {
        "content": "<p>Have you tried <code>ext</code>?</p>",
        "id": 265627496,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640042197
    },
    {
        "content": "<p>BTW, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/bilinear_map.html#linear_map.mk%E2%82%82\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/bilinear_map.html#linear_map.mk%E2%82%82</a> for creating bilinear maps.</p>",
        "id": 265627633,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640042305
    },
    {
        "content": "<p>After <code>ext</code> I see the following goal, which I understand even less:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">⇑</span><span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">})</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/6e7BhVFL2jv1lEYw-wN3bFpn/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/6e7BhVFL2jv1lEYw-wN3bFpn/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/6e7BhVFL2jv1lEYw-wN3bFpn/image.png\"></a></div>",
        "id": 265627664,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640042342
    },
    {
        "content": "<p>Clean it up for you own eyes using <code>dsimp</code>.</p>",
        "id": 265627797,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640042454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265627633\">said</a>:</p>\n<blockquote>\n<p>BTW, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/bilinear_map.html#linear_map.mk%E2%82%82\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/bilinear_map.html#linear_map.mk%E2%82%82</a> for creating bilinear maps.</p>\n</blockquote>\n<p>I don't understand the code. Can I somehow use it to just prove the linearity in the second argument and use the \"symmetry\"?</p>",
        "id": 265627803,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640042461
    },
    {
        "content": "<p>No, it's not about (anti)symmetric maps. You can use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cross_product</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_map.mk₂</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">])</span> <span class=\"c1\">-- same is in your code</span>\n  <span class=\"n\">_</span>\n  <span class=\"n\">_</span>\n  <span class=\"n\">_</span>\n  <span class=\"n\">_</span>\n</code></pre></div>\n<p>This way you don't need to use <code>linear_map.ext</code></p>",
        "id": 265628611,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640043105
    },
    {
        "content": "<p>[crowdproving]<br>\nWell, this is my current state of the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"n\">x</span>\n<span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>On the LHS, the vector gets first multiplied and then the element gets selected.<br>\nOn the RHS, the element first gets selected and then it is multiplied.<br>\n<a href=\"/user_uploads/3121/AJ-DTRHQ163lGYTlu9DWv91f/image.png\">image.png</a> <br>\nAny idea how to close the goal?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AJ-DTRHQ163lGYTlu9DWv91f/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/AJ-DTRHQ163lGYTlu9DWv91f/image.png\"></a></div>",
        "id": 265630287,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640044509
    },
    {
        "content": "<p>Move multiplication inside, then use extensionality.</p>",
        "id": 265630743,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640044896
    },
    {
        "content": "<p>What do you mean by \"inside\" please?</p>",
        "id": 265630872,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640044987
    },
    {
        "content": "<p>inside the vector</p>",
        "id": 265630883,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640045001
    },
    {
        "content": "<p>I should probably be trivial, but I am lost. I am probably too tired. Imma continue tomorrow.</p>",
        "id": 265631418,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640045451
    },
    {
        "content": "<p>Can you post your code again? A few incantations of <code>simp</code> should really get you there.</p>",
        "id": 265631740,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640045730
    },
    {
        "content": "<p>Try <code>rw pi.const_mul</code> or something.</p>",
        "id": 265631821,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640045789
    },
    {
        "content": "<p><code>fin_cases x; simp</code> ought to work</p>",
        "id": 265632961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640046588
    },
    {
        "content": "<p>Rather than using <code>![]</code> I'd suggest <code>λ i, a (i + 1) * b (i + 2) - a (i + 2) * b (i + 1)</code> and then hopefully you don't need to use <code>fin_cases</code>.</p>",
        "id": 265638350,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1640051358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265632961\">said</a>:</p>\n<blockquote>\n<p><code>fin_cases x; simp</code> ought to work</p>\n</blockquote>\n<p>It works! Awesome! Thanks a lot!</p>\n<p>Also <code>fin_cases x; refl,</code> works as well, so I will keep the latter.</p>",
        "id": 265670775,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640083300
    },
    {
        "content": "<p>With your great help, I finished the proofs! What do you think?</p>\n<p><a href=\"https://github.com/madvorak/mathlib/blob/master/src/linear_algebra/cross_product.lean\">https://github.com/madvorak/mathlib/blob/master/src/linear_algebra/cross_product.lean</a></p>",
        "id": 265675558,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640086743
    },
    {
        "content": "<p>In the lemmata (everything that follows after line 58), I should rename the arguments to <code>x</code> and <code>y</code> in order to comply with the mathlib's manual of style, right?</p>",
        "id": 265676844,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640087798
    },
    {
        "content": "<p>However, I don't understand what Jeremy Avigad meant by writing that <code>a</code>, <code>b</code>, <code>c</code> are for propositions.<br>\n<a href=\"https://leanprover-community.github.io/contribute/style.html\">https://leanprover-community.github.io/contribute/style.html</a></p>",
        "id": 265676926,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640087872
    },
    {
        "content": "<p>On formatting style, check how curly brackets are used in other proofs.<br>\nI also see some <a href=\"https://leanprover-community.github.io/glossary.html#non-terminal-simp\">glossary#non-terminal-simp</a> usages, which is avoided in mathlib</p>",
        "id": 265677290,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640088075
    },
    {
        "content": "<p>Thank you! I will revise it.</p>",
        "id": 265677325,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640088109
    },
    {
        "content": "<p>This link contains some useful information about documentation: <a href=\"https://leanprover-community.github.io/contribute/doc.html\">https://leanprover-community.github.io/contribute/doc.html</a><br>\nYour file is currently missing a module documentation, which summarizes what you're exploring, a somewhat precise overview of the main definitions you're proposing and, if applicable, a few <code>#TODO</code> items for next steps.</p>\n<p>We usually don't add documentation for lemmas/theorems, although I think this is not forbidden. The motivation is that we try to make the lemmas names precise and explicit enough.</p>",
        "id": 265678070,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640088664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265678070\">said</a>:</p>\n<blockquote>\n<p>We usually don't add documentation for lemmas/theorems</p>\n</blockquote>\n<p>I think you got this impression from reading only elementary lemmas in mathlib.</p>",
        "id": 265678626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640089146
    },
    {
        "content": "<p>What is useless is adding a docstring which takes longer to read than the actual statement.</p>",
        "id": 265678676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640089185
    },
    {
        "content": "<p>Did I name my lemmata well?</p>",
        "id": 265678686,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640089190
    },
    {
        "content": "<p>Arthur, you can have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/parametric_interval_integral.html\">https://leanprover-community.github.io/mathlib_docs/analysis/calculus/parametric_interval_integral.html</a> for instance. Lemmas there have quite a number of assumptions and docstrings help a bit.</p>",
        "id": 265678781,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640089249
    },
    {
        "content": "<p>Looking at this page myself, I have a question for <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>: why do we get all those <code>«μ»</code> instead of <code>μ</code>?</p>",
        "id": 265678915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640089326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265678781\">said</a>:</p>\n<blockquote>\n<p>Arthur, you can have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/parametric_interval_integral.html\">https://leanprover-community.github.io/mathlib_docs/analysis/calculus/parametric_interval_integral.html</a> for instance. Lemmas there have quite a number of assumptions and docstrings help a bit.</p>\n</blockquote>\n<p>Nice! There's even an explanation for the reasoning behind the proof itself. I was wondering if it was a thing in mathlib</p>",
        "id": 265678971,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640089366
    },
    {
        "content": "<p>Oh wait, the docstring doesn't explain the proof. Nevermind. But it does help understanding the assumptions</p>",
        "id": 265679114,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640089460
    },
    {
        "content": "<p>We also have complicated proofs having comments explaining the strategy (and such comments can also be found in module docstrings).</p>",
        "id": 265679288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640089568
    },
    {
        "content": "<p>Have a look at <a href=\"https://github.com/leanprover-community/mathlib/blob/2ceda7850a0aaa35f31697072c755fb3de3dbaa7/src/topology/metric_space/baire.lean#L42\">https://github.com/leanprover-community/mathlib/blob/2ceda7850a0aaa35f31697072c755fb3de3dbaa7/src/topology/metric_space/baire.lean#L42</a> for instance.</p>",
        "id": 265679325,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640089608
    },
    {
        "content": "<p>The weird brackets are because somewhere μ is defined as notation,  and the brackets say \"not the notation\"</p>",
        "id": 265681043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640090836
    },
    {
        "content": "<p>But this notation is clearly not in scope here.</p>",
        "id": 265681328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640091049
    },
    {
        "content": "<p>All <code>open_locale</code> notation is in scope in doc-gen</p>",
        "id": 265681381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640091083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> I got rid of the nonterminal simps and got things somewhat more mathlib ready. I tried speeding up some of the proofs using some specialized lemmas for operations on 3-vectors (<code>vec3_eq</code>, <code>vec3_add</code>, and so on). I also switched the definition of <code>cross_product</code> to Yury's suggestion and created a locale for vector notation.</p>\n<p>There's also the determinant characterization of the triple product:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">triple_product_eq_det</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">matrix.det</span> <span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"o\">]</span>\n</code></pre></div>\n<p>Code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2021 Martin Dvorak. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Martin Dvorak, Kyle Miller, Eric Wieser, Andrew Yang</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.bilinear_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.determinant</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Cross products</span>\n\n<span class=\"cm\">This module defines the cross product of vectors in $R^3$ for $R$ a commutive ring.</span>\n\n<span class=\"cm\">## Main definitions</span>\n\n<span class=\"cm\">* `cross_product` is the cross product of pairs of vectors in $R^3$.</span>\n\n<span class=\"cm\">## Main results</span>\n\n<span class=\"cm\">* `triple_product_eq_det`</span>\n\n<span class=\"cm\">## Notation</span>\n\n<span class=\"cm\">The locale `vectors` gives the following notations:</span>\n\n<span class=\"cm\">* `×₃` for the cross product</span>\n<span class=\"cm\">* `⬝` for dot products</span>\n\n<span class=\"cm\">## Tags</span>\n\n<span class=\"cm\">cross product</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec3_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec3_eq'</span> <span class=\"o\">{</span><span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">=</span> <span class=\"n\">b0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">=</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a2</span> <span class=\"bp\">=</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a0</span><span class=\"o\">,</span> <span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">a2</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec3_add</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">vec3_eq</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec3_add'</span> <span class=\"o\">{</span><span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a0</span><span class=\"o\">,</span> <span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">a2</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a0</span> <span class=\"bp\">+</span> <span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">a1</span> <span class=\"bp\">+</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">a2</span> <span class=\"bp\">+</span> <span class=\"n\">b2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">vec3_add</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- The cross product of two vectors in $R^3$ for $R$ a commutative ring. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">cross_product</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">linear_map.mk₂</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n       <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n       <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">])</span><span class=\"bp\">;</span>\n  <span class=\"n\">intros</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">vec3_add'</span><span class=\"o\">,</span> <span class=\"n\">pi.add_apply</span><span class=\"o\">,</span> <span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">matrix.smul_cons</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.smul_empty</span><span class=\"o\">,</span> <span class=\"n\">pi.smul_apply</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">vec3_eq'</span><span class=\"bp\">;</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">\"infixl ` ×₃ `: 68 := cross_product\"</span> <span class=\"k\">in</span> <span class=\"n\">vectors</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"infix ` ⬝ ` : 67 := matrix.dot_product\"</span> <span class=\"k\">in</span> <span class=\"n\">vectors</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cross_product_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">×₃</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n              <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n              <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cross_product_anticomm</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">×₃</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cross_product_def</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cross_product_anticomm'</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"bp\">×₃</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_eq_zero_iff_eq_neg</span><span class=\"o\">,</span> <span class=\"n\">cross_product_anticomm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cross_product_self_eq_zero_vector</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cross_product_def</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec3_dot_product</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">⬝</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.dot_product</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dot_self_cross_product_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cross_product_def</span><span class=\"o\">,</span> <span class=\"n\">vec3_dot_product</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dot_cross_product_self_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">w</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cross_product_anticomm</span><span class=\"o\">,</span> <span class=\"n\">matrix.dot_product_neg</span><span class=\"o\">,</span> <span class=\"n\">dot_self_cross_product_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">neg_zero</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Cyclic permutations preserve triple product.</span>\n<span class=\"sd\">See also `triple_product_eq_det`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">triple_product_permutation</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">u</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">×₃</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cross_product_def</span><span class=\"o\">,</span> <span class=\"n\">vec3_dot_product</span><span class=\"o\">,</span> <span class=\"n\">matrix.head_cons</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_vec_bit0_eq_alt0</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.empty_append</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_one</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_vec_alt0</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_append</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.cons_val_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">triple_product_eq_det</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">u</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">matrix.det</span> <span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">vec3_dot_product</span><span class=\"o\">,</span> <span class=\"n\">cross_product_def</span><span class=\"o\">,</span> <span class=\"n\">matrix.det_fin_three</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.head_cons</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.cons_vec_bit0_eq_alt0</span><span class=\"o\">,</span> <span class=\"n\">matrix.empty_vec_alt0</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.cons_vec_alt0</span><span class=\"o\">,</span> <span class=\"n\">matrix.vec_head_vec_alt0</span><span class=\"o\">,</span>\n    <span class=\"n\">fin.fin_append_apply_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.empty_append</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_append</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.cons_val'</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_one</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265689679,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640096314
    },
    {
        "content": "<p>By the way, is there a way to make <code>cross_product</code> pretty print properly? The expression <code>v ×₃ w = - (w ×₃ v)</code> prints as <code>⇑(⇑cross_product v) w = -⇑(⇑cross_product w) v</code>.</p>",
        "id": 265689992,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640096538
    },
    {
        "content": "<p>You'll probably want to write out the <code>coe_fn</code>/<code>⇑</code> in the notation, so something like (untested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">v</span> <span class=\"bp\">`</span> <span class=\"bp\">×₃</span> <span class=\"bp\">`</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">cross_product</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">w</span>\n</code></pre></div>",
        "id": 265690192,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640096662
    },
    {
        "content": "<p>I haven't been able to get that to work or any number of permutations... Did you manage, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>?</p>",
        "id": 265690981,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640097121
    },
    {
        "content": "<p>No, I didn't. Is this in a branch / PR somewhere?</p>",
        "id": 265691059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640097145
    },
    {
        "content": "<p>There's a code snippet of a complete module I posted two messages up.</p>",
        "id": 265691142,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640097202
    },
    {
        "content": "<p>I'm having trouble too. How does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.comp/src\">src#linear_map.comp</a> do it?</p>",
        "id": 265691203,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640097241
    },
    {
        "content": "<p>My point is that I think this is mature enough that zulip is probably no longer the best place to discuss it, and it would probably make sense for <span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> to make a PR</p>",
        "id": 265691256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640097251
    },
    {
        "content": "<p>Ah right, that's not bundled.</p>",
        "id": 265691318,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640097293
    },
    {
        "content": "<p>Thank you very much for your helps! I will take care of the PR.</p>",
        "id": 265692826,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640098091
    },
    {
        "content": "<p>If you say that <code>triple_product_eq_det</code> is the main result, should I denote it as a <code>theorem</code> instead?</p>",
        "id": 265693870,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640098779
    },
    {
        "content": "<p>You can put other main results, too. I just wanted to be sure to include that since it's theoretically important.</p>",
        "id": 265694180,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640098927
    },
    {
        "content": "<p>Can we keep the identifiers <code>u</code>, <code>v</code>, <code>w</code> as name of vectors (even tho they are probably standard names for universes in Lean/mathlib)?</p>",
        "id": 265694191,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640098939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265694180\">said</a>:</p>\n<blockquote>\n<p>You can put other main results, too. I just wanted to be sure to include that since it's theoretically important.</p>\n</blockquote>\n<p>I don't want to exaggerate the importance of the other results. I just wanted to denote it as a <code>theorem</code> unless you are opposed to it.</p>",
        "id": 265694246,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640098983
    },
    {
        "content": "<p><code>data.fin.vec_notation</code> seems to use <code>u</code> and <code>v</code> for vectors</p>",
        "id": 265694271,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640098997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265694271\">said</a>:</p>\n<blockquote>\n<p><code>data.fin.vec_notation</code> seems to use <code>u</code> and <code>v</code> for vectors</p>\n</blockquote>\n<p>Oh, that's weird. In this file, the identifier <code>u</code> is used in both meanings (globally universe; in arguments a vector).</p>",
        "id": 265694464,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640099083
    },
    {
        "content": "<p>I'm not sure it matters whether it's a <code>theorem</code> or not -- in the docs everything seems to be a <code>theorem</code> anyway -- so feel free to choose how you want.</p>",
        "id": 265694527,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640099119
    },
    {
        "content": "<p>BTW how did you generate the long list of all lemmata used in the last simp?</p>",
        "id": 265694693,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640099203
    },
    {
        "content": "<p>In <code>data.fin.vec_notation</code>, <code>u</code> is used as both a universe variable and an argument, too.</p>",
        "id": 265694695,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640099205
    },
    {
        "content": "<p><code>simp?</code></p>",
        "id": 265694705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640099210
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">vec3_dot_product</span><span class=\"o\">,</span> <span class=\"n\">cross_product_def</span><span class=\"o\">,</span> <span class=\"n\">matrix.det_fin_three</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.head_cons</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.cons_vec_bit0_eq_alt0</span><span class=\"o\">,</span> <span class=\"n\">matrix.empty_vec_alt0</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.cons_vec_alt0</span><span class=\"o\">,</span> <span class=\"n\">matrix.vec_head_vec_alt0</span><span class=\"o\">,</span>\n    <span class=\"n\">fin.fin_append_apply_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.empty_append</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_append</span><span class=\"o\">,</span>\n    <span class=\"n\">matrix.cons_val'</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_one</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_zero</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 265694714,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640099223
    },
    {
        "content": "<p>Yeah, I seeded it with the first three and then did <code>simp? [vec3_dot_product, cross_product_def, matrix.det_fin_three]</code></p>",
        "id": 265694752,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640099243
    },
    {
        "content": "<p>I suppose you didn't write it by hand. Can I first call just <code>simp</code> and then get the list of all used lemmata in it?</p>",
        "id": 265694784,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640099259
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 265694825,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640099279
    },
    {
        "content": "<p>And is there any semantics in which lemmata you placed on the same line?</p>",
        "id": 265694921,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640099324
    },
    {
        "content": "<p>I mostly made sure the three main ones came first in case someone wanted to regenerate it later, and any other rearrangements I might have made don't matter.</p>",
        "id": 265695015,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640099397
    },
    {
        "content": "<p>Just a very minor comment: should</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cross_product_anticomm</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">×₃</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>be formulated with the minus sign on the other side of the equality?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--  The right-hand side is \"easier\" than the left-hand side</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">cross_product_anticomm</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">×₃</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">×₃</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 265775406,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1640159930
    },
    {
        "content": "<p>That seems nicer, yeah.</p>",
        "id": 265776743,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640161113
    },
    {
        "content": "<p>Thanks for the suggestion! I updated the pull request.</p>",
        "id": 265779733,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640163309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/265690192\">said</a>:</p>\n<blockquote>\n<p>You'll probably want to write out the <code>coe_fn</code>/<code>⇑</code> in the notation, so something like (untested):</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">v</span> <span class=\"bp\">`</span> <span class=\"bp\">×₃</span> <span class=\"bp\">`</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">cross_product</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">w</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Should I change the notation for <code> ×₃ </code> to the above? I don't know what <code>coe_fn</code> and <code>⇑</code> mean.</p>",
        "id": 266680917,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641213255
    },
    {
        "content": "<p>This is the pull request: <a href=\"https://github.com/leanprover-community/mathlib/pull/11181\">https://github.com/leanprover-community/mathlib/pull/11181</a></p>",
        "id": 266680965,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641213315
    },
    {
        "content": "<p>I understood that my suggestion did not work. Does <code>cross_product v w</code> pretty-print as <code>v ×₃ w</code> now?</p>",
        "id": 266681489,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641213694
    },
    {
        "content": "<p>No, it doesn't. And it is weird. I think that it did pretty print a few commits ago...</p>",
        "id": 266681964,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641214068
    },
    {
        "content": "<p>It worked when it was written as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">×₃</span> <span class=\"bp\">`</span><span class=\"o\">:</span> <span class=\"mi\">68</span> <span class=\"o\">:=</span> <span class=\"n\">cross_product</span>\n</code></pre></div>\n<p>No it doesn't work when it is written as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">localized</span> <span class=\"s2\">\"infixl ` ×₃ `: 68 := cross_product\"</span> <span class=\"k\">in</span> <span class=\"n\">vectors</span>\n</code></pre></div>",
        "id": 266682848,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641214693
    },
    {
        "content": "<p>I don't know how it works so it is still possible that the pretty print stopped due to some other change.</p>",
        "id": 266683101,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641214843
    },
    {
        "content": "<p>Should I experiment with that? Or do you see it from your knowledge?</p>",
        "id": 266683133,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641214868
    },
    {
        "content": "<p>I don't know much about the pretty-printer, and can't think of any other tricks to experiment with. I guess let's just keep it as it is.</p>",
        "id": 266684227,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641215656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> I'm pretty sure it stopped working when we made <code>cross_product</code> be a multilinear map rather than a plain function.</p>\n<p>All <code>localized</code> really does is store the quoted code so that when you later do <code>open_locale vectors</code> it will automatically run <code>local infixl </code> ×₃ <code>: 68 := cross_product</code>, so I'd be surprised if that's the cause.</p>",
        "id": 266708540,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641228966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/266708540\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> I'm pretty sure it stopped working when we made <code>cross_product</code> be a multilinear map rather than a plain function.</p>\n</blockquote>\n<p>Oh, you are absolutely right!</p>",
        "id": 266717893,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641233283
    },
    {
        "content": "<p>Instead of providing a bilinear map, would it make more sense to provide the cross product as a <code>lie_ring</code> instance?</p>",
        "id": 266799595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641297619
    },
    {
        "content": "<p>There is already a <code>lie_ring</code> instance on <code>fin 3 → ℝ</code>. (And it's not propeq to the cross product.)</p>",
        "id": 266799682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641297670
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">vec3_has_bracket</span> <span class=\"o\">:</span> <span class=\"n\">has_bracket</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bracket</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">×₃</span> <span class=\"n\">v</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">vec3_lie_ring</span> <span class=\"o\">:</span> <span class=\"n\">lie_ring</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_lie</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.map_add₂</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">lie_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_add</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">lie_self</span> <span class=\"o\">:=</span> <span class=\"n\">cross_product_self</span><span class=\"o\">,</span>\n  <span class=\"n\">leibniz_lie</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">has_bracket.bracket</span><span class=\"o\">,</span> <span class=\"n\">cross_product_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pi.add_comm_group</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- pretty printer can't use this unfortunately</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"infixl ` ×₃ `: 68 := @has_bracket.bracket _ _ vec3_has_bracket\"</span> <span class=\"k\">in</span> <span class=\"n\">vectors</span>\n</code></pre></div>",
        "id": 266799696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641297681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/266799682\">said</a>:</p>\n<blockquote>\n<p>There is already a <code>lie_ring</code> instance on <code>fin 3 → ℝ</code>.</p>\n</blockquote>\n<p>Where? <code>apply_instance</code> didn't find it for me.</p>",
        "id": 266799733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641297704
    },
    {
        "content": "<p>Weird. Maybe <code>lie_ring.pi</code> is missing from mathlib? But it certainly exists in the platonic ideal of mathlib.</p>",
        "id": 266799797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641297738
    },
    {
        "content": "<p>Ah, missing import</p>",
        "id": 266799820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641297766
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_ring.of_associative_ring\">docs#lie_ring.of_associative_ring</a></p>",
        "id": 266799852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641297799
    },
    {
        "content": "<p>This seems a situation where a human being told of a Lie bracket on <code>fin 3 → ℝ</code> would not choose the one coming from the instance... or where they would at least ask \"Are you really sure that you want the zero Lie-bracket?\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 266800971,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641298498
    },
    {
        "content": "<p>Is it possible to override the instance when the associative ring is also commutative?</p>",
        "id": 266801040,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641298551
    },
    {
        "content": "<p>I'm afraid that's non-trivial.</p>",
        "id": 266801245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641298686
    },
    {
        "content": "<p>And not desirable; we want to be able to make statements like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/commutative_ring_iff_abelian_lie_ring\">docs#commutative_ring_iff_abelian_lie_ring</a></p>",
        "id": 266801335,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1641298789
    },
    {
        "content": "<p>I guess a type synonym would solve the problem here</p>",
        "id": 266801789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641299159
    },
    {
        "content": "<p>Do people agree that working with a lie structure would be better than just having a bilinear map?</p>",
        "id": 266802004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641299330
    },
    {
        "content": "<p>It's such a specific case that it's hard to have strong feelings. Regarding the cross product as a Lie bracket is mostly just a curiosity. I'd be happy either way.</p>",
        "id": 266802237,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1641299523
    },
    {
        "content": "<p>I have never used the cross product apart from the Intro to Calculus course. So I wouldn't put it high up my prio list. But I'm just one anecdote.</p>",
        "id": 266802415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641299661
    },
    {
        "content": "<p>I also do not have strong opinions, really.  If someone asked me to provide a Lie bracket on <code>ℝ^3</code>, my first reaction would probably be \"What a weird question\".  Then I would think about the cross-product.  Finally I would think of the zero Lie bracket.</p>",
        "id": 266802578,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641299785
    },
    {
        "content": "<p>I look forward to a long thread about the seven-dimensional cross product once we finish here :-)</p>",
        "id": 266802722,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1641299924
    },
    {
        "content": "<p>But that's the last one, right?</p>",
        "id": 266802903,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1641300098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/266802578\">said</a>:</p>\n<blockquote>\n<p>If someone asked me to provide a Lie bracket on <code>ℝ^3</code>,</p>\n</blockquote>\n<p>The standard <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"fraktur\">s</mi><mi mathvariant=\"fraktur\">l</mi></mrow><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{sl}_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8414em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathfrak\">sl</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-triple with basis <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>H</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X,H,Y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 266803028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641300177
    },
    {
        "content": "<p>Oh, but that is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"fraktur\">s</mi><mi mathvariant=\"fraktur\">l</mi></mrow><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{sl}_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8414em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathfrak\">sl</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, nor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>: as the notation suggests, they are not the same!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 266807785,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641303307
    },
    {
        "content": "<p>Sure, I completely agree. But still, if you ask me to put a Lie algebra structure on a 3-dimensional space with a distinguished basis, this is the one I would pick <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 266808045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641303468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/266802237\">said</a>:</p>\n<blockquote>\n<p>It's such a specific case that it's hard to have strong feelings. Regarding the cross product as a Lie bracket is mostly just a curiosity. I'd be happy either way.</p>\n</blockquote>\n<p>I think it's sort of a curiosity, too, a sort of \"law of small numbers\" (that there are interesting coincidences for things of small cardinality or dimension).</p>\n<p>It does have some sense to it, but it takes a few isomorphisms. We start with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>=</mo><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">V=\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> as the fundamental <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"fraktur\">s</mi><mi mathvariant=\"fraktur\">o</mi></mrow><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{so}(3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">so</span></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span>-module. The adjoint representation is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mn>2</mn></msup><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda^2 V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, which is isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"fraktur\">s</mi><mi mathvariant=\"fraktur\">o</mi></mrow><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{so}(3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">so</span></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span> since it may be regarded as being antisymmetric matrices (we identify <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>V</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">V^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> using the inner product from the definition for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"fraktur\">s</mi><mi mathvariant=\"fraktur\">o</mi></mrow><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{so}(3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">so</span></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span>). Then, the Hodge star gives an isomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>=</mo><msup><mi mathvariant=\"normal\">Λ</mi><mn>2</mn></msup><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V=\\Lambda^2 V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>.  Through these isomorphims you can transport the Lie bracket for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"fraktur\">s</mi><mi mathvariant=\"fraktur\">o</mi></mrow><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{so}(3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">so</span></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>You can also consider the constant part of differential forms on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> under wedge product, using the Hodge star to identify 2-forms with 1-forms. This is the significance of cross products in 3D vector calculus.</p>",
        "id": 266826026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641312323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> What, you wouldn't choose the Heisenberg Lie algebra? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 266826106,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641312362
    },
    {
        "content": "<p>Nah, I'm a semisimple guy</p>",
        "id": 266833110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641314898
    },
    {
        "content": "<p>I almost thought \"simple guy\" based on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup><mo>=</mo><msub><mrow><mi mathvariant=\"fraktur\">s</mi><mi mathvariant=\"fraktur\">l</mi></mrow><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\R^3 = \\mathfrak{sl}_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8414em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathfrak\">sl</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> example above, until... <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> I remembered that we should strive for the mathlib level of generality.</p>",
        "id": 266865097,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1641331329
    },
    {
        "content": "<p>Ok, bad jokes aside... (Unless the following is yet another one...)</p>\n<p>I originally suggested <code>lie_ring</code> for the cross product, because I thought one would then nicely get for free any API consequences of antisymmetry and Jacobi identity. The problems pointed out back then were at least competing <code>instance</code>s (the zero bracket, which I think indeed begs the \"are you sure?\" question to humans) and perhaps notation (I wasn't sure about it). Also the later proposal of implementing the cross product as a bilinear map for sure gives a substantial amount of API for free.</p>\n<p>But in fact <code>lie_algebra R</code> (for <code>[comm_ring R]</code>) should in principle give all API of bilinearity, antisymmetry, and Jacobi identity. So in terms of reusing the maximal amount of existing API, wouldn't it be close to optimal? Except, of course, if getting access to the API requires that <code>lie_algebra</code> is an <code>instance</code>, in which case we only get all the consequences of bilinearity, antisymmetry, and Jacobi identity for the the zero Lie bracket (\"for free\" <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>).</p>",
        "id": 266865104,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1641331335
    },
    {
        "content": "<p>Just to clarify, that is not a proposal to change anything implemented right now! But since <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> brought up the possibility of <code>lie_ring</code> implementation again, I thought it might be worth still clarifying what are the merits of the different choices.</p>",
        "id": 266865687,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1641331675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span>, I didn't see your original suggestion, but your comment above nicely summarizes why I think using the <code>lie</code> spelling might be a good idea. Indeed, there's no need to change the approach in the current PR, but it certainly gives us a large pile of reusable lemmas.</p>",
        "id": 266877891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641338357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> What do you mean specifically by a \"<code>lie</code> spelling\"?</p>\n<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span> Are you aware that the current version of <a href=\"https://github.com/leanprover-community/mathlib/pull/11181\">#11181</a> contains a <code>lie_ring</code> implementation as a local instance? Design-wise, I think it's a nice idea to use the <code>lie_ring</code> instance to prove lemmas that are generally true for Lie rings, but in terms of cross product notation.</p>\n<p>I think it's good to consider the principle \"just because something is something doesn't mean that it <em>is</em> something.\" I don't see any benefit to be had defining the cross product through the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"fraktur\">s</mi><mi mathvariant=\"fraktur\">o</mi></mrow><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{so}(3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">so</span></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"fraktur\">s</mi><mi mathvariant=\"fraktur\">l</mi></mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{sl}(2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">sl</span></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span> exceptional isomorphisms, or requiring that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> be a Lie ring and that the cross product needs to be rendered as a Lie bracket. Similarly, the cross product corresponds to the imaginary part of one of the Hurwitz algebras (equivalently: the imaginary part for the quaternions), but do we need to give <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> a <code>has_mul</code> for a nonunital nonassociative algebra structure? (That would conflict with the <code>has_mul</code> from the pi instance anyway.)</p>",
        "id": 266882360,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641341666
    },
    {
        "content": "<p>There are some exceptional identities involving cross products and dot products that would be nice to have at some point. You can understand them as coming from the representation theory of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> as a Lie algebra, but they're also straightforward to prove by algebraic manipulation.</p>\n<p><em>Edit:</em> The main one would be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>u</mi><mo>×</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>w</mi><mo>×</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>u</mi><mo>⋅</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>v</mi><mo>⋅</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mi>u</mi><mo>⋅</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>v</mi><mo>⋅</mo><mi>w</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(u\\times v)\\cdot (w\\times x) = (u\\cdot w)(v\\cdot x) - (u\\cdot x)(v\\cdot w)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 266882611,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641341881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/266882360\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> What do you mean specifically by a \"<code>lie</code> spelling\"?</p>\n</blockquote>\n<p>I mean introduce a type synonym such that instead of having terms of the form <code>⇑(⇑cross_product v) w</code> we have terms of the form <code>⁅v, w⁆</code>. Neither pretty-prints in the nice <code>×₃</code> way anyway, but the latter has more existing lemmas than the former, and is shorter.</p>",
        "id": 266882715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641341940
    },
    {
        "content": "<p>Perhaps we can reuse the <del>docs#euclidean_space</del> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp\">docs#pi_Lp</a> synonym?</p>",
        "id": 266882769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641341989
    },
    {
        "content": "<p>With the rationale being; <code>pi_Lp</code> replaces the elementwise norm with the Lp norm, just as we want to replace the elementwise bracket with the geometrically meaningful one</p>",
        "id": 266882912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641342092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/266882360\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> Are you aware that the current version of <a href=\"https://github.com/leanprover-community/mathlib/pull/11181\">#11181</a> contains a <code>lie_ring</code> implementation as a local instance? Design-wise, I think it's a nice idea to use the <code>lie_ring</code> instance to prove lemmas that are generally true for Lie rings, but in terms of cross product notation.</p>\n</blockquote>\n<p>Oh, sorry, I had not noticed this! I don't have experience with local instances yet, but I think it is great if this gives access to the <code>lie_ring</code> API. I suppose that since bilinearity is currently more directly built in, a local instance of <code>lie_algebra</code> would not add much? (EDIT: Or would it? With scalars in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_algebra\">docs#lie_algebra</a> anything that  the<code>R</code> in <code>fin 3 → R</code> is a module over. Might it make a different part of API available, still?)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/cross.20product/near/266882360\">said</a>:</p>\n<blockquote>\n<p>I think it's good to consider the principle \"just because something is something doesn't mean that it <em>is</em> something.\"</p>\n</blockquote>\n<p>I fully agree! It is only for \"free API\" reasons I thought the <code>lie_ring</code> or <code>lie_algebra</code> might be appropriate. I have no strong opinions of what the cross product should be fundamentally, but I agree that it is not particularly fundamentally a Lie bracket.</p>",
        "id": 266914275,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1641375337
    }
]