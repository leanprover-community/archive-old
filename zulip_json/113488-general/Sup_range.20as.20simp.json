[
    {
        "content": "<p>I wanted to ask for a small RFC here. The theorem <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Sup_range\">docs#Sup_range</a> seems like a perfect candidate for a <code>simp</code> lemma at first glance. However, marking it as <code>simp</code> breaks the proofs of a handful (about half a dozen) <code>simp</code> lemmas about <code>supr</code> that amount to <code>by simp [supr]</code>.</p>",
        "id": 288291308,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656798055
    },
    {
        "content": "<p>You can see the sort of breakage it caused in <a href=\"https://github.com/leanprover-community/mathlib/pull/14918\">#14918</a> (though a few of the changes are due to another lemma I marked as <code>simp</code>)</p>",
        "id": 288291319,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656798088
    },
    {
        "content": "<p>Question: is this an indication that it shouldn't be <code>simp</code>? Or should I fix the proofs it breaks and mark it as <code>simp</code>?</p>",
        "id": 288291327,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656798108
    },
    {
        "content": "<p>I think we need a mechanism to say <code> ← foo</code> is a simp lemma; as simp already knows how to reduce <code>simp [foo, ←foo]</code> to a safe application.</p>",
        "id": 288291526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656798437
    },
    {
        "content": "<p>How would that work in this case? <code>←supr</code> would be marked as <code>simp</code>?</p>",
        "id": 288291802,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656798849
    },
    {
        "content": "<p>Either that, or simp could learn that <code>Sup_range</code> is an alias of <code>supr.equations.&lt;something&gt;.symm</code></p>",
        "id": 288292696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656800291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Sup_range.20as.20simp/near/288291526\">said</a>:</p>\n<blockquote>\n<p>I think we need a mechanism to say <code> ← foo</code> is a simp lemma; as simp already knows how to reduce <code>simp [foo, ←foo]</code> to a safe application.</p>\n</blockquote>\n<p>how does it do this?</p>",
        "id": 288293442,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656801594
    },
    {
        "content": "<p>You can use <code>simp [&lt;- Sup_range]</code></p>",
        "id": 288326227,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656852831
    },
    {
        "content": "<p>It would be nicer if neither of the two different ways to spell that resulted in an infinite loop!</p>",
        "id": 288326693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656853466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Sup_range.20as.20simp/near/288293442\">said</a>:</p>\n<blockquote>\n<p>how does it do this?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/lean/blob/db98bf9/library/init/meta/interactive.lean#L1259\">Here's the relevant code</a>: it looks for <code>← e</code> where <code>e</code> is a constant or local constant, and removes all other applications of <code>e</code>. Definitely not the best way to do so, but it was the simplest way.</p>",
        "id": 289171929,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657535708
    }
]