[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3009\">#3009</a> fails tests after running for 1h but doesn't tell which test failed.</p>",
        "id": 200285836,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591734639
    },
    {
        "content": "<p>The raw log suggests maybe a github actions glitch:</p>\n<div class=\"codehilite\"><pre><span></span><code>2020-06-09T17:28:40.2021012Z ##[section]Starting: Request a runner to run this job\n2020-06-09T17:28:40.4093459Z Can&#39;t find any online and idle self-hosted runner in current repository that matches the required labels: &#39;ubuntu-latest&#39;\n2020-06-09T17:28:40.4093511Z Can&#39;t find any online and idle self-hosted runner in current repository&#39;s account/organization that matches the required labels: &#39;ubuntu-latest&#39;\n2020-06-09T17:28:40.4093540Z Found online and idle hosted runner in current repository&#39;s account/organization that matches the required labels: &#39;ubuntu-latest&#39;\n2020-06-09T17:28:40.5977166Z ##[section]Finishing: Request a runner to run this job\n</code></pre></div>",
        "id": 200285969,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591734707
    },
    {
        "content": "<p>Wait, maybe not. I guess the raw log is missing even the successful steps.</p>",
        "id": 200286097,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591734751
    },
    {
        "content": "<p>OK, I ran the test locally and also got a freeze. I put on<code>-T100000</code> and got timeouts:</p>\n<div class=\"codehilite\"><pre><span></span><code>/mathlib/test/library_search/ring_theory.lean:19:3: error: (deterministic) timeout\n/mathlib/test/library_search/ring_theory.lean:18:0: error: (deterministic) timeout\n</code></pre></div>",
        "id": 200287593,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591735425
    },
    {
        "content": "<p>(By freeze I just mean that I got bored of waiting after 5+ mins of my laptop heating up).</p>",
        "id": 200287685,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591735460
    },
    {
        "content": "<p>Note that the tests succeeded for me with <code>-T100000</code> in about 1-2 mins on <code>master</code>.</p>",
        "id": 200287803,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591735526
    },
    {
        "content": "<p>Maybe we should add <code>-T100000</code> to the test build step too?</p>",
        "id": 200287857,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591735547
    },
    {
        "content": "<p>I don't know how to fix this, so probably I'll drop most of this PR.</p>",
        "id": 200288063,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591735649
    },
    {
        "content": "<p>A failure of <code>library_search</code> doesn't necessarily indicate that there is a problem with your PR: maybe you have changed the type of something, and now there are much more lemmas that could apply, and <code>library_search</code> has to try all of them and takes a crazy amount of time to do this. If the build time doesn't increase, I wouldn't be worried.</p>",
        "id": 200291850,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591737442
    },
    {
        "content": "<p>Maybe this is unveiling something weird with <code>library_search</code>. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , what do you think?</p>",
        "id": 200291949,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591737483
    },
    {
        "content": "<p>Curious! <code>set_option trace.suggest true</code> allows one to see the list of lemmas that <code>library_search</code> thinks may be relevant. On <code>master</code> it finds 1394 lemmas, and succeeds, for the test</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">leading_coeff_nth</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">leading_coeff_nth</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- exact ideal.leading_coeff_nth_mono I H</span>\n</code></pre></div>\n\n\n<p>while on Yury's branch it finds fewer, 1317, but nevertheless takes longer and fails with a timeout!</p>",
        "id": 200312549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591754256
    },
    {
        "content": "<p>My guess is that typeclass search became more expensive on Yury's branch, but I'll check the differences between the two sets of lemmas as well.</p>",
        "id": 200312600,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591754290
    },
    {
        "content": "<p>Hrm, on <code>master</code> the 1394 are a strict superset of the lemmas it finds on the branch.</p>",
        "id": 200313034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591754799
    },
    {
        "content": "<p>This does make me wonder --- if there a way for me to \"save the instance cache\", from one failed lemma application to the next? At the moment when <code>library_search</code> tries multiple lemmas, it backtracks the <code>tactic_state</code> after each failed unification of a lemma with the goal. Presumably this discards any work that was done trying to construct instances.</p>",
        "id": 200313128,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591754899
    },
    {
        "content": "<p>I wonder if there's any way to save this work instead, for subsequent lemma applications.</p>",
        "id": 200313137,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591754917
    },
    {
        "content": "<p>I would vote for merging and dropping the test. I mean, I don't expect <code>library_search</code> to succeed on complicated examples like that where there is a lot of typeclass inference under the hood. Thoughts, anyone?</p>",
        "id": 200414046,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591794876
    },
    {
        "content": "<p>Sorry, I got distracted from diagnosing the change here, to orthogonal work on library_search.</p>",
        "id": 200415736,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591795749
    },
    {
        "content": "<p>I'm a bit worried that this test taking dramatically longer is a sign of a problem, and would like to compare the size of the output in <code>trace class_instances true</code> for both master and the branch.</p>",
        "id": 200415853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591795804
    },
    {
        "content": "<p>It's late here however, so not tonight. I certainly won't object if Yury just removes that test and we merge. If I find anything later I'll report on it.</p>",
        "id": 200415902,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591795830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Tests.20fail/near/200313128\">said</a>:</p>\n<blockquote>\n<p>This does make me wonder --- if there a way for me to \"save the instance cache\", from one failed lemma application to the next? At the moment when <code>library_search</code> tries multiple lemmas, it backtracks the <code>tactic_state</code> after each failed unification of a lemma with the goal. Presumably this discards any work that was done trying to construct instances.</p>\n<p>I wonder if there's any way to save this work instead, for subsequent lemma applications.</p>\n</blockquote>\n<p>I hope that <code>simp</code> does this, because it also tries to apply a bunch of lemmas in a given context. Maybe it's hidden deep in C++ code, though?</p>",
        "id": 200421903,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591798759
    },
    {
        "content": "<p>Happily <a href=\"https://github.com/leanprover-community/mathlib/issues/3038\">#3038</a> makes this test fast again, so I've restored it there.</p>",
        "id": 200632671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591933966
    },
    {
        "content": "<p>Was there any follow-up to this? Turns out <a href=\"https://github.com/leanprover-community/mathlib/issues/3009\">#3009</a> caused some fairly severe type class slowdowns on <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> 's witt vector branch. I'm trying to diagnose now.</p>",
        "id": 204419277,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595250331
    },
    {
        "content": "<p>Let me rephrase that, it's caused severe slowdowns; I'm no longer sure they're type class related.</p>",
        "id": 204419689,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595250574
    }
]