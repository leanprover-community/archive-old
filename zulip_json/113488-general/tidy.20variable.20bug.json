[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"n\">V</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">}),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"o\">)</span> <span class=\"bp\">↔</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hUS</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"c1\">-- goals accomplished but kernel complains</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  ᾰ_w ᾰ</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  ᾰ</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  X_1</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  X</span>\n<span class=\"cm\">types contain aliased name(s): X</span>\n<span class=\"cm\">remark: the tactic `dedup` can be used to rename aliases</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Shall I open an issue? I don't <em>think</em> this is my fault...(I changed the variable X to Y and got the same error but about Y_1)</p>",
        "id": 271862401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644860917
    },
    {
        "content": "<p>I don't think this is exactly a <code>tidy</code> bug. Replacing it by <code>tidy?</code>'s suggestion causes the same error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"n\">V</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">}),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"o\">)</span> <span class=\"bp\">↔</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hUS</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_left</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span> <span class=\"o\">},</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_right</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span> <span class=\"o\">},</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271863186,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644861301
    },
    {
        "content": "<p>I worked through this; there's a highly suspicious part of the proof where we have a goal contains metavariables and the bad kind of <code>[]</code> and it's solved with <code>assumption</code>; perhaps that's the issue.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ᾰ_h_left_left</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">ᾰ_w</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ᾰ_w</span><span class=\"o\">,</span> <span class=\"n\">ᾰ_h_right</span><span class=\"o\">,</span> <span class=\"n\">ᾰ_h_left_left</span><span class=\"o\">,</span> <span class=\"n\">ᾰ_h_left_right</span><span class=\"o\">,</span> <span class=\"n\">ᾰ</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>Could that be it?</p>",
        "id": 271863575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644861464
    },
    {
        "content": "<p>I think goals of that nature are typically discouraged in normal play.</p>",
        "id": 271863659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644861488
    },
    {
        "content": "<p>So it's a bug in <code>assumption</code>?</p>",
        "id": 271864691,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644861918
    },
    {
        "content": "<p>Okay I found something strange:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"n\">V</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">}),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"o\">)</span> <span class=\"bp\">↔</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hUS</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_left</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span> <span class=\"o\">},</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span>\n    <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n      <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_right</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span> <span class=\"o\">},</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>If you remove that last <code>dsimp at *</code> then the kernel accepts it</p>",
        "id": 271865391,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644862184
    }
]