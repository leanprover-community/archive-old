[
    {
        "content": "<p>could someone kindly create a graph of imports?</p>",
        "id": 152167877,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545209185
    },
    {
        "content": "<p>do we have an import graph online?</p>",
        "id": 198992419,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590652542
    },
    {
        "content": "<p>Not yet, I think. It's WIP</p>",
        "id": 198992693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590652744
    },
    {
        "content": "<p>Also... now you have to update the title and first post of your PR <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 198992727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590652759
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 198993044,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590653034
    },
    {
        "content": "<p>Well... you're now attacking <code>nonzero_divisors</code> as well, right?</p>",
        "id": 198993141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590653078
    },
    {
        "content": "<p>It's less drastic, but it would be nice to mention it.</p>",
        "id": 198993160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590653098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Here are some bash functions that will build the import graph for you within seconds:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"k\">function</span> file_to_import <span class=\"o\">{</span>\n        sed -e <span class=\"s1\">'s/src\\///;s/.lean//;s/\\//./g'</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">function</span> import_to_file <span class=\"o\">{</span>\n        sed -e <span class=\"s1\">'s/[.]/\\//g;s/.*/src\\/&amp;.lean/'</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">function</span> list_deps <span class=\"o\">{</span>\n        find src/ -name <span class=\"s1\">'*.lean'</span> <span class=\"se\">\\</span>\n                <span class=\"p\">|</span> xargs grep <span class=\"s2\">\"^import \"</span> <span class=\"se\">\\</span>\n                <span class=\"p\">|</span> sed -e <span class=\"s1\">'s/src\\///;s/.lean:import//;s/\\//./g;s/ --.*//'</span> <span class=\"se\">\\</span>\n                <span class=\"p\">|</span> grep -v <span class=\"s2\">\"tactic.norm_num data.real.basic\"</span> <span class=\"se\">\\</span>\n                <span class=\"p\">|</span> grep -v <span class=\"s2\">\"tactic.find tactic.find\"</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217609059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606126110
    },
    {
        "content": "<p>Where does the code live for <code>leanproject import-graph</code>?</p>",
        "id": 217609092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606126134
    },
    {
        "content": "<p>Output is in <code>tsort</code> format, in other words: one edge per line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"n\">B</span>\n<span class=\"n\">C</span> <span class=\"n\">D</span>\n<span class=\"n\">E</span> <span class=\"n\">F</span>\n<span class=\"n\">A</span> <span class=\"n\">D</span>\n<span class=\"n\">A</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>etc...</p>",
        "id": 217609120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606126150
    },
    {
        "content": "<p>Searching <code>mathlib-tools</code> for <code>import-graph</code> <a href=\"https://github.com/leanprover-community/mathlib-tools/search?q=import-graph\">finds only one match in a changelog</a></p>",
        "id": 217609130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606126154
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-tools/search?q=ImportGraph\"><code>ImportGraph</code></a> finds a slightly better match, but only an unused definition.</p>",
        "id": 217609245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606126209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> it really depends on what you want to do. I guess the rendering is what is taking a long time.</p>",
        "id": 217609341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606126277
    },
    {
        "content": "<p>But if you just want the data, I guess the functions I gave above are a good first start.</p>",
        "id": 217609364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606126296
    },
    {
        "content": "<p>The default is <code>.dot</code> though right, which should be trivial to render</p>",
        "id": 217609367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606126302
    },
    {
        "content": "<p>Yeah, thanks for the above</p>",
        "id": 217609377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606126309
    },
    {
        "content": "<p>Not sure if rendering dot files the size of mathlibs import graph is trivial.</p>",
        "id": 217609449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606126331
    },
    {
        "content": "<p>I've never studied graph rendering algorithms</p>",
        "id": 217609457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606126340
    },
    {
        "content": "<p>.dot is a text format</p>",
        "id": 217609465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606126346
    },
    {
        "content": "<p>I'm not asking it to render the dot</p>",
        "id": 217609478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606126352
    },
    {
        "content": "<p>Just write it</p>",
        "id": 217609479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606126354
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">list_deps</span> <span class=\"bp\">|</span> <span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span>\n<span class=\"mi\">2779</span>\n</code></pre></div>",
        "id": 217609502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606126371
    },
    {
        "content": "<p>Although I suppose it might be running the layout engine in advance.</p>",
        "id": 217609528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606126392
    },
    {
        "content": "<p>Ooh, so you just want a <code>-&gt;</code> between the source and target, basically. And then a <code>digraph FOOBAR {</code> at the start of  the file, and a <code>}</code> at the end.</p>",
        "id": 217609557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606126412
    },
    {
        "content": "<p>Anyway, feel free to improve those bash functions</p>",
        "id": 217609579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606126431
    },
    {
        "content": "<p>Not sure I'd go as far as saying that's what I want, but that's what I imagine <code>import-graph</code> already does</p>",
        "id": 217609585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606126437
    },
    {
        "content": "<p>I just don't know what it actually does because I've never managed to invoke it successfully</p>",
        "id": 217609643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606126451
    },
    {
        "content": "<p>Hence the request for the source</p>",
        "id": 217609656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606126459
    },
    {
        "content": "<p><code>leanproject</code> is producing a dot file with layout instructions, not just the raw graph data.</p>",
        "id": 217609660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606126462
    },
    {
        "content": "<p>Found: <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/ae9119ced054eb6bec43893b73f832268e495747/mathlibtools/lib.py#L660-L681\">https://github.com/leanprover-community/mathlib-tools/blob/ae9119ced054eb6bec43893b73f832268e495747/mathlibtools/lib.py#L660-L681</a></p>",
        "id": 217609684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606126473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/import.20graph/near/217609130\">said</a>:</p>\n<blockquote>\n<p>Searching <code>mathlib-tools</code> for <code>import-graph</code> <a href=\"https://github.com/leanprover-community/mathlib-tools/search?q=import-graph\">finds only one match in a changelog</a></p>\n</blockquote>\n<p>What about actually reading that page instead of complaining about GitHub? It says it found two relevant commits.</p>",
        "id": 217621135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1606134194
    },
    {
        "content": "<p>You'll then see that this command runs <code>lean --deps</code> to get reliable import information that regex will never give you. However we are pretty strict in mathlib about import lines formatting so ideally the regex based version should almost give the same information (much much faster).</p>",
        "id": 217621272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1606134299
    },
    {
        "content": "<p>Of course running the full thing on uncompiled mathlib is a very bad idea. But on a compiled mathlib it should take less than 30 seconds.</p>",
        "id": 217621321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1606134335
    },
    {
        "content": "<p>Yeah, the key takeaway here was that <code>.dot</code> output is also doing graph layout, which I wasn't expecting. Using <code>graphml</code> output was much faster</p>",
        "id": 217621530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606134497
    },
    {
        "content": "<p>Perhaps a compromise regarding docs would be to add an \"imports\" and \"imported by\" section to each page?</p>",
        "id": 217621557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606134523
    },
    {
        "content": "<p>That might help with discovering related lemmas</p>",
        "id": 217621567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606134533
    },
    {
        "content": "<p>I'll have a go at that once a decision is made about <a href=\"https://github.com/leanprover-community/doc-gen/issues/102\">leanprover-community/doc-gen#102</a>, since they'll interact quite a bit and the <code>ImportName</code> object there will help resolve the paths.</p>",
        "id": 217621612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606134581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/import.20graph/near/217621557\">said</a>:</p>\n<blockquote>\n<p>Perhaps a compromise regarding docs would be to add an \"imports\" and \"imported by\" section to each page?</p>\n</blockquote>\n<p>Done in <a href=\"https://github.com/leanprover-community/doc-gen/issues/103\">leanprover-community/doc-gen#103</a></p>",
        "id": 218281703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606740419
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Z68oFcIeE7gKTZbpHm492XM9/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Z68oFcIeE7gKTZbpHm492XM9/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Z68oFcIeE7gKTZbpHm492XM9/image.png\"></a></div><p>With thanks to <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> for putting it somewhere sensible on the page</p>",
        "id": 218309355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606753426
    },
    {
        "content": "<p>bit of a funny name</p>",
        "id": 218309457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606753459
    },
    {
        "content": "<p>good name for a band.</p>",
        "id": 218309473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606753466
    },
    {
        "content": "<p>I had a go at building an interactive import graph for my lean project:</p>\n<p><a href=\"https://observablehq.com/@eric-wieser/lean-ga-imports\">https://observablehq.com/@eric-wieser/lean-ga-imports</a></p>\n<p>I don't know how well this would perform with a full mathlib graph...</p>",
        "id": 218409397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606822357
    },
    {
        "content": "<p>This visualisation is great! I want to see the full mathlib.</p>",
        "id": 242982970,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623915688
    },
    {
        "content": "<p>But I was having a more pragmatic question: Could we have somewhere in the docs a list of import leaves? I keep encountering files that are never imported and sometimes there's some code that's duplication of a more popular file. So I think that having such a list of orphan files will reduce this accidental duplication, and also provide instantaneous insight so as to where the mathlib frontier is.</p>",
        "id": 242983262,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623915917
    },
    {
        "content": "<p>I think this could fit into a bigger idea of making a list of all <code>src</code> files with a few stats about them (in the same style as the contributors page):</p>\n<ul>\n<li>number of imports</li>\n<li>max depth of import</li>\n<li>number of files importing it</li>\n<li>max depth of subsequent import</li>\n<li>number of lines</li>\n<li>number of declarations<br>\n...</li>\n</ul>",
        "id": 242983358,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623915968
    },
    {
        "content": "<p>Accidental duplication is best addressed by putting content where it is supposed to go, instead of at the top of the file you are working on like some kind of mini <code>for_mathlib</code></p>",
        "id": 242983475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623916066
    },
    {
        "content": "<p>Yeah of course, but I'm speaking about a retroactive change. Some duplication has already been done and I want to find it out without roaming through all files.</p>",
        "id": 242983629,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623916179
    },
    {
        "content": "<p>if there is any content that is out of place, we should fix that first. Code duplication will become obvious at that point</p>",
        "id": 242983712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623916238
    },
    {
        "content": "<p>If content is out of place there is no guarantee that it will be in a leaf file, unless you subscribe to the thesis that orphan files are new files and review quality has been decreasing over time</p>",
        "id": 242983774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623916293
    },
    {
        "content": "<p>No, I think orphan files are either new and simply yet to be used anywhere (which is fine) or somewhat old with a drift of interest that means nobody is aware of that file anymore, to the risk of redoing the work.</p>",
        "id": 242983903,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623916396
    },
    {
        "content": "<p>I'm just trying to have an awareness-raising page.</p>",
        "id": 242983935,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623916433
    },
    {
        "content": "<p>I'm still confused as to how this can happen. If you have the theory of foobars it should be in the <code>algebra.foobar</code> file, and then the next person who wants to do the theory of foobars will write their code, put it in the <code>algebra.foobar</code> file and then notice that it already exists</p>",
        "id": 242984043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623916497
    },
    {
        "content": "<p>I have on several occasions proved a theorem only to discover that it already exists because lean tells me there is a name clash</p>",
        "id": 242984112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623916536
    },
    {
        "content": "<p>Yeah, but mathematics is the art of giving different names to the same thing <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 242984195,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623916582
    },
    {
        "content": "<p>I thought it was the other way around?</p>",
        "id": 242984227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623916612
    },
    {
        "content": "<p>Typically, <code>nat.xgcd</code> and <code>pnat.xgcd</code> are basically the same thing. But they still both exist. <code>nat.xgcd</code> is well incorporated in the import graph. <code>pnat.xgcd</code> is long forgotten.</p>",
        "id": 242984281,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623916674
    },
    {
        "content": "<p>In those cases, there is a reason for both to exist</p>",
        "id": 242984362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623916722
    },
    {
        "content": "<p>and in any case, when you want <code>nat.xgcd</code> you will look for <code>nat.xgcd</code> and find it, similarly for <code>pnat</code></p>",
        "id": 242984395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623916747
    },
    {
        "content": "<p>whether or not you knew it existed before you went looking</p>",
        "id": 242984407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623916760
    },
    {
        "content": "<p>Well maybe but I have a hard believing that given that in two years nobody has ever used <code>pnat.xgcd</code></p>",
        "id": 242984408,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623916762
    },
    {
        "content": "<p>I can believe it... both <code>pnat</code> and <code>xgcd</code> are individually rare, so the combination is even more so</p>",
        "id": 242984448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623916798
    },
    {
        "content": "<p>but it's not like constants are competing to be the most used thing. You use what you need for the task in front of you. If that is <code>pnat.xgcd</code> then nothing else will substitute</p>",
        "id": 242984606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623916863
    },
    {
        "content": "<p>This for me underlines what the problem with this file is: It's not really about <code>pnat</code>. The use of <code>pnat</code> here is artificial.</p>",
        "id": 242984608,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623916864
    },
    {
        "content": "<p>And I still don't see why that's an incentive against having a list of orphan files.</p>",
        "id": 242984739,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623916934
    },
    {
        "content": "<p>what is the putative duplication in this example? Do you think <code>pnat.xgcd</code> does too much work itself instead of delegating to <code>nat.xgcd</code>?</p>",
        "id": 242984793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623916980
    },
    {
        "content": "<p>Yes. Or the other way around.</p>",
        "id": 242984816,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623917008
    },
    {
        "content": "<p>I don't mean to suggest that a list of orphan files isn't useful. I was just responding to the claim about how this relates to code duplication</p>",
        "id": 242984823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623917020
    },
    {
        "content": "<p>Okay <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 242984840,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623917033
    },
    {
        "content": "<p>graph depictions of mathlib always end up kind of useless for actual consultation</p>",
        "id": 242984926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623917070
    },
    {
        "content": "<p>but a simple database would be easier to work with</p>",
        "id": 242984953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623917102
    },
    {
        "content": "<p>To be fair, I think there's not much code duplication. Mayb some definitions and a few individual lemmas.</p>",
        "id": 242984960,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623917107
    },
    {
        "content": "<p>Could one incorporate such a database into a webpage?</p>",
        "id": 242985006,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623917146
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mathlib_stats.html\">contributor table</a> looks pretty nice and databasy</p>",
        "id": 242985080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623917170
    },
    {
        "content": "<p>Yeah okay. That's exactly what I want!</p>",
        "id": 242985109,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623917200
    },
    {
        "content": "<p>If anybody were to direct me to the relevant resources, I could do my import statistics table myself.</p>",
        "id": 242985172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623917247
    },
    {
        "content": "<p>I guess you just need the same data set that leancrawler uses (cc: <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> )</p>",
        "id": 242985302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623917331
    },
    {
        "content": "<p>Yeah most probably. But that means we can't update it regularly? Unless we let <code>leanprover_bot</code> do it?</p>",
        "id": 242985376,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623917398
    },
    {
        "content": "<p>it could be incorporated into the community web page and/or docgen</p>",
        "id": 242985458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623917455
    },
    {
        "content": "<p>Perhaps doc-gen should publish its intermediate export json (which I used in the visualization up thread) to make it easier to perform an analysis of import graphs</p>",
        "id": 242987152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623918616
    },
    {
        "content": "<p>It's probably as easy as adding a <code>cp</code> to the CI script somewhere</p>",
        "id": 242987178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623918640
    },
    {
        "content": "<p>I had a go at making a full mathlib import graph visualization here:</p>\n<p><a href=\"https://eric-wieser.github.io/doc-gen/import-graph.html\">https://eric-wieser.github.io/doc-gen/import-graph.html</a></p>\n<p>Should this be part of the mathlib docs? Or should doc-gen just host the data file?</p>",
        "id": 259753421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635630875
    },
    {
        "content": "<p>Okay this is scary. Not sure I want to work on a monster...</p>",
        "id": 259753725,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635631212
    },
    {
        "content": "<p>Did you remove the transitive imports? It might clutter quite a lot.</p>",
        "id": 259753813,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635631287
    },
    {
        "content": "<p>All I removed was <code>core:init.default</code> because that node is stupid</p>",
        "id": 259753826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635631306
    },
    {
        "content": "<p>Fun fact; <code>complete_lattice</code> imports <code>field</code>: <a href=\"/user_uploads/3121/kLLfy-ub3DXGSoMGVFc9vmco/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kLLfy-ub3DXGSoMGVFc9vmco/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/kLLfy-ub3DXGSoMGVFc9vmco/image.png\"></a></div>",
        "id": 259753981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635631479
    },
    {
        "content": "<p>This is a really nice visualization. It's really hard to make any kind of dependency graph visualization that doesn't look like a ball of yarn, but the interactivity helps a lot here</p>",
        "id": 259756933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635635482
    },
    {
        "content": "<p>There's a reasonable amount of power to tweak the cost function along edges with the library I'm using, which helps a little with untangling the ball of yarn. The heuristic is mainly \"edges strengths between files are exponential in the number of prefix components they share\", which keeps the colors together (but also induces nasty oscillations in the really deep parts of mathlib!)</p>",
        "id": 259757066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635635645
    },
    {
        "content": "<p>This is very well done, thanks! </p>\n<p>I don't have a strong preference regarding where the graph itself should be hosted, but the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\">mathlib stats</a> page should definitely link to the graph.</p>\n<blockquote>\n<p>Should this be part of the mathlib docs? Or should doc-gen just host the data file?</p>\n</blockquote>\n<p>I'd just go with whatever is more convenient.</p>",
        "id": 259757361,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635636060
    },
    {
        "content": "<p>I am once again asking you to get bored more often.</p>",
        "id": 259757384,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635636107
    },
    {
        "content": "<p>Let's just do the latter for now: <a href=\"https://github.com/leanprover-community/doc-gen/issues/142\">leanprover-community/doc-gen#142</a></p>",
        "id": 259757875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635636802
    },
    {
        "content": "<p>One idea might be to have a fish-eye lens (en/dis-abled via some checkbox) that can follow the mouse. Does <code>sigma.js</code> support that out of the box?</p>",
        "id": 259830200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635746945
    },
    {
        "content": "<p>That would be cool, but I highly doubt it is built in, and writing custom GLSL shaders to achieve it is outside the scope of what seems worthwhile</p>",
        "id": 259842553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635759074
    },
    {
        "content": "<p>I've moved the graph to a standalone repo at <a href=\"https://github.com/eric-wieser/mathlib-import-graph\">https://github.com/eric-wieser/mathlib-import-graph</a> (now live at <a href=\"https://eric-wieser.github.io/mathlib-import-graph/\">https://eric-wieser.github.io/mathlib-import-graph/</a>).</p>\n<p>This version now shows some information about how many files are selected, and node sizes reflect file sizes.</p>",
        "id": 259849350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635763716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/import.20graph/near/259757361\">said</a>:</p>\n<blockquote>\n<p>but the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\">mathlib stats</a> page should definitely link to the graph.</p>\n</blockquote>\n<p>I made a PR at <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/issues/218\">leanprover-community/leanprover-community.github.io#218</a>. Feel free to adjust.</p>",
        "id": 259852936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635766237
    },
    {
        "content": "<p>So, the import graph is awesome, but there are a few features I think it would be really nice to have. I find that as I have become more accustomed to the library, I have a vague sense of (parts of) the import graph in my head, but sometimes it would be nice to have more specific information. For example, it would be nice to have easy access to each of the following bits of information:</p>\n<ol>\n<li>which files are direct children or parents of a given file, what about grandchildren and grandparents (i.e., transitive import distance = 2), etc.? I know that the first question can be answered by the docs, and therefore the second also, but the clicking and page loads can be tedious sometimes.</li>\n<li>the (transitive) import subgraph of all ancestors, what about all descendents? I know you can see the former in the current import graph, but it would be cool if it could be re-displayed as its own subgraph, perhaps as a DAG.</li>\n<li>The subgraph between a node and one of its descendents (again represented as a DAG). This would be especially handy for knowing whether I should try to compile locally, or just push it to the CI runners and wait for the oleans.</li>\n</ol>\n<p>I have no idea how much work it would be to implement any of these things.</p>",
        "id": 294939319,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661285449
    },
    {
        "content": "<p>Are you familiar with the output of <code>leanproject  import-graph --help</code>?</p>",
        "id": 294939589,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661285584
    },
    {
        "content": "<p>For 1., you <a href=\"/user_uploads/3121/sBmyRqWr7faiqb-0FLN9K-7n/image.png\">already have it</a>  in the mathlib docs.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sBmyRqWr7faiqb-0FLN9K-7n/image.png\" title=\"already have it\"><img src=\"/user_uploads/3121/sBmyRqWr7faiqb-0FLN9K-7n/image.png\"></a></div>",
        "id": 294939598,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661285586
    },
    {
        "content": "<p>Adding more functionalities to <code>leanproject import-graph</code> is very easy, you can use anything you fancy from <a href=\"https://networkx.org/\">https://networkx.org/</a></p>",
        "id": 294939759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661285675
    },
    {
        "content": "<p>I had no idea <code>leanproject import-graph</code> existed, thanks!</p>",
        "id": 294940507,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661286061
    },
    {
        "content": "<p>Note that there is a gexf file hosted alongside the mathlib docs that contains the graph in a form importable by networkx; which is much faster than building it yourself if you just care about master</p>",
        "id": 294949261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661290186
    }
]