[
    {
        "content": "<p>I'd like to bring a bit of order to the naming of injectivity lemmas. Currently in mathlib lemmas with names ending in <code>_inj</code> come in three flavours</p>\n<ol>\n<li><code>f x = f y → x = y</code></li>\n<li><code>f x = f y ↔ x = y</code></li>\n<li><code>injective f</code></li>\n</ol>\n<p>There are also lemmas automatically generated for constructors of inductive types, which are of type 1, but with names ending <code>.inj</code>.<br>\nThere are also some lemmas in mathlib of type 2, but with names ending <code>_inj_iff</code>.</p>",
        "id": 200626959,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591925577
    },
    {
        "content": "<p>And also lemmas of type 3 with <code>injective</code> in the name!</p>",
        "id": 200627053,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591925691
    },
    {
        "content": "<p>also a few stragglers, like type 2 lemmas with LHS and RHS reversed...</p>",
        "id": 200627082,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591925748
    },
    {
        "content": "<p>Proposals, in descending order of appeal to me:</p>\n<ol>\n<li>all iff lemmas get renamed to use <code>inj_iff</code></li>\n<li>where possible change <code>_inj</code> to <code>.inj</code> and <code>_inj_iff</code> to <code>.inj_iff</code></li>\n<li>rename all injective lemmas to use the full word <code>injective</code> in the name (alternatively, change them all to just <code>inj</code>, and not distinguish types 1 and 2)</li>\n</ol>",
        "id": 200627171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591925865
    },
    {
        "content": "<p>Proposal 2 to appealing because:</p>\n<ul>\n<li>it would match the automatically generated <code>.inj</code> lemmas for constructors</li>\n<li>it would make it easier for <code>library_search</code> to discard these lemmas (which are rarely useful), without having to process strings (which is too slow).</li>\n</ul>",
        "id": 200627255,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591925939
    },
    {
        "content": "<p>The naming convention here is supposed to use <code>inj</code> exclusively for (1) or (2) and <code>injective</code> for (3)</p>",
        "id": 200628143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591927297
    },
    {
        "content": "<p>Probably we are being inconsistent about use of <code>inj_iff</code> but I would prefer to use <code>inj_iff</code> iff both versions (1) and (2) exist</p>",
        "id": 200628231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591927406
    },
    {
        "content": "<p>if only (2) exists then there is no problem and we can use <code>inj</code></p>",
        "id": 200628235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591927421
    },
    {
        "content": "<p>I think most instances of (1) are inherited from core</p>",
        "id": 200628275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591927446
    },
    {
        "content": "<p>It seems odd to throw these theorems out though. They don't appear to be any less useful than any other basic algebra lemmas</p>",
        "id": 200628295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591927514
    },
    {
        "content": "<p>It's true that they aren't well suited for backwards reasoning but that shouldn't be a problem for <code>library_search</code> which is only looking for one step proofs in any case</p>",
        "id": 200628311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591927554
    },
    {
        "content": "<p>I wasn't proposing throwing anything out, just renaming.</p>",
        "id": 200629105,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591928539
    },
    {
        "content": "<p>Maybe I will start with the low hanging fruit: using <code>injective</code> in the name if and only if the conclusion has <code>injective</code>.</p>",
        "id": 200629139,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591928607
    },
    {
        "content": "<p>To clarify the \"no throwing out\" agenda, my preference would be that every <code>iff</code> injectivity lemma was renamed to to contain <code>inj_iff</code>, for consistency, and that typically (always?) the corresponding unidirectional <code>inj</code> lemma exists as well.</p>",
        "id": 200629227,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591928715
    },
    {
        "content": "<p>Regarding <code>injective</code> lemmas, we seem to be very inconsistent between <code>X_injective</code>, <code>injective_X</code>, and sometimes also <code>X.injective</code>.</p>",
        "id": 200629295,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591928777
    },
    {
        "content": "<p>What is best?</p>",
        "id": 200629296,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591928782
    },
    {
        "content": "<p>Why not reformulate <code>f x = f y → x = y</code> as <code>injective f</code>?</p>",
        "id": 200629326,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591928859
    },
    {
        "content": "<p>It's almost the same (<code>injective</code> uses <code>{{x y}}</code>)</p>",
        "id": 200629368,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591928887
    },
    {
        "content": "<p>there are various reasons why you might want that syntactic form</p>",
        "id": 200629977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591929737
    },
    {
        "content": "<p>for one thing, if <code>f</code> would be a lambda then this doesn't come out very cleanly</p>",
        "id": 200629986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591929765
    },
    {
        "content": "<p>for example <code>a + b = a + c -&gt; b = c</code></p>",
        "id": 200629989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591929774
    },
    {
        "content": "<blockquote>\n<p>To clarify the \"no throwing out\" agenda, my preference would be that every iff injectivity lemma was renamed to to contain inj_iff, for consistency, and that typically (always?) the corresponding unidirectional inj lemma exists as well.</p>\n</blockquote>\n<p>I'm arguing for the opposite of this: get rid of the unidirectional lemmas and call all the iff statements <code>inj</code></p>",
        "id": 200630075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591929854
    },
    {
        "content": "<p>I'm not sure what the argument for the unidirectional versions is</p>",
        "id": 200630106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591929931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/naming.20of.20injectivity.20lemmas/near/200629295\">said</a>:</p>\n<blockquote>\n<p>Regarding <code>injective</code> lemmas, we seem to be very inconsistent between <code>X_injective</code>, <code>injective_X</code>, and sometimes also <code>X.injective</code>.</p>\n</blockquote>\n<p>I have a preference for <code>X_injective</code>, but I recognize that the symbol reading convention would have us name it <code>injective_X</code></p>",
        "id": 200630158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930003
    },
    {
        "content": "<p>I think <code>X_injective</code> yields better autocomplete</p>",
        "id": 200630163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930023
    },
    {
        "content": "<p>I like <code>X_injective</code>, too.</p>",
        "id": 200630169,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591930042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/naming.20of.20injectivity.20lemmas/near/200629105\">said</a>:</p>\n<blockquote>\n<p>I wasn't proposing throwing anything out, just renaming.</p>\n</blockquote>\n<p>I mean throwing out of the strike zone of <code>library_search</code></p>",
        "id": 200630214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930084
    },
    {
        "content": "<p>isn't that what you are proposing? You want a way to filter these lemmas by name</p>",
        "id": 200630220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930103
    },
    {
        "content": "<p>Okay --- getting rid of unidirectional lemmas sounds like a great idea, except for the fact that inductive types build these automatically.</p>",
        "id": 200630227,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591930122
    },
    {
        "content": "<p>the builtin ones for constructors are fine</p>",
        "id": 200630235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930142
    },
    {
        "content": "<p>they are well namespaced and required for some automatic constructions so we can't touch them</p>",
        "id": 200630243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930164
    },
    {
        "content": "<p>Ah, I see. Yes. I've just never seen an useful case where you want <code>library_search</code> to find an <code>inj</code> lemma, and the problem is that they always apply on any <code>eq</code> goal, and then <code>solve_by_elim</code> wastes time on the subsequent goals.</p>",
        "id": 200630252,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591930196
    },
    {
        "content": "<p>I tried dropping all <code>.inj</code> lemmas (which you can do without processing strings), and it slightly speeds up the test file.</p>",
        "id": 200630302,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591930225
    },
    {
        "content": "<p>I would prefer something a bit more agnostic. For example, if application of the lemma yields a subgoal with metavariables, then all goals must be achievable by <code>assumption</code></p>",
        "id": 200630318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930289
    },
    {
        "content": "<p>So it seems we are converging on the following:</p>\n<ol>\n<li>lemmas should have <code>injective</code> in the name iff they have <code>injective</code> in the conclusion</li>\n<li><code>X_injective</code> is preferable to <code>injective_X</code>.</li>\n<li>Dropping unidirectional <code>inj</code> lemmas in favour of bidirectional ones.</li>\n</ol>",
        "id": 200630369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591930352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/naming.20of.20injectivity.20lemmas/near/200630318\">said</a>:</p>\n<blockquote>\n<p>I would prefer something a bit more agnostic. For example, if application of the lemma yields a subgoal with metavariables, then all goals must be achievable by <code>assumption</code></p>\n</blockquote>\n<p>Here you're saying in particular \"by <code>assumption</code>\" as opposed to <code>solve_by_elim</code>?</p>",
        "id": 200630382,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591930398
    },
    {
        "content": "<p>yes</p>",
        "id": 200630443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930485
    },
    {
        "content": "<p>as in, no multi step proofs</p>",
        "id": 200630445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930493
    },
    {
        "content": "<p>You might have to do something slightly more complicated than straight <code>assumption</code> since you may have to try different assumptions in order to make the other hypotheses work</p>",
        "id": 200630503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930573
    },
    {
        "content": "<p>but you're only wanting this restriction if there is a subgoal with metavariables? I don't think I'm understanding the motivation here.</p>",
        "id": 200630508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591930583
    },
    {
        "content": "<p>The right way to test <code>f x = f y -&gt; x = y</code> against the current goal is to match <code>f x = f y</code> against the hypothesis and then match the goal</p>",
        "id": 200630527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930648
    },
    {
        "content": "<p>i.e. it is a forward reasoning step not backward</p>",
        "id": 200630529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930658
    },
    {
        "content": "<p>yes --- that's why I was thinking injectivity lemmas are generally outside the purview of <code>library_search</code></p>",
        "id": 200630580,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591930700
    },
    {
        "content": "<p>but since <code>library_search</code> is set up to do backward reasoning, the nearest approximation to this is to switch to forward reasoning mode if it looks like backward reasoning isn't going so well</p>",
        "id": 200630584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930710
    },
    {
        "content": "<p>most of the bidirectional <code>inj</code> lemmas should probably be <code>@[simp]</code>, and you shouldn't be resorting to <code>library_search</code> until after <code>simp</code> is done.</p>",
        "id": 200630590,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591930733
    },
    {
        "content": "<p>true, but I'm imagining a situation where the user has actually typed <code>theorem foo (h : f x = f y) : x = y := by library_search</code></p>",
        "id": 200630599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591930777
    },
    {
        "content": "<p>ah, okay</p>",
        "id": 200630602,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591930785
    },
    {
        "content": "<p>Whatever you decide and refactor here, it would be nice to remember to add it to the naming convention guide.</p>",
        "id": 200641686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591947425
    },
    {
        "content": "<p>I haven't actually got very far on the mathlib refactor, but I've recorded the ideas here in <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/60\">https://github.com/leanprover-community/leanprover-community.github.io/pull/60</a>.</p>",
        "id": 200799599,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592108935
    },
    {
        "content": "<p>It looks like that file could use some general cleanup. There's some duplication within the file and also with <a href=\"https://leanprover-community.github.io/contribute/style.html\">https://leanprover-community.github.io/contribute/style.html</a></p>",
        "id": 200799736,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592109151
    }
]