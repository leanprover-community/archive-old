[
    {
        "content": "<p>As part of a homework assignment, I wrote the following script in Coq:</p>\n<div class=\"codehilite\" data-code-language=\"Coq\"><pre><span></span><code><span class=\"kn\">Require</span> <span class=\"kn\">Import</span> <span class=\"n\">Lia</span><span class=\"o\">.</span>\n<span class=\"kn\">Notation</span> <span class=\"s2\">\"'sigma' x , B\"</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">sigT</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">at</span> <span class=\"n\">level</span> <span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"k\">right</span> <span class=\"n\">associativity</span><span class=\"o\">).</span>\n\n<span class=\"kn\">Definition</span> <span class=\"n\">half'</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sigma</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">).</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span>\n  <span class=\"k\">induction</span> <span class=\"n\">x</span> <span class=\"k\">as</span> <span class=\"o\">[|</span> <span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"n\">y</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">|</span><span class=\"n\">h</span><span class=\"o\">]]].</span>\n  <span class=\"o\">-</span> <span class=\"k\">exists</span> <span class=\"mi\">0</span><span class=\"o\">.</span> <span class=\"k\">left</span><span class=\"o\">.</span> <span class=\"kp\">reflexivity</span><span class=\"o\">.</span>\n  <span class=\"o\">-</span> <span class=\"k\">exists</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">y</span><span class=\"o\">).</span> <span class=\"k\">right</span><span class=\"o\">.</span> <span class=\"kp\">lia</span><span class=\"o\">.</span>\n  <span class=\"o\">-</span> <span class=\"k\">exists</span> <span class=\"n\">y</span><span class=\"o\">.</span> <span class=\"k\">left</span><span class=\"o\">.</span> <span class=\"kp\">exact</span> <span class=\"n\">h</span><span class=\"o\">.</span>\n<span class=\"kn\">Defined</span><span class=\"o\">.</span>\n\n<span class=\"kn\">Definition</span> <span class=\"n\">half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">half'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">existT</span> <span class=\"o\">_</span> <span class=\"n\">y</span> <span class=\"o\">_</span> <span class=\"o\">=&gt;</span> <span class=\"n\">y</span> <span class=\"k\">end</span><span class=\"o\">.</span>\n\n<span class=\"n\">Eval</span> <span class=\"k\">compute</span> <span class=\"k\">in</span> <span class=\"n\">half</span> <span class=\"mi\">6</span><span class=\"o\">.</span> <span class=\"c\">(* This prints \"3\" *)</span>\n</code></pre></div>\n<p>I tried to translate this into Lean, but I didn't get very far.</p>\n<p>First, I tried it just it with <code>∃</code> and <code>∨</code>, but this of course didn't make it past the elimination restriction.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">half_prop</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">half</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">half_prop</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- error, can only eliminate into Prop</span>\n  <span class=\"n\">exact</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Then, I tried using <code>Σ</code> and <code>⊕</code> to mirror how we got around the elimination restriction in Coq...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">half'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>...but this does not type check, because <code>⊕</code> does not accept <code>Prop</code>s as arguments.</p>\n<p>Using <code>Σ'</code> I got further, but once again died to the elimination restriction.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">half'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- can only eliminate into Prop</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Does anyone know how can I get this to work?</p>",
        "id": 285687168,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1654872940
    },
    {
        "content": "<p>Instead of ⊕, use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/psum\">docs#psum</a></p>",
        "id": 285687462,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654873066
    },
    {
        "content": "<p>You can use <code>classical.some (half_prop x)</code>, but maybe it's not what you want.</p>",
        "id": 285688064,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654873301
    },
    {
        "content": "<p>BTW <code>half_prop</code> should be a lemma, not a <code>def</code>.</p>",
        "id": 285688215,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654873350
    },
    {
        "content": "<p>(The linter will flag this)</p>",
        "id": 285688238,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654873360
    },
    {
        "content": "<p>Using <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>'s recommendation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">def</span> <span class=\"n\">half'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- can only eliminate into Prop</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 285688870,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654873604
    },
    {
        "content": "<p>Ah, it works with <code>psum</code>... why does it work with <code>psum</code> but not with <code>sum</code>?</p>",
        "id": 285688961,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1654873650
    },
    {
        "content": "<p><code>psum (α : Sort u) (β : Sort v)</code> can be applied to <code>Prop</code> because <code>Prop</code> is <code>Sort 0</code>.<br>\n<code>sum (α : Type u) (β : Type v)</code> can't be applied because <code>Type u</code> is <code>Sort (u+1)</code> so you can never get <code>Sort 0</code>.</p>",
        "id": 285689848,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654873994
    },
    {
        "content": "<p>Doesn't this mean one could always use <code>psum</code> instead of <code>sum</code>?</p>",
        "id": 285690340,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1654874213
    },
    {
        "content": "<p>I think <code>sum</code> is better behaved with respect to universe level unification, because the resulting type is in <code>Type (max u v)</code>, while <code>psum</code> has resulting type in <code>Sort (max 1 u v)</code>. Is that the only reason? I don't know.</p>",
        "id": 285691390,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654874648
    },
    {
        "content": "<p>Yes, that is the reason</p>",
        "id": 285692405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654875110
    },
    {
        "content": "<p>I need to read more about how universes work</p>",
        "id": 285695418,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1654876399
    },
    {
        "content": "<p>Thank you</p>",
        "id": 285695427,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1654876404
    }
]