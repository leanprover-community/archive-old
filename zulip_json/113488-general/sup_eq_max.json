[
    {
        "content": "<p>Is there a nice way to state the lemma <code>a ⊔ b = max a b</code>, in general, for when <code>sup</code> is not derived from <code>max</code> such as on <code>with_bot</code>, or do I just have to prove it for <code>with_bot</code></p>",
        "id": 129199027,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530881009
    },
    {
        "content": "<p>You can prove <code>sup a b = max a b</code> on any type for which <code>max</code> makes sense</p>",
        "id": 129199724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530881778
    },
    {
        "content": "<p>Oh, I see... There are two <code>lattice</code> structures on <code>with_bot</code> that don't coincide by defeq</p>",
        "id": 129199934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530882053
    },
    {
        "content": "<p>but they are the same since they have the same <code>le</code></p>",
        "id": 129199952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530882082
    },
    {
        "content": "<p>unfortunately, despite how I've said that non-defeq diamonds are evil and should be avoided, there is not much I can do about this one since it would require adding a <code>sup</code> field to <code>decidable_linear_order</code> which is in core</p>",
        "id": 129200322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530882483
    },
    {
        "content": "<p>It makes sense to add this lemma then?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">sup_eq_max</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">⊔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">sup_le</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">max_le</span> <span class=\"n\">le_sup_left</span> <span class=\"n\">le_sup_right</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 129200405,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530882597
    },
    {
        "content": "<p>/me thinks that core shouldn't be in core</p>",
        "id": 129200478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1530882651
    },
    {
        "content": "<p>Why did that message appear next to your name instead of beneath?</p>",
        "id": 129200612,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530882822
    },
    {
        "content": "<p>because he only thought it, he didn't post it</p>",
        "id": 129200630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530882841
    },
    {
        "content": "<p>There are rumours that core won't be in core in Lean 4</p>",
        "id": 129200681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530882870
    },
    {
        "content": "<blockquote>\n<p>Why did that message appear next to your name instead of beneath?</p>\n</blockquote>\n<p>Yeah, I'm old. My IRC habits betray me. (Hint: type <code>/me</code> before your message.)</p>",
        "id": 129200728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1530882946
    }
]