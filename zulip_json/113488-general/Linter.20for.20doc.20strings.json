[
    {
        "content": "<p>Is it possible to have a linter that checks the names in the doc strings? For example the beginning of <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/finite_dimensional.html\">finite_dimensional</a> is full of theorems names that are not hyperlinks. More seriously, I am sure there are quite a lot of examples where the actual theorem doesn't exist anymore.</p>",
        "id": 273675580,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646154791
    },
    {
        "content": "<p>The hard part here is figuring out whether it's a misspelled declaration name or just a regular word (since there's no special syntax for declaration links, the documentation generator just looks for words that happen to be declaration names and then linkifies them).</p>",
        "id": 273676235,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646155044
    },
    {
        "content": "<p>I think we might need a more structured markup language than markdown if we want to go down this route</p>",
        "id": 273676264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646155054
    },
    {
        "content": "<p>We might think about adopting the doc-gen4 convention for declaration links, which is this:<br>\n<code>[additive commutative monoids](##add_comm_monoid)</code></p>",
        "id": 273676308,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646155072
    },
    {
        "content": "<p><code>[##add_comm_monoid][]</code> is valid markdown for a link to <code>##add_comm_monoid</code>, right?</p>",
        "id": 273676385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646155094
    },
    {
        "content": "<p>I don't know.  If it is a valid markdown link, then it should be supported in doc-gen4.</p>",
        "id": 273676477,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646155133
    },
    {
        "content": "<p>We could probably customize its expansion to <code>[`add_comm_monoid`][##add_comm_monoid]</code></p>",
        "id": 273676557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646155164
    },
    {
        "content": "<p>(I think by default it means <code>[##add_comm_monoid][##add_comm_monoid]</code>)</p>",
        "id": 273676735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646155214
    },
    {
        "content": "<p>I have no idea how this works, so I apologize if what I am saying is nonsense. In practice if the name I write between `` exists, an hyperlink is created, and nothing happens if the name doesn't exist, right? It would be nice if the linter tells me \"hey, there will be no hyperlink here!\".</p>",
        "id": 273677015,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646155314
    },
    {
        "content": "<p>Right, but what about when you write <code> `x + y` </code>?</p>",
        "id": 273677422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646155428
    },
    {
        "content": "<p>I would guess less than half of the <code> ` </code> use in docstrings refers to lemma names</p>",
        "id": 273677572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646155466
    },
    {
        "content": "<p>Ah, you're right.</p>",
        "id": 273677686,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646155499
    },
    {
        "content": "<p>Maybe check only the \"words\" with more then, say, five characters? There will still be false positives/negatives, but much less I think. (So it should only be a warning, or something similar).</p>",
        "id": 273678204,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646155717
    },
    {
        "content": "<p>We could check for</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code><span class=\"k\">*</span> <span class=\"sb\">`i_am_the_start_of_a_bullet_point`</span> is the main theorem of unordered lists\n</code></pre></div>",
        "id": 273684755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646158071
    },
    {
        "content": "<p>In this line, at least one underscore and no spaces between ticks is likely a hit!</p>",
        "id": 273699797,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646164144
    },
    {
        "content": "<p><code>* `i_am_the_start_of_bullet n` </code> is also fairly common</p>",
        "id": 273701615,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646164825
    },
    {
        "content": "<p>rustdoc uses <code>[`foo`]</code> to generate links to entities. This isn't quite valid markdown (it will generate literal brackets if used by a non-lean-markdown aware parser) but we can intercept it in docgen and vscode hovers at least</p>",
        "id": 273727089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646176934
    },
    {
        "content": "<p>I'm not a fan of autolinkifying these, there is no declaration of intent that way</p>",
        "id": 273727269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646177034
    },
    {
        "content": "<p><code>[`foo`][]</code> <em>is valid markdown</em> though, so might be better - it works as long as the link lookup dictionary (the one we already use for bibtex references) knows how to turn backticks into a url</p>",
        "id": 273727656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646177239
    }
]