[
    {
        "content": "<p>I am struggling to prove the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pfun</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">f.fn</span> <span class=\"n\">x</span> <span class=\"n\">ha</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">f.dom</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- kind of blindly applied `suggest` to find this, might not be the best...</span>\n    <span class=\"n\">refine</span> <span class=\"n\">set.mem_preimage.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set.mem_of_eq_of_mem</span> <span class=\"n\">h</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">exists.intro</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- ⊢ f.fn x ?m_1 = y</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I think the core components I need to use to fix that <code>sorry</code> are <code>pfun.fn_apply</code> and <code>part.some_get</code>, but I'm failing to come up with anything. Does anyone have any suggestions?</p>",
        "id": 272455854,
        "sender_full_name": "David Richey",
        "timestamp": 1645217613
    },
    {
        "content": "<p>Your code doesn't compile for me - do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 272456036,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1645217719
    },
    {
        "content": "<p>that's strange, it does compile for me</p>",
        "id": 272456156,
        "sender_full_name": "David Richey",
        "timestamp": 1645217778
    },
    {
        "content": "<p>oh, it is missing the import data.pfun</p>",
        "id": 272456252,
        "sender_full_name": "David Richey",
        "timestamp": 1645217840
    },
    {
        "content": "<p>Ah, that's better. <code>apply exists.intro,</code> is pretty strange; maybe <code>use h1</code>?</p>",
        "id": 272456482,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1645217977
    },
    {
        "content": "<p>ah ok, that saves me from the second subgoal, but I think I'm mostly in the same place. To expand on what I've tried so far... I _want_ to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">use</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">rewrite</span> <span class=\"n\">pfun.fn_apply</span><span class=\"o\">,</span>\n<span class=\"n\">rewrite</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>but this gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_a</span> <span class=\"o\">:</span> <span class=\"n\">part</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">_a.get</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not sure how to tell what doesn't type check here</p>",
        "id": 272457088,
        "sender_full_name": "David Richey",
        "timestamp": 1645218191
    },
    {
        "content": "<p>There are some dependencies in there, but <code>simp</code> is able to do the rewrite.</p>",
        "id": 272457197,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645218255
    },
    {
        "content": "<p>In fact,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">f.fn</span> <span class=\"n\">x</span> <span class=\"n\">ha</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">set.mem_preimage.mpr</span> <span class=\"o\">(</span><span class=\"n\">set.mem_of_eq_of_mem</span> <span class=\"n\">h</span> <span class=\"n\">trivial</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]⟩</span>\n</code></pre></div>",
        "id": 272457211,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645218264
    },
    {
        "content": "<p>oh! I'm afraid there's more than a few instances of unfamiliar syntax for me here haha</p>",
        "id": 272457299,
        "sender_full_name": "David Richey",
        "timestamp": 1645218325
    },
    {
        "content": "<p>The angle brackets are equivalent to this in this case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">f.fn</span> <span class=\"n\">x</span> <span class=\"n\">ha</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists.intro</span> <span class=\"o\">(</span><span class=\"n\">set.mem_preimage.mpr</span> <span class=\"o\">(</span><span class=\"n\">set.mem_of_eq_of_mem</span> <span class=\"n\">h</span> <span class=\"n\">trivial</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 272457483,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645218410
    },
    {
        "content": "<p>if you don't mind, what would be the more verbose version in tactic mode?</p>",
        "id": 272457500,
        "sender_full_name": "David Richey",
        "timestamp": 1645218418
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">f.fn</span> <span class=\"n\">x</span> <span class=\"n\">ha</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"n\">set.mem_preimage.mpr</span> <span class=\"o\">(</span><span class=\"n\">set.mem_of_eq_of_mem</span> <span class=\"n\">h</span> <span class=\"n\">trivial</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272457567,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645218455
    },
    {
        "content": "<p>thank you very much! I think from here I can investigate the square bracket notation for simp</p>",
        "id": 272457691,
        "sender_full_name": "David Richey",
        "timestamp": 1645218509
    }
]