[
    {
        "content": "<p>If <code>n : nat</code> then the ideas <code>n ≠ 0</code>, <code>0 ≠ n</code>, <code>n &gt; 0</code>, <code>0 &lt; n</code>, <code>1 ≤ n</code> and <code>n ≥ 1</code> are all equivalent. I had expected that <code>0 &lt; n</code> would be the \"simp normal form\" for this idea -- am I right in thinking that such an idea should have a simp normal form? -- but <code>n ≠ 0</code> is used in plenty of places in <code>mathlib</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/linear_ordered_comm_group_with_zero.html#eq_one_of_pow_eq_one\">example 1</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/squarefree.html#unique_factorization_monoid.dvd_pow_iff_dvd_of_squarefree\">example 2</a> and there are plenty more) . Should these be changed? Or if the lemmas are not <code>simp</code> lemmas, does this somehow not matter?</p>",
        "id": 221451173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609680614
    },
    {
        "content": "<p>Arguably n \\ne 0 is useful because <code>cases h : n</code> introduces <code>n = 0</code> as a hypothesis</p>",
        "id": 221451570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609681328
    },
    {
        "content": "<p>But maybe that's a weak argument</p>",
        "id": 221451580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609681364
    },
    {
        "content": "<p>One alternative is <code>rcases eq_or_lt_of_le (nat.zero_le n) with rfl|h</code></p>",
        "id": 221456315,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609688403
    },
    {
        "content": "<p>n != 0 is used fairly frequently on nat, but I think we should stick to 0 &lt; n. If you need to get it by cases you should use <code>rcases nat.eq_zero_or_pos n with rfl|h</code>.</p>",
        "id": 221462234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609695890
    },
    {
        "content": "<p>I believe <code>_ ≠ 0</code> is used most often, and <code>0 &lt; _</code> sometimes. Here was a previous discussion, where people where overwhelmingly in favor of  <code>_ ≠ 0</code>. <br>\n<a href=\"#narrow/stream/113488-general/topic/n.20.E2.89.A0.200.20vs.200.20.3C.20n\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/n.20.E2.89.A0.200.20vs.200.20.3C.20n</a></p>\n<p>So  <code>_ ≠ 0</code> is (should be) the standard. Whether it should also be <code>simp</code>-normal form is debatable. Probably? It would probably break plenty of proofs though.</p>\n<p>These conventions also apply for <code>enat</code>, <code>nnreal</code>, <code>ennreal</code>, ...</p>",
        "id": 221475333,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609714086
    },
    {
        "content": "<p>This comment is mainly just for me trying to understand what is the purpose of <code>simp</code>and how to improve it.</p>\n<p>Does the consideration that <code>0 &lt; n</code> involves an order relation, whereas <code>n ≠ 0</code> is \"only\" an inequality play no role in this choice?  I.e. there might be some <code>simp</code> lemmas that could simplify <code>0 &lt; n</code> further than <code>n ≠ 0</code> (or the other way round)?  Is this at all important?</p>",
        "id": 221494551,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609743936
    },
    {
        "content": "<p>For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.succ_lt_succ_iff\">docs#fin.succ_lt_succ_iff</a> is tagged with <code>[simp]</code> while <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.succ_lt_succ_iff\">docs#nat.succ_lt_succ_iff</a> is not. So if I had a <code>1 &lt; n + 1</code>, that could simp to <code>0 &lt; n</code> (depending on what you include in the simp set or not).</p>",
        "id": 221494798,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609744281
    },
    {
        "content": "<p>Ok, thanks for the answer!  This means that if <code>n \\ne 0</code> were the <code>simp</code> normal form, such a simplification would not happen?</p>",
        "id": 221496022,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609745731
    },
    {
        "content": "<p>It could still simplify like that, if <code>n \\ne 0</code> were the simp-normal form of <code>0 &lt; n</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">\\</span><span class=\"n\">ne</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 221496163,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609745910
    },
    {
        "content": "<p>but like I said above, currently, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.succ_lt_succ_iff\">docs#nat.succ_lt_succ_iff</a> isn't tagged with simp</p>",
        "id": 221496175,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609745933
    },
    {
        "content": "<p>Ah, ok!  I had missed the subtlety that one was <code>simp</code> while the other one was not!  Sorry for being slow: too much information to juggle in my head, all at the same time!</p>",
        "id": 221496194,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1609745996
    },
    {
        "content": "<p>We currently have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">sup_eq_union</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊔</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Is there any downside to replacing it with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">sup_eq_union'</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">⊔</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∪</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>instead?</p>\n<p>The reason I'm asking is that I added <code>bot_eq_empty</code> as a <code>simp</code> lemma, and then the linter complains that <code>fold_sup_bot_singleton</code> is no longer in <code>simp</code> normal form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bot_eq_empty</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">fold_sup_bot_singleton</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset.fold</span> <span class=\"o\">(</span><span class=\"bp\">⊔</span><span class=\"o\">)</span> <span class=\"bp\">⊥</span> <span class=\"n\">singleton</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">fold_union_empty_singleton</span> <span class=\"n\">s</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Left-hand side simplifies from</span>\n<span class=\"cm\">  fold has_sup.sup ⊥ singleton s</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  fold has_sup.sup ∅ singleton s</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  [finset.bot_eq_empty]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>With <code>sup_eq_union'</code>, <code>fold_sup_bot_singleton</code> can be proved <code>by simp</code>, whereas currently <code>simp</code> gets stuck on the <code>sup</code>.</p>",
        "id": 230097686,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615583241
    },
    {
        "content": "<p>And does simp still prove a sup b = a union b?</p>",
        "id": 230119173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615594336
    },
    {
        "content": "<p>Yes, it does.</p>",
        "id": 230119226,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615594400
    }
]