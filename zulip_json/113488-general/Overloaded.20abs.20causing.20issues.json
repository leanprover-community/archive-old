[
    {
        "content": "<p>I think overloading abs for ordered group and complex numbers is causing issues. Here's an example: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>It throws:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ambiguous</span> <span class=\"n\">overload</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"n\">abs</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">re</span>\n  <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">abs</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"n\">c</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">keefe</span><span class=\"err\">\\</span><span class=\"n\">OneDrive</span><span class=\"err\">\\</span><span class=\"n\">Documents</span><span class=\"err\">\\</span><span class=\"n\">Lean</span><span class=\"err\">\\</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">test</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">basic</span> <span class=\"n\">overload</span> <span class=\"n\">resolution</span> <span class=\"n\">where</span> <span class=\"n\">arguments</span> <span class=\"n\">are</span> <span class=\"n\">elaborated</span> <span class=\"n\">without</span> <span class=\"n\">any</span> <span class=\"n\">information</span> <span class=\"n\">about</span> <span class=\"n\">the</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">because</span> <span class=\"n\">it</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">disambiguate</span> <span class=\"n\">overload</span> <span class=\"kn\">using</span> <span class=\"n\">the</span> <span class=\"n\">expected</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℝ</span>\n<span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">overloaded</span> <span class=\"n\">terms</span> <span class=\"n\">were</span> <span class=\"n\">applicable</span>\n  <span class=\"n\">abs</span>\n  <span class=\"n\">abs</span>\n</code></pre></div>\n\n\n<p>I'm not sure how to deal with this, as writing <code>example (a : ℂ) : a.abs = abs (a.re : ℝ) := sorry</code> doesn't help. My best guess is it has to do type class inference for <code>ordered_group</code> and for coercion to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> and they have the same priority, or something like that. I don't know how to work around (a suggestion on that would be helpful), but it also seems like this is a problem worth fixing in mathlib too. Perhaps renaming complex abs, making it protected, or changing priorities? Since complex abs is a norm, it seems like we should make it protected and then canonically use the norm notation outside of the <code>basic</code> file. Thoughts?</p>",
        "id": 199029845,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590676326
    },
    {
        "content": "<p>Not an expert on this part of mathlib, but all your suggestions sound reasonable. As a local workaround, you can use <code>open complex (hiding abs)</code> which would simulate it being <code>protected</code>.</p>",
        "id": 199030149,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590676452
    },
    {
        "content": "<p>Oh, I overlooked \"renaming complex abs\"--I don't think that one sounds reasonable <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <br>\nSince dot notation <code>a.abs</code> unambiguously gives you <code>complex.abs</code>, making it protected should be pretty much strictly better.</p>",
        "id": 199030291,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590676512
    },
    {
        "content": "<p>Ok, didn't know that dot notation works for protected so figured protecting was on equal footing with renaming. That's good to know!</p>",
        "id": 199030400,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590676555
    },
    {
        "content": "<p>The current mathlib handling of abs and norm is not optimal. We should probably study what the mathcomp people did. They explain it in <a href=\"https://hal.inria.fr/hal-02463336\">https://hal.inria.fr/hal-02463336</a></p>",
        "id": 199031171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590676891
    },
    {
        "content": "<p>Do we need <code>complex.abs</code> Why not use <code>has_norm</code>?</p>",
        "id": 199101189,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590711307
    }
]