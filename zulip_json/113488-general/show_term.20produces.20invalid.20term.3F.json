[
    {
        "content": "<p>The term <a href=\"https://gist.github.com/arademaker/d380c85c91a4f61391009f25a09ecf54#file-simple-lean-L28\">https://gist.github.com/arademaker/d380c85c91a4f61391009f25a09ecf54#file-simple-lean-L28</a> was produced by show_term from both tactic-based proofs above it. The last proof would be the more direct term-based proof. But the term produced by <code>show_term</code> is an error, Lean says <code>invalid constructor ⟨...⟩, expected type is not an inductive type</code> any explanation?</p>",
        "id": 227955223,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1614357954
    },
    {
        "content": "<p>Because it is an <code>example</code>, it doesn't infer that you're making an <code>and</code> term. So it doesn't understand that the constructor syntax you're using is valid here. You could use <code>or.inl (and.intro h.left hb)</code> for example. Or say <code>or.inl (⟨h.left, hb⟩ : (A ∧ B))</code></p>",
        "id": 227955801,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614358206
    },
    {
        "content": "<p>oh. do you mean I would have different results with I was creating a lemma instead of an example? I tried and it didn't work. Yes, the correct and more verbose proof I constructed in <a href=\"https://gist.github.com/arademaker/d380c85c91a4f61391009f25a09ecf54#file-simple-lean-L30-L33\">https://gist.github.com/arademaker/d380c85c91a4f61391009f25a09ecf54#file-simple-lean-L30-L33</a>. But don't you think it is a 'bug' of the <code>show_term</code>?</p>",
        "id": 227959098,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1614359562
    },
    {
        "content": "<p>The bug is in the pretty-printer - Lean 3 is notoriously bad at emitting expressions that contain enough information for the elaborator to read them back.</p>",
        "id": 227959241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614359633
    },
    {
        "content": "<p>I would have said \"very good, except for a couple of gotchas which people have got used to\"...</p>",
        "id": 227959551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614359766
    },
    {
        "content": "<p>Well, from my pespective it has frequently been so bad that I just avoid <code>change</code> entirely because I stand no hope of actually writing down the goal state that I was hoping to get to, and instead have to find the appropriately named refl lemmas</p>",
        "id": 227960054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614359993
    },
    {
        "content": "<p>But that might just be a function of the sorts of objects I'm working with</p>",
        "id": 227960128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614360011
    },
    {
        "content": "<p>Maybe I should blame the elaborator instead of the pretty printer though, since sometimes I just cannot write the expression I need:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/20b49fbd453fc42c91c36ee30ecb512d70f48172/src/linear_algebra/pi_tensor_product.lean#L466-L467\">https://github.com/leanprover-community/mathlib/blob/20b49fbd453fc42c91c36ee30ecb512d70f48172/src/linear_algebra/pi_tensor_product.lean#L466-L467</a></p>",
        "id": 227960317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614360113
    },
    {
        "content": "<p>Another golf:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">⟩,</span> <span class=\"n\">g.imp</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 227962926,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614361209
    },
    {
        "content": "<p>Here are some related issues: <a href=\"https://github.com/leanprover-community/mathlib/issues/5659\">#5659</a>, <a href=\"https://github.com/leanprover-community/lean/issues/394\">lean#394</a>. Note that this is very unlikely to be fixed in Lean 3; the story in Lean 4 should be much better.</p>",
        "id": 227964372,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614361742
    }
]