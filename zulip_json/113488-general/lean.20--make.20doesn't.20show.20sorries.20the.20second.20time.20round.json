[
    {
        "content": "<p>Running <code>lean --make</code> on a file with sorries gives the warnings, but only the first time it's run; is there a switch I can do to make it show the warnings every time?</p>",
        "id": 203128869,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594140497
    },
    {
        "content": "<p>You can remove the olean as a workaround</p>",
        "id": 203135814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594143951
    },
    {
        "content": "<p>I guess this works but I'd really rather not make things recompile again</p>",
        "id": 203142486,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594147359
    },
    {
        "content": "<p>You could rename the oleans and then rename them back...</p>",
        "id": 203142593,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594147436
    },
    {
        "content": "<p>Import it from another file?</p>",
        "id": 203142967,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594147596
    },
    {
        "content": "<p>which warnings do you want?</p>",
        "id": 203143004,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594147612
    },
    {
        "content": "<p>If you want to know about all the warnings then of course lean needs to rebuild the file, right?</p>",
        "id": 203143074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594147647
    },
    {
        "content": "<p>Right but if it's already built then I should be able to get the warnings? For errors, if I do <code>lean --make</code> twice I get all the errors both times, but not for warnings</p>",
        "id": 203143711,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594147891
    },
    {
        "content": "<p>If there are errors then Lean doesn't write an .olean file I think, so this is a different situation</p>",
        "id": 203144599,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594148240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/lean.20--make.20doesn't.20show.20sorries.20the.20second.20time.20round/near/203143711\">said</a>:</p>\n<blockquote>\n<p>but not for warnings</p>\n</blockquote>\n<p>I don't understand what this means</p>",
        "id": 203145050,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594148421
    },
    {
        "content": "<p>do you mean if there are only warnings?</p>",
        "id": 203145144,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594148461
    },
    {
        "content": "<p>Yeah if there are only warnings</p>",
        "id": 203145517,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594148627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/lean.20--make.20doesn't.20show.20sorries.20the.20second.20time.20round/near/203144599\">said</a>:</p>\n<blockquote>\n<p>If there are errors then Lean doesn't write an .olean file I think, so this is a different situation</p>\n</blockquote>\n<p>Ah I didn't know this, I see</p>",
        "id": 203145532,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594148633
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/e378Vu1YbCb0F0LlKc26lkgy/image.png\">image.png</a> By the way, this is what I wanted it for - it's nice to see at a glance which files are broken by a mathlib bump in a project</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/e378Vu1YbCb0F0LlKc26lkgy/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/e378Vu1YbCb0F0LlKc26lkgy/image.png\"></a></div>",
        "id": 203215102,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594163958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Hey, that looks nice! Are you preparing a PR to leanproject?</p>",
        "id": 203230728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594183146
    },
    {
        "content": "<p>I can, but it's pretty slow and pretty hacky</p>",
        "id": 203230871,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594183322
    },
    {
        "content": "<p>I didn't want to recompile <em>everything</em> each time it's run so it searches for the bytestring \"orry\" in the compiled oleans to check for sorries</p>",
        "id": 203230962,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594183455
    },
    {
        "content": "<p>lol, nice hack</p>",
        "id": 203231136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594183730
    },
    {
        "content": "<p>luckily none of my lemmas are called <code>worry</code></p>",
        "id": 203231153,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594183775
    },
    {
        "content": "<p>Wait till we start formalising self-driving cars. That will give you lots of <code>lorry</code> and <code>worry</code>...</p>",
        "id": 203231618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184504
    },
    {
        "content": "<p>Seriously, <code>worry</code> might have been a better name for <code>sorry</code>. In Isabelle, where it's from, we also have <code>oops</code>, for \"forget this proof attempt\". A common mistake is to mix up <code>oops</code> and <code>sorry</code>, ending up with a \"lemma\" one knows is unprovable. The names are clever and funny, but perhaps too clever for their own good.</p>",
        "id": 203234697,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594188850
    },
    {
        "content": "<p>We should take more advantage of the fact that lean supports unicode: I suggest replacing <code>sorry</code> with <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 203234965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594189306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I think <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> was recommending less cleverness and more clarity.</p>",
        "id": 203273461,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594218288
    },
    {
        "content": "<p>I think Johan understood.</p>",
        "id": 203273775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594218435
    },
    {
        "content": "<p>Historical side remark: as you all know, the synthetic sorrys that Lean inserts for syntax errors are printed as <code>‚Åá</code>.  Originally I wanted to print them as <code>üí©</code>, but then quickly switched to <code>‚Åá</code> to make it look more professional.</p>",
        "id": 203274566,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594218782
    },
    {
        "content": "<p>/me puts his glasses on</p>",
        "id": 203274648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594218839
    },
    {
        "content": "<p>eew</p>",
        "id": 203274693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594218846
    }
]