[
    {
        "content": "<p>I'm trying to define a board which has either of two states and I am not sure how to do it<br>\nThis is what I have written so far:<br>\nIs there a nicer way to do so? Because the Board structure asks me to pass in a state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">State</span>\n<span class=\"bp\">|</span> <span class=\"n\">Alive</span>\n<span class=\"bp\">|</span> <span class=\"n\">Dead</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Board</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">β</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and this is what I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">Point</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Something I would do in haskell would be type Point = (int, int) and type Board =  [Point].<br>\nMy end goal is John Conway's Game Of Life!</p>",
        "id": 224737976,
        "sender_full_name": "Mehul",
        "timestamp": 1612191826
    },
    {
        "content": "<p>So do something similar here: <code>Point := Int \\times Int</code> and <code>Board := list Point</code>.</p>",
        "id": 224738591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612192058
    },
    {
        "content": "<p><code>[x]</code> in Lean means the list with 1 element <code>x</code>. Not the type of lists.</p>",
        "id": 224738751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612192109
    },
    {
        "content": "<p>Is this meant to be Lean 3 code or Lean 4 code?</p>",
        "id": 224738880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612192170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Game.20Of.20Life/near/224738880\">said</a>:</p>\n<blockquote>\n<p>Is this meant to be Lean 3 code or Lean 4 code?</p>\n</blockquote>\n<p>I installed lean using brew and I have <code>Lean (version 3.23.0, Release)</code></p>",
        "id": 224739064,
        "sender_full_name": "Mehul",
        "timestamp": 1612192247
    },
    {
        "content": "<p>So <code>where</code> will also not do what you expect.</p>",
        "id": 224739118,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612192274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Game.20Of.20Life/near/224738591\">said</a>:</p>\n<blockquote>\n<p>So do something similar here: <code>Point := Int \\times Int</code> and <code>Board := list Point</code>.</p>\n</blockquote>\n<p>That doesn't quite work, maybe I have an older version?</p>",
        "id": 224739135,
        "sender_full_name": "Mehul",
        "timestamp": 1612192280
    },
    {
        "content": "<p>Mehul, you can't simply type Haskell code and hope this will work.</p>",
        "id": 224739203,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612192317
    },
    {
        "content": "<p>There certainly things in Lean that are very much inspired by Haskell, but the situation is not so simple.</p>",
        "id": 224739344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612192359
    },
    {
        "content": "<p>I mean, I get <code>don't know how to synthesize placeholder\ncontext:</code> when I type what Johan just wrote</p>",
        "id": 224739393,
        "sender_full_name": "Mehul",
        "timestamp": 1612192386
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">State</span>\n<span class=\"bp\">|</span> <span class=\"n\">Alive</span>\n<span class=\"bp\">|</span> <span class=\"n\">Dead</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Board</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">Point</span>\n</code></pre></div>",
        "id": 224739415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612192395
    },
    {
        "content": "<p>This compiles, although it migh not do exactly what you want.</p>",
        "id": 224739438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612192409
    },
    {
        "content": "<p>Oh!</p>",
        "id": 224739444,
        "sender_full_name": "Mehul",
        "timestamp": 1612192410
    },
    {
        "content": "<p>I'll try to figure out the rest and try to go through docs again</p>",
        "id": 224739575,
        "sender_full_name": "Mehul",
        "timestamp": 1612192453
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 224739589,
        "sender_full_name": "Mehul",
        "timestamp": 1612192459
    },
    {
        "content": "<p>Which docs are you using, by the way?</p>",
        "id": 224739622,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1612192476
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/\">https://leanprover.github.io/reference/</a><br>\n<a href=\"https://leanprover.github.io/lean4/doc/whatIsLean.html\">https://leanprover.github.io/lean4/doc/whatIsLean.html</a><br>\nI am just trying to understand how everything works, not sure if this is the best resource lol</p>",
        "id": 224743975,
        "sender_full_name": "Mehul",
        "timestamp": 1612194085
    },
    {
        "content": "<p>So I was right to ask whether your code was meant to be Lean 3 or Lean 4. You're mixing documentation from both versions, and they are very incompatible.</p>",
        "id": 224744156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612194145
    },
    {
        "content": "<p>I particular Haskell's <code>where</code> does exist in Lean 4.</p>",
        "id": 224744222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612194175
    },
    {
        "content": "<p>Lean 4 is very different from Lean 3 and still in development. As of now, if you want to prove things, you should stick to Lean 3. Meanwhile, Lean 4 is more suitable as a general purpose programming language.</p>",
        "id": 224744348,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1612194228
    },
    {
        "content": "<p>Lean 4 is not yet ready so the advice is stick to Lean 3 unless you know you specifically want to try Lean 4. If you do stick to Lean 3 then the entry point is <a href=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a></p>",
        "id": 224744360,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612194234
    },
    {
        "content": "<p>So if you want to code game of life and try out the experimental Lean 4, you should probably make sure that you actually have a Lean 4 installation, not a Lean 3 one :) (<a href=\"https://leanprover.github.io/lean4/doc/setup.html\">https://leanprover.github.io/lean4/doc/setup.html</a>)</p>",
        "id": 224744605,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1612194327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Game.20Of.20Life/near/224744360\">said</a>:</p>\n<blockquote>\n<p>Lean 4 is not yet ready so the advice is stick to Lean 3 unless you know you specifically want to try Lean 4. If you do stick to Lean 3 then the entry point is <a href=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a></p>\n</blockquote>\n<p>Yeah I totally understand, but reading that Lean 4 page helped me understand a lot of stuff!</p>",
        "id": 224749258,
        "sender_full_name": "Mehul",
        "timestamp": 1612195914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/113488-general/topic/Game.20Of.20Life/near/224744605\">said</a>:</p>\n<blockquote>\n<p>So if you want to code game of life and try out the experimental Lean 4, you should probably make sure that you actually have a Lean 4 installation, not a Lean 3 one :) (<a href=\"https://leanprover.github.io/lean4/doc/setup.html\">https://leanprover.github.io/lean4/doc/setup.html</a>)</p>\n</blockquote>\n<p>Gotchu!</p>",
        "id": 224749334,
        "sender_full_name": "Mehul",
        "timestamp": 1612195939
    }
]