[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/234\">lean#234</a> is a potentially huge improvement to simp performance.  (Constructing the simp set takes 25% of mathlib build time on Scott's benchmarks.)<br>\nHowever, building the core library segfaults on, well, everything except linux.  I would really appreciate it if somebody with a mac/windows could make a debugging build, run lean with a debugger, and post a backtrace of the segfault.  I have no idea where to look for problems.</p>",
        "id": 197546713,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589460339
    },
    {
        "content": "<p>What about dropping support for Windows and MacOS? It would simplify a lot of things.</p>",
        "id": 197548039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589460993
    },
    {
        "content": "<p>I'll make an attempt on Windows. It's a good excuse to get these things set up on the Windows side of my new laptop.</p>",
        "id": 197552485,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589462521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Looking.20for.20a.20mac.2Fwindows.20debugging.20expert/near/197548039\">said</a>:</p>\n<blockquote>\n<p>What about dropping support for Windows and MacOS? It would simplify a lot of things.</p>\n</blockquote>\n<p>If we had a web-based editor (which would have to interact with an external linux server) good enough to replace VSCode then one could drop support without dropping a large fraction of the userbase.<br>\n(This isn't so crazy --- lots of data scientists do their machine learning work in the cloud via jupyter / google colab)</p>",
        "id": 197554843,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589463504
    },
    {
        "content": "<p>Are the WIndows build directions still up to date? Following the directions in the repo exactly, I get</p>\n<div class=\"codehilite\"><pre><span></span><code>CMake Error at CMakeLists.txt:5 (project):\n  The CMAKE_CXX_COMPILER:\n\n    cl\n\n  is not a full path and was not found in the PATH.\n</code></pre></div>\n\n\n<p>at the cmake stage. Adding <code>-G Ninja</code> seems to work (which I remember from a while back, it's been ages since I've built Lean)</p>",
        "id": 197555076,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589463609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/Looking.20for.20a.20mac.2Fwindows.20debugging.20expert/near/197554843\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Looking.20for.20a.20mac.2Fwindows.20debugging.20expert/near/197548039\">said</a>:</p>\n<blockquote>\n<p>What about dropping support for Windows and MacOS? It would simplify a lot of things.</p>\n</blockquote>\n<p>If we had a web-based editor (which would have to interact with an external linux server) good enough to replace VSCode then one could drop support without dropping a large fraction of the userbase.<br>\n(This isn't so crazy --- lots of data scientists do their machine learning work in the cloud via jupyter / google colab)</p>\n</blockquote>\n<p>It's not that <em>perfect</em> to use Jupyter Notebooks for everything, but I guess CoCalc is the direct we somewhat want</p>",
        "id": 197555438,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589463746
    },
    {
        "content": "<p>Yeah, I agree that CoCalc is a lot of the way there. I guess there are already students whose only Lean environment is a CoCalc one, but I would guess that's not true of any of the regulars on this server</p>",
        "id": 197555842,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589463857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> This looks like it wants to compile lean using visual studio (â‰  vscode).  You should be running <code>cmake</code> and <code>make</code> inside the msys2 shell.</p>",
        "id": 197556008,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589463920
    },
    {
        "content": "<p>As in, not the \"msys2 MinGW 64-bit\" shell?</p>",
        "id": 197556307,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589464061
    },
    {
        "content": "<p>No, that's the right one.  Do you have gcc installed?  How are you calling <code>cmake</code>?</p>",
        "id": 197556462,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589464127
    },
    {
        "content": "<p>Straight from the directions at <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/make/msys2.md\">https://github.com/leanprover-community/lean/blob/master/doc/make/msys2.md</a>, then the generic ones.</p>",
        "id": 197556571,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589464179
    },
    {
        "content": "<p><code>gcc version 8.3.0 (Rev2, Built by MSYS2 project)</code></p>",
        "id": 197556727,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589464244
    },
    {
        "content": "<p>Can you paste the output of <code>cmake</code> here please?</p>",
        "id": 197556862,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589464313
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>robyl@DESKTOP-NIOLIBD MINGW64 /d/lean/lean/build/release\n$ cmake ../../src\n-- Building <span class=\"k\">for</span>: NMake Makefiles\n-- The CXX compiler identification is unknown\n-- The C compiler identification is unknown\nCMake Error at CMakeLists.txt:5 <span class=\"o\">(</span>project<span class=\"o\">)</span>:\n  The CMAKE_CXX_COMPILER:\n\n    cl\n\n  is not a full path and was not found in the PATH.\n\n  To use the NMake generator with Visual C++, cmake must be run from a shell\n  that can use the compiler cl from the <span class=\"nb\">command</span> line.  This environment is\n  unable to invoke the cl compiler.  To fix this problem, run cmake from the\n  Visual Studio Command Prompt <span class=\"o\">(</span>vcvarsall.bat<span class=\"o\">)</span>.\n\n  Tell CMake where to find the compiler by setting either the environment\n  variable <span class=\"s2\">&quot;CXX&quot;</span> or the CMake cache entry CMAKE_CXX_COMPILER to the full path\n  to the compiler, or to the compiler name <span class=\"k\">if</span> it is in the PATH.\n\n\nCMake Error at CMakeLists.txt:5 <span class=\"o\">(</span>project<span class=\"o\">)</span>:\n  The CMAKE_C_COMPILER:\n\n    cl\n\n  is not a full path and was not found in the PATH.\n\n  To use the NMake generator with Visual C++, cmake must be run from a shell\n  that can use the compiler cl from the <span class=\"nb\">command</span> line.  This environment is\n  unable to invoke the cl compiler.  To fix this problem, run cmake from the\n  Visual Studio Command Prompt <span class=\"o\">(</span>vcvarsall.bat<span class=\"o\">)</span>.\n\n  Tell CMake where to find the compiler by setting either the environment\n  variable <span class=\"s2\">&quot;CC&quot;</span> or the CMake cache entry CMAKE_C_COMPILER to the full path to\n  the compiler, or to the compiler name <span class=\"k\">if</span> it is in the PATH.\n\n\n-- Configuring incomplete, errors occurred!\nSee also <span class=\"s2\">&quot;D:/lean/lean/build/release/CMakeFiles/CMakeOutput.log&quot;</span>.\nSee also <span class=\"s2\">&quot;D:/lean/lean/build/release/CMakeFiles/CMakeError.log&quot;</span>.\n</code></pre></div>",
        "id": 197557214,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589464472
    },
    {
        "content": "<p>The ninja build is still going, very slowly. I guess because it's a debug build?</p>",
        "id": 197557286,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589464496
    },
    {
        "content": "<p><code>cmake -G Makefile</code></p>",
        "id": 197557324,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589464509
    },
    {
        "content": "<p>Or <code>ninja</code>, that should work as well.</p>",
        "id": 197557373,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589464520
    },
    {
        "content": "<p>It should take about 15 minutes or so.</p>",
        "id": 197557427,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589464541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/Looking.20for.20a.20mac.2Fwindows.20debugging.20expert/near/197554843\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Looking.20for.20a.20mac.2Fwindows.20debugging.20expert/near/197548039\">said</a>:</p>\n<blockquote>\n<p>What about dropping support for Windows and MacOS? It would simplify a lot of things.</p>\n</blockquote>\n<p>If we had a web-based editor (which would have to interact with an external linux server) good enough to replace VSCode then one could drop support without dropping a large fraction of the userbase.<br>\n(This isn't so crazy --- lots of data scientists do their machine learning work in the cloud via jupyter / google colab)</p>\n</blockquote>\n<p>This message wasn't meant to be answered... Of course I don't seriously mean we should drop Windows support. Students will always be students, you need to let them grow before assuming they use Linux.</p>",
        "id": 197557532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589464577
    },
    {
        "content": "<p>Aha. Add that at <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/make/index.md\">https://github.com/leanprover-community/lean/blob/master/doc/make/index.md</a> ? :)</p>",
        "id": 197557534,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589464578
    },
    {
        "content": "<p>Apparently the default for <code>cmake</code> is to use the visual studio compiler and nmake.  I guess the documentation doesn't mention that because we recommended to use <code>ninja</code> instead.</p>",
        "id": 197557546,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589464582
    },
    {
        "content": "<p>15 min seems about right, it's just about at the library build.</p>",
        "id": 197557613,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589464615
    },
    {
        "content": "<p>Okay, here's your first traceback. </p>\n<div class=\"codehilite\"><pre><span></span><code>FAILED: CMakeFiles/leanpkg\ncmd.exe /C <span class=\"s2\">&quot;cd /D D:\\lean\\lean\\leanpkg &amp;&amp; D:\\lean\\lean\\src\\..\\bin\\lean --make&quot;</span>\nLEAN ASSERTION VIOLATION\nFile: D:/lean/lean/src/kernel/expr.h\nLine: <span class=\"m\">62</span>\nTask: D:<span class=\"se\">\\l</span>ean<span class=\"se\">\\l</span>ean<span class=\"se\">\\l</span>ibrary<span class=\"se\">\\i</span>nit<span class=\"se\">\\l</span>ogic.lean:\nget_rc<span class=\"o\">()</span> &gt; <span class=\"m\">0</span>\n<span class=\"o\">(</span>C<span class=\"o\">)</span>ontinue, <span class=\"o\">(</span>A<span class=\"o\">)</span>bort/exit, <span class=\"o\">(</span>S<span class=\"o\">)</span>top/trap, Invoke <span class=\"o\">(</span>G<span class=\"o\">)</span>DB\nninja: build stopped: subcommand failed.\n</code></pre></div>",
        "id": 197557869,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589464723
    },
    {
        "content": "<p>I guess you want GDB output?</p>",
        "id": 197557910,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589464742
    },
    {
        "content": "<p>Yes.</p>",
        "id": 197557935,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589464758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Looking.20for.20a.20mac.2Fwindows.20debugging.20expert/near/197548039\">said</a>:</p>\n<blockquote>\n<p>What about dropping support for Windows and MacOS? It would simplify a lot of things.</p>\n</blockquote>\n<p>I may be missing some key context here but would this mean that I could no longer run new versions of (the community fork of) Lean on MacOS? This would make me very sad.</p>",
        "id": 197558657,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589465162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Looking.20for.20a.20mac.2Fwindows.20debugging.20expert/near/197546713\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/lean/issues/234\">lean#234</a> is a potentially huge improvement to simp performance.  (Constructing the simp set takes 25% of mathlib build time on Scott's benchmarks.)<br>\nHowever, building the core library segfaults on, well, everything except linux.  I would really appreciate it if somebody with a mac/windows could make a debugging build, run lean with a debugger, and post a backtrace of the segfault.  I have no idea where to look for problems.</p>\n</blockquote>\n<p>I might just be able to help with this but time is always very tight for me so I regret that I cannot commit. If at all possible, I will make an attempt at the weekend.</p>",
        "id": 197558818,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589465233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, it was not at all a serious suggestion. Patrick likes to make provocative statements. :-)</p>",
        "id": 197559023,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589465302
    },
    {
        "content": "<p>PHEW!</p>",
        "id": 197559214,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589465320
    },
    {
        "content": "<p>Thanks :-)</p>",
        "id": 197559310,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589465326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> , <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> , I get the same lean assertion violation on macos.</p>",
        "id": 197561784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589465898
    },
    {
        "content": "<p>I'm not sure what command to run with <code>gdb</code>.</p>",
        "id": 197561805,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589465907
    },
    {
        "content": "<p><code>gdb --args ~/lean/bin/lean --make</code> in the <code>library</code> directory.  Then type <code>r</code> to start running.  And then type <code>bt</code> after it crashed.</p>",
        "id": 197561897,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589465950
    },
    {
        "content": "<p>I'm assuming you mean <code>gdb --args ../bin/lean --make</code> in the <code>library</code> directory.</p>",
        "id": 197562430,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589466159
    },
    {
        "content": "<p>Yes.</p>",
        "id": 197562783,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589466381
    },
    {
        "content": "<p>I'm having issues with gdb on WIndows, this is where I'm at so far.</p>\n<div class=\"codehilite\"><pre><span></span><code>robyl@DESKTOP-NIOLIBD MINGW64 /d/lean/lean/library\n$ gdb --args ../bin/lean --make\nGNU gdb <span class=\"o\">(</span>GDB<span class=\"o\">)</span> <span class=\"m\">8</span>.2.1\nCopyright <span class=\"o\">(</span>C<span class=\"o\">)</span> <span class=\"m\">2018</span> Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version <span class=\"m\">3</span> or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nType <span class=\"s2\">&quot;show copying&quot;</span> and <span class=\"s2\">&quot;show warranty&quot;</span> <span class=\"k\">for</span> details.\nThis GDB was configured as <span class=\"s2\">&quot;x86_64-pc-msys&quot;</span>.\nType <span class=\"s2\">&quot;show configuration&quot;</span> <span class=\"k\">for</span> configuration details.\nFor bug reporting instructions, please see:\n&lt;http://www.gnu.org/software/gdb/bugs/&gt;.\nFind the GDB manual and other documentation resources online at:\n    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.\n\nFor help, <span class=\"nb\">type</span> <span class=\"s2\">&quot;help&quot;</span>.\nType <span class=\"s2\">&quot;apropos word&quot;</span> to search <span class=\"k\">for</span> commands related to <span class=\"s2\">&quot;word&quot;</span>...\nTraceback <span class=\"o\">(</span>most recent call last<span class=\"o\">)</span>:\n  File <span class=\"s2\">&quot;&lt;string&gt;&quot;</span>, line <span class=\"m\">3</span>, in &lt;module&gt;\nModuleNotFoundError: No module named <span class=\"s1\">&#39;libstdcxx&#39;</span>\n/etc/gdbinit:6: Error in sourced <span class=\"nb\">command</span> file:\nError <span class=\"k\">while</span> executing Python code.\nReading symbols from ../bin/lean...done.\n<span class=\"o\">(</span>gdb<span class=\"o\">)</span> r\nStarting program: /d/lean/lean/bin/lean --make\n<span class=\"o\">[</span>New Thread <span class=\"m\">8416</span>.0x2b80<span class=\"o\">]</span>\n<span class=\"o\">[</span>New Thread <span class=\"m\">8416</span>.0xa8c<span class=\"o\">]</span>\n<span class=\"o\">[</span>New Thread <span class=\"m\">8416</span>.0x5ec<span class=\"o\">]</span>\n<span class=\"o\">[</span>New Thread <span class=\"m\">8416</span>.0x32d4<span class=\"o\">]</span>\n<span class=\"o\">[</span>Thread <span class=\"m\">8416</span>.0x32d4 exited with code <span class=\"m\">0</span><span class=\"o\">]</span>\n<span class=\"o\">[</span>Thread <span class=\"m\">8416</span>.0xa8c exited with code <span class=\"m\">0</span><span class=\"o\">]</span>\n<span class=\"o\">[</span>Thread <span class=\"m\">8416</span>.0x5ec exited with code <span class=\"m\">0</span><span class=\"o\">]</span>\n<span class=\"o\">[</span>Inferior <span class=\"m\">1</span> <span class=\"o\">(</span>process <span class=\"m\">8416</span><span class=\"o\">)</span> exited normally<span class=\"o\">]</span>\n<span class=\"o\">(</span>gdb<span class=\"o\">)</span> bt\nNo stack.\n<span class=\"o\">(</span>gdb<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197563115,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589466587
    },
    {
        "content": "<p>Trying to figure out what's up with the error...</p>",
        "id": 197563129,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589466598
    },
    {
        "content": "<p>Ok, this time lean didn't crash.  Can you remove all olean files and then try the same <code>gdb</code> invocation again please?</p>",
        "id": 197563259,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589466659
    },
    {
        "content": "<p>After working out how to <code>codesign</code> <code>gdb</code>, I'm back...</p>",
        "id": 197563375,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589466716
    },
    {
        "content": "<p>Now I get:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n<span class=\"n\">Starting</span> <span class=\"n\">program</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">scott</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"c1\">--make</span>\n<span class=\"o\">[</span><span class=\"n\">New</span> <span class=\"n\">Thread</span> <span class=\"mi\">0</span><span class=\"n\">x1703</span> <span class=\"n\">of</span> <span class=\"n\">process</span> <span class=\"mi\">64332</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">New</span> <span class=\"n\">Thread</span> <span class=\"mi\">0</span><span class=\"n\">x1a03</span> <span class=\"n\">of</span> <span class=\"n\">process</span> <span class=\"mi\">64332</span><span class=\"o\">]</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"bp\">`/</span><span class=\"n\">BuildRoot</span><span class=\"bp\">/</span><span class=\"n\">Library</span><span class=\"bp\">/</span><span class=\"n\">Caches</span><span class=\"bp\">/</span><span class=\"n\">com</span><span class=\"bp\">.</span><span class=\"n\">apple</span><span class=\"bp\">.</span><span class=\"n\">xbs</span><span class=\"bp\">/</span><span class=\"n\">Binaries</span><span class=\"bp\">/</span><span class=\"n\">Libc_darwin</span><span class=\"bp\">/</span><span class=\"n\">install</span><span class=\"bp\">/</span><span class=\"n\">TempContent</span><span class=\"bp\">/</span><span class=\"n\">Objects</span><span class=\"bp\">/</span><span class=\"n\">Libc</span><span class=\"bp\">.</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">libsystem_darwin</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"bp\">.</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">Objects</span><span class=\"bp\">-</span><span class=\"n\">normal</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">/</span><span class=\"n\">darwin_vers</span><span class=\"bp\">.</span><span class=\"n\">o&#39;</span><span class=\"o\">:</span> <span class=\"n\">can&#39;t</span> <span class=\"kn\">open</span> <span class=\"n\">to</span> <span class=\"n\">read</span> <span class=\"n\">symbols</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span><span class=\"bp\">.</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"bp\">`/</span><span class=\"n\">BuildRoot</span><span class=\"bp\">/</span><span class=\"n\">Library</span><span class=\"bp\">/</span><span class=\"n\">Caches</span><span class=\"bp\">/</span><span class=\"n\">com</span><span class=\"bp\">.</span><span class=\"n\">apple</span><span class=\"bp\">.</span><span class=\"n\">xbs</span><span class=\"bp\">/</span><span class=\"n\">Binaries</span><span class=\"bp\">/</span><span class=\"n\">Libc_darwin</span><span class=\"bp\">/</span><span class=\"n\">install</span><span class=\"bp\">/</span><span class=\"n\">TempContent</span><span class=\"bp\">/</span><span class=\"n\">Objects</span><span class=\"bp\">/</span><span class=\"n\">Libc</span><span class=\"bp\">.</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">libsystem_darwin</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"bp\">.</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">Objects</span><span class=\"bp\">-</span><span class=\"n\">normal</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">/</span><span class=\"n\">dirstat</span><span class=\"bp\">.</span><span class=\"n\">o&#39;</span><span class=\"o\">:</span> <span class=\"n\">can&#39;t</span> <span class=\"kn\">open</span> <span class=\"n\">to</span> <span class=\"n\">read</span> <span class=\"n\">symbols</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span><span class=\"bp\">.</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"bp\">`/</span><span class=\"n\">BuildRoot</span><span class=\"bp\">/</span><span class=\"n\">Library</span><span class=\"bp\">/</span><span class=\"n\">Caches</span><span class=\"bp\">/</span><span class=\"n\">com</span><span class=\"bp\">.</span><span class=\"n\">apple</span><span class=\"bp\">.</span><span class=\"n\">xbs</span><span class=\"bp\">/</span><span class=\"n\">Binaries</span><span class=\"bp\">/</span><span class=\"n\">Libc_darwin</span><span class=\"bp\">/</span><span class=\"n\">install</span><span class=\"bp\">/</span><span class=\"n\">TempContent</span><span class=\"bp\">/</span><span class=\"n\">Objects</span><span class=\"bp\">/</span><span class=\"n\">Libc</span><span class=\"bp\">.</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">libsystem_darwin</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"bp\">.</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">Objects</span><span class=\"bp\">-</span><span class=\"n\">normal</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">/</span><span class=\"n\">dirstat_collection</span><span class=\"bp\">.</span><span class=\"n\">o&#39;</span><span class=\"o\">:</span> <span class=\"n\">can&#39;t</span> <span class=\"kn\">open</span> <span class=\"n\">to</span> <span class=\"n\">read</span> <span class=\"n\">symbols</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span><span class=\"bp\">.</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"bp\">`/</span><span class=\"n\">BuildRoot</span><span class=\"bp\">/</span><span class=\"n\">Library</span><span class=\"bp\">/</span><span class=\"n\">Caches</span><span class=\"bp\">/</span><span class=\"n\">com</span><span class=\"bp\">.</span><span class=\"n\">apple</span><span class=\"bp\">.</span><span class=\"n\">xbs</span><span class=\"bp\">/</span><span class=\"n\">Binaries</span><span class=\"bp\">/</span><span class=\"n\">Libc_darwin</span><span class=\"bp\">/</span><span class=\"n\">install</span><span class=\"bp\">/</span><span class=\"n\">TempContent</span><span class=\"bp\">/</span><span class=\"n\">Objects</span><span class=\"bp\">/</span><span class=\"n\">Libc</span><span class=\"bp\">.</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">libsystem_darwin</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"bp\">.</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">Objects</span><span class=\"bp\">-</span><span class=\"n\">normal</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">/</span><span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">o&#39;</span><span class=\"o\">:</span> <span class=\"n\">can&#39;t</span> <span class=\"kn\">open</span> <span class=\"n\">to</span> <span class=\"n\">read</span> <span class=\"n\">symbols</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span><span class=\"bp\">.</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"bp\">`/</span><span class=\"n\">BuildRoot</span><span class=\"bp\">/</span><span class=\"n\">Library</span><span class=\"bp\">/</span><span class=\"n\">Caches</span><span class=\"bp\">/</span><span class=\"n\">com</span><span class=\"bp\">.</span><span class=\"n\">apple</span><span class=\"bp\">.</span><span class=\"n\">xbs</span><span class=\"bp\">/</span><span class=\"n\">Binaries</span><span class=\"bp\">/</span><span class=\"n\">Libc_darwin</span><span class=\"bp\">/</span><span class=\"n\">install</span><span class=\"bp\">/</span><span class=\"n\">TempContent</span><span class=\"bp\">/</span><span class=\"n\">Objects</span><span class=\"bp\">/</span><span class=\"n\">Libc</span><span class=\"bp\">.</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">libsystem_darwin</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"bp\">.</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">Objects</span><span class=\"bp\">-</span><span class=\"n\">normal</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">/</span><span class=\"n\">variant</span><span class=\"bp\">.</span><span class=\"n\">o&#39;</span><span class=\"o\">:</span> <span class=\"n\">can&#39;t</span> <span class=\"kn\">open</span> <span class=\"n\">to</span> <span class=\"n\">read</span> <span class=\"n\">symbols</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span><span class=\"bp\">.</span>\n<span class=\"n\">LEAN</span> <span class=\"n\">ASSERTION</span> <span class=\"n\">VIOLATION</span>\n<span class=\"n\">File</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">scott</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">kernel</span><span class=\"bp\">/</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">h</span>\n<span class=\"n\">Line</span><span class=\"o\">:</span> <span class=\"mi\">62</span>\n<span class=\"n\">Task</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">scott</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">library</span><span class=\"bp\">/</span><span class=\"n\">init</span><span class=\"bp\">/</span><span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>\n<span class=\"n\">get_rc</span><span class=\"o\">()</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"n\">ontinue</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"n\">bort</span><span class=\"bp\">/</span><span class=\"kn\">exit</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"n\">top</span><span class=\"bp\">/</span><span class=\"n\">trap</span>\n</code></pre></div>",
        "id": 197563418,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589466723
    },
    {
        "content": "<p>I assume I should type <code>S</code> to stop, before I run <code>bt</code>?</p>",
        "id": 197563498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589466747
    },
    {
        "content": "<p>Doing that reports:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">bt</span>\n<span class=\"bp\">#</span><span class=\"mi\">0</span>  <span class=\"mi\">0</span><span class=\"n\">x00007fff6588fb66</span> <span class=\"k\">in</span> <span class=\"err\">??</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">system</span><span class=\"bp\">/</span><span class=\"n\">libsystem_kernel</span><span class=\"bp\">.</span><span class=\"n\">dylib</span>\n<span class=\"bp\">#</span><span class=\"mi\">1</span>  <span class=\"mi\">0</span><span class=\"n\">x00007fff65a5a080</span> <span class=\"k\">in</span> <span class=\"n\">pthread_kill</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">system</span><span class=\"bp\">/</span><span class=\"n\">libsystem_pthread</span><span class=\"bp\">.</span><span class=\"n\">dylib</span>\n<span class=\"bp\">#</span><span class=\"mi\">2</span>  <span class=\"mi\">0</span><span class=\"n\">x00007fff657eb1ae</span> <span class=\"k\">in</span> <span class=\"n\">abort</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">system</span><span class=\"bp\">/</span><span class=\"n\">libsystem_c</span><span class=\"bp\">.</span><span class=\"n\">dylib</span>\n<span class=\"bp\">#</span><span class=\"mi\">3</span>  <span class=\"mi\">0</span><span class=\"n\">x00007fff9da5c520</span> <span class=\"k\">in</span> <span class=\"err\">??</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">4</span>  <span class=\"mi\">0</span><span class=\"n\">x00007fffffffffdf</span> <span class=\"k\">in</span> <span class=\"err\">??</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">5</span>  <span class=\"mi\">0</span><span class=\"n\">xffffffffefbf6120</span> <span class=\"k\">in</span> <span class=\"err\">??</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">6</span>  <span class=\"mi\">0</span><span class=\"n\">x0000000101d81aa8</span> <span class=\"k\">in</span> <span class=\"err\">??</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">7</span>  <span class=\"mi\">0</span><span class=\"n\">x00007ffeefbf6120</span> <span class=\"k\">in</span> <span class=\"err\">??</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">8</span>  <span class=\"mi\">0</span><span class=\"n\">x000000010008d499</span> <span class=\"k\">in</span> <span class=\"n\">lean</span><span class=\"bp\">::</span><span class=\"n\">debuggable_exit</span> <span class=\"o\">()</span> <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">scott</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">util</span><span class=\"bp\">/</span><span class=\"n\">debug</span><span class=\"bp\">.</span><span class=\"n\">cpp</span><span class=\"o\">:</span><span class=\"mi\">80</span>\n<span class=\"n\">Backtrace</span> <span class=\"n\">stopped</span><span class=\"o\">:</span> <span class=\"n\">frame</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">save</span> <span class=\"n\">the</span> <span class=\"n\">PC</span>\n</code></pre></div>",
        "id": 197563553,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589466769
    },
    {
        "content": "<p>This looks like a release build.  Could you try this again with a debug build (<code>-DCMAKE_BUILD_TYPE=Debug</code>)?</p>",
        "id": 197563686,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589466826
    },
    {
        "content": "<p>oops!</p>",
        "id": 197563769,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589466847
    },
    {
        "content": "<p>Hmm, no, here's what I ran:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">mkdir</span> <span class=\"bp\">-</span><span class=\"n\">p</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">debug</span>\n<span class=\"n\">cd</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">debug</span>\n<span class=\"n\">cmake</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_BUILD_TYPE</span><span class=\"bp\">=</span><span class=\"n\">DEBUG</span> <span class=\"bp\">-</span><span class=\"n\">G</span> <span class=\"n\">Ninja</span> <span class=\"bp\">../../</span><span class=\"n\">src</span>\n<span class=\"n\">ninja</span>\n</code></pre></div>",
        "id": 197563949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589466919
    },
    {
        "content": "<p>Hmm, this should actually work.</p>",
        "id": 197564220,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589467039
    },
    {
        "content": "<p>Let's see what happens here. I took a tea break in the hopes it would be done when I got back, but nope!</p>",
        "id": 197564385,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589467113
    },
    {
        "content": "<p>I ran <code>git clean -xfd</code> and rebuilt, with exactly the same output...</p>",
        "id": 197565234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589467476
    },
    {
        "content": "<p>I'm not really sure what is going on on macos.  I don't think you're doing anything wrong per se.</p>",
        "id": 197565841,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589467730
    },
    {
        "content": "<p>Is there an expected time until error? Been going ~20 min so far.</p>",
        "id": 197566105,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589467849
    },
    {
        "content": "<p>The error should appear almost immediately when compiling the standard library.  The assertion violation happens in <code>init/logic.lean</code>.</p>",
        "id": 197566297,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589467935
    },
    {
        "content": "<p>Then I guess I'm killing this gdb run...</p>",
        "id": 197566542,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589468040
    },
    {
        "content": "<p>It seems to have built an olean for every file in core.</p>",
        "id": 197566602,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589468052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> You might have better luck with <code>lldb</code>. Or not.</p>",
        "id": 197567670,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589468445
    },
    {
        "content": "<p>I better sleep. I'll try tomorrow.</p>",
        "id": 197567977,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589468547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> If you're still here, can you try to finish compiling <code>library</code>.  And then in a separate call, compile the <code>leanpkg</code> directory?</p>",
        "id": 197568069,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589468588
    },
    {
        "content": "<p>In or outside of gdb?</p>",
        "id": 197568155,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589468626
    },
    {
        "content": "<p>I killed the last session and cleared the oleans. Trying again to see how long it took. Almost have them all back.</p>",
        "id": 197568281,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589468656
    },
    {
        "content": "<p>Inside gdb, just in case something interesting happens.</p>",
        "id": 197568379,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589468692
    },
    {
        "content": "<p>Okay, so I've had no errors in gdb, a olean file exists for every lean in core. Still two lean threads running at full throttle. gdb output isn't changing.</p>",
        "id": 197569161,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589468957
    },
    {
        "content": "<p>Kill gdb and start again?</p>",
        "id": 197569194,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589468969
    },
    {
        "content": "<p>(Keeping the current oleans?)</p>",
        "id": 197569221,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589468980
    },
    {
        "content": "<p>Let's first wait until it's finished.</p>",
        "id": 197569631,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589469121
    },
    {
        "content": "<p>Is it possibly nondeterministic and, if so, maybe it can also fail on linux?</p>",
        "id": 197569764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589469157
    },
    {
        "content": "<p>Well, I'm down to one thread at full throttle now.</p>",
        "id": 197571123,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589469697
    },
    {
        "content": "<p>Okay, it built the library and leanpkg with no errors.</p>",
        "id": 197576248,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589471723
    },
    {
        "content": "<p>That's unfortunate.</p>",
        "id": 197576324,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589471758
    },
    {
        "content": "<p>looks like 3.11.0 is built okay on Mac. a few more builds will get to the breaking change.</p>",
        "id": 197576978,
        "sender_full_name": "Nam",
        "timestamp": 1589472016
    },
    {
        "content": "<p>Also 3.12 is fine.  The crash is due to the PR: <a href=\"https://github.com/leanprover-community/lean/issues/234\">lean#234</a></p>",
        "id": 197577060,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589472059
    },
    {
        "content": "<p>yeah, that PR is based on <code>v3.11.0</code></p>",
        "id": 197577272,
        "sender_full_name": "Nam",
        "timestamp": 1589472143
    },
    {
        "content": "<p>Generally speaking, setting up an ASan+UBSan build has saved me many times developing Lean 4 and debugging its runtime. I can't promise it will help in this case, of course.</p>",
        "id": 197577500,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589472238
    },
    {
        "content": "<p>the stack trace points to some ref counting issue</p>",
        "id": 197577658,
        "sender_full_name": "Nam",
        "timestamp": 1589472292
    },
    {
        "content": "<p>so maybe msan would help</p>",
        "id": 197577744,
        "sender_full_name": "Nam",
        "timestamp": 1589472326
    },
    {
        "content": "<p>use-after-frees are detected by asan, not msan</p>",
        "id": 197578527,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589472606
    },
    {
        "content": "<p>yeah, you're right.</p>",
        "id": 197578606,
        "sender_full_name": "Nam",
        "timestamp": 1589472647
    },
    {
        "content": "<p>Ok, building with <code>-fsanitize=address -fsanitize=undefined</code> now.</p>",
        "id": 197578714,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589472693
    },
    {
        "content": "<p>(I hope that concatenates instead of overrides the sanitizers. Lean 4 CI is using <code>-fsanitize=address,undefined</code>)</p>",
        "id": 197578984,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589472803
    },
    {
        "content": "<p>after bisecting, i think the very first commit in that PR is the cause <a href=\"https://github.com/leanprover-community/lean/pull/234/commits/26ae0a7fec042d80820b14b54eaa8b199888d3ba\">https://github.com/leanprover-community/lean/pull/234/commits/26ae0a7fec042d80820b14b54eaa8b199888d3ba</a></p>",
        "id": 197579036,
        "sender_full_name": "Nam",
        "timestamp": 1589472826
    },
    {
        "content": "<p>I've already run it with <code>-fsanitize=address</code> and it just found pages worth of leaks, but no real problems.  It's ok if only UB is sanitized now.</p>",
        "id": 197579359,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589472940
    },
    {
        "content": "<p>Oh, wow.  This begins well:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">frontends</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">cmd_table</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span> <span class=\"n\">runtime</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">load</span> <span class=\"n\">of</span> <span class=\"n\">value</span> <span class=\"mi\">30</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"n\">value</span> <span class=\"n\">for</span> <span class=\"n\">type</span> <span class=\"err\">&#39;</span><span class=\"n\">bool&#39;</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">kernel</span><span class=\"bp\">/</span><span class=\"kn\">inductive</span><span class=\"bp\">/</span><span class=\"kn\">inductive</span><span class=\"bp\">.</span><span class=\"n\">cpp</span><span class=\"o\">:</span><span class=\"mi\">99</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span> <span class=\"n\">runtime</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">load</span> <span class=\"n\">of</span> <span class=\"n\">value</span> <span class=\"mi\">236</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"n\">value</span> <span class=\"n\">for</span> <span class=\"n\">type</span> <span class=\"err\">&#39;</span><span class=\"n\">bool&#39;</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">kernel</span><span class=\"bp\">/</span><span class=\"kn\">inductive</span><span class=\"bp\">/</span><span class=\"kn\">inductive</span><span class=\"bp\">.</span><span class=\"n\">cpp</span><span class=\"o\">:</span><span class=\"mi\">99</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span> <span class=\"n\">runtime</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">load</span> <span class=\"n\">of</span> <span class=\"n\">value</span> <span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"n\">value</span> <span class=\"n\">for</span> <span class=\"n\">type</span> <span class=\"err\">&#39;</span><span class=\"n\">bool&#39;</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">library</span><span class=\"bp\">/</span><span class=\"n\">user_recursors</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">runtime</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">load</span> <span class=\"n\">of</span> <span class=\"n\">value</span> <span class=\"mi\">88</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"n\">value</span> <span class=\"n\">for</span> <span class=\"n\">type</span> <span class=\"err\">&#39;</span><span class=\"n\">bool&#39;</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">library</span><span class=\"bp\">/</span><span class=\"n\">user_recursors</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">runtime</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">load</span> <span class=\"n\">of</span> <span class=\"n\">value</span> <span class=\"mi\">18</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"n\">value</span> <span class=\"n\">for</span> <span class=\"n\">type</span> <span class=\"err\">&#39;</span><span class=\"n\">bool&#39;</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">library</span><span class=\"bp\">/</span><span class=\"n\">projection</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span> <span class=\"n\">runtime</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">load</span> <span class=\"n\">of</span> <span class=\"n\">value</span> <span class=\"mi\">179</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"n\">value</span> <span class=\"n\">for</span> <span class=\"n\">type</span> <span class=\"err\">&#39;</span><span class=\"n\">bool&#39;</span>\n</code></pre></div>",
        "id": 197580997,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589473593
    },
    {
        "content": "<p><a href=\"https://pastebin.com/DB9eLMpG\">https://pastebin.com/DB9eLMpG</a></p>",
        "id": 197584734,
        "sender_full_name": "Nam",
        "timestamp": 1589475209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284601\">@Nam</span> Thanks to your backtrace I was able to fix the issue.</p>",
        "id": 197590929,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589477837
    },
    {
        "content": "<p>you're welcome.</p>",
        "id": 197591740,
        "sender_full_name": "Nam",
        "timestamp": 1589478254
    },
    {
        "content": "<p>This is what I believe happened.  (But all I know about the error is a backtrace, so this might be wrong.)  The segfault happened in the deserialization code, which looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">simp_lemma</span> <span class=\"n\">sl</span><span class=\"p\">;</span>\n<span class=\"n\">deser</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">sl</span><span class=\"p\">;</span>\n</code></pre></div>\n\n\n<p>Inside the <code>&gt;&gt;</code>, <code>sl</code> is assigned.  At this point the destructor for <code>sl</code> is called, and then the segfault happens according to the backtrace.  Note that we call the default constructor for <code>simp_lemma</code> here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">simp_lemma</span><span class=\"o\">::</span><span class=\"n\">simp_lemma</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"n\">simp_lemma</span><span class=\"p\">(</span><span class=\"n\">g_dummy</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n</code></pre></div>\n\n\n<p>And this dummy was an \"exotic\" simp lemma.  Usually the <code>m_kind</code> field indicates which subclass of <code>simp_lemma_cell</code> we have, e.g. <code>Simp</code> means <code>regular_simp_lemma_cell</code>.  But the dummy lemma was of type <code>simp_lemma_cell</code> even though it had kind <code>Simp</code>.<br>\nUnfortunately that's all I've got.  I can't explain how this leads to a double-free of an expression.</p>",
        "id": 197592209,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589478477
    }
]