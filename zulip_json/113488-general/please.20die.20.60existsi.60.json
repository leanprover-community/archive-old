[
    {
        "content": "<p>I don't want to have to teach <code>existsi</code>, Rob wrote <code>use</code> precisely because <code>existsi</code> had some problems which mathematicians were running into. But I still know this one use case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- use _, -- fails</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- Oh, says the student, it actually wants a *nat*\"</span>\n  <span class=\"c1\">-- actual use case was `I.fg` for `I` an ideal</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a reason why <code>use _</code> can't work?</p>",
        "id": 276359675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648052432
    },
    {
        "content": "<p>Is <code>refine ⟨_, _⟩</code> a suitable alternative?</p>",
        "id": 276359866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648052506
    },
    {
        "content": "<p>What happens if <code>h</code> is reducible? Update: it results in the same error.</p>",
        "id": 276359887,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648052513
    },
    {
        "content": "<p>What if there is a nat in the local context?</p>",
        "id": 276360366,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648052661
    },
    {
        "content": "<p><code>use 0</code> works, <code>use _</code> doesn't.</p>",
        "id": 276360481,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648052698
    },
    {
        "content": "<p>Or if the target type  is an instance and its in the local context?</p>",
        "id": 276360526,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648052713
    },
    {
        "content": "<p>ok, even that fails.</p>",
        "id": 276362249,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648053266
    },
    {
        "content": "<p>seems to be deliberate: <a href=\"/user_uploads/3121/ooYKqwSSHOmroQ1mF0nId3wb/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ooYKqwSSHOmroQ1mF0nId3wb/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ooYKqwSSHOmroQ1mF0nId3wb/image.png\"></a></div>",
        "id": 276362314,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648053292
    },
    {
        "content": "<p>I guess it's like <code>apply</code> in that you can't always make it guess so well, because <code>use ⟨0, rfl⟩</code> solves the goal</p>",
        "id": 276362695,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648053445
    },
    {
        "content": "<p>We've recently had a thread about this but I can't find it anymore (searching for <code>use</code> returns a lot of unrelated results as you might imagine).</p>",
        "id": 276365271,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648054353
    },
    {
        "content": "<p>The reason <code>use _</code> doesn't work is because given the goal <code>⊢ ∃ x : ℕ × string, true</code> you can use both <code>use 1 \"2\"</code> as well as <code>use (1, \"2\")</code> iirc.</p>",
        "id": 276365432,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648054421
    },
    {
        "content": "<p>I usually use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#fsplit\">tactic#fsplit</a> for the <code>use _</code> use case. It's the \"split and preserve order\" tactic.</p>",
        "id": 276365668,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648054504
    },
    {
        "content": "<p>I believe a few people, including me, thought that this special case is too surprising and not worth it.</p>",
        "id": 276365675,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648054505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20status.3F/near/270889888\">this</a> the discussion you're talking about?</p>\n<p>This is how it was implemented in <a href=\"https://github.com/leanprover-community/mathlib4/blob/a6473fce98ba6df6821d3fe1c0d7824bdbbd11c9/Mathlib/Tactic/Use.lean#L14\">Mathlib4</a>:</p>\n<blockquote>\n<p><code>use e₁, e₂, ⋯</code> applies the tactic <code>refine ⟨e₁, e₂, ⋯, ?_⟩</code> and then tries<br>\nto close the goal with <code>trivial</code> (which may or may not close it). It's<br>\nuseful, for example, to advance on existential goals, for which terms as<br>\nwell as proofs of some claims about them are expected.</p>\n</blockquote>",
        "id": 276369465,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648055855
    },
    {
        "content": "<p>Oh the <code>refine</code> solution works great for me</p>",
        "id": 276421847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648083283
    }
]