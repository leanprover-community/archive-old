[
    {
        "content": "<p>I'm having trouble understanding a timeout in <a href=\"https://github.com/leanprover-community/mathlib/issues/8761\">#8761</a>: I modified some typeclass instances on <code>intermediate_field</code> so they are as general as the <code>subalgebra</code> instances they are defined in terms of. In combination with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.gal.is_scalar_tower\">docs#polynomial.gal.is_scalar_tower</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/8761/files\">this caused a timeout here</a>, but the weird thing is: there is no actual loop in the instances, yet it keeps trying to infer the <code>fact</code> parameter to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.gal.is_scalar_tower\">docs#polynomial.gal.is_scalar_tower</a>, receiving a cached failure, and trying again. How is this happening, and how can we stop this from happening?</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/Vierkantor/keeps-trying-to-infer-this/src/field_theory/polynomial_galois_group.lean#L123\">Here's a slightly minimized test case. I didn't manage to minimize this any further - apparently it's a subtle issue.</a></p>",
        "id": 250325973,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629708981
    },
    {
        "content": "<p>Is it actually a loop, or does bumping the heartbeat limit let it succeed?</p>",
        "id": 250327467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629710124
    },
    {
        "content": "<p>I have left it compiling that file on the command line for like 15 minutes, without any indication of finishing. So if it's not forever, it's at least for way too long.</p>",
        "id": 250327716,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629710291
    },
    {
        "content": "<p>Although that was with a lot of <code>set_option trace.whatever</code> enabled. Perhaps it will be a \"bit\" faster without so much I/O...</p>",
        "id": 250327891,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629710456
    },
    {
        "content": "<p>Indeed, now the instance correctly fails within \"only\" 5 minutes.</p>",
        "id": 250328171,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629710694
    },
    {
        "content": "<p>From some more testing with <code>is_def_eq_detail</code> later, and it looks like the real issue is that it's trying to unify <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.gal.algebra\">docs#polynomial.gal.algebra</a><code> p p.splitting_field : algebra p.splitting_field p.splitting_field</code> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.id\">docs#algebra.id</a><code> p.splitting_field</code>, which causes a huge mass of unfolds, and the repeated <code>fact</code> inference is a side-effect of this unification. Since we don't really care about the definition of <code>gal.algebra</code>, I'll just mark it as <code>irreducible</code> so the attempted unification doesn't take so long. Or is there a better way?</p>",
        "id": 250482587,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629810840
    },
    {
        "content": "<p>This sounds like it might be another manifestation of <a href=\"#narrow/stream/113488-general/topic/odd.20repeated.20type.20class.20search\">this issue</a>.</p>",
        "id": 250493134,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1629815415
    },
    {
        "content": "<p>Good point, that looks like it's exactly the same issue.</p>",
        "id": 250494387,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629815886
    },
    {
        "content": "<p>For now, it seems I successfully worked around the issue by putting back the old <code>is_scalar_tower</code> instance as a specialization of the others, so it will get applied quickly in the common cases.</p>",
        "id": 250494908,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629816106
    },
    {
        "content": "<p>That's what I ended up doing for many of the generalized module instances</p>",
        "id": 250496442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629816713
    }
]