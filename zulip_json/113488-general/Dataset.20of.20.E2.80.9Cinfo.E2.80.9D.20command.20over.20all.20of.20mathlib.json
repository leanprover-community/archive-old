[
    {
        "content": "<p>I’m interested in running the lean server “info” command for all text positions in all mathlib files.  Before I go about doing this, has anyone else attempted this?  Does the dataset exist somewhere?  How about the code?  Such information would be useful as a machine learning training data set.</p>",
        "id": 188255440,
        "sender_full_name": "Jason Rute",
        "timestamp": 1581721188
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> did something similar for the tactic tex-ifier</p>",
        "id": 188265485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581733997
    },
    {
        "content": "<p>Do you mean <a href=\"https://github.com/leanprover-community/format_lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean\">https://github.com/leanprover-community/format_lean</a>?  That is sort of where I got the idea (through <span class=\"user-mention\" data-user-id=\"249373\">@Stanislas Polu</span>).  However, if all I want to do right now is grab the raw data, it might be easier for me to just do it from scratch.</p>",
        "id": 188266884,
        "sender_full_name": "Jason Rute",
        "timestamp": 1581737022
    },
    {
        "content": "<p>I would be curious for any tips however.  It seems that the Lean server is extraordinarily finicky.</p>",
        "id": 188267192,
        "sender_full_name": "Jason Rute",
        "timestamp": 1581737751
    },
    {
        "content": "<p>is there more to the problem than you've stated? It seems pretty simple (if expensive) to me</p>",
        "id": 188267246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581737863
    },
    {
        "content": "<p>It is pretty much as I said.  I think in the end I will try to clean up the data, and I probably want to play with the pretty printer (like using pp.all set to true).  I may even want to go back and try to inject my own tracing tactic into the proofs to pull out more information, but for now I just want to see how well this idea works.  It should give me a lot of data about Lean proofs.</p>",
        "id": 188267758,
        "sender_full_name": "Jason Rute",
        "timestamp": 1581738914
    },
    {
        "content": "<p>I'm almost certain that pp.all on every character of every file is more than you can store, because you are likely to hit one of the printing worst cases somewhere.</p>",
        "id": 188267997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581739501
    },
    {
        "content": "<p>Note that asking only for \"info\" on every character is going to miss a lot of proofs, since you get no info about term proofs, and these make up a significant fraction of mathlib proofs</p>",
        "id": 188268048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581739564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> :</p>\n<ul>\n<li>I shouldn't need to run on all characters, just all \"words\".  I could also do other things to compress the dataset if needed.</li>\n<li><code>pp.all</code> maxes out at a certain (smallish) number of characters and replaces parts with <code>...</code>.  That itself is not ideal, but I can at least get a sense for how often this happens.</li>\n<li>I'm mostly interested right now in tactic proofs.  I do agree, however, I'm going to miss all the term proofs.</li>\n<li>More upsetting, I'm not going to get separate results for all the tactic steps combined by <code>;</code> since \"info\" doesn't print the goals separately.</li>\n<li>Unless this is a massively expensive computation, I can always iterate to improve this data collection method.  (The next step would be to insert a custom tracing tactic into the code at certain spots, but I'm afraid this will take a lot longer to run.  I could also hack the lean server code, but that involves learning C++...)</li>\n</ul>",
        "id": 188288320,
        "sender_full_name": "Jason Rute",
        "timestamp": 1581782119
    }
]