[
    {
        "content": "<p>Can someone explain the reason for</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lt_succ_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>with two identical statements, the first one being a def and the second a lemma. (This is in core).</p>",
        "id": 193457483,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586442498
    },
    {
        "content": "<p>Of the two, <code>lt.base</code> is definitely the odd one out. Possibly <a href=\"https://github.com/leanprover-community/lean/blob/master/tests/lean/run/eq9.lean\" title=\"https://github.com/leanprover-community/lean/blob/master/tests/lean/run/eq9.lean\">https://github.com/leanprover-community/lean/blob/master/tests/lean/run/eq9.lean</a> may have something to do with it</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pattern</span><span class=\"o\">]</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">base</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pattern</span><span class=\"o\">]</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">step</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">lt_succ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span>       <span class=\"o\">:=</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">lt_succ</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193460994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586444055
    },
    {
        "content": "<p>I don't know whether being a def affects its being used in pattern matching like this</p>",
        "id": 193461078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586444095
    },
    {
        "content": "<p>Because Lean won't unfold theorems.</p>",
        "id": 193461404,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586444245
    },
    {
        "content": "<p>And you want to pattern-match on the constructors of <code>&lt;</code>.</p>",
        "id": 193461427,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586444258
    }
]