[
    {
        "content": "<p>I have code roughly analagous to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p_nonzero_some</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n<span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">option.is_some</span><span class=\"o\">]</span> <span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p_nonzero</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">option.get</span> <span class=\"o\">(</span><span class=\"n\">p_nonzero_some</span> <span class=\"n\">n_nonzero</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">succ_p</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p_nonzero</span> <span class=\"n\">n_nonzero</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p_nonzero</span><span class=\"o\">,</span> <span class=\"n\">p_nonzero_some</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But I really don’t know how to prove the goal.  The context looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>n : ℕ\nn_nonzero : n ≠ 0\n⊢ option.get _ + 1 = n\n</code></pre></div>\n<p>My actual use-case is using option.get for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finmap.lookup\">docs#finmap.lookup</a>, since I don’t think there’s a non-<code>option</code> variant.</p>",
        "id": 319260205,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1672772241
    },
    {
        "content": "<p>Not sure if this maps to your use case, but could you do <code>cases n, contradiction, refl</code>?</p>",
        "id": 319263487,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1672773378
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">succ_p</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p_nonzero</span> <span class=\"n\">n_nonzero</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works as well as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">succ_p</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p_nonzero</span> <span class=\"n\">n_nonzero</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">n_nonzero</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319264355,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672773725
    },
    {
        "content": "<p>Aah, shame on me for posting an oversimplified example <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>. I think I it gave me some inspiration now though, so thanks for the input!</p>",
        "id": 319268263,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1672775238
    },
    {
        "content": "<p>Oh the curse of MWEs!</p>",
        "id": 319269222,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672775615
    }
]