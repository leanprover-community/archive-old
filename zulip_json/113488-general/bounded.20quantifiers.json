[
    {
        "content": "<p>I've seen these referred to in different places. I've inferred that a bounded forall is <code>{α : Sort*} {p : α → Prop} : ∀ x, p x</code> and a bounded exists is <code>{α : Sort*} {p : α → Prop} : ∃ x, p x</code>. In some places, they're called <code>ball</code> and <code>bex</code>. In <code>mathlib/docs/naming.md</code> (only, it appears), they are called <code>bforall</code> and <code>bexists</code>.</p>\n<p>There is also notation <code>∀ x ∈ s, t</code> that refers to a bounded forall and produces <code>∀ (x : α), x ∈ s → t</code>. It works similarly for exists. In <a href=\"https://github.com/leanprover/lean/blob/f59c2f0ef59fdc1833b6ead6adca721123bd7932/tests/lean/run/cute_binders.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/f59c2f0ef59fdc1833b6ead6adca721123bd7932/tests/lean/run/cute_binders.lean\"><code>lean/tests/lean/run/cute_binders.lean</code></a>, there is even this rather interesting code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">lower</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upper</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">lower</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">upper</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">L</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">U</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">range</span> <span class=\"n\">L</span> <span class=\"n\">U</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span>\n<span class=\"kn\">variables</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- #check a ∈ s</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">binder_types</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- ∀ (b c a : ℕ), b ∈ s → c ∈ s → a ∈ s → a + b + c &gt; 0 : Prop</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ∀ (a : ℕ), a &lt; 5 → p a (a + 1) : Prop</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- ∀ (a b : ℕ), a ∈ [2, 3] → b ∈ [2, 3] → p a b</span>\n</pre></div>\n\n\n<p>So, to my questions: Where is this bounded quantifier notation defined? Does it work wherever <code>binders</code> is found in <code>notation</code>? What are its limitations, e.g. w.r.t. the <code>p : α → Prop</code> or notation (<code>∈</code>, <code>&lt;</code>, etc.) used?</p>",
        "id": 125723227,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524749661
    },
    {
        "content": "<p>I think as you suggest, it's baked into the <code>binder</code> notation. I'm actually unclear on what is accepted. I think it might accept any infix operator: <code>∀ x ⊕ unit, list x</code></p>",
        "id": 125723696,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524750260
    },
    {
        "content": "<p>OMG, I never understood all these \"ball\". I always thought: \"What ball? There is no distance here, why is this called ball?\"</p>",
        "id": 125723790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524750457
    },
    {
        "content": "<blockquote>\n<p>OMG, I never understood all these \"ball\". I always thought: \"What ball? There is no distance here, why is this called ball?\"</p>\n</blockquote>\n<p>Part of the motivation for writing this up was also to help others who were as confused as I was. <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 125723909,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524750611
    },
    {
        "content": "<p>My only excuse is I was seeing this in contexts not too far away from actual balls, like <a href=\"https://github.com/leanprover/mathlib/blob/14a19bf3d2589a9801ef281808d8e4faa90db2b1/data/analysis/topology.lean#L88\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/14a19bf3d2589a9801ef281808d8e4faa90db2b1/data/analysis/topology.lean#L88\">https://github.com/leanprover/mathlib/blob/14a19bf3d2589a9801ef281808d8e4faa90db2b1/data/analysis/topology.lean#L88</a> which is about topological space but not metric spaces, hence maximising the confusion probability</p>",
        "id": 125724000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524750818
    },
    {
        "content": "<p>Sean, what's that orange thing next to the small mathematician in your reaction?</p>",
        "id": 125725893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524753241
    },
    {
        "content": "<p>A b(ounded for)all. <span class=\"emoji emoji-26bd\" title=\"soccer\">:soccer:</span></p>",
        "id": 125726857,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524754204
    },
    {
        "content": "<blockquote>\n<p>Sean, what's that orange thing next to the small mathematician in your reaction?</p>\n</blockquote>\n<p>If you hover over the emoji with your mouse, a popup will explain what the emoji tries to communicate (-;</p>",
        "id": 125732320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524761375
    },
    {
        "content": "<p>As Mario <a href=\"#narrow/stream/116395-maths/subject/property.20applies.20to.20all.20elements.20of.20list/near/125884401\" title=\"#narrow/stream/116395-maths/subject/property.20applies.20to.20all.20elements.20of.20list/near/125884401\">pointed out</a> to me, there are yet more names for bounded quantifiers: <code>forall_mem</code> and <code>exists_mem</code>. These are used in (at least) <code>data/list/basic.lean</code>, <code>data/finset.lean</code>, and <code>data/multiset.lean</code>.</p>",
        "id": 125884559,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525076980
    },
    {
        "content": "<p>Arguably, <code>forall_mem</code> is more accurate than <code>ball</code> because it explicitly describes the <code>mem</code> bound of the quantification.</p>",
        "id": 125884625,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525077071
    },
    {
        "content": "<p>There is a reasonable argument for <code>ball_mem</code> instead of <code>forall_mem</code> since it is a mem bound on a bounded forall, but that's like half overlapping names and a direct reading looks more like <code>forall_mem</code></p>",
        "id": 125884752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525077314
    },
    {
        "content": "<p>Currently, <code>ball</code> and <code>bex</code> are only used to describe \"generic\" bounded forall (some predicate) in <code>logic.basic</code></p>",
        "id": 125884797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525077378
    },
    {
        "content": "<p>I actually like <code>forall_mem</code> for the reason you said.</p>",
        "id": 125884798,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525077380
    },
    {
        "content": "<p>The lack of <code>forall</code> in <code>ball</code> and <code>exists</code> in <code>bex</code> means that they don't show up in <code>grep</code>, which is unfortunate for those of us who rely on old-school tools. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 125884911,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525077615
    },
    {
        "content": "<blockquote>\n<p>those of us who rely on old-school tools. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>Yes, I'm still looking for a Lean plugin for good old <code>ed</code></p>",
        "id": 125884914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525077662
    },
    {
        "content": "<p>And a punched card computer that supports UTF-8?</p>",
        "id": 125884964,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525077811
    },
    {
        "content": "<p>The obvious solution is to shorten <code>forall</code> and <code>exists</code> to <code>all</code> and <code>ex</code> :)</p>",
        "id": 125885027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525077922
    },
    {
        "content": "<blockquote>\n<p>The obvious solution is to shorten <code>forall</code> and <code>exists</code> to <code>all</code> and <code>ex</code> <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>That would be <code>totally</code> <code>canonically</code> <code>exact</code>in the <code>next</code> <code>contextual</code> <code>parallel</code> universe that <code>extends</code> this one.</p>",
        "id": 125885086,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525078078
    },
    {
        "content": "<p>There's no way I'm going to try and avoid subsequences</p>",
        "id": 125885189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525078215
    },
    {
        "content": "<p>If you kick vscode enough times it shows prefixes only</p>",
        "id": 125885191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525078246
    },
    {
        "content": "<p>Fair enough, we can grep with word boundaries</p>",
        "id": 125885205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525078310
    },
    {
        "content": "<p>Tee hee, yet more names. <code>forall_prop</code> and <code>exists_prop</code> in <code>data/list.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">all_iff_forall_prop</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">all</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">any_iff_exists_prop</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">any</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>which are actually used differently in <code>logic/basic.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">forall_prop_of_true</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">forall_prop_of_false</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">exists_prop</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">exists_prop_of_true</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">exists_prop_of_false</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125885407,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525078725
    },
    {
        "content": "<p>the <code>prop</code> in <code>all_iff_forall_prop</code> is only there for disambiguation, it could just be <code>all_iff_forall'</code> which is marginally less descriptive</p>",
        "id": 125885859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525079645
    },
    {
        "content": "<p>Maybe it should be called <code>all_to_bool</code> instead, since there is a hidden <code>to_bool</code> coercion there</p>",
        "id": 125885877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525079751
    },
    {
        "content": "<p>But then it seems that <code>all_iff_forall</code> should be called <code>all_iff_forall_mem</code> to be consistent with the other <code>forall_mem</code>s.</p>",
        "id": 125885971,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525079909
    },
    {
        "content": "<p>So you'd have <code>all_iff_forall_mem</code> and <code>all_iff_forall_mem'</code>.</p>",
        "id": 125885977,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525079922
    },
    {
        "content": "<p>Or even <code>all_iff_forall_bool</code> and <code>all_iff_forall_mem</code>?</p>",
        "id": 125885986,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525079984
    },
    {
        "content": "<p>true, although I reserve the right to start lopping off the right hand side of a theorem name if we all know where it's going</p>",
        "id": 125885990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525079995
    },
    {
        "content": "<blockquote>\n<p>The obvious solution is to shorten <code>forall</code> and <code>exists</code> to <code>all</code> and <code>ex</code> :)</p>\n</blockquote>\n<p>Let me just make the passing comment that there was a time a few months ago when Mario stopped what he was doing and wrote a bunch of one-line docstrings covering many of the important concepts in mathlib, and after that I found that old-skool grepping suddenly became a lot more effective.</p>",
        "id": 125887758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525083688
    },
    {
        "content": "<p>For example, I once wanted to know whether surjections were covered in Lean, and I grepped the Lean source code for \"surjection\" and got nothing at all.</p>",
        "id": 125887801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525083745
    },
    {
        "content": "<p>then after the docstrings, I grepped again and I found the word in a docstring and then I looked at the correponding theorem and found my mistake -- it's \"surjective\" I should be looking for.</p>",
        "id": 125887805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525083778
    },
    {
        "content": "<p>so a better solution is to put the keywords in the docs :-)</p>",
        "id": 125887812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525083807
    },
    {
        "content": "<blockquote>\n<p>so a better solution is to put the keywords in the docs :-)</p>\n</blockquote>\n<p>Yes, that is useful in general. But a consistent naming scheme that allows one to consistently associate names with concepts is useful as documentation of the theorem itself <em>as well as</em> documentation within a proof using the theorem.</p>\n<p>Using the surjective example, I wouldn't like to see one theorem's name use <code>surjective</code> while another used <code>onto</code>, even though the theorems are referring to the same thing.</p>",
        "id": 125888856,
        "sender_full_name": "Sean Leather",
        "timestamp": 1525085951
    },
    {
        "content": "<p>That would be <code>epic</code>.</p>",
        "id": 125889121,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1525086507
    },
    {
        "content": "<p>Oh using the joy_<code>cat</code> is super clever.</p>",
        "id": 125889184,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1525086707
    },
    {
        "content": "<p>Cool, didn't know that one existed. Will make use of it (-;</p>",
        "id": 125889234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525086810
    }
]