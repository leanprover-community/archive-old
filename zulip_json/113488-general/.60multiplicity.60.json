[
    {
        "content": "<p><code>multiplicity a b : enat</code> is the biggest <code>n</code> such that <code>a^n</code> divides <code>b</code> (or +infty if a^n divides b for all nats n). Now <code>enat</code> is implemented using <code>roption</code>, and <code>ring_theory.multiplicity</code> is full of <code>get</code>s which are really annoying to use. I think for what I'm doing (valuation rings) it might be much easier to just have this map taking values in <code>with_top nat</code>. </p>\n<p>Why is <code>multiplicity</code> <code>enat</code>-valued, and is there room for a <code>with_top nat</code>-valued version of this function? I'm running into all sorts of decidability issues with <code>enat</code>, because <code>0.dom</code> is decidable because <code>0</code> is in nat, but other things are decidable because I'm a mathematician so everything is decidable, and I'm getting type class diamonds.</p>",
        "id": 209703199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599768859
    },
    {
        "content": "<p>Should I just refactor <code>multiplicity</code>?</p>",
        "id": 209703226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599768882
    },
    {
        "content": "<p>the answer to \"why is <code>multiplicity</code> <code>enat</code>-valued\" is \"because it was written 2 years ago\"</p>",
        "id": 209703667,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599769149
    },
    {
        "content": "<p>more precisely, <a href=\"https://github.com/leanprover-community/mathlib/commit/b9c5eb05effa1dd3a9d9e10efef7e164d9752f47#diff-c5c00511a698cb8c90e4cc2268ac7694\">on Jan 6, 2019</a></p>",
        "id": 209703862,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599769242
    },
    {
        "content": "<p>you can Ctrl+F <code>computable</code> in <a href=\"https://leanprover-community.github.io/archive/stream/116395-maths/topic/generalizing.20padic_val.html\"><code>maths &gt; generalizing padic_val</code></a></p>",
        "id": 209704130,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599769374
    },
    {
        "content": "<p>also related: <a href=\"https://github.com/leanprover-community/mathlib/issues/523\">#523</a> feat(ring_theory/multiplicity): multiplicity of elements of a ring</p>",
        "id": 209704198,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599769416
    },
    {
        "content": "<p>So you would approve of it being changed to take values in <code>with_top nat</code>?</p>",
        "id": 209705112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599769887
    },
    {
        "content": "<p>yes</p>",
        "id": 209705346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599770037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/.60multiplicity.60/near/209705112\">said</a>:</p>\n<blockquote>\n<p>So you would approve of it being changed to take values in <code>with_top nat</code>?</p>\n</blockquote>\n<p>Does that really change things?</p>",
        "id": 209706427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599770628
    },
    {
        "content": "<p>With a good API, you shouldn't be able to tell the difference, right?</p>",
        "id": 209706488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599770643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I think the problem is the same with <code>fintype.card</code></p>",
        "id": 209706691,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599770761
    },
    {
        "content": "<p>i.e. it takes in a typeclass as an argument</p>",
        "id": 209706761,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599770772
    },
    {
        "content": "<p>which causes diamonds</p>",
        "id": 209706775,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599770778
    },
    {
        "content": "<p>if API could solve problems then we wouldn't need to have <code>fincard</code></p>",
        "id": 209706798,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599770791
    },
    {
        "content": "<p>I think the idea is that you can always decide the <code>some</code>ness of an <code>option</code>/<code>with_top</code> by case analysis, so that should remove the need for decidability hypotheses in the API</p>",
        "id": 209707251,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599771010
    },
    {
        "content": "<p>whether or not it just shuffles them elsewhere is another question</p>",
        "id": 209707279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599771023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> you can have two different decidability instances on <code>o.dom</code>. Some lemmas about <code>enat</code> are proved with open_locale classical open and some aren't. There's an add order equiv from enat to with_top nat.</p>",
        "id": 209710594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599772694
    },
    {
        "content": "<p>Is it possible that the problem is actually that <code>enat</code> should be defined as <code>option</code>/<code>with_top</code>/a custom inductive type rather than in terms of <code>roption</code>?</p>",
        "id": 209712968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599773887
    },
    {
        "content": "<p>That change would also work for me</p>",
        "id": 209713455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599774176
    },
    {
        "content": "<p>I mean <code>option nat</code> is a perfectly sensible thing to use in computation as well, it's just different from <code>roption nat</code>. So I don't see an obvious reason, if we're going to pick one to call <code>enat</code> and use for math reasoning purposes, to select <code>roption nat</code></p>",
        "id": 209713641,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599774313
    },
    {
        "content": "<p>Here's an example of something which wasn't much fun.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">enat</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">enat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">to_with_top_int</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_with_top</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">coe</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_zero</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- the next line doesn&#39;t work and I have no idea why</span>\n  <span class=\"c1\">-- unfold_coes,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ZZZ</span> <span class=\"o\">:</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_with_top</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- my understanding of Lean is that the proof below can&#39;t ever work</span>\n  <span class=\"n\">convert</span> <span class=\"n\">ZZZ</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">coe</span> <span class=\"n\">lift_t</span> <span class=\"n\">has_lift_t</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">coe_t</span> <span class=\"n\">has_coe_t</span><span class=\"bp\">.</span><span class=\"n\">coe</span> <span class=\"n\">coe_b</span> <span class=\"n\">has_coe</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">congr&#39;</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">to_with_top_int</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">enat</span>\n</code></pre></div>",
        "id": 209713662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599774337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/.60multiplicity.60/near/209713641\">said</a>:</p>\n<blockquote>\n<p>I mean <code>option nat</code> is a perfectly sensible thing to use in computation as well, it's just different from <code>roption nat</code>. So I don't see an obvious reason, if we're going to pick one to call <code>enat</code> and use for math reasoning purposes, to select <code>roption nat</code></p>\n</blockquote>\n<p>We already have an <code>enat</code> and it's <code>roption nat</code> :-/</p>\n<p>I want to do some math reasoning and I had thought I wanted to use <code>multiplicity</code>, but what I want to use is a version of <code>multiplicity</code> taking values in <code>with_top nat</code>. So I have three options:</p>\n<p>1) complete refactor of enat<br>\n2) leave enat but complete refactor of multiplicity so it takes values in with_top nat<br>\n3) make new <code>multiplicity'</code>.</p>\n<p>I'm happy with any decision but I don't want to make the decision myself and then find at the PR stage that the maintainers would rather a different solution.</p>",
        "id": 209714508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599774881
    },
    {
        "content": "<p>Why is everything so horrible?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">enat</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">enat</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_with_top</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">to_with_top_int</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">coe</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_zero</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">--  unfold_coes, -- this doesn&#39;t work</span>\n<span class=\"c1\">--  unfold coe, -- this doesn&#39;t work</span>\n<span class=\"c1\">-- last few coes don&#39;t do anything here</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">coe</span> <span class=\"n\">lift_t</span> <span class=\"n\">has_lift_t</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">coe_t</span> <span class=\"n\">has_coe_t</span><span class=\"bp\">.</span><span class=\"n\">coe</span> <span class=\"n\">coe_b</span> <span class=\"n\">has_coe</span><span class=\"bp\">.</span><span class=\"n\">coe</span> <span class=\"n\">coe</span> <span class=\"n\">coe</span> <span class=\"n\">coe</span> <span class=\"n\">coe</span> <span class=\"n\">coe</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- we have finally unfolded a coe</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">to_with_top_int</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">enat</span>\n</code></pre></div>\n\n\n<p>I'm convinced this would all be fixed if we were using <code>with_top nat</code> directly.</p>",
        "id": 209714542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599774904
    },
    {
        "content": "<p>There is a tactic called <code>unfold_coes</code> just for that monstrous first line</p>",
        "id": 209742659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599802967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The comments say that it doesn't work</p>",
        "id": 209743267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599803819
    },
    {
        "content": "<p>Ah, missed that. There is still way too much defeq abuse in this snippet. <code>option.map</code> itself is kind of a problematic definition here since it's using the defeq to option, but this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">enat</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">enat</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_with_top</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">to_with_top_int</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">coe</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">coe_val</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_with_top</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_zero</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coe_val</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">to_with_top_int</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">enat</span>\n</code></pre></div>",
        "id": 209743533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599804118
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">enat</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"n\">def</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">with_top</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">with_top</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">map_top</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">⊤</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">map_val</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">enat</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_with_top</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">to_with_top_int</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">coe</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">coe_val</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_with_top</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_zero</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coe_val</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_zero</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">to_with_top_int</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">enat</span>\n</code></pre></div>",
        "id": 209743832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599804437
    }
]