[
    {
        "content": "<p>My first attempt at writing a tactic. I want a tactic that will <code>fail</code> by printing a list of tactics. I've copy-pasted code by Scott:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">get_applicable_lemmas</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">name</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">cs</span> <span class=\"err\">←</span> <span class=\"n\">attribute</span><span class=\"bp\">.</span><span class=\"n\">get_instances</span> <span class=\"bp\">`</span><span class=\"n\">applicable</span><span class=\"o\">,</span>\n   <span class=\"n\">fail</span> <span class=\"c1\">-- &lt;what do I put here?&gt;</span>\n</pre></div>\n\n\n<p>(Whoops, there was still code that tried to apply the tactics, only failing if none applied. That's now gone.)</p>",
        "id": 131155695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533799380
    },
    {
        "content": "<p>Oh, and maybe there is a far easier way to look up all the current applicable lemmas then by writing a failing tactic. If so, I'dd also like to learn that method (-;</p>",
        "id": 131155709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533799434
    },
    {
        "content": "<p>I don't quite get what you are tying to do</p>",
        "id": 131155768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533799508
    },
    {
        "content": "<p>I want Lean to print me a list of all lemmas that are tagged with <code>applicable</code>.</p>",
        "id": 131155771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533799534
    },
    {
        "content": "<p>Hmmm, can I do this with <code>#print attribute applicable</code> or something similar?</p>",
        "id": 131155775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533799553
    },
    {
        "content": "<p>Where do I what sorts of things I can <code>#print</code> anyways? So far I've learned two or three incantations by osmosis in this chat. Is this documented anywhere?</p>",
        "id": 131155837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533799633
    },
    {
        "content": "<p><code>#print attribute</code> is not a valid print command )-;</p>",
        "id": 131155843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533799656
    },
    {
        "content": "<p>So, I need to fold <code>\\lam n, n.to_string</code> over this list, right? And I can just use the regular fold. I don't need some <code>meta</code>-fold.</p>",
        "id": 131156105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533800101
    },
    {
        "content": "<p>Because monads are just cool mathematical goodies.</p>",
        "id": 131156112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533800117
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">get_applicable_lemmas</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">cs</span> <span class=\"err\">←</span> <span class=\"n\">attribute</span><span class=\"bp\">.</span><span class=\"n\">get_instances</span> <span class=\"bp\">`</span><span class=\"n\">applicable</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">to_string</span> <span class=\"n\">n</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;, &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"n\">cs</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 131156361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533800562
    },
    {
        "content": "<p>That seems to do what I want (-;</p>",
        "id": 131156365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533800573
    },
    {
        "content": "<blockquote>\n<p>So, I need to fold <code>\\lam n, n.to_string</code> over this list, right? And I can just use the regular fold. I don't need some <code>meta</code>-fold.</p>\n</blockquote>\n<p>Whilst I'm kind-of out of my depth, I think that the fact that you can use regular fold is one thing that Lean has over Coq. I <em>think</em> that in Coq you have to learn one language to write proofs and then another language to write tactics.</p>",
        "id": 131157813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533802824
    },
    {
        "content": "<p>here's another way:</p>\n<div class=\"codehilite\"><pre><span></span>meta def get_applicable_lemmas : tactic unit :=\ndo cs ← attribute.get_instances `applicable,\n   cs.mmap&#39; tactic.trace\n</pre></div>",
        "id": 131158150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533803397
    },
    {
        "content": "<p>or <code>attribute.get_instances `applicable &gt;&gt;= list.mmap' tactic.trace</code> if you want to be clever</p>",
        "id": 131158225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533803456
    },
    {
        "content": "<p>Right! That's nice (-;</p>",
        "id": 131158259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533803504
    },
    {
        "content": "<p>Of course I should have thought of looking for some <code>map</code>-like.</p>",
        "id": 131158315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533803533
    },
    {
        "content": "<p>here I am using a kind of \"meta map\" <code>mmap</code></p>",
        "id": 131158319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533803540
    },
    {
        "content": "<p>although this is because I want to map from inside a monad</p>",
        "id": 131158331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533803553
    },
    {
        "content": "<p><code>mmap'</code> is more of a \"for each\" or \"scan\" type function than a map - it doesn't return any output</p>",
        "id": 131158372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533803624
    },
    {
        "content": "<p>What is the difference between <code>tactic unit</code> vs <code>tactic name</code> vs <code>tactic string</code>?</p>",
        "id": 131158948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533804464
    },
    {
        "content": "<p>that's like asking what the difference is between <code>option unit</code> and <code>option nat</code> and <code>option real</code></p>",
        "id": 131159099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533804696
    },
    {
        "content": "<p>If you're passing information around between tactics then you might want to use <code>tactic blah</code> (which means \"blah plus the extra option of failure\"), but at the end of it all when you want to run the tactic you may as well return something of type \"tactic unit\" because no other tactic wants the output.</p>",
        "id": 131159156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533804778
    },
    {
        "content": "<p>The changing of the state is not an output of the tactic, that all goes on within the monad</p>",
        "id": 131159165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533804796
    },
    {
        "content": "<p>Right. That makes sense.</p>",
        "id": 131159173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533804818
    }
]