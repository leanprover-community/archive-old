[
    {
        "content": "<p>Do we have a policy about lemma restating? In recent PRs we have both:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">lipschitz</span> <span class=\"o\">:</span> <span class=\"n\">lipschitz_with</span> <span class=\"mi\">1</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e.isometry.lipschitz</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">antilipschitz</span> <span class=\"o\">:</span> <span class=\"n\">antilipschitz_with</span> <span class=\"mi\">1</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e.isometry.antilipschitz</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ediam_image</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">emetric.diam</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">emetric.diam</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.isometry.ediam_image</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">diam_image</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">metric.diam</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">metric.diam</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.isometry.diam_image</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">comp_continuous_on_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.isometry.comp_continuous_on_iff</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">comp_continuous_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.isometry.comp_continuous_iff</span>\n</code></pre></div>\n<p>in <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/8660\">#8660</a> and the whole <a href=\"https://github.com/leanprover-community/mathlib/issues/8693\">#8693</a> by <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 249561570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629102547
    },
    {
        "content": "<p>I don't have an opinion here. I'm frequently tempted to participate in this inflation but I'm always hesitant.</p>",
        "id": 249561609,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629102594
    },
    {
        "content": "<p>I copied this from similar lemmas for linear_isometries, eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_isometry.lipschitz\">docs#linear_isometry.lipschitz</a></p>",
        "id": 249561668,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629102623
    },
    {
        "content": "<p>I think we do this routinely when structures and dot notation are involved</p>",
        "id": 249561844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629102763
    },
    {
        "content": "<p>The <code>continuous</code> lemmas were already duplicated (from when does git blame say?). I would be fine with not duplicating them but yeah the dot notation needed becomes quite unwieldy.</p>",
        "id": 249561845,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629102764
    },
    {
        "content": "<p>In particular, isn't  <code>e.isometry.diam_image</code> a statement about <code>⇑e.isometry</code> not <code>⇑e</code>, meaning the lemmas aren't duplicates <em>syntactically</em>.</p>",
        "id": 249561965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629102855
    },
    {
        "content": "<p>Going on a tangent, could <code> a extends b</code> not only declare <code>a.to_b</code>, but also <code>a.to_c when </code>b extends c`?</p>",
        "id": 249561971,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629102860
    },
    {
        "content": "<p>That's a bad idea Yaël because you now need lemmas about every transitive conversion not just every direct conversion</p>",
        "id": 249562001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629102896
    },
    {
        "content": "<p>Ah okay. And how is it done for coercions ?</p>",
        "id": 249562051,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629102955
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_coe\">docs#coe_coe</a> reduces transitive coercions to direct ones</p>",
        "id": 249562108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629102985
    },
    {
        "content": "<p>In fact with new style structures lean will take <code>a.to_c</code> as syntax for <code>a.to_b.to_c</code> anyway.</p>",
        "id": 249562138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629103019
    },
    {
        "content": "<p>I'm also asking in the context of <a href=\"#narrow/stream/113488-general/topic/dot.20notation.20deficiency/near/249471794\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/dot.20notation.20deficiency/near/249471794</a></p>",
        "id": 249562264,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629103105
    },
    {
        "content": "<p>which shows that some duplication is probably unavoidable to keep things under control.</p>",
        "id": 249562283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629103140
    },
    {
        "content": "<p>I think the problem is less about keeping verbosity under control, and more about how our use of coercions in structures means that lemmas about a base structure are never a syntactic match for the derived structure; for instance, <code>add_monoid_hom.map_add</code> is a lemma about <code>add_monoid_hom.coe_to_fun</code>, <code>linear_map.map_add</code> is a lemma about <code>linear_map.coe_to_fun</code>, etc. If you use <code>lm.to_add_monoid_hom.map_add</code> instead of <code>lm.map_add</code> you get a proof about <code>⇑lm.to_add_monoid_hom (x + y)</code> instead of <code>⇑lm (x + y)</code>. They're all defeq as proofs, but that's not enough for <code>rw</code> or <code>simp</code>.</p>",
        "id": 249562725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629103515
    },
    {
        "content": "<p>I have a proposal for (part of a) solution: typeclasses!</p>",
        "id": 249562757,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629103558
    },
    {
        "content": "<p>This is the proposal that came up before, right?</p>",
        "id": 249562839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629103602
    },
    {
        "content": "<p>Yes, I've been working on it a bit in the past months.</p>",
        "id": 249562868,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629103626
    },
    {
        "content": "<p>My memory of it is that <a href=\"https://github.com/leanprover-community/lean/pull/557\">https://github.com/leanprover-community/lean/pull/557</a> would probably not only make it easier, but would also make it more compatible with lean4</p>",
        "id": 249562895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629103648
    },
    {
        "content": "<p>So the idea is that all types that extend e.g. <code>mul_hom</code> would have a <code>mul_hom_class</code> instance. Then <code>map_mul</code> can be a <code>simp</code> lemma assuming <code>mul_hom_class</code>. <a href=\"https://github.com/leanprover-community/mathlib/blob/fun_like/src/algebra/group/hom.lean#L208\">For example, see this section</a></p>",
        "id": 249563066,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629103794
    },
    {
        "content": "<p>Presumably this pattern can be generalized to a <code>lipschitz_with</code> proof for all types extending <code>isometry</code>.</p>",
        "id": 249563309,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629104002
    },
    {
        "content": "<p>This fails if we don't get the common ground for a lemma as a typeclass.</p>",
        "id": 249563399,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629104072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/aliases/near/249562895\">said</a>:</p>\n<blockquote>\n<p>My memory of it is that <a href=\"https://github.com/leanprover-community/lean/pull/557\">https://github.com/leanprover-community/lean/pull/557</a> would probably not only make it easier, but would also make it more compatible with lean4</p>\n</blockquote>\n<p>Indeed, <a href=\"https://github.com/leanprover-community/mathlib/blob/fun_like/src/data/fun_like.lean#L65\">these lines</a> are essentially the same backport.</p>",
        "id": 249563401,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629104076
    },
    {
        "content": "<p>Eg, are there several ways to get a <code>map_mul</code>-like lemma?</p>",
        "id": 249563422,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629104103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/aliases/near/249563309\">said</a>:</p>\n<blockquote>\n<p>Presumably this pattern can be generalized to a <code>lipschitz_with</code> proof for all types extending <code>linear_isometry</code>.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/isometry\">docs#isometry</a>, not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_isometry\">docs#linear_isometry</a>, not that it affects your point.</p>",
        "id": 249563470,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629104144
    },
    {
        "content": "<p>If we replaced some words by others, this discussion starts very much looking like the order refactor</p>",
        "id": 249563535,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629104171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/aliases/near/249563422\">said</a>:</p>\n<blockquote>\n<p>Eg, are there several ways to get a <code>map_mul</code>-like lemma?</p>\n</blockquote>\n<p>Definitely! There are many <code>_hom</code>s that have <code>map_mul</code>: <code>monoid_hom</code>, <code>monoid_with_zero_hom</code>, <code>ring_hom</code>, ... Each of those can have a <code>mul_hom_class</code> instance (via <code>monoid_hom_class.to_mul_hom_class</code> in most cases I assume)</p>",
        "id": 249563603,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629104262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/aliases/near/249563535\">said</a>:</p>\n<blockquote>\n<p>If we replaced some words by others, this discussion starts very much looking like the order refactor</p>\n</blockquote>\n<p>I claim this is not really a coincidence, since typeclasses provide a nice way to denote the set of all types with an operation (<code>coe_fn</code>, <code>le</code>) that satisfies some properties (<code>map_mul</code>, <code>mul_le_mul</code>).</p>",
        "id": 249563899,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629104454
    },
    {
        "content": "<p>By allowing typeclass search in <code>simp</code> we basically get automation for the positive fragment of proposition logic for specific propositions (namely those tagged <code>@[class]</code>), along with the automation for equality that <code>simp</code> provides.</p>",
        "id": 249564061,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629104576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/aliases/near/249563470\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/isometry\">docs#isometry</a>, not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_isometry\">docs#linear_isometry</a>, not that it affects your point.</p>\n</blockquote>\n<p>Ah, this invalidates some of my messages above; I assumed that <code>isometry</code> was bundled and defined as roughly <code>{f // isometry f}</code></p>",
        "id": 249564229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629104685
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/isometric\">docs#isometric</a> which is exactly this, and we have (or will have) <code>linear_isometry.to_isometric</code>, <code>affine_isometry.to_isometric</code>.  So if it's more convenient the proof can go <code>f.to_isometric.lipschitz</code>.</p>",
        "id": 249564389,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629104787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/aliases/near/249564389\">said</a>:</p>\n<blockquote>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/isometric\">docs#isometric</a> which is exactly this, </p>\n</blockquote>\n<p>Actually I guess that's not true, since <a href=\"https://leanprover-community.github.io/mathlib_docs/find/isometric\">docs#isometric</a> requires it be an equivalence, not just a map.  It's <code>linear_isometry_equiv.to_isometric</code>, not <code>linear_isometry.to_isometric</code>.</p>",
        "id": 249564526,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1629104896
    },
    {
        "content": "<p>Using an adjective like <code>isometric</code> for the name of a structure in <code>Type</code> seems weird to me (especially since we call the linear version an <code>*_isometry_*</code>)</p>",
        "id": 249564574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629104943
    },
    {
        "content": "<p>Yeah, I would have expected <code>isometric</code> to be the Prop one</p>",
        "id": 249564751,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629105106
    },
    {
        "content": "<p>So we can reuse the insight we gained from the order refactor! That is, have typeclasses \"per lemma\" and then the meaningful typeclasses each extending some of them.</p>",
        "id": 249565020,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629105315
    },
    {
        "content": "<p>I'm a little pessimistic we'll learn the opposite of what we learnt there; that the approach doesn't scale, and we got away with it because ordered monoids are used way less often than bundled maps. It would still be good to proceed; either we learn that the appoach isn't as good as we think it is, or the problem goes away.</p>",
        "id": 249565161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629105447
    },
    {
        "content": "<p>I expect the opposite might turn out to be the case: we have an enormous pile of <code>simp</code> lemmas with head symbol <code>coe_fn</code>, so removing some of them from the <code>simp</code> set and using typeclasses instead, which have more recognizable head symbols, will scale better in number of <code>_hom</code>s × number of <code>map_</code>s.</p>",
        "id": 249565425,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629105610
    },
    {
        "content": "<p>Sooo... who will refactor?</p>",
        "id": 249566170,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629106152
    },
    {
        "content": "<p>Thanks for volunteering Yaël!</p>",
        "id": 249566191,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629106177
    },
    {
        "content": "<p>I'm slowly working on <a href=\"https://github.com/leanprover-community/mathlib/tree/fun_like\">branch#fun_like</a>. Feel free to fix the build errors :)</p>",
        "id": 249570747,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629109007
    },
    {
        "content": "<p>So the idea is that we used to deal with group homs as a typeclass predicate on bare functions, and then we switched to bundled homs, and now we're trying bundled homs together with a typeclass predicate on the bundled hom?</p>",
        "id": 249572463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629110372
    },
    {
        "content": "<p>The predicate goes on the type of the bundled hom, not the hom itself</p>",
        "id": 249573500,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629111171
    },
    {
        "content": "<p>Aah yes! Perhaps that's a key difference!</p>",
        "id": 249574412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629111852
    },
    {
        "content": "<p>Indeed, this should avoid all the defeq \"abuse\" that made the old typeclass predicates hard to work with. They aren't called <em>type</em> classes for nothing :)</p>",
        "id": 249574478,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629111920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/aliases/near/249570747\">said</a>:</p>\n<blockquote>\n<p>I'm slowly working on <a href=\"https://github.com/leanprover-community/mathlib/tree/fun_like\">branch#fun_like</a>. Feel free to fix the build errors :)</p>\n</blockquote>\n<p>Will do!</p>",
        "id": 249575752,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629112992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/aliases/near/249566191\">said</a>:</p>\n<blockquote>\n<p>Thanks for volunteering Yaël!</p>\n</blockquote>\n<p>Coming back to this, I actually am, now!</p>",
        "id": 271762084,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644781953
    }
]