[
    {
        "content": "<p>I'm trying to diagnose why the changes in the following commit cause a failure when building mathlib:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/28d057cf6be53bc816e0cb56176589cf720944d0\">https://github.com/leanprover-community/mathlib/commit/28d057cf6be53bc816e0cb56176589cf720944d0</a></p>\n<p>The error appears in the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.ndunion_le/src\">src#multiset.ndunion_le</a></p>",
        "id": 242957737,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623887362
    },
    {
        "content": "<p>Any help / suggestions would be greatly appreciated!</p>",
        "id": 242957824,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623887418
    },
    {
        "content": "<p>On that branch, one can hack <code>finset_ops.lean</code> a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span><span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"mi\">132</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ndunion_le_add</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ndunion</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.induction_on₂</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">union_sublist_append</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subperm</span>\n\n<span class=\"c1\">-- hack starts here</span>\n\n<span class=\"c1\">-- remove instances which are breaking stuff</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">semilattice_sup.to_directed_order</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">semilattice_inf.to_codirected_order</span>\n\n<span class=\"c1\">--set_option trace.simplify.rewrite true</span>\n<span class=\"c1\">-- take proof apart</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ndunion_le</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ndunion</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">multiset.induction_on</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">ndinsert</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">s.ndunion</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ndinsert_le</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ (s ⊆ u ∧ t ≤ u) ∧ a ∈ u ↔ (a ∈ u ∧ s ⊆ u) ∧ t ≤ u</span>\n  <span class=\"c1\">-- goal now pure logic</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">,</span> <span class=\"n\">and.left_comm</span><span class=\"o\">],</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">end</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The issue seems to be using <code>simp [and_comm, and.left_comm]</code> to solve the pure logic statement <code>(s ⊆ u ∧ t ≤ u) ∧ a ∈ u ↔ (a ∈ u ∧ s ⊆ u) ∧ t ≤ u</code>.</p>\n<p>With your branch's instances removed with those <code>local attribute [-instance]</code> lines, using <code>trace.simplify.rewrite true</code> you can see that <code>simp</code> finds the following proof of the logic statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and.left_comm</span><span class=\"o\">]:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and.left_comm</span><span class=\"o\">]:</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]:</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and.congr_left_iff</span><span class=\"o\">]:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">iff_self</span><span class=\"o\">]:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and_imp</span><span class=\"o\">]:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">true</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">implies_true_iff</span><span class=\"o\">]:</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">implies_true_iff</span><span class=\"o\">]:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>Now if we comment out one of the <code>local attribute [-instance]</code> lines (i.e. add one of your new instances), <code>simp</code> gives up earlier in the process: it does this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and.left_comm</span><span class=\"o\">]:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span>\n\n<span class=\"bp\">⊢</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>and then it stops.</p>\n<p>So that's why it's breaking, and as for why the behaviour of <code>simp</code> is changing I'll have to defer to someone else.</p>",
        "id": 242983562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623916112
    },
    {
        "content": "<p>PS I cannot minimise any further. Stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">,</span> <span class=\"n\">and.left_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>works fine with or without the new instances: simp continues along the path above and solves the goal.</p>",
        "id": 242983863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623916356
    },
    {
        "content": "<p>Aah, I tell a lie! Decidable equality on alpha is the key. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">semilattice_sup.to_directed_order</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">semilattice_inf.to_codirected_order</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">,</span> <span class=\"n\">and.left_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This works (on the branch, in <code>finset_ops.lean</code>), but commenting out the <code>-instance</code> lines (i.e. putting the new instances back) makes <code>simp</code> fail.</p>",
        "id": 242984121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623916546
    },
    {
        "content": "<p>Here's a version which works on master. The instance changes the behaviour of <code>simp</code> (and in particular stops the example from working). With the instance, <code>simp</code> does nothing. Without it, it solves the goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.multiset</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[priority 100]</span>  <span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">semilattice_sup.to_directed_order</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">directed_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">⊔</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">le_sup_left</span><span class=\"o\">,</span> <span class=\"n\">le_sup_right</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">,</span> <span class=\"n\">and.left_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 242984761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623916949
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ! this is really helpful. Just to add to the mystery, the simp fails in this code as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.multiset</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[priority 0]</span>  <span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">semilattice_sup.to_directed_order</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">directed_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">⊔</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">le_sup_left</span><span class=\"o\">,</span> <span class=\"n\">le_sup_right</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">,</span> <span class=\"n\">and.left_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 243005985,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623930760
    },
    {
        "content": "<p>Well, I wanted to add this <code>codirected_order</code> class and associated instances as part of <a href=\"https://github.com/leanprover-community/mathlib/issues/7982\">#7982</a> but more and more similar issues kept popping up.</p>\n<p>So I've reworked the code for <a href=\"https://github.com/leanprover-community/mathlib/issues/7982\">#7982</a> to (naturally) avoid these instances for now. Nevertheless, I think we should add <code>codirected_order</code> and the associated instances as some point in the future.</p>\n<p>Ping <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 243111827,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623985692
    },
    {
        "content": "<p>With a <code>small_category</code> instance from a <code>codirected_order</code>, would it conflict with the <code>small_category</code> instance that <code>directed_order</code> gives?</p>",
        "id": 243112101,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1623986140
    },
    {
        "content": "<p>The category instance comes from the preorder structure, and I think the two would be defeq already at the level of preorders, right?</p>",
        "id": 243112489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623986643
    }
]