[
    {
        "content": "<p>The stub for the program verification chapter in \"Programming in Lean\" says \"Give some natural examples, for example, proving properties of functions of lists, sorting routines, properties of the extended gcd. Discuss two styles: separating functions and properties, and combining them, using subtypes.\"</p>\n<p>Are any of these examples implemented, even though the chapter is incomplete? Alternatively, are there any other particularly nice examples of such proofs that someone could point me at?</p>",
        "id": 154986620,
        "sender_full_name": "William Whistler",
        "timestamp": 1547304582
    },
    {
        "content": "<p><code>list.merge_sort</code> is a verified sorting algorithm</p>",
        "id": 154986679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547304675
    },
    {
        "content": "<p><code>list.reverse_reverse</code> is a classic example of proving a property of a program</p>",
        "id": 154986682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547304703
    },
    {
        "content": "<p>they are pretty much all implemented</p>",
        "id": 154986720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547304723
    },
    {
        "content": "<p>Thanks for the pointers!</p>",
        "id": 154986732,
        "sender_full_name": "William Whistler",
        "timestamp": 1547304768
    },
    {
        "content": "<p>Most of the mathlib examples use the \"separate function and properties\" style</p>",
        "id": 154986745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547304795
    },
    {
        "content": "<p>Minchao Wu presented a pretty good example of the \"dependent types\" proof approach at lean together this week</p>",
        "id": 154986794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547304887
    }
]