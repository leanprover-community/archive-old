[
    {
        "content": "<p>In Section 2.7 of Mario's metatheory of Lean paper, I'm missing the fact that <code>quot.ind</code> is a axiom in Lean. Is this an omission, or is there an implicit claim here that <code>quot.ind</code> is derivable from the other constants/axioms?</p>",
        "id": 136716513,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540829529
    },
    {
        "content": "<p>I'm pretty sure that <code>quot.ind</code> is only derivable if the underlying type α is empty.</p>",
        "id": 136717438,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1540830285
    },
    {
        "content": "<p>That is too strong. You can at least prove it for <code>unit</code> by using that <code>x = unit.star</code> for every <code>x : unit</code> (and therefore <code>quot.mk x = quot.mk unit.star</code>). And I suspect that (classically) you might be able to do something when <code>α</code> is <code>fin n</code>, for example.</p>",
        "id": 136718421,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540831202
    },
    {
        "content": "<p>oh wait, maybe I'm mentally already using <code>quot.ind</code>here.</p>",
        "id": 136718605,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540831324
    },
    {
        "content": "<p>Oh yes, you're right. If <code>α</code> is nonempty, say <code>z : α</code>, and <code>r : α -&gt; α -&gt; Prop</code> then I can define </p>\n<div class=\"codehilite\"><pre><span></span>quot&#39; α r := option (quot α r)\nquot&#39;.mk r x := some (quot.mk r x)\nquot&#39;.lift β f h (some x) := quot.lift β f h x\nquot&#39;.lift β f h none := f z\n</pre></div>\n\n\n<p>and then <code>quot'</code> satisfies the same rules as <code>quot</code>, including the reduction rule, but excluding <code>quot.ind</code></p>",
        "id": 136718915,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540831665
    },
    {
        "content": "<p>Also, the paper claims/proves that using only the inductive types <code>empty psigma psum ulift nonempty W eq acc</code> we can construct all others. If we remove <code>acc</code> from this list, so we only have the other 7 inductive types, do we know whether the (\"ideal\") definitional equality in the resulting system decidable?</p>",
        "id": 136720482,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540833046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> The reasoning behind only considering <code>quot.sound</code> an axiom and ignoring the others is that the others taken together are conservative, because we can take <code>quot A = A</code> and then all the axioms are valid except <code>quot.sound</code>. <code>quot.ind</code> is valid because <code>id</code> is surjective</p>",
        "id": 136733168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540845011
    },
    {
        "content": "<p>That said, I don't think this is common practice in logic, I should probably just call them all axioms</p>",
        "id": 136733213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540845057
    },
    {
        "content": "<p>I don't know if removing <code>acc</code> makes defeq decidable, but my guess is yes. Of course the counterexample in the paper uses <code>acc</code> essentially</p>",
        "id": 136733320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540845149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I don't care about which of them you call constants and which you call axioms, my point is that you forgot to mention <code>quot.ind</code> in the paper (in the latest release and on the master branch). You only mention <code>quot.lift</code> as elimination principle.</p>",
        "id": 136736293,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540848053
    },
    {
        "content": "<p>Now I forget if <code>quot.rec</code> or <code>quot.lift</code> + <code>quot.ind</code> were used internally by lean</p>",
        "id": 136736324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540848090
    },
    {
        "content": "<p><code>quot.rec</code> is defined in terms of <code>quot.lift</code> + <code>quot.ind</code>.</p>",
        "id": 136736397,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540848134
    },
    {
        "content": "<p>ok, I'll update the paper</p>",
        "id": 136736414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540848162
    },
    {
        "content": "<p>The issue with the nontransitivity of algorithmic definitional equality using <code>quot</code> is only because if <code>α : Sort u</code> then <code>@quot α r : Sort u</code>, right? If we alternatively defined <code>@quot α r</code> to be in <code>Sort (max u 1)</code> (which would make more sense, compared to inductive types), then the nontransitivity using quotients goes away, right?</p>",
        "id": 136736688,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540848434
    },
    {
        "content": "<p>thanks!</p>",
        "id": 136736701,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540848464
    },
    {
        "content": "<p>yes</p>",
        "id": 136736801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540848573
    },
    {
        "content": "<p>All of the known examples of failure of transitivity involve some kind of subsingleton elimination, where an inductive type in Prop recurses over Type. So it is reasonable to conjecture that without <code>acc</code> and with <code>quot</code> out of <code>Prop</code> the algorithmic equality becomes transitive, and so coincides with ideal defeq which becomes decidable.</p>",
        "id": 136737064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540848745
    }
]