[
    {
        "content": "<p>Somehow <code>tidy</code> claims it closed all goals, but the kernel says there are still metavariables left. Is there a good approach to debugging this? Somewhere a metavariable got removed from the goal-list without being fully instantiated. I guess it should be possible to track this, right?</p>",
        "id": 148774987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543483764
    },
    {
        "content": "<p>it is possible to write a tactic that will tell you if the current tactic state is broken, but you will have to sprinkle it around and it will often give false positives because of <code>focus</code> and such</p>",
        "id": 148776730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543486078
    },
    {
        "content": "<p>the <code>recover</code> tactic does this, essentially</p>",
        "id": 148776794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543486118
    },
    {
        "content": "<p>Thanks. Didn't know about <code>recover</code>. I'll try it out.</p>",
        "id": 148776998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543486351
    },
    {
        "content": "<p>Oh by the way, <code>recover</code> worked. It figured out that there was some naturality condition that wasn't proven. I don't know how it got lost.</p>",
        "id": 148782330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543493211
    },
    {
        "content": "<p>It'd be really great to see a reproducible case of that Johan, probably there is a bug in a tactic somewhere</p>",
        "id": 148782541,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543493470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> <a href=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/presheaf.lean#L113\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/presheaf.lean#L113\">https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/presheaf.lean#L113</a><br>\nVoila. I retried this with a freshly restarted Lean. Problem still occurs. I have no idea how I could build a MWE out of this. It's pretty deep down in ugly maths.</p>",
        "id": 148783366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543494365
    },
    {
        "content": "<p>Seems like a bug in <code>constructor</code> to me</p>",
        "id": 148786857,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543498811
    },
    {
        "content": "<p>For anyone who is interested:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">oopsie</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">presheaf</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"err\">⟹</span> <span class=\"n\">yoneda_extension</span> <span class=\"n\">F</span> <span class=\"err\">⋙</span> <span class=\"n\">restricted_yoneda</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- One goal</span>\n  <span class=\"n\">recover</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Two goals :O</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148786936,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543498917
    },
    {
        "content": "<p>But I guess this ties in to the auto_params, doesn't it?</p>",
        "id": 148786989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543498961
    },
    {
        "content": "<p>I'm not sure I understand</p>",
        "id": 148787002,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543498988
    },
    {
        "content": "<p>I mean, surely it shouldn't erase a metavar it creates from history</p>",
        "id": 148787009,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543499005
    },
    {
        "content": "<p>Maybe <code>constructor</code> is throwing away goals that have an auto_param attached to them?</p>",
        "id": 148787015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543499013
    },
    {
        "content": "<p>I wonder if the <code>extract_opt_auto_param</code> in <code>get_constructors_for</code> has anything to do with it<br>\nActually, I bet it is the <code>mk_const</code> on line 23 of constructor_tactic.lean in lean core</p>",
        "id": 148787126,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543499135
    },
    {
        "content": "<p>That could create metavariables which don't get fully bound by the <code>apply</code> maybe</p>",
        "id": 148787138,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543499154
    },
    {
        "content": "<p>Thanks for debugging this!</p>",
        "id": 148787258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543499281
    }
]