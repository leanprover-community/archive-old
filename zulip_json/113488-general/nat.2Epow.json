[
    {
        "content": "<p>Someone just privately asked me how to prove 1 &lt;= 2^k, and applying <code>one_le_pow_of_one_le</code> doesn't work because <code>nat.has_pow</code> is not definitionally <code>monoid.has_pow</code>. We were always told that nothing could be done about this because it was in core. Is this something which can now be changed though? Or would it just break a gazillion things and nobody can be bothered to fix them? The issue I'm concerned about is that the two functions have different conventions about the succ case: <code>nat.pow</code> is <code>b^n*b</code> and <code>monoid.pow</code> is <code>a*a^n</code> :-(</p>",
        "id": 196340778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588700354
    },
    {
        "content": "<p>I think it mostly requires having someone with enough time and energy.</p>",
        "id": 196340955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588700440
    },
    {
        "content": "<p>there is a theorem to rewrite one in terms of the other</p>",
        "id": 196341288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588700629
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/128#issuecomment-610281436\" title=\"https://github.com/leanprover-community/lean/pull/128#issuecomment-610281436\">https://github.com/leanprover-community/lean/pull/128#issuecomment-610281436</a></p>",
        "id": 196341459,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588700720
    },
    {
        "content": "<p>an amusing proof that relies on the current <code>nat.pow</code>, perhaps found by <code>library_search</code>?<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/number_theory/primorial.lean#L163-L164\">https://github.com/leanprover-community/mathlib/blob/master/src/number_theory/primorial.lean#L163-L164</a></p>",
        "id": 208287624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598570013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/nat.2Epow/near/196341459\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/lean/pull/128#issuecomment-610281436\">https://github.com/leanprover-community/lean/pull/128#issuecomment-610281436</a></p>\n</blockquote>\n<p>I replied to this on github, but let me also ask it here. Lean has VM implementations for <code>nat.pow</code> for reasons of efficiency. But does the VM care whether <code>nat.pow</code> is defined as <code>a*a^n</code> or <code>a^n*a</code>?<br>\nIf I understand things correctly, it doesn't, right?</p>",
        "id": 208304217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598589039
    },
    {
        "content": "<p>It doesn't use either one</p>",
        "id": 208308428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598594431
    },
    {
        "content": "<p>But it does care that the function being called is <code>nat.pow</code></p>",
        "id": 208308450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598594449
    },
    {
        "content": "<p>if you call another function it won't be automagically replaced with the efficient C++ implementation</p>",
        "id": 208308474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598594474
    },
    {
        "content": "<p>Right. Than it is like I expected.</p>",
        "id": 208308495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598594512
    },
    {
        "content": "<p>I've seen contradictory comments on whether <code>nat.pow</code> actually has special VM support at all. It seems to me that it doesn't:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">rwbarton@scw-capybara:~/lean/lean$</span> git grep <span class=\"s1\">&#39;&quot;pow&quot;&#39;</span>\n<span class=\"go\">src/library/vm/vm_float.cpp:    DECLARE_VM_BUILTIN(name({&quot;native&quot;, &quot;float&quot;, &quot;pow&quot;}),   [](vm_obj const &amp; a1, vm_obj const &amp; a2) {return mk_vm_float(std::pow(to_float(a1), to_float(a2)));});</span>\n<span class=\"gp\">rwbarton@scw-capybara:~/lean/lean$</span> git grep <span class=\"s1\">&#39;&quot;mul&quot;&#39;</span>\n<span class=\"go\">src/library/vm/vm_float.cpp:    DECLARE_VM_BUILTIN(name({&quot;native&quot;, &quot;float&quot;, &quot;mul&quot;}),   [](vm_obj const &amp; a1, vm_obj const &amp; a2) {return mk_vm_float(to_float(a1) * to_float(a2));});</span>\n<span class=\"go\">src/library/vm/vm_int.cpp:    DECLARE_VM_BUILTIN(name({&quot;int&quot;, &quot;mul&quot;}),              int_mul);</span>\n<span class=\"go\">src/library/vm/vm_nat.cpp:    DECLARE_VM_BUILTIN(name({&quot;nat&quot;, &quot;mul&quot;}),              nat_mul);</span>\n</code></pre></div>",
        "id": 208350912,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598625610
    },
    {
        "content": "<p>You're right, only the bitwise operations have VM support.  Feel free to <del>r+</del> merge master into the nat.pow removal then.</p>",
        "id": 208351268,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598625812
    },
    {
        "content": "<p>Whut? So we can just remove <code>nat.pow</code> from core?</p>",
        "id": 208351906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598626084
    },
    {
        "content": "<p>Wouldn't it actually be better to add VM support?</p>",
        "id": 208351927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598626095
    },
    {
        "content": "<p>Do you  mean Chris's old PR? It didn't build because some of the removed lemmas are used elsewhere in core.<br>\nBut I'm preparing a new PR that removes everything that depends on <code>nat.pow</code> (including the whole of <code>data.bitvec</code>) with the intention of adding corresponding lemmas about <code>^</code> = <code>monoid.pow</code> to mathlib.</p>",
        "id": 208351935,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598626101
    },
    {
        "content": "<p>I wasn't necessarily expecting that to work, but it seems to be working.</p>",
        "id": 208351962,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598626116
    },
    {
        "content": "<p>There's not really that much point in using an optimized <code>nat.pow</code> implementation unless you're calculating <code>0^n</code> or <code>1^n</code> for large <code>n</code>.</p>",
        "id": 208352077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598626165
    },
    {
        "content": "<p>Removing <code>nat.pow</code> completely is preferable to having <code>nat.pow</code> with the old implementation because it means there won't be lemmas about the old <code>nat.pow</code>.</p>",
        "id": 208352556,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598626374
    },
    {
        "content": "<p>I'm pretty sure that you can do better than the naive recursive version though.  You can do <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>32</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^{32}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> in 5 multiplications instead of 31.  There is also a dedicated pow function in gmp.</p>",
        "id": 208352814,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598626486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> the naive version uses 32 multiplications, right <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 208353097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598626621
    },
    {
        "content": "<p>The change to Lean has landed, so <a href=\"https://github.com/leanprover-community/mathlib/commit/f4aa77ead65d6fc1ee7675b3d21fe2e352134a27\">here's</a> my current progrress on the required mathlib changes. Primarily I still need to finish splitting up <code>algebra.group_power</code> and seeing what lemmas I can reuse in <code>data.nat.lemmas</code>. Later, if there are lemmas in the <code>nat</code> namespace that are exactly specializations of their general <code>group_power</code> counterparts, we can remove them completely.</p>\n<p>Question: Is it worth adding a <code>has_pow nat nat</code> instance with the normal priority 1000, to be picked up immediately by instance search? I'm inclined to say it doesn't matter much since there are only a total of 12 instances of <code>has_pow</code> in mathlib, and 2 in core. If we do add it (now or in the future) we need to add back the corresponding parts of <code>norm_num</code> and <code>ring</code> (which I have just commented out for now).</p>",
        "id": 208455462,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598737491
    },
    {
        "content": "<p>I think it is not necessary to have a separate instance <code>has_pow nat nat</code>.</p>",
        "id": 208456768,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598739744
    },
    {
        "content": "<p>If the plan is to make it defeq to the monoid pow one then do we need it? If the plan is to make it the other one then...well, this can't be the plan, because the plan is to solve the problem, and this is the problem.</p>",
        "id": 208457154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598740391
    },
    {
        "content": "<p>There isn't going to be any other one.</p>",
        "id": 208457166,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598740412
    },
    {
        "content": "<p>The only reason to add it would be so that it gets tried earlier in the instance search order</p>",
        "id": 208457192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598740441
    }
]