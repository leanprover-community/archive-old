[
    {
        "content": "<p>I wrote a version of well-founded recursion which allows you to maintain a \"consistency\" condition in the recursion.<br>\n<a href=\"https://gist.github.com/rwbarton/7bd5b3b19d930f577355a596a5ed8b4d\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/7bd5b3b19d930f577355a596a5ed8b4d\">https://gist.github.com/rwbarton/7bd5b3b19d930f577355a596a5ed8b4d</a></p>",
        "id": 148651094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543337682
    },
    {
        "content": "<p>Compared to <code>well_founded.fix</code>, the difference is that you get to specify a condition <code>q : Π ⦃i j⦄ (h : i &lt; j), C i → C j → Prop</code>. In the induction step you can assume that all the previous choices are consistent according to <code>q</code>, and you need to produce a new value which is consistent with all the previous choices.</p>",
        "id": 148651153,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543337728
    },
    {
        "content": "<p>In the end, you get a function whose values are all consistent according to <code>q</code></p>",
        "id": 148651171,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543337747
    },
    {
        "content": "<p>Mostly it's useful when you need to have the consistency condition in hand in order to perform the next step of the recursive construction.</p>",
        "id": 148651327,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543337851
    },
    {
        "content": "<p>For example, you could take <code>C n</code> to be sequences defined up to <code>n</code>, and <code>q</code> to say that the first sequence is a prefix of the second</p>",
        "id": 148651402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543337893
    },
    {
        "content": "<p>For example, suppose you want to construct an order-preserving map from <code>nat</code> to an order <code>P</code> without a greatest element. It's easy to prove by induction on <code>n</code> that there is an order-preserving map from <code>fin n</code> to <code>P</code>, but this is not good enough if these maps are all unrelated!</p>",
        "id": 148651842,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543338237
    },
    {
        "content": "<p>I think this could be stated as a \"dependent choice\" problem</p>",
        "id": 148654463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543340557
    },
    {
        "content": "<p>you want the definition of <code>F a</code> to depend on <code>F b</code> for all <code>b &lt; a</code></p>",
        "id": 148654486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543340587
    },
    {
        "content": "<p>ah, nevermind, I don't think I can simplify it past what you've already done. You want to define the type and value together in the recursion, but that's what <code>crec_core</code> accomplishes</p>",
        "id": 148656204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543341960
    },
    {
        "content": "<p>You can probably remove the <code>i &lt; j</code> from <code>q</code>, since it's defining a prop</p>",
        "id": 148656406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543342107
    },
    {
        "content": "<p>the <code>f</code> parameter of <code>H</code> can be uncurried, I don't know whether it is better or worse to also split it up into two parameters for the subtype in the target</p>",
        "id": 148656641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543342297
    },
    {
        "content": "<p>Thanks for the suggestions. I haven't tried actually using this for anything yet, so I'll have to see what seems more natural at the use site.</p>",
        "id": 148670810,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543355558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> can I add <code>crec</code> to mathlib?</p>",
        "id": 155322663,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547718619
    },
    {
        "content": "<p>Yes, absolutely.<br>\n<a href=\"https://github.com/rwbarton/lean-model-categories/blob/top-dev/src/logic/crec.lean\" target=\"_blank\" title=\"https://github.com/rwbarton/lean-model-categories/blob/top-dev/src/logic/crec.lean\">https://github.com/rwbarton/lean-model-categories/blob/top-dev/src/logic/crec.lean</a> is the version I actually use at the moment.<br>\nI think the usability could still be improved; in particular it's not very convenient to use <code>crec</code> and <code>crec_consistent</code> separately because you typically have to repeat <code>q</code>, which could be rather complicated.</p>",
        "id": 156330667,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547769428
    },
    {
        "content": "<p><code>crec'</code> was an attempt to improve on that, but I still haven't found the best way to use it, for example <a href=\"https://github.com/rwbarton/lean-model-categories/blob/top-dev/src/top_small.lean#L110-L137\" target=\"_blank\" title=\"https://github.com/rwbarton/lean-model-categories/blob/top-dev/src/top_small.lean#L110-L137\">https://github.com/rwbarton/lean-model-categories/blob/top-dev/src/top_small.lean#L110-L137</a> is a bit awkward.</p>",
        "id": 156330879,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547769644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197703329\">said</a>:</p>\n<blockquote>\n<p>Okay, where should it go? And can someone help me document it?</p>\n</blockquote>\n<p>One reason I've been dragging my feet on <code>crec</code> in particular is that I feel there's some better version of it that wants to come out, maybe involving tactic support, I'm not sure. For example, <a href=\"https://github.com/guillaumebrunerie/initiality\">https://github.com/guillaumebrunerie/initiality</a> uses the same pattern but on a much larger scale--of course one could translate it as-is into Lean, but is there a place for <code>crec</code> (as-is) or some other kind of structure here? <code>crec</code> also doesn't do a very good job of solving the problem it was originally conceived for (it reduced it to something tractable, but far from elegant).</p>",
        "id": 197709425,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589556799
    },
    {
        "content": "<p>But, I guess we can just add it is for now, and worry about all that later.</p>",
        "id": 197709619,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589556896
    }
]