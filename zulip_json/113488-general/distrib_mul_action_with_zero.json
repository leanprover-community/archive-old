[
    {
        "content": "<p>Is there any reason we don't have <code>distrib_mul_action_with_zero</code>? <code>module</code> isn't quite the intersection of <code>distrib_mul_action</code> and <code>mul_action_with_zero</code> as it also assumes <code>add_smul : ∀ (r s : R) (x : M), (r + s) • x = r • x + s • x</code>.</p>",
        "id": 252577501,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631169130
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 252577538,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631169153
    },
    {
        "content": "<p>Probably due to lack of particular need?</p>",
        "id": 252578452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631169859
    },
    {
        "content": "<p>It comes up quite a lot with what I'm doing now. These are abstract lemmas, so it's not like I have a concrete example satisfying <code>distrib_mul_action_with_zero</code>. Should we define it then?</p>",
        "id": 252580381,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631171186
    },
    {
        "content": "<p>I'm not opposed to adding it. I think I actually have an example of such an action in <a href=\"https://github.com/leanprover-community/mathlib/pull/8945/files#diff-923fd2b8078cd05fe5d03aee47329529e737233260a69f86464faf2602c94ccbR1001\">https://github.com/leanprover-community/mathlib/pull/8945/files#diff-923fd2b8078cd05fe5d03aee47329529e737233260a69f86464faf2602c94ccbR1001</a></p>",
        "id": 252645406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631201294
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.pointwise_distrib_mul_action\">docs#submodule.pointwise_distrib_mul_action</a>  and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.pointwise_mul_action_with_zero\">docs#submodule.pointwise_mul_action_with_zero</a> for when the PR lands)</p>",
        "id": 252645477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631201330
    },
    {
        "content": "<p>Ahah! Do you want to do it, as you seem to have done that all your life, or should I take the opportunity to learn about writing scalar actions and get gently pestered?</p>",
        "id": 252646444,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631201744
    },
    {
        "content": "<p>Please go ahead!</p>",
        "id": 252646616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631201800
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action_with_zero\">docs#mul_action_with_zero</a> was <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>'s doing anyway, I thought</p>",
        "id": 252646653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631201814
    },
    {
        "content": "<p>What's happening here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.smul_with_zero</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--  An action of a monoid with zero `R` on a Type `M`, also with `0`, extends `distrib_mul_action`</span>\n<span class=\"sd\">and is compatible with `0` (both in `R` and in `M`), with `1 ∈ R`, and with associativity of</span>\n<span class=\"sd\">multiplication on the monoid `M`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">distrib_mul_action_with_zero</span> <span class=\"kd\">extends</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- this field is copied from `smul_with_zero`, as `extends` behaves poorly</span>\n<span class=\"o\">(</span><span class=\"n\">zero_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Converts a `mul` typeclass into the corresponding `smul` one. See also `semiring.to_module` -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">monoid_with_zero.to_distrib_mul_action_with_zero</span> <span class=\"o\">:</span> <span class=\"n\">distrib_mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">mul_zero_class.to_smul_with_zero</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">monoid.to_distrib_mul_mul_action</span> <span class=\"n\">R</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at field 'zero_smul'</span>\n<span class=\"cm\">  smul_with_zero.zero_smul</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ∀ (m : R),</span>\n<span class=\"cm\">    @eq R</span>\n<span class=\"cm\">      (@has_scalar.smul R R</span>\n<span class=\"cm\">         (@smul_with_zero.to_has_scalar R R</span>\n<span class=\"cm\">            (@mul_zero_class.to_has_zero R</span>\n<span class=\"cm\">               (@mul_zero_one_class.to_mul_zero_class R (@monoid_with_zero.to_mul_zero_one_class R _inst_1)))</span>\n<span class=\"cm\">            (@mul_zero_class.to_has_zero R</span>\n<span class=\"cm\">               (@mul_zero_one_class.to_mul_zero_class R (@monoid_with_zero.to_mul_zero_one_class R _inst_1)))</span>\n<span class=\"cm\">            (@mul_zero_class.to_smul_with_zero R</span>\n<span class=\"cm\">               (@mul_zero_one_class.to_mul_zero_class R (@monoid_with_zero.to_mul_zero_one_class R _inst_1))))</span>\n<span class=\"cm\">         0</span>\n<span class=\"cm\">         m)</span>\n<span class=\"cm\">      0</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ∀ (m : R),</span>\n<span class=\"cm\">    @eq R</span>\n<span class=\"cm\">      (@has_scalar.smul R R</span>\n<span class=\"cm\">         (@mul_action.to_has_scalar R R (@monoid_with_zero.to_monoid R _inst_1)</span>\n<span class=\"cm\">            (@distrib_mul_action.to_mul_action R R (@monoid_with_zero.to_monoid R _inst_1) ⁇</span>\n<span class=\"cm\">               (@distrib_mul_action_with_zero.to_distrib_mul_action R R _inst_1 ⁇</span>\n<span class=\"cm\">                  (@monoid_with_zero.to_distrib_mul_action_with_zero R _inst_1))))</span>\n<span class=\"cm\">         0</span>\n<span class=\"cm\">         m)</span>\n<span class=\"cm\">      0</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 252670290,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631211207
    },
    {
        "content": "<p>Well for one that's highlighted as the wrong language</p>",
        "id": 252674107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631212608
    },
    {
        "content": "<p>Arf, Discord reflex here</p>",
        "id": 252675048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631212966
    },
    {
        "content": "<p>What is <code>monoid.to_distrib_mul_mul_action</code>?</p>",
        "id": 252675528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631213184
    },
    {
        "content": "<p>Sorry, that doesn't exist <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 252675704,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631213279
    },
    {
        "content": "<p>But that wasn't the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">function.injective.distrib_mul_action_with_zero</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">zero_hom</span> <span class=\"n\">M'</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">distrib_mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">hf.distrib_mul_action</span> <span class=\"n\">f</span> <span class=\"n\">smul</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">hf.smul_with_zero</span> <span class=\"n\">f</span> <span class=\"n\">smul</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p><del>Same error...</del> Different error, actually!</p>",
        "id": 252675785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631213302
    },
    {
        "content": "<p>I think I just don't know what I'm doing.</p>",
        "id": 252676641,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631213697
    },
    {
        "content": "<p>I'll study the typeclasses more thoroughly...</p>",
        "id": 252676670,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631213711
    },
    {
        "content": "<p>That's an entirely different code snippet!</p>",
        "id": 252683533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631216741
    },
    {
        "content": "<p>but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.distrib_mul_action\">docs#function.injective.distrib_mul_action</a> require an <code>add_monoid_hom</code> doesn't it?</p>",
        "id": 252683565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631216759
    },
    {
        "content": "<p>And you're passing it a <code>zero_hom</code> (edit: until you just fixed it)</p>",
        "id": 252683639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631216775
    },
    {
        "content": "<p>Psch <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 252683689,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631216807
    },
    {
        "content": "<p>What's the error message?</p>",
        "id": 252683702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631216812
    },
    {
        "content": "<p>Now that's ok. I left the confusing error messages land.</p>",
        "id": 252683762,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631216842
    },
    {
        "content": "<p>Right now it's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">M'</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">add_zero_class</span> <span class=\"n\">M'</span>\n</code></pre></div>",
        "id": 252683869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631216885
    },
    {
        "content": "<p>which I can just solve by upgrading <code>has_zero M'</code> to <code>add_monoid M'</code></p>",
        "id": 252683969,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631216935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>,  with the same definition as above, this loops (or at least repeats the same search over and over again) on typeclass inference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">][</span><span class=\"n\">distrib_mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>Have I born a monster?</p>",
        "id": 252693021,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631220538
    },
    {
        "content": "<p>It ends up repeating</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_225</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">M</span> <span class=\"n\">_inst_2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_action_with_zero</span> <span class=\"bp\">?</span><span class=\"n\">x_226</span> <span class=\"bp\">?</span><span class=\"n\">x_227</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_225</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">M</span> <span class=\"n\">_inst_2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">distrib_mul_action_with_zero.to_mul_action_with_zero</span> <span class=\"bp\">?</span><span class=\"n\">x_228</span> <span class=\"bp\">?</span><span class=\"n\">x_229</span> <span class=\"bp\">?</span><span class=\"n\">x_230</span> <span class=\"bp\">?</span><span class=\"n\">x_231</span> <span class=\"bp\">?</span><span class=\"n\">x_232</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"n\">cached</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span> <span class=\"n\">add_monoid</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_2</span>\n</code></pre></div>",
        "id": 252693110,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631220583
    },
    {
        "content": "<p>Actually, even <code>#check distrib_mul_action_with_zero.to_mul_action_with_zero R M</code> fails to terminate <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span></p>",
        "id": 252693787,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631220829
    },
    {
        "content": "<p>Mwe?</p>",
        "id": 252693885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631220856
    },
    {
        "content": "<p>Same as above</p>",
        "id": 252693905,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631220866
    },
    {
        "content": "<p>I thought all your snippets above gave errors</p>",
        "id": 252694054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631220925
    },
    {
        "content": "<p>Can you put the whole lot inone code block?</p>",
        "id": 252694055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631220925
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.smul_with_zero</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">distrib_mul_action_with_zero</span> <span class=\"kd\">extends</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[priority 100]</span> <span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">distrib_mul_action_with_zero.to_mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">m</span><span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">distrib_mul_action_with_zero.to_mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 252694060,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631220928
    },
    {
        "content": "<p>What the heck is <code>[m :</code> for there?</p>",
        "id": 252694211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631220979
    },
    {
        "content": "<p>It has the same type as the instance you're trying to produce!</p>",
        "id": 252694300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631221023
    },
    {
        "content": "<p>Oh, yeah. Words. Speaking. Hard. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 252694379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631221059
    },
    {
        "content": "<p>I knew I was being dumb!</p>",
        "id": 252694490,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631221092
    },
    {
        "content": "<p>I just didn't know how.</p>",
        "id": 252694520,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631221104
    },
    {
        "content": "<p>Thanks a lot <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 252694721,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631221194
    },
    {
        "content": "<p>Often talking to other people is a good way to get to the bottom of situations like that! Before chatrooms I used to write long emails to people every time I'd proved 0=1 and during my explanation I'd realise my mistake. What's that technique called? Something to do with ducks or something?</p>",
        "id": 252694734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631221197
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Rubber_duck_debugging\">https://en.wikipedia.org/wiki/Rubber_duck_debugging</a></p>",
        "id": 252694911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631221230
    },
    {
        "content": "<p>Ahah! I actually managed to make all the proofs work.</p>",
        "id": 252702678,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631224767
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9123\">#9123</a></p>",
        "id": 252704284,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631225669
    },
    {
        "content": "<p>I didn't relax any <code>module</code> to <code>distrib_mul_action_with_zero</code> yet. Should that be part of this PR?</p>",
        "id": 252704350,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631225711
    },
    {
        "content": "<p>I think you should probably at least add instances for everything that already has a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action_with_zero\">docs#mul_action_with_zero</a> instance and can be generalized</p>",
        "id": 252706767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631227184
    },
    {
        "content": "<p>Namely, <code>pi</code>, <code>prod</code>, and <code>order_dual</code>.</p>",
        "id": 252707116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631227401
    },
    {
        "content": "<p>Also, there seems to be a duplicate! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite.monoid_with_zero.to_opposite_mul_action_with_zero\">docs#opposite.monoid_with_zero.to_opposite_mul_action_with_zero</a>  vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_with_zero.to_opposite_mul_action_with_zero\">docs#monoid_with_zero.to_opposite_mul_action_with_zero</a></p>",
        "id": 252707153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631227421
    },
    {
        "content": "<p>Oooh, good find!</p>",
        "id": 252707238,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631227466
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite.semiring.to_opposite_module\">docs#opposite.semiring.to_opposite_module</a> is also a duplicate of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semiring.to_opposite_module\">docs#semiring.to_opposite_module</a></p>",
        "id": 252707287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631227504
    },
    {
        "content": "<p>Which ones should I remove?</p>",
        "id": 252707316,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631227523
    },
    {
        "content": "<p>It looks like some sinister accidental namespacing has prevented their names clashing</p>",
        "id": 252707321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631227528
    },
    {
        "content": "<p>The <code>opposite.</code> prefix shouldn't be there</p>",
        "id": 252707331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631227535
    },
    {
        "content": "<p>And <code>mul_zero_class.to_opposite_smul_with_zero</code> vs <code>opposite.mul_zero_class.to_opposite_smul_with_zero</code></p>",
        "id": 252709224,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631228597
    },
    {
        "content": "<p>I don't understand this build fail: <a href=\"https://github.com/leanprover-community/mathlib/runs/3561609511\">https://github.com/leanprover-community/mathlib/runs/3561609511</a><br>\nbut maybe the <code>pi</code>/<code>prod</code>/<code>order_dual</code> instances will solve it?</p>",
        "id": 252749844,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631262085
    },
    {
        "content": "<p>My hunch: The build failure is that the <code>has_scalar</code> in that <code>is_scalar_tower</code> is not syntactically equal to the one it used to be (aka the one we have an instance for), and the lean3 typeclass search gets stuck on dependent arguments like that sometimes.</p>",
        "id": 252750707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631262562
    },
    {
        "content": "<p>Arf, what can I do?</p>",
        "id": 252751069,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631262747
    },
    {
        "content": "<p>Well, your PR has some typos that may or may not help</p>",
        "id": 252751122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631262781
    },
    {
        "content": "<p>I'd try finding the instance manually with a <code>haveI</code>, and see if lean thinks their types are equal</p>",
        "id": 252751147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631262795
    },
    {
        "content": "<p>I could squash all the typos had I a functioning infoview, but I'm in hell so I'm coding blindly.</p>",
        "id": 252751588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631262980
    },
    {
        "content": "<p>Why are you in hell?</p>",
        "id": 252752083,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631263206
    },
    {
        "content": "<p>I have no idea <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 252752170,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631263257
    },
    {
        "content": "<p>I think the best approach to get out of it is:</p>\n<ul>\n<li>Close all tabs in vs-code</li>\n<li>Close vs-code</li>\n<li>Use <code>get-cache --rev</code> on the last known revision</li>\n<li>Reopen vs-code</li>\n</ul>",
        "id": 252752197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631263272
    },
    {
        "content": "<p>Didn't do anything but I'm out of hell!</p>",
        "id": 252753706,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631264081
    },
    {
        "content": "<p>All the <code>order_dual</code> instances in <code>algebra.ordered_smul</code> but the last one could be generalized. That's why I had a relaxable <code>semiring</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 252776478,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631275945
    },
    {
        "content": "<p>How did you do that slide by the way? <a href=\"https://eric-wieser.github.io/fmm-2021/#/elementary-multiplication-stronger/4\">https://eric-wieser.github.io/fmm-2021/#/elementary-multiplication-stronger/4</a><br>\nI'm very interested in visualising hierarchies like that. I think we should have such pictures somewhere in the docs.</p>",
        "id": 252812723,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631291220
    },
    {
        "content": "<p>I wrote it out by hand as a graphviz file then compiled it to svg.</p>",
        "id": 252813578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631291578
    },
    {
        "content": "<p><a href=\"https://eric-wieser.github.io/fmm-2021/figures/has_mul.dot\">https://eric-wieser.github.io/fmm-2021/figures/has_mul.dot</a></p>",
        "id": 252813680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631291625
    },
    {
        "content": "<p>(If you hit view source on the presentation, every <code>.dot.svg</code> file has a corresponding <code>.dot</code> uploaded)</p>",
        "id": 252813831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631291679
    },
    {
        "content": "<p>Oh, by hand.</p>",
        "id": 252814116,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631291794
    },
    {
        "content": "<p>I seem to have gotten a random timeout: <a href=\"https://github.com/leanprover-community/mathlib/pull/9123/checks?check_run_id=3567080085\">https://github.com/leanprover-community/mathlib/pull/9123/checks?check_run_id=3567080085</a><br>\nI can't reproduce it locally.</p>",
        "id": 252815253,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631292304
    },
    {
        "content": "<p>The culprit is <a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/ideal/basic.html#ideal.module_pi\"><code>ideal.module_pi</code></a>. Is there any speedup available?</p>",
        "id": 252816196,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631292779
    },
    {
        "content": "<p>I've got timeouts there before</p>",
        "id": 252822529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631295551
    },
    {
        "content": "<p>Can you spin out a PR to delete all the duplicate instances so that we can at least merge that while you fight the timeouts?</p>",
        "id": 252822593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631295580
    },
    {
        "content": "<p>Sure</p>",
        "id": 252823814,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631296113
    },
    {
        "content": "<p>Uh. I reran the jobs and I got a different error. <a href=\"https://github.com/leanprover-community/mathlib/pull/9123/checks?check_run_id=3569471500\">https://github.com/leanprover-community/mathlib/pull/9123/checks?check_run_id=3569471500</a></p>",
        "id": 252836096,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631301551
    },
    {
        "content": "<p>New scalar hierarchy <a href=\"/user_uploads/3121/MIEckqOgJUru9pUITP0glmDw/image.png\">scalar_hierarchy.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MIEckqOgJUru9pUITP0glmDw/image.png\" title=\"scalar_hierarchy.png\"><img src=\"/user_uploads/3121/MIEckqOgJUru9pUITP0glmDw/image.png\"></a></div>",
        "id": 252847947,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631306731
    },
    {
        "content": "<p>Yes, I had fun with Paint</p>",
        "id": 252847981,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631306753
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_distrib_mul_action\">docs#mul_distrib_mul_action</a> is also new</p>",
        "id": 252861428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631314517
    },
    {
        "content": "<p>Where does it fit? Between <code>mul_semiring_action</code> and <code>distrib_mul_action</code>?</p>",
        "id": 252893182,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631348712
    },
    {
        "content": "<p>Updated updated scalar hierarchy <a href=\"/user_uploads/3121/1i66Y2oBlVBKHJ9pZ4wOhXMu/Scalar-hierarchy.png\">Scalar-hierarchy.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1i66Y2oBlVBKHJ9pZ4wOhXMu/Scalar-hierarchy.png\" title=\"Scalar-hierarchy.png\"><img src=\"/user_uploads/3121/1i66Y2oBlVBKHJ9pZ4wOhXMu/Scalar-hierarchy.png\"></a></div>",
        "id": 252896770,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631352793
    },
    {
        "content": "<p>Oh sorry, it's adjacent to distrb_mul_action not a superset of it</p>",
        "id": 252898888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631355213
    },
    {
        "content": "<p>Ah, and <code>mul_semiring_action</code> goes to both of them?</p>",
        "id": 252898946,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631355245
    },
    {
        "content": "<p>Yes!</p>",
        "id": 252898995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631355327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/distrib_mul_action_with_zero/near/252816196\">said</a>:</p>\n<blockquote>\n<p>The culprit is <a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/ideal/basic.html#ideal.module_pi\"><code>ideal.module_pi</code></a>. Is there any speedup available?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9148\">#9148</a></p>",
        "id": 252924635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631382404
    },
    {
        "content": "<p>Wow thanks!</p>",
        "id": 252924736,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631382512
    },
    {
        "content": "<p>Sorry to bother you again, but I'm getting yet another error I don't understand. <a href=\"https://github.com/leanprover-community/mathlib/runs/3579349443\">https://github.com/leanprover-community/mathlib/runs/3579349443</a><br>\nThe instructions are very detailed, but I don't really get it. How do I \"run <code>scripts/mk_all.sh</code>\"? <code>sh mk_all.sh</code> doesn't seem to produce anything.</p>\n<p>Here's the message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `fails_quickly` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> TYPE CLASS SEARCHES TIMED OUT.</span>\n<span class=\"cm\">The following instances are part of a loop, or an excessively long search.</span>\n<span class=\"cm\">It is common that the loop occurs in a different class than the one flagged below,</span>\n<span class=\"cm\">but usually an instance that is part of the loop is also flagged.</span>\n<span class=\"cm\">To debug:</span>\n<span class=\"cm\">(1) run `scripts/mk_all.sh` and create a file with `import all` and</span>\n<span class=\"cm\">`set_option trace.class_instances true`</span>\n<span class=\"cm\">(2) Recreate the state shown in the error message. You can do this easily by copying the type of</span>\n<span class=\"cm\">the instance (the output of `#check @my_instance`), turning this into an example and removing the</span>\n<span class=\"cm\">last argument in square brackets. Prove the example using `by apply_instance`.</span>\n<span class=\"cm\">For example, if `additive.topological_add_group` raises an error, run</span>\n</code></pre></div>\n<p>example {G : Type*} [topological_space G] [group G] : topological_add_group (additive G) :=<br>\nby apply_instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">What</span> <span class=\"n\">error</span> <span class=\"k\">do</span> <span class=\"n\">you</span> <span class=\"n\">get</span><span class=\"bp\">?</span>\n<span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">If</span> <span class=\"n\">the</span> <span class=\"n\">error</span> <span class=\"n\">is</span> <span class=\"s2\">\"tactic.mk_instance failed to generate instance\"</span><span class=\"o\">,</span>\n<span class=\"n\">there</span> <span class=\"n\">might</span> <span class=\"n\">be</span> <span class=\"n\">nothing</span> <span class=\"n\">wrong.</span> <span class=\"n\">But</span> <span class=\"n\">it</span> <span class=\"n\">might</span> <span class=\"n\">take</span> <span class=\"n\">unreasonably</span> <span class=\"n\">long</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">type</span><span class=\"bp\">-</span><span class=\"kd\">class</span> <span class=\"n\">inference</span> <span class=\"n\">to</span>\n<span class=\"n\">fail.</span> <span class=\"n\">Check</span> <span class=\"n\">the</span> <span class=\"n\">trace</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"k\">if</span> <span class=\"n\">type</span><span class=\"bp\">-</span><span class=\"kd\">class</span> <span class=\"n\">inference</span> <span class=\"n\">takes</span> <span class=\"n\">any</span> <span class=\"n\">unnecessary</span> <span class=\"n\">long</span> <span class=\"n\">unexpected</span> <span class=\"n\">turns.</span>\n<span class=\"n\">If</span> <span class=\"n\">not</span><span class=\"o\">,</span> <span class=\"n\">feel</span> <span class=\"n\">free</span> <span class=\"n\">to</span> <span class=\"n\">increase</span> <span class=\"n\">the</span> <span class=\"n\">value</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"kd\">definition</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">linter</span> <span class=\"bp\">`</span><span class=\"n\">fails_quickly</span><span class=\"bp\">`.</span>\n<span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">If</span> <span class=\"n\">the</span> <span class=\"n\">error</span> <span class=\"n\">is</span> <span class=\"s2\">\"maximum class-instance resolution depth has been reached\"</span> <span class=\"n\">there</span> <span class=\"n\">is</span> <span class=\"n\">almost</span>\n<span class=\"n\">certainly</span> <span class=\"n\">a</span> <span class=\"n\">loop</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">type</span><span class=\"bp\">-</span><span class=\"kd\">class</span> <span class=\"n\">inference.</span> <span class=\"n\">Find</span> <span class=\"n\">which</span> <span class=\"kd\">instance</span> <span class=\"n\">causes</span> <span class=\"n\">the</span> <span class=\"n\">type</span><span class=\"bp\">-</span><span class=\"kd\">class</span> <span class=\"n\">inference</span> <span class=\"n\">to</span>\n<span class=\"n\">go</span> <span class=\"n\">astray</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">fix</span> <span class=\"n\">that</span> <span class=\"kd\">instance</span><span class=\"bp\">.</span> <span class=\"bp\">-/</span>\n<span class=\"c1\">-- algebra/module/pi.lean</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">pi.has_scalar'</span> <span class=\"c\">/-</span><span class=\"cm\"> type-class inference timed out</span>\n<span class=\"cm\">State:</span>\n<span class=\"cm\">I : Type u,</span>\n<span class=\"cm\">f : I → Type v,</span>\n<span class=\"cm\">g : I → Type u_1</span>\n<span class=\"cm\">⊢ has_scalar (Π (i : I), f i) (Π (i : I), g i) -/</span>\n</code></pre></div>",
        "id": 253003930,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631471923
    },
    {
        "content": "<p>Running <code>./scripts/mk_all.sh</code> creates a file <code>src/all.lean</code> iirc</p>",
        "id": 253009471,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1631477946
    },
    {
        "content": "<p>Then you should be able to import the whole of mathlib using import all</p>",
        "id": 253009500,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1631477995
    }
]