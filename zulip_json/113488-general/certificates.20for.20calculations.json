[
    {
        "content": "<p>Could someone help me prove</p>\n<div class=\"codehilite\"><pre><span></span>def s (p : ℕ) : ℕ → ℕ\n| 0 := 4\n| (i+1) := ((s i)^2 - 2) % (2^p - 1)\n\nlemma s15 : s 17 15 = 0 := sorry\n</pre></div>\n\n\n<p>I can't get anywhere close: here are my attempts so far.</p>\n<div class=\"codehilite\"><pre><span></span>import tactic.norm_num\n\ndef s (p : ℕ) : ℕ → ℕ\n| 0 := 4\n| (i+1) := ((s i)^2 - 2) % (2^p - 1)\n\nlemma s0 : s 17 0 = 4 := rfl\nlemma s1 : s 17 1 = 14 := rfl\nlemma s2 : s 17 2 = 194 := rfl\n\n-- deep recursion:\n-- lemma s3_a : s 17 3 = 37634 :=\n\n-- timeout:\n-- lemma s3_b : s 17 3 = 37634 := rfl\n-- by { dsimp [s] {single_pass:=tt}, rw s2, norm_num, }\n\n-- timeout:\n-- lemma s3_c : s 17 3 = 37634 :=\n-- begin\n--   dsimp [s] {single_pass:=tt}, transitivity,\n--   apply congr_fun, apply congr_arg, apply congr_fun,\n--   apply congr_arg, apply congr_fun, apply congr_arg,\n--   exact s2, norm_num,\n-- end\n</pre></div>",
        "id": 174706211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567419764
    },
    {
        "content": "<p>(A student here may have a go at the Lucas-Lehmer primality test, but I'd like to know that we can run it, before she writes the proof that it works...)</p>",
        "id": 174706290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567419849
    },
    {
        "content": "<p>I guess it helps a lot to use optimizations for these computations in base 2</p>",
        "id": 174707543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567421265
    },
    {
        "content": "<p>Nevertheless, you would hope that at some point Lean can cope on its own with numbers of size <code>2^17</code>.</p>",
        "id": 174707866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567421670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I guess the tricky bit is <code>% (2^p - 1)</code>.</p>",
        "id": 174707920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567421723
    },
    {
        "content": "<p>There are certainly tricks, like using that $k = (k mod 2^n) + \\floor{k/2^n} mod 2^{n-1}$, but yeah, I'd like to know how to do this without such tricks (which should only be deployed later).</p>",
        "id": 174707929,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567421733
    },
    {
        "content": "<p>But how is Lean going to calculate <code>foo % (2^17 - 1)</code>?</p>",
        "id": 174707993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567421791
    },
    {
        "content": "<p>That's going to take an insane amount of time, right?</p>",
        "id": 174707998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567421804
    },
    {
        "content": "<p>I have a tactic that gets the answer right, but I think the elaborator is getting in the way and causing the timeout</p>",
        "id": 174708023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567421865
    },
    {
        "content": "<p>I would think you <code>rw</code> immediately into <code>base 2</code> numbers, and then compute using the tricks.</p>",
        "id": 174708029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567421880
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"n\">def</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">s0</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"mi\">17</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">s_suc</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">]</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">prove_s</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">ea</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">s0</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">eb</span><span class=\"o\">,</span> <span class=\"n\">pb</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">prove_s</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ec</span> <span class=\"o\">:=</span> <span class=\"n\">reflect</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">ec&#39;</span><span class=\"o\">,</span> <span class=\"n\">pc</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">derive</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"err\">%%</span><span class=\"n\">eb</span> <span class=\"bp\">*</span> <span class=\"err\">%%</span><span class=\"n\">eb</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"err\">%%</span><span class=\"n\">ea</span><span class=\"o\">),</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">ec</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">s_suc</span> <span class=\"err\">%%</span><span class=\"n\">p</span> <span class=\"err\">%%</span><span class=\"n\">ea</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">%%</span><span class=\"n\">eb</span> <span class=\"err\">%%</span><span class=\"n\">ec</span> <span class=\"err\">%%</span><span class=\"n\">ha</span> <span class=\"err\">%%</span><span class=\"n\">pb</span> <span class=\"err\">%%</span><span class=\"n\">pc</span><span class=\"o\">))</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">norm_num_s</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">%%</span><span class=\"n\">p</span> <span class=\"err\">%%</span><span class=\"n\">ei</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">i</span> <span class=\"err\">←</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ei</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">ea</span><span class=\"o\">,</span> <span class=\"n\">pa</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">derive</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ea</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ec</span><span class=\"o\">,</span> <span class=\"n\">pc</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">prove_s</span> <span class=\"n\">p</span> <span class=\"n\">ea</span> <span class=\"n\">pa</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">%%</span><span class=\"n\">pc</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">s15</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"mi\">17</span> <span class=\"mi\">15</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num_s</span>\n</pre></div>",
        "id": 174708069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567421894
    },
    {
        "content": "<p>Honestly, <code>norm_num</code> is designed to be extensible and <code>prove_s</code> should properly be an extension (it can be one of the alternatives in the <code>norm_num.derive</code>), but right now you have to modify the <code>tactic.norm_num</code> file to do that</p>",
        "id": 174708117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567421979
    },
    {
        "content": "<p>Hmm, replacing the last line with <code>lemma s15 : s 17 15 = 0 := by { norm_num_s, refl }</code> still times out.</p>",
        "id": 174708125,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567421987
    },
    {
        "content": "<p>right, that's what I mean</p>",
        "id": 174708130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567421995
    },
    {
        "content": "<p>if you try to close the goal, the elaborator or something takes over and takes too long in doing so</p>",
        "id": 174708193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567422022
    },
    {
        "content": "<p>Hmm, okay, I'd got that far.</p>",
        "id": 174708194,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567422025
    },
    {
        "content": "<p>hm, I think it might be the kernel... this fails too</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">add_s_thm</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ep</span> <span class=\"o\">:=</span> <span class=\"n\">reflect</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">ea</span><span class=\"o\">,</span> <span class=\"n\">pa</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">derive</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">ep</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ea</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ec</span><span class=\"o\">,</span> <span class=\"n\">pc</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">prove_s</span> <span class=\"n\">ep</span> <span class=\"n\">ea</span> <span class=\"n\">pa</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">add_decl</span> <span class=\"err\">$</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">thm</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">%%</span><span class=\"n\">ep</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">ec</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"n\">pc</span><span class=\"o\">)</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">add_s_thm</span> <span class=\"mi\">17</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 174708547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567422373
    },
    {
        "content": "<p>in which case there is a bug somewhere, because there shouldn't be any significant kernel normalization</p>",
        "id": 174708608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567422435
    },
    {
        "content": "<p>oh!</p>",
        "id": 174708613,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567422445
    },
    {
        "content": "<p>unfortunately the kernel is absolutely terrible at reporting wtf is happening</p>",
        "id": 174708625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567422471
    },
    {
        "content": "<p>:-(</p>",
        "id": 174708787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567422619
    },
    {
        "content": "<p>I do not have words to express my frustration with lean being so slow at basic verified math. It would be great if I could just turn off definition unfolding, which isn't supposed to happen in this proof</p>",
        "id": 174708896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567422764
    },
    {
        "content": "<p>It is very easy to get the impression that this is a result of the fact that we have to check a big proof. It's not. This is easy, lean is being stupid</p>",
        "id": 174708966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567422843
    },
    {
        "content": "<p>I wonder if we can minimise an example here that shows clearly the problem.</p>",
        "id": 174709027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567422939
    },
    {
        "content": "<p>It would be nice to pass some good examples up the chain...</p>",
        "id": 174709037,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567422955
    },
    {
        "content": "<p>I'm not sure an example will help, in the sense that the problem is almost certainly fixable on the <code>norm_num</code> side. There is some bad application or something, and it's not on the happy path so lean totally falls to pieces</p>",
        "id": 174709863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567423878
    },
    {
        "content": "<p>the problem is that lean doesn't help very much to say what the problem is</p>",
        "id": 174709881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567423903
    },
    {
        "content": "<p>and since <code>norm_num</code> deals with a bunch of constants that have definitions, lean goes unfold-happy at the slightest misuse of anything and performance goes down to the level of \"2 ^ 4 exhausts memory\"</p>",
        "id": 174709984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567423983
    },
    {
        "content": "<p>So if the \"constants that have definitions\" get replaced by atoms, does the problem go away?</p>",
        "id": 174710457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567424521
    },
    {
        "content": "<p>probably lean will give a hard error somewhere instead of crashing</p>",
        "id": 174711242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567425450
    },
    {
        "content": "<p>but that's a bit hard to implement easily</p>",
        "id": 174711251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567425463
    },
    {
        "content": "<p>because we're talking about things like <code>+</code> on nat; it's not acceptable to say that <code>norm_num</code> doesn't accept goals containing these symbols anymore</p>",
        "id": 174711330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567425510
    },
    {
        "content": "<p>hey, this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">17</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">131071</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">s_suc</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"mi\">17</span> <span class=\"mi\">15</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">s0</span><span class=\"o\">,</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">15</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">s_suc</span> <span class=\"n\">foo</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I fixed a bug in <code>norm_num</code> which may be related, but it should only affect the proof of <code>foo</code>, not the main proof</p>",
        "id": 174712040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567426185
    },
    {
        "content": "<p>I better sleep, but I'll have a look in the morning.</p>",
        "id": 174714283,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567428293
    },
    {
        "content": "<blockquote>\n<p>It would be nice to pass some good examples up the chain...</p>\n</blockquote>\n<p><em>cough</em>goingtovisitLeotomorrow<em>cough</em></p>",
        "id": 174717262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567430685
    },
    {
        "content": "<p>It seems the bug fix in norm_num fixed my other attempts to prove <code>s 17 15 = 0</code>, so perhaps we can put this down to the norm_num bug, rather than a kernel problem?</p>",
        "id": 174747965,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567467382
    },
    {
        "content": "<p>the kernel problem is bad error reporting</p>",
        "id": 174748829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567468924
    },
    {
        "content": "<p>It's kind of difficult to test if norm_num is working if lean doesn't say when it's wrong</p>",
        "id": 174748859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567469011
    },
    {
        "content": "<p>keep in mind that norm_num is trying to prove things that are already true by rfl in principle</p>",
        "id": 174748905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567469077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, could I have some new help on this. I revisited this, and decided I needed to switch from <code>nat</code> to <code>int</code>. Unfortunately then your strategy using <code>norm_num</code> to handle each step is running into an error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">deep</span> <span class=\"n\">recursion</span> <span class=\"n\">was</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"err\">&#39;</span><span class=\"n\">replace&#39;</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">stack</span> <span class=\"n\">space</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">system</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Here is the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"n\">def</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span> <span class=\"err\">%</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">s_succ</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"mi\">7</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">7</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">127</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"mi\">7</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">s_succ</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}),</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">s_succ</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}),</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">s_succ</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}),</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">s_succ</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}),</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">s_succ</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This runs fine up to the <code>exact h</code>, and then takes a few seconds before giving the error message.</p>",
        "id": 198631936,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590379353
    },
    {
        "content": "<p>maybe you need to increase stack space in your system</p>",
        "id": 198632323,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590380068
    },
    {
        "content": "<p>Very unlikely, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>. The calculation is trivial, and changing <code>int</code> back to <code>nat</code> makes this work fine.</p>",
        "id": 198632472,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590380318
    },
    {
        "content": "<p>Here is a more minimized version:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">111</span> <span class=\"bp\">*</span> <span class=\"mi\">111</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">127</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n\n\n<p>this is the last subgoal</p>",
        "id": 198633534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590382237
    },
    {
        "content": "<p>I think <code>norm_num</code> has likely produced a bad proof, and rather than failing lean is trying to unfold everything to find out if it is actually a good proof</p>",
        "id": 198633542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590382276
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">12321</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">12319</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 198633598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590382406
    },
    {
        "content": "<p>Oh dear...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">has_sub</span> <span class=\"bp\">=</span> <span class=\"n\">add_group_has_sub</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_sub</span><span class=\"bp\">.</span><span class=\"n\">sub</span> <span class=\"bp\">ℤ</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">has_sub</span> <span class=\"mi\">12321</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_sub</span><span class=\"bp\">.</span><span class=\"n\">sub</span> <span class=\"bp\">ℤ</span> <span class=\"n\">add_group_has_sub</span> <span class=\"mi\">12321</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- deep recursion</span>\n</code></pre></div>",
        "id": 198633980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590383043
    },
    {
        "content": "<p>This may have been a consequence of the move to get algebra out of core</p>",
        "id": 198633987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590383090
    },
    {
        "content": "<p>I think the issue is actually in the kernel check; the elaborator seems to have no problem with typechecking this</p>",
        "id": 198634162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590383421
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2804\">#2804</a></p>",
        "id": 198634783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590384552
    }
]