[
    {
        "content": "<p>Notation <code>0=has_zero.zero</code> -- those are syntactically equal, right? The notation is just something for the parser and pretty printer.</p>",
        "id": 166489962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558731770
    },
    {
        "content": "<p>I think 0 is notation for <code>Nat.zero</code> as well.</p>",
        "id": 166490122,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558731906
    },
    {
        "content": "<p>There are multiple terms (which are syntactically different) that can represent the same numeral. You can see your representation if you use the option <code>set_option pp.numerals false</code>:</p>\n<div class=\"codehilite\"><pre><span></span>set_option pp.numerals false\nexample : nat.zero = 0 := _ /- not syntactically equal -/\n</pre></div>",
        "id": 166495437,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558736787
    },
    {
        "content": "<p>I should remark that without changing the option <code>pp.numerals</code>the goal is displayed as <code>0 = 0</code></p>",
        "id": 166495466,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558736826
    },
    {
        "content": "<p>gaargh, <code>#print notation 0</code> is an error because <code>0</code> is some sort of numeral. Maybe my question is: is <code>(has_le.le 3 4) = (3 ≤ 4)</code> a syntactic equality?</p>",
        "id": 166516107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558770609
    },
    {
        "content": "<p>yes, assuming you haven't locally overridden <code>&lt;=</code></p>",
        "id": 166516704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558771602
    },
    {
        "content": "<p>and assuming 3 and 4 aren't being represented differently on the two sides, which can happen \"in the wild\"</p>",
        "id": 166516719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558771641
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I am surprised both of these work.</p>",
        "id": 166516768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558771686
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Maybe that's a better example of what I mean. I thought rw was picky about syntactic equality. Neither rewrite fails.</p>",
        "id": 166516784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558771766
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"c1\">-- 3</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- 3</span>\n</pre></div>",
        "id": 166516793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558771794
    },
    {
        "content": "<p>I understand the numerals point. I'm trying to work out when rewrites work, that's the heart of it.</p>",
        "id": 166516840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558771836
    },
    {
        "content": "<p><code>has_zero.zero</code> is reducible</p>",
        "id": 166516842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558771858
    },
    {
        "content": "<p>But is <code>has_zero.zero nat</code> syntactically equal to <code>nat.zero</code>?</p>",
        "id": 166516854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558771910
    },
    {
        "content": "<p>no</p>",
        "id": 166516855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558771915
    },
    {
        "content": "<p>but it is up to unfolding reducible definitions</p>",
        "id": 166516902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558771926
    },
    {
        "content": "<p>So does Lean unfold all reducible definitions before trying to rewrite?</p>",
        "id": 166516904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558771939
    },
    {
        "content": "<p>I think so</p>",
        "id": 166516905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558771947
    },
    {
        "content": "<p>Or does it just internally store them as unfolded?</p>",
        "id": 166516906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558771955
    },
    {
        "content": "<p>or at least it does something equivalent to that</p>",
        "id": 166516907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558771959
    },
    {
        "content": "<p>I think it unfolds when necessary in the matching algorithm</p>",
        "id": 166516908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558771977
    },
    {
        "content": "<p>it's the same as the unification you get from <code>exact</code> except it only unfolds reducible instead of reducible + semireducible</p>",
        "id": 166516927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558772023
    },
    {
        "content": "<p>I see. A rewrite attempts to find a subterm of the goal which is \"equal\" to the lhs of what I'm wanting to rewrite with, and \"equal\" is somewhere between syntactic and definitional equality.</p>",
        "id": 166516972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558772099
    },
    {
        "content": "<p>yes</p>",
        "id": 166516988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558772148
    },
    {
        "content": "<p>yet another equality, I know</p>",
        "id": 166516991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558772157
    },
    {
        "content": "<p><code>class has_scalar (α : Type u) (γ : Type v) := (smul : α → γ → γ)</code><br>\n(from mathlib somewhere). Why is that marked as <code>[reducible]</code>?</p>",
        "id": 166517095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558772315
    },
    {
        "content": "<p>I mean</p>",
        "id": 166517097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558772325
    },
    {
        "content": "<p>how come <code>has_scalar.smul</code> is reducible?</p>",
        "id": 166517098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558772332
    },
    {
        "content": "<p>I don't see anyone adding the tag explicitly</p>",
        "id": 166517104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558772343
    },
    {
        "content": "<p>but apparently the system is that notation is reducible</p>",
        "id": 166517108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558772359
    },
    {
        "content": "<p>and I can indeed check it's reducible using <code>#print</code></p>",
        "id": 166517110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558772374
    },
    {
        "content": "<p>Are all fields of a class automatically reducible?</p>",
        "id": 166517165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558772437
    },
    {
        "content": "<p>Hm, I didn't know that. I would guess all fields are reducible by default</p>",
        "id": 166517897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558773830
    },
    {
        "content": "<p>If <code>z : complex</code> then is <code>z.re</code> syntactically equal to <code>complex.re z</code>?</p>",
        "id": 166524901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558786576
    },
    {
        "content": "<p>I'm pretty sure <code>z.re</code> is elaborated into <code>complex.re z</code> before the expression you typed is even \"real\"</p>",
        "id": 166525425,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558787579
    },
    {
        "content": "<p>something something \"projection macro\"</p>",
        "id": 166525437,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558787593
    },
    {
        "content": "<p>I think it's actually parsed as <code>complex.re z</code>, rather than elaborated.</p>",
        "id": 166525485,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558787670
    },
    {
        "content": "<p>I thought the parser created a projection <code>macro</code> application which said \"remember to turn this into a <code>something.re</code> later, you can figure out what <code>something</code> means then too\" and that's why if you write <code>nonsense.foo</code> you get a special error in the elaborator \"invalid field notation... blah\"</p>",
        "id": 166525568,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558787849
    },
    {
        "content": "<p>Indeed, <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/frontends/lean/elaborator.cpp#L1921\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/frontends/lean/elaborator.cpp#L1921\">https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/frontends/lean/elaborator.cpp#L1921</a></p>",
        "id": 166525574,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558787876
    },
    {
        "content": "<p>You're probably right. I don't know that much about this.</p>",
        "id": 166525633,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558787952
    },
    {
        "content": "<p>Incidentally</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">alpha_eqv</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"c1\">-- tt</span>\n</pre></div>",
        "id": 166525637,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558787966
    },
    {
        "content": "<p>I'm not sure if <code>alpha_eqv</code> is the same as syntactically equal.</p>",
        "id": 166525696,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558788043
    },
    {
        "content": "<p>Aah -- if I can test for syntactic equality then I don't need to bug you guys with questions :D</p>",
        "id": 166526095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558788705
    },
    {
        "content": "<p>Here is that macro in action</p>",
        "id": 166526621,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558789549
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">a_proj</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 166526623,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558789552
    },
    {
        "content": "<p>I usually avoid talking about different kinds of equality when teaching maths undergrads, but because I'm lecturing a term-long course devoted to Lean I am going to try and tackle it. I realise I don't fully know the definition of syntactic equality. My working definition which I usually tell UGs is \"literally the same keypresses in the same order\". But I know there are exceptions to this. For example changing the names of bound variables doesn't destroy syntactic equality, and replacing notation by what it's notation doesn't either, I believe (because I think the parser does this before we even get to what the rest of Lean thinks; the parser might also be the reason for the bound variables thing, I have no idea about de Bruijn indices). But I think I just discovered another possibility -- perhaps changing bracket types also doesn't break syntactic equality? I'm not entirely sure how to check this. Here's an attempt, based on the maxim \"<code>rw</code> works up to syntactic equality\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ ∀ (x : ℕ), x = 1</span>\n  <span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ ∀ (x : ℕ), x = 1</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ ∀ {x : ℕ}, x = 1</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ ∀ {x : ℕ}, x = 1</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there actually a well-defined notion of being syntactically equal or is it a slightly informal notion? If the former, does changing binder types (is that what they're called?) preserve syntactic equality?</p>\n<p>I am living in mild fear that when I send this message I'll find a message just above it explaining everything; I couldn't figure out how to efficiently read a thread called syntactic equality other than by posting to it.</p>",
        "id": 268069520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642192689
    },
    {
        "content": "<p>Aah great Chris Hughes gave me clues in 2019!</p>",
        "id": 268069817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642192840
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">expr.alpha_eqv</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- tt</span>\n</code></pre></div>\n<p>But the above thread also teaches me that \"<code>rw</code> works up to syntactic equality\" is not actually true?</p>",
        "id": 268070073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642192963
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">expr.alpha_eqv</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat.zero</span><span class=\"o\">)</span> <span class=\"c1\">-- ff</span>\n</code></pre></div>\n<p>gaargh. Is one of \"syntactically equal\" and \"alpha equivalent\" strictly stronger than the other? I suspect I was asking about 0 because I was trying to write NNG by the way.</p>",
        "id": 268070341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642193087
    },
    {
        "content": "<p>\"literally the same keypresses in the same order\" is probably not a good way to phrase this, since these concepts apply to elaborated expressions, not input (pre-) expressions. I would interpret \"syntactically equal\" as a judgment about the abstract syntax trees of the expressions. Think of an expr as a term of type <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr\">docs#expr</a> , so a tree of applications of those constructors. Two exprs are equal if they have identical trees. Two exprs are alpha-equivalent if their trees are the same, ignoring name and binder type arguments.</p>",
        "id": 268072579,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642194288
    },
    {
        "content": "<blockquote>\n<p>ignoring name and binder type arguments.</p>\n</blockquote>\n<p>(I think. I actually just tried this out and it seems like binder types are identified by alpha equiv, but that's news to me.)</p>",
        "id": 268072783,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642194385
    },
    {
        "content": "<p>re the same keypresses -- I need a way to explain it to mathematicians and I'm absolutely not talking about <code>expr</code>s, so this was a good first approximation.</p>",
        "id": 268072787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642194389
    },
    {
        "content": "<p>Right -- one of the <code>#eval</code>s above seemed to indicate that binder types were identified by alpha equiv assuming that's what <code>alpha_eqv</code> stands for</p>",
        "id": 268072847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642194426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/syntactic.20equality/near/268070341\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">expr.alpha_eqv</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat.zero</span><span class=\"o\">)</span> <span class=\"c1\">-- ff</span>\n</code></pre></div>\n<p>gaargh. Is one of \"syntactically equal\" and \"alpha equivalent\" strictly stronger than the other? I suspect I was asking about 0 because I was trying to write NNG by the way.</p>\n</blockquote>\n<p>These aren't even definitionally equal -- the first is waiting for an argument of type <code>has_zero nat</code> -- but even with that extra argument they're not alpha equivalent. Different syntax trees, one is an application of <code>has_zero.zero</code> and the other is a constant <code>nat.zero</code>.</p>",
        "id": 268073062,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642194562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/syntactic.20equality/near/268070073\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">expr.alpha_eqv</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- tt</span>\n</code></pre></div>\n<p>But the above thread also teaches me that \"<code>rw</code> works up to syntactic equality\" is not actually true?</p>\n</blockquote>\n<p>It's not actually true. <code>rw</code> works up to defeq modulo reducible definitions, which, assuming there are no reducible definitions involved, is roughly alpha equivalence</p>",
        "id": 268081263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642198909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/syntactic.20equality/near/268070341\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">expr.alpha_eqv</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat.zero</span><span class=\"o\">)</span> <span class=\"c1\">-- ff</span>\n</code></pre></div>\n<p>gaargh. Is one of \"syntactically equal\" and \"alpha equivalent\" strictly stronger than the other? I suspect I was asking about 0 because I was trying to write NNG by the way.</p>\n</blockquote>\n<p>\"syntactically equal\" is the most equal equal. It is equality at the meta-level, so it implies any other notion of equivalence</p>",
        "id": 268081553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642199064
    },
    {
        "content": "<p>In meta-lean, it means if you have <code>a : expr</code> and <code>b : expr</code> we're talking about <code>a = b</code></p>",
        "id": 268081604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642199103
    },
    {
        "content": "<p>\"the same keypresses in the same order\" is closer to equality of pre-expressions, <code>a = b</code> where <code>a, b : pexpr</code>. There can be different pre-expressions that produce the same <code>expr</code> after elaboration, which is why \"syntactically equal\" ignores certain aspects like use of notations. (Amusingly, you can also have the <em>same</em> pre-expression produce two exprs in two different contexts, so there is no implication in either direction here.)</p>",
        "id": 268081969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642199309
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">parse_me_twice</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">parse_me_twice</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"c1\">-- foo (λ (x : ℕ), x) (λ (x : ℤ), x) : Prop</span>\n</code></pre></div>",
        "id": 268082546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642199607
    },
    {
        "content": "<p>There is potential for such weird notation!</p>",
        "id": 268082702,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642199687
    }
]