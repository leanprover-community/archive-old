[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n</pre></div>\n\n\n<p>error:</p>\n<div class=\"codehilite\"><pre><span></span>file &#39;open_locale&#39; not found in the LEAN_PATH\n\nfile &#39;classical&#39; not found in the LEAN_PATH\n\ninvalid import: open_locale\ncould not resolve import: open_locale\n\ninvalid import: classical\ncould not resolve import: classical\n</pre></div>",
        "id": 193697379,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586672872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 193697381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586672879
    },
    {
        "content": "<p>You need something between <code>import</code> and <code>open_locale</code></p>",
        "id": 193697421,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586672908
    },
    {
        "content": "<p>AFAIR, a comment will do.</p>",
        "id": 193697424,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586672914
    },
    {
        "content": "<p>There can be no user-defined  command after <code>import</code></p>",
        "id": 193697426,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586672936
    },
    {
        "content": "<p>comments don't solve this</p>",
        "id": 193697543,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586673150
    },
    {
        "content": "<p>so I settled with <code>#check id</code></p>",
        "id": 193697545,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586673156
    },
    {
        "content": "<p>Including /-! ... -/?</p>",
        "id": 193697640,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586673382
    },
    {
        "content": "<p>oh I didn't know that it exists</p>",
        "id": 193697644,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586673404
    },
    {
        "content": "<p>It is used for module-level docstrings</p>",
        "id": 193697757,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586673651
    },
    {
        "content": "<p>I usually use <code>section end</code></p>",
        "id": 193697771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586673685
    },
    {
        "content": "<p>I think <code>/-! -/</code> is pretty golfy</p>",
        "id": 193698461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586675106
    },
    {
        "content": "<p>I worry about other options that they will affect the output</p>",
        "id": 193698511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675224
    },
    {
        "content": "<p>for example does that leave something funny in the leandoc?</p>",
        "id": 193698516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675237
    },
    {
        "content": "<p>let's say the solution is <code>universes u v</code></p>",
        "id": 193698522,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586675264
    },
    {
        "content": "<p>that's not bad, although you might not want to declare universes</p>",
        "id": 193698580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675283
    },
    {
        "content": "<p>aha, <code>variables</code> works</p>",
        "id": 193698595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675344
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">lint</span>\n<span class=\"kn\">variables</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</pre></div>",
        "id": 193698598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675358
    },
    {
        "content": "<p>I've seen someone use something like tactic.cmd skip or something, but I can never remember the syntax</p>",
        "id": 193698602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586675380
    },
    {
        "content": "<p>most plural commands like <code>universes</code> require 1 or more names</p>",
        "id": 193698620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675402
    },
    {
        "content": "<p>but apparently <code>variables</code> is okay with 0</p>",
        "id": 193698643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675415
    },
    {
        "content": "<p>I guess you mean <code>run_cmd tactic.skip</code></p>",
        "id": 193698650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675467
    },
    {
        "content": "<p>The elephant in the room: can this actually be fixed?</p>",
        "id": 193698652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586675479
    },
    {
        "content": "<p>It's a grammar definition problem</p>",
        "id": 193698655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675492
    },
    {
        "content": "<p>Yeah but can it actually be fixed?</p>",
        "id": 193698701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586675528
    },
    {
        "content": "<p>That is, unless you change the lean grammar it is doing exactly what it should be doing</p>",
        "id": 193698703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675536
    },
    {
        "content": "<p>Yeah but can it actually be fixed?</p>",
        "id": 193698706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586675548
    },
    {
        "content": "<p>My preferred solution is to allow <code>.</code> at the end of an <code>import</code> statement to end it</p>",
        "id": 193698710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675565
    },
    {
        "content": "<p>We could do something like stop at newlines but that's a bit hackish</p>",
        "id": 193698726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675619
    },
    {
        "content": "<p>plus it would have to be unindented lines since imports are sometimes formatted like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span>\n  <span class=\"n\">baz</span>\n  <span class=\"n\">quux</span>\n</pre></div>",
        "id": 193698784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675684
    },
    {
        "content": "<p>Another possibility: since <code>#lint</code> is not a valid identifier (because of the hash), we can stop when we see something that isn't a name. This won't work for all user commands though; some of them are just words like <code>alias</code></p>",
        "id": 193698848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586675775
    },
    {
        "content": "<p>I just don't understand why <code>import data.real.basic</code> followed by <code>def x := ...</code> works but you can't follow it by <code>open_locale</code>.</p>",
        "id": 193699264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586676603
    },
    {
        "content": "<p><code>open_locale</code> is a user-defined command.</p>",
        "id": 193699401,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586676895
    },
    {
        "content": "<p>It is defined in one of the <code>import</code>s</p>",
        "id": 193699406,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586676903
    },
    {
        "content": "<p>And I think that Lean doesn't start looking into these <code>import</code>s before parsing till the end of <code>import</code> list.</p>",
        "id": 193699412,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586676943
    },
    {
        "content": "<p>How should it know that you're not trying to import a file named 'open_locale'?</p>",
        "id": 193699453,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586676975
    },
    {
        "content": "<p>How should it know that I'm not trying to import a file named <code>def</code>?</p>",
        "id": 193699696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586677484
    },
    {
        "content": "<p>You're talking about technicalities. I just don't understand why the problem can't be solved.</p>",
        "id": 193699708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586677519
    },
    {
        "content": "<p>A number of words like <code>def</code>, <code>import</code>, <code>variables</code> etc are reserved as \"command keywords\". You can write these anywhere in the file and lean will stop whatever it is doing and begin a new command</p>",
        "id": 193699761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677603
    },
    {
        "content": "<p>this is why you can't have a tactic called <code>set_option</code></p>",
        "id": 193699763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677613
    },
    {
        "content": "<p>These define the high level structure of the lean file, and are about the only thing you can parse with no context</p>",
        "id": 193699770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677648
    },
    {
        "content": "<p>I'm well aware that it doesn't currently work but what I'm saying is why can't it be fixed? That's what I don't understand</p>",
        "id": 193699773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586677660
    },
    {
        "content": "<p>The problem with user commands is that they are command keywords that require context</p>",
        "id": 193699774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677672
    },
    {
        "content": "<p>Why not just add open_locale to some list</p>",
        "id": 193699814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586677689
    },
    {
        "content": "<p>If <code>open_locale</code> was built into lean, yes that would work</p>",
        "id": 193699820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677707
    },
    {
        "content": "<p>but then it wouldn't be a user command</p>",
        "id": 193699834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677717
    },
    {
        "content": "<p>So why can't we just build it into Lean?</p>",
        "id": 193699840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586677729
    },
    {
        "content": "<p>The point is that lean needs to know that this is a command before it's even read anything</p>",
        "id": 193699842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677741
    },
    {
        "content": "<p>because it's a mathlib command</p>",
        "id": 193699846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677756
    },
    {
        "content": "<p>So def is a command and open_locale is a user command?</p>",
        "id": 193699848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586677778
    },
    {
        "content": "<p>yes</p>",
        "id": 193699849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677782
    },
    {
        "content": "<p>it's a command that was defined in a lean file rather than in C++</p>",
        "id": 193699850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677793
    },
    {
        "content": "<p>What are the other user commands?</p>",
        "id": 193699878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586677803
    },
    {
        "content": "<p><code>#lint</code>, <code>alias</code>, <code>open_locale</code>, a few others I'm sure</p>",
        "id": 193699894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677820
    },
    {
        "content": "<p>you can grep for <code>@[user_command]</code></p>",
        "id": 193699896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677826
    },
    {
        "content": "<p>#find?</p>",
        "id": 193699899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586677840
    },
    {
        "content": "<p>yes</p>",
        "id": 193699904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677853
    },
    {
        "content": "<p>There's a more or less complete list here: <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html\" title=\"https://leanprover-community.github.io/mathlib_docs/commands.html\">https://leanprover-community.github.io/mathlib_docs/commands.html</a></p>",
        "id": 193699913,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586677885
    },
    {
        "content": "<p>And we can't just add these to some list in core lean and say \"this is a command which we'll define later\"?</p>",
        "id": 193699920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586677890
    },
    {
        "content": "<p>we could, but that's not being nice to people who write their own user commands and want the same level of support</p>",
        "id": 193699928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677914
    },
    {
        "content": "<p>the whole point of user commands is that they are not built in</p>",
        "id": 193699968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586677931
    },
    {
        "content": "<p>I see</p>",
        "id": 193699969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586677939
    },
    {
        "content": "<p>Now I can see the appeal of the full stop after imports over approach</p>",
        "id": 193699980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586677970
    },
    {
        "content": "<p>btw <code>fintype</code> with <code>open_locale classical</code> is frustratingly slow</p>",
        "id": 193699993,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586678031
    },
    {
        "content": "<p>although I'm not sure if <code>open_locale classical</code> is the root cause</p>",
        "id": 193700032,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586678048
    },
    {
        "content": "<p>We can't make it #open_locale and then tell lean that if it begins with a # then no way is it an import?</p>",
        "id": 193700066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586678133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is there a way to make Lean tell me which typeclass it struggles to resolve?</p>",
        "id": 193701072,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586679795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> We can, that's one of the options I mentioned</p>",
        "id": 193701075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586679837
    },
    {
        "content": "<p>but does it mean we have to put <code>#</code> on all user commands? I believe the intended meaning of <code>#</code> is temporary commands for interactive use, while several user commands are not meant to be temporary, such as <code>alias</code>, <code>open_locale</code>, <code>add_decl_doc</code> and others</p>",
        "id": 193701123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586679935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> You can print out the typeclass search using <code>set_option trace.class_instances true</code>; the hard ones are the ones that print out megabytes of tracing info</p>",
        "id": 193701174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680010
    },
    {
        "content": "<p>So maybe we come up with some other symbol to start a user command. How about <code>,</code>?</p>",
        "id": 193701175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586680020
    },
    {
        "content": "<p>I've heard they're phasing it out in Lean 4 so it's probably going spare.</p>",
        "id": 193701186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586680048
    },
    {
        "content": "<p>Everything is in use by lean or coveted by mathematicians</p>",
        "id": 193701187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680058
    },
    {
        "content": "<p>How about an emoji?</p>",
        "id": 193701226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586680085
    },
    {
        "content": "<p>that's probably a legal identifier character</p>",
        "id": 193701229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680107
    },
    {
        "content": "<p>so is the <code>d</code> in <code>def</code></p>",
        "id": 193701233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586680122
    },
    {
        "content": "<p>but once lean parses the word it finds it on its list of command keywords</p>",
        "id": 193701255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680167
    },
    {
        "content": "<p>it won't find a user command on that list so it assumes it's a file name</p>",
        "id": 193701259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680186
    },
    {
        "content": "<p>Ok so I don't feel too bad about banning file names which start with an emoji</p>",
        "id": 193701303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586680205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can I <code>set_option class.instance_max_depth 10</code> with the same effect?</p>",
        "id": 193701328,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586680284
    },
    {
        "content": "<p>(the ones that fail to resolve are the problematic ones)</p>",
        "id": 193701330,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586680295
    },
    {
        "content": "<p>YMMV</p>",
        "id": 193701332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680298
    },
    {
        "content": "<p>try it and see</p>",
        "id": 193701334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680313
    },
    {
        "content": "<p>it can't work out that a group has multiplication</p>",
        "id": 193701388,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586680364
    },
    {
        "content": "<p>How about parsing indentation-sensitively, like Lean 4:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">foo</span>\n  <span class=\"n\">bar</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"c1\">-- runs user command</span>\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">foo</span>\n  <span class=\"n\">bar</span>\n <span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"c1\">-- imports open_locale and classical modules</span>\n</pre></div>",
        "id": 193701394,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586680383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  You should probably ask a separate question, this is getting cluttered</p>",
        "id": 193701397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680396
    },
    {
        "content": "<p>The indentation idea is by far the most practical I've heard so far</p>",
        "id": 193701448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586680468
    },
    {
        "content": "<p>I'm okay with the indentation solution because it will have a basically 100% success rate without any change to mathlib, although it would be a departure from anything we have done in lean parsing elsewhere</p>",
        "id": 193701452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680493
    },
    {
        "content": "<p>I would prefer that we support both that and the <code>.</code> option</p>",
        "id": 193701474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680537
    },
    {
        "content": "<p>for those who don't like indentation sensitivity</p>",
        "id": 193701478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586680550
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/188\" title=\"https://github.com/leanprover-community/lean/issues/188\">lean#188</a></p>",
        "id": 193703322,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586683601
    }
]