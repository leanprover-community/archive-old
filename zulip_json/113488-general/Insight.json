[
    {
        "content": "<p>Do we know how much of <a href=\"https://www.youtube.com/watch?v=bGD_YF64Nwk\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=bGD_YF64Nwk\">https://www.youtube.com/watch?v=bGD_YF64Nwk</a> has been formally certified?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"bGD_YF64Nwk\" href=\"https://www.youtube.com/watch?v=bGD_YF64Nwk\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=bGD_YF64Nwk\"><img src=\"https://i.ytimg.com/vi/bGD_YF64Nwk/default.jpg\"></a></div>",
        "id": 148393158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543261778
    },
    {
        "content": "<p>Interesting question. I was wondering the same earlier today. Looks like it was certified enough. :-)</p>",
        "id": 148394235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543262712
    },
    {
        "content": "<p><a href=\"https://lars-lab.jpl.nasa.gov/\" target=\"_blank\" title=\"https://lars-lab.jpl.nasa.gov/\">https://lars-lab.jpl.nasa.gov/</a></p>",
        "id": 148394259,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543262746
    },
    {
        "content": "<p>Indeed</p>",
        "id": 148394845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543263161
    },
    {
        "content": "<p><a href=\"https://lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf\" target=\"_blank\" title=\"https://lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf\">https://lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf</a> is pretty scary reading. It makes me wonder why they still use C</p>",
        "id": 148395406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543263676
    },
    {
        "content": "<p>(not that  I know anything about this)</p>",
        "id": 148395488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543263724
    },
    {
        "content": "<p>Embedded systems are still mainly programmed in C and assembly, since you need to interface directly with hardware</p>",
        "id": 148398421,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543266498
    },
    {
        "content": "<p>C++ is getting some traction though</p>",
        "id": 148398437,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543266517
    },
    {
        "content": "<p>How difficult can it be to formally verify C code? Doesn't C only have about 8 commands?</p>",
        "id": 148400439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543268748
    },
    {
        "content": "<p>C is pretty difficult to verify due to the tons of undefined behaviors, but people have done a lot of work on it. I'm more surprised that they never switched to Adaâ€¦</p>",
        "id": 148402018,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1543270098
    },
    {
        "content": "<p><code>nat</code> only has two.</p>",
        "id": 148402097,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543270201
    },
    {
        "content": "<blockquote>\n<p><code>nat</code> only has two.</p>\n</blockquote>\n<p>Yeah, but their behaviour is well-defined :-)</p>",
        "id": 148408016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543276291
    },
    {
        "content": "<blockquote>\n<p>How difficult can it be to formally verify C code? Doesn't C only have about 8 commands?</p>\n</blockquote>\n<p>... so... verify brainfuck?</p>",
        "id": 148408161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543276458
    },
    {
        "content": "<p>Most of those rules are more benign than I would have thought<br>\nPretty sensible for any embedded system which wants to be careful I guess<br>\nAlso, classic:</p>\n<div class=\"codehilite\"><pre><span></span>Rule 30 (type conversion)\nConversions shall not be performed between a pointer to a\nfunction and any type other than an integral type.\n</pre></div>",
        "id": 148408641,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543277124
    },
    {
        "content": "<p>\"Sorry team, I cast my function pointer to a double, then added five\"</p>",
        "id": 148408657,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543277155
    }
]