[
    {
        "content": "<p>What is the correct way to calculate fibonacci numbers in Lean?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">12</span> <span class=\"bp\">=</span> <span class=\"mi\">144</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- doesn&#39;t work</span>\n</pre></div>",
        "id": 194541085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587211524
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">fib</span> <span class=\"mi\">12</span>\n</pre></div>\n\n\n<p>is instantaneous, but <code>rfl</code> doesn't work as proof of the above</p>",
        "id": 194541324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587211863
    },
    {
        "content": "<p>This is the archetypical example where the standard recursive definition is going to do a lot of extra computation (unless the lean compiler does something fancy).  My guess is that if you need a fast version of <code>fib</code>, you can write your own (it’s pretty easy with some googling) and prove it is equal to <code>fib</code>.  (But I’m not an expert.)</p>",
        "id": 194541645,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587212308
    },
    {
        "content": "<p>Is this the bad way? <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html?highlight=fibonacci#structural-recursion-and-induction\" title=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html?highlight=fibonacci#structural-recursion-and-induction\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html?highlight=fibonacci#structural-recursion-and-induction</a></p>",
        "id": 194541854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587212584
    },
    {
        "content": "<p>I clicked \"try it online\" and <code>rfl</code> failed to prove <code>fib 12 = 144</code>, but after staring at the definition I realised that -- oops -- it did prove <code>fib 11 = 144</code> :-)</p>",
        "id": 194541916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587212650
    },
    {
        "content": "<p>The canonical normalisation is the one Johan is using.</p>",
        "id": 194541929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587212690
    },
    {
        "content": "<p>Wait, I get <code>#eval fib 11 -- 89</code> in my Lean</p>",
        "id": 194541994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587212793
    },
    {
        "content": "<p>But <code>rfl</code> is way too slow for these facts, it doesn't memoize</p>",
        "id": 194542009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587212842
    },
    {
        "content": "<p>In TPIL they define their own Fibonacci numbers and I'm observing that rfl works for them</p>",
        "id": 194542069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587212920
    },
    {
        "content": "<p>(or at least it did for me with \"try it online\")</p>",
        "id": 194542079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587212935
    },
    {
        "content": "<p>Hmmm, weird... I think the definition in mathlib should actually memoize enough</p>",
        "id": 194542093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587212973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> wrote   </p>\n<blockquote>\n<p>Is this the bad way? <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html?highlight=fibonacci#structural-recursion-and-induction\" title=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html?highlight=fibonacci#structural-recursion-and-induction\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html?highlight=fibonacci#structural-recursion-and-induction</a></p>\n</blockquote>\n<p>Generally speaking, from a computation standpoint, yes.  From a math standpoint, that is the natural definition.  I'll write some code showing the difference.</p>",
        "id": 194542395,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587213438
    },
    {
        "content": "<p>This is CS 101 coming up, isn't it :-) This is like the difference between foldl and foldr or something -- mathematically they are the same but computationally they couldn't be more different.</p>",
        "id": 194542462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587213598
    },
    {
        "content": "<p>My problem is that even though I understand the basic principle that there are lots of mathematically equivalent ways to do something and they might have vastly different computational behaviour, when I see the definition like the one in TPIL I have so little understanding of what is happening under the hood that I am not capable of working out whether the definition is computationally good or not.</p>",
        "id": 194542531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587213688
    },
    {
        "content": "<p>For all I know the equation compiler is cunningly storing all the auxiliary <code>fib a</code> computations on the way.</p>",
        "id": 194542579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587213728
    },
    {
        "content": "<p>I might be answering the wrong question.  Johan isn't asking how does one compute with fib, but how does one prove fib 12 = 144.  This works for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">fib</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">12</span> <span class=\"bp\">=</span> <span class=\"mi\">144</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 194542923,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587214200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> But that one is slow, right?<br>\nAlso, to be precise, I want to work with mathlib's <code>fib</code>...</p>",
        "id": 194542995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587214264
    },
    {
        "content": "<p>According to TPiL \"[The implementation of structural recursion] provides an efficient implementation of fib, avoiding the exponential blowup that would arise from evaluating each recursive call independently.\", so it should not be slow.</p>",
        "id": 194543002,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1587214284
    },
    {
        "content": "<p>What? Your <code>fib</code> is way faster than the one in mathlib... I'm really confused now</p>",
        "id": 194543005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587214298
    },
    {
        "content": "<p>This works (I don't know why).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">12</span> <span class=\"bp\">=</span> <span class=\"mi\">144</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 194543050,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587214336
    },
    {
        "content": "<p>I'm more confused now too.  I just looked at the mathlib implementation.  It should be similar to this <code>fast_fib</code> which is much faster than the naive one:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">fast_fib_aux</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fast_fib_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fast_fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fast_fib_aux</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fast_fib</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">144</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 194543119,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587214410
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">fib</span> <span class=\"mi\">30</span> <span class=\"c1\">-- 832040 ... fast!</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">30</span> <span class=\"bp\">=</span> <span class=\"mi\">832040</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- slow</span>\n</pre></div>",
        "id": 194543197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587214494
    },
    {
        "content": "<p>I thought I remember seeing that #eval takes shortcuts with interger computation that rfl can't take.</p>",
        "id": 194543238,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587214559
    },
    {
        "content": "<p>Sure, that might be the case. I also don't care whether the proof is by <code>rfl</code>. I just want some way to prove this, that doesn't involve manually apply <code>fib_succ_succ</code> and computing all the 30 fibonacci numbers before it.</p>",
        "id": 194543330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587214651
    },
    {
        "content": "<p>Does the <code>by refl</code> trick work for you?  (Why does <code>by refl</code> work and not <code>rfl</code>?)</p>",
        "id": 194543398,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587214725
    },
    {
        "content": "<p>It works for <code>fib 12</code>, but not for <code>fib 30</code></p>",
        "id": 194543405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587214742
    },
    {
        "content": "<p>You can use my fast_fib above (it works for 30) and prove it is equivalent to fib.)  Maybe that needs to be the definition in mathlib.</p>",
        "id": 194543499,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587214884
    },
    {
        "content": "<p>Sorry, I thought it was working for 30, but it doesn't.  My bad.</p>",
        "id": 194543551,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587214924
    },
    {
        "content": "<p>The equation compiler uses a version of memoization automatically.</p>\n<blockquote>\n<p><code>fib 30</code></p>\n</blockquote>\n<p>Even adding two numbers of around this size by <code>rfl</code> is too slow, so this can't work.</p>",
        "id": 194544242,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587215901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/calculating.20fibonacci.20numbers/near/194543330\" title=\"#narrow/stream/113488-general/topic/calculating.20fibonacci.20numbers/near/194543330\">said</a>:</p>\n<blockquote>\n<p>Sure, that might be the case. I also don't care whether the proof is by <code>rfl</code>. I just want some way to prove this, that doesn't involve manually apply <code>fib_succ_succ</code> and computing all the 30 fibonacci numbers before it.</p>\n</blockquote>\n<p>I thought the problem was that with some naive implementations you compute all the 30 fibonacci numbers before it many many times.</p>",
        "id": 194544245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587215910
    },
    {
        "content": "<p>There's a way of computing <code>fib n</code> involving induction on binary expansion of n, because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">F_{2n}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>  and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">F_{2n+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> are closely related to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">F_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> by Binet.</p>",
        "id": 194544264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587215968
    },
    {
        "content": "<p>That would be super-efficient, but I'm assuming that this isn't the question. Or is it?</p>",
        "id": 194544275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587215992
    },
    {
        "content": "<p>So we turn that into <code>simp</code>-lemmas?</p>",
        "id": 194544276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587215996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/calculating.20fibonacci.20numbers/near/194544275\" title=\"#narrow/stream/113488-general/topic/calculating.20fibonacci.20numbers/near/194544275\">said</a>:</p>\n<blockquote>\n<p>That would be super-efficient, but I'm assuming that this isn't the question. Or is it?</p>\n</blockquote>\n<p>until you realize that dividing by 2 isn't O(1), but rather O(n)</p>",
        "id": 194544598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587216392
    },
    {
        "content": "<p>To be clear, I was originally mistaken on the definition used in mathlib.  It is (what should be on paper) a fast definition.  My first comment led us down the wrong track.  As <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> said, apparently rfl isn't even good at adding large numbers (which is what exactly what any computation of fibonacci does).  So I think this is still an open question how to prover stuff like this if rfl (and refl) are unusable.</p>",
        "id": 194544697,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587216543
    },
    {
        "content": "<p>But Kevin is talking about</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub><mo>=</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo>&lt;</mo><mi>n</mi></mrow></munder><msub><mi>F</mi><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><mspace width=\"2em\"/><msub><mi>F</mi><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mrow><mo fence=\"true\">(</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo>&lt;</mo><mi>n</mi></mrow></munder><msub><mi>F</mi><mrow><mn>2</mn><mo stretchy=\"false\">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msub><mo fence=\"true\">)</mo></mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">F_{2n} = \\sum_{i &lt; n} F_{2i+1}, \\qquad F_{2n+1} = \\left(\\sum_{i &lt; n} F_{2(i+1)} \\right) + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3550440000000004em;vertical-align:-1.305039em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8723309999999997em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathdefault mtight\">n</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.305039em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.055039em;vertical-align:-1.305039em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">(</span></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8723309999999997em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathdefault mtight\">n</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.305039em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>Am I stupid, or is there no division by two there?</p>",
        "id": 194544729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587216600
    },
    {
        "content": "<p>I'm talking about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">F_{2n}=</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span> something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>F</mi><mi>n</mi><mn>2</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">F_n^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.061108em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span>, the same trick that one uses when computing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup></mrow><annotation encoding=\"application/x-tex\">a^b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">b</span></span></span></span></span></span></span></span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span> is large, by repeated squaring.</p>",
        "id": 194544953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587216898
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/sFIYlZy5BuHHqPsVs6KvY_aB/image.png\" title=\"image.png\">image.png</a> ??</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sFIYlZy5BuHHqPsVs6KvY_aB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/sFIYlZy5BuHHqPsVs6KvY_aB/image.png\"></a></div>",
        "id": 194545028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587216966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> That one <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> ?</p>",
        "id": 194545032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587216978
    },
    {
        "content": "<p>Right.</p>",
        "id": 194545122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587217149
    },
    {
        "content": "<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n&gt;&gt;0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and one can do the arithmetic efficiently then this is a far quicker way of computing Fibonacci numbers.</p>",
        "id": 194545135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587217180
    },
    {
        "content": "<p>But I suspect that this has nothing to do with your original question.</p>",
        "id": 194545184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587217205
    },
    {
        "content": "<p>Well, I want to show e.g. that <code>fib 34</code> is &gt; 4 million</p>",
        "id": 194545210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587217248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/calculating.20fibonacci.20numbers/near/194544242\" title=\"#narrow/stream/113488-general/topic/calculating.20fibonacci.20numbers/near/194544242\">said</a>:</p>\n<blockquote>\n<p>Even adding two numbers of around this size by <code>rfl</code> is too slow, so this can't work.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <br>\nI once found a counterexample to this in front of a room full of schoolchildren and it took me a while to realise what the heck was going on:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1000000000000</span> <span class=\"bp\">+</span> <span class=\"mi\">1000000000000</span> <span class=\"bp\">=</span> <span class=\"mi\">2000000000000</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works fine</span>\n</pre></div>",
        "id": 194545298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587217381
    },
    {
        "content": "<p>I had just coherently argued that this would fail miserably.</p>",
        "id": 194545311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587217402
    },
    {
        "content": "<p>So I think the prerequisite question is how does one prove this in Lean?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">317811</span> <span class=\"bp\">+</span> <span class=\"mi\">514229</span> <span class=\"bp\">=</span> <span class=\"mi\">832040</span>\n</pre></div>",
        "id": 194546816,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587219436
    },
    {
        "content": "<p><code>by norm_num</code></p>",
        "id": 194546973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587219657
    },
    {
        "content": "<p>This one is <code>by norm_num</code>. The question is really how to make <code>norm_num</code> aware of <code>fib</code>, or <code>fib</code> aware of <code>norm_num</code>, or something which can do both definitional unfolding and <code>norm_num</code> where appropriate.</p>",
        "id": 194546987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587219673
    },
    {
        "content": "<p>maybe if <code>norm_num</code> accepts tags then we can tag <code>fib_bit0</code> and <code>fib_bit1</code> as <code>norm_num</code></p>",
        "id": 194547322,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587220143
    },
    {
        "content": "<p>this still wouldn't make it memoize though</p>",
        "id": 194547334,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587220171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/calculating.20fibonacci.20numbers/near/194545028\" title=\"#narrow/stream/113488-general/topic/calculating.20fibonacci.20numbers/near/194545028\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/3121/sFIYlZy5BuHHqPsVs6KvY_aB/image.png\" title=\"image.png\">image.png</a> ??</p>\n</blockquote>\n<p>there must be a formula without minus</p>",
        "id": 194547390,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587220218
    },
    {
        "content": "<p>Well, <code>F n * L n</code> doesn't contain a minus... maybe there are fast formulas for <code>L n</code> as well??</p>",
        "id": 194547419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587220289
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">[</mo><mtable columnspacing=\"1em\" rowspacing=\"0.15999999999999992em\"><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><msub><mi>F</mi><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><msub><mi>F</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><msub><mi>F</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><msub><mi>F</mi><mrow><mn>2</mn><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mo>=</mo><msup><mrow><mo fence=\"true\">[</mo><mtable columnspacing=\"1em\" rowspacing=\"0.15999999999999992em\"><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><msub><mi>F</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><msub><mi>F</mi><mi>n</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><msub><mi>F</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><msub><mi>F</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\begin{bmatrix} F_{2n+1} &amp; F_{2n} \\\\ F_{2n} &amp; F_{2n-1} \\end{bmatrix} = \\begin{bmatrix} F_{n+1} &amp; F_{n} \\\\ F_{n} &amp; F_{n-1} \\end{bmatrix}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.604038em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6540080000000001em;\"><span style=\"top:-3.9029000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></p>\n<div class=\"codehilite\"><pre><span></span>20 = 2 * 10 = 2 * (2 * 5) = 2 * (2 * (2 * 2 + 1))\n(F(0), F(1)) = (0, 1)\n(F(1), F(2)) = (0*0+1*1, 1*(2*0+1)) = (1, 1)\n(F(3), F(4)) = (1*1+1*1, 1*(2*1+1)) = (2, 3)\n(F(4), F(5)) = (3, 2+3) = (3, 5)\n(F(9), F(10)) = (3*3+5*5, 5*(2*3+5)) = (34, 55)\n(F(19), F(20)) = (34*34+55*55, 55*(2*34+55)) = (4181, 6765)\n</pre></div>\n\n\n<p>proposed algorithm:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">fib</span> <span class=\"mi\">20</span>\n<span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n<span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"err\">$</span> <span class=\"n\">bit0</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"err\">$</span> <span class=\"n\">bit0</span> <span class=\"err\">$</span> <span class=\"n\">bit1</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"err\">$</span> <span class=\"n\">bit0</span> <span class=\"err\">$</span> <span class=\"n\">bit1</span> <span class=\"err\">$</span> <span class=\"n\">bit0</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fib_aux</span> <span class=\"err\">$</span> <span class=\"n\">bit0</span> <span class=\"err\">$</span> <span class=\"n\">bit0</span> <span class=\"err\">$</span> <span class=\"n\">bit1</span> <span class=\"err\">$</span> <span class=\"n\">bit0</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">fib_aux</span> <span class=\"err\">$</span> <span class=\"n\">bit0</span> <span class=\"err\">$</span> <span class=\"n\">bit1</span> <span class=\"err\">$</span> <span class=\"n\">bit0</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">fib_aux</span> <span class=\"err\">$</span> <span class=\"n\">bit1</span> <span class=\"err\">$</span> <span class=\"n\">bit0</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">fs</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">fib_aux</span> <span class=\"err\">$</span> <span class=\"n\">bit0</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">fs</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">fib_aux</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">fs</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">fs</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">fs</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">fs</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">fs</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"err\">$</span> <span class=\"n\">f0</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">(</span><span class=\"mi\">34</span><span class=\"o\">,</span> <span class=\"mi\">55</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">34</span><span class=\"bp\">*</span><span class=\"mi\">34</span><span class=\"bp\">+</span><span class=\"mi\">55</span><span class=\"bp\">*</span><span class=\"mi\">55</span><span class=\"o\">,</span> <span class=\"mi\">55</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">34</span><span class=\"bp\">+</span><span class=\"mi\">55</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">4181</span><span class=\"o\">,</span> <span class=\"mi\">6765</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">→</span> <span class=\"mi\">6765</span>\n</pre></div>",
        "id": 194548141,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587221283
    },
    {
        "content": "<p>That is much better than the foldl/foldr issue</p>",
        "id": 194548256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587221475
    },
    {
        "content": "<p>foldl/foldr?</p>",
        "id": 194548269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587221512
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">f0</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"s2\">&quot;(</span><span class=\"si\">{0}</span><span class=\"s2\">*</span><span class=\"si\">{0}</span><span class=\"s2\">+</span><span class=\"si\">{1}</span><span class=\"s2\">*</span><span class=\"si\">{1}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">),</span> <span class=\"s2\">&quot;</span><span class=\"si\">{1}</span><span class=\"s2\">*(2*</span><span class=\"si\">{0}</span><span class=\"s2\">+</span><span class=\"si\">{1}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">fs</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"s2\">&quot;(</span><span class=\"si\">{0}</span><span class=\"s2\">+</span><span class=\"si\">{1}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">))</span>\n\n<span class=\"n\">f20</span> <span class=\"o\">=</span> <span class=\"n\">f0</span><span class=\"p\">(</span><span class=\"n\">f0</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">(</span><span class=\"n\">f0</span><span class=\"p\">(</span><span class=\"n\">f0</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))))))[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f20</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"n\">f20</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>output:</p>\n<div class=\"codehilite\"><pre><span></span>(((0*0+1*1)*(0*0+1*1)+1*(2*0+1)*1*(2*0+1))+1*(2*0+1)*(2*(0*0+1*1)+1*(2*0+1)))*(2*1*(2*0+1)*(2*(0*0+1*1)+1*(2*0+1))+(((0*0+1*1)*(0*0+1*1)+1*(2*0+1)*1*(2*0+1))+1*(2*0+1)*(2*(0*0+1*1)+1*(2*0+1))))*(2*(1*(2*0+1)*(2*(0*0+1*1)+1*(2*0+1))*1*(2*0+1)*(2*(0*0+1*1)+1*(2*0+1))+(((0*0+1*1)*(0*0+1*1)+1*(2*0+1)*1*(2*0+1))+1*(2*0+1)*(2*(0*0+1*1)+1*(2*0+1)))*(((0*0+1*1)*(0*0+1*1)+1*(2*0+1)*1*(2*0+1))+1*(2*0+1)*(2*(0*0+1*1)+1*(2*0+1))))+(((0*0+1*1)*(0*0+1*1)+1*(2*0+1)*1*(2*0+1))+1*(2*0+1)*(2*(0*0+1*1)+1*(2*0+1)))*(2*1*(2*0+1)*(2*(0*0+1*1)+1*(2*0+1))+(((0*0+1*1)*(0*0+1*1)+1*(2*0+1)*1*(2*0+1))+1*(2*0+1)*(2*(0*0+1*1)+1*(2*0+1)))))\n\n6765\n</pre></div>",
        "id": 194548317,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587221568
    },
    {
        "content": "<p>I just mean asking a functional language to compute Fibonacci numbers might naively involve computing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mrow><mi>n</mi><mo>−</mo><mi>d</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">F_{n-d}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\">d</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">d</span></span></span></span> times. It's not foldl/foldr but it's the same sort of thing.</p>",
        "id": 194548319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587221571
    },
    {
        "content": "<p>I don't know whether it will cause problem if the intermediate expressions are not immediately evaluated</p>",
        "id": 194548330,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587221591
    },
    {
        "content": "<p>it might undo our optimization by having exponential complexity (on top of logarithmic complexity)</p>",
        "id": 194548339,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587221618
    },
    {
        "content": "<p>then the overall complexity would just be O(n)</p>",
        "id": 194548342,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587221628
    },
    {
        "content": "<p>None of this is really relevant if you can't compute these additions in subexponential time</p>",
        "id": 194548389,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587221652
    },
    {
        "content": "<p>Yes, you are evaluating <code>0*0+1*1</code> a lot of times there</p>",
        "id": 194548394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587221654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/calculating.20fibonacci.20numbers/near/194548389\" title=\"#narrow/stream/113488-general/topic/calculating.20fibonacci.20numbers/near/194548389\">said</a>:</p>\n<blockquote>\n<p>None of this is really relevant if you can't compute these additions in subexponential time</p>\n</blockquote>\n<p><code>norm_num</code> can</p>",
        "id": 194548399,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587221661
    },
    {
        "content": "<p>But you can't solve the original problem using <code>norm_num</code></p>",
        "id": 194548412,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587221677
    },
    {
        "content": "<p>You are solving the second problem before solving the first problem.</p>",
        "id": 194548465,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587221738
    },
    {
        "content": "<p>if you're referring to writing a tactic that will calculate <code>fib 20</code>, then my algorithm can call <code>norm_num</code> in each intermediate step</p>",
        "id": 194548468,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587221744
    },
    {
        "content": "<p>what's the first problem?</p>",
        "id": 194548472,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587221748
    },
    {
        "content": "<p>I don't want to write a new tactic to compute every function I write.</p>",
        "id": 194548514,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587221771
    },
    {
        "content": "<p>so I also proposed having a <code>norm_num</code> tag that you can tag my lemmas with, which include <code>fib n = (fib_aux n).2</code> and <code>fib_aux (bit0 n) = f0 (fib_aux n)</code> and <code>fib_aux(bit1 n) = fs (f0 (fib_aux n))</code>, and my algorithm demonstrated how you can use these three lemmas to calculate <code>fib 20</code> in logarithmic time</p>",
        "id": 194548529,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587221799
    },
    {
        "content": "<p>One could imagine a general \"multiply these two matrices together using norm_num and also other tricks\" function.</p>",
        "id": 194548546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587221833
    },
    {
        "content": "<p>(removed)</p>",
        "id": 194548550,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587221841
    },
    {
        "content": "<p>Such a function will I think be hard coded into any decent computer algebra system</p>",
        "id": 194548554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587221853
    },
    {
        "content": "<p>(removed)</p>",
        "id": 194548558,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587221863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> has mentioned that we need Coq's <code>cbv</code> tactic a few times now for similar questions I believe, but I don't know enough about coq to know what needs doing here (can we get a formal roadmap for a tactic)!</p>",
        "id": 194554179,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587229519
    },
    {
        "content": "<p>As Reid suggests, the \"right\" answer here is to extend <code>norm_num</code>, and I've been meaning to use <code>def_replacer</code> for this purpose so that <code>norm_num</code> doesn't have to import every number theoretic function it will ever use</p>",
        "id": 194561671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587240828
    },
    {
        "content": "<p>There is nothing wrong with using <code>-</code> inside <code>norm_num</code>, because <code>norm_num</code> doesn't prove <code>a - b = c</code>, it proves <code>b + c = a</code> where <code>a</code> and <code>b</code> are the inputs and <code>c</code> is the output</p>",
        "id": 194561738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587240937
    },
    {
        "content": "<p>Extending <code>norm_num</code> is a bit more complicated than just marking <code>fib_bit0</code> and <code>fib_bit1</code>, because it's not a simp set, it requires some carefully stated custom theorems and goes by recursion, which is <em>much</em> faster than <code>simp</code></p>",
        "id": 194561923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587241259
    },
    {
        "content": "<p>But it also means that it is not difficult to get it to evaluate subterms as required to get the O(n log n) algorithm</p>",
        "id": 194561970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587241324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/calculating.20fibonacci.20numbers/near/194545210\" title=\"#narrow/stream/113488-general/topic/calculating.20fibonacci.20numbers/near/194545210\">said</a>:</p>\n<blockquote>\n<p>Well, I want to show e.g. that <code>fib 34</code> is &gt; 4 million</p>\n</blockquote>\n<p>If that's all you want, you don't need to evaluate <code>fib</code> at all, unless that bound is particularly close. A quick estimation method would say that <code>fib n</code> is close to <code>phi^n / sqrt 5</code> or something like that, and you can easily get proven bounds on phi using continued fractions</p>",
        "id": 194562039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587241482
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">12</span> <span class=\"bp\">=</span> <span class=\"mi\">144</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fib_succ_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">9</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">8</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">6</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194562437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587242204
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">12</span> <span class=\"bp\">=</span> <span class=\"mi\">144</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"c1\">-- start the countdown</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">10</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">9</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">8</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">6</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_succ_succ</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fib_zero</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194562447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587242265
    }
]