[
    {
        "content": "<p>Why doesn't <code>match ... with</code> work here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constants</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">constant</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">exists</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">prfp</span><span class=\"o\">,</span> <span class=\"n\">prfq</span><span class=\"o\">,</span> <span class=\"n\">prfr</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">prfp</span><span class=\"o\">,</span> <span class=\"n\">prfq</span><span class=\"o\">,</span> <span class=\"n\">prfr</span><span class=\"o\">⟩</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263766195,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638707450
    },
    {
        "content": "<p>What's the error?</p>",
        "id": 263766366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638707750
    },
    {
        "content": "<p>Ah, I forgot to write <code>exists (a b c : α)</code> in <code>foo</code>.</p>",
        "id": 263766522,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638707953
    },
    {
        "content": "<p>That was a toy example. In the real code, I'm getting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">constructor</span> <span class=\"o\">⟨</span><span class=\"bp\">...</span><span class=\"o\">⟩,</span> <span class=\"bp\">'</span><span class=\"n\">or'</span> <span class=\"n\">must</span> <span class=\"k\">have</span> <span class=\"n\">only</span> <span class=\"n\">one</span> <span class=\"n\">constructor</span>\n</code></pre></div>",
        "id": 263766583,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638708078
    },
    {
        "content": "<p>Oops. Actually, it's this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">constructor</span> <span class=\"o\">⟨</span><span class=\"bp\">...</span><span class=\"o\">⟩,</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">an</span> <span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 263766591,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638708121
    },
    {
        "content": "<p>oh oops... is the problem resolved now or do you still need our help?</p>",
        "id": 263766634,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638708140
    },
    {
        "content": "<p>Yes, I still need some help. What does that last error mean?</p>",
        "id": 263766652,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638708192
    },
    {
        "content": "<p>ah that error simply means lean can't infer the type</p>",
        "id": 263766730,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638708303
    },
    {
        "content": "<p>By the way, this is the code that produces the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n        <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span>\n      <span class=\"kd\">end</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now, it should an error since <code>hm</code> is not entirely correct, but it seems that the error I'm getting is more fundamental.</p>",
        "id": 263766741,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638708333
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? That last post is useless without knowing what the type of your goal state is</p>",
        "id": 263766791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638708379
    },
    {
        "content": "<p>Which is to say, the humans on Zulip are also unable to infer the type</p>",
        "id": 263766800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638708393
    },
    {
        "content": "<p>The mwe I came up with worked. Let me play around some more. The goal was to produce this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">l₁</span> <span class=\"bp\">≤</span> <span class=\"n\">pure</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">l₁</span> <span class=\"bp\">≤</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">conv</span> <span class=\"n\">l</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 263766831,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638708449
    },
    {
        "content": "<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#extract_goal\">tactic#extract_goal</a>, which can be used as a starting point to create a mwe?</p>",
        "id": 263766895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638708529
    },
    {
        "content": "<p>oh ouch this poor human being can't help you... can you just make a complete lean file with imports and stuff to demonstrate the problem and post it here OR you can just paste the file you're working on if it's short enough</p>",
        "id": 263766901,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638708535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/eliminating.20complex.20existensial/near/263766895\">said</a>:</p>\n<blockquote>\n<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#extract_goal\">tactic#extract_goal</a>, which can be used as a starting point to create a mwe?</p>\n</blockquote>\n<p>Interesting. Didn't know about that.</p>",
        "id": 263766971,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638708608
    },
    {
        "content": "<p>Here's the full file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_conv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_conv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"n\">conv</span> <span class=\"n\">l'</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">conv</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- l ≤ l' means l' ⊆ l</span>\n<span class=\"o\">(</span><span class=\"n\">sup_conv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">conv</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">conv</span> <span class=\"n\">l'</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">⊔</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- l ⊔ l' means l ∩ l'</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lim</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">set_of</span> <span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">continuous</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">filter_conv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">conv</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">hausdorff_space</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hausdorff_prop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ne_bot</span> <span class=\"n\">l</span><span class=\"o\">],</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">lim</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">conv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">pure_conv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">filter.map_pure</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">pure_conv</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">le_conv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">map_mono</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_conv</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sup_conv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_sup</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sup_conv</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coinduced</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">conv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l'</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">l'</span> <span class=\"bp\">≤</span> <span class=\"n\">pure</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l'</span> <span class=\"bp\">≤</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">conv</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">pure_conv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">and.left</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">le_conv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">or.elim</span> <span class=\"n\">h₁</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">h₀</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n        <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">trans</span> <span class=\"n\">h₀</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"c1\">-- THIS IS WHERE IT FAILS</span>\n      <span class=\"kd\">end</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sup_conv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 263767006,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638708695
    },
    {
        "content": "<p>Replace <code>apply</code> with <code>exact</code></p>",
        "id": 263767160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638708883
    },
    {
        "content": "<p>Haha. It works. Nice.</p>",
        "id": 263767174,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638708934
    },
    {
        "content": "<p>So what's the difference between exact, apply and refine? I was using refine before, then switched to apply. And now I am switching to exact.</p>",
        "id": 263767223,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638708987
    },
    {
        "content": "<p><code>exact</code> tells the elaborator \"parse this expression with the knowledge that it must match the goal\". <code>apply</code> doesn't know whether the expression is intended to exactly or partially match the goal, which can confuse the elaborator.</p>",
        "id": 263767226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638709004
    },
    {
        "content": "<p><code>refine</code> is like <code>exact</code> but won't error if there are <code>_</code>s it can't fill. You should use <code>exact</code> instead of <code>refine</code> if it's the last line of your (sub)proof</p>",
        "id": 263767234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638709026
    },
    {
        "content": "<p><code>apply foo x</code> is like <code>refine foo x _ _</code> which tries to guess how many <code>_</code>s are needed. It's this guessing that can misfire and causes your problem</p>",
        "id": 263767239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638709057
    },
    {
        "content": "<p>OK, so I will stick with exact as much as I can then.</p>",
        "id": 263767281,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638709103
    },
    {
        "content": "<p>Thanks guys.</p>",
        "id": 263767308,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638709161
    },
    {
        "content": "<p>More specifically, <code>exact foo</code> knows the expected type of <code>foo</code> (namely the goal) and can use this to elaborate <code>foo</code>, while <code>apply foo</code> doesn't know the expected type of <code>foo</code> because it will be <code>foo _ ... _</code> that matches the goal; so <code>apply</code> needs to first elaborate <code>foo</code> without expected type information to work out the correct number of <code>_</code>s, and here it has no way to know what the anonymous constructor <code>⟨x, l, trans h₀ hm, hf, hc⟩</code> refers to.</p>",
        "id": 263771884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638715918
    },
    {
        "content": "<p>We rarely use <code>match</code> or apply eliminators directly in tactics, a more tactic-style proof would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">le_conv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">h₀</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">trans</span> <span class=\"n\">h₀</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>or variants using <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\">tactic#rintro</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#obtain\">tactic#obtain</a></p>",
        "id": 263772029,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638716104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/eliminating.20complex.20existensial/near/263771884\">said</a>:</p>\n<blockquote>\n<p>so <code>apply</code> needs to first elaborate <code>foo</code> without expected type information to work out the correct number of <code>_</code>s</p>\n</blockquote>\n<p>Is there a reason <code>apply</code> doesn't just try elaborating <code>foo</code>, <code>foo _</code>, <code>foo _ _</code>, ... until it finds one that matches, as opposed to elaborating <code>foo</code> with incomplete information?</p>",
        "id": 263773075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638717441
    }
]