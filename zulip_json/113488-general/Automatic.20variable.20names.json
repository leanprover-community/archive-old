[
    {
        "content": "<p>Another noob question, sorry. I haven't found an answer out there because everyone always proves this theorem using <code>simp</code>.</p>\n<p>I've defined <code>myNat</code> in the obvious inductive way (<code>zero : myNat</code>, and <code>succ : myNat -&gt; myNat</code>), and then defined <code>my_add</code> by cases as <code>| myNat.zero n := n</code> and <code>| (myNat.succ m) n := myNat.succ (my_add m n)</code>. To prove the theorem <code>addZero : (forall m : myNat, my_add m myNat.zero = m)</code> without using simp, I entered tactic mode and began with <code>assume m : myNat, induction m, refl</code> to take care of the base case. Now I have the goal to prove it for the successor case, and the Tactic State tells me that I have <code>m_a : myNat</code> and <code>m_ih : my_add m_a myNat.zero = m_a</code>. But when I try to reference these terms with <code>have (my_add (myNat.succ m_a) myNat.zero) = (myNat.succ (my_add m_a myNat.zero)), from sorry</code>, I get multiple syntax errors, one of which is \"unknown identifier 'm_a'\".</p>",
        "id": 127275253,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527629384
    },
    {
        "content": "<p>post your code?</p>",
        "id": 127275311,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527629424
    },
    {
        "content": "<p>Have I got some syntax wrong, and if not, how do I reference variables that <code>induction</code> introduced?</p>",
        "id": 127275314,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527629428
    },
    {
        "content": "<p>^ can you paste it in a formatted code block</p>",
        "id": 127275316,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527629433
    },
    {
        "content": "<p>Sorry - it really did come out pretty unreadable, hang on</p>",
        "id": 127275360,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527629502
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive myNat : Type\n| zero : myNat\n| succ : myNat → myNat\n\naxiom zeroIsNotASuccessor : (∀ n : myNat, ¬(myNat.succ n = myNat.zero))\naxiom succPreservesInequality: (∀ n m : myNat, (¬(m = n)) → ¬(myNat.succ m = myNat.succ n))\n\ndefinition my_add : myNat -&gt; myNat -&gt; myNat\n| myNat.zero n := n\n| (myNat.succ m) n := myNat.succ (my_add m n)\n\ntheorem addZero : (∀ m : myNat, my_add m myNat.zero = m) :=\nbegin\n    assume m : myNat,\n    induction m,\n    refl,\n    have (my_add (myNat.succ m_a) myNat.zero) = (myNat.succ (my_add m_a myNat.zero)), from\n    begin\n        sorry\n    end\nend\n</pre></div>",
        "id": 127275438,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527629588
    },
    {
        "content": "<p><code>have :</code></p>",
        "id": 127275455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527629634
    },
    {
        "content": "<p>Ah, thanks - why was that colon not necessary in e.g.</p>\n<div class=\"codehilite\"><pre><span></span>example:p ∧ ¬q → ¬(p → q):=\nbegin\n    intro h,\n    assume hpq : p → q,\n    cases h with hp hnq,\n    have hq : q, from hpq hp,\n    exact hnq hq\nend\n</pre></div>",
        "id": 127275520,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527629703
    },
    {
        "content": "<p>it was</p>",
        "id": 127275532,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527629718
    },
    {
        "content": "<p>Oh, I get it - an anonymous member of the equality type</p>",
        "id": 127275533,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527629719
    },
    {
        "content": "<p>Sorry</p>",
        "id": 127275536,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527629722
    },
    {
        "content": "<p><code>have :</code> sets the name to <code>this</code></p>",
        "id": 127275541,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527629736
    },
    {
        "content": "<p><code>have hq :</code> sets the names to <code>hq</code></p>",
        "id": 127275542,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527629742
    },
    {
        "content": "<p>cheers</p>",
        "id": 127275590,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527629795
    },
    {
        "content": "<p>I never know whether using <code>have :...</code> (and thus making a variable called <code>this</code>) is bad style.</p>",
        "id": 127277391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527632270
    },
    {
        "content": "<p>I tend to name all my have variables except for the ones I instantly use and throw away on the next line</p>",
        "id": 127277444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527632302
    }
]