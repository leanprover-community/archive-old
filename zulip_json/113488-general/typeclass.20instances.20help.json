[
    {
        "content": "<p>Here's a massively simplified version of where I'm stuck:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">over</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category</span> <span class=\"n\">limits</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">exponentiable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bp</span> <span class=\"o\">:</span> <span class=\"n\">has_finite_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_adj</span> <span class=\"o\">:</span> <span class=\"n\">is_left_adjoint</span> <span class=\"o\">(</span><span class=\"n\">prod_functor</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"n\">class</span> <span class=\"n\">is_cartesian_closed</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">has_finite_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cart_closed</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">exponentiable</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">is_cartesian_closed</span><span class=\"bp\">.</span><span class=\"n\">cart_closed</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">ùíû</span>\n\n<span class=\"n\">def</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_finite_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">exponentiable</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">exponentiable</span><span class=\"bp\">.</span><span class=\"n\">is_adj</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_binary_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">‚•§</span> <span class=\"n\">over</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">Pi_functor</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_finite_limits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">exponentiable</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">B</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">star_adj_pi_of_exponentiable</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_finite_limits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">exponentiable</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">star</span> <span class=\"n\">B</span> <span class=\"err\">‚ä£</span> <span class=\"n\">Pi_functor</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">pb</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">construct_products</span><span class=\"bp\">.</span><span class=\"n\">over_binary_product_of_pullback</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">pullback_along</span> <span class=\"o\">[</span><span class=\"n\">has_pullbacks</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">B</span> <span class=\"err\">‚•§</span> <span class=\"n\">over</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"err\">‚ãô</span> <span class=\"o\">(</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">iterated_slice_equiv</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">functor</span>\n<span class=\"kn\">end</span> <span class=\"n\">pb</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">is_locally_cartesian_closed</span> <span class=\"kn\">extends</span> <span class=\"n\">has_finite_limits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">overs_cc</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">is_cartesian_closed</span> <span class=\"o\">(</span><span class=\"n\">over</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">is_locally_cartesian_closed</span><span class=\"bp\">.</span><span class=\"n\">overs_cc</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">has_pullbacks_of_has_finite_limits</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">has_finite_wide_pullbacks_of_has_finite_limits</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">is_locally_cartesian_closed</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_left_adjoint</span> <span class=\"o\">(</span><span class=\"n\">pullback_along</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"err\">‚ãô</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"n\">adjunction</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">star_adj_pi_of_exponentiable</span> <span class=\"o\">(</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">equivalence</span><span class=\"bp\">.</span><span class=\"n\">to_adjunction</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n</pre></div>\n\n\n<p>My issue is that <code>star_adj_pi_of_exponentiable</code> gives a typeclass error (it can't find <code>exponentiable (over.mk f)</code>), but it should be okay since we have that <code>C</code> is LCC, so <code>C/B</code> is CC, and <code>over.mk f</code> is in <code>C/B</code>, so <code>over.mk f</code> should be exponentiable... How can I make this work?</p>",
        "id": 195185198,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587733879
    },
    {
        "content": "<p>My guess is you have too many instances</p>",
        "id": 195185992,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587734237
    },
    {
        "content": "<p>You ask about making it work, but first do you know why it doesn't work?</p>",
        "id": 195186201,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587734335
    },
    {
        "content": "<p>I'm not really sure why it doesn't work. I tried manually giving the instances which should make it work, and it gives this error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">star_adj_pi_of_exponentiable</span> <span class=\"o\">(</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">is_cartesian_closed</span><span class=\"bp\">.</span><span class=\"n\">cart_closed</span> <span class=\"o\">(</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">exponentiable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">over</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">category_1</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_cartesian_closed</span><span class=\"bp\">.</span><span class=\"n\">to_has_finite_products</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">over</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">category_1</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_locally_cartesian_closed</span><span class=\"bp\">.</span><span class=\"n\">overs_cc</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">exponentiable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">over</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">category_1</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_finite_products_of_has_finite_limits</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">over</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">category_1</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">has_finite_limits</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">B</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_finite_wide_pullbacks_of_has_finite_limits</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_locally_cartesian_closed</span><span class=\"bp\">.</span><span class=\"n\">to_has_finite_limits</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 195186466,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587734465
    },
    {
        "content": "<p>and here was the instance I put in:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_left_adjoint</span> <span class=\"o\">(</span><span class=\"n\">pullback_along</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"err\">‚ãô</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"n\">adjunction</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">star_adj_pi_of_exponentiable</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_cartesian_closed</span><span class=\"bp\">.</span><span class=\"n\">cart_closed</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">equivalence</span><span class=\"bp\">.</span><span class=\"n\">to_adjunction</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 195186498,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587734482
    },
    {
        "content": "<p>Yes, this looks like the sort of issue I suspected</p>",
        "id": 195186524,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587734497
    },
    {
        "content": "<p>You have too many ways to prove C/B has products</p>",
        "id": 195186542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587734508
    },
    {
        "content": "<p>Hmm okay... What sort of thing should I be trying to fix this?</p>",
        "id": 195186674,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587734561
    },
    {
        "content": "<p>Could I make <code>has_finite_products_of_has_finite_limits</code> not be an instance locally?</p>",
        "id": 195186749,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587734602
    },
    {
        "content": "<p>I would start by avoiding <code>extends</code>. If that isn't enough, you would have to remove some instances.</p>",
        "id": 195187150,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587734774
    },
    {
        "content": "<p>You cannot just make any old construction that works in math into an instance because of issues like this.</p>",
        "id": 195187173,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587734791
    },
    {
        "content": "<p>I'll try removing <code>extends</code>, thanks!</p>",
        "id": 195187523,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587734973
    },
    {
        "content": "<p>Out of interest, why does that cause problems?</p>",
        "id": 195187552,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587734988
    },
    {
        "content": "<p>I think there is no substitute for reading the error message and understanding how you got there</p>",
        "id": 195187647,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587735024
    },
    {
        "content": "<p>In general, using <code>extends</code> is less flexible because you cannot specify the base instance and the \"extension\" separately.</p>",
        "id": 195188038,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587735232
    },
    {
        "content": "<p>It might help to translate your definitions back into math as follows:<br>\nA CC category is a category with chosen finite products such that each chosen finite product functor X x - has a (chosen) right adjoint.<br>\nAn LCC category is a category with chosen finite limits such that each slice category C/B is a CC category.</p>",
        "id": 195188861,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587735606
    },
    {
        "content": "<p>You also know of a way, given chosen finite limits in C, to construct finite products in C/B for each B.</p>",
        "id": 195188904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587735629
    },
    {
        "content": "<p>However, your definitions don't require that if you apply this construction to the chosen finite limits of C, you get the chosen finite products of C/B.</p>",
        "id": 195189021,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587735688
    },
    {
        "content": "<p>(Technically, since you didn't write <code>extends category</code>, I should say something like \"A category C is CC if we have chosen finite products for it such that ...\", but the category instance is not at issue here.)</p>",
        "id": 195189156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587735751
    },
    {
        "content": "<p>If you don't use <code>extends</code> in the definition of <code>is_cartesian_closed</code> then the translation is<br>\n\"A category C with chosen finite products is CC if for each X, the chosen product functor X x - has a right adjoint\"<br>\nand now there's a better chance you can make everything coherent</p>",
        "id": 195189251,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587735815
    },
    {
        "content": "<p>That makes a lot of sense, thanks</p>",
        "id": 195189924,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587736099
    },
    {
        "content": "<p>This library design problem would be a lot easier if we didn't try to make things constructive, because then everything in sight would be a Prop.</p>",
        "id": 195192692,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587737369
    }
]