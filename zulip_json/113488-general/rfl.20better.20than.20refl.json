[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">S</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">refl</span> <span class=\"kn\">end</span> <span class=\"c1\">-- fails!</span>\n</pre></div>\n\n\n<p>I was surprised that <code>refl</code> fails. It doesn't unfold <code>S</code>?</p>",
        "id": 171247110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563532942
    },
    {
        "content": "<p>I am trying to encourage learners away from the <code>unfold</code> tactic and am trying to get them to do the unfolding in their head, because \"everything works when you unfold in your head\". But <code>refl</code> doesn't? It's like <code>rw</code> -- it needs syntactic equality and I just never noticed this? I'm sure I've used <code>refl</code> to close all sorts of goals before.</p>",
        "id": 171247400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563533368
    },
    {
        "content": "<p>It is surprising. Looking at the definition of <code>refl</code> it seems like it should unfold semireducibles.</p>",
        "id": 171247493,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563533474
    },
    {
        "content": "<p><code>refl</code> uses the <code>@{refl]</code>attribute. It looks at the head of the expression, assuming it has the form <code>R x x</code>, to find the proof</p>",
        "id": 171247782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563533771
    },
    {
        "content": "<p>Oh, so it refuses to unfold because it has a better idea?</p>",
        "id": 171247791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563533797
    },
    {
        "content": "<p>It's like \"aha, this must be asking for a proof of reflexivity of <code>S</code>, I'll just look it up in my database, oh dear it's not there\"</p>",
        "id": 171247812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563533828
    },
    {
        "content": "<p>more like it figured out the relevant definition, it's <code>S</code>, and it's complaining that this definition doesn't have a <code>@[refl]</code> declaration</p>",
        "id": 171247819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563533848
    },
    {
        "content": "<p>right</p>",
        "id": 171247828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563533860
    }
]