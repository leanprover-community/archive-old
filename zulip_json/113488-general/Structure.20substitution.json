[
    {
        "content": "<p>Is there a way to go from this context : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prop</span><span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">prop</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>to this one :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prop</span><span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">prop</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 249784936,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1629237942
    },
    {
        "content": "<p><code>let p : Point := {x := 0, y := 0}</code></p>",
        "id": 249785927,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629238570
    },
    {
        "content": "<p>Naaah, It's giving me the object in the context but it doesn't replace it in the goal.</p>",
        "id": 249787010,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1629239269
    },
    {
        "content": "<p>you can use <code>change ...</code> or <code>set ... with hp, rw ←hp at *</code> to force it to behave</p>",
        "id": 249787085,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629239303
    },
    {
        "content": "<p>and worst case they are defeq so you can mostly just pretend that it's fine</p>",
        "id": 249787100,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629239317
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> State</span>\n<span class=\"cm\">    α : Sort ?,</span>\n<span class=\"cm\">    p : α → Prop,</span>\n<span class=\"cm\">    x : α,</span>\n<span class=\"cm\">    y : α := x</span>\n<span class=\"cm\">    ⊢ p y</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249789074,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629240700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> was off by 1 letter :)</p>",
        "id": 249789222,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629240812
    },
    {
        "content": "<p>is there a reason we still have <code>let</code> as opposed to <code>set</code>? because <code>let</code> is in core?</p>",
        "id": 249789285,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629240846
    },
    {
        "content": "<p><code>set</code> can sometimes still not overwrite though, and <code>let</code> is slightly different with binders iirc</p>",
        "id": 249789310,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629240869
    },
    {
        "content": "<p><code>let</code> seems also useful, if you don't want to change the other hypotheses or the goal. But in cases where they behave differently, you usually want to use <code>set</code>.</p>",
        "id": 249789474,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629241004
    },
    {
        "content": "<p>Huuuu,<br>\nFor strange reason, it's not working in my actual proof, but it work with a not-sso-working mwe</p>",
        "id": 249789595,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1629241098
    },
    {
        "content": "<p>Ideas:</p>\n<ul>\n<li>Does Eric's suggestion with <code>rw ←hp at *</code> help?</li>\n<li>Double check that the value of <code>p</code> and the term in the goal are <strong>precisely</strong> the same, including in implicit arguments etc. (Maybe you can click through them in widgets?).</li>\n</ul>",
        "id": 249789832,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629241238
    },
    {
        "content": "<p>\"MWE\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">create_point</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"n\">create_point</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">create_point</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> State</span>\n<span class=\"cm\">     prop: Point → Prop</span>\n<span class=\"cm\">     p: Point := create_point 0 0</span>\n<span class=\"cm\">     ⊢ prop p</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Actual proof : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">rename_accept</span> <span class=\"o\">(</span><span class=\"n\">fsa</span> <span class=\"o\">:</span> <span class=\"n\">FSA</span> <span class=\"n\">S</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">old</span> <span class=\"n\">new</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">new</span> <span class=\"bp\">∉</span> <span class=\"n\">fsa.states</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">accept</span> <span class=\"n\">fsa</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">accept</span> <span class=\"o\">(</span><span class=\"n\">rename_state</span> <span class=\"n\">fsa</span> <span class=\"n\">old</span> <span class=\"n\">new</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">fsa'</span> <span class=\"o\">:</span> <span class=\"n\">FSA</span> <span class=\"n\">S</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">rename_state</span> <span class=\"n\">fsa</span> <span class=\"n\">old</span> <span class=\"n\">new</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">rename_state</span> <span class=\"n\">fsa</span> <span class=\"n\">old</span> <span class=\"n\">new</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"n\">fsa'</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> State</span>\n<span class=\"cm\">     ...</span>\n<span class=\"cm\">     fsa': FSA S L := fsa.rename_state old new h₁</span>\n<span class=\"cm\">     ⊢ (fsa.rename_state old new h₁).accept w</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249790035,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1629241340
    },
    {
        "content": "<p>did you try <code>set</code>? <br>\nIf you replace the <code>let</code> by <code>set fsa' : FSA S L := rename_state fsa old new h₁ with hp</code><br>\ndoes <code>rw ←hp</code> or <code>simp_rw ←hp</code> do anything?</p>",
        "id": 249790284,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629241546
    },
    {
        "content": "<p>Does <code>change fsa'.accept w</code> work after your <code>let</code>?</p>",
        "id": 249790391,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629241628
    },
    {
        "content": "<p>Well it's work but i don't understand why change doesn't work in the same way</p>",
        "id": 249790397,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1629241637
    },
    {
        "content": "<p>(set + rw hp)</p>",
        "id": 249790410,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1629241647
    },
    {
        "content": "<p>And change fsa'.accept w work too<br>\nVery strange</p>",
        "id": 249790501,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1629241702
    },
    {
        "content": "<p>In the same topic, is there a way to rewrite the definition of a structure ? <br>\nlike go from <code>p: Point := {x := 0, y := 1 + 1}</code> to <code>p: Point := {x := 0, y := 2}</code> for example</p>",
        "id": 249844361,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1629291393
    },
    {
        "content": "<p>You can prove the equality between those two using <code>ext</code>, and then use that to <code>rw</code>. Maybe there's a shortcut, though. Like, in that particular instance, your two points are defeq.</p>",
        "id": 249846123,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629292111
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 249847375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629292700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span><br>\nIf i do : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">Point</span> <span class=\"bp\">.</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">Point</span> <span class=\"bp\">.</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I obtain </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> State</span>\n<span class=\"cm\">rewrite tactic failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">  {x := 0, y := 1 + 1}</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">p : Point := {x := 0, y := 1 + 1},</span>\n<span class=\"cm\">h : {x := 0, y := 1 + 1} = {x := 0, y := 2}</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 249862457,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1629298800
    },
    {
        "content": "<p>p is not a hypothesis at which you can rewrite. Use \"set p :=... with hp\"</p>",
        "id": 249863182,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629299045
    },
    {
        "content": "<p>Hmmm, of course it's work but it doesn't help me to do what i hoped to do<br>\nI have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">some_prop</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Big_struct</span> <span class=\"o\">:=</span> <span class=\"n\">func_which_eval_into_a_really_big_struct</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But now to prove the goal i need to access to the value of the fields of the structure, but i can't because <code>i_eval_into_a_really_big_struct</code> is not unfolded<br>\nI can use <code>set p :=... with hp</code> and unfold it in hp then rewrite x in the goal , but then i have a big structure in the goal and it's messy and unreadable</p>",
        "id": 249865849,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1629300123
    },
    {
        "content": "<p>Very hard to understand your issue without a mwe context. Why not just \"use (func_which_eval)\"?</p>",
        "id": 249869329,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629301454
    },
    {
        "content": "<p>Hmmm,<br>\nI guess this work ? I hope you will understand my mindset</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Big_struct</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">i_eval_to_big_struct</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">Big_struct</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">-- work but ugly</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Big_struct</span> <span class=\"bp\">→</span> <span class=\"n\">Big_struct</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Big_struct</span><span class=\"o\">,</span> <span class=\"n\">x.a</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">i_eval_to_big_struct</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> State</span>\n<span class=\"cm\">     f: Big_struct → Big_struct</span>\n<span class=\"cm\">     ⊢ (i_eval_to_big_struct 5 2).a &gt; (f (i_eval_to_big_struct 5 2)).b</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> State</span>\n<span class=\"cm\">     f: Big_struct → Big_struct</span>\n<span class=\"cm\">     ⊢ (f {a := 5, b := 2, c := true, d := true, e := true, f := true, g := true, h := true, i := true, j := true, k := true, l := true, m := true}).b &lt; 5</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- what i wish i could do</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Big_struct</span> <span class=\"bp\">→</span> <span class=\"n\">Big_struct</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Big_struct</span><span class=\"o\">,</span> <span class=\"n\">x.a</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">some_tactics</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    f: Big_struct → Big_struct</span>\n<span class=\"cm\">    x: Big_struct := {a := 5, b := 2, c := true, d := true, e := true, f := true, g := true, h := true, i := true, j := true, k := true, l := true, m := true}</span>\n<span class=\"cm\">    ⊢ x.a &gt; (f x).b</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> State</span>\n<span class=\"cm\">     f: Big_struct → Big_struct</span>\n<span class=\"cm\">     x: Big_struct := {a := 5, b := 2, c := true, d := true, e := true, f := true, g := true, h := true, i := true, j := true, k := true, l := true, m := true}</span>\n<span class=\"cm\">     ⊢ (f x).b &lt; 5</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249873131,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1629303059
    },
    {
        "content": "<p>Here are two options to do roughly want you want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- to get mostly what you want</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Big_struct</span> <span class=\"bp\">→</span> <span class=\"n\">Big_struct</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Big_struct</span><span class=\"o\">,</span> <span class=\"n\">x.a</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">i_eval_to_big_struct</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    f: Big_struct → Big_struct</span>\n<span class=\"cm\">    x: Big_struct := i_eval_to_big_struct 5 2</span>\n<span class=\"cm\">    ⊢ x.a &gt; (f x).b</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">revert</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">i_eval_to_big_struct</span><span class=\"o\">,</span> <span class=\"n\">gt</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">},</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> State</span>\n<span class=\"cm\">     f: Big_struct → Big_struct</span>\n<span class=\"cm\">     x: Big_struct := {a := 5, b := 2, c := true, d := true, e := true, f := true, g := true, h := true, i := true, j := true, k := true, l := true, m := true}</span>\n<span class=\"cm\">     ⊢ (f x).b &lt; 5</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- another option</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Big_struct</span> <span class=\"bp\">→</span> <span class=\"n\">Big_struct</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Big_struct</span><span class=\"o\">,</span> <span class=\"n\">x.a</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">i_eval_to_big_struct</span> <span class=\"mi\">5</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    f: Big_struct → Big_struct</span>\n<span class=\"cm\">    x: Big_struct</span>\n<span class=\"cm\">    hx: i_eval_to_big_struct 5 2 = x</span>\n<span class=\"cm\">    ⊢ x.a &gt; (f x).b</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"o\">},</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">i_eval_to_big_struct</span><span class=\"o\">],</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> State</span>\n<span class=\"cm\">    f: Big_struct → Big_struct</span>\n<span class=\"cm\">    x: Big_struct</span>\n<span class=\"cm\">    hx: i_eval_to_big_struct 5 2 = x</span>\n<span class=\"cm\">    ⊢ (f x).b &lt; 5</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249883474,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629307576
    },
    {
        "content": "<p>For others who, like me, aren't familiar with fancy options to <code>dsimp</code>, this is what <code>zeta</code> is for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">zeta</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>               <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"c1\">-- do zeta-reductions: `let x : a := b in c ↝ c[x/b]`.</span>\n</code></pre></div>",
        "id": 249884824,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629308162
    }
]