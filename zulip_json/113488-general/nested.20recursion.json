[
    {
        "content": "<p>is it possible to write such function?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">rec</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">rec</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span>\n\n<span class=\"c1\">-- unexpected occurrence of recursive function</span>\n<span class=\"kd\">def</span> <span class=\"n\">rec.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">rec</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rec</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rec.mk</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rec.mk</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">id</span> <span class=\"n\">rec.map</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226719828,
        "sender_full_name": "Kana",
        "timestamp": 1613593537
    },
    {
        "content": "<p>nested inductives are not really supported in lean, they are compiled (badly) to inductive types. It's better to roll your own inductive type if you want the right recursion principle</p>",
        "id": 226720037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593619
    },
    {
        "content": "<p>although you can also sort of ignore the foundational issues if you use <code>meta inductive</code></p>",
        "id": 226720101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593655
    },
    {
        "content": "<p>which is probably fine if this is intended for code execution</p>",
        "id": 226720213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593687
    },
    {
        "content": "<p>I want just to write has_repr instance for such type</p>",
        "id": 226720219,
        "sender_full_name": "Kana",
        "timestamp": 1613593690
    },
    {
        "content": "<p>Maybe there is some way to derive that instance?</p>",
        "id": 226720260,
        "sender_full_name": "Kana",
        "timestamp": 1613593706
    },
    {
        "content": "<p>I think it's best to imagine that the <code>inductive</code> line itself failed</p>",
        "id": 226720318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593734
    },
    {
        "content": "<p>you can't define <em>any</em> functions by structural recursion on this type without a lot of manual work</p>",
        "id": 226720458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593802
    },
    {
        "content": "<p>So my question for you is whether you want a type you can run functions on in the VM, or a type you can prove things about by induction/recursion</p>",
        "id": 226720569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593840
    },
    {
        "content": "<p>If it is the former, the solution is easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">rec</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">rec</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rec.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">rec</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rec</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rec.mk</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rec.mk</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">id</span> <span class=\"n\">rec.map</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226720639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593873
    },
    {
        "content": "<p>or, probably better,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">inductive</span> <span class=\"n\">rec</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">rec</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rec.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">rec</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rec</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rec.mk</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rec.mk</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">id</span> <span class=\"n\">rec.map</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226720676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613593893
    },
    {
        "content": "<p>Okay. I have such type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">string</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">object</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">array</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">value</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">null</span> <span class=\"o\">:</span> <span class=\"n\">value</span>\n</code></pre></div>\n<p>and all what I want is just to print value of this type via <code>#eval</code>, so I want has_repr or has_to_string instance, but I can't write it</p>",
        "id": 226720712,
        "sender_full_name": "Kana",
        "timestamp": 1613593911
    },
    {
        "content": "<p>thanks, I will try meta</p>",
        "id": 226720756,
        "sender_full_name": "Kana",
        "timestamp": 1613593924
    },
    {
        "content": "<p>If you want to prove things about it, you should unfold the nested inductive into a plain inductive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">rec</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">rec</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rec.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">rec</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rec</span> <span class=\"bp\">→</span> <span class=\"n\">rec</span>\n<span class=\"bp\">|</span> <span class=\"n\">rec.nil</span> <span class=\"o\">:=</span> <span class=\"n\">rec.nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rec.cons</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rec.cons</span> <span class=\"n\">s</span> <span class=\"n\">x.map</span> <span class=\"n\">xs.map</span>\n</code></pre></div>",
        "id": 226721112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613594059
    },
    {
        "content": "<p>A cheating way to fix your json type is to unfold the <code>object</code> and <code>array</code> constructors into nil/cons</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">string</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">object_nil</span> <span class=\"o\">:</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">object_cons</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">value</span> <span class=\"bp\">→</span> <span class=\"n\">value</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">array_nil</span> <span class=\"o\">:</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">array_cons</span> <span class=\"o\">:</span> <span class=\"n\">value</span> <span class=\"bp\">→</span> <span class=\"n\">value</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">null</span> <span class=\"o\">:</span> <span class=\"n\">value</span>\n</code></pre></div>\n<p>The problem with this is that there are some values of this type that are not valid json, for instance <code>array_cons v object_nil</code>. For most code this doesn't matter since it's being validated into a more precise type anyway, but it's possible to encode this invariant as a predicate or as an index in the type</p>",
        "id": 226721694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613594310
    },
    {
        "content": "<p>But from your description I think <code>meta</code> is the way to go, termination checking doesn't matter for your use case</p>",
        "id": 226721842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613594392
    },
    {
        "content": "<p>Thanks! meta works great for me</p>",
        "id": 226722085,
        "sender_full_name": "Kana",
        "timestamp": 1613594499
    }
]