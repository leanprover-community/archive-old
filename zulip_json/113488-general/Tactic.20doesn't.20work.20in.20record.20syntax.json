[
    {
        "content": "<p>Can anyone help me understand what's going on with the following code?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">L</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_vec</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonzero</span> <span class=\"o\">:</span> <span class=\"n\">to_vec</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"c1\">-- this works...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span> <span class=\"c1\">-- this fails...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"c1\">-- this works</span>\n</code></pre></div>\n<p><code>tidy</code> very happily proves that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1,0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> is nonzero in the lemma <code>foo</code>, but it doesn't work in the second example.</p>",
        "id": 217951364,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606347268
    },
    {
        "content": "<p>goodness knows whether this is relevant, but the infoview says that the first goal is about a map <code>fin 1.succ → L</code> but the failure is about a map <code>fin 2 → L</code></p>",
        "id": 217951649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606347560
    },
    {
        "content": "<p>this is I think a red herring.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span> <span class=\"c1\">-- this still fails...</span>\n</code></pre></div>",
        "id": 217951776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606347692
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"bp\">?</span> <span class=\"c1\">-- intros ᾰ, simp at *, assumption</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"c1\">-- simp fails...</span>\n</code></pre></div>",
        "id": 217951883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606347809
    },
    {
        "content": "<p><a href=\"https://www.diffchecker.com/xOMY4t91\">https://www.diffchecker.com/xOMY4t91</a></p>",
        "id": 217951934,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606347845
    },
    {
        "content": "<p>the LHS is the version of <code>ᾰ</code> that fails; RHS is the version that succeeds</p>",
        "id": 217951940,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606347866
    },
    {
        "content": "<p>It this supposed to be read by a human?</p>",
        "id": 217951952,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606347884
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"c1\">-- simp fails...</span>\n</code></pre></div>",
        "id": 217951960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606347896
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">false_and</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">false_and</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n    <span class=\"n\">assumption</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217952051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606347982
    },
    {
        "content": "<p>this is the diff when I use <code>(nat.succ $ nat.succ 0)</code>: <a href=\"https://www.diffchecker.com/CR8HCTXs\">https://www.diffchecker.com/CR8HCTXs</a></p>",
        "id": 217952054,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606347988
    },
    {
        "content": "<p>the diff is smaller, but still exists</p>",
        "id": 217952058,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606347996
    },
    {
        "content": "<p>I don't think it's about the 2 in <code>fin 2</code>. The second example works</p>",
        "id": 217952070,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606348019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Tactic.20doesn't.20work.20in.20record.20syntax/near/217951952\">said</a>:</p>\n<blockquote>\n<p>It this supposed to be read by a human?</p>\n</blockquote>\n<p>This is what kids who don't have <code>diff</code> do.</p>",
        "id": 217952093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606348043
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"bp\">$</span> <span class=\"n\">nat.succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"kd\">end</span>\n <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217952172,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606348090
    },
    {
        "content": "<p>I think this is related:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"n\">abbreviation</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">L</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"c1\">-- this works...</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">baz</span> <span class=\"n\">L</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"c1\">-- this works...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz'</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo''</span> <span class=\"o\">:</span> <span class=\"n\">baz'</span> <span class=\"n\">L</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"c1\">-- this fails...</span>\n</code></pre></div>",
        "id": 217953525,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606349428
    },
    {
        "content": "<p>Fixed it for you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ.succ</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">goodzero</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.has_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))),</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))),</span>\n             <span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))))))</span>\n      <span class=\"k\">with</span> <span class=\"n\">hgoodzero</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">badzero</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_has_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_add_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.add_comm_group.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">))))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))),</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))),</span>\n                      <span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))))))</span>\n      <span class=\"k\">with</span> <span class=\"n\">hbadzero</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">badzero</span> <span class=\"bp\">=</span> <span class=\"n\">goodzero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">tidy</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217953881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606349814
    },
    {
        "content": "<p><code>variables (L : Type) [field L] (V : Type) [add_comm_group V] [vector_space L V]</code></p>",
        "id": 217953906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606349851
    },
    {
        "content": "<p>Kevin, you're not supposed to write the name <code>ᾰ</code> explicitly</p>",
        "id": 217953919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606349874
    },
    {
        "content": "<p>That was Kenny! I'd never dream of doing that!</p>",
        "id": 217953963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606349896
    },
    {
        "content": "<p>In fact the moment I saw his code I linted it, hoping that there was now an <code>ᾰ</code> linter.</p>",
        "id": 217953995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606349949
    },
    {
        "content": "<p>oh no crap I just saw it in mine too :-/ Who put that there?</p>",
        "id": 217954018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606349983
    },
    {
        "content": "<p>We really should have gone with something like <span aria-label=\"nuclear\" class=\"emoji emoji-2622\" role=\"img\" title=\"nuclear\">:nuclear:</span></p>",
        "id": 217954072,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606350010
    },
    {
        "content": "<p>Patrick claimed recently that we didn't need <code>pp.all</code> any more because the infoview would take care of everything, but it was very handy here. Of course I don't have a clue about the actual problem, namely that for some reason we have two different zeros.</p>",
        "id": 217954118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606350083
    },
    {
        "content": "<p>Here's all the code. You can see after the two <code>intros x</code> that the types are slightly different -- this was Kenny's observation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">L</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_vec</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonzero</span> <span class=\"o\">:</span> <span class=\"n\">to_vec</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix.cons_eq_zero_iff</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">false_and</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ.succ</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">goodzero</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.has_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))),</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))),</span>\n             <span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))))))</span>\n      <span class=\"k\">with</span> <span class=\"n\">hgoodzero</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">badzero</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_has_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_add_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.add_comm_group.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">))))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))),</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)))),</span>\n                      <span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">L</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))))))</span>\n      <span class=\"k\">with</span> <span class=\"n\">hbadzero</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">badzero</span> <span class=\"bp\">=</span> <span class=\"n\">goodzero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">tidy</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217954197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606350175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Tactic.20doesn't.20work.20in.20record.20syntax/near/217954197\">said</a>:</p>\n<blockquote>\n<p>this was Kenny's observation</p>\n</blockquote>\n<p>This sounds like research-paper language to me</p>",
        "id": 217954287,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606350279
    },
    {
        "content": "<p><span class=\"tex-error\">$$\\text{[5] K. Lau, \\emph{Private communication} (2020).}$$</span></p>",
        "id": 217954317,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606350349
    },
    {
        "content": "<p>fail</p>",
        "id": 217954367,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606350367
    },
    {
        "content": "<p>So do I understand correctly that the issue is with the <code>0</code> in <code>\\neq 0</code>?</p>",
        "id": 217954395,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606350418
    },
    {
        "content": "<p>Yes that's my understanding too -- the RHS zeros are for some reason different.</p>",
        "id": 217954509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606350532
    },
    {
        "content": "<p>This is less than ideal, but it works <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_vec</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonzero</span> <span class=\"o\">:</span> <span class=\"n\">to_vec</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"c1\">-- this works...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"n\">L</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217954676,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606350723
    },
    {
        "content": "<p>Even better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_vec</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonzero</span> <span class=\"o\">:</span> <span class=\"n\">to_vec</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"n\">L</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]⟩</span>\n</code></pre></div>",
        "id": 217954713,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606350754
    },
    {
        "content": "<p>why are these things working but other things aren't working?</p>",
        "id": 217954734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606350789
    },
    {
        "content": "<p>¯\\_(ツ)_/¯</p>",
        "id": 217954762,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606350816
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">has_zero.zero</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">L</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_vec</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonzero</span> <span class=\"o\">:</span> <span class=\"n\">to_vec</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"c1\">-- fail!?</span>\n\n  <span class=\"kd\">end</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217955353,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606351498
    },
    {
        "content": "<p>The <code>change</code> line fails. <code>not definitionally equal</code></p>",
        "id": 217955374,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606351526
    },
    {
        "content": "<p>So I guess what's happening is that when you make the structure</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">L</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_vec</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonzero</span> <span class=\"o\">:</span> <span class=\"n\">to_vec</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the zero is coming from the fact that V is an <code>add_comm_group</code>. But here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>Lean knows that the vector space is <code>fin 2 -&gt; L</code> and whilst this is an add_comm_group, the zero comes from <code>pi.has_zero</code>. These things are defeq so there are no diamond problems, but the problem is that the solution found by <code>simp</code> involves <code>matrix.cons_eq_zero_iff</code> which has the <code>pi.has_zero</code> zero. The rewrite shouldn't fail because the zeros are defeq, but for some reason it does fail -- this is not the first time I have seen rewrite failing under suspicious circumstances recently. Has there been a regression or something? Or am I talking nonsense?</p>",
        "id": 217955565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606351726
    },
    {
        "content": "<p><del>I assume <code>erw</code> would work.</del> It doesn't</p>",
        "id": 217955591,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606351761
    },
    {
        "content": "<p>But yes, that sounds like a reasonable conclusion.</p>",
        "id": 217955716,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606351874
    },
    {
        "content": "<p>But this doesn't really explain why <code>change</code> doesn't work.</p>",
        "id": 217955781,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606351951
    },
    {
        "content": "<p>The <code>change</code> fails because that <code>0</code> is <code>0 : nat</code>. <code>change</code> doesn't try to do any unification with the goal, it's much more stupid than that. It interprets what you give it and then unifies afterwards.</p>",
        "id": 217981496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606383664
    },
    {
        "content": "<p>Oh, right. I figured lean would be smart enough to replace <code>0</code> with <code>has_zero.zero</code>, but I guess not.</p>",
        "id": 218004870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606399361
    },
    {
        "content": "<p>It's all about when elaboration happens I guess -- this is just something I've picked up over time. Before it attempts the change it decides it wants to figure out the type of <code>0</code> and because it doesn't have any other info, it goes for <code>nat</code>, and from then on we're doomed.</p>",
        "id": 218013404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606404157
    },
    {
        "content": "<p>I'm still a little puzzled as to why foo0 works but not foo:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218014182,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606404644
    },
    {
        "content": "<p>Oh I don't think we've got to the bottom of this! I still don't understand why the rewrite fails.</p>",
        "id": 218014333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606404723
    },
    {
        "content": "<p>To un-#xy things, I'm trying to mimic a (fairly technical) argument using classical projective spaces (i.e. projectivization of <code>(fin n \\to L)</code>), so I'm happy to restrict myself to those vector spaces, at least for now.</p>",
        "id": 218014454,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606404796
    },
    {
        "content": "<p>I think <code>tidy</code> made a wrong turn in the foo proof above. If <code>n=0</code> then probably the goal isn't solvable after <code>tidy</code>.</p>",
        "id": 218014627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606404901
    },
    {
        "content": "<p>Note:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix.vec_cons</span> <span class=\"mi\">1</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218014710,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606404958
    },
    {
        "content": "<p>I would definitely suggest not using <code>tidy</code> as your proof when trying to debug something like this unless the problem is <code>tidy</code>-specific</p>",
        "id": 218014796,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606404989
    },
    {
        "content": "<p>oh it's nothing to do with <code>tidy</code> -- <code>![1,v]</code> is being interpreted as two terms of type <code>fin n -&gt; F</code> in the failing proof. <code>foo</code> isn't true I suspect.</p>",
        "id": 218014877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606405051
    },
    {
        "content": "<p>right, because <code>n</code> could be <code>0</code></p>",
        "id": 218014964,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606405090
    },
    {
        "content": "<p>But this fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo'</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin.cons</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tidy</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218015023,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606405130
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I agree that we should not be using tidy, but the main thing I'm trying to accomplish with this is to have some (however rudimentary) automation for proving vectors are nonzero, so that working with projective spaces isn't as awful, and tidy seems like the best choice.</p>",
        "id": 218015182,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606405207
    },
    {
        "content": "<p>Right but if there's some obscure elaboration issue going on, then getting rid of mysterious gadgets like <code>tidy</code> is the first step</p>",
        "id": 218015215,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606405231
    },
    {
        "content": "<p>if <code>tidy</code> does the same thing in the working and non-working cases, study that thing</p>",
        "id": 218015286,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606405282
    },
    {
        "content": "<p><code>tidy</code> isn't mysterious in this case. It just does <code>intros a, simp at *, assumption</code></p>",
        "id": 218015289,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606405285
    },
    {
        "content": "<p>if it does different things, then there's your problem</p>",
        "id": 218015302,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606405291
    },
    {
        "content": "<p>great, so get rid of <code>tidy</code> asap</p>",
        "id": 218015312,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606405300
    },
    {
        "content": "<p>and the <code>simp at *</code> fails for the second one.</p>",
        "id": 218015314,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606405301
    },
    {
        "content": "<p>Looks like it has to do with <code>matrix.cons_eq_zero_iff</code></p>",
        "id": 218015391,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606405332
    },
    {
        "content": "<p>So lean can't unify the <code>fin.cons</code> with <code>matrix.vec_cons</code>, I guess?</p>",
        "id": 218015423,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606405353
    },
    {
        "content": "<p>and then try to figure out whether it's <code>simp</code> not trying to apply the lemma, or whether <code>rw</code> won't do it either, or whether explicitly using the lemma also fails, etc</p>",
        "id": 218015449,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606405368
    },
    {
        "content": "<p>it sounds like you've already done this</p>",
        "id": 218015465,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606405379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/Tactic.20doesn't.20work.20in.20record.20syntax/near/217952172\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"bp\">$</span> <span class=\"n\">nat.succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"kd\">end</span>\n <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I already extracted the crucial component</p>",
        "id": 218016408,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606406004
    },
    {
        "content": "<p>Playing a bit more with <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> 's examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">L</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_vec</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonzero</span> <span class=\"o\">:</span> <span class=\"n\">to_vec</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- \"a : ![1,0] = 0\" in context</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- \"a : ![1,0] = 0\" in context</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"c1\">--works</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"c1\">--fails</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 218017390,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606406614
    },
    {
        "content": "<p>Here's a slightly more minimised version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">L</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">zero_vectors</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_vec</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">to_vec</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">zero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">erw</span> <span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">zero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 218018123,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606407079
    },
    {
        "content": "<p>Okay, I think I'm starting to understand the issue here...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq_iff_true_of_subsingleton</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218019289,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606407761
    },
    {
        "content": "<p>Where is <code>has_zero (fin n \\to L)</code> defined?</p>",
        "id": 218019318,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606407790
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_zero\">docs#pi.has_zero</a></p>",
        "id": 218019368,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606407829
    },
    {
        "content": "<p>Well.... I don't know. I think for now I'll just hack it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">L</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">zero_vectors</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_vec</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">to_vec</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zero_eq</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">matrix.vec_cons</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">zero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 218020223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606408413
    },
    {
        "content": "<p>Unfortunately, this hack doesn't work for <code>nonzero_vectors</code>.</p>",
        "id": 218020785,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606408772
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">L</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_vec</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonzero</span> <span class=\"o\">:</span> <span class=\"n\">to_vec</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">--  rw matrix.cons_eq_zero_iff at h, -- works</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- uses `matrix.cons_eq_zero_iff`</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"c1\">--    rw matrix.cons_eq_zero_iff at h, -- fails</span>\n<span class=\"c1\">--    rw @matrix.cons_eq_zero_iff L _ at h, -- fails</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">matrix.cons_eq_zero_iff</span> <span class=\"n\">L</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- works, presumably because Lean uses L's zero finally</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 218117742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606500695
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">L</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_vec</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonzero</span> <span class=\"o\">:</span> <span class=\"n\">to_vec</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">cons_eq_zero_iff'</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">vec_cons</span> <span class=\"n\">x</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">cons_eq_zero_iff</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_vectors</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">nonzero</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"c1\">--erw cons_eq_zero_iff at h, -- fails</span>\n    <span class=\"c1\">--rw cons_eq_zero_iff' at h, -- fails</span>\n    <span class=\"n\">erw</span> <span class=\"n\">cons_eq_zero_iff'</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 218121605,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606504193
    },
    {
        "content": "<p>My mental model of <code>erw</code> is \"like <code>rw</code>, but tries harder to unify\". However my mental model of what is actually going on with unification is poor.</p>",
        "id": 218121690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606504246
    },
    {
        "content": "<p><code>    simp only [cons_eq_zero_iff'] at h,</code> fails. We need <code>esimp</code> (and <code>esimpa</code>)</p>",
        "id": 218121840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606504379
    },
    {
        "content": "<p>Is it obvious what needs to be changed in <code>cons_eq_zero_iff'</code> to make <code>rw</code> work as opposed to <code>erw</code>? I think when <code>rw</code> works, then <code>simp</code> can apply it, but that's not the case with <code>erw</code>.</p>",
        "id": 218121845,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606504388
    },
    {
        "content": "<p>The \"mistake\" is not made by the lemma, my understanding of the issue is that unification has chosen a rather exotic zero for the right hand side of <code>h</code>, so somehow it's not the lemma's fault that we have to resort to <code>eew</code></p>",
        "id": 218122018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606504495
    },
    {
        "content": "<p>or whatever it's called</p>",
        "id": 218122053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606504527
    },
    {
        "content": "<p>It <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean4.3Amaster/near/217925875\">used to work in Lean 4</a></p>",
        "id": 218122294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606504705
    },
    {
        "content": "<p>Isn't there some way to write a simp lemma that would allow us to solve <code>nonzero</code>in the example with <code>by tidy</code>?</p>",
        "id": 218122323,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606504741
    },
    {
        "content": "<p>I was hoping <code>cons_eq_zero_iff'</code> would do it, but no.</p>",
        "id": 218122343,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606504758
    },
    {
        "content": "<p>Oh I understand now, you're really trying to emulate the pi zero.</p>",
        "id": 218122417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606504817
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">cons_eq_zero_iff'.1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>now works, but apparently this isn't good enough for <code>rw</code>. (oh -- the point is that not even this works with <code>cons_eq_zero_iff</code> -- I thought I'd posted some replace code but I ended up getting rw @ to work)</p>",
        "id": 218122474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606504890
    },
    {
        "content": "<p>There's a way of turning on some trace messages so you can see exactly why it's failing...</p>",
        "id": 218122636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606505042
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/your.20favourite.20set_option.20option/near/201825547\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/your.20favourite.20set_option.20option/near/201825547</a></p>",
        "id": 218122743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606505138
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.type_context.is_def_eq</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.type_context.is_def_eq_detail</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>and then you can try and figure out why the rewrite is failing. I think.</p>",
        "id": 218122865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606505238
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Trace message</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"n\">vec_cons</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">eq</span> <span class=\"bp\">=?=</span> <span class=\"n\">eq</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">vec_cons</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">=?=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">vec_cons</span> <span class=\"bp\">=?=</span> <span class=\"n\">vec_cons</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">L</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">L</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">fin</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=?=</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]:</span> <span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=?=</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]:</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=?=</span> <span class=\"mi\">2</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">pi.has_zero</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_monoid.to_has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]:</span> <span class=\"o\">{</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid.zero</span> <span class=\"o\">(</span><span class=\"n\">add_group.to_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">))}</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">]:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_monoid.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_group.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">]:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_comm_group.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"o\">]:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">_x</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_x</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">after</span> <span class=\"n\">whnf_core</span><span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">=?=</span> <span class=\"n\">L</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"n\">_x</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">add_monoid.to_has_zero</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">_x</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">after</span> <span class=\"n\">whnf_core</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_monoid.to_has_zero</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">_x</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid.to_has_zero</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">_x</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">assign</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">to</span>\n<span class=\"n\">add_monoid.to_has_zero</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">_x</span><span class=\"o\">)</span>\n<span class=\"n\">value</span> <span class=\"n\">contains</span> <span class=\"kn\">local</span> <span class=\"n\">declaration</span> <span class=\"n\">_x</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">scope</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">metavariable</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_monoid.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">11</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_group.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">12</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_comm_group.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">13</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">ring.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">14</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">division_ring.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">15</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">field.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">16</span><span class=\"o\">]:</span> <span class=\"n\">has_zero.zero</span> <span class=\"bp\">=?=</span> <span class=\"n\">field.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"n\">has_zero.zero</span> <span class=\"bp\">=?=</span> <span class=\"n\">field.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">field.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid.zero</span> <span class=\"o\">(</span><span class=\"n\">add_group.to_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">))}</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">has_zero.zero</span> <span class=\"bp\">=?=</span> <span class=\"n\">has_zero.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">fin</span> <span class=\"bp\">?</span><span class=\"n\">m_1.succ</span> <span class=\"bp\">=?=</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]:</span> <span class=\"bp\">?</span><span class=\"n\">m_1.succ</span> <span class=\"bp\">=?=</span> <span class=\"mi\">2</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">pi.has_zero</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_monoid.to_has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]:</span> <span class=\"o\">{</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"bp\">?</span><span class=\"n\">m_1.succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid.zero</span> <span class=\"o\">(</span><span class=\"n\">add_group.to_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">))}</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">]:</span> <span class=\"n\">has_zero.mk</span> <span class=\"bp\">=?=</span> <span class=\"n\">has_zero.mk</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">]:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"bp\">?</span><span class=\"n\">m_1.succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_monoid.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"bp\">?</span><span class=\"n\">m_1.succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_group.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">]:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"bp\">?</span><span class=\"n\">m_1.succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_comm_group.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"o\">]:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"bp\">?</span><span class=\"n\">m_1.succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"o\">]:</span> <span class=\"n\">fin</span> <span class=\"bp\">?</span><span class=\"n\">m_1.succ</span> <span class=\"bp\">=?=</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">]:</span> <span class=\"bp\">?</span><span class=\"n\">m_1.succ</span> <span class=\"bp\">=?=</span> <span class=\"mi\">2</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">_x</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_x</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">after</span> <span class=\"n\">whnf_core</span><span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">=?=</span> <span class=\"n\">L</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"n\">_x</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">add_monoid.to_has_zero</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">_x</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">after</span> <span class=\"n\">whnf_core</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_monoid.to_has_zero</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">_x</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid.to_has_zero</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">_x</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">assign</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">to</span>\n<span class=\"n\">add_monoid.to_has_zero</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">_x</span><span class=\"o\">)</span>\n<span class=\"n\">value</span> <span class=\"n\">contains</span> <span class=\"kn\">local</span> <span class=\"n\">declaration</span> <span class=\"n\">_x</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">scope</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">metavariable</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_monoid.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">11</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_group.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">12</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">add_comm_group.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">13</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">ring.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">14</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">division_ring.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">15</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">field.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">16</span><span class=\"o\">]:</span> <span class=\"n\">has_zero.zero</span> <span class=\"bp\">=?=</span> <span class=\"n\">field.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"n\">has_zero.zero</span> <span class=\"bp\">=?=</span> <span class=\"n\">field.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"n\">field.zero</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"bp\">?</span><span class=\"n\">m_1.succ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid.zero</span> <span class=\"o\">(</span><span class=\"n\">add_group.to_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">))}</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"n\">vec_cons</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq</span><span class=\"o\">]</span> <span class=\"n\">vec_cons</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">...</span> <span class=\"n\">failed</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 218123060,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606505397
    },
    {
        "content": "<p>With <code>erw</code> the trace indicates success here:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>...\n[type_context.is_def_eq_detail] [13]: 0 =?= field.zero\n[type_context.is_def_eq_detail] [14]: has_zero.zero =?= field.zero\n[type_context.is_def_eq_detail] on failure: has_zero.zero =?= field.zero\n[type_context.is_def_eq_detail] on failure: 0 =?= field.zero\n[type_context.is_def_eq_detail] synthesized instances on left\n[type_context.is_def_eq_detail] [14]: 0 =?= field.zero\n[type_context.is_def_eq_detail] [15]: mul_zero_class.zero =?= field.zero\n[type_context.is_def_eq_detail] [16]: monoid_with_zero.zero =?= field.zero\n[type_context.is_def_eq_detail] [17]: semiring.zero =?= field.zero\n[type_context.is_def_eq_detail] [18]: ring.zero =?= field.zero\n[type_context.is_def_eq_detail] [19]: division_ring.zero =?= field.zero\n[type_context.is_def_eq_detail] [2]: fin ?m_1.succ =?= fin 2\n[type_context.is_def_eq_detail] [3]: ?m_1.succ =?= 2\n[type_context.is_def_eq] vec_cons ?m_3 ?m_4 = λ (_x : fin ?m_1.succ), 0 =?= ![1, 0] = 0 ... success  (approximate mode)\n</code></pre></div>\n<p>With <code>rw</code> the \"synthesized instances on left\" message never appears and the failure is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>...\n[type_context.is_def_eq_detail] [15]: 0 =?= field.zero\n[type_context.is_def_eq_detail] [16]: has_zero.zero =?= field.zero\n[type_context.is_def_eq_detail] on failure: has_zero.zero =?= field.zero\n[type_context.is_def_eq_detail] on failure: 0 =?= field.zero\n[type_context.is_def_eq_detail] on failure: {zero := λ (_x : fin 1.succ), 0} =?= {zero := add_monoid.zero (add_group.to_add_monoid (fin 2 → L))}\n[type_context.is_def_eq_detail] [3]: λ (_x : fin 1.succ), 0 =?= add_monoid.zero\n[type_context.is_def_eq_detail] [4]: λ (_x : fin 1.succ), 0 =?= add_group.zero\n[type_context.is_def_eq_detail] [5]: λ (_x : fin 1.succ), 0 =?= add_comm_group.zero\n[type_context.is_def_eq_detail] [6]: λ (_x : fin 1.succ), 0 =?= 0\n[type_context.is_def_eq_detail] [7]: 0 =?= 0\n[type_context.is_def_eq_detail] [8]: (λ (ᾰ : fin 1.succ), L) _x =?= (λ (i : fin 2), (λ (ᾰ : fin 2), L) i) _x\n[type_context.is_def_eq_detail] after whnf_core: L =?= L\n[type_context.is_def_eq_detail] [8]: (λ (i : fin 1.succ), ?m_1) _x =?= (λ (i : fin 2), add_monoid.to_has_zero ((λ (ᾰ : fin 2), L) i)) _x\n[type_context.is_def_eq_detail] after whnf_core: ?m_1 =?= add_monoid.to_has_zero ((λ (ᾰ : fin 2), L) _x)\n[type_context.is_def_eq_detail] process_assignment ?m_1 := add_monoid.to_has_zero ((λ (ᾰ : fin 2), L) _x)\n[type_context.is_def_eq_detail] failed to assign ?m_1 to\nadd_monoid.to_has_zero ((λ (ᾰ : fin 2), L) _x)\nvalue contains local declaration _x which is not in the scope of the metavariable\n[type_context.is_def_eq_detail] [8]: 0 =?= add_monoid.zero\n[type_context.is_def_eq_detail] [9]: 0 =?= add_group.zero\n[type_context.is_def_eq_detail] [10]: 0 =?= add_comm_group.zero\n[type_context.is_def_eq_detail] [11]: 0 =?= ring.zero\n[type_context.is_def_eq_detail] [12]: 0 =?= division_ring.zero\n[type_context.is_def_eq_detail] [13]: 0 =?= field.zero\n[type_context.is_def_eq_detail] [14]: has_zero.zero =?= field.zero\n[type_context.is_def_eq_detail] on failure: has_zero.zero =?= field.zero\n[type_context.is_def_eq_detail] on failure: 0 =?= field.zero\n[type_context.is_def_eq_detail] on failure: vec_cons ?m_3 ?m_4 = 0 =?= ![1, 0] = 0\n[type_context.is_def_eq] vec_cons ?m_3 ?m_4 = 0 =?= ![1, 0] = 0 ... failed  (approximate mode)\n</code></pre></div>",
        "id": 218123607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606505845
    },
    {
        "content": "<p>but now I'm at the limit of my understanding.</p>",
        "id": 218123705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606505914
    }
]