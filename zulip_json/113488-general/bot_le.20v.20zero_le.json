[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">bot_le</span> <span class=\"c1\">-- ∀ {a : α}, ⊥ ≤ a</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">zero_le</span> <span class=\"c1\">-- ∀ (a : α), 0 ≤ a</span>\n</code></pre></div>\n<p>Why the difference in binders? I omitted the typeclasses; for <code>bot_le</code> it's <code>[has_le α] [order_bot α]</code> and for <code>zero_le</code> it's <code>[canonically_ordered_add_monoid α]</code></p>",
        "id": 275937910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647735887
    },
    {
        "content": "<p>I think the style guides are ambiguous with how to deal with ≤</p>",
        "id": 275957114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647767811
    },
    {
        "content": "<p>On the one hand, the argument could be explicit because ≤ is like =</p>",
        "id": 275957123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647767838
    },
    {
        "content": "<p>On the other, <code>A ≤ B</code> is often defeq to <code>x ∈ A → x ∈ B</code>, where <code>x</code>, <code>A</code>, and maybe <code>B</code> would then usually be made explicit</p>",
        "id": 275957184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647767914
    },
    {
        "content": "<p>I would make it explicit. <code>≤</code> is rarely defeq to <code>x ∈ A → x ∈ B</code>, especially when dealing with a <code>0</code> in the order and even <code>⊆</code> lemmas often have (over)explicit arguments.</p>",
        "id": 275958571,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647770172
    },
    {
        "content": "<p>In my experience &lt;= is often defeq to the implication because I'm usually dealing with submodules, ideals, subspaces etc rather than these order types</p>",
        "id": 275961401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647774340
    },
    {
        "content": "<p>I often found that I wished an argument was explicit, rather than being annoyed by it being not implicit.  Hence, my preference would be to make them explicit!</p>",
        "id": 275964311,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647779086
    },
    {
        "content": "<p>+1 from me for making it explicit.</p>",
        "id": 275970135,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647786921
    },
    {
        "content": "<p>Same goes for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inf_le_left\">docs#inf_le_left</a> and its friends</p>",
        "id": 275970193,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647786973
    },
    {
        "content": "<p>For the record, I just wrote <code>@inf_comm _ _ a</code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 275970615,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647787620
    }
]