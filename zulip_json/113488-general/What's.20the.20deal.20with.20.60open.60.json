[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"n\">run_cmd</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">open_namespaces</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">a</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">open_namespaces</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Isn't <code>nat</code> supposed to be... not opened?</p>",
        "id": 194767277,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1587453026
    },
    {
        "content": "<p>Oh...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">b</span>\n<span class=\"n\">run_cmd</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">open_namespaces</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">a</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">b</span>\n<span class=\"n\">run_cmd</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">open_namespaces</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>gives an error at the second <code>#check b</code>. Did we introduce this bug, or has it always been here?</p>",
        "id": 194767322,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1587453052
    },
    {
        "content": "<p>Also, how could this possibly happen? The implementation of <code>open_namespaces</code> must be... funky</p>",
        "id": 194767339,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1587453084
    },
    {
        "content": "<p>What does <code>open_namespaces</code> even mean? Note that (at least last time I checked) <code>open</code> doesn't really permanently open the namespace, it just locally renames all theorems in the namespace to be usable without the namespace. If you add new theorems to the namespace they aren't \"opened\"</p>",
        "id": 194767401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587453145
    },
    {
        "content": "<p>which would imply that the actual state change in lean is not a list of open namespaces but rather a list of theorem aliases</p>",
        "id": 194767430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587453186
    },
    {
        "content": "<p>Woah</p>",
        "id": 194767560,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1587453279
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">foo</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bar</span> <span class=\"c1\">-- ok</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">baz</span> <span class=\"c1\">-- fail</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194767570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587453294
    },
    {
        "content": "<p>I thought it did what the doc says: <code>Return list of currently open namespaces</code> (the implication being that there is such a list)<br>\nWhy oh why aha</p>",
        "id": 194767617,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1587453354
    },
    {
        "content": "<p>It is different for <code>namespace</code> though, I think</p>",
        "id": 194767685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587453397
    },
    {
        "content": "<p>No</p>",
        "id": 194767696,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1587453404
    },
    {
        "content": "<p>Wouldn't my example work then?</p>",
        "id": 194767706,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1587453418
    },
    {
        "content": "<p>like lean needs to know what <code>namespace</code> sections you are in</p>",
        "id": 194767709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587453422
    },
    {
        "content": "<p>Oh, right, I see</p>",
        "id": 194767718,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1587453432
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">baz</span>\n\n<span class=\"c1\">-- lean knows that I am in foo / bar.baz</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">baz</span> <span class=\"c1\">-- or else it wouldn&#39;t be able to check that these ends are properly matched</span>\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n</pre></div>",
        "id": 194767747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587453466
    },
    {
        "content": "<p>Ok well, <code>#where</code> has been broken in an extra way all this time... I think the current behaviour of <code>open_namespaces</code> is useless, so I'll file an issue</p>",
        "id": 194767802,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1587453494
    },
    {
        "content": "<p>I think <code>open_namespaces</code> is broken because there isn't actually any state change akin to <code>close nat</code> that it can use to remove <code>nat</code> from the list</p>",
        "id": 194768000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587453645
    },
    {
        "content": "<p>If you just use <code>namespace</code> you will see <code>open_namespaces</code> tracks the additions and removals correctly</p>",
        "id": 194768040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587453675
    },
    {
        "content": "<p>By the way, I think this behavior was changed in lean 4, as it is rather counterintuitive, so that <code>open</code> is \"sticky\", applying even to theorems declared after the <code>open</code> command. So in that case an <code>open_namespaces</code> list makes perfect sense</p>",
        "id": 194768289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587453873
    },
    {
        "content": "<p>Makes sense, it feels very hacky</p>",
        "id": 194770482,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1587455692
    }
]