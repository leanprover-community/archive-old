[
    {
        "content": "<p>I just saw that Leonardo de Moura was one of the principal architects of both Z3 and Lean. That is awesome! Are there any benchmarks on Z3 vs Lean performance?</p>",
        "id": 192065734,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585335921
    },
    {
        "content": "<p>they are not directly comparable</p>",
        "id": 192065945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585336017
    },
    {
        "content": "<p>I understand that Z3 is an SMT solver. Does Lean at some point also not contain some sort of solver?</p>",
        "id": 192066169,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585336134
    },
    {
        "content": "<p>No</p>",
        "id": 192066184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585336142
    },
    {
        "content": "<p>Lean has a bunch of tactics, some of which may call solvers, but most don't</p>",
        "id": 192066238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585336163
    },
    {
        "content": "<p>The solver is this chatroom in Lean</p>",
        "id": 192066291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585336185
    },
    {
        "content": "<p>have you got some spare CPU cycles? We're trying to prove some theorems</p>",
        "id": 192066380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585336212
    },
    {
        "content": "<p>there are some algorithms that may have been borrowed from Z3, for example, <code>cc</code> and <code>eblast</code>, but TBH they aren't used very often</p>",
        "id": 192066384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585336214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/performance.20Lean.20vs.20Z3/near/192066380\" title=\"#narrow/stream/113488-general/topic/performance.20Lean.20vs.20Z3/near/192066380\">said</a>:</p>\n<blockquote>\n<p>have you got some spare CPU cycles? We're trying to prove some theorems</p>\n</blockquote>\n<p>Anything related to physics ?</p>",
        "id": 192066645,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585336348
    },
    {
        "content": "<p>what kind of physics?</p>",
        "id": 192066676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585336371
    },
    {
        "content": "<p>Classical mechanics, GR, or PDEs</p>",
        "id": 192066734,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585336404
    },
    {
        "content": "<p>I think it would be really cool to see GR foundations in lean. We have stuff on manifolds and \"holors\" (what physicists call tensors), but I don't think we have anything to do with Riemannian manifolds and geodesics</p>",
        "id": 192067143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585336583
    },
    {
        "content": "<p>Well, I've completed the natural number game, and would appreciate unrusting my relativity, so if people know how I could start, I would welcome that.</p>",
        "id": 192069604,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585337785
    },
    {
        "content": "<p>Or is there anything done on Lagrangian/Hamiltonian formalisms?</p>",
        "id": 192070110,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585338078
    },
    {
        "content": "<p>Here's a paper; maybe it's useful? <a href=\"https://arxiv.org/pdf/1005.0960v2.pdf\" title=\"https://arxiv.org/pdf/1005.0960v2.pdf\">https://arxiv.org/pdf/1005.0960v2.pdf</a></p>",
        "id": 192071169,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585338699
    },
    {
        "content": "<p>It's a synthetic development, which may or may not be interesting to you...</p>",
        "id": 192071430,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585338821
    },
    {
        "content": "<p>I found it by searching; it was some Harvard student's senior thesis to formalize this in Coq: <a href=\"https://dash.harvard.edu/handle/1/38811518\" title=\"https://dash.harvard.edu/handle/1/38811518\">https://dash.harvard.edu/handle/1/38811518</a></p>",
        "id": 192072050,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585339130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243947\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/113488-general/topic/performance.20Lean.20vs.20Z3/near/192069604\" title=\"#narrow/stream/113488-general/topic/performance.20Lean.20vs.20Z3/near/192069604\">said</a>:</p>\n<blockquote>\n<p>Well, I've completed the natural number game, and would appreciate unrusting my relativity, so if people know how I could start, I would welcome that.</p>\n</blockquote>\n<p>Going from the properties of addition and multiplication of natural numbers to relativity maybe a slightly too big jump....</p>",
        "id": 192072399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585339304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110025\">Andrew Ashworth</span> <a href=\"#narrow/stream/113488-general/topic/performance.20Lean.20vs.20Z3/near/192072050\" title=\"#narrow/stream/113488-general/topic/performance.20Lean.20vs.20Z3/near/192072050\">said</a>:</p>\n<blockquote>\n<p>I found it by searching; it was some Harvard student's senior thesis to formalize this in Coq: <a href=\"https://dash.harvard.edu/handle/1/38811518\" title=\"https://dash.harvard.edu/handle/1/38811518\">https://dash.harvard.edu/handle/1/38811518</a></p>\n</blockquote>\n<p>Hey, this includes the Coq code he used. Maybe transcribing it into Lean is just manageable. Would you happen to know a similar effort in Coq to prove the Hamiltonian or Lagrangian formalisms?</p>",
        "id": 192074903,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585340588
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> what's the big difference between the performance of proof vs tactic mode in Lean? Does a succesful tactic proof get compiled down to a term proof?</p>",
        "id": 192076224,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585341358
    },
    {
        "content": "<p>Yes, you can use <code>#print</code> to see the resulting term</p>",
        "id": 192077346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585341910
    },
    {
        "content": "<p>Tactic mode is usually slower than term mode, as tactics have to construct the term. You may be surprised to find that it's not always slower, because term mode also has automation behind it, namely elaboration, and this can also be significantly expensive in some cases.</p>",
        "id": 192077491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585341990
    },
    {
        "content": "<p>However you have to ask yourself if the speed gain is worth it. Don't get caught in the micro-optimization trap</p>",
        "id": 192077615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585342058
    },
    {
        "content": "<p>(says the guy who decided to write his own theorem prover because lean was too slow)</p>",
        "id": 192077715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585342105
    },
    {
        "content": "<p>Ha, thanks Mario! You would know if anyone has reimplemented the Lean kernel in Rust right?</p>",
        "id": 192080938,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585343459
    },
    {
        "content": "<p>I don't think anybody has done that</p>",
        "id": 192081082,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585343528
    },
    {
        "content": "<p>Step 1: be familiar with the calculus of inductive constructions. Step 2: be familiar with the implementation of functional programming language compilers. Step 3: draw the owl in Rust</p>",
        "id": 192081316,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585343660
    },
    {
        "content": "<p>Actually it has been done, see <a href=\"https://github.com/ammkrn/nanoda_lib\" title=\"https://github.com/ammkrn/nanoda_lib\">nanoda</a></p>",
        "id": 192081475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585343761
    },
    {
        "content": "<p>But you never know. Somebody here a few weeks ago wanted to implement the Lean kernel on an FPGA</p>",
        "id": 192081517,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585343765
    },
    {
        "content": "<p>is that the kernel or just a type-checker?</p>",
        "id": 192081565,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585343794
    },
    {
        "content": "<p>what's the difference?</p>",
        "id": 192081574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585343802
    },
    {
        "content": "<p>Does elaboration, unification, type-class inference not count as part of the kernel? ¯\\_(ツ)_/¯</p>",
        "id": 192081768,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585343912
    },
    {
        "content": "<p>I would consider none of that part of the kernel</p>",
        "id": 192081817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585343950
    },
    {
        "content": "<p>I suppose you could call it part of the type checker front end</p>",
        "id": 192081881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585343983
    },
    {
        "content": "<p>I guess my definition is wrong. Is there a type-checker for that?</p>",
        "id": 192081888,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585343987
    },
    {
        "content": "<p>To me type checker and kernel are mostly synonymous. There are no implementations of the lean front end other than lean</p>",
        "id": 192081975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585344028
    },
    {
        "content": "<p>(which I consider to be a serious trustworthiness hole)</p>",
        "id": 192082010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585344051
    },
    {
        "content": "<p>but it's hard to do otherwise because lean is so complicated</p>",
        "id": 192082024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585344064
    },
    {
        "content": "<p>the reason lean is slow has little to do with the implementation and everything to do with what it is being asked to do</p>",
        "id": 192082059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585344090
    },
    {
        "content": "<p>If you ever try tracing anything you will realize that lean is doing a phenomenal amount of work</p>",
        "id": 192082122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585344122
    },
    {
        "content": "<p>For typeclass inference in particular I am amazed that lean is able to perform as well as it does considering how much it has to churn through</p>",
        "id": 192082267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585344217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110025\">Andrew Ashworth</span> <a href=\"#narrow/stream/113488-general/topic/performance.20Lean.20vs.20Z3/near/192071430\" title=\"#narrow/stream/113488-general/topic/performance.20Lean.20vs.20Z3/near/192071430\">said</a>:</p>\n<blockquote>\n<p>It's a synthetic development, which may or may not be interesting to you...</p>\n</blockquote>\n<p>Sorry, what does synthetic mean here?</p>",
        "id": 192085187,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585346224
    },
    {
        "content": "<p>It means that the treatment is syntactic, using axioms for basic rules about relativity etc. rather than defining things as you would in regular mathematics, using e.g. functions on an infinite dimensional complex vector space</p>",
        "id": 192085604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585346493
    },
    {
        "content": "<p>wait, I got confused whether we are talking about general relativity or quantum mechanics. Well, the point is the same</p>",
        "id": 192085754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585346568
    },
    {
        "content": "<p>Ah, works for me! Thanks Mario.</p>",
        "id": 192085952,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585346710
    },
    {
        "content": "<p>You'd better not do both in Lean because they contradict each other, right?</p>",
        "id": 192085984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585346730
    },
    {
        "content": "<p>No, the relation is akin to models of a formal theory</p>",
        "id": 192086021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585346755
    },
    {
        "content": "<p>I guess that would be more of a reason to try and formalize it - see what breaks up.</p>",
        "id": 192086077,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585346768
    },
    {
        "content": "<p>you should be able to prove that the \"semantic\" version is an instance of the axioms of the \"syntactic\" version</p>",
        "id": 192086093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585346784
    },
    {
        "content": "<p>You only get into trouble if you start making ontological claims like \"nothing exists except for points that are described by the syntactic theory\" therefore your models are necessarily countable</p>",
        "id": 192086201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585346869
    },
    {
        "content": "<p>So in some respects, the syntactic / synthetic approach is more general, but the semantic approach has the advantage that you can prove facts by reference to the model itself, there is no constraint on how you conduct a proof</p>",
        "id": 192086438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585347021
    },
    {
        "content": "<p>I think Kevin meant \"general relativity and quantum mechanics contradict each other\", not \"synthetic vs semantic\".</p>",
        "id": 192118646,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585394987
    },
    {
        "content": "<p>Ah, I missed that. Although it would be pretty tricky to actually derive a contradiction since they are so incompatible</p>",
        "id": 192118792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585395240
    },
    {
        "content": "<p>it would be like proving that the unit circle is disjoint from a lemon</p>",
        "id": 192118876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585395343
    },
    {
        "content": "<blockquote>\n<p>it would be like proving that the unit circle is disjoint from a lemon</p>\n</blockquote>\n<p>I saw this message popping up as an out of context desktop notification, it was pretty weird (and I didn't guess it was answering one of my messages).</p>",
        "id": 192119144,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585395832
    },
    {
        "content": "<p>I think that's undecidable in Lean</p>",
        "id": 192120010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585397206
    }
]