[
    {
        "content": "<p>I really need to sleep, so let me offer relaxing exercises again.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">supr_split</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊔</span> <span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">sorry</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">supr_split_single</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₀</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i₀</span> <span class=\"err\">⊔</span> <span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">i₀</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 202038643,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593128813
    },
    {
        "content": "<p>What I actually need is the second one, but I guess the first one is natural too.</p>",
        "id": 202038663,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593128849
    },
    {
        "content": "<p>EDIT: got rid of the <code>finish</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">supr_split</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊔</span> <span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">supr_union</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">},</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">supr_split_single</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₀</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i₀</span> <span class=\"err\">⊔</span> <span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">i₀</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">supr_split</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i₀</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202040546,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593130481
    },
    {
        "content": "<p>it seems like the current state of this \"intern\" social technology is \"make a new topic in #general or #maths with the <code>sorry</code>, somebody may come along and fill it for you\"</p>",
        "id": 202041017,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593130915
    },
    {
        "content": "<p>I think it's probably underused</p>",
        "id": 202041154,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593131025
    },
    {
        "content": "<p>Patrick, you should delegate whatever sorries you can; I'm happy to trade my time for yours on proof-generation (even if the proof is harder for me, say up to a 3x ratio) because I want to help clear the things that are stopping you from putting out more of a sphere-eversion roadmap. (and probably some others agree, or will find your sorries interesting enough to work on anyway)</p>",
        "id": 202041350,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593131181
    },
    {
        "content": "<p>you can get <code>supr_split_single</code> with <code>by convert supr_split _ _; simp</code></p>",
        "id": 202042274,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1593132154
    },
    {
        "content": "<p>I wonder if we should have a separate \"help me with this sorry\" stream, specifically for people with PR experience to post in (i.e. not for newbies / learners)</p>",
        "id": 202050367,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593143692
    },
    {
        "content": "<p>is there a way to do that without being too elitist? :-)</p>",
        "id": 202050373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593143702
    },
    {
        "content": "<p>I think its fine to just use \"general\" and \"maths\" for that</p>",
        "id": 202050446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593143820
    },
    {
        "content": "<p>But if it is decided to start a new stream, may I suggest calling it <code>sorry (not sorry)</code> ? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 202050459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593143867
    },
    {
        "content": "<p>Thank you very much Jalex. I'm always ashamed when I do that. Note that the two instances were very different. The first one was really a question about automation. I don't think proof assistant have any future if they can't do that kind of work automatically. Unfortunately I messed up the statement because I type \\cap when I meant \\cup (a decent proof assistant should have raised a warning as the statement was false because of this typo). The second instance if because it was almost 2am and I wanted to finish this proof.</p>",
        "id": 202062199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593158630
    },
    {
        "content": "<p>Yesterday I tried to work late at night because it was too hot all day, but my brain is definitely better at 10am:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">supr_split</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊔</span> <span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"bp\">@</span><span class=\"n\">supr_union</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 202062945,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593159205
    }
]