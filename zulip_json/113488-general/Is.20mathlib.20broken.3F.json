[
    {
        "content": "<p>I do not expect mathlib to be working 24/7 but I am wondering if it currently broken for everyone or just me. I have problems in prod.lean with <code>prod.mk.eta</code> on line 21 -- <code>invalid definition, a declaration named 'prod.mk.eta' has already been declared</code></p>",
        "id": 123292498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520239134
    },
    {
        "content": "<p>The reason I ask is that I have a file which reaches unreachable code</p>",
        "id": 123292504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520239147
    },
    {
        "content": "<p>and it probably it would be better if this were the only error rather than all the sorrys which currently come with it</p>",
        "id": 123292507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520239172
    },
    {
        "content": "<p>which may or may not be part of the problem</p>",
        "id": 123292510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520239198
    },
    {
        "content": "<p>current version is here : <a href=\"https://gist.github.com/kbuzzard/50a650e6df7e712138456facb5a81f22\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/50a650e6df7e712138456facb5a81f22\">https://gist.github.com/kbuzzard/50a650e6df7e712138456facb5a81f22</a> but I also have 4 sorrys from mathlib so I'll try to remove mathlib</p>",
        "id": 123292573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520239309
    },
    {
        "content": "<p>Broken for me as well.</p>",
        "id": 123292628,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520239403
    },
    {
        "content": "<p>It should work again.</p>",
        "id": 123305123,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1520263730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"sebasti@nullri.ch\" data-user-id=\"110024\">@Sebastian Ullrich</span> the generalization of the <code>do</code>-notation resulted in the following work around:  <a href=\"https://github.com/leanprover/mathlib/commit/ec9dac3ada9aa2107d5f3fceb3d28eee113278b8#diff-d49a7b7cdfea7e016e137ab7be5dc597L65\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/ec9dac3ada9aa2107d5f3fceb3d28eee113278b8#diff-d49a7b7cdfea7e016e137ab7be5dc597L65\">https://github.com/leanprover/mathlib/commit/ec9dac3ada9aa2107d5f3fceb3d28eee113278b8#diff-d49a7b7cdfea7e016e137ab7be5dc597L65</a><br>\nI don't know what exactly is happening, it claims to expect a <code>name</code>, but gets a <code>tactic _</code>. Is there a way to see what overloaded <code>bind</code> is used in the error message? <code>pp.full_names</code> etc didn't work for me.</p>",
        "id": 123305506,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1520264227
    },
    {
        "content": "<p>Urgh, pretty sure it's trying to do a recursive call</p>",
        "id": 123305570,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520264328
    },
    {
        "content": "<p>Could you post the error?</p>",
        "id": 123305576,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520264346
    },
    {
        "content": "<p>Ah yes, looks like this (now I also added <code>pp.locals_full_name</code>:</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  &lt;bind.0._fresh.31.20685&gt; (&lt;c₁.0._fresh.31.20672&gt; &lt;r.0._fresh.31.20695&gt; &lt;e.0._fresh.31.20699&gt;)\nterm\n  &lt;c₁.0._fresh.31.20672&gt; &lt;r.0._fresh.31.20695&gt; &lt;e.0._fresh.31.20699&gt;\nhas type\n  tactic (old_conv_result &lt;α.0._fresh.31.20670&gt;)\nbut is expected to have type\n  name\n</pre></div>",
        "id": 123305709,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1520264527
    },
    {
        "content": "<p>Would it make sense to force the namespace of <code>bind</code>, like the <code>begin [m]</code> notation does? But it gets a ambiguous with <code>do [c] &lt;- l, ...</code></p>",
        "id": 123305785,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1520264665
    },
    {
        "content": "<p>The real issue is that the local for recursive calls ignores the <code>protected</code> specifier, imo</p>",
        "id": 123305831,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520264745
    },
    {
        "content": "<p>Or this!</p>",
        "id": 123305899,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1520264834
    }
]