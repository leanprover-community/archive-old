[
    {
        "content": "<p>With the current definitions, a morphism <code>f : V ⟶ W</code> where <code>V W : FinVect K</code> is a linear map from <code>V.val</code> to <code>W.val</code>. On the other hand, it is difficult to work with the module <code>V.val</code> because <code>finite_dimensional K V.val</code> is currently not found by <code>apply_instance</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/FinVect.finite_dimensional\">docs#FinVect.finite_dimensional</a> only give us an instance of <code>finite_dimensional K V</code>). <br>\nHence if I want to work with <code>FinVect</code> I have two options: either I add an instance <code>finite_dimensional K V.val</code> and work with linear maps between things of type <code>Module K</code>, or I add something like <code>FinVect.to_linear_map (f : V ⟶ W) : V →ₗ[K] W</code> and work with linear maps between things of type <code>FinVect K</code>.<br>\nI would appreciate any thoughts on this, which option should be preferred and why?</p>",
        "id": 283828520,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653444402
    },
    {
        "content": "<p>Can you give a concrete example where you run into an issue?</p>",
        "id": 283831303,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653447153
    },
    {
        "content": "<p>I wonder if we could use a custom structure for <code>FinVect</code> instead of <code>subtype</code>, to avoid these pesky <code>.val</code>s.</p>",
        "id": 283837165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653454371
    },
    {
        "content": "<p>But yes, a concrete example of this problem would be great.</p>",
        "id": 283837168,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653454380
    },
    {
        "content": "<p>Here's the concrete example that led me this issue.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">representation_theory.fdRep</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.trace</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">fdRep</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">character</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.trace</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">V.ρ</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">char_tensor</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">⊗</span> <span class=\"n\">W</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">character</span> <span class=\"bp\">=</span> <span class=\"n\">V.character</span> <span class=\"bp\">*</span> <span class=\"n\">W.character</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">linear_map.trace_tensor_product'</span> <span class=\"o\">(</span><span class=\"n\">V.ρ</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W.ρ</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"c1\">--fails because `module.finite k V.V.val` instance missing</span>\n</code></pre></div>\n<p>With this definition the character is the trace of <code>V.ρ g</code> which is a linear map from <code>V.V.val</code> to itself, and I can't prove anything about this since <code>V.V.val</code> doesn't have a <code>finite_dimensional</code> instance.</p>",
        "id": 283880471,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653484417
    },
    {
        "content": "<p>So either I add that instance or I define it as a linear map from <code>V.V</code> to itself.</p>",
        "id": 283880581,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653484467
    },
    {
        "content": "<p>I think Scott's proposition makes sense too</p>",
        "id": 283880816,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653484586
    },
    {
        "content": "<p>Your code is not working for me</p>",
        "id": 283881535,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653484940
    },
    {
        "content": "<p>What is failing?</p>",
        "id": 283881561,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653484958
    },
    {
        "content": "<p>Oh, just a namespace missing and a noncomputable flag.</p>",
        "id": 283881635,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653485013
    },
    {
        "content": "<p>it's okay I added them on my end</p>",
        "id": 283881658,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653485023
    },
    {
        "content": "<p>Just add the line <code>def ρ (V : fdRep k G) : G →* (V →ₗ[k] V) := V.ρ</code> in <code>fdRep.lean</code>.</p>",
        "id": 283882543,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653485456
    },
    {
        "content": "<p>Probably just before the example on line 53.</p>",
        "id": 283882575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653485471
    },
    {
        "content": "<p>This will fix your problem, and is a good idea anyway. It just provides a synonym for <code>Action.ρ</code> but which uses the coercion rather than going via <code>subtype.val</code>.</p>",
        "id": 283882648,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653485509
    },
    {
        "content": "<p>HEre's some code to illustrate the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">representation_theory.fdRep</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.trace</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">@[derive [large_category, λ α, has_coe_to_sort α (Sort*)]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">FinVect'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">FinVect'</span>\n<span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">FinVect'</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">V.prop</span>\n<span class=\"kd\">end</span> <span class=\"n\">FinVect'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">FinVect'</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">⟶</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.trace_tensor_product'</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>  <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[derive [λ α, has_coe_to_sort α (Sort*)]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">FinVect''</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">FinVect''</span>\n<span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">FinVect''</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">V.prop</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">FinVect''</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">linear_map.id</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">id_comp'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_id'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">FinVect''</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">FinVect''</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">⟶</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.trace_tensor_product'</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 283882915,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653485614
    },
    {
        "content": "<p>Yeah, so it seems that the issue is precisely because the coercion to sort is not used to define the morphisms in the category structure.</p>",
        "id": 283883027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653485664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, I think in your last example you need to delete the <code>-- fails</code>!</p>",
        "id": 283883121,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653485715
    },
    {
        "content": "<p>Ok thanks, I think that would solve my issue. But there's still a general issue with FinVect, right?</p>",
        "id": 283883886,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653486068
    },
    {
        "content": "<p>Also I think that might introduce another issue: I want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Action.iso.conj\">docs#Action.iso.conj</a>_ρ to prove that isomorphic objects of <code>fdRep</code> have the same character, but I don't think it works on the new definition of <code>ρ</code>. I'm not sure though.</p>",
        "id": 283884655,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1653486429
    },
    {
        "content": "<p>I don't know if this is necessarily an issue with <code>FinVect</code>. It's a fairly common issue we have (not just with <code>FinVect</code>) that it can be annoying to go back and forth between the unbundled world of typeclasses and the bundled world of category theory. We could fix small issues here and there, but it's a more pervasive problem that should be given more serious thought.</p>",
        "id": 283884901,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653486533
    }
]