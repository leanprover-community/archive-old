[
    {
        "content": "<p>I tried replacing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Lp.simple_func.module\">docs#Lp.simple_func.module</a> with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"bp\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">Lp.simple_func</span> <span class=\"n\">E</span> <span class=\"n\">p</span> <span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">function.injective.module</span> <span class=\"bp\">ùïú</span>\n  <span class=\"o\">((</span><span class=\"n\">Lp.simple_func</span> <span class=\"n\">E</span> <span class=\"n\">p</span> <span class=\"n\">Œº</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"o\">:</span> <span class=\"n\">Lp.simple_func</span> <span class=\"n\">E</span> <span class=\"n\">p</span> <span class=\"n\">Œº</span> <span class=\"bp\">‚Üí+</span> <span class=\"n\">Lp</span> <span class=\"n\">E</span> <span class=\"n\">p</span> <span class=\"n\">Œº</span><span class=\"o\">)</span>\n  <span class=\"n\">subtype.coe_injective</span>\n  <span class=\"n\">coe_smul</span>\n</code></pre></div>\n<p>and got an error message I've never seen before:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deep</span> <span class=\"n\">recursion</span> <span class=\"n\">was</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">live</span> <span class=\"kd\">variable</span> <span class=\"n\">analysis'</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">stack</span> <span class=\"n\">space</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">system</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there any way to help lean out here short of just not using <code>function.injective.module</code>?</p>",
        "id": 272993298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645641578
    },
    {
        "content": "<p>I suspect the reason is that <code>Lp.simple_func</code> is a very complicated type since it's a subgroup of a subgroup.</p>",
        "id": 273069430,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645697455
    },
    {
        "content": "<p>Mathematicians would laugh at the idea that such a notion is \"very complicated\" :-(</p>",
        "id": 273084322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645707049
    }
]