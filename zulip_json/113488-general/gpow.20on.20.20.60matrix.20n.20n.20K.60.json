[
    {
        "content": "<p>Thanks to <code>linear_algebra.matrix.nonsingular_inverse</code>, we have a <code>has_inv (matrix n n K)</code>. However, that does not provide a <code>has_pow (matrix n n K) int</code>. What is the right way to provide that? Directly? What's the correct algebraic structure to give here?</p>",
        "id": 246042721,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626313574
    },
    {
        "content": "<p>I think that instance requires a group</p>",
        "id": 246043722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626314542
    },
    {
        "content": "<p>There's also fpow instead of gpow which requires a group_with_zero</p>",
        "id": 246043742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626314567
    },
    {
        "content": "<p>You can define it by casing on the int, and for things that are truly invertible, <code>(units.coe_hom _).map_pow</code> will work on the two cases. But it <code>monoid_hom.map_gpow</code> won't work, of course, due to the restriction to groups...</p>",
        "id": 246043930,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626314734
    },
    {
        "content": "<p>Can one give <code>matrix n n K</code> <code>group_with_zero</code> then?</p>",
        "id": 246044025,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626314797
    },
    {
        "content": "<p>Only when n=unit</p>",
        "id": 246044143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626314915
    },
    {
        "content": "<p>There are non-invertible non-zero matrices</p>",
        "id": 246044178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626314963
    },
    {
        "content": "<p>I see -- the issue is evident below</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.nonsingular_inverse</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">div_inv_monoid</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">matrix.has_inv</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">matrix.inv_def</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">nonsing_inv</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">matrix.nonsing_inv_of_not_is_unit</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">M</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_unit_iff_is_unit_det</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.inv_def</span><span class=\"o\">,</span> <span class=\"n\">nonsing_inv</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">matrix.inv_zero</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">matrix.nonsing_inv_of_not_is_unit</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group_with_zero</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">matrix.zero_mul</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">matrix.mul_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.inv_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"n\">hM</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- if `¬ is_unit M` then `0 = 1`</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">div_inv_monoid</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246045206,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626316038
    },
    {
        "content": "<p>Square matrices over a semiring are a monoid with zero</p>",
        "id": 246054623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626328387
    },
    {
        "content": "<p>You can try to generalize the <code>gpow</code> instance to a <code>monoid</code>+<code>has_inv</code> but it won't have many nice properties.</p>",
        "id": 246057370,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1626331554
    },
    {
        "content": "<p>So, it might be better to copy definition from <code>fpow</code> or <code>gpow</code>, then prove lemmas that are true for matrices (or operators).</p>",
        "id": 246057446,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1626331604
    },
    {
        "content": "<p>Square matrices over a field shouldn't really have an <code>inv</code>, because of matrices like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">(</mo><mtable rowspacing=\"0.1600em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>01</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>00</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\begin{pmatrix}01\\\\00\\end{pmatrix}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">01</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">00</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span></span></span></span>.</p>",
        "id": 246057673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626331848
    },
    {
        "content": "<p>My proposal was to define <code>has_inv</code> as (some choice of) pseudoinverse, which would give sensible results for a few more matrices. But that might actually have less nice properties than the nonsingular inverse.</p>",
        "id": 246058286,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626332449
    },
    {
        "content": "<p>Are there any lemmas about monoid_with_zero that are worth having for matrices? I can do the specialized  fpow approach for matrices.</p>",
        "id": 246088397,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626353299
    },
    {
        "content": "<p>I assume you mean <code>group_with_zero</code>, <code>monoid_with_zero</code> is already true for matrices</p>",
        "id": 246088450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626353344
    },
    {
        "content": "<p>Sorry, I was trying to parse Kevin's statement</p>",
        "id": 246088607,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626353448
    },
    {
        "content": "<p>\"Monoids with zero shouldn't have an inv\"</p>",
        "id": 246100700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626358783
    }
]