[
    {
        "content": "<p>since they do not have a size</p>",
        "id": 124502927,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522620434
    },
    {
        "content": "<p>hmm i'm trying to prove a lemma and i'm pretty sure that my proof strategy is sound... but the equation compiler isn't convinced...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">triple_t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">cost</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">reachable</span> <span class=\"o\">:</span> <span class=\"n\">triple_t</span> <span class=\"bp\">→</span> <span class=\"n\">triple_t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">triple_t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reachable</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">increment_a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">cost</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reachable</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cost</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cost</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">increment_b</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">cost</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reachable</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cost</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cost</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">increment_c</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">cost</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reachable</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cost</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">cost</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">triple_t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reachable</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">reachable</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">reachable</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real_meaning_of_reachable</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a1</span> <span class=\"n\">b1</span> <span class=\"n\">c1</span> <span class=\"n\">cost</span> <span class=\"n\">cost1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">reachable</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cost</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">c1</span><span class=\"o\">,</span> <span class=\"n\">cost1</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a1</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b1</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c1</span> <span class=\"bp\">∧</span> <span class=\"n\">cost</span> <span class=\"bp\">≤</span> <span class=\"n\">cost1</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cost1</span> <span class=\"bp\">-</span> <span class=\"n\">cost</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a1</span> <span class=\"n\">b1</span> <span class=\"n\">c1</span> <span class=\"n\">cost</span> <span class=\"n\">cost1</span> <span class=\"o\">(</span><span class=\"n\">reachable.refl</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a1</span> <span class=\"n\">b1</span> <span class=\"n\">c1</span> <span class=\"n\">cost</span> <span class=\"n\">cost1</span> <span class=\"o\">(</span><span class=\"n\">reachable.increment_a</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span> <span class=\"n\">cost'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a1</span> <span class=\"n\">b1</span> <span class=\"n\">c1</span> <span class=\"n\">cost</span> <span class=\"n\">cost1</span> <span class=\"o\">(</span><span class=\"n\">reachable.increment_b</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span> <span class=\"n\">cost'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a1</span> <span class=\"n\">b1</span> <span class=\"n\">c1</span> <span class=\"n\">cost</span> <span class=\"n\">cost1</span> <span class=\"o\">(</span><span class=\"n\">reachable.increment_c</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span> <span class=\"n\">cost'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a1</span> <span class=\"n\">b1</span> <span class=\"n\">c1</span> <span class=\"n\">cost</span> <span class=\"n\">cost1</span> <span class=\"o\">(</span><span class=\"n\">reachable.trans</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"n\">cost'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a''</span><span class=\"o\">,</span> <span class=\"n\">b''</span><span class=\"o\">,</span> <span class=\"n\">c''</span><span class=\"o\">,</span> <span class=\"n\">cost''</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a'''</span><span class=\"o\">,</span> <span class=\"n\">b'''</span><span class=\"o\">,</span> <span class=\"n\">c'''</span><span class=\"o\">,</span> <span class=\"n\">cost'''</span><span class=\"o\">⟩</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"c1\">-- failed to prove recursive application is decreasing, well founded relation</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">real_meaning_of_reachable</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">real_meaning_of_reachable</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a'''</span> <span class=\"bp\">-</span> <span class=\"n\">a'</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b'''</span> <span class=\"bp\">-</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c'''</span> <span class=\"bp\">-</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cost'''</span> <span class=\"bp\">-</span> <span class=\"n\">cost'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>how can i resolve this?</p>",
        "id": 246561974,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1626772836
    },
    {
        "content": "<p>Did you try using <code>induction</code> instead of the equation compiler? That is more reliable for structural inductive proofs over predicates</p>",
        "id": 246567575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626776977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">real_meaning_of_reachable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a1</span> <span class=\"n\">b1</span> <span class=\"n\">c1</span> <span class=\"n\">cost</span> <span class=\"n\">cost1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">reachable</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cost</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">c1</span><span class=\"o\">,</span> <span class=\"n\">cost1</span><span class=\"o\">⟩)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a1</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b1</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c1</span> <span class=\"bp\">∧</span> <span class=\"n\">cost</span> <span class=\"bp\">≤</span> <span class=\"n\">cost1</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cost1</span> <span class=\"bp\">-</span> <span class=\"n\">cost</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">generalize_hyp</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cost</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">triple_t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e₁</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize_hyp</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">c1</span><span class=\"o\">,</span> <span class=\"n\">cost1</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">triple_t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e₂</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">succ_sub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n.succ</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_sub</span><span class=\"o\">],</span>\n  <span class=\"n\">induction</span> <span class=\"n\">H</span> <span class=\"n\">generalizing</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">cost</span> <span class=\"n\">a1</span> <span class=\"n\">b1</span> <span class=\"n\">c1</span> <span class=\"n\">cost1</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">a2</span> <span class=\"n\">b2</span> <span class=\"n\">c2</span> <span class=\"n\">cost2</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">aa₁</span><span class=\"o\">,</span> <span class=\"n\">bb₁</span><span class=\"o\">,</span> <span class=\"n\">cc₁</span><span class=\"o\">,</span> <span class=\"n\">oo₁</span><span class=\"o\">,</span> <span class=\"n\">ih₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ih₁</span> <span class=\"n\">h₁</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">aa₂</span><span class=\"o\">,</span> <span class=\"n\">bb₂</span><span class=\"o\">,</span> <span class=\"n\">cc₂</span><span class=\"o\">,</span> <span class=\"n\">oo₂</span><span class=\"o\">,</span> <span class=\"n\">ih₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ih₂</span> <span class=\"n\">rfl</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">aa₁.trans</span> <span class=\"n\">aa₂</span><span class=\"o\">,</span> <span class=\"n\">bb₁.trans</span> <span class=\"n\">bb₂</span><span class=\"o\">,</span> <span class=\"n\">cc₁.trans</span> <span class=\"n\">cc₂</span><span class=\"o\">,</span> <span class=\"n\">oo₁.trans</span> <span class=\"n\">oo₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">nat.sub_add_sub_cancel</span> <span class=\"n\">aa₂</span> <span class=\"n\">aa₁</span><span class=\"o\">,</span> <span class=\"n\">nat.sub_add_sub_cancel</span> <span class=\"n\">bb₂</span> <span class=\"n\">bb₁</span><span class=\"o\">,</span>\n      <span class=\"n\">nat.sub_add_sub_cancel</span> <span class=\"n\">cc₂</span> <span class=\"n\">cc₁</span><span class=\"o\">,</span> <span class=\"n\">nat.sub_add_sub_cancel</span> <span class=\"n\">oo₂</span> <span class=\"n\">oo₁</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.le_succ</span><span class=\"o\">,</span> <span class=\"n\">succ_sub</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246580568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626786203
    }
]