[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">tree.node</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span>\n<span class=\"k\">with</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.node</span> <span class=\"n\">children</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">children</span>\n<span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">xs</span>\n<span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>results in <code>failed to prove recursive application is decreasing, well founded relation</code>.</p>\n<p>But that's weird, since for this particular program, it's really no different from:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">tree.node</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span>\n<span class=\"k\">with</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.node</span> <span class=\"n\">children</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">children</span>\n<span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>which works.</p>\n<p>Just like <a href=\"#narrow/stream/113489-new-members/topic/Mutual.20recursion.2Finduction\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Mutual.20recursion.2Finduction</a>, I'm not sure how to use <code>using_well_founded</code>, and the workaround in that thread doesn't seem applicable for my case.</p>",
        "id": 215578029,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604495733
    },
    {
        "content": "<p>Just to check I read that correctly, <code>h</code> does not take part in the recursion at all?</p>",
        "id": 215578536,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604495998
    },
    {
        "content": "<p>This is a reduced example where <code>h</code> does not take part in the recursion at all, yes.</p>\n<p>Though in my original program, <code>h</code> does take part in the recursion.</p>",
        "id": 215579319,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604496385
    },
    {
        "content": "<p>Yes, this does look weird. Would you mind filing a bug report at <a href=\"https://github.com/leanprover-community/lean/issues\">https://github.com/leanprover-community/lean/issues</a> with this information?</p>",
        "id": 215590386,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604501351
    },
    {
        "content": "<p>I guess it's possible that adding <code>h</code> to the recursion disrupts whatever metric it's trying to use to prove that the translated version is well-founded</p>",
        "id": 215591134,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604501710
    },
    {
        "content": "<p>This is expected. The rule that lean uses is that <em>every</em> function must call mutual functions at \"smaller\" arguments</p>",
        "id": 215595464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604503358
    },
    {
        "content": "<p>actually I misread the example, I thought you had something like <code>h x := f x</code></p>",
        "id": 215595721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604503459
    },
    {
        "content": "<p>But there are no function calls to or from <code>h</code></p>",
        "id": 215595724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604503460
    },
    {
        "content": "<p>yes, I misread the same way at first too</p>",
        "id": 215595746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604503470
    },
    {
        "content": "<p>The mwe works for me</p>",
        "id": 215595760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604503476
    },
    {
        "content": "<p>The top one?</p>",
        "id": 215597224,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604503986
    },
    {
        "content": "<p>yes</p>",
        "id": 215597257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604503996
    },
    {
        "content": "<p>interesting, it fails for me</p>",
        "id": 215597322,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604504019
    },
    {
        "content": "<p>lean.version = 3.23.0</p>",
        "id": 215597362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604504033
    },
    {
        "content": "<p>just updated to latest master, still works</p>",
        "id": 215597562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604504094
    },
    {
        "content": "<p>I'm on 3.21.0 so that could be the reason</p>",
        "id": 215597647,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604504120
    },
    {
        "content": "<p>oh wait, no I'm just blind</p>",
        "id": 215597724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604504145
    },
    {
        "content": "<p>missed the squiggle on g</p>",
        "id": 215597777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604504162
    },
    {
        "content": "<p>If I replace the dec tac with <code>assumption</code> I can see the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">has_well_founded.r</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"n\">children</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">(</span><span class=\"n\">tree.node</span> <span class=\"n\">children</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The issue is that we  have two constructors on each side, so they each add two and you get essentially <code>n + 2 &lt; n + 2</code></p>",
        "id": 215598174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604504289
    },
    {
        "content": "<p>This kind of sucks because it means that it is \"more expensive\" to call functions with large index in the list</p>",
        "id": 215598364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604504360
    },
    {
        "content": "<p>oh I see!</p>",
        "id": 215598539,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604504420
    },
    {
        "content": "<p>and there isn't a problem with only two functions because the base case is <code>inl</code> and <code>inr</code></p>",
        "id": 215598620,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604504454
    },
    {
        "content": "<p>This compilation strategy has always been pretty dubious to me, but one way I could see us fixing it is to have the sizeof metric be <code>sum.elim sizeof (sum.elim sizeof sizeof)</code> instead of just <code>sizeof</code></p>",
        "id": 215598688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604504487
    },
    {
        "content": "<p>I guess another way to make it more predictable would be to use a fresh inductive type with one constructor per recursive function</p>",
        "id": 215598995,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604504605
    },
    {
        "content": "<p>but that might be awkward</p>",
        "id": 215599017,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604504615
    },
    {
        "content": "<p>If we did that, we could skip the <code>sizeof</code> crap altogether</p>",
        "id": 215599050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604504624
    },
    {
        "content": "<p>in particular, it would allow for mutual structural recursion</p>",
        "id": 215599129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604504645
    },
    {
        "content": "<p>currently, everything has to have order type nat, which is less powerful than inductive types</p>",
        "id": 215599209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604504683
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/496\">lean#496</a> implements the easy fix using <code>sum.elim sizeof (sum.elim sizeof sizeof)</code></p>",
        "id": 215624932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604515810
    }
]