[
    {
        "content": "<p>Lean has a transitive closure but I want a reflexive-transitive one. So I wrote the following definition:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">D</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">rtc</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">D</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rtc</span> <span class=\"n\">s</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">u</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">rtc</span> <span class=\"n\">u</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">rtc</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n</pre></div>\n\n\n<p>I was happy that without knowing much Lean upfront, I was able to prove a simple theorem.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">rtc_trans</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">u</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">),</span> <span class=\"n\">rtc</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">rtc</span> <span class=\"n\">R</span> <span class=\"n\">u</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">rtc</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">u</span> <span class=\"n\">t</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">H2</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">rtc</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">H1_a</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">H1_ih</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">H2</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The proof utilizes <code>rtc.drec</code>. Which is fine. But it would be very illustrative to carry out the same proof via a recursive definition. This, however, requires a <code>match</code>, and I was not able to destructure <code>rtc R s t</code> in any way:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">hmm</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">rtc</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">H</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rtc</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rtc</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">R</span> <span class=\"n\">u</span> <span class=\"bp\">_</span> <span class=\"n\">su</span> <span class=\"n\">ut</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n</pre></div>\n\n\n<p>This fails to typecheck because <code>rtc.refl _ _</code> gets the type <code>rtc R _x _x</code>, which does not unify with <code>rtc R s t</code>. While the error message sounds reasonable, it sounds weird that there is an inductive type that cannot be <code>match</code>ed on. Is there any way around that?</p>",
        "id": 127960102,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528818472
    },
    {
        "content": "<p>put the hypothesis after the colon and use the equation compiler instead of <code>match</code></p>",
        "id": 127960356,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528818760
    },
    {
        "content": "<p>put everything after the colon</p>",
        "id": 127960364,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528818775
    },
    {
        "content": "<p>In mahlib we have the reflexive transitive closure: <a href=\"https://github.com/leanprover/mathlib/blob/master/logic/relation.lean#L61\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/logic/relation.lean#L61\">https://github.com/leanprover/mathlib/blob/master/logic/relation.lean#L61</a></p>",
        "id": 127960374,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1528818794
    },
    {
        "content": "<p><code>match</code> can do cases on <code>rtc</code> but you need to give it the allowance, e.g. one of <code>s</code> and <code>t</code> in <code>rtc s t</code> should be a variable, and you need to pass this variable into <code>match</code> so that it can change it, a.l.a <code>match s, h : rtc s t where _, rtc.refl _ := ... end</code></p>",
        "id": 127960479,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1528818952
    },
    {
        "content": "<p>Thanks... I know nothing about the equation compiler and I am still struggling with dependent match but at least fixing one side of the rtc to a variable makes sense to me. I am trying to encode a system that has both unfolding rules --- one that unfolds the first step of the path, and one that unfolds the last step. I will probably define those as two inductive Props and prove their equivalence.</p>\n<p>What is the meaning of the <code>refl</code> constructor having an empty implicit parameter list <code>{}</code>?</p>",
        "id": 127977723,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528842190
    },
    {
        "content": "<p>it is an instruction to lean to infer the implicit argument from the return type</p>",
        "id": 127977878,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528842423
    },
    {
        "content": "<p>consider </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">sum</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">sum</span>\n</pre></div>",
        "id": 127977884,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528842432
    },
    {
        "content": "<p>here the empty implicit parameter list is an annotation to infer the type alpha in <code>inl</code> and beta in <code>inr</code></p>",
        "id": 127977895,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528842468
    },
    {
        "content": "<p>hrm, maybe not the greatest example since the definition goes through without the brackets anyway...</p>",
        "id": 127978043,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528842702
    },
    {
        "content": "<p>ok, if you paste this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">sum&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">sum&#39;</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">sum&#39;</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">sum&#39;</span>\n</pre></div>",
        "id": 127978175,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528842938
    },
    {
        "content": "<p>then you'll see a difference in how lean evaluates the expression</p>",
        "id": 127978178,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528842953
    },
    {
        "content": "<p>Ok, so in fact the <code>{}</code> is for <em>beta</em>  in <code>inl</code> (since alpha is already there).</p>",
        "id": 127978234,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528843015
    },
    {
        "content": "<p>oops, haha</p>",
        "id": 127978248,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528843048
    },
    {
        "content": "<p>yes</p>",
        "id": 127978250,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528843050
    },
    {
        "content": "<p>How does Lean know that alpha has to be implicit, in inl without the <code>{}</code>?</p>",
        "id": 127978257,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528843070
    },
    {
        "content": "<p>Oh silly me, of course the first parameter is of type alpha.</p>",
        "id": 127978303,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528843092
    },
    {
        "content": "<p>Ok, this was immaterial to the discussion of matches, back to struggling with <code>match s, h : rtc R s t</code> then. Can anyone explain that cryptic line above?</p>",
        "id": 127978461,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528843418
    },
    {
        "content": "<p>I didn't manage to put the type annotation <code>H : rtc R s t</code> but the match seemed to work even without it, by virtue of having <code>s</code> available to the equation compiler perhaps?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">hmm</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">rtc</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rtc</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rtc</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n</pre></div>\n\n\n<p>I am a bit perplexed still by the fact that the match branches have type <code>?? -&gt; true</code> rather than just <code>true</code>...</p>",
        "id": 127978796,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528844039
    },
    {
        "content": "<p>if you had to write out the definition by hand using <code>rtc.drec_on</code> or <code>rtc.rec_on</code>, how would you avoid the first argument? (match uses those under the hood iirc, but somebody correct me if I'm mistaken)</p>",
        "id": 127979054,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528844374
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">hmm&#39;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">rtc</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">rtc</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">H</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">true</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127979117,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528844415
    },
    {
        "content": "<p>Yes, it looks like it does — it just clashes somehow with my understanding of Type Theory and CIC (where there is a <code>fix</code> construct).</p>",
        "id": 127979287,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528844751
    },
    {
        "content": "<p>BTW the compiler seems to make quite a monster out of my small match:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ReflexiveTransitiveClosure</span><span class=\"bp\">.</span><span class=\"n\">hmm</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">_</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">),</span> <span class=\"n\">rtc</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">_</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">rtc</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">a</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"n\">rtc</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span> <span class=\"bp\">_</span><span class=\"n\">a_1</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">H_1</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">rtc</span> <span class=\"n\">R</span> <span class=\"n\">t</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_2</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">rtc</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"o\">),</span> <span class=\"n\">id_rhs</span> <span class=\"n\">true</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"n\">H_1</span> <span class=\"bp\">_</span><span class=\"n\">a_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">t_2</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">rtc</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">a</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">u</span> <span class=\"n\">t_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_1</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t_2</span><span class=\"o\">),</span>\n       <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">u</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_2</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"n\">a_1</span> <span class=\"bp\">==</span> <span class=\"n\">rtc</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">u</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">),</span> <span class=\"n\">id_rhs</span> <span class=\"n\">true</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"n\">H_1</span> <span class=\"n\">a_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"n\">a_1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127979411,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528844945
    },
    {
        "content": "<p>i don't know if this is any prettier to you </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">hmm&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">rtc</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">rtc</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">rtc</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">hmm&#39;</span><span class=\"bp\">._</span><span class=\"n\">main</span>\n</pre></div>",
        "id": 127979551,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528845189
    },
    {
        "content": "<p>when I want a definition that unfolds nicely I tend to write it out by hand using the appropriate recursion lemma. If you use the equation compiler as I did above, the main def is somewhat ugly but it generates quite nice ._eqn1, ._eqn2 branches</p>",
        "id": 127979666,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528845394
    },
    {
        "content": "<p>Yes, I ended up doing that myself, eventually. I found <code>hmm'._main</code> but what are <code>._eqn1</code>, <code>._eqn2</code>?</p>\n<p>At any rate, the purpose of this mental exercise was to demonstrate that explicit induction and \"normal\" recursion coincide, so of course I could write it with <code>rec_on</code> but that would miss the point...</p>",
        "id": 127995826,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528877061
    },
    {
        "content": "<p>You can try <code>#print prefix hmm'</code> to see everything starting <code>hmm'.</code></p>",
        "id": 127996308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528878034
    },
    {
        "content": "<p>although in the back of my mind I think there might be an easier way of just seeing the equation lemmas...</p>",
        "id": 127996316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528878054
    },
    {
        "content": "<p>I somehow get <code>no declaration starting with prefix 'hmm''</code>.</p>",
        "id": 128002149,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528887176
    },
    {
        "content": "<p>In lean, type ascriptions have required parentheses, it should be <code>(H : rtc R s t)</code> not <code>H : rtc R s t</code></p>",
        "id": 128002289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1528887389
    },
    {
        "content": "<p>I was convinced I tried that when the original suggestion didn't work... but yeah, parenthesis do the trick! Although, as I said, the definition goes through without the ascription as well.</p>",
        "id": 128002346,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528887489
    },
    {
        "content": "<p>Lean is a bit limited in its ability to do induction on inductive predicates using the equation compiler. I recommend using the <code>induction</code> tactic instead if you have any problems with writing it the way Andrew suggested</p>",
        "id": 128002348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1528887505
    },
    {
        "content": "<p>Yes, I will reiterate: using tactic mode as well as <code>rec_on</code> were pretty smooth. The reason I am in this discussion is that I wanted to demonstrate to my students how induction is just a form of recursion that they know from programming.</p>",
        "id": 128002364,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528887576
    },
    {
        "content": "<p>I usually point at the type of rec_on, remark that it looks a lot like induction, and then use it to define a recursive function and also prove some property about it</p>",
        "id": 128002429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1528887658
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> I assume this is \"the Lean way\" then.</p>",
        "id": 128002441,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528887697
    },
    {
        "content": "<p>In the case of an inductive predicate like <code>rtc</code>, it actually can't be used for recursion, since it has small elimination</p>",
        "id": 128002498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1528887806
    },
    {
        "content": "<p>it can only be used to prove props</p>",
        "id": 128002499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1528887819
    },
    {
        "content": "<p>If you put the inductive type in <code>Type</code> though it could</p>",
        "id": 128002543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1528887847
    },
    {
        "content": "<p>Of course. The analogue that I can refer to is that in Coq I wrote the same proof, once with <code>induction</code>, and once with <code>Fixpoint</code> -- of course, since you destructure the <code>Prop</code> inside the def, the function must return a <code>Prop</code>.</p>",
        "id": 128002564,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528887905
    },
    {
        "content": "<p>I still see that as a form of recursion though, since it's expressed via <code>Fixpoint</code>.</p>",
        "id": 128002573,
        "sender_full_name": "Shachar Itzhaky",
        "timestamp": 1528887934
    }
]