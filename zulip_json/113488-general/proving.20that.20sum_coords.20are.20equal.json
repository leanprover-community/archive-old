[
    {
        "content": "<p>Hey everyone! I have encountered the following problem, which I seem to not be able to solve on my own. Given two affine bases, whose points are a permutation of each other, I want to show that the sum_coords of any point in the space are equal under the basis, where the same vector is taken out from the two <code>basis_of</code> constructed from the affine bases. Here's an MWE :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.euclidean</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.affine_space.basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">V</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_coords_eq</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">affine_basis</span> <span class=\"n\">ι</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S.points</span> <span class=\"bp\">=</span> <span class=\"n\">T.points</span> <span class=\"bp\">∘</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">S.basis_of</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum_coords</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">T.basis_of</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum_coords</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm struggling to find the right generality for this as I'm not sure what kind of equivalence relation for the bases I'd need (or even if that's the right way to proceed).</p>",
        "id": 263439704,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1638453252
    },
    {
        "content": "<p>Note that we've thought about it a bit together and one should be able to state that with <code>basis</code> directly. Something like <code>(b : basis ι ℝ V) (c : basis ι' ℝ V) (e : ι ≃ ι') (hbc : something) : b.sum_coords = c.sum_coords</code>.</p>",
        "id": 263443545,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638454916
    },
    {
        "content": "<p><code>basis.reindex</code> is probably the way to go for two bases related by an equiv of their index types (and then you might need to define <code>affine_basis.reindex</code> and set up API for that as well).</p>",
        "id": 263522379,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1638493245
    },
    {
        "content": "<p>I was on holiday (sans laptop) last week so I might be too late to help. Here goes anyway.</p>",
        "id": 263835348,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1638789022
    },
    {
        "content": "<p>Joseph is of course completely correct. It looks like what you really want is an <code>affine_basis.reindex</code> definition + API. It would be great if you developed that.</p>",
        "id": 263835442,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1638789090
    },
    {
        "content": "<p>In the meantime, here's the sort of thing you can do with what we currently have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.affine_space.basis</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">affine</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">affine_space</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι'</span><span class=\"o\">]</span> <span class=\"c1\">-- Redundant but convenient because of missing API</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">affine_basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">affine_basis</span> <span class=\"n\">ι'</span> <span class=\"n\">R</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"n\">b'.points</span> <span class=\"bp\">∘</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">b.points</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">b.coord</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">b'.coord</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">b.affine_combination_coord_eq_self</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.univ.map_affine_combination</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">b.sum_coord_apply_eq_one</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">b'.coord_apply</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Needs PR #10637</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"n\">b'.points</span> <span class=\"bp\">∘</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">b.points</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">b.basis_of</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum_coords</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b'.basis_of</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum_coords</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">neg_inj</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">b.linear_eq_sum_coords</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">b'.linear_eq_sum_coords</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"n\">e</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 263835459,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1638789106
    },
    {
        "content": "<p>I should also add that I'm surprised you needed results about <code>basis_of</code> and <code>sum_coords</code>. I suspect this is because what you really wanted were results about affine bases and you were trying to prove them by unfolding the definition, which will then require you to use results about <code>basis_of</code> and <code>sum_coords</code>.</p>",
        "id": 263835616,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1638789182
    },
    {
        "content": "<p>For reference, this is about Ceva's theorem, which really is about coordinates.</p>",
        "id": 263835649,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638789210
    },
    {
        "content": "<p>However you should never _need_ to use (and probably never actually use) the definitions because we have enough of an API to characterise barycentric coordinates, as seen above.</p>",
        "id": 263835743,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1638789245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/proving.20that.20sum_coords.20are.20equal/near/263835649\">said</a>:</p>\n<blockquote>\n<p>For reference, this is about Ceva's theorem, which really is about coordinates.</p>\n</blockquote>\n<p>Oh cool. The original imports suggested it was one of these sorts of results. It would be nice to see Ceva proved. I'm still not sure this is best expressed in terms of <code>sum_coords</code> but I'm happy to wait and see.</p>",
        "id": 263835941,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1638789368
    }
]