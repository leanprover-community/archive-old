[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">tower</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">tower</span> <span class=\"err\">∅</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">},</span> <span class=\"n\">tower</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">tower</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">S</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">chain</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"err\">⊆</span> <span class=\"n\">chains</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">is_chain</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">tower</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tower</span> <span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">succ</span> <span class=\"c1\">-- classical.choice quot.sound propext</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">tower</span> <span class=\"c1\">-- no axioms</span>\n</pre></div>\n\n\n<p>Why does <code>tower</code> use no axioms even though I clearly see <code>succ</code>?</p>",
        "id": 125814400,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524907806
    },
    {
        "content": "<p>Kenny you are posting code which doesn't run</p>",
        "id": 125821103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924376
    },
    {
        "content": "<p>oops</p>",
        "id": 125821104,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524924383
    },
    {
        "content": "<p>so I can only conjecture</p>",
        "id": 125821105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924385
    },
    {
        "content": "<p>but not verify</p>",
        "id": 125821106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924387
    },
    {
        "content": "<p>that if you instead try <code>#print axioms tower.mk</code></p>",
        "id": 125821108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924398
    },
    {
        "content": "<p>you will see the axioms you used</p>",
        "id": 125821109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924401
    },
    {
        "content": "<p>let me know if I answered your question</p>",
        "id": 125821116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924428
    },
    {
        "content": "<p>it's a prop so it has no k</p>",
        "id": 125821118,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524924453
    },
    {
        "content": "<p>mk</p>",
        "id": 125821119,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524924454
    },
    {
        "content": "<p>If it's a prop then maybe it really does use no axioms</p>",
        "id": 125821170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924527
    },
    {
        "content": "<p>because all those <code>cases H</code> which you had to change to <code>classical.some H</code> when you were working with data</p>",
        "id": 125821217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924616
    },
    {
        "content": "<p>An inductive type definition is not a definition in the kernel. It's built by postulating that <code>tower</code> is a type of the proper universe, that <code>empty</code>, <code>succ</code> and <code>chain</code> are functions that return a tower and that a recursor exists</p>",
        "id": 125821481,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524925254
    },
    {
        "content": "<p>sorry, someone came round</p>",
        "id": 125822337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524927384
    },
    {
        "content": "<p>was going to finish \"...can be changed back somehow\"</p>",
        "id": 125822338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524927403
    },
    {
        "content": "<p>Actually I really do not understand what is going on here.</p>",
        "id": 125822343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524927424
    },
    {
        "content": "<p>Am I right in thinking that in general it is possible to construct Props which don't use axioms but whose construction essentially uses types which are not props and whose construction involves axioms?</p>",
        "id": 125822346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524927461
    },
    {
        "content": "<p>How much will Prop let us forget?</p>",
        "id": 125822347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524927470
    },
    {
        "content": "<p>I do not know if I can make my question rigorous</p>",
        "id": 125822386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524927500
    },
    {
        "content": "<p>I don't get your question. Do you mean constructing pops that only uses inductive definitions?</p>",
        "id": 125825885,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524936070
    },
    {
        "content": "<p>The technical answer is that the code for <code>#print axioms</code> does not traverse inductive declarations.  It only looks at the contents and types of definitions, and types of axioms.  This is probably not a problem since you presumably don't require choice if you never use <code>tower.succ</code>.</p>",
        "id": 125846688,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524986766
    }
]