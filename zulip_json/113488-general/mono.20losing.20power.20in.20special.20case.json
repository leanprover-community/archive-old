[
    {
        "content": "<p>I hit the following odd behaviour in <code>mono</code> today:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.monotonicity</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">mono</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- takes action</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">mono</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- doesn't take action</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't see why <code>mono</code> should do something in the first (strictly more general) case but not the second.  Unless it's that there's some other, ultimately unhelpful, lemma which it tries to apply in the second case but gets \"blocked\" on, and that lemma doesn't apply in the more general first case?</p>",
        "id": 276816220,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648427983
    },
    {
        "content": "<p>If you remove the <code>*</code> in the second case, it looks like it reports an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">12:3: ambiguous match:</span>\n\n<span class=\"cm\">mul_mono_nonpos</span>\n<span class=\"cm\">c ≤ 0</span>\n<span class=\"cm\">b ≤ a</span>\n\n<span class=\"cm\">mul_mono_nonneg</span>\n<span class=\"cm\">0 ≤ c</span>\n<span class=\"cm\">a ≤ b</span>\n\n<span class=\"cm\">Tip: try asserting a side condition to distinguish between the lemmas</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 276816938,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648429033
    },
    {
        "content": "<p>That's very interesting, because there ought even to be <em>three</em> lemmas among which it's ambiguous, not just two:  there's also the lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_le_mul\">docs#mul_le_mul</a>, which is the one applied in the first case.</p>",
        "id": 276817217,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648429358
    },
    {
        "content": "<p>There seems to be a disambiguation engine that ranks possibilities -- maybe that one didn't make the cut?</p>\n<p>(<code>mono with a ≤ b,</code> seems to work for the second one.)</p>",
        "id": 276817381,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648429579
    },
    {
        "content": "<p>Interestingly, the behaviour is not stable under order of multiplication</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">mono</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- doesn't take action</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">mono</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- takes action</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276817496,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648429753
    }
]