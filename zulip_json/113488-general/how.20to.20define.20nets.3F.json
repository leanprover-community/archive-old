[
    {
        "content": "<p>I don't think mathlib has an entry for nets, as defined here:<br>\nA function from an upward directed set to a set.<br>\nHow would I go about defining updirsets and then nets?</p>",
        "id": 213711317,
        "sender_full_name": "Aron",
        "timestamp": 1603034875
    },
    {
        "content": "<p>I'm not sure whether directed sets exist in mathlib.  But preorders do, so you probably want to start with that notion (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/preorder\">docs#preorder</a>), and add extra hypotheses from there.</p>",
        "id": 213712112,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603035964
    },
    {
        "content": "<p>Note that mathlib's topology is built around filters (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter\">docs#filter</a>), which are a little more general than nets.</p>",
        "id": 213712136,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603036028
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/directed_order\">docs#directed_order</a></p>",
        "id": 213712676,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603036829
    },
    {
        "content": "<p>But most theorems assume <code>[semilattice_sup α]</code> instead</p>",
        "id": 213712682,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603036851
    },
    {
        "content": "<p>If you want to migrate theorems to <code>directed_order</code>, you should</p>\n<ul>\n<li>add a typeclass for the dual notion;</li>\n<li>add instance from <code>semilattice_sup</code> to <code>directed_order</code>;</li>\n<li>replace <code>[semilattice_sup α]</code> with <code>[directed_order α]</code> in many theorems, e.g., those about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.at_top\">docs#filter.at_top</a></li>\n</ul>",
        "id": 213712847,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603037045
    },
    {
        "content": "<p>We should have a FAQ entry about why we use filters instead of nets. Filters are much more versatile than nets, and have much better formal properties. There are really much better than nets from every point of view except for the initial learning curve. It doesn't mean people shouldn't have fun formalizing nets using Lean, but we clearly won't switch in mathlib. We could have the definition in mathlib, but duplicating too many things would be very counter-productive and confusing.</p>",
        "id": 213716374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603042056
    },
    {
        "content": "<p>We can switch theorems from <code>[semilattice_sup α]</code> to <code>[directed_order α]</code>, and say \"if you want to talk about nets, then use <code>{α : Type*} [directed_order α] [nonempty α] {f : α → β} {l : filter β} (h : tendsto f at_top l)</code></p>",
        "id": 213716605,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603042367
    },
    {
        "content": "<p>Filters might be better than nets, but my professor has a hardon for nets.<br>\nI tried doing this on my own, and I'm probably far off the mark:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span> <span class=\"n\">topology.uniform_space.basic</span> <span class=\"n\">order.rel_classes</span> <span class=\"n\">algebra.order</span> <span class=\"n\">order</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">my_updirorder</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">preorder</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_updir</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">my_updirset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">):=</span>\n<span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">order</span> <span class=\"o\">:</span> <span class=\"n\">my_updirorder</span> <span class=\"n\">α</span> <span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_eventually</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">my_updirset</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">):=</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Z</span><span class=\"o\">),</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span>\n</code></pre></div>\n\n<p>The error happens in my_eventually:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">my_updirset</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Z</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_le</span> <span class=\"n\">Z</span>\n</code></pre></div>\n\n<p>I think it doesn't want to extend has_le from preorder?</p>",
        "id": 213929095,
        "sender_full_name": "Aron",
        "timestamp": 1603204900
    },
    {
        "content": "<p>figured it out, just abandon my_updirset.</p>",
        "id": 213933367,
        "sender_full_name": "Aron",
        "timestamp": 1603206699
    }
]