[
    {
        "content": "<p>Hello, I stumbled upon a curious behavior of <code>simp</code> with if-then-else:</p>\n<p>Here, simp cannot resolve the if-then-else:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">as</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">as</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>   <span class=\"c1\">-- ⊢ ite (x = x) a b = a</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Here, it can:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But it looks like <code>rw h</code> does exactly the same as <code>simp [h]</code> above.</p>\n<p>Does someone know what's going on here?</p>",
        "id": 160348355,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552103314
    },
    {
        "content": "<p>I don't think they are actually different, seeing as this works too:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>   <span class=\"c1\">-- ⊢ ite (x = x) a b = a</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160349437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552105146
    },
    {
        "content": "<p>I suspect that the beta redex is causing simp to not see the second simplification until after the first is complete</p>",
        "id": 160349499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552105255
    },
    {
        "content": "<p>Oh, that makes sense. Thank you.</p>",
        "id": 160351762,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552108936
    },
    {
        "content": "<p>It doesn't make sense to me. What is \"beta redex\"?</p>",
        "id": 160354738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552114745
    },
    {
        "content": "<p><code>(\\lam x, A) B</code></p>",
        "id": 160355891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552116883
    },
    {
        "content": "<p>oh -- it's the same as beta reduction?</p>",
        "id": 160355970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552117032
    },
    {
        "content": "<p>beta reduction is the simplification of beta redexes</p>",
        "id": 160355972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552117054
    },
    {
        "content": "<p>a beta redex is a thing that is subject to beta reduction</p>",
        "id": 160355975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552117068
    },
    {
        "content": "<p>Aah I see. OK I've now googled. Thanks.</p>",
        "id": 160356016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552117089
    }
]