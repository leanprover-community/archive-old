[
    {
        "content": "<p>The notation <code>+</code> is attached to <code>has_add.add : X -&gt; X -&gt; X</code>. Mathematicians use <code>+</code> in more general ways though. I find myself wanting to write <code>r + J</code> for <code>r</code> an element of, and <code>J</code> a subset of, an additive abelian group (<code>J</code> is a subgroup in fact). This is standard notation in mathematics and I suspect I can't have it given the set-up we have. Does anyone have any thoughts as to how I might try and represent such an idea in Lean? I can make the object I want no problem, the issue is simply that I want the notation to be as close to what a mathematician would write as possible.</p>",
        "id": 130330334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532595172
    },
    {
        "content": "<p>It's called a coset.</p>",
        "id": 130330459,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532595405
    },
    {
        "content": "<p>specifically, a left coset</p>",
        "id": 130330461,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532595409
    },
    {
        "content": "<p>I've seen cosets in group theory but unfortunately this is an additive group ;-)</p>",
        "id": 130330474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532595451
    },
    {
        "content": "<p><code>additive</code></p>",
        "id": 130330478,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532595459
    },
    {
        "content": "<p>How scalable is this <code>additive</code> idea I wonder? I recently wanted a free abelian group with group law multiplication but ultimately settled on group law addition because thay was what the finsupp construction gave me and I couldn't face cluttering everything up with additive and multiplicative everywhere.</p>",
        "id": 130331527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532596882
    },
    {
        "content": "<p>as scalable as I made it in my constructive tensor product</p>",
        "id": 130331592,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532596931
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">free_abelian_group</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">additive</span> <span class=\"err\">$</span> <span class=\"n\">abelianization</span> <span class=\"err\">$</span> <span class=\"n\">free_group</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 130331599,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532596941
    },
    {
        "content": "<p>and the proof that it works is that I built the whole tensor product out of the free abelian group</p>",
        "id": 130331610,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532596962
    },
    {
        "content": "<p><code>(+ r) '' J</code></p>",
        "id": 130331623,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532596980
    },
    {
        "content": "<p>I would prefer <code>((-) r) ⁻¹' J</code></p>",
        "id": 130331660,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532597032
    },
    {
        "content": "<p>I would prefer readable notation.</p>",
        "id": 130331735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532597090
    },
    {
        "content": "<p>I would prefer the notation mathematicians use, i.e. what we can't have.</p>",
        "id": 130332818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532598592
    }
]