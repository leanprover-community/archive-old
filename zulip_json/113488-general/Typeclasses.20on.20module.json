[
    {
        "content": "<p>Why does the definition of <code>module</code> require such strong typeclasses? Is it because somehow those are forced by the rest anyway?</p>",
        "id": 267627989,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641927041
    },
    {
        "content": "<p>what do you consider \"strong\" in this case?</p>",
        "id": 267631342,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641928667
    },
    {
        "content": "<p><code>semiring</code> instead of <code>monoid</code> + <code>add_monoid</code> for example</p>",
        "id": 267632685,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641929285
    },
    {
        "content": "<p>For the action of a monoid, you can just use <code>mul_action</code>.</p>",
        "id": 267632951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641929427
    },
    {
        "content": "<p>Oh I see.... you want the action compatible with addition in the add_monoid</p>",
        "id": 267633023,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641929481
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/distrib_mul_action\">docs#distrib_mul_action</a> .</p>",
        "id": 267633142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641929532
    },
    {
        "content": "<p>All in all, the instance jump from <code>distrib_mul_action</code>/<code>mul_action_with_zero</code> is high.</p>",
        "id": 267633220,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641929586
    },
    {
        "content": "<p>I usually find myself wanting <code>distrib_mul_action_with_zero</code> (<a href=\"https://github.com/leanprover-community/mathlib/pull/9123\">#9123</a>), but that's not what I meant here.</p>",
        "id": 267633280,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641929615
    },
    {
        "content": "<p>As long as we're at it, there should be a typeclass <code>smul_with_zero_right</code> which would unify <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_zero'\">docs#smul_zero'</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_zero\">docs#smul_zero</a></p>",
        "id": 267633409,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641929666
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 267633489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641929717
    },
    {
        "content": "<p>What examples do you have in mind? If we start adding classes for everything under the sun, we'll be doing nonsense forever.</p>",
        "id": 267633641,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641929787
    },
    {
        "content": "<p>Eric had an instance of a <code>distrib_mul_action_with_zero</code> which was not a module. <code>smul_with_zero_right</code> is just here to be the intersection of two things which are used a lot.</p>",
        "id": 267633765,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641929850
    },
    {
        "content": "<p>ah yes, the classic combinatorics question of how many different sets of legs can you pull off a caterpillar</p>",
        "id": 267633808,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641929869
    },
    {
        "content": "<p>But again that's not what my question is about. I'm asking why <code>module</code> is taking <code>semiring</code> and not <code>monoid</code> + <code>add_monoid</code></p>",
        "id": 267633921,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641929900
    },
    {
        "content": "<p>Can you deduce <code>(a + b) \\smul c = a \\smul c + b \\smul c</code> without it?</p>",
        "id": 267634050,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641929965
    },
    {
        "content": "<p>It makes no math difference because the endomorphisms of an <code>add_comm_monoid</code> form a semiring anyways. So instead of a module over a semiring you would have a module over the semiring presented by something that might not be a semiring yet.</p>",
        "id": 267634186,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641930023
    },
    {
        "content": "<p>I'm confused. Say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a commutative additive monoid, then yes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">End(M)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span> is a semiring, and giving a module structure is equivalent to giving a morphism of semirings <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>→</mo><mi>E</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R \\to End(M)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span>, but now you're suggesting to just give a morphism of monoids <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>→</mo><mi>E</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R \\to End(M)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 267634401,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641930134
    },
    {
        "content": "<p>No, a morphism of <code>has_add/zero/mul/one</code>s</p>",
        "id": 267634468,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641930173
    },
    {
        "content": "<p>Oh ok..</p>",
        "id": 267634482,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641930181
    },
    {
        "content": "<p>But I can't think of any instances where you construct a semiring by starting with something that doesn't satisfy distributivity and then imposing distributivity as a relation. But perhaps such a thing is out there?</p>",
        "id": 267634566,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641930222
    },
    {
        "content": "<p>Right, I can't think of any examples where this would be useful.</p>",
        "id": 267634671,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641930264
    },
    {
        "content": "<p>So do the axioms of <code>module \\a \\b</code> imply <code>semiring \\a</code>?</p>",
        "id": 267634772,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641930321
    },
    {
        "content": "<p>No, not in general</p>",
        "id": 267634798,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641930338
    },
    {
        "content": "<p>For example if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is trivial, you won't be able to get any info about <code>R</code>.</p>",
        "id": 267634862,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641930362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, can you be clear about exactly what alternate definition you're proposing for <code>module</code>, in the form of a <code>class</code> declaration?</p>",
        "id": 267634883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641930364
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[protect_proj]</span> <span class=\"kd\">class</span> <span class=\"n\">module'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 267635014,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641930445
    },
    {
        "content": "<p>That would probably work (for essentially the same reason that Reid mentioned above, as the map <code>R \\to End(M)</code> would be both a morphism of <code>monoid</code>s and of <code>add_monoid</code>s)</p>",
        "id": 267635137,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641930495
    },
    {
        "content": "<p>you also don't need to stop there, you could have <code>[has_zero R] [has_add R] [has_one R] [has_mul R]</code>, maybe after making corresponding changes to the superclasses</p>",
        "id": 267635250,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641930573
    },
    {
        "content": "<p>These are haskell's semirings right ;)?</p>",
        "id": 267635380,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641930621
    },
    {
        "content": "<p>module over a <code>Num</code></p>",
        "id": 267635400,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641930638
    },
    {
        "content": "<p>What are the examples that you want to support this way?</p>",
        "id": 267635496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641930703
    },
    {
        "content": "<p>In some sense there can't be any because a <code>module'</code> over a whatever <code>R</code> is \"the same\" as an ordinary module over some other ring constructed from <code>R</code> (which is <code>R</code> itself if <code>R</code> was already a ring).</p>",
        "id": 267635664,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641930766
    },
    {
        "content": "<p>It just felt wrong to bump my instances for the sake of using <code>module</code> and I wanted an explanation.</p>",
        "id": 267635753,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641930819
    },
    {
        "content": "<p>Fair enough! Did you get one? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 267636097,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641930975
    },
    {
        "content": "<p>I guess I did!</p>",
        "id": 267636121,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641930985
    },
    {
        "content": "<p>My explanation was rather compressed, and I could give a more expanded one. Let's instead take the simpler question of why <code>mul_action</code> has <code> [monoid α]</code> and not just <code>[has_one α] [has_mul α]</code>.</p>\n<p>If I have <code>[has_one M] [has_mul M]</code> and a <code>mul_action</code> of <code>M</code> on a set <code>X</code>, I certainly can't prove that <code>M</code> is actually a monoid (e.g. for <code>a b c : M</code>, we have <code>(a * b) * c = a * (b * c)</code>) from that because, as Adam noted, the set <code>X</code> could be a singleton and all the laws for an action would hold automatically. However, I do know that for any <code>a b c : M</code> and <code>x : X</code>, we must have<br>\n<code>((a * b) * c) • x = (a * (b * c)) • x</code><br>\nbecause the laws for an action imply that both are equal to<br>\n<code>a • (b • (c • x))</code>.</p>",
        "id": 267637454,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641931543
    },
    {
        "content": "<p>So I could form a quotient of <code>M</code> where we impose the relations <code>(a * b) * c = a * (b * c)</code> for all <code>a b c</code>, and the action of <code>M</code> on <code>X</code> will descend to the quotient. For the same reason, I might as well also impose the relations <code>1 * a = a = a * 1</code>. Once I do that, I made <code>M</code> into a monoid.</p>",
        "id": 267637596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641931595
    },
    {
        "content": "<p>And because of the way I formed this quotient, say <code>N</code>, giving an action of the monoid <code>N</code> on <code>X</code> is equivalent to giving an action of the original thing <code>M</code> on <code>X</code>.</p>",
        "id": 267637803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641931684
    },
    {
        "content": "<p>So, there's not really any point in considering actions by things that aren't monoids.</p>",
        "id": 267637859,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641931704
    },
    {
        "content": "<p>Same in the additive context for semirings.</p>",
        "id": 267637874,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641931710
    }
]