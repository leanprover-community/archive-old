[
    {
        "content": "<p>I'm a green undergrad and I'm having trouble with the syntax and the import statements. I'm trying to write this problem up:<br>\nGiven two Cauchy sequences c,c' on a metric space (X,d), the sequence x_n=d(c_n,c'_n) is Cauchy.<br>\nI've gotten to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic.metric_space</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prb1</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">metric_space</span><span class=\"o\">)(</span><span class=\"bp\">???</span><span class=\"o\">)</span><span class=\"bp\">...</span> <span class=\"o\">:</span><span class=\"bp\">???</span><span class=\"o\">:=</span>\n</code></pre></div>\n\n<p>It doesn't seem to recognize metric_space as a type. I know I'll also need topology.uniformspace.cauchy_seq.<br>\nI'm not looking for a proof of this, I just need help formalizing the problem.</p>",
        "id": 212934366,
        "sender_full_name": "Aron",
        "timestamp": 1602363686
    },
    {
        "content": "<p>You probably need to read a bit more documentation before trying this, since your <code>(X metric_space)</code> is pretty far from the correct syntax. What did you read so far?</p>",
        "id": 212934476,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602363842
    },
    {
        "content": "<p>Maybe watch <a href=\"https://www.youtube.com/watch?v=xYenPIeX6MY&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N&amp;index=8\">https://www.youtube.com/watch?v=xYenPIeX6MY&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N&amp;index=8</a> and next few videos in this series if you prefer videos to reading.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"xYenPIeX6MY\" href=\"https://www.youtube.com/watch?v=xYenPIeX6MY&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N&amp;index=8\"><img src=\"https://i.ytimg.com/vi/xYenPIeX6MY/default.jpg\"></a></div>",
        "id": 212934590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602364006
    },
    {
        "content": "<p>I'm honestly having a pretty tough time parsing it. I'm not well-versed in dep type theory.<br>\nI've been looking over example LEAN files instead.<br>\nI noticed I've forgotten colons, now I'm at:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prb1</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span><span class=\"o\">)(</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">...</span> <span class=\"o\">:</span><span class=\"bp\">???</span><span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 212934601,
        "sender_full_name": "Aron",
        "timestamp": 1602364037
    },
    {
        "content": "<p>(this is number 8 in a series, you should have a look at 8, 9, 10, 11, assuming you already know more basic things)</p>",
        "id": 212934610,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602364071
    },
    {
        "content": "<p>The first easy thing to fix is to write Lean instead of LEAN <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 212934660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602364103
    },
    {
        "content": "<p>I actually think it's not so bad to just dive in, the way that Aron is doing.  Here's a starting point:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_cauchy</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">my_cauchy</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc'</span> <span class=\"o\">:</span> <span class=\"n\">my_cauchy</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_cauchy</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 212934670,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602364138
    },
    {
        "content": "<p>Note that I am suggesting you make your own definition <code>my_cauchy</code>, because the existing definition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cauchy\">docs#cauchy</a> in mathlib is very general (for filters).</p>",
        "id": 212934683,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602364184
    },
    {
        "content": "<p>But the videos Patrick linked are definitely also worth your time, especially as a complement to some fun hours of blind experimentation! :)</p>",
        "id": 212934751,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602364311
    },
    {
        "content": "<p>I wouldn't be too worried about the generality of Cauchy in mathlib. You can get rid of it using <code>metric.cauchy_seq_iff</code> or <code>metric.cauchy_seq_iff'</code>. So you can start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prb1</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hc'</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">metric.cauchy_seq_iff</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>But I still think that trying this without knowing how to write \"Let X be a metric space\" in Lean will probably be <em>very</em> frustrating, so learning a bit first is wiser.</p>",
        "id": 212934884,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602364554
    },
    {
        "content": "<p>Thanks, both of those look good to me. I think <code>dist</code> is a little strange, I'm not sure why that wouldn't collide if one were to make two metspaces.</p>",
        "id": 212935010,
        "sender_full_name": "Aron",
        "timestamp": 1602364725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343532\">Aron</span> <a href=\"#narrow/stream/113488-general/topic/LEAN.20help.3F/near/212935010\">said</a>:</p>\n<blockquote>\n<p>I think <code>dist</code> is a little strange, I'm not sure why that wouldn't collide if one were to make two metspaces.</p>\n</blockquote>\n<p>This is just part of the magic.  Lean looks at the object you're trying to apply <code>dist</code> to, sees that it's of type X, and therefore applies the definition of <code>dist</code> coming from the metric space structure on X, rather than any of the other metric spaces that might be around.</p>",
        "id": 212935096,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602364895
    },
    {
        "content": "<p>Oh, that's pretty neat.</p>",
        "id": 212935203,
        "sender_full_name": "Aron",
        "timestamp": 1602365054
    },
    {
        "content": "<p>I noticed the definition for a Cauchy sequence is the open ball definition in my book, and now I'm trying to encode that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_cauchy</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">):=</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">),</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Where am I going wrong here?</p>",
        "id": 212937017,
        "sender_full_name": "Aron",
        "timestamp": 1602367886
    },
    {
        "content": "<p>Can you describe the error you receive?</p>",
        "id": 212937132,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602368063
    },
    {
        "content": "<p>And please make sure to include any necessary hypotheses, so that someone who wants to help can test the code.  For example did you earlier define X to be a metric space?</p>",
        "id": 212937152,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602368116
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span> <span class=\"n\">topology.uniform_space.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_cauchy</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">):=</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">),</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prb1</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hX</span><span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">)(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc'</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">metric.cauchy_seq_iff</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>I intend on replacing cauchy_seq in the theorem preamble.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">98</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_dist</span> <span class=\"n\">X</span>\n<span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_mem</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212937234,
        "sender_full_name": "Aron",
        "timestamp": 1602368248
    },
    {
        "content": "<p>Yep, so first problem is that you haven't told Lean that X is a metric space.</p>",
        "id": 212937277,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602368286
    },
    {
        "content": "<p>That's why it can't find a <code>has_dist</code> on X.  You seem to have taken Patrick's code but omitted the important hypothesis <code>[metric_space X]</code>.</p>",
        "id": 212937285,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602368323
    },
    {
        "content": "<p>Put it in, now only the second error remains. Apparently has_mem isn't implied by X being a metspace?<br>\n<code>def my_cauchy {X : Type*} [metric_space X] (c : ℕ → X):=∀ (ε : ℝ), ε &gt; 0 → (∃ (n : ℕ),∃ (x ∈ X),∀ (m : ℕ), m ≥ n → dist (c m) (x) &lt; ε)</code></p>",
        "id": 212937428,
        "sender_full_name": "Aron",
        "timestamp": 1602368599
    },
    {
        "content": "<p>That's right, because <code>X</code> is a type, not a set.  You should write, <code>∃ (x : X)</code> rather than <code>∃ (x ∈ X)</code>.</p>",
        "id": 212937475,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602368647
    },
    {
        "content": "<p>A couple of other points: you can say <code>∀ ε &gt; 0,</code> as an abbreviation for <code>∀ (ε : ℝ), ε &gt; 0 →</code>, likewise for <code>∀ (m : ℕ), m ≥ n → </code>.</p>",
        "id": 212937502,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602368720
    },
    {
        "content": "<p>And ... are you sure you have the right definition of Cauchy? :)</p>",
        "id": 212937511,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602368743
    },
    {
        "content": "<p>All works now.<br>\nI'm pretty sure I have the right def of Cauchy:<br>\nA sequence is Cauchy iff for all r&gt;0, there is an x in the metspace such that the sequence is eventually in B(x,r). I expand a bit on the definitions to get that.</p>",
        "id": 212937651,
        "sender_full_name": "Aron",
        "timestamp": 1602368955
    },
    {
        "content": "<p>That's not the definition of Cauchy! Which book are you using?</p>",
        "id": 212937718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602369055
    },
    {
        "content": "<p>Well, it's certainly not the <em>standard</em> definition of Cauchy...</p>",
        "id": 212937734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602369088
    },
    {
        "content": "<p>Sorry Aron, I guess it is equivalent to the standard definition.  Just looks weird!  I'm also curious about what book your professor is using!</p>",
        "id": 212937796,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602369178
    },
    {
        "content": "<p>It would be an interesting Lean exercise to prove that this definition of Cauchy was equivalent to the definition in Wikipedia, which is certainly the one I was taught as an undergraduate and the one we teach here</p>",
        "id": 212937870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602369250
    },
    {
        "content": "<p>Not really a book, it's my prof's pdfs. I'm pretty sure he writes them on the fly.<br>\nThe man loves his nets, so his definition of Cauchy is defined for nets too.<br>\n\"A net x taking values in (X,d) is a Cauchy net iff for all r&gt;0, there exists a point z in X such that x is <a href=\"http://evt.ly\">evt.ly</a> in B(z,r)\"</p>",
        "id": 212937888,
        "sender_full_name": "Aron",
        "timestamp": 1602369298
    },
    {
        "content": "<p>I can kind of see how it's interchangeable with the lean def, if in the lean def <code>m</code> and <code>n</code> are too far apart, one must necessarily be outside the open ball.</p>",
        "id": 212937914,
        "sender_full_name": "Aron",
        "timestamp": 1602369346
    },
    {
        "content": "<p>To be clear, here \"Lean def\" = \"standard def for 99% of mathematicians\" :)</p>",
        "id": 212937957,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602369381
    },
    {
        "content": "<p>Well you have a chance to prove that you can see how it's interchangeable because this is exactly a level of the lean puzzle game</p>",
        "id": 212937959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602369383
    },
    {
        "content": "<p>Oh, cool.</p>",
        "id": 212937962,
        "sender_full_name": "Aron",
        "timestamp": 1602369397
    },
    {
        "content": "<p>Can you make the level?</p>",
        "id": 212937965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602369414
    },
    {
        "content": "<p>You said this is one of the levels, I don't think I'm up to snuff to design the level.</p>",
        "id": 212938150,
        "sender_full_name": "Aron",
        "timestamp": 1602369834
    },
    {
        "content": "<p>Your mission, if you choose to accept it :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_cauchy</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">my_cauchy</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m₁</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m₂</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212938267,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602370031
    },
    {
        "content": "<p>and if you can't do it, tell your Prof that you can't reconcile their notes with Wikipedia :-)</p>",
        "id": 212938475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602370437
    },
    {
        "content": "<p>lol <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I just checked to see if I could do the level and I was just about to finish with a goal of <code>n ≥ n</code> and I tried <code>refl</code> and it didn't work :D. I think <code>ge_refl</code> must have got removed!</p>",
        "id": 212938802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602370967
    },
    {
        "content": "<p>OK I found another proof! <span class=\"user-mention\" data-user-id=\"343532\">@Aron</span> I can confirm that Heather's level is solvable!</p>",
        "id": 212938812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602371002
    },
    {
        "content": "<p>Feel free to ask questions. But most importantly, come up with a maths proof first.</p>",
        "id": 212938871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602371077
    },
    {
        "content": "<p>This level is a good lean preparation for the question you originally mentioned</p>",
        "id": 212939292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602371818
    },
    {
        "content": "<p>I was too busy solving the problem I mentioned. I didn't use Lean for it and I'm not very sure how to, but it's one big block of symbols so it's possible.</p>",
        "id": 212941599,
        "sender_full_name": "Aron",
        "timestamp": 1602376379
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/kntYu6urUrQ2LfTtOAGpS7Mm/Screen-Shot-2020-10-10-at-8.33.26-PM.png\">Screen-Shot-2020-10-10-at-8.33.26-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kntYu6urUrQ2LfTtOAGpS7Mm/Screen-Shot-2020-10-10-at-8.33.26-PM.png\" title=\"Screen-Shot-2020-10-10-at-8.33.26-PM.png\"><img src=\"/user_uploads/3121/kntYu6urUrQ2LfTtOAGpS7Mm/Screen-Shot-2020-10-10-at-8.33.26-PM.png\"></a></div>",
        "id": 212941607,
        "sender_full_name": "Aron",
        "timestamp": 1602376411
    },
    {
        "content": "<p>said block.</p>",
        "id": 212941609,
        "sender_full_name": "Aron",
        "timestamp": 1602376422
    }
]