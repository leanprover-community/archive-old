[
    {
        "content": "<p>I guess <code>rcases</code> doesn't (recursively) invent names because using autogenerated names is evil. But could we get a tactic which uses trace to indicate what is the structure of angle brackets that would need to be used, possibly with suggested names? Sometimes I spend quite a long time to figure out what to put after <code>rcases ... with</code></p>",
        "id": 130971668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533553731
    },
    {
        "content": "<p>Let's say you have <code>h : a ∧ (b ∨ c)</code>, what would you like <code>rcases h with</code> to print?</p>",
        "id": 130994054,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533578066
    },
    {
        "content": "<p>I didn't think about disjunctions. I'm always using <code>rcases</code> with exists and conjunctions.</p>",
        "id": 131002704,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533587674
    },
    {
        "content": "<p>Can you show me an example where you'd like <code>rcases</code> to give you more information?</p>",
        "id": 131002871,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533587920
    },
    {
        "content": "<p>In that case it would probably print <code>rcases h with ⟨h_1, h_2 | h_2⟩</code></p>",
        "id": 131004847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533590373
    },
    {
        "content": "<p>It would be cool if that kind of information could be fed to the IDE to generate snippets, now that I think of it. Maybe that can be done</p>",
        "id": 131005023,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533590599
    },
    {
        "content": "<p>this certainly seems doable. I don't think it will be smart enough to not name variables that are eliminated after the match (i.e. <code>h : ∃ a b, a = b</code> should become <code>⟨a, _, rfl⟩</code> rather than <code>⟨a, b, rfl⟩</code>) but otherwise it should be possible. It may do weird things with dependent functions, like this:</p>\n<div class=\"codehilite\"><pre><span></span>def f : ℕ ⊕ ℕ → Prop\n| (sum.inl a) := 0 &lt; a ∧ a &lt; 1\n| (sum.inr a) := ∃ b, a &lt; b ∧ b &lt; a\n\nexample (h : ∃ n, f n) : false :=\nby rcases h with ⟨a|a, _, _, _⟩\n</pre></div>",
        "id": 131005164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533590785
    },
    {
        "content": "<p>In the same spirit, how about filling in a <code>_</code> whose type is a structure with a <code>{ ... }</code> snippet with field names already entered</p>",
        "id": 131005264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533590981
    },
    {
        "content": "<p>There is one example of \"hints\" being used in mathlib thus far, and I just use the error message in that case</p>\n<div class=\"codehilite\"><pre><span></span>example : ∃ n, 1 = n :=\nby simpa using ⟨1, rfl⟩\n\n-- simpa failed, &#39;using&#39; expression type not directly inferrable. Try:\n--\n-- simpa ... using\n-- show Exists\n--   (eq 1),\n-- from Exists.intro 1 rfl\n-- state:\n-- ⊢ Exists (eq 1)\n</pre></div>",
        "id": 131005267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533590992
    },
    {
        "content": "<p>all support for editor interaction was focused on the \"holes\" API, and that seems to have died. We probably won't see anything new here until lean 4</p>",
        "id": 131005339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533591073
    },
    {
        "content": "<p>I had to stare at it for a while. It can be pretty aggressive indeed. I wonder if we could direct the IDE to do increasingly deep matching.</p>",
        "id": 131005342,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533591075
    },
    {
        "content": "<p>I guess you could write a tactic which uses <code>trace</code> to produce some output which the user is supposed to copy and paste in, yeah. Kind of clunky but better than nothing</p>",
        "id": 131005351,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533591104
    },
    {
        "content": "<p>For now, we can already start supporting <code>snippet: </code> clauses in error messages. I have some ideas how to pick up on them in emacs at least.</p>",
        "id": 131005397,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533591129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I agree. And then progressively, you can automate that \"copy and paste\"</p>",
        "id": 131005411,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533591164
    },
    {
        "content": "<p>Interesting idea. Whatever API you have has to be compatible with core lean error messages though</p>",
        "id": 131005421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533591183
    },
    {
        "content": "<p>I agree. The best would be to choose a keyword (e.g. <code>snippet</code>) that we know isn't used in core lean. That way, in the worse case, the plugin does nothing</p>",
        "id": 131005496,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533591321
    },
    {
        "content": "<p>I started trying to implement this, but there is a problem with recursive definitions:</p>\n<div class=\"codehilite\"><pre><span></span>example (n : nat) : true :=\nby rcases n with _|⟨_|⟨_|⟨_|⟨_|⟨_|_⟩⟩⟩⟩⟩; trivial\n</pre></div>",
        "id": 131009017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533596818
    },
    {
        "content": "<p>I did not see that coming. How about we use a default depth, maybe 3? Or just don't follow recursive references</p>",
        "id": 131009083,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533596942
    },
    {
        "content": "<p>would the depth be cumulative over all splits or just for the one recursive? i.e. if there are two nats</p>",
        "id": 131009154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533597054
    },
    {
        "content": "<p>I would make that depth the maximum distance between any one case split and the root of the type term. E.g. in <code>ℕ × (ℕ ⊕ ℕ)</code> match on the root product (1) then twice on the nat on the left, then match on the sum on the right (2), and then once on each nat.</p>",
        "id": 131009284,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533597244
    },
    {
        "content": "<p>It might get ugly fast though if you have structures with 10 fields include each other.</p>",
        "id": 131009289,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533597267
    },
    {
        "content": "<p>what do you mean include each other?</p>",
        "id": 131009423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533597490
    },
    {
        "content": "<p>like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">big_struct1</span> <span class=\"o\">:=</span> <span class=\"c1\">-- ten fields</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">big_struct2</span> <span class=\"o\">:=</span> <span class=\"c1\">-- ten fields of type `big_struct1`</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">big_struct3</span> <span class=\"o\">:=</span> <span class=\"c1\">-- ten fields of type `big_struct2`</span>\n</pre></div>",
        "id": 131009471,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533597602
    },
    {
        "content": "<p>meh, it's still finite. Users will have to use discretion</p>",
        "id": 131009514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533597681
    },
    {
        "content": "<p>or adjust the depth</p>",
        "id": 131009515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533597691
    },
    {
        "content": "<p><code>rcases_hint</code> and <code>rintro_hint</code> are now in mathlib! It was a bit more complicated than I originally thought, since you have to do basically the same thing as <code>rcases</code> except backwards so there is lots of similar but different code from <code>rcases</code>.</p>",
        "id": 131100819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533726025
    },
    {
        "content": "<p>did you push that?</p>",
        "id": 131100895,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533726157
    },
    {
        "content": "<p>Awesome! You really don't waste a minute, do you?</p>",
        "id": 131132812,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533762448
    },
    {
        "content": "<p>Simon, beware that recent discussion about that happened in the add_comm_group tactic thread (my bad)</p>",
        "id": 131132974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533762608
    },
    {
        "content": "<p>That's where you guys are hiding!</p>",
        "id": 131134087,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533764245
    }
]