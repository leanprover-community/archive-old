[
    {
        "content": "<p>I'm trying to get rid of some simp loops and I just realized that there is a part of it I don't understand and it seems to be getting into a loop. Here is the trace that Lean prints for it:</p>\n<div class=\"codehilite\"><pre><span></span>[simplify.canonize]\ncategory_theory.types\n==&gt;\ncategory_theory.types\n[simplify.canonize]\ncategory_theory.types\n==&gt;\ncategory_theory.types\n[simplify.canonize]\n_inst_2\n==&gt;\n_inst_2\n[simplify.canonize]\ncategory_theory.types\n==&gt;\ncategory_theory.types\n[simplify.canonize]\ncategory_theory.types\n==&gt;\ncategory_theory.types\n[simplify.canonize]\n_inst_2\n==&gt;\n_inst_2\n</pre></div>\n\n\n<p>How do I prevent it from looping? I tried <code>simp [-category_theory.types]</code> and it doesn't work.</p>",
        "id": 156622369,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548178124
    },
    {
        "content": "<p>But <code>category_theory.types</code> isn't even marked as <code>[simp]</code>. How come the simplifier is using it?</p>",
        "id": 156622930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548178587
    },
    {
        "content": "<p>I am puzzled too. My tentative answer is that it comes from the <code>canonize</code> phase of <code>simp</code> which I did not know of. It seems like a phase where class instances are reduced but I can't say more. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, would you care to enlighten us?</p>",
        "id": 156627682,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548182193
    },
    {
        "content": "<p>Update: using <code>set_option trace.debug.dsimplify true</code> and using <code>dsimp</code> instead of <code>simp</code>, I managed to find the offender which was unrelated to <code>canonize</code></p>",
        "id": 156638222,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548190190
    },
    {
        "content": "<p>MWE</p>",
        "id": 156643964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548194515
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">comonad</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kn\">extends</span> <span class=\"n\">functor</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">extract</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Cokleisli</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comonad</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">comonad</span>\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comonad</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Cokleisli</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">copipe</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">extend</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">=&gt;=</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">copipe</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Cokleisli</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comonad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">Cokleisli</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">extract</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;=</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">id_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_id&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">Cokleisli</span><span class=\"bp\">.</span><span class=\"n\">comp_def</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comonad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">Cokleisli</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟶</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"err\">⟶</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">xs</span> <span class=\"err\">≫</span> <span class=\"n\">ys</span> <span class=\"bp\">=</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;=</span> <span class=\"n\">ys</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comonad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟶</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"err\">⟶</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"c1\">-- deep recursion was detected at &#39;expression replacer&#39; (potential</span>\n<span class=\"c1\">-- solution: increase stack space in your system)</span>\n</pre></div>",
        "id": 156649250,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548199263
    },
    {
        "content": "<p>If you comment out <code>Cokleisli.comp_def</code>, the error disappears</p>",
        "id": 156649296,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548199323
    }
]