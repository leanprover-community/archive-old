[
    {
        "content": "<p>In <code>order.filter.filter_product</code>, I'm trying to write: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">of_div</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">is_ultrafilter</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring_has_div</span> <span class=\"n\">β</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">filter_product</span><span class=\"bp\">.</span><span class=\"n\">division_ring</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">filter_product</span><span class=\"bp\">.</span><span class=\"n\">division_ring</span> <span class=\"n\">U</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">div</span>\n   <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 161797024,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1553629989
    },
    {
        "content": "<p>(to try and bypass the problem of <code>U</code> not being an instance)</p>",
        "id": 161797152,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1553630074
    },
    {
        "content": "<p>But Lean gives weird errors: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kn\">notation</span><span class=\"o\">,</span> <span class=\"n\">function</span> <span class=\"err\">&#39;</span><span class=\"n\">has_div</span><span class=\"bp\">.</span><span class=\"n\">div&#39;</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">explicit</span> <span class=\"n\">argument</span> <span class=\"k\">with</span> <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">has_div</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 161797167,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1553630096
    },
    {
        "content": "<p>Which doesn't seem to make sense, as trying to access a field <code>has_div</code> out of <code>has_div.div</code> is certainly <em>not</em> what I'm doing.</p>",
        "id": 161797214,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1553630132
    },
    {
        "content": "<p>In order to use the dot notation, you need the <code>has_div</code> argument to <code>has_div.div</code> to be explicit.</p>",
        "id": 161797367,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553630255
    },
    {
        "content": "<p>Oh, right -- of course.</p>",
        "id": 161797562,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1553630385
    },
    {
        "content": "<p>Yes, this works.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">of_div</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">is_ultrafilter</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">has_div</span><span class=\"bp\">.</span><span class=\"n\">div</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring_has_div</span> <span class=\"n\">β</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">filter_product</span><span class=\"bp\">.</span><span class=\"n\">division_ring</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">filter_product</span><span class=\"bp\">.</span><span class=\"n\">division_ring</span> <span class=\"n\">U</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 161797644,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1553630413
    }
]