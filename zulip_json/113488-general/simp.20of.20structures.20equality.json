[
    {
        "content": "<p>I have such goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">),</span> <span class=\"n\">category.comp</span> <span class=\"mi\">ùü≠</span><span class=\"o\">,</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">),</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>where nat : Prop.</p>\n<p>Both homs have the same type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">),</span> <span class=\"n\">category.comp</span> <span class=\"mi\">ùü≠</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y.unop</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">y.unop</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">),</span> <span class=\"n\">id</span>             <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_x.unop</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">_x.unop</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But <code>simp</code> does not simplify goal to just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">),</span> <span class=\"n\">category.comp</span> <span class=\"mi\">ùü≠</span> <span class=\"bp\">=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">),</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>Is it a bug, or I missed something?</p>\n<p><a href=\"https://gist.github.com/kana-sama/cb3b86494359d8b67b61b500f2aa6931/4e43d193bcb2c7b52fc95348ad4807f3a62f8b69#file-cat-lean-L191\">Not minimal example</a> line 191</p>",
        "id": 243849917,
        "sender_full_name": "kana",
        "timestamp": 1624570635
    },
    {
        "content": "<p>Looks like you should prove an <code>ext</code> lemma.</p>",
        "id": 243850309,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624570861
    },
    {
        "content": "<p>You're dealing with equality of structures. You have to use <code>ext</code>, the extensionality tactic, which splats out the structure, and asks you to prove that all the fields of the two structures match.</p>",
        "id": 243850332,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624570876
    },
    {
        "content": "<p>I assume these are natural transformations. If you put a <code>@[ext]</code> over your <code> structure natural_transformation ...</code> then lean will make the extensionality lemma for you automatically. Then use the <code>ext</code> tactic in the proof</p>",
        "id": 243850483,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624570957
    },
    {
        "content": "<p>Thanks. It works.</p>\n<p>But with that structure just simp works, what is the difference?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">qwe</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">qwe</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 243856617,
        "sender_full_name": "kana",
        "timestamp": 1624575457
    }
]