[
    {
        "content": "<p>I can't get my head around what is going on with the example of function extensionality blocking computation at <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html</a></p>\n<p>Does someone have some clarifying words, or know where I could search for some?</p>",
        "id": 160078407,
        "sender_full_name": "Peter Hoffmann",
        "timestamp": 1551862808
    },
    {
        "content": "<p>Suppose f is long matrix multiplication and suppose g is strassen. Surely, for all matrices m m', f(m, m') = g(m, m'). Then the axiom of extensionality says that f must be equal to g, which is intensionaly untrue, because I'm using two different multiplication functions.</p>",
        "id": 160078747,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1551863114
    },
    {
        "content": "<p>A slightly better example is something unary so that the axiom needs to be invoked once only. Therefore, suppose we have quick sort and bubble sort. Then for any sequence with linear order s, quick_sort(s) = bubble_sort(s), aka. equivalent outputs for equivalent inputs, as they both sort the sequence. But the axiom of functional extensionality then says that quick_sort = bubble_sort, which loses their computational context.</p>",
        "id": 160079016,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1551863369
    },
    {
        "content": "<p>I understand the basic idea.. (maybe), but how could I see the problem in a more concrete example of Lean code, and see how trying to reduce an expression leads to a problem? Is there maybe a way to see the kernel try to reduce a problematic expression and get into an infinite loop or something?</p>",
        "id": 160079360,
        "sender_full_name": "Peter Hoffmann",
        "timestamp": 1551863770
    },
    {
        "content": "<p>Unfortunately the words intensionaly untrue and computational context, don't mean much to me :(</p>",
        "id": 160079478,
        "sender_full_name": "Peter Hoffmann",
        "timestamp": 1551863928
    },
    {
        "content": "<p>I've just taken a look at the chapter, it actually contains the sort of example you're looking for, in 11.3.</p>",
        "id": 160079825,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1551864257
    },
    {
        "content": "<p>The  problem is I don't understand what is happening with the example. How would the rules of Lean try to reduce the expression? Where is the problem?</p>",
        "id": 160079995,
        "sender_full_name": "Peter Hoffmann",
        "timestamp": 1551864433
    },
    {
        "content": "<p>Is the problem that you can't even apply the reduction rules to this expression, or is the problem that if you do, you will be reducing forever?</p>",
        "id": 160080253,
        "sender_full_name": "Peter Hoffmann",
        "timestamp": 1551864628
    },
    {
        "content": "<p>I mean somehow, I get that x is turned into 0 + x, and that is turned into 0 + 0 + x and so on..</p>",
        "id": 160080536,
        "sender_full_name": "Peter Hoffmann",
        "timestamp": 1551864926
    },
    {
        "content": "<p>If you really want to dig deep</p>",
        "id": 160080824,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551865192
    },
    {
        "content": "<p>read: <a href=\"https://github.com/digama0/lean-type-theory/releases\" target=\"_blank\" title=\"https://github.com/digama0/lean-type-theory/releases\">https://github.com/digama0/lean-type-theory/releases</a></p>",
        "id": 160080825,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551865194
    },
    {
        "content": "<p>All the rules Lean uses to reduce terms are described in detail</p>",
        "id": 160080888,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551865226
    },
    {
        "content": "<p>specifically, you'll want to read up on iota reduction</p>",
        "id": 160080991,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551865339
    },
    {
        "content": "<p>(and if you're not familiar with them, all the other greek letter reductions too)</p>",
        "id": 160081034,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551865376
    },
    {
        "content": "<p>There must be some level of intermediate explanation, before we get down to the actual reduction rules written in gobbledygook (sorry, Mario :-)</p>",
        "id": 160081149,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551865538
    },
    {
        "content": "<p>Intermediate explanation would be nice.</p>",
        "id": 160081356,
        "sender_full_name": "Peter Hoffmann",
        "timestamp": 1551865727
    },
    {
        "content": "<p>More or less, it's because the iota reduction rules mean recursors reduce when applied to a constructor. In this case the recursor is <code>eq.rec</code> and the constructor is <code>eq.refl</code>. But the equality proof wasn't constructed with <code>eq.refl</code>, and moreover cannot be constructed with <code>eq.refl</code>, so it cannot reduce.</p>",
        "id": 160082318,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551866726
    },
    {
        "content": "<p>If it did reduce, the resulting expression might not even type check.</p>",
        "id": 160082501,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551866905
    },
    {
        "content": "<p>But this only speak to consequences of the way the reduction is defined in Lean. I think Peter's asking why they're set up in such a way (to which I can only provides an answer that goes full circle, because it avoids issues with functional extensionality).</p>",
        "id": 160082840,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1551867258
    },
    {
        "content": "<p>I don't quite follow</p>",
        "id": 160083081,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551867493
    },
    {
        "content": "<p>Why is it set up this way? It's because extensionality breaks strong normalization of terms</p>",
        "id": 160083097,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551867519
    },
    {
        "content": "<p>You can make goofy terms that will cause the type checking to never terminate, if I remember correctly</p>",
        "id": 160083131,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551867554
    },
    {
        "content": "<p>An example of one such term is what I thought Peter was looking for :).</p>",
        "id": 160083211,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1551867637
    },
    {
        "content": "<p>I mean, it would be nice to have a precise definition of \"computational content\", and a proof that functional extensionality breaks this.</p>",
        "id": 160083237,
        "sender_full_name": "Peter Hoffmann",
        "timestamp": 1551867659
    },
    {
        "content": "<p>I mean, \"computational content\" is a very abstract thing. Goes beyond how lean works.</p>",
        "id": 160083289,
        "sender_full_name": "Peter Hoffmann",
        "timestamp": 1551867717
    },
    {
        "content": "<p>But this is getting to a bit meta level, with what language is one supposed to prove such a thing.</p>",
        "id": 160083373,
        "sender_full_name": "Peter Hoffmann",
        "timestamp": 1551867788
    },
    {
        "content": "<p>computational content: anything that isn't a proposition</p>",
        "id": 160083483,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551867886
    },
    {
        "content": "<p>proof that functional extensionality breaks this: exactly 11.3 in theorem proving in lean :(</p>",
        "id": 160083506,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551867917
    },
    {
        "content": "<p>just take it on faith</p>",
        "id": 160083600,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551868018
    },
    {
        "content": "<p>unless you want to spend time learning the lambda calculus reduction rules and working out some examples</p>",
        "id": 160083623,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551868040
    },
    {
        "content": "<p>Here's an example from a thread a while ago </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">not_refl</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">true</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">does_not_reduce_to_zero</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">not_refl</span> <span class=\"err\">$</span>\n<span class=\"mi\">0</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">does_not_reduce_to_zero</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">proofs</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">does_not_reduce_to_zero</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">does_not_reduce_to_zero</span>\n</pre></div>",
        "id": 160083627,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551868052
    },
    {
        "content": "<p>Here's a better example</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">multiset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">S_eq_T</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">m</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">n&#39;</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">S_eq_T</span> <span class=\"n\">n</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">n&#39;</span>\n</pre></div>",
        "id": 160083872,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551868299
    },
    {
        "content": "<p>If the <code>eq.rec</code> in the definition of <code>n'</code> cannot reduce, because <code>n</code> has type <code>X S</code>, which is not definitionally equal to <code>X T</code>, so it would no longer type check after reduction.</p>",
        "id": 160083991,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551868402
    }
]