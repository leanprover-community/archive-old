[
    {
        "content": "<p>Is there an easy way to rewrite <code>nat.succ nat.succ 0</code> into <code>2</code> without having to define it in a separate theorem then using that theorem in a <code>rw</code>?</p>",
        "id": 192433480,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1585680774
    },
    {
        "content": "<p>you can use <code>change 2 = _</code></p>",
        "id": 192433867,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585680965
    },
    {
        "content": "<p><code>rw (show nat.succ (nat.succ 0) = 2, by rfl)</code></p>",
        "id": 192433941,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585681010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Shouldn't that be <code>... from rfl</code>?</p>",
        "id": 192434254,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585681165
    },
    {
        "content": "<p>or <code>by refl</code> to save one character</p>",
        "id": 192434316,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585681193
    },
    {
        "content": "<p>or <code>norm_num [nat.succ_eq_add_one]</code></p>",
        "id": 192435613,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585681803
    },
    {
        "content": "<p>What does <code>show</code> do? Is for inline theorems?</p>",
        "id": 192450392,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1585689177
    },
    {
        "content": "<p><code>show t, from e</code> is an expression of type <code>t</code>, equal to <code>e</code></p>",
        "id": 192451355,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585689698
    }
]