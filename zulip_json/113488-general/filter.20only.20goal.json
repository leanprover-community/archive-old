[
    {
        "content": "<p>It would be nice to have a tactic state filter displaying only goals. I just ran an <code>apply</code> spawning 8 goals, and I'd like to quickly check whether they all seem provable.</p>",
        "id": 207885285,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598297012
    },
    {
        "content": "<p>Btw, is there any news about the fight to make widget filters persistent?</p>",
        "id": 207885314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598297038
    },
    {
        "content": "<p>I don't know what the story for the widget tactic state filters is, but if you have the tactic state in text mode, the \"goals only\" filter should do this, right?</p>",
        "id": 207885491,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598297133
    },
    {
        "content": "<p>I knew I saw it somewhere!</p>",
        "id": 207885877,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598297317
    },
    {
        "content": "<p>But I couldn't find it in the drop-down menu. The issue is it hasn't been ported to the widget view.</p>",
        "id": 207885926,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598297337
    },
    {
        "content": "<p>Can someone remind me how the naming convention works when you have 8 explicit arguments to a lemma?</p>",
        "id": 207888307,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598298600
    },
    {
        "content": "<p>And the lemma has half a dozen variations.</p>",
        "id": 207888638,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598298746
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">has_deriv_at_integral_on_of_dominated_loc_of_deriv_le</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">second_countable_topology</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F&#39;</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">bound</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Œµ_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hF_meas</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span><span class=\"err\">·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"err\">ùìù</span> <span class=\"n\">x‚ÇÄ</span><span class=\"o\">,</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hF_int</span> <span class=\"o\">:</span> <span class=\"n\">integrable_on</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">x‚ÇÄ</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">Œº</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hF&#39;_meas</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">ball</span> <span class=\"n\">x‚ÇÄ</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"n\">F&#39;</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_bound</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span><span class=\"err\">·µê</span> <span class=\"n\">a</span> <span class=\"err\">‚àÇ</span> <span class=\"n\">Œº</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">ball</span> <span class=\"n\">x‚ÇÄ</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">F&#39;</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"err\">‚à•</span> <span class=\"bp\">‚â§</span> <span class=\"n\">bound</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bound_measurable</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"n\">bound</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">bound_integrable</span> <span class=\"o\">:</span> <span class=\"n\">integrable_on</span> <span class=\"n\">bound</span> <span class=\"n\">s</span> <span class=\"n\">Œº</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_diff</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span><span class=\"err\">·µê</span> <span class=\"n\">a</span> <span class=\"err\">‚àÇ</span> <span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">ball</span> <span class=\"n\">x‚ÇÄ</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F&#39;</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"err\">‚à´</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">‚à´</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">F&#39;</span> <span class=\"n\">x‚ÇÄ</span> <span class=\"n\">a</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"n\">x‚ÇÄ</span>\n</code></pre></div>",
        "id": 207888832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598298842
    },
    {
        "content": "<p>now the naming system isn't scaling</p>",
        "id": 207889228,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598299043
    },
    {
        "content": "<p>This theorem needs a doc comment</p>",
        "id": 207891801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598300223
    },
    {
        "content": "<p>and the name should be similar words as what you write in the doc comment</p>",
        "id": 207891854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598300245
    },
    {
        "content": "<p><code>/-- Differentiation under the integral assuming 8 things, including a local domination and Lipschitz condition-/</code></p>",
        "id": 207892142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598300385
    },
    {
        "content": "<p>Oops, that's not this variation.</p>",
        "id": 207892247,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598300426
    },
    {
        "content": "<p>I meant `/-- Differentiation under the integral assuming 8 things, including a local domination and derivative bound. -/</p>",
        "id": 207892299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598300454
    },
    {
        "content": "<p>So the point of the theorem is differentiating an integral?</p>",
        "id": 207892367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598300492
    },
    {
        "content": "<p>sure</p>",
        "id": 207892378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598300501
    },
    {
        "content": "<p>hence the <code>has_deriv_at_integral_on</code></p>",
        "id": 207892392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598300515
    },
    {
        "content": "<p>I would start with that</p>",
        "id": 207892448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598300530
    },
    {
        "content": "<p>add qualifiers when it starts to conflict with other theorems</p>",
        "id": 207892484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598300553
    },
    {
        "content": "<p>Not sure you need to state it with <code>Œº.restrict s</code>: if you have a version without the <code>s</code> (with usual integral for the full measure) and if you apply it to <code>Œº.restrict s</code>, doesn't it give exactly the statement you wrote?</p>",
        "id": 207892902,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1598300760
    },
    {
        "content": "<p>Yes indeed, the proof is exactly applying the absolute result, but I thought we still wanted the statement. Maybe not actually, but the absolute result is not much easier to name.</p>",
        "id": 207893061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598300844
    }
]