[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n<span class=\"c1\">--import algebra.group_action_hom</span>\n\n<span class=\"c1\">-- one_smul : 1 • b = b</span>\n<span class=\"k\">#print</span> <span class=\"n\">one_smul</span> <span class=\"c1\">-- simp</span>\n\n<span class=\"c1\">-- smul_zero : a • 0 = 0</span>\n<span class=\"k\">#print</span> <span class=\"n\">smul_zero</span> <span class=\"c1\">-- simp</span>\n\n<span class=\"c1\">-- smul_add : a • (b₁ + b₂) = a • b₁ + a • b₂</span>\n<span class=\"k\">#print</span> <span class=\"n\">smul_add</span> <span class=\"c1\">-- no simp here, uncomment second import to get it</span>\n\n<span class=\"c1\">-- smul_neg : r • -x = -(r • x)</span>\n<span class=\"k\">#print</span> <span class=\"n\">smul_neg</span> <span class=\"c1\">-- simp</span>\n\n<span class=\"c1\">-- smul_sub : r • (x - y) = r • x - r • y</span>\n<span class=\"k\">#print</span> <span class=\"n\">smul_sub</span> <span class=\"c1\">-- no simp anywhere in mathlib at all</span>\n\n<span class=\"c1\">-- mul_smul : (x * y) • b = x • y • b</span>\n<span class=\"k\">#print</span> <span class=\"n\">mul_smul</span> <span class=\"c1\">-- reducible and protected ??</span>\n</code></pre></div>\n<p>Apparently some people like <code>smul_add</code> as a <code>simp</code> lemma but not <code>mul_smul</code>. I was trying to make some sense of this. We just have a set-up of a monoid acting on an add_comm_group. Is there some \"general theory\" which tells me how to set up a natural confluent rewrite system? A lot of the <code>simp</code> lemmas seem to be \"pushing brackets outwards\", an idea which depends on priorities. Also <code>neg</code> seems to be being pushed outwards. Is that clearly the way to send it? There must be a lot known about what's going on here. Why is <code>mul_smul</code> not a <code>simp</code> lemma?</p>",
        "id": 230190594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615671634
    },
    {
        "content": "<p>I'm also pretty fuzzy on the boundary between simp and non-simp here. My understanding is that generally <code>distrib</code> type lemmas are not <code>simp</code>, and are instead are included by hand, or left to <code>abel</code> and <code>ring</code>.</p>",
        "id": 230191523,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615672773
    },
    {
        "content": "<p>I think a simp set containing all the <code>distrib</code> type lemmas would be good.</p>",
        "id": 230191527,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615672789
    },
    {
        "content": "<p>(Potentially even with a wrapper tactic, called either <code>distrib</code> or <code>expand</code>.)</p>",
        "id": 230191986,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615672911
    },
    {
        "content": "<p>I have no idea about which way one should push negations... :-) I guess we've mostly got the default the <code>simp</code> pull negations outwards, and we have <code>push_neg</code> when you want to do the opposite. I would also love to hear an account of why this is best.</p>",
        "id": 230192197,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615672976
    },
    {
        "content": "<p>(My experience setting up <code>simp</code> lemmas for category theory led me to believe <code>simp</code> is too blunt a tool. Consider things like <code>functor.map_comp : F.map (f ≫ g) = F.map f ≫ F.map g</code>. When you a primarily \"reasoning about the functor\", you want this to be a <code>simp</code> lemma, so that you can get to the point of seeing what <code>F</code> is doing on \"atomic\" things, where hopefully you can use the definitional lemmas associated to <code>F</code>. On the other hand, when you are primarily \"reasoning about the morphisms\", you want it the other way, because hopefully you have an equation for <code>f ≫ g</code>. This means you want it to be a <code>simp</code> lemma while setting up the basic theory of functors, but then it's less clear afterwards. Because APIs get written linearly, often this effect means we end up with <code>simp</code> attributes lasting too long.</p>\n<p>One solution is lots of auxilliary tactics: <code>push_functor</code> and <code>pull_functor</code>, etc. I think these would be good additions in many domains across mathlib.</p>\n<p>Another solution is to give <code>rewrite_search</code> some further love --- perhaps even hooking it up to <code>gptf</code>. This problem of <code>simp</code> rarely actually being confluent was what motivated me to start writing it.)</p>",
        "id": 230193048,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615673334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Another option is to be more conservative with tagging things with <code>simp</code> and locally enabling simp sets (can we enable entire simp sets locally?)</p>",
        "id": 230193607,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615673684
    },
    {
        "content": "<p>So that when we set up the basics of functors, in that file <code>map_comp</code> is simp. But in other files the converse is marked with <code>simp</code>.</p>",
        "id": 230193624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615673716
    },
    {
        "content": "<p>This would be a good feature, to be able to locally turn on a simp set (so for the rest of the file just <code>simp</code> will include those lemmas).</p>",
        "id": 230193868,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615674007
    },
    {
        "content": "<p>It seems completely doable.</p>",
        "id": 230193877,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615674026
    },
    {
        "content": "<p>It would be cool if you could say \"simp things to this order\", ie <code>simp priority [(*), (+), ring_hom.coe_fn]</code> or something would try to pull <code>*</code> outside of <code>+</code>, and both <code>+</code> and <code>*</code> outside of ring_hom applications</p>",
        "id": 230199354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615680642
    },
    {
        "content": "<p>Maybe a general mechanism for <code>push_X</code>, <code>pull_X</code> tactics could support something like this.</p>",
        "id": 230200625,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615682328
    }
]