[
    {
        "content": "<p>We've had a lot of messages recently about people wanting to point their mathlib dep at a certain branch or commit. The directions have sometimes been: descend into the mathlib dep repo, git checkout the commit, make sure the toml points to that commit, leanproject get-m, possibly other steps. Should there be a <code>leanproject get-m-at ...</code> that can take a branch name, PR #, or commit hash? It would also fetch the built oleans. I'm starting to take a look at the git python library to see how leanproject currently does HEAD fetching.</p>",
        "id": 208729247,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598985593
    },
    {
        "content": "<p>I have a related request: in the <code>mathlib</code> directory, I often want to do <code>leanproject get-cache</code> at a certain commit. My current workflow is the following, but I would also like something like <code>leanproject get-cache origin/foo</code> or something. (This typically happens when I have a few commits on top of a branch <code>origin/foo</code>.)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">origin</span><span class=\"bp\">/</span><span class=\"n\">foo</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"bp\">&lt;</span><span class=\"n\">previous</span><span class=\"bp\">-</span><span class=\"n\">branch</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 208733252,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598987261
    },
    {
        "content": "<p>It would be great if <code>get-cache</code> could default to <code>HEAD</code> and try any of the last 10 commits.</p>",
        "id": 208734170,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598987647
    },
    {
        "content": "<p>Please open issues (or PRs!). I'll try to find some leanproject time soonish.</p>",
        "id": 208736941,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598989052
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-tools/issues/77\">https://github.com/leanprover-community/mathlib-tools/issues/77</a></p>",
        "id": 208737975,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598989586
    },
    {
        "content": "<p>I've been trying to understand how <code>get-mathlib-cache</code> works currently, there's some implicit reliance on <code>HEAD</code> that I've been trying to understand how to modify. No PR yet, unfortunately.</p>",
        "id": 208738097,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598989649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/get-mathlib-at-commit/near/208734170\">said</a>:</p>\n<blockquote>\n<p>It would be great if <code>get-cache</code> could default to <code>HEAD</code> and try any of the last 10 commits.</p>\n</blockquote>\n<p>I've found some time to work on <code>leanproject</code> today. Earlier I cleanup a bit the list of open PRs and issues, and now I'm turning to feature requests. I'd like to work on that one, but I find it too poorly specified. What do you want if the current commit has several parents?</p>",
        "id": 212921707,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602345095
    },
    {
        "content": "<p>Note that this feature request is also dangerous if files are deleted. If leanproject is asked for cache and don't find it, then checks out an old commit, get oleans and checks out the head commit again then you'll get zombie oleans for any files that was deleted in the mean time. We could probably call <code>delete-zombies</code> as an intermediate step.</p>",
        "id": 212921898,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602345368
    },
    {
        "content": "<p>In fact I would probably need more explanations about the kind of workflow that triggers this need. I'm doing blind thinking here because I never see this need (neither when working on mathlib nor when working on the sphere eversion project that depends on mathlib).</p>",
        "id": 212921927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602345473
    },
    {
        "content": "<blockquote>\n<p>What do you want if the current commit has several parents?</p>\n</blockquote>\n<p>You could stop with an error, listing the possibilities (then the user has to specify the hash when calling <code>leanproject</code> again). Or you could even prompt the user to choose from the list of options.</p>",
        "id": 212921970,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602345494
    },
    {
        "content": "<blockquote>\n<p>In fact I would probably need more explanations about the kind of workflow that triggers this need.</p>\n</blockquote>\n<p>I'm less sure about trying previous commits by default, but for getting the cache at a specific commit, see e.g. <a href=\"#narrow/stream/113488-general/topic/Refresh.20mathlib.20in.20local.20branch/near/212683837\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Refresh.20mathlib.20in.20local.20branch/near/212683837</a></p>",
        "id": 212922057,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602345654
    },
    {
        "content": "<p>Being forced to choose between the multiple parents sounds like the right choice to me.</p>",
        "id": 212922141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602345787
    },
    {
        "content": "<p>Do I understand correctly that all those scenarios involve working on mathlib itself?</p>",
        "id": 212922220,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602345926
    },
    {
        "content": "<p>Yes, at least in my experience.</p>",
        "id": 212922320,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602346082
    },
    {
        "content": "<p>There are infinitely many ways to mess up with git, and we cannot turn <code>leanproject</code> into a full git frontend (and this would probably make things more complicated). But I think we could add the following two commands:</p>",
        "id": 212922535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602346378
    },
    {
        "content": "<p>For people who want to start on some new contribution, <code>leanproject pr my_branch</code> would do:</p>\n<ul>\n<li>check repo is clean</li>\n<li>git checkout master                     </li>\n<li>git pull</li>\n<li>leanproject get-cache   </li>\n<li>git checkout -b my_branch</li>\n</ul>",
        "id": 212922554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602346419
    },
    {
        "content": "<p>For people who started work on some contribution on branch <code>my_branch</code> (or got it from <code>leanproject get</code>) but want to incorporate changes from master, <code>leanproject rebase</code> would do:</p>\n<ul>\n<li>get name of current branch my_branch, check it's not master</li>\n<li>check repo is clean                                 </li>\n<li>git checkout master                                 </li>\n<li>git pull                                            </li>\n<li>leanproject get-cache                               </li>\n<li>git checkout my_branch   </li>\n<li>git rebase master</li>\n</ul>\n<p>Note how <code>git rebase</code> is the last command so hopefully any <code>git</code> mess can be sorted out without <code>leanproject</code>-added difficulty.</p>",
        "id": 212922634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602346533
    },
    {
        "content": "<p>How does that sound?</p>",
        "id": 212922639,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602346540
    },
    {
        "content": "<p>And for more fine-tuned dangerous stunts, I can add an optional argument to <code>leanproject get-mathlib-cache</code> and <code>leanproject get-cache</code> that is a git sha, try to unpack the corresponding archive and run <code>delete-zombie</code>.</p>",
        "id": 212922806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602346747
    },
    {
        "content": "<p>Are multiple local caches supported at the moment? Or is only the most recent kept locally?</p>",
        "id": 212922896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602346856
    },
    {
        "content": "<p>Yes, they're all saved in <code>.mathlib/</code>. (Which reminds me, I should probably clean it up on my computer.)</p>",
        "id": 212922978,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602346971
    },
    {
        "content": "<p>If so, then the behavior that makes the most sense for me for <code>get-cache</code> is:</p>\n<p><code>get-cache &lt;commitish=HEAD&gt;</code>: find and download all caches that are the first in each line of ancestors from the current commit. If this is exactly one cache, activate it. If not, print out all the downloaded sha1s and ask the user to run the command again.</p>",
        "id": 212923057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602347052
    },
    {
        "content": "<p>We could also check at each <code>get-cache</code> how many files there are in the cache and propose to delete the oldest when there are more that 50 or something. But we would need to find a way not to keep asking if people want to keep their cache.</p>",
        "id": 212923086,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602347134
    },
    {
        "content": "<p>I pushed these three new features, but there are not well tested at all. It would be nice if people who asked for this could test before release (it means you need to clone the repository and <code>pip install</code> from there). <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span></p>",
        "id": 212933824,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602362723
    },
    {
        "content": "<p>See <code>leanproject pr --help</code>, <code>leanproject rebase --help</code> and <code>leanproject get-cache --help</code>.</p>",
        "id": 212933880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602362803
    },
    {
        "content": "<p>And let me repeat that using the <code>--rev</code> option of <code>get-cache</code> (and <code>get-mathlib-cache</code>) is at your own risk. I very much prefer workflows (as in <code>pr</code> and <code>rebase</code>) rather than hacking around randomly.</p>",
        "id": 212933939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602362910
    },
    {
        "content": "<p>Thanks for the <code>--rev</code> command, I'll certainly be using that</p>",
        "id": 212933949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602362936
    },
    {
        "content": "<p>I'm still interested in reading the <em>workflow</em> that makes you need that option.</p>",
        "id": 212933960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602362964
    },
    {
        "content": "<p>My workflow is typically jumping between different branches, and wanting to get a cache copy of mathlib from either: a) the head or head~n commit of that branch, or b) the last copy of origin/master I merged into that branch</p>",
        "id": 212934034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602363058
    },
    {
        "content": "<p>Where the choice between a) and b) depends how deep within mathlib my change is</p>",
        "id": 212934043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602363094
    },
    {
        "content": "<p>When do you want to do that and <code>leanproject pr</code> or <code>leanproject rebase</code> wouldn't suffice?</p>",
        "id": 212934090,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602363165
    },
    {
        "content": "<p>I don't really like to let other scripts touch my working tree through git, and prefer to be in control of that myself - it makes it easier for me to recover from things like forgetting to switch branch before editing</p>",
        "id": 212934270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602363485
    },
    {
        "content": "<p><code>leanproject</code> is already doing that anyway. But your answer is enough for me, it means you want something hackish/low level, and hopefully you now have it.</p>",
        "id": 212934353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602363663
    },
    {
        "content": "<p>In what sense is it doing it already? I suppose I've only run <code>get-cache</code> and <code>delete-zombies</code> in the last few weeks...</p>",
        "id": 212934423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602363758
    },
    {
        "content": "<p><code>get-cache</code> is overwriting your lean files.</p>",
        "id": 212934502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602363873
    },
    {
        "content": "<p>It is? I thought it only overwrote olean files. (I'm using it mainly in mathlib)</p>",
        "id": 212935360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602365346
    },
    {
        "content": "<p>I think caches did contain <code>.lean</code> files until a few months ago (<a href=\"https://github.com/leanprover-community/mathlib/issues/3616\">#3616</a>), but caches generated since then don't.</p>",
        "id": 212935412,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602365413
    },
    {
        "content": "<p>I remember <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  talking about possibly changing <code>leanproject</code> to only extract <code>.olean</code> files from the archive, and that seemed like a good idea to me.</p>",
        "id": 212935560,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602365682
    },
    {
        "content": "<p>This is independent, <code>get-mathlib-cache</code> still does <code>git reset --hard</code> in the <code>_target</code> folder.</p>",
        "id": 212935729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602365958
    },
    {
        "content": "<p>The target folder is git-ignored though, so morally doesn't feel like part of the working tree</p>",
        "id": 212951569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602397796
    },
    {
        "content": "<p>I can confirm that <code>--rev</code> worked for me - thanks for adding that!</p>\n<p>It would be great if it could resolve commitish objects for me; so I could write</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>leanproject get-cache --rev eric-wieser/monoid_algebra-reorder\n</code></pre></div>\n\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>leanproject get-cache --rev <span class=\"k\">$(</span>git rev-parse eric-wieser/monoid_algebra-reorder<span class=\"k\">)</span>\n</code></pre></div>",
        "id": 212965740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602423125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> can you try with current master?</p>",
        "id": 212967857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602427194
    },
    {
        "content": "<p>Patch looks good to me, thanks! Will try it later or tomorrow.</p>",
        "id": 212968623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602428604
    },
    {
        "content": "<p>I will try out these new features tomorrow. They are indeed exactly what I need for my workflow (which is indeed when working on mathlib itself), and they look great! My use cases will be:</p>\n<ul>\n<li><code>leanproject pr</code> to make a new branch</li>\n<li><code>leanproject rebase</code> to update my branch to the newest mathlib, while getting the best available olean files.</li>\n<li><code>leanproject get-cache --rev HEAD~n</code> or <code>leanproject get-cache --rev origin/master</code>: I'm a couple commits ahead in my branch than <code>origin</code> and I need to get the best available olean files (either because I switched between branches or I messed something up). This will also be quicker than <code>leanproject rebase</code> because it usually doesn't require downloading new files.</li>\n</ul>",
        "id": 212987032,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602459713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/get-mathlib-at-commit/near/212921707\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/get-mathlib-at-commit/near/208734170\">said</a>:</p>\n<blockquote>\n<p>It would be great if <code>get-cache</code> could default to <code>HEAD</code> and try any of the last 10 commits.</p>\n</blockquote>\n<p>[..] I find it too poorly specified. What do you want if the current commit has several parents?</p>\n</blockquote>\n<p>It should ask both of the parents (and grandparents, etc.) for oleans.  My usecase is that I clone a PR branch from github where the author has just merged master, and I'd like leanproject to find a \"close\" commit with oleans.  It doesn't matter if it's the previous commit on the branch, or on master.  In this case, really anything is better than nothing.</p>",
        "id": 213010027,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602490996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/get-mathlib-at-commit/near/212921898\">said</a>:</p>\n<blockquote>\n<p>Note that this feature request is also dangerous if files are deleted. If leanproject is asked for cache and don't find it, then checks out an old commit, get oleans and checks out the head commit again then you'll get zombie oleans for any files that was deleted in the mean time.</p>\n</blockquote>\n<p>Indeed, this seems really dangerous.  I would have expected that leanproject just unpacks the olean tarball <em>without</em> checking out different commits.</p>",
        "id": 213010123,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602491062
    },
    {
        "content": "<p>My understanding was that with the <code>--rev</code> argument, <code>leanproject</code> does no \"checking out\" at all</p>",
        "id": 213010869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602491610
    },
    {
        "content": "<p>Maybe to illustrate my workflow issue, I just wanted to check out Eric's branch:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ leanproject get mathlib:eric-wieser/monoid_algebra-tweaks\n... Failed to download ...\n$ cd mathlib_eric-wieser/monoid_algebra-tweaks/\n$ leanproject get-mathlib-cache --rev=HEAD^\n... Found mathlib oleans ...\n</code></pre></div>\n\n<p>Ideally, <code>leanproject get</code> would have tried a few commits so that I don't have to guess <code>HEAD^</code>.  But <code>--rev</code> is already a big improvement.</p>",
        "id": 213010904,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602491638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/get-mathlib-at-commit/near/213010869\">said</a>:</p>\n<blockquote>\n<p>My understanding was that with the <code>--rev</code> argument, <code>leanproject</code> does no \"checking out\" at all</p>\n</blockquote>\n<p>The current implementation seems to be more sensible than the description I responded to, yes.</p>",
        "id": 213010990,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602491691
    },
    {
        "content": "<p>I think the algorithm for finding caches ought to be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">find_parents</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"c1\"># breadth first search to find parents</span>\n    <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n    <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">c</span><span class=\"p\">}</span>\n    <span class=\"k\">while</span> <span class=\"n\">queue</span><span class=\"p\">:</span>\n        <span class=\"n\">new_queue</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n        <span class=\"n\">visited</span> <span class=\"o\">|=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">commit</span> <span class=\"ow\">in</span> <span class=\"n\">queue</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">found</span><span class=\"p\">[</span><span class=\"n\">commit</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">download</span><span class=\"p\">(</span><span class=\"n\">commit</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"n\">NotFound</span><span class=\"p\">:</span>\n                <span class=\"n\">new_queue</span> <span class=\"o\">|=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">commit</span><span class=\"o\">.</span><span class=\"n\">parents</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">visited</span>\n        <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">new_queue</span>\n\n    <span class=\"c1\"># Prune ancestors - if a build is found for C and A, then we always prefer C</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># A -- B -- D -- E</span>\n    <span class=\"c1\">#  \\       /</span>\n    <span class=\"c1\">#   C------</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"n\">commit</span><span class=\"p\">:</span> <span class=\"n\">cache</span>\n        <span class=\"k\">for</span> <span class=\"n\">commit</span><span class=\"p\">,</span> <span class=\"n\">cache</span> <span class=\"ow\">in</span> <span class=\"n\">found</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span> <span class=\"p\">(</span><span class=\"n\">commit</span><span class=\"o\">.</span><span class=\"n\">is_ancestor_of</span><span class=\"p\">(</span><span class=\"n\">commit_2</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">commit_2</span> <span class=\"ow\">in</span> <span class=\"n\">found</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 213011635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602492141
    },
    {
        "content": "<p>There's also the super-simple version in <code>fetch_olean_cache.sh</code> used for CI.  It runs <code>git log -20</code> (last 20 commits) and picks the first commit which has oleans.</p>",
        "id": 213014652,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602494161
    },
    {
        "content": "<p>On Windows. What am I doing wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Floris@MSI MINGW64 /d/projects/mathlib-tools (master)\n$ python3 -m pip uninstall mathlibtools\nFound existing installation: mathlibtools 0.0.5\nUninstalling mathlibtools-0.0.5:\n  Would remove:\n    c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\mathlibtools-0.0.5.dist-info\\*\n    c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\mathlibtools\\*\n    c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\scripts\\leanproject.exe\nProceed (y/n)? y\n  Successfully uninstalled mathlibtools-0.0.5\n\nFloris@MSI MINGW64 /d/projects/mathlib-tools (master)\n$ python3 -m pip install mathlibtools\nCollecting mathlibtools\n  Downloading mathlibtools-0.0.10-py3-none-any.whl (21 kB)\nRequirement already satisfied: certifi in c:\\users\\floris\\appdata\\roaming\\python\\python37\\site-packages (from mathlibtools) (2019.6.16)\nRequirement already satisfied: PyGithub in c:\\users\\floris\\appdata\\roaming\\python\\python37\\site-packages (from mathlibtools) (1.43.7)\nRequirement already satisfied: toml&gt;=0.10.0 in c:\\users\\floris\\appdata\\roaming\\python\\python37\\site-packages (from mathlibtools) (0.10.0)\nRequirement already satisfied: PyYAML&gt;=3.13 in c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from mathlibtools) (5.1.2)\nRequirement already satisfied: pydot in c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from mathlibtools) (1.4.1)\nRequirement already satisfied: requests in c:\\users\\floris\\appdata\\roaming\\python\\python37\\site-packages (from mathlibtools) (2.22.0)\nRequirement already satisfied: gitpython&gt;=2.1.11 in c:\\users\\floris\\appdata\\roaming\\python\\python37\\site-packages (from mathlibtools) (2.1.11)\nRequirement already satisfied: Click in c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from mathlibtools) (7.1.1)\nRequirement already satisfied: networkx in c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from mathlibtools) (2.3)\nRequirement already satisfied: tqdm in c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from mathlibtools) (4.45.0)\nRequirement already satisfied: deprecated in c:\\users\\floris\\appdata\\roaming\\python\\python37\\site-packages (from PyGithub-&gt;mathlibtools) (1.2.5)\nRequirement already satisfied: pyjwt in c:\\users\\floris\\appdata\\roaming\\python\\python37\\site-packages (from PyGithub-&gt;mathlibtools) (1.7.1)\nRequirement already satisfied: pyparsing&gt;=2.1.4 in c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from pydot-&gt;mathlibtools) (2.4.7)\nRequirement already satisfied: idna&lt;2.9,&gt;=2.5 in c:\\users\\floris\\appdata\\roaming\\python\\python37\\site-packages (from requests-&gt;mathlibtools) (2.8)\nRequirement already satisfied: chardet&lt;3.1.0,&gt;=3.0.2 in c:\\users\\floris\\appdata\\roaming\\python\\python37\\site-packages (from requests-&gt;mathlibtools) (3.0.4)\nRequirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in c:\\users\\floris\\appdata\\roaming\\python\\python37\\site-packages (from requests-&gt;mathlibtools) (1.25.3)\nRequirement already satisfied: gitdb2&gt;=2.0.0 in c:\\users\\floris\\appdata\\roaming\\python\\python37\\site-packages (from gitpython&gt;=2.1.11-&gt;mathlibtools) (2.0.5)\nRequirement already satisfied: decorator&gt;=4.3.0 in c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages (from networkx-&gt;mathlibtools) (4.4.0)\nRequirement already satisfied: wrapt&lt;2,&gt;=1 in c:\\users\\floris\\appdata\\roaming\\python\\python37\\site-packages (from deprecated-&gt;PyGithub-&gt;mathlibtools) (1.11.2)\nRequirement already satisfied: smmap2&gt;=2.0.0 in c:\\users\\floris\\appdata\\roaming\\python\\python37\\site-packages (from gitdb2&gt;=2.0.0-&gt;gitpython&gt;=2.1.11-&gt;mathlibtools) (2.0.5)\nInstalling collected packages: mathlibtools\nSuccessfully installed mathlibtools-0.0.10\n\nFloris@MSI MINGW64 /d/projects/mathlib-tools (master)\n$ leanproject --version\nleanproject, version 0.0.10\n\nFloris@MSI MINGW64 /d/projects/mathlib-tools (master)\n$ leanproject get-cache -h\nUsage: leanproject get-cache [OPTIONS]\n\n  Restore cached olean files.\n\nOptions:\n  --force     Get cache even if the repository is dirty.\n  -h, --help  Show this message and exit.\n\nFloris@MSI MINGW64 /d/projects/mathlib-tools (master)\n$ leanproject rebase -h\nUsage: leanproject [OPTIONS] COMMAND [ARGS]...\nTry 'leanproject -h' for help.\n\nError: No such command 'rebase'.\n\nFloris@MSI MINGW64 /d/projects/mathlib-tools (master)\n$ leanproject pr --help\nUsage: leanproject [OPTIONS] COMMAND [ARGS]...\nTry 'leanproject -h' for help.\n\nError: No such command 'pr'.\n\nFloris@MSI MINGW64 /d/projects/mathlib-tools (master)\n$ leanproject -h\nUsage: leanproject [OPTIONS] COMMAND [ARGS]...\n\n  Command line client to manage Lean projects depending on mathlib. Use\n  leanproject COMMAND --help to get more help on any specific command.\n\nOptions:\n  -u, --from-url TEXT   Override base url for olean cache.\n  -f, --force-download  Download olean cache without looking for a local\n                        version.\n\n  --no-lean-upgrade     Do not upgrade Lean version when upgrading mathlib.\n  --debug               Display python tracebacks in case of error.\n  --version             Show the version and exit.\n  -h, --help            Show this message and exit.\n\nCommands:\n  add-mathlib        Add mathlib to the current project.\n  build              Build the current project.\n  check              Check mathlib oleans are more recent than their sources\n  clean              Delete all olean files\n  decls              List declarations seen from this project If no file...\n  delete-zombies     Delete zombie oleans, .olean files with no matching...\n  get                Clone a project from a GitHub name or git url.\n  get-cache          Restore cached olean files.\n  get-mathlib-cache  If mathlib is a dependency, upgrade mathlib lean and...\n  global-install     Install mathlib user-wide.\n  global-upgrade     Upgrade user-wide mathlib\n  hooks              Setup git hooks for the current project.\n  import-graph       Write an import graph for this project.\n  mk-all             Creates all.lean importing everything from the project.\n  mk-cache           Cache olean files.\n  new                Create a new Lean project and prepare mathlib.\n  set-url            Set the default url where oleans should be fetched.\n  upgrade-mathlib    Upgrade mathlib (as a dependency or as the main...\n\nFloris@MSI MINGW64 /d/projects/mathlib-tools (master)\n$ leanproject --version\nleanproject, version 0.0.10\n\nFloris@MSI MINGW64 /d/projects/mathlib-tools (master)\n$ cd ../mathlib\nleanproject pr\nFloris@MSI MINGW64 /d/projects/mathlib ((665cc13c0...))\n$ leanproject pr foo\nUsage: leanproject [OPTIONS] COMMAND [ARGS]...\nTry 'leanproject -h' for help.\n\nError: No such command 'pr'.\n\nFloris@MSI MINGW64 /d/projects/mathlib ((665cc13c0...))\n$\n</code></pre></div>",
        "id": 213078624,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602531644
    },
    {
        "content": "<p>My impression from the README from <a href=\"https://github.com/leanprover-community/mathlib-tools\">https://github.com/leanprover-community/mathlib-tools</a> was that if I ran </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">python3</span> <span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">mathlibtools</span>\n</code></pre></div>\n\n<p>in the directory of <code>/mathlib-tools</code> I magically got the version from my repo. If that is false, how do I actually use the <code>leanproject</code> from the cloned repository?</p>",
        "id": 213079457,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602532273
    },
    {
        "content": "<p>Ok, I fixed the above issue. The incantation is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Floris</span><span class=\"bp\">@</span><span class=\"n\">MSI</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">/</span><span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">-</span><span class=\"n\">tools</span> <span class=\"o\">(</span><span class=\"n\">master</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span> <span class=\"n\">pip3</span> <span class=\"n\">install</span> <span class=\"bp\">.</span>\n</code></pre></div>\n\n<p>That should probably be mentioned in the <code>README</code>.</p>",
        "id": 213079743,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602532464
    },
    {
        "content": "<p>Oh, I see now: that is the last sentence of the README.</p>",
        "id": 213079901,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602532565
    },
    {
        "content": "<p>Some comments:</p>\n<ul>\n<li>Both <code>leanproject rebase</code> and <code>leanproject pr</code> work fine in the default case.</li>\n<li>They could print trace messages saying what it's doing (<code>Checking out master...</code>). Now they are just silent while they are pulling mathlib. They are also silent when the repo is dirty.</li>\n<li>Both of the following give an error</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ leanproject pr foo --debug\n$ leanproject pr --debug foo\n</code></pre></div>\n\n<ul>\n<li>Non-graceful error if branch <code>foo</code> already exists:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Floris@MSI MINGW64 /d/projects/mathlib (foo)\n$ leanproject --debug pr foo\nLooking for local mathlib oleans\nLooking for remote mathlib oleans\nTrying to download https://oleanstorage.azureedge.net/mathlib/9379050719fa9f2605289bd85a0fb29100084eb3.tar.xz\\xa0to C:\\Users\\Floris\\.mathlib\\9379050719fa9f2605289bd85a0fb29100084eb3.tar.xz\n100%|##########| 30.1M/30.1M [00:06&lt;00:00, 4.67MiB/s]\nFound mathlib oleans at https://oleanstorage.azureedge.net/mathlib/\nTraceback (most recent call last):\n  File \"C:\\Users\\Floris\\AppData\\Local\\Programs\\Python\\Python37-32\\Scripts\\leanproject-script.py\", line 11, in &lt;module&gt;\n    load_entry_point('mathlibtools==0.0.10', 'console_scripts', 'leanproject')()\n  File \"c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\mathlibtools\\leanproject.py\", line 359, in safe_cli\n    handle_exception(err, str(err))\n  File \"c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\mathlibtools\\leanproject.py\", line 63, in handle_exception\n    raise exc\n  File \"c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\mathlibtools\\leanproject.py\", line 357, in safe_cli\n    cli() # pylint: disable=no-value-for-parameter\n  File \"c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\click\\core.py\", line 829, in __call__\n    return self.main(*args, **kwargs)\n  File \"c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\click\\core.py\", line 782, in main\n    rv = self.invoke(ctx)\n  File \"c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\click\\core.py\", line 1259, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\click\\core.py\", line 1066, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\click\\core.py\", line 610, in invoke\n    return callback(*args, **kwargs)\n  File \"c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\mathlibtools\\leanproject.py\", line 342, in pr\n    proj().pr(branch_name, force)\n  File \"c:\\users\\floris\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\mathlibtools\\lib.py\", line 759, in pr\n    self.repo.git.checkout('-b', branch_name)\n  File \"C:\\Users\\Floris\\AppData\\Roaming\\Python\\Python37\\site-packages\\git\\cmd.py\", line 548, in &lt;lambda&gt;\n    return lambda *args, **kwargs: self._call_process(name, *args, **kwargs)\n  File \"C:\\Users\\Floris\\AppData\\Roaming\\Python\\Python37\\site-packages\\git\\cmd.py\", line 1014, in _call_process\n    return self.execute(call, **exec_kwargs)\n  File \"C:\\Users\\Floris\\AppData\\Roaming\\Python\\Python37\\site-packages\\git\\cmd.py\", line 825, in execute\n    raise GitCommandError(command, status, stderr_value, stdout_value)\ngit.exc.GitCommandError: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout -b foo\n  stderr: 'fatal: A branch named 'foo' already exists.'\n</code></pre></div>\n\n<ul>\n<li><code>leanproject rebase</code> errors on merge conflicts (the expected behavior is just that it succeeds, since rebasing is the last step anyway).</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Floris@MSI MINGW64 /d/projects/mathlib3 (stupid)\n$ leanproject rebase\nLooking for local mathlib oleans\nFound local mathlib oleans\nCmd('git') failed due to: exit code(1)\n  cmdline: git rebase master\n  stdout: 'First, rewinding head to replay your work on top of it...\nApplying: uglify\nUsing index info to reconstruct a base tree...\nM       src/measure_theory/borel_space.lean\nFalling back to patching base and 3-way merge...\nAuto-merging src/measure_theory/borel_space.lean\nCONFLICT (content): Merge conflict in src/measure_theory/borel_space.lean\nPatch failed at 0001 uglify\nResolve all conflicts manually, mark them as resolved with\n\"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\nYou can instead skip this commit: run \"git rebase --skip\".\nTo abort and get back to the state before \"git rebase\", run \"git rebase --abort\".'\n  stderr: 'error: Failed to merge in the changes.\nhint: Use 'git am --show-current-patch' to see the failed patch'\n</code></pre></div>",
        "id": 213081295,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602533520
    },
    {
        "content": "<p><code>leanproject get-cache --rev</code> seems to work well.</p>",
        "id": 213081604,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602533748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I'm trying to empty my leanproject backlog, but I don't understand you last complain when rebasing with conflicts. What do you expect? The output you pasted is exactly the intended one. You need to see the git error message in order to take appropriate action, right?</p>",
        "id": 215196353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604157820
    },
    {
        "content": "<p>Also I don't think I'm going to \"fix\" your issue with <code>--debug</code>. This is a global option of <code>leanproject</code>, it goes before typing a command. I don't see how duplicating it as an option to all commands would help.</p>",
        "id": 215196404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604157880
    }
]