[
    {
        "content": "<p>While making some changes discussed in the -T50000 thread, I realized the linarith argument parsing is wrong: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>fails, I guess because <code>using</code> is confused for an identifier.</p>\n<p>This is the opportunity to suggest a better pattern. I was thinking <code>linarith [t1, t2, t3]</code> could replace the current <code>linarith using [t1, t2, t3]</code>, and <code>linarith only [h1, h2, h3, t1, t2, t3]</code> could be a working version of <code>linarith h1 h2 h3 using [t1, t2, t3]</code>. The only problem: <code>linarith h1 h2 h3</code> doesn't include the goal by default, and I wanted to add <code>|-</code> for the option to do that. But <code>linarith only [h1, h2, h3, |-]</code> is a pattern we don't use anywhere else.</p>",
        "id": 166024275,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558273785
    },
    {
        "content": "<p>Any better ideas?</p>",
        "id": 166024276,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558273788
    },
    {
        "content": "<p>why not always include the goal?</p>",
        "id": 166024413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558274020
    },
    {
        "content": "<p>Just because, if the user says to only use certain hypotheses, it feels presumptuous to throw in the goal anyway. It's possible using the goal could slow things down. Although probably pretty rarely.</p>",
        "id": 166024622,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558274300
    },
    {
        "content": "<p>As far as the notation goes, that's the cleanest solution.</p>",
        "id": 166024626,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558274316
    },
    {
        "content": "<p>And I guess if you really don't want the goal then <code>exfalso; linarith only [h1, h2]</code> will get rid of it.</p>",
        "id": 166024642,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558274363
    },
    {
        "content": "<p>It seems like the goal is the primary indicator of what it is you are trying to show</p>",
        "id": 166024784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558274598
    },
    {
        "content": "<p>the hypotheses are just a big grab bag by comparison</p>",
        "id": 166024786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558274619
    },
    {
        "content": "<p>I'm not even sure that using exfalso when the goal isn't an inequality is a good idea</p>",
        "id": 166024830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558274662
    },
    {
        "content": "<p>There's a config option for that. I believe it was requested early on that the default should be <code>exfalso := tt</code>.</p>",
        "id": 166025477,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558275768
    },
    {
        "content": "<p>Incidentally, I was wrong at the start of the topic, <code>by linarith h using [f a]</code> parses just fine. It was a dumb mistake that was causing the failure.</p>",
        "id": 166025497,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558275840
    },
    {
        "content": "<p>I still like the look of <code>linarith only [h, f a]</code> though.</p>",
        "id": 166025551,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558275890
    }
]