[
    {
        "content": "<p>There's no access to multithreading from inside a <code>begin ... end</code> block, is there?</p>",
        "id": 163257466,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555147518
    },
    {
        "content": "<p><code>library_search</code> would <em>love</em> to fire off multiple tasks and just get an answer from the first one to succeed.</p>",
        "id": 163257478,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555147544
    },
    {
        "content": "<p>use <code>task</code></p>",
        "id": 163257976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555148358
    },
    {
        "content": "<p>I've tested it to work in tactics</p>",
        "id": 163257977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555148372
    },
    {
        "content": "<p>can you fire off 10, and ask for the first completion?</p>",
        "id": 163257979,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555148398
    },
    {
        "content": "<p>Not sure about nondeterministic uses though</p>",
        "id": 163258025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555148409
    },
    {
        "content": "<p>I had some proposals for nondeterminism primitives but they never landed in core AFAIK</p>",
        "id": 163258028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555148441
    },
    {
        "content": "<p>It seems there's no way to get the first completion. Is this the entire API?</p>\n<div class=\"codehilite\"><pre><span></span>meta constant {u} task : Type u → Type u\n\nnamespace task\n\nmeta constant {u} get {α : Type u} (t : task α) : α\nprotected meta constant {u} pure {α : Type u} (t : α) : task α\nprotected meta constant {u v} map {α : Type u} {β : Type v} (f : α → β) (t : task α) : task β\nprotected meta constant {u} flatten {α : Type u} : task (task α) → task α\n\nprotected meta def {u v} bind {α : Type u} {β : Type v} (t : task α) (f : α → task β) : task β :=\ntask.flatten (task.map f t)\n\n@[inline]\nmeta def {u} delay {α : Type u} (f : unit → α) : task α :=\ntask.map f (task.pure ())\n\nend task\n</pre></div>",
        "id": 163258101,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555148629
    },
    {
        "content": "<p>yes, that's it. It's more powerful than my initial impression, but much less powerful than general threading</p>",
        "id": 163258170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555148721
    },
    {
        "content": "<p>remember nondeterminism + functional programming = bad</p>",
        "id": 163258175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555148745
    },
    {
        "content": "<p>But it's meta anyway so I don't really know why the kid gloves</p>",
        "id": 163258223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555148792
    },
    {
        "content": "<p>in fact this could probably just have the meta removed, it's a perfectly valid pure interface</p>",
        "id": 163258233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555148816
    }
]