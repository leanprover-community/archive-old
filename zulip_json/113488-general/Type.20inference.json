[
    {
        "content": "<p>With this code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">cols</span> <span class=\"n\">rows</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">constraint</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">cols</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">rows</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">trace</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">cols</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">fin</span> <span class=\"n\">rows</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial.eval</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">row_col</span> <span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">row_col.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">row_col.snd</span><span class=\"o\">))</span> <span class=\"n\">constraint</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I get the following tooltips on <code>row_col</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">row_col</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">cols</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">rows</span>\n</code></pre></div>\n<p>and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">row_col</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1Lean</span>\n</code></pre></div>\n<p>And the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">cols</span> <span class=\"n\">rows</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">constraint</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">cols</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">rows</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">trace</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">cols</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">fin</span> <span class=\"n\">rows</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial.eval</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">row_col</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">cols</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">rows</span><span class=\"o\">),</span> <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">row_col.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">row_col.snd</span><span class=\"o\">))</span> <span class=\"n\">constraint</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>works fine. Why is VSCode smart enough to tell me the type of <code>row_col</code>, but Lean apparently needs to be told it?</p>",
        "id": 311274479,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1669034575
    },
    {
        "content": "<p>I'm going to guess it has to do with elaboration order and the fact that lean will continue elaborating despite errors. It's able to eventually figure out that <code>row_col</code> has the type it does because it comes from the <code>constraint</code> argument, but Lean visits arguments to functions in left-to-right order, so when it's handling dot/field notation it does not yet know the type of <code>row_col</code>.</p>",
        "id": 311276089,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669035190
    },
    {
        "content": "<p>Flipping the argument order fixes it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">mv_polynomial.eval'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">mv_polynomial.eval</span> <span class=\"n\">f</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">cols</span> <span class=\"n\">rows</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">constraint</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">cols</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">rows</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">trace</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">cols</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">fin</span> <span class=\"n\">rows</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial.eval'</span> <span class=\"n\">constraint</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">row_col</span> <span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">row_col.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">row_col.snd</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 311276456,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669035336
    },
    {
        "content": "<p>Inserting a <code>by exact</code> might also change the elaboration order to the one that works</p>",
        "id": 311277858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669035833
    },
    {
        "content": "<p>Not here, lambda expression bodies process all pending tactics</p>",
        "id": 311278612,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669036105
    },
    {
        "content": "<p>Works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">cols</span> <span class=\"n\">rows</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">constraint</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">cols</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">rows</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">trace</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">cols</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">fin</span> <span class=\"n\">rows</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial.eval</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">row_col</span> <span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">row_col.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">row_col.snd</span><span class=\"o\">))</span> <span class=\"n\">constraint</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 311278775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669036183
    },
    {
        "content": "<p>Oh, I thought you meant <em>inside</em> the lambda. Your example working is consistent with the theory that elaboration of lambda bodies triggers the processing of pending tactic blocks.</p>",
        "id": 311292930,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669040659
    },
    {
        "content": "<p>I don't think it gives any evidence for that theory, the lambda doesn't even exist until the tactic block is execute there.</p>",
        "id": 311296576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669040883
    },
    {
        "content": "<p>This is what I'm referring to: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/elaborator.cpp#L3404\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/elaborator.cpp#L3404</a></p>",
        "id": 311398995,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669042274
    },
    {
        "content": "<p>The previous five lines visit the body of the lambda, and <code>synthesize()</code> is for handling a number of deferred things, including pending tactics.</p>",
        "id": 311399220,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669042341
    }
]