[
    {
        "content": "<p>Is there a tactic that takes the name for a user attribute (say <code> `to_additive</code>) and returns its declaration name (of type <code>user_attribute</code>, in this case <code> `to_additive.attr</code>)?<br>\nIn order to not <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> the problem: I am given a name of an attribute (that can either be a basic attribute or a user attribute), and I want to add it to a declaration. If it is a user attribute, then it's <code>param_ty</code> may be assumed to be <code>unit</code>.</p>",
        "id": 204591945,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595359733
    },
    {
        "content": "<p>Have you tried <code>eval_expr</code>?</p>",
        "id": 204593225,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595360240
    },
    {
        "content": "<p>On what expression?</p>",
        "id": 204593275,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595360265
    },
    {
        "content": "<p><code>mk_const attr_n &gt;&gt;= eval_expr user_attribute</code></p>",
        "id": 204593680,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595360442
    },
    {
        "content": "<p>That will only take care of the <code>user_attribute</code> case</p>",
        "id": 204593738,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595360472
    },
    {
        "content": "<p>I'm given the <code>name</code> of the user attribute, i.e. the <code>name</code> field in the definition i.e. the thing you write inside <code>@[...]</code>. <br>\nSo I don't think your suggestion works.</p>",
        "id": 204593972,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595360588
    },
    {
        "content": "<p>Ah! In that case, you might need to query the <code>user_attribute</code> attribute and search for the record with the right name</p>",
        "id": 204594429,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595360767
    },
    {
        "content": "<p>I don't know if <code>user_attribute</code> has a cache, I'm hoping it does</p>",
        "id": 204594492,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595360799
    },
    {
        "content": "<p>To explain my second problem (which might still be <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>): I try to provide a user interface for the <code>@[simps]</code> attribute so the user can tag the generated definitions with any attributes they want. Some actual attributes you want to give include <code>@[simp]</code> (a basic attribute) and any attribute generated by <code>mk_simp_attribute</code> (a user attribute). I could change the interface to avoid this problem.</p>",
        "id": 204594513,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595360814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>: That is a good idea! I may do it (or maybe I'll change the behavior so that I don't need it anymore).</p>",
        "id": 204594593,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595360865
    },
    {
        "content": "<p>If you're sure the parameter is unit, then you can just define your <code>user_attribute</code> instance ad-hoc.  That is, something like <code>user_attribute.set { name := attr_name, descr := \"\" } decl_name</code>. There is no requirement to use the existing definition.</p>",
        "id": 204595031,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595361088
    },
    {
        "content": "<p>Interesting! I would not have guessed that would work.<br>\nThat trick apparently even \"works\" for attributes where the parameter is non-unit, but in that case you'll just get an error when you call <code>get_param</code>. Here are some tests:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">core</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">user_attribute</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_user_attr</span> <span class=\"o\">:</span> <span class=\"n\">user_attribute</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">my_user</span><span class=\"o\">,</span> <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"o\">}</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">user_attribute</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">my_user</span><span class=\"o\">,</span> <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"o\">}</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"o\">()</span> <span class=\"n\">tt</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">attribute</span><span class=\"bp\">.</span><span class=\"n\">get_instances</span> <span class=\"bp\">`</span><span class=\"n\">my_user</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span> <span class=\"c1\">-- [foo]</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">my_user_attr</span><span class=\"bp\">.</span><span class=\"n\">get_param</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span> <span class=\"c1\">-- ()</span>\n\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">user_attribute</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_user2_attr</span> <span class=\"o\">:</span> <span class=\"n\">user_attribute</span> <span class=\"n\">unit</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">my_user2</span><span class=\"o\">,</span> <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">,</span> <span class=\"n\">parser</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">tt</span> <span class=\"o\">}</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">user_attribute</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">my_user2</span><span class=\"o\">,</span> <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"o\">}</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"o\">()</span> <span class=\"n\">tt</span> <span class=\"c1\">-- no error</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">attribute</span><span class=\"bp\">.</span><span class=\"n\">get_instances</span> <span class=\"bp\">`</span><span class=\"n\">my_user2</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span> <span class=\"c1\">-- [foo]</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">my_user2_attr</span><span class=\"bp\">.</span><span class=\"n\">get_param</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 204596730,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595361947
    },
    {
        "content": "<p>Ok, I'm still stuck on this.</p>\n<p>I can get Gabriel's suggestion to work, but as Rob pointed out when reviewing <a href=\"https://github.com/leanprover-community/mathlib/issues/3477\">#3477</a>, this is very dangerous: we don't test whether the parameter type really is unit. This means we can accidentally assign it to a user attribute with a parameter without receiving an error.</p>\n<p>So I want to add a test that <code>get_param</code> still works.</p>\n<ul>\n<li>Gabriel's suggestion doesn't work for <code>get_param</code>, since <code>user_attribute.get_param { name := attr_name, descr := \"\" } decl_name</code> will just succeed: the parameter type of the attribute we provided is <code>unit</code> after all, independent of whether this attribute has been declared with a different parameter</li>\n<li>I tried Simon's suggestion of querying all <code>user_attribute</code>s, and returning the one with the right name. This works for terms of type <code>user_attributes unit unit</code>, i.e. user attributes which also have no cache type. However, it doesn't work (read: I cannot get it to work) for attributes with a non-<code>unit</code> cache type, since at some point I have to do <code>eval_expr (user_attribute _ unit) e_attr</code> and I don't know what goes in <code>_</code>. Furthermore, I don't think I can evaluate the cache type first, since <code>eval_expr Type _</code> doesn't work for the lack of reflected instances.</li>\n</ul>\n<p>Any ideas how I can run <code>get_param</code> / test whether I added a value safely for user attributes with a cache type?</p>",
        "id": 204827569,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595525398
    },
    {
        "content": "<p>A very easy way to make <code>eval_expr</code> work is to evaluate the <code>set</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">eval_pexpr</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">user_attribute</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"err\">%%</span><span class=\"n\">user_attr_const</span> <span class=\"err\">%%</span><span class=\"n\">decl_name</span> <span class=\"o\">()</span> <span class=\"err\">%%</span><span class=\"n\">persistent</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204838976,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595530491
    },
    {
        "content": "<p>Neat trick!</p>\n<p>I am missing the following instance for this to work. Shall I add that as well?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">100</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_to_pexpr</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">of_expr</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 204854177,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595538761
    }
]