[
    {
        "content": "<p>I wrote a package for serialization in Lean. Is this something people would like to have in <code>mathlib</code> or the nursery?</p>",
        "id": 133077454,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535653847
    },
    {
        "content": "<p>It serializes from what to what?</p>",
        "id": 133083162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535659881
    },
    {
        "content": "<p>If you have a data structure that you want to write to the disk or to a network you can create a <code>serial</code> instance (which can be derived) to convert from and to a series of bytes.</p>",
        "id": 133083394,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535660091
    },
    {
        "content": "<p>So the short answer is, it serializes (and deserializes) from your data structure to a series of bytes (and back)</p>",
        "id": 133083434,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535660137
    },
    {
        "content": "<p>I haven't built any support for XML or JSON but that can be future work.</p>",
        "id": 133083496,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535660164
    },
    {
        "content": "<p>(and <code>serial</code> includes a proof of correctness of the serialization process)</p>",
        "id": 133083648,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535660339
    },
    {
        "content": "<p>Added benefit: if you insist on writing your own serializer, you get to use my <code>there_and_back_again</code> function in the proof of correctness. :D</p>",
        "id": 133084768,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535661525
    },
    {
        "content": "<p>Hmm, I would vote for serialization being in its own package.</p>",
        "id": 133101706,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1535687873
    },
    {
        "content": "<p>Interesting. Is it because of the possibility of having multiple alternative to that library or is it too CS for mathlib?</p>",
        "id": 133101756,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535687953
    },
    {
        "content": "<p>I think the advantage of mathlib here is that it's a maintained, curated package that lots of people know about... and since there is no well known programming stdlib, that would be one reason to stick it in there</p>",
        "id": 133101758,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1535687961
    },
    {
        "content": "<p>but i think instead that just means we should go for a cslib instead</p>",
        "id": 133101766,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1535687995
    },
    {
        "content": "<p>i'm not sure most people doing math will need exotic data structures, network comms, parsing libraries, graph algorithms, etc</p>",
        "id": 133101832,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1535688036
    },
    {
        "content": "<p>graph algorithms <span class=\"emoji emoji-2714\" title=\"check mark\">:check_mark:</span></p>",
        "id": 133101847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535688060
    },
    {
        "content": "<p>The rest, we'll need for automation...</p>",
        "id": 133101860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535688085
    },
    {
        "content": "<p>That makes sense. There is a weird dependency that I can see between math and CS in formal proofs. Logic, sets and natural numbers are the most fundamental but then good programming tools are useful for writing tactics that more advanced mathematical proofs use.</p>",
        "id": 133101865,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535688097
    },
    {
        "content": "<p>I can see parsing libraries and graph algorithms as potentially useful for more advanced proof automation</p>",
        "id": 133101912,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535688158
    },
    {
        "content": "<p>I view graph algorithms as part of combinatorics, and hence part of maths... maybe I'm weird.</p>",
        "id": 133101922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535688200
    },
    {
        "content": "<p>I think graphs are relevant both in discrete math and in computer science. For the structure of Lean libraries, even more important is what it uses and what uses it</p>",
        "id": 133102017,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535688369
    },
    {
        "content": "<p>I could actually see mathlib becoming three libraries: logic + discrete math, programming and tactics, advanced math</p>",
        "id": 133102034,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535688470
    },
    {
        "content": "<p>i think for more practical minded users a more useful split would further divide advanced math into linear algebra, fourier analysis, prob/stats, and then everything else. of course this would be a day far far in the future</p>",
        "id": 133102152,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1535688682
    },
    {
        "content": "<p>I think Simon's first two suggestions might be too interdependent, not?</p>",
        "id": 133102213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535688819
    },
    {
        "content": "<p>I can see the sense in doing that. I also like having a lot of it under one roof so that they can be curated together.</p>",
        "id": 133102214,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535688826
    },
    {
        "content": "<p>I lost track ... which ones are those?</p>",
        "id": 133102269,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535688887
    },
    {
        "content": "<p>discrete math will want to use tactics</p>",
        "id": 133102270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535688899
    },
    {
        "content": "<p>and tactics need discrete math and logic</p>",
        "id": 133102280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535688954
    },
    {
        "content": "<p>etc</p>",
        "id": 133102282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535688957
    },
    {
        "content": "<p>In that sense, I think I don't care about a huge monolith</p>",
        "id": 133102324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535688972
    },
    {
        "content": "<p>The alternative is that everything goes into its own tiny little package, npm style</p>",
        "id": 133102333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535689014
    },
    {
        "content": "<p>That's true. I think some basic tactics need to be intertwined with logic + discrete math.</p>",
        "id": 133102334,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535689015
    },
    {
        "content": "<p>And some advanced ones!</p>",
        "id": 133102340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535689027
    },
    {
        "content": "<p>We were talking about <code>rewrite_search</code> and using <code>A*</code> for it.</p>",
        "id": 133102344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535689047
    },
    {
        "content": "<p>But maybe it should roll its own A*</p>",
        "id": 133102346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535689059
    },
    {
        "content": "<p>I think we're going to see that a lot that some specialized mathematics / CS will need to roll its own automation.</p>",
        "id": 133102396,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535689133
    },
    {
        "content": "<blockquote>\n<p>But maybe it should roll its own A*</p>\n</blockquote>\n<p>I would rather not: one benefit of using a A* package is that optimizations can be added and studied and the automation can benefit from it.</p>",
        "id": 133102407,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535689185
    },
    {
        "content": "<p>Do I need to show you the slide in my mathlib talk where I talk about the CS and math goals of mathlib? Or the part where it used to be called stdlib until leo changed the name to differentiate it from corelib?</p>",
        "id": 133102448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535689227
    },
    {
        "content": "<p>mathlib is absolutely a place for cs stuff</p>",
        "id": 133102458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535689273
    },
    {
        "content": "<p>it's only sparse on cs stuff now because there are a bunch of mathematicians on the project</p>",
        "id": 133102463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535689299
    },
    {
        "content": "<p>Hahaha</p>",
        "id": 133102466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535689307
    },
    {
        "content": "<p>I wouldn't want to argue with you but I would love to see your slides ...</p>",
        "id": 133102468,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535689316
    },
    {
        "content": "<p>So... who's going to formalise TAOCP?</p>",
        "id": 133102510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535689339
    },
    {
        "content": "<p><em>whistles and looks elsewhere</em></p>",
        "id": 133102513,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535689372
    },
    {
        "content": "<p><a href=\"https://goo.gl/DifCWB\" target=\"_blank\" title=\"https://goo.gl/DifCWB\">https://goo.gl/DifCWB</a></p>",
        "id": 133102514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535689379
    },
    {
        "content": "<p>Lol, I just realised that the Bourbaki of CS is just 1 person...</p>",
        "id": 133102515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535689381
    },
    {
        "content": "<p>I can see a lot of CS going into mathlib but I wonder if networking and the like fits in as it may not support the math</p>",
        "id": 133102694,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535689722
    },
    {
        "content": "<p>Knuth is kind of a big deal like that...</p>",
        "id": 133102696,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1535689723
    },
    {
        "content": "<p>Nobody knows if he'll finish all of his planned volumes of TAOCP</p>",
        "id": 133102707,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1535689788
    },
    {
        "content": "<blockquote>\n<p>but I wonder if networking and the like fits in as it may not support the math</p>\n</blockquote>\n<p>Of course it will! We will have Lean instances talking with each other, trying to prove things together!</p>",
        "id": 133102753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535689815
    },
    {
        "content": "<p>I'm sold!</p>",
        "id": 133102775,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535689896
    },
    {
        "content": "<p>certainly IO stuff is useful for proof work</p>",
        "id": 133102776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535689901
    },
    {
        "content": "<p>i.e. connecting to mathematica or sage or Z3</p>",
        "id": 133102791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535689922
    },
    {
        "content": "<blockquote>\n<p>Nobody knows if he'll finish all of his planned volumes of TAOCP</p>\n</blockquote>\n<p>I'm getting less hopeful about than than I am of seeing an end to A Song of Ice and Fire</p>",
        "id": 133102822,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535689959
    },
    {
        "content": "<p>Basically, as long as you don't start formalising enumerative biology, everything goes into mathlib...</p>",
        "id": 133102823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535689962
    },
    {
        "content": "<p>Even there, I guess if I can formalize the brain of a mathematician ...</p>",
        "id": 133102830,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535689989
    },
    {
        "content": "<p>also I consider theoretical computer science math and on topic, even if some others here don't :P</p>",
        "id": 133102885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535690099
    },
    {
        "content": "<p>Actually, I agree with this sentiment. I sense you mean it in the sense that it's a set of worthwhile mathematical problems but I also feel like it's not really relevant to computer science unless you're doing research in theoretical computer science.</p>",
        "id": 133104388,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535693056
    },
    {
        "content": "<p>But back to the \"let's put everything into mathlib\" idea. I think one limiting factor might be the number of maintainers of mathlib.</p>",
        "id": 133104403,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535693133
    },
    {
        "content": "<p>But that's not a problem yet. I think we can deal with that as soon as it becomes a real problem.</p>",
        "id": 133104510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535693385
    },
    {
        "content": "<p>I sense it becoming a problem already but maybe it's just that I don't have a good PR workflow. Maybe the nursery will improve that</p>",
        "id": 133104556,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535693436
    },
    {
        "content": "<p>fewer maintainers just means a longer wait for your PR to be merged, it's not a structural problem</p>",
        "id": 133104568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535693510
    },
    {
        "content": "<p>but also I expect that there will be more maintainers available if/when lean gets really big</p>",
        "id": 133104610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535693572
    },
    {
        "content": "<p>What I'm having a hard time with is planning the evolution of projects while considering that features will eventually be merged into mathlib.</p>",
        "id": 133104677,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535693706
    },
    {
        "content": "<p>perhaps the perfectoid project is a model?</p>",
        "id": 133104722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535693794
    },
    {
        "content": "<p>For example, with monotonicity is a tactic I use in temporal logic and in separation logic. Making changes to respond to reviews and making changes in the version that I use sometimes get difficult to reconcile. More so before <code>traversable</code> got merged.</p>",
        "id": 133104783,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535693969
    },
    {
        "content": "<p>How do they do it?</p>",
        "id": 133104785,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535693976
    },
    {
        "content": "<blockquote>\n<p>For example, with monotonicity is a tactic I use in temporal logic and in separation logic. Making changes to respond to reviews and making changes in the version that I use sometimes get difficult to reconcile. More so before <code>traversable</code> got merged.</p>\n</blockquote>\n<p>I suppose <span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> could also provide valuable insight in how he managed all his category libs, and got them mathlib-ready and keeps the synced, etc...</p>",
        "id": 133105189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535694710
    },
    {
        "content": "<p>BTW, I have a really simple output-only json library (only on my non-working laptop)</p>",
        "id": 133105737,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535695688
    },
    {
        "content": "<p>That's a non-constructive proof of existence</p>",
        "id": 133105740,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535695720
    },
    {
        "content": "<p>Does it prove anything?</p>",
        "id": 133105747,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535695764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks! I'll talk to him about it</p>",
        "id": 133105797,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535695819
    },
    {
        "content": "<p>I guess it proves that string is inhabited</p>",
        "id": 133105805,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535695866
    },
    {
        "content": "<p>Hopefully I will be able to use my laptop again when I get home in about a week. On the other hand the library only took an hour or two to write and probably looks very much like what you would expect so you may not even want to wait for it.</p>",
        "id": 133105863,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535695989
    },
    {
        "content": "<p>Actually, the hardest problem I had to solve was proving the serializers and deserializers are each other's inverse in a compositional way. In the end, I got to have a lot of fun with free monads.</p>",
        "id": 133105974,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535696164
    },
    {
        "content": "<p>Oh yeah, decoding json seemed quite a lot more annoying and I didn't need it.</p>",
        "id": 133106039,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535696299
    },
    {
        "content": "<p>Darn! I think the same machinery might be usable though. The only thing missing would be an embedding from JSON syntax trees to your favorite data structure</p>",
        "id": 133106110,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535696457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, regarding coping with merging bits-and-pieces of larger repositories into mathlib: Yes, it's hard work. :-)</p>",
        "id": 133159304,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535767901
    },
    {
        "content": "<p>On the positive side, having to rewrite things over and over again to adapt to changes suggested by others has made them better...</p>",
        "id": 133159352,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535767942
    },
    {
        "content": "<p>But I'm generally in agreement that pretty much everything short of enumerative biology should be heading into mathlib.</p>",
        "id": 133159358,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535767971
    },
    {
        "content": "<p>Thanks :) </p>\n<p>How do you minimize the number of competing versions of the same package when you use that package in a project and you try to move some of the features around?</p>",
        "id": 133159472,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535768191
    },
    {
        "content": "<p>I don't want to describe Mario and Johannes, as the maintainers of mathlib, as \"bottlenecks\", but in the long run we need to make sure that their time is not wasted (i.e. they have enough time to do the other things they need to do!), and this means working out how make reviewing and cleaning up PRs a more distributed process.</p>",
        "id": 133159532,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535768334
    },
    {
        "content": "<p>I've started making my later repositories depend on my pull requests.</p>",
        "id": 133159540,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535768357
    },
    {
        "content": "<p>With the nursery, that might be a cleaner solution</p>",
        "id": 133159548,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535768391
    },
    {
        "content": "<p>e.g. if I split of a chunk of a project and make a PR to mathlib for it, I just update the leanpkg.toml file for that repository temporarily point to the branch corresponding to that PR on leanprover-community.</p>",
        "id": 133159600,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535768411
    },
    {
        "content": "<p>This is not super safe, as branches on leanprover-community are somewhat ephemeral things. (And in particular, Mario and Johannes may well delete them after merging, and if they squash commits in some way the commit SHA you're pointing to could completely vanish.)</p>",
        "id": 133159611,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535768470
    },
    {
        "content": "<p>At times last week I had a \"scott-supremum\" branch on leanprover-community, which was just a merge of several active PRs, so I could point my repo at that.</p>",
        "id": 133159614,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535768510
    },
    {
        "content": "<p>I think you're right that we should try to distribute more of the maintenance burden. I've started pitching in for reviewing PRs but there ought to be more we can do. I sense with leanprover-community there are more opportunity we're not tapping into yet.</p>",
        "id": 133159863,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535769010
    },
    {
        "content": "<p>I just pushed my serialization stuff to the nursery. I'd love to know if people find it useful or if there are ways I can improve it. I'd like it to find its way to mathlib at some point too so if <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> have advice, I think I'll try editing the nursery version before I create a PR.</p>",
        "id": 133189901,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535833715
    }
]