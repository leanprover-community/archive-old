[
    {
        "content": "<p>How can I split a long string literal to make the linter happy, without inserting <code>\\n</code> into its value?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"s2\">\"hello</span>\n<span class=\"s2\">world\"</span> <span class=\"c1\">-- contains \\n, which I don't want</span>\n</code></pre></div>",
        "id": 224166940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611746008
    },
    {
        "content": "<p>Is there a more idiomatic way than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/string.join\">docs#string.join</a>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">string.join</span> <span class=\"o\">[</span><span class=\"s2\">\"hello \"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"world\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 224167060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611746098
    },
    {
        "content": "<p>I would just use that, or <code>++</code></p>",
        "id": 224167524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611746406
    },
    {
        "content": "<p>If you really care about the expression being a single string, you can use a tactic to process it</p>",
        "id": 224167752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611746529
    },
    {
        "content": "<p>Do you need a tactic? Can't you just filter <code>\\n</code> out of the string?</p>",
        "id": 224167820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611746579
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span> <span class=\"bp\">++</span>\n    <span class=\"s2\">\"abc\"</span> <span class=\"bp\">++</span>\n    <span class=\"s2\">\"def\"</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.exact</span> <span class=\"bp\">$</span> <span class=\"n\">reflect</span> <span class=\"n\">s</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 224167963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611746658
    },
    {
        "content": "<p>Note that this gives the same definition as <code>def foo := \"abcdef\"</code>, while </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"s2\">\"abc\"</span> <span class=\"bp\">++</span>\n<span class=\"s2\">\"def\"</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>yields <code>def foo := \"abc\" ++ \"def\"</code></p>",
        "id": 224168043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611746731
    },
    {
        "content": "<p>I think string literals (and URLs) should be allowed exceptions to the style linter.</p>",
        "id": 224232726,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611774680
    },
    {
        "content": "<p>URLs are already getting a pass</p>",
        "id": 224234018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611775256
    },
    {
        "content": "<p>What is the use case for excessively long string literals?</p>",
        "id": 224234782,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1611775606
    },
    {
        "content": "<p>Typically error messages, for example some of the lines in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simps_add_projections/src\">src#simps_add_projections</a>.</p>",
        "id": 224237182,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611776700
    },
    {
        "content": "<p>This is a kind of nice Haskell feature: <a href=\"http://book.realworldhaskell.org/read/characters-strings-and-escaping-rules.html#id689881\">http://book.realworldhaskell.org/read/characters-strings-and-escaping-rules.html#id689881</a></p>\n<p>It would let you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello </span><span class=\"err\">\\</span><span class=\"s2\"></span>\n<span class=\"s2\">                    </span><span class=\"err\">\\</span><span class=\"s2\">world\"</span>\n</code></pre></div>",
        "id": 224239138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611777609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> But those have newlines in them</p>",
        "id": 224241409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611778699
    },
    {
        "content": "<p>Yes, but still some lines are too long, and I don't really want to split them up further.</p>",
        "id": 224241768,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611778892
    },
    {
        "content": "<p>The error messages shouldn't be longer than 100 characters per lines either.  You should really split them up.</p>",
        "id": 224250198,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1611782938
    },
    {
        "content": "<p>The context of this thread was actually an error message</p>",
        "id": 224250664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611783146
    },
    {
        "content": "<p>But even if the error message is limited to 100 chars, I don't want it to inherit the indentation of my lean code. <code>++</code> was the right solution for me.</p>",
        "id": 224250749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611783188
    },
    {
        "content": "<p>This is too horrible to contemplate for more than a moment or two, but you can use coercions to have Lean support C-style string literal concatenation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">string</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">string</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello \"</span>\n  <span class=\"s2\">\"world\"</span>\n</code></pre></div>",
        "id": 224257399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611786245
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">string</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">string</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello \"</span>\n  <span class=\"s2\">\"world\"</span>\n\n<span class=\"k\">#eval</span>\n  <span class=\"o\">(</span><span class=\"s2\">\"a\"</span> <span class=\"s2\">\"l\"</span> <span class=\"s2\">\"l\"</span> <span class=\"s2\">\" \"</span> <span class=\"s2\">\"w\"</span> <span class=\"s2\">\"o\"</span> <span class=\"s2\">\"r\"</span> <span class=\"s2\">\"k\"</span> <span class=\"s2\">\" \"</span> <span class=\"s2\">\"a\"</span> <span class=\"s2\">\"n\"</span> <span class=\"s2\">\"d\"</span> <span class=\"s2\">\" \"</span> <span class=\"s2\">\"n\"</span> <span class=\"s2\">\"o\"</span> <span class=\"s2\">\" \"</span> <span class=\"s2\">\"p\"</span> <span class=\"s2\">\"l\"</span> <span class=\"s2\">\"a\"</span> <span class=\"s2\">\"y\"</span> <span class=\"s2\">\" \"</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">100</span><span class=\"o\">]</span> <span class=\"s2\">\" \"</span>\n</code></pre></div>",
        "id": 224257980,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611786558
    },
    {
        "content": "<p>Surprisingly fast up to 1e4 iterations; 1e5 is not.</p>",
        "id": 224258460,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611786796
    },
    {
        "content": "<p>after all this is O(n^2) so not surprising <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 224271203,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611795214
    },
    {
        "content": "<p><a href=\"https://codeforces.com/blog/entry/21772#comment-264557\">https://codeforces.com/blog/entry/21772?#comment-264557</a></p>",
        "id": 224271325,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611795288
    },
    {
        "content": "<p>welp the &lt;= 10k part is wrong</p>",
        "id": 224271414,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611795359
    },
    {
        "content": "<p>it's supposed to read O(nsqrt(n))</p>",
        "id": 224271482,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611795400
    }
]