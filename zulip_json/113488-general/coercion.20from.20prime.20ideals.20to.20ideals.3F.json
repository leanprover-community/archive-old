[
    {
        "content": "<p>I don't know what makes a good coercion. We have the following type in <code>algebraic_geometry.prime_spectrum.basic</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prime_spectrum</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"bp\">//</span> <span class=\"n\">I.is_prime</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Unsurprisingly, given a term <code>v : prime_spectrum R</code> one sometimes wants to look at the underlying ideal <code>v.val</code>. I was expecting there to be a coercion, but in fact there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">as_ideal</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span>\n</code></pre></div>\n<p>I think <code>abbreviation</code> is the same as <code>[inline, reducible]</code>. I don't really understand <code>inline</code> and am wondering if this is some kind of way to say \"I would be happy if the simp normal form is just <code>v.val</code> but my silly users want to call it something\". For example this is a <code>simp</code> lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">comap_as_ideal</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">as_ideal</span> <span class=\"bp\">=</span> <span class=\"n\">ideal.comap</span> <span class=\"n\">f</span> <span class=\"n\">y.as_ideal</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Would it be better or worse if there was just a coercion to <code>ideal R</code> and the simp normal form was <code>\\u v</code>? It would make statements like this look less clunky.</p>",
        "id": 266433579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640875450
    },
    {
        "content": "<p>I think that I introduced <code>as_ideal</code> to make explicit the transition from the \"geometrical\" picture to the \"algebraic\" picture. Points of the spectrum can be denoted <code>x</code>, because they are points. But a prime ideal should be <code>P</code> or <code>I</code>, or something.<br>\nOf course this is not a Lean reason, but a linguistic(?) one.</p>\n<p>At the same time, writing <code>x.as_ideal</code> helps the elaborator, so it's not only a disambiguating flag for the user/reader, but also for Lean. Since we want Lean to also find an instance of <code>is_prime</code> for these ideals, it helps a lot if TC isn't stuck finding a coercion before looking for <code>is_prime</code>.</p>\n<p>My guess is that you would end up writing <code>(x : ideal R)</code> explicitly quite often. And then <code>x.as_ideal</code> is actually shorter in the end.</p>",
        "id": 266434057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640875901
    },
    {
        "content": "<p>I really like the \"geometry v algebra\" distinction :-) I was looking at adeles code and there the non-zero primes of a Dedekind domain don't feel like they have any geometry attached to them, although we use the Zariski topology I guess in the sense of \"being integral on an open set containing the generic point\"</p>",
        "id": 266434853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640876609
    }
]