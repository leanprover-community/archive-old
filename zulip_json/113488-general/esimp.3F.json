[
    {
        "content": "<p>Using Scott's category theory library, I sometimes encounter subexpressions like <code>compose f (identity X)</code>, but with the caveat that one or both of the implicit \"object\" arguments of <code>compose</code> is not syntactically equal to <code>X</code>. This appears to stymie <code>simp</code> from reducing the subexpression to <code>f</code>. Is there a way to make <code>simp</code> smarter here?<br>\nI know about <code>erw</code>, which in my experience solves this problem when I want to use <code>rw</code>, but I haven't found a good solution for <code>simp</code>.</p>",
        "id": 129626646,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531513861
    },
    {
        "content": "<p>It's kind of annoying, since I guess <code>simp</code> could just generalize the wildcards in the pattern when trying to match the identity lemma...</p>",
        "id": 129626765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531513948
    },
    {
        "content": "<p>that is, rather than match against</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"n\">categories</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">compose</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">u_0</span> <span class=\"err\">?</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"err\">?</span><span class=\"n\">x_3</span> <span class=\"err\">?</span><span class=\"n\">x_3</span> <span class=\"err\">?</span><span class=\"n\">x_4</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">categories</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">identity</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">u_0</span> <span class=\"err\">?</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_3</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>look for</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"n\">categories</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">compose</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">u_0</span> <span class=\"err\">?</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"err\">?</span><span class=\"n\">x_3&#39;</span> <span class=\"err\">?</span><span class=\"n\">x_3&#39;&#39;</span> <span class=\"err\">?</span><span class=\"n\">x_4</span>   <span class=\"c1\">-- make these distinct</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">categories</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">identity</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">u_0</span> <span class=\"err\">?</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_3</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>on the assumption that, if we found this, we can conclude that definitionally <code>?x_3 = ?x_3' = ?x_3''</code>, and no need to check syntactic equality</p>",
        "id": 129627291,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531514491
    },
    {
        "content": "<p>In my experience this doesn't stop simp...</p>\n<div class=\"codehilite\"><pre><span></span>def nat2 := nat\nexample (x : ‚Ñï) : x + @has_zero.zero nat2 nat.has_zero = x :=\nby simp\n</pre></div>",
        "id": 129627378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531514544
    },
    {
        "content": "<p>I don't think it tries to match arguments that are dependencies at all</p>",
        "id": 129627423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531514591
    },
    {
        "content": "<p>Hmm, strange. I have several uses of <code>dsimp, simp</code> where I'm pretty sure the <code>dsimp</code> is just simplifying one of these object arguments. Let me look more closely at a simple one...</p>",
        "id": 129627533,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531514679
    },
    {
        "content": "<p>Here is a small reproducer that depends on <code>lean-category-theory</code> (or <code>-pr</code>):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">categories</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"kn\">open</span> <span class=\"n\">categories</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">a</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">M</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">‚â´</span> <span class=\"mi\">ùüô</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">simp</span> <span class=\"kn\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">simplify tactic failed to simplify</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">C : Type,</span>\n<span class=\"cm\">_inst_1 : categories.small_category.{0} C,</span>\n<span class=\"cm\">a b : C,</span>\n<span class=\"cm\">f : @categories.category.Hom.{0 0} C _inst_1 (@M C _inst_1 a) (@M C _inst_1 b)</span>\n<span class=\"cm\">‚ä¢ @eq.{1} (@categories.category.Hom.{0 0} C _inst_1 a b)</span>\n<span class=\"cm\">    (@categories.category.compose.{0 0} C _inst_1 a (@M C _inst_1 b) b f</span>\n<span class=\"cm\">       (@categories.category.identity.{0 0} C _inst_1 b))</span>\n<span class=\"cm\">    f</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">‚â´</span> <span class=\"mi\">ùüô</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"kn\">end</span> <span class=\"c1\">-- ok</span>\n</pre></div>",
        "id": 129628422,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531515447
    },
    {
        "content": "<p>With the <code>dsimp [M]</code>, the only change in the goal is that <code>(@M C _inst_1 b)</code> is replaced by <code>b</code></p>",
        "id": 129628559,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531515589
    },
    {
        "content": "<p>is there any change if you <code>dsimp</code> the type of <code>f</code> instead of the goal?</p>",
        "id": 129628628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531515623
    },
    {
        "content": "<p>How would I do that?</p>",
        "id": 129628679,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531515696
    },
    {
        "content": "<p><code>dsimp [M] at f</code></p>",
        "id": 129628686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531515703
    },
    {
        "content": "<p>Subsequent <code>simp</code> is still stuck</p>",
        "id": 129628750,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531515730
    },
    {
        "content": "<p>does <code>rw</code> work?</p>",
        "id": 129628770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531515747
    },
    {
        "content": "<p><code>rw</code> doesn't work, but <code>erw</code> does</p>",
        "id": 129628796,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531515790
    },
    {
        "content": "<p>(Which I learned about from its usage in Scott's library.)</p>",
        "id": 129628826,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531515825
    },
    {
        "content": "<p><code>erw</code> will work because it's basically just <code>dsimp [M], rw</code></p>",
        "id": 129628889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531515868
    },
    {
        "content": "<p>Maybe your example works because of this <code>canonize_instances</code> stuff?</p>",
        "id": 129629349,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531516373
    },
    {
        "content": "<p>Or maybe not</p>",
        "id": 129629451,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531516486
    },
    {
        "content": "<p>A related example that I don't understand.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">nat</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  (Œª (a a_1 : nat) (e_1 : @eq.{1} nat a a_1) (a_2 a_3 : nat) (e_2 : @eq.{1} nat a_2 a_3),</span>\n<span class=\"cm\">     @congr.{1 1} nat Prop (@eq.{1} nat a) (@eq.{1} nat a_1) a_2 a_3</span>\n<span class=\"cm\">       (@congr_arg.{1 1} nat (nat ‚Üí Prop) a a_1 (@eq.{1} nat) e_1)</span>\n<span class=\"cm\">       e_2)</span>\n<span class=\"cm\">    (@has_add.add.{0} nat nat.has_add x (@has_zero.zero.{0} nat z))</span>\n<span class=\"cm\">    x</span>\n<span class=\"cm\">    (@add_zero.{0} nat nat.add_monoid x)</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  @add_zero.{0} nat nat.add_monoid x</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  @eq.{1} nat</span>\n<span class=\"cm\">    (@has_add.add.{0} nat (@add_semigroup.to_has_add.{0} nat (@add_monoid.to_add_semigroup.{0} nat nat.add_monoid)) x</span>\n<span class=\"cm\">       (@has_zero.zero.{0} nat (@add_monoid.to_has_zero.{0} nat nat.add_monoid)))</span>\n<span class=\"cm\">    x</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  @eq.{1} nat (@has_add.add.{0} nat nat.has_add x (@has_zero.zero.{0} nat z)) x</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 129664139,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531579489
    },
    {
        "content": "<p>Note that the <code>simp</code> tactic actually succeeded, and used <code>add_zero</code>. So somehow <code>simp</code> didn't care that the <code>has_zero</code> dictionary was the wrong one. But looking at <code>trace.type_context.is_def_eq_detail</code> output and the <code>type_context.cpp</code> code, I don't see how this is possible.</p>",
        "id": 129664199,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531579645
    },
    {
        "content": "<p>This problem came up for me today, helping someone who had a proof that was approved by the <code>tactics</code> but not by the kernel, where there was a <code>nat.pow</code> versus <code>monoid.pow</code> issue somewhere.</p>",
        "id": 131044904,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533649128
    }
]