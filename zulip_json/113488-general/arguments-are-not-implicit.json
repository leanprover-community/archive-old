[
    {
        "content": "<p>I am following along <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/dependent_type_theory.html\">https://leanprover.github.io/theorem_proving_in_lean4/dependent_type_theory.html</a></p>\n<p>I tried pasting the following example in neovim: <a href=\"/user_uploads/3121/OlZbwJaeuPfdOGKDB4MNZyDe/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OlZbwJaeuPfdOGKDB4MNZyDe/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/OlZbwJaeuPfdOGKDB4MNZyDe/image.png\"></a></div><p>For some reason, all the arguments have to be explicitly passed for me. Am I doing something wrong?</p>",
        "id": 275708556,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1647542971
    },
    {
        "content": "<p>(The <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> stream is better focused on helping with such questions)</p>\n<p>What do you mean? What were you expecting to see?</p>",
        "id": 275709598,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647543439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/arguments-are-not-implicit/near/275709598\">said</a>:</p>\n<blockquote>\n<p>(The <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> stream is better focused on helping with such questions)</p>\n<p>What do you mean? What were you expecting to see?</p>\n</blockquote>\n<p>The book says lean should be able to infer what arguments need to be implicit</p>",
        "id": 275710502,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1647543827
    },
    {
        "content": "<p>It's easier to see it happening here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">id'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"k\">#print</span> <span class=\"n\">id'</span>\n<span class=\"c1\">-- def id'.{u_1} : {α : Sort u_1} → α → α :=</span>\n<span class=\"c1\">-- fun {α} a =&gt; a</span>\n</code></pre></div>\n<p>Notice how Lean added <code>α</code> as an implicit parameter of <code>id'</code></p>\n<p>In the example that you posted, everything has already been declared to be explicit. Like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">id'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"k\">#print</span> <span class=\"n\">id'</span>\n<span class=\"c1\">-- def id'.{u_1} : (α : Sort u_1) → α → α :=</span>\n<span class=\"c1\">-- fun α a =&gt; a</span>\n</code></pre></div>",
        "id": 275711423,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647544295
    }
]