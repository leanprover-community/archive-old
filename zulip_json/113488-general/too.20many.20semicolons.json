[
    {
        "content": "<p>I appreciate the desire to be terse, but there are many places where I think we go too far. As an example from <code>linear_combination.lean</code> (I haven't look up who wrote this --- no fingers are being pointed!)</p>\n<div class=\"codehilite\"><pre><span></span>theorem restrict_dom_comp_subtype (s : set β) :\n  (restrict_dom α s).comp (submodule.subtype _) = linear_map.id :=\nby ext l; apply subtype.coe_ext.2; simp; ext a;\n   by_cases a ∈ s; simp [h]; exact (mem_supported&#39;.1 l.2 _ h).symm\n</pre></div>\n\n\n<p>This proof broke when I was trying to clean something up. With the semicolons everywhere, it's much harder to debug than a simple <code>begin ... end</code> block.</p>",
        "id": 161818362,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553648535
    },
    {
        "content": "<p>Indeed, exactly one of those semicolons is actually serving its real purpose (running a tactic on multiple goals).</p>",
        "id": 161818369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553648563
    },
    {
        "content": "<p>I would have preferred writing this proof as</p>\n<div class=\"codehilite\"><pre><span></span>theorem restrict_dom_comp_subtype (s : set β) :\n  (restrict_dom α s).comp (submodule.subtype _) = linear_map.id :=\nbegin\n  ext l,\n  apply subtype.coe_ext.2,\n  simp,\n  ext a,\n  by_cases h : a ∈ s; simp [h],\n  exact (mem_supported&#39;.1 l.2 _ h).symm\nend\n</pre></div>",
        "id": 161818373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553648572
    },
    {
        "content": "<p>Now you can both see the structure better (<code>simp [h]</code> is acting on both branchs of <code>by_cases</code> --- otherwise the proof is linear),</p>",
        "id": 161818405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553648601
    },
    {
        "content": "<p>and if something goes wrong you can inspect the intermediate states.</p>",
        "id": 161818412,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553648609
    },
    {
        "content": "<p>I worry that proofs like this are being written in \"semicolon style\" solely to reduce the character count (and perhaps that feeling of accomplishment when you get a proof short enough to use <code>by</code> instead of <code>begin ... end</code>)</p>",
        "id": 161818469,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553648659
    },
    {
        "content": "<p>What do people think? Could we perhaps add something to the style guide discouraging the use of <code>by A;B;C;...;X;Y;Z</code> for chains beyond some length?</p>",
        "id": 161818479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553648702
    },
    {
        "content": "<p>I'm wondering if <code>simp only</code> wouldn't have done more to make the proof adaptable.</p>",
        "id": 161820641,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553651171
    },
    {
        "content": "<p>I'm in absolutely agree that we should of avoid <code>by A;B;C;...;X;Y;Z</code> as much as possible. With small exceptions like <code>by c; m</code> where <code>c</code> is something like <code>ext</code> or <code>cases</code>, a predictable method to destruct the goal into simpler forms, and <code>m</code> is <code>simp</code> or similar.</p>",
        "id": 161832360,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553667255
    },
    {
        "content": "<p><code>simp only</code> might help when it breaks, but it doesn't help to make the proof understandable</p>",
        "id": 161832370,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553667286
    },
    {
        "content": "<p>That's perhaps a stronger argument than I would have made. There are _many_ examples in mathlib of <code>by X; Y</code> which have only been written as that instead of <code>begin X, Y end</code> for the sake of brevity. What do you think of these?</p>",
        "id": 161833172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553668333
    },
    {
        "content": "<p>I have been guilty of golfing proofs down in this way. I wouldn't mind changing the culture.</p>",
        "id": 161833780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553669356
    },
    {
        "content": "<p>I sometimes also do it for the sake of brevity, but when I look at it some times later, I dislike it. But two methods have usually the flavour of first apply cases, or add some kind of \"marker\" which is then pushed through the statement to solve it.</p>",
        "id": 161834103,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553669878
    },
    {
        "content": "<p>What about <code>by {A, B, C}</code>?</p>",
        "id": 161835649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672112
    },
    {
        "content": "<p>I think it's a lot better, but it isn't common style.</p>",
        "id": 161835660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553672135
    },
    {
        "content": "<p>I remember being quite surprised the first time I saw a semicolon bring used in this way when there was only one goal</p>",
        "id": 161835715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672165
    },
    {
        "content": "<p>The bracket notation only adds about two characters to the proof</p>",
        "id": 161835735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672203
    },
    {
        "content": "<p>And I also had trouble debugging a semicolon proof recently</p>",
        "id": 161835740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672220
    },
    {
        "content": "<p>Okay -- perhaps I will write a PR to the style guide that goes as far as saying: \"don't misuse semicolons: <code>X; Y</code> means that <code>X</code> produces multiple goals, and you want to apply <code>Y</code> to each of them\"</p>",
        "id": 161837070,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553673896
    },
    {
        "content": "<p>If you just have one semicolon and the two expressions are short, I think it is also acceptable. For instance, <code>by ext; simp</code> looks all right to me.</p>",
        "id": 161837173,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553674006
    },
    {
        "content": "<p>I would definitely support that change. I would even be happy if people consistently wrote <code>by {ext, blah}</code> instead of <code>by ext; blah</code>.</p>",
        "id": 161837174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553674010
    },
    {
        "content": "<p>Maybe one day we will have a proof-linting tool that actually checks for multiple goals when <code>;</code> is used.</p>",
        "id": 161837203,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553674063
    },
    {
        "content": "<p>Okay, I'm on board as long as I can still keep the two line compression proof</p>",
        "id": 161837278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553674151
    },
    {
        "content": "<p>so the example would become</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">coe_ext</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n     <span class=\"n\">by_cases</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mem_supported&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 161837292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553674187
    },
    {
        "content": "<p>and where the internal spaces can be omitted for a one liner like Kevin's style</p>",
        "id": 161837353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553674235
    },
    {
        "content": "<p>Actually, I would go so far as to say that <code>by</code> should always be used for compression style proofs and <code>begin ... end</code> for multiline proofs</p>",
        "id": 161837454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553674340
    },
    {
        "content": "<p>i.e. <code>by {tac1, tac2}</code> preferred over <code>begin tac1, tac2 end</code>, and</p>\n<div class=\"codehilite\"><pre><span></span>begin\n  tac1,\n  tac2,\n  tac3...\nend\n</pre></div>\n\n\n<p>is preferred over</p>\n<div class=\"codehilite\"><pre><span></span>by {\n  tac1,\n  tac2,\n  tac3...\n}\n</pre></div>\n\n\n<p>or some such thing</p>",
        "id": 161837503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553674427
    },
    {
        "content": "<p>To clarify on the original example (of which I am the author): I am also against using long strings of <code>tac; tac; tac</code> but my cutoff is about two lines, so that kind of example is around the upper limit</p>",
        "id": 161837668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553674616
    },
    {
        "content": "<p>We all have different styles I guess.</p>",
        "id": 161838053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553675117
    },
    {
        "content": "<p>Okay, it sounds like there's a reasonable compromise.</p>",
        "id": 161839525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553676755
    },
    {
        "content": "<p>One complaint I have about semicolons is that VSCode rarely manages to show me the intermediate states, and I really rely on this for parsing proofs.</p>",
        "id": 161839549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553676789
    },
    {
        "content": "<p>I agree with Scott, but this remark obviously don't apply to <code>by ext ; simp</code> or <code>by unfold ... ; apply_instance</code></p>",
        "id": 161839688,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553676933
    },
    {
        "content": "<p>I'm certainly not suggesting we go back and change any existing appearances of <code>by ext; simp</code>, but I think it would be reasonable to encourage everyone to write <code>by { ext, simp }</code> in future (assuming that <code>ext</code> is actually only creating one goal!) But I'm not at all concerned by these single semicolon proofs, themselves.</p>",
        "id": 161840035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553677205
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/854\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/854\">#854</a> tries to adhere to your new style guidelines</p>",
        "id": 161840541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553677686
    },
    {
        "content": "<p>I also wrote some <code>split; { tac1, tac2 }</code> proofs</p>",
        "id": 161840559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553677705
    },
    {
        "content": "<p>Instead of chaining semicolons</p>",
        "id": 161840565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553677719
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/4ec60c3353e511d094045e80a32a5715760a7603/src/algebra/pointwise.lean#L34-L37\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/4ec60c3353e511d094045e80a32a5715760a7603/src/algebra/pointwise.lean#L34-L37\">https://github.com/leanprover-community/mathlib/blob/4ec60c3353e511d094045e80a32a5715760a7603/src/algebra/pointwise.lean#L34-L37</a> <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span> that's an implicit proof!</p>",
        "id": 161841516,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553678538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> what happened to <a href=\"https://github.com/leanprover-community/mathlib/pull/431\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/431\">https://github.com/leanprover-community/mathlib/pull/431</a> ? Johan's PR would be yet another PR needing this bug fix</p>",
        "id": 161841643,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553678664
    },
    {
        "content": "<p>Those proofs are superboring. I wish I knew a tactic that would kill them for me.</p>",
        "id": 161841705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553678737
    },
    {
        "content": "<p>You could write it!</p>",
        "id": 161841724,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553678759
    },
    {
        "content": "<p>I guess <code>tidy + rw_search + back</code> would blast through all of this. But then we get complaints that this file is too low-level, and it slows things down, etc...</p>",
        "id": 161841968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553678908
    },
    {
        "content": "<p>Anyway, this is going off topic. Maybe we should move it to PR reviews...</p>",
        "id": 161841990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553678935
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/4ec60c3353e511d094045e80a32a5715760a7603/src/algebra/pointwise.lean#L34-L37\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/4ec60c3353e511d094045e80a32a5715760a7603/src/algebra/pointwise.lean#L34-L37\">https://github.com/leanprover-community/mathlib/blob/4ec60c3353e511d094045e80a32a5715760a7603/src/algebra/pointwise.lean#L34-L37</a> <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span> that's an implicit proof!</p>\n</blockquote>\n<p>It's not quite -- he uses <code>mul_assoc</code> twice :-)</p>",
        "id": 161843931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553680542
    },
    {
        "content": "<p>Nice to see <code>‹_›</code> in there :-)</p>",
        "id": 161844003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553680579
    },
    {
        "content": "<p>I wonder why <code>x</code>, <code>y</code> and <code>z</code> are named</p>",
        "id": 161844005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553680580
    },
    {
        "content": "<p>to help the unifier probably <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 161844025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553680606
    },
    {
        "content": "<p>Maybe calling them <code>_</code> is a metavariable too far</p>",
        "id": 161844043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553680624
    },
    {
        "content": "<blockquote>\n<p>I wonder why <code>x</code>, <code>y</code> and <code>z</code> are named</p>\n</blockquote>\n<p>Oops... I forgot to remove them.</p>",
        "id": 161844160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553680754
    },
    {
        "content": "<p>I really think that writing this tactic would be an excellent exercise. Unfortunately I lack time for this. I need to grade proofs written by my students after convincing Lean. I just went through a fundamentalist student who starts by unfolding every single definition he can see. The goal of the assignment was to prove that increasing sequences with an upper bound tend to their supremum...</p>",
        "id": 161844424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553681038
    },
    {
        "content": "<p>Did he unfold real numbers to Cauchy sequences?</p>",
        "id": 161844497,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553681094
    },
    {
        "content": "<p>Fortunately, he did not see this definition</p>",
        "id": 161844522,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553681114
    },
    {
        "content": "<p>But he never writes  \"upper bound\" or \"supremum\", only things like <code>x ∈ {x : ℝ | ∀ (a : ℝ), a ∈ A → a ≤ x}  and  x ∈ {x : ℝ | ∀ (a : ℝ), a ∈ {x : ℝ | ∀ (a : ℝ), a ∈ A → a ≤ x} → x ≤ a}</code> (written like this on paper). I guess I'm punished by my own sins</p>",
        "id": 161844750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553681319
    },
    {
        "content": "<p>Not sure I understand the concept. First, they get a working Lean proof, and then they write a paper proof -- your idea being that the paper proof will be correct since they have been able to convince Lean. But then you get super-formal proofs on paper?</p>",
        "id": 161844923,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553681495
    },
    {
        "content": "<p>The goal of the course is to get correct and readable proofs on paper. Lean is only an intermediate step. I never assumed it would be easy to go from Lean to paper. Some students can do it, some can't. The one I quoted is of course an extreme case</p>",
        "id": 161845038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553681582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> to answer your earlier question, I was getting nowhere with that PR so I put it on hold. I can get back to it next week.</p>",
        "id": 161851521,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553687552
    },
    {
        "content": "<p>On a somewhat recent mathlib:</p>\n<div class=\"codehilite\"><pre><span></span>git grep &quot;;.*;&quot; | wc -l\n977\n</pre></div>\n\n\n<p>I agree that we shouldn't purge mathlib just for the sake of it. But I wanted to know this stat anyway (-;</p>",
        "id": 162082970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553892829
    }
]