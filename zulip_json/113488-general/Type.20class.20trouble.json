[
    {
        "content": "<p>I am having trouble with the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.trace</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finite_field.trace_to_zmod</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)]</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">ring_char.char_p</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">zmod.algebra</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">tr</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tr</span><span class=\"o\">,</span> <span class=\"c1\">-- invalid type ascription ...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Before <code>exact tr</code>, the state looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">F</span>\n<span class=\"n\">_inst</span><span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span>\n<span class=\"n\">tr</span><span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)]</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">F</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)]</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Clicking on the type of <code>tr</code> in the infoview shows exactly the same information as clicking on the type of the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">linear_map</span>\n<span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"n\">ring.to_semiring</span>\n<span class=\"n\">ring.to_semiring</span>\n<span class=\"n\">ring_hom.id</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n<span class=\"n\">F</span>\n<span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">F</span>\n<span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n<span class=\"n\">algebra.to_module</span>\n<span class=\"n\">semiring.to_module</span>\n</code></pre></div>\n<p>The mismatching types in the error message differ in the following places:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">F</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))))</span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">F</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n       <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.algebra</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_ring.to_non_assoc_semiring</span> <span class=\"n\">F</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_non_assoc_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">F</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))))</span>\n          <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>It looks like part of the problem is that two differing paths are used to get from <code>field</code> to <code>ring</code>. I have no idea how to avoid this...</p>",
        "id": 283194582,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653169385
    },
    {
        "content": "<p>What does<code>convert tr</code> leave as a goal?</p>",
        "id": 283194791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653169794
    },
    {
        "content": "<p>Does changing the second <code>haveI</code> to a <code>letI</code> help?</p>",
        "id": 283194858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653169841
    },
    {
        "content": "<p>I think that's your problem; lean is saying \"you told me to forget what <code>_inst_3</code> is, so I can't unfold it any further to check it's equal to the other instance\"</p>",
        "id": 283194944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653169984
    },
    {
        "content": "<p>Thanks! I was forgetting that <code>algebra ...</code> is data.</p>",
        "id": 283195112,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653170252
    },
    {
        "content": "<p>A more helpful error message would go a long way...</p>",
        "id": 283195180,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653170360
    },
    {
        "content": "<p>We could make <code>haveI</code> detect this error</p>",
        "id": 283195430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653170714
    },
    {
        "content": "<p>Do you even need the haveI there though?</p>",
        "id": 283195436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653170733
    },
    {
        "content": "<p>Actually, no.</p>",
        "id": 283195806,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653171304
    },
    {
        "content": "<p>What made you think you did?</p>",
        "id": 283195871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653171367
    },
    {
        "content": "<p>(that is, do we need to improve documentation somewhere?)</p>",
        "id": 283195885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653171401
    },
    {
        "content": "<p>I think I thought I needed <code>[char_p F (ring_char F)]</code> for something. But it is possible that as the proof evolved, that changed.</p>",
        "id": 283195951,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653171522
    },
    {
        "content": "<p><del>Ah right,</del> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_char.char_p\">docs#ring_char.char_p</a> is <del>not</del> an instance</p>",
        "id": 283196028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653171625
    },
    {
        "content": "<p>So you have that automatically with no need for a haveI</p>",
        "id": 283196060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653171704
    },
    {
        "content": "<p>Ah, I hadn't realized that. Good to know...</p>",
        "id": 283196195,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653171896
    },
    {
        "content": "<p>Having said that, the strategy of adding letI lines is a good one when lean can't find the instance through a long chain and you can't work out what condition you're missing</p>",
        "id": 283196326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653172135
    },
    {
        "content": "<p>For instance, if it can't find addition on a product type, you add <code>letI : has_add (X × Y) := prod.has_add</code> and then your error message will tell you where the left or right half is missing addition</p>",
        "id": 283196389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653172236
    },
    {
        "content": "<p>Thanks for the tip! I'll try to remember it.</p>",
        "id": 283232311,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653226160
    },
    {
        "content": "<p>Another question: I'm having trouble with something like the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">A'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">A'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">ℤ</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"n\">test1.A'</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">test1.B</span><span class=\"o\">,</span>\n  <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">test1.C.comp</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"c1\">-- failed to synthesize type class instance for</span>\n<span class=\"c1\">-- ⊢ add_zero_class test1.A'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test3</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"n\">test1.A'</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">test1.B</span><span class=\"o\">,</span>\n  <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">test1.B</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">test1.C.comp</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">end</span> <span class=\"o\">}</span>\n<span class=\"c1\">-- synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized</span>\n<span class=\"c1\">--  add_monoid.to_add_zero_class test1.A'</span>\n<span class=\"c1\">-- inferred</span>\n<span class=\"c1\">--  add_monoid.to_add_zero_class test1.A'</span>\n</code></pre></div>\n<p>How do I get the correct instance(s) into the context when filling the fields of the structure?</p>",
        "id": 283236312,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653231691
    },
    {
        "content": "<p>What about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">A'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">A'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 283236371,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653231760
    },
    {
        "content": "<p>Still gives the same error for <code>test2</code> (and <code>test3</code>).</p>",
        "id": 283236492,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653231941
    },
    {
        "content": "<p>In fact, <code>test2</code> gives now the additional message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"bp\">⁇</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">test1.A'</span>\n</code></pre></div>",
        "id": 283236544,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653231992
    },
    {
        "content": "<p>replacing <code>comm_ring</code> by <code>add_zero_class</code> to exclude possible problems from chaining of instances doesn't help. Instead of <code>add_monoid.to_add_zero_class test1.A'</code>the error messages now refer to <code>test1.B</code>, but they are still there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"n\">A'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">A'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">ℤ</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"n\">test1.A'</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">test1.C.comp</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"c1\">-- failed to synthesize type class instance for</span>\n<span class=\"c1\">-- ⊢ add_zero_class test1.A'</span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">-- synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized</span>\n<span class=\"c1\">--   ⁇</span>\n<span class=\"c1\">-- inferred</span>\n<span class=\"c1\">--   test1.B</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test3</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">test1.B</span><span class=\"o\">,</span> <span class=\"n\">exact</span>\n<span class=\"o\">{</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"n\">test1.A'</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">test1.C.comp</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized</span>\n<span class=\"c1\">--   _inst</span>\n<span class=\"c1\">-- inferred</span>\n<span class=\"c1\">--   test1.B</span>\n</code></pre></div>",
        "id": 283237550,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653233494
    },
    {
        "content": "<p>The red squiggly line is below <code>C</code>(in <code>test1.C.comp</code>) in <code>test2</code>, but below <code>test1</code> in <code>test3</code>.</p>",
        "id": 283237635,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653233600
    },
    {
        "content": "<p>I do not know how to analyze this, but maybe this is useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"c1\">--  B is now implicit, rather than typeclass</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"n\">A'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">A'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">ℤ</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"n\">test1.A'</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"c1\">--  use @, ugh, and the ℤ is important!</span>\n  <span class=\"n\">C</span> <span class=\"o\">:=</span>  <span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">test1.C</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 283238202,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653234547
    },
    {
        "content": "<p>Add <code>attribute [instance] test.B</code> after the definition of <code>test</code>, and get rid of the <code>haveI</code> tactic stuff in <code>test3</code> (it creates a variable instance with no local definition)</p>",
        "id": 283238845,
        "sender_full_name": "Reid Barton",
        "timestamp": 1653235151
    },
    {
        "content": "<p>Thanks, Reid.<br>\nCan you also explain why this is necessary?</p>",
        "id": 283241838,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653239311
    },
    {
        "content": "<p>When you write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"n\">A'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">A'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>this means \"make <code>B</code> a typeclass argument to <code>test.mk</code>\"</p>",
        "id": 283241987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653239528
    },
    {
        "content": "<p>It does not mean \"use <code>B</code> when performing instance search\"</p>",
        "id": 283241992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653239547
    },
    {
        "content": "<p>To say that, you need to add the <code>[instance]</code> attribute; it helps if you remember that <code>instance</code> is roughly <code>@[instance] def</code></p>",
        "id": 283242003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653239578
    },
    {
        "content": "<p>OK. And why did the <code>haveI ...</code> version not work? The error message was quite confusing, claiming that two things are not defeq that look exactly the same.</p>",
        "id": 283242023,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653239622
    },
    {
        "content": "<p>It is the usual <code>letI</code> vs <code>haveI</code> issue</p>",
        "id": 283242202,
        "sender_full_name": "Reid Barton",
        "timestamp": 1653239787
    },
    {
        "content": "<p>Again! <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 283242218,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1653239841
    }
]