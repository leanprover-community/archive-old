[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>why does this fail?</p>\n<p>error state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_instance</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n  <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193375346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378176
    },
    {
        "content": "<p>Did you try to look at the trace?</p>",
        "id": 193376276,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586378750
    },
    {
        "content": "<p>yeah it keeps trying a billion things on the lambda thing</p>",
        "id": 193376339,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378770
    },
    {
        "content": "<p>actually it substituted in the lambda so it's trying to prove some <code>(_ : \\a) &lt; _</code> is decidable</p>",
        "id": 193376388,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378814
    },
    {
        "content": "<p>but somehow it never finds the right instance</p>",
        "id": 193376406,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378823
    },
    {
        "content": "<p>If you beta reduce it does it work?</p>",
        "id": 193376499,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586378877
    },
    {
        "content": "<p>so you mean <code>intro</code>?</p>",
        "id": 193376591,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378918
    },
    {
        "content": "<p>If I put <code>decidable_linear_order</code> instead of <code>discrete*</code>, it works.</p>",
        "id": 193376617,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586378938
    },
    {
        "content": "<p>Doesn't work with <code>decidable_linear_ordered_comm_group</code></p>",
        "id": 193376693,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586378994
    },
    {
        "content": "<p>can this be solved with some <code>priority</code> hacking?</p>",
        "id": 193377098,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586379202
    },
    {
        "content": "<p>It tries <code>has_lt.lt.decidable</code> but for some reason <code>defeq</code> fails.</p>",
        "id": 193377292,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586379318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ?</p>",
        "id": 193377297,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586379323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> ?</p>",
        "id": 193377325,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586379335
    },
    {
        "content": "<p>The surprising thing is that the following works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 193378364,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586379799
    },
    {
        "content": "<p>I don't know how to debug this...</p>",
        "id": 193379440,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586380415
    },
    {
        "content": "<p>Problem seems to be in unification, because the type-class search creates higher-order patterns like <code>?x_123 a</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- also fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 193379504,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586380443
    },
    {
        "content": "<p>I haven't got a good explanation either, but here's a workaround:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 193379536,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586380472
    }
]