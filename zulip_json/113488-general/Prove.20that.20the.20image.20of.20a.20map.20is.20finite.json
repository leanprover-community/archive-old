[
    {
        "content": "<p>Hello,<br>\nI'm relatively new to lean (I learned about lean a year ago, I did the natural numbers game, but only started to use it more seriously the last week).<br>\nSo I thought a good starting project would be \"a cont. bij. map from a compact space to a hausdorff space is a homeo\".<br>\nAt the moment I have a mostly working proof of \"compact subset in a hausdorff space is closed\", but I'm stuck at the following problem:</p>\n<p>(To remind you, the proof is roughly the following: Let A be the compact set, let x  be a point not in A, for every point in A choose a neighborhood disjoint to a neighborhood of x, get a finite subcover, and use the intersection of the corresponding neighborhoods of x as open nbhd of x disjoint to A)</p>\n<p>So I have the finite subcover of A, and I built a \"function\" of the following type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">subcover</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nhds_of</span> <span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span> <span class=\"bp\">∩</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">},</span> <span class=\"kd\">by</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>(for every open u in the subcover, we get a nbhd of x, which is disjoint to u)<br>\nThen our finite set of nbhds of x would be the range of this subcover, this works.</p>\n<p>Now I have trouble showing that the range is finite.<br>\nI used <code>finite_image</code>, but this does not work, because the function's domain is not the Type set X, but a subtype of it,<br>\nfor it to work, one apparently needs a function <code>set X -&gt; set X</code>, and then it gives you that the image of <code>subcover</code> is finite.</p>\n<p>So I built the following \"workaround\":</p>\n<p>I defined a function<br>\n<code>  let tempfun : set X → set X := λ u, if hu : u ∈ subcover then (f ⟨u, by assumption⟩).1.1 else ∅,</code></p>\n<p>Then I proofed that  the image of <code>subcover</code> is finite by using <code>finite_image</code></p>\n<p>First question: Can we avoid this weird workarounds?</p>\n<p>Second question: Later I need to use that <code>tempfun u = f (&lt;u, hu&gt;)</code>, (where <code>hu : u ∈ subcover</code>),<br>\nwhich should be a trivial proof, but I don't know how to do it.</p>\n<p>Thanks in advance!<br>\nApologies if these questions are dumb or obvious, but I searched the web for quite a while and found nothing helpful :(</p>",
        "id": 224709653,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1612176681
    },
    {
        "content": "<p>To be precise in the second question: I made a mistake, I want to show <code>tempfun u = f (&lt;u, hu&gt;).1.1</code>. which gets the underlying set of the neighborhood with the condition that it is disjoint to u.</p>",
        "id": 224710026,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1612176942
    },
    {
        "content": "<p>I think you'd be a lot more likely to get help with an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, it's difficult to solve \"how do I do this trivial proof\" questions without having exactly the same set of lean-based hurdles in front of us as you do.</p>",
        "id": 224710446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612177191
    },
    {
        "content": "<p>I proved compact subspace of a Hausdorff space is closed using this \"classical\" approach in one of my Twitch streams over the summer: the code is <a href=\"https://github.com/ImperialCollegeLondon/Example-Lean-Projects/blob/master/src/topology/twitch.lean\">here</a>. I wrote a lot of comments. In mathlib they give a completely different proof using filters.</p>",
        "id": 224710794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612177383
    },
    {
        "content": "<p>Ok, yeah looks like a great idea to make a mwe :)<br>\nSo it would be the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">image_of_fin_set_is_finite</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"c1\">--exact finite_image f hs, does not work, since finite_image expects f to start at A</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>And thanks, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , I will look at your code!</p>",
        "id": 224712060,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1612178197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385865\">@Klaus Mattis</span> that code snippet is a bit \"too minimal\". Please include <code>import foobar.quux</code> in the code snippets, so that people can copy paste them into a new file and immediately have compiling code.</p>",
        "id": 224712264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612178338
    },
    {
        "content": "<p>I edited it in the above code.</p>",
        "id": 224712617,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1612178560
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">image_of_fin_set_is_finite</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">finite_range</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hs.fintype</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224713108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612178945
    },
    {
        "content": "<p>Ok, thanks a lot!</p>",
        "id": 224714478,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1612179898
    }
]