[
    {
        "content": "<p>Hello. There exists a section in 4.4, from the \"Theorem Proving in Lean\" book that contains a bunch of common identities, involving the existential quantifier. I'm working through solving all of them, and I've solved <code>example: (∀ x, p x) ↔ ¬ (∃ x, ¬ p x) :=</code> using classical logic (by_contradiction specifically). I'm wondering if it is possible to get away with a proof that does not require classical logic here? My proof is as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n      <span class=\"k\">show</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n      <span class=\"k\">assume</span> <span class=\"n\">hpos</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n      <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hpos</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n          <span class=\"k\">assume</span> <span class=\"n\">hinner</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n          <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hinner</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n      <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"n\">by_contradiction</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">hpos</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n          <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">hpos</span>\n        <span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n</pre></div>",
        "id": 161549492,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1553386257
    },
    {
        "content": "<p>It's not possible without classical logic.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">unit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"err\">∘</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"o\">)))</span> <span class=\"o\">()</span>\n</pre></div>",
        "id": 161549932,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553387018
    },
    {
        "content": "<p>More or less, the reason is that the right hand direction is a proof of double negation. <code>¬¬p - &gt; p</code></p>",
        "id": 161550062,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553387244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213284\">@Christopher Hughes</span> Ok that makes sense, thank you very much!</p>",
        "id": 161550593,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1553388177
    },
    {
        "content": "<p>I don't know of any example of a question of the form \"show that this statement which is true in classical logic cannot be shown in constructive logic\" which cannot be answered by showing that the law of the excluded middle is implied by the statement. Is this a general principle or are there classically true statements which are unprovable in constructive logic and yet do not constructively imply LEM?</p>",
        "id": 161564328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553412616
    },
    {
        "content": "<p>there are intermediate statements</p>",
        "id": 161564588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553413125
    },
    {
        "content": "<p>an example is <code>not not p \\/ not p</code></p>",
        "id": 161564591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553413137
    },
    {
        "content": "<p>wikipedia has a whole zoo of them: <a href=\"https://en.wikipedia.org/wiki/Intermediate_logic\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Intermediate_logic\">https://en.wikipedia.org/wiki/Intermediate_logic</a></p>",
        "id": 161564656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553413211
    },
    {
        "content": "<p>I have trouble thinking classically, but there is this constructive derivation of one of the demorgan's, which isn't constructively derivable without additional assumptions, but which can then be derived using excluded middle, or A ∨ B<br>\ngiving a weird half classical/half constructive proof... <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">something</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">demorgans</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">lem</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">lem</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nab</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">na</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">na</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">weird_demorgans</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a_or_b</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">B</span> <span class=\"o\">:=</span>\n   <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">a_or_b</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">((</span><span class=\"n\">something</span> <span class=\"n\">nab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">((</span><span class=\"n\">something</span> <span class=\"n\">nab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">B</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">weird_demorgans</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">lem</span><span class=\"o\">,</span> <span class=\"n\">demorgans</span> <span class=\"n\">lem</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 161586874,
        "sender_full_name": "matt rice",
        "timestamp": 1553446397
    }
]