[
    {
        "content": "<p>I sort of wish we had two <code>if</code>s, one defined in terms of <code>decidable</code> like the built-in one, and a noncomputable one defined in terms of <code>choice</code>. That way we would never have to worry about which proof of decidability appears in the statements of lemmas. Is this crazy?</p>",
        "id": 178900928,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571867891
    },
    {
        "content": "<p>Thinking of lemmas such as <code>s.prod (λ x, (ite (a = x) b 1)) = ite (a ∈ s) b 1</code>: of course the lemma is true whether or not the evidence of <code>decidable (a = x)</code> has anything to do with the evidence of <code>decidable (a ∈ s)</code>, but the lemma statement might require them to be related in a specific way (depending on exactly what instance parameters it assumes).</p>",
        "id": 178901105,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571868070
    },
    {
        "content": "<p>This is also in the spirit of \"classical semantics, computable algorithms specified in terms of them\"</p>",
        "id": 178901201,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571868149
    },
    {
        "content": "<p>Well, it's also the case that it's possible to write these lemmas in a way that they can be applied in any situation, regardless of the choices of <code>decidable</code> instances. It's just really awkward to do so.</p>",
        "id": 178902666,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571869535
    },
    {
        "content": "<p>it seems like this is a failing of rewriting and congr stuff to not be able to properly ignore decidable args</p>",
        "id": 178904930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571871602
    },
    {
        "content": "<p>Or subsingletons in general. Though it is also nice to just be able to apply things, without tactics.</p>",
        "id": 178905113,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571871720
    },
    {
        "content": "<p>you don't usually apply an equality</p>",
        "id": 178905565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571872112
    },
    {
        "content": "<p>lean's term mode handling of congruence is pretty anemic</p>",
        "id": 178905607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571872167
    },
    {
        "content": "<p>for some reason <code>congr</code> thinks it's best to create congr lemmas on the fly all the time, even though there is only one for each definition so they could easily be auto-generated with the definition</p>",
        "id": 178905696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571872246
    }
]