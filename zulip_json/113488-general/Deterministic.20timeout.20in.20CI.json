[
    {
        "content": "<p>CI is hitting deterministic timeouts in the following PR <a href=\"https://github.com/leanprover-community/mathlib/issues/10303\">#10303</a> but I can't reproduce this on my machine. <br>\nActually, the proof that causes issues is really not that slow on my machine. Can anyone reproduce?</p>",
        "id": 261323221,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636758610
    },
    {
        "content": "<p>Does anyone know what might be happening?</p>",
        "id": 261381218,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636839494
    },
    {
        "content": "<p>Well looks like Adam fixed his specific issue, are you asking what can cause deterministic timeout in general? Some proofs are just too slow.</p>",
        "id": 261381959,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636840647
    },
    {
        "content": "<p>Yeah, I fixed it.</p>",
        "id": 261382919,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636841732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Deterministic.20timeout.20in.20CI/near/261381959\">said</a>:</p>\n<blockquote>\n<p>Well looks like Adam fixed his specific issue, are you asking what can cause deterministic timeout in general? Some proofs are just too slow.</p>\n</blockquote>\n<p>Ah, no. I saw the topic on my phone and I noticed that nobody had said anything so I just asked. Glad it was fixed <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 261385276,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636844781
    },
    {
        "content": "<p>CI has been failing repeatedly for <a href=\"https://github.com/leanprover-community/mathlib/pull/17212\">#17212</a>. The reason being a deterministic timeout in <code>algebraic_geometry.structure_sheaf</code>. Now, this file is unmodified by this PR. Still  I was able to track back the problem to the import of <code>field_theory.subfield</code> in <code>topology.algebra.field</code> which I guess is imported at some point in  <code>algebraic_geometry.structure_sheaf</code>... An easy fix would be to remove the import in <code>topology.algebra.field</code> and move the result using it elsewhere. But this result, which proves that the closure of a subfield is a subfield, does naturally fits there in my opinion so I am looking for some other options.<br>\nFYI, it takes about 50s for Lean to compile the file <code>algebraic_geometry.structure_sheaf</code> on my M1 laptop.</p>",
        "id": 307116227,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1667224962
    },
    {
        "content": "<p>I can take a look, nothing obvious jumps out from just looking at the code. Though I recall having some timeouts in this file before.</p>",
        "id": 307128631,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1667228320
    },
    {
        "content": "<p>Thanks. Is there anything I can do to help?</p>",
        "id": 307128894,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1667228402
    },
    {
        "content": "<p>I traced it to the <code>@[simps]</code> attribute at least, so it might just be a loop in the simp lemmas or similar.</p>",
        "id": 307129547,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1667228566
    },
    {
        "content": "<p>Thanks for the offer, I'll experiment a bit further and let you know :)</p>",
        "id": 307129710,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1667228605
    },
    {
        "content": "<p>It looks like the following config option fixes the timeout:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps {rhs_md := tactic.transparency.semireducible}]</span>\n<span class=\"kd\">def</span> <span class=\"n\">global_sections_iso</span> <span class=\"o\">:</span> <span class=\"n\">CommRing.of</span> <span class=\"n\">R</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"n\">structure_sheaf</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">as_iso</span> <span class=\"o\">(</span><span class=\"n\">to_open</span> <span class=\"n\">R</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now to figure out why...</p>",
        "id": 307130213,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1667228748
    },
    {
        "content": "<p>Conclusion: for some reason that I don't know how to diagnose, <code>simps</code> does some bad unfolds and ends up unifying in the types (which is usually a bad time). Adding the <code>semireducible</code> transparency helps it to choose the right path. So I think that my suggestion above is the way to go.</p>",
        "id": 307134925,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1667230107
    },
    {
        "content": "<p>Ok. Thanks a lot. I'll add this to the PR.</p>",
        "id": 307135947,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1667230361
    },
    {
        "content": "<p>Well, I am getting a timeout in <code>algebraic_geometry/Spec.lean</code> now. It seems to be related to a <code>simp</code> also. I'll see if the same fix works.</p>",
        "id": 307140159,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1667231571
    },
    {
        "content": "<p>Without having looked into it: if you add the <code>@[simps]</code> attribute to a definition whose definiens is not a constructor application, the <code>@[simps]</code> will call the <code>simp</code> tactic to compute what the right-hand side of the lemmas should be. In this case, it will apply <code>simp</code> on something like <code>(as_iso (to_open R ⊤)).1</code> and <code>(as_iso (to_open R ⊤)).2</code>, which might take a long time. Writing <code>@[simps {rhs_md := semireducible}]</code> yourself disables this, but makes me wonder how useful the <code>simp</code> lemma will end up being (won't the same computation then happen whenever <code>simp</code> uses this lemma in a proof?)</p>",
        "id": 307218371,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1667257239
    },
    {
        "content": "<p>Putting it out here in case someone has time to investigate, we get timeouts in</p>\n<ul>\n<li><code>algebraic_topology/dold_kan/normalized:118:4</code></li>\n<li><code>ring_theory/adjoin_root:338:0</code></li>\n</ul>",
        "id": 322002256,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674032947
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/pull/17949\">#17949</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/18202\">#18202</a></p>",
        "id": 322002386,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674033001
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/leanprover-community/mathlib/pull/18207\">#18207</a> for the first</p>",
        "id": 322009378,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674035254
    },
    {
        "content": "<p>Let me take a look at the <code>adjoin_root</code> timeout.</p>",
        "id": 322024746,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1674039972
    },
    {
        "content": "<p>Ah, it's <code>@[simps]</code> on a non-constructor-application. I'll probably just replace it with manually written lemmas then.</p>",
        "id": 322024917,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1674040011
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18209\">#18209</a></p>",
        "id": 322030945,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1674041971
    }
]