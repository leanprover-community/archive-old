[
    {
        "content": "<p>meta programming problem: So I have a function body represented as <code>expr -&gt; expr</code>, which receives a reference to the argument, and return the body. Is it possible to abstract the argument away(that is, wrap it with a lambda) and get the anonymous function back as <code>expr</code>?</p>",
        "id": 130588564,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1532966537
    },
    {
        "content": "<p>I might have been blur about <code>expr</code> and <code>pexpr</code>, but I hope that won't cause too much confusion.</p>",
        "id": 130588588,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1532966571
    },
    {
        "content": "<p>Look in <code>init/meta/expr.lean</code>. The trick is to create an <code>expr</code> with a local constant, use <code>abstract_local</code> to replace it by an index, and then bind it.</p>\n<p>My experiments follow. In the first example, I used a local variable in the context. For some reason, <code>bind_lambda</code> didn't work in that case (the abstracted variable did not get the right type), so I did it by hand. In the second example, I made a fresh local variable.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">do</span>\n<span class=\"n\">f&#39;</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">x&#39;</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f&#39;</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"n\">e</span><span class=\"o\">,</span>  <span class=\"c1\">-- e is the expression f x</span>\n<span class=\"c1\">-- let e&#39; := expr.bind_lambda e x&#39;, -- this didn&#39;t work</span>\n<span class=\"n\">nt</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"o\">),</span>\n<span class=\"k\">let</span> <span class=\"n\">e&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"n\">nt</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">abstract_local</span> <span class=\"n\">x&#39;</span><span class=\"bp\">.</span><span class=\"n\">local_uniq_name</span><span class=\"o\">),</span>\n<span class=\"n\">trace</span> <span class=\"n\">e&#39;</span><span class=\"o\">,</span>  <span class=\"c1\">-- e&#39; is the expression λ (x : ℕ), f x</span>\n<span class=\"n\">exact</span> <span class=\"n\">e&#39;</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">do</span>\n<span class=\"n\">f&#39;</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">nt</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"o\">),</span>\n<span class=\"n\">x&#39;</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"n\">nt</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">f&#39;</span> <span class=\"err\">%%</span><span class=\"n\">x&#39;</span><span class=\"o\">),</span>\n<span class=\"n\">trace</span> <span class=\"n\">e</span><span class=\"o\">,</span>  <span class=\"c1\">-- e is the expression f x</span>\n<span class=\"k\">let</span> <span class=\"n\">e&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">bind_lambda</span> <span class=\"n\">e</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"n\">e&#39;</span><span class=\"o\">,</span>  <span class=\"c1\">-- e&#39; is the expression λ (x : ℕ), f x</span>\n<span class=\"n\">exact</span> <span class=\"n\">e&#39;</span>\n</pre></div>",
        "id": 130599168,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1532977807
    },
    {
        "content": "<p>Thank you jeremy. But it seems <code>tactic</code> is still used in both cases? Specifically, you used <code>mk_local</code>. It seems quite hard to do this without tactic monad?</p>",
        "id": 130599995,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1532979003
    },
    {
        "content": "<p>yeah I think I shouldn't be bother by using <code>tactic</code>.</p>",
        "id": 130600130,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1532979163
    },
    {
        "content": "<p>I looked in the definition of <code>mk_local</code> and really, <code>mk_fresh_name</code> is all I need from the <code>tactic</code>.</p>",
        "id": 130600142,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1532979202
    },
    {
        "content": "<p>Why is it important to not have the tactic monad?</p>",
        "id": 130600826,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532980165
    },
    {
        "content": "<p>because this is a proof that in principle can be exclusively derived from a data structure, without looking at the environment.</p>",
        "id": 130600984,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1532980353
    },
    {
        "content": "<p>but anyway, the current solution is good enough, I only need a fresh name from the <code>tactic</code>monad, so that's minimal side effect.</p>",
        "id": 130601087,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1532980482
    },
    {
        "content": "<p>If you are building expressions entirely from scratch, you can make up your own unique name if you want. But <code>expr</code> is <code>meta</code>, so if you want to stay entirely within the logic, you have to define your own type of expressions.</p>",
        "id": 130608722,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1532990177
    },
    {
        "content": "<p>I'm actually thinking about using <code>pexpr.var : nat -&gt; pexpr</code> which is de-bruijn index. So I don't have to worry about all the details of <code>local_const</code>.  I plan to construct the <code>pexpr</code> as a pure function of the LSEC proof, and elaborate the huge proof altogether.</p>",
        "id": 130608796,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1532990320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> yeah but if I do that we still need a conversion from my custom expr to the lean <code>expr</code>.</p>",
        "id": 130609160,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1532990854
    },
    {
        "content": "<p>If you are building Lean expressions, don't hesitate to use the tactic framework. You will probably need constants from the environment anyway, and your code will be easier to debug if you elaborate expressions piece by piece.</p>",
        "id": 130609351,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1532991156
    }
]