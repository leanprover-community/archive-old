[
    {
        "content": "<p>I have spent many hours over the last few weeks trying to make this compile (from deep within the perfectoid project):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">valuation_on_completion</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"err\">Î“</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">valuation</span>\n    <span class=\"o\">(</span><span class=\"n\">ring_completion</span>\n      <span class=\"o\">(</span><span class=\"n\">valuation</span><span class=\"bp\">.</span><span class=\"n\">valuation_field</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">value_group</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">valuation</span><span class=\"bp\">.</span><span class=\"n\">completion_extend</span> <span class=\"o\">(</span><span class=\"n\">valuation_field</span><span class=\"bp\">.</span><span class=\"n\">canonical_valuation</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I would get deterministic timeouts which were extremely hard to debug.</p>\n<p>Today I idly changed <code>Type*</code> to <code>Type u</code> and all the issues immediately went away.</p>\n<p>Thanks Lean.</p>",
        "id": 164341486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556380441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  is this a known bug in Lean 3.4.2? Can this be fixed in Lean 3.5c? I know Kenny found some universe weirdness but I didn't remember it being as harsh as this.</p>",
        "id": 164351478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556395558
    },
    {
        "content": "<p>I don't really know what this is</p>",
        "id": 164351523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556395572
    },
    {
        "content": "<p>Kenny also had an example where elaboration behaved differently when universes were mentioned explicitly. We've been struggling with a \"heavy <code>rfl</code>\" for days now, and today it just magically went away when I randomly tried this. We were on the verge of proclaiming that perfectoid spaces created terms which type class inference simply could not handle, but then all our problems seemed to magically go away when I switched. This issue has been kind of a big deal in my life over the last two weeks and I'm extremely glad to see the back of it.</p>",
        "id": 164351543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556395675
    },
    {
        "content": "<p>Did the <code>Type*</code> fill it in correctly. I had this problem where it guessed <code>max u v</code> instead of <code>w</code>.</p>",
        "id": 164351607,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556395797
    },
    {
        "content": "<p>also how many universe variables are actually in the statement?</p>",
        "id": 164351654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556395836
    }
]