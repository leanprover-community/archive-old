[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/b902f6e0a7e48c87d16f1112199d812e14fdee6b/src/group_theory/coset.lean#L11\">https://github.com/leanprover-community/mathlib/blob/b902f6e0a7e48c87d16f1112199d812e14fdee6b/src/group_theory/coset.lean#L11</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">left_add_coset</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">left_coset</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 198119534,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589918783
    },
    {
        "content": "<p>should this be a new definition with <code>attribute [to_additive left_add_coset] left_coset</code> afterwards?</p>",
        "id": 198119582,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589918804
    },
    {
        "content": "<p>because currently the additive version cannot be unfolded</p>",
        "id": 198119600,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589918815
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">coset</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">left_coset</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">left_coset</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">left_coset</span> <span class=\"c1\">-- (λ (x_1 : G), x * x_1) &#39;&#39; s = (λ (x_1 : G), x * x_1) &#39;&#39; s ∧ 0 = 0</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">left_add_coset</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">left_add_coset</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">left_add_coset</span> <span class=\"c1\">-- unfold tactic failed, left_add_coset does not have equational lemmas nor is a projection</span>\n</code></pre></div>",
        "id": 198119866,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589918949
    },
    {
        "content": "<p>or have we collectively decided that this isn't important?</p>",
        "id": 198119892,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589918966
    },
    {
        "content": "<p>Maybe it's a bug that <code>to_additive</code> didn't copy the equational lemma? I don't know.</p>",
        "id": 198120055,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589919030
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">left_coset</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">left_add_coset</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>left_coset : Π {α : Type u_1} [_inst_1 : has_mul α], α → set α → set α\nleft_coset.equations._eqn_1 : ∀ {α : Type u_1} [_inst_1 : has_mul α] (a : α) (s : set α), left_coset a s = (λ (x : α), a * x) &#39;&#39; s\n\nleft_add_coset : Π {α : Type u_1} [_inst_1 : has_add α], α → set α → set α\nleft_add_coset.equations._eqn_1 : ∀ {α : Type u_1} [_inst_1 : has_add α] (a : α) (s : set α), left_add_coset a s = (λ (x : α), a + x) &#39;&#39; s\n</code></pre></div>",
        "id": 198120128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589919083
    },
    {
        "content": "<p>I think I've been told before that there is no way to make Lean recognize this as an equational lemma</p>",
        "id": 198120158,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589919101
    },
    {
        "content": "<p>because something something unsafe</p>",
        "id": 198120171,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589919108
    },
    {
        "content": "<p>would it try to rename <code>_eqn_1</code> to <code>_eqn_0</code></p>",
        "id": 198120572,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589919327
    },
    {
        "content": "<p>Oh, are you saying you can't just randomly create lemmas and then mark them as equational lemmas for an unrelated definition? That sounds fair</p>",
        "id": 198120666,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589919363
    },
    {
        "content": "<p>When <code>to_additive</code> was written, there was no way to get at the <code>eqn_lemmas</code> data structure in lean. I'm not sure if that has since changed, but it is not sufficient that the theorem itself be transferred</p>",
        "id": 198120703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589919380
    },
    {
        "content": "<p>I don't think it's about something something unsafe but rather something something core is frozen</p>",
        "id": 198120844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589919456
    },
    {
        "content": "<p>Fortunately I think it only renames <code>one</code> to <code>zero</code></p>",
        "id": 198122294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589920133
    },
    {
        "content": "<p>so my question is that, given the current situation, whether we should instead write:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">left_coset</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span>\n<span class=\"n\">def</span> <span class=\"n\">left_add_coset</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">left_add_coset</span><span class=\"o\">]</span> <span class=\"n\">left_coset</span>\n</code></pre></div>",
        "id": 198122516,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589920219
    },
    {
        "content": "<p>because that's what I'm doing with my next PR</p>",
        "id": 198122534,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589920229
    },
    {
        "content": "<p>which will feature a cleanup of <code>algebra/free.lean</code></p>",
        "id": 198122568,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589920253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> and <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> will know the ins and outs of <code>to_additive</code>.</p>",
        "id": 198122676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589920310
    },
    {
        "content": "<p>Currently <code>to_additive</code> copies lemmas like <code>_eqn*</code> so that if you write another proof for multiplicative version, then <code>to_additive</code> can transfer this proof. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> can we tell Lean that these new lemmas are <code>eqn_lemmas</code>?</p>",
        "id": 198125484,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589921822
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/254\">lean#254</a>  I have no idea if we already copy/generate the sunfold lemmas, please check this.  Otherwise there will be troubles when you copy definitions using pattern matching.</p>",
        "id": 198130237,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589924274
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">faux_eqn</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n<span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">get_eqn_lemmas_for</span> <span class=\"bp\">``</span><span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">get_ext_eqn_lemmas_for</span> <span class=\"bp\">``</span><span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"n\">set_env</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">add_eqn_lemma</span> <span class=\"bp\">``</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">faux_eqn</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n<span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">get_eqn_lemmas_for</span> <span class=\"bp\">``</span><span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">get_ext_eqn_lemmas_for</span> <span class=\"bp\">``</span><span class=\"n\">foo</span>\n\n<span class=\"c1\">-- success: we&#39;ve taught lean a new and exciting simp lemma!</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 198131782,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589925186
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/254/files#diff-daf40fe419a336b67daea8eb97f79eb6\">https://github.com/leanprover-community/lean/pull/254/files#diff-daf40fe419a336b67daea8eb97f79eb6</a></p>",
        "id": 198131789,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589925193
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> !</p>",
        "id": 198131804,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589925200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> it's so much more convenient now that we can edit core itself; I'm still in the mindset of using workarounds</p>",
        "id": 198131958,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589925280
    },
    {
        "content": "<p>This opens the question of what should happen when multiple equation lemmas apply though</p>",
        "id": 198133052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589925925
    },
    {
        "content": "<p>I don't think that's possible with current lean since the equations generated by the equation compiler are disjoint</p>",
        "id": 198133141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589925966
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 198134578,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589926968
    },
    {
        "content": "<p>but still, in the current situation, I'll use the workaround then</p>",
        "id": 198153837,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589949181
    }
]