[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> got the following error in <a href=\"https://github.com/leanprover-community/mathlib/pull/16033\">#16033</a> (minimized somewhat):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.bounded_order</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_himp</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">himp</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_hnot</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hnot</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">has_himp</span> <span class=\"o\">(</span><span class=\"n\">himp</span><span class=\"o\">)</span> <span class=\"n\">has_sdiff</span> <span class=\"o\">(</span><span class=\"n\">sdiff</span><span class=\"o\">)</span> <span class=\"n\">has_hnot</span> <span class=\"o\">(</span><span class=\"n\">hnot</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">⇨</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"o\">:=</span> <span class=\"n\">himp</span>\n<span class=\"kd\">prefix</span> <span class=\"bp\">`￢`</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"o\">:=</span> <span class=\"n\">hnot</span>\n<span class=\"kd\">class</span> <span class=\"n\">generalized_heyting_algebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_himp</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">formatter.hide_full_terms</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">heyting_algebra_works</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">generalized_heyting_algebra</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_bot</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_compl</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">compl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">himp</span> <span class=\"n\">a</span> <span class=\"n\">bot</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">heyting_algebra_fails</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">generalized_heyting_algebra</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_bot</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">compl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⇨</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to add declaration 'heyting_algebra_fails.compl._default' to environment, type has metavariables</span>\n<span class=\"cm\">  Π {α : Type u_1} (sup : α → α → α) (le lt : α → α → Prop) (le_refl : ∀ (a : α), a ≤ a)</span>\n<span class=\"cm\">  (le_trans : ∀ (a b c : α), a ≤ b → b ≤ c → a ≤ c)</span>\n<span class=\"cm\">  (lt_iff_le_not_le :</span>\n<span class=\"cm\">    auto_param (∀ (a b : α), a &lt; b ↔ a ≤ b ∧ ¬b ≤ a) (name.mk_string \"order_laws_tac\" name.anonymous))</span>\n<span class=\"cm\">  (le_antisymm : ∀ (a b : α), a ≤ b → b ≤ a → a = b),</span>\n<span class=\"cm\">    (∀ (a b : α), a ≤ a ⊔ b) →</span>\n<span class=\"cm\">    (∀ (a b : α), b ≤ a ⊔ b) →</span>\n<span class=\"cm\">    (∀ (a b c : α), a ≤ c → b ≤ c → a ⊔ b ≤ c) →</span>\n<span class=\"cm\">    Π (inf : α → α → α),</span>\n<span class=\"cm\">      (∀ (a b : α), a ⊓ b ≤ a) →</span>\n<span class=\"cm\">      (∀ (a b : α), a ⊓ b ≤ b) →</span>\n<span class=\"cm\">      (∀ (a b c : α), a ≤ b → a ≤ c → a ≤ b ⊓ c) → (α → α → α) → α → α → α</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>It feels like the notation pulls in \"too much\" which leads to errors, but I'm not sure what to make of it precisely.</p>",
        "id": 293671045,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660636971
    },
    {
        "content": "<p>Does the <code>_works</code> example need <code>has_compl</code> to work? Does it appear to be the combination of the extra typeclass as well as the notation, or just one of these?</p>",
        "id": 293738304,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1660663046
    },
    {
        "content": "<blockquote>\n<p>Does the _works example need has_compl to work? </p>\n</blockquote>\n<p>No.</p>",
        "id": 293808150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660687424
    },
    {
        "content": "<p><code>set_option old_structure_cmd false</code> fixes it, so that's certainly part of the problem.</p>",
        "id": 293808798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660687677
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">⇨</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"o\">:=</span> <span class=\"n\">himp</span>\n<span class=\"kd\">class</span> <span class=\"n\">generalized_heyting_algebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">preorder'</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_himp</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">heyting_algebra_works</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">generalized_heyting_algebra</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_bot</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">compl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">himp</span> <span class=\"n\">a</span> <span class=\"n\">bot</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">heyting_algebra_fails</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">generalized_heyting_algebra</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_bot</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">compl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⇨</span> <span class=\"n\">bot</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 293809086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660687804
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">heyting_algebra_also_works</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">generalized_heyting_algebra</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_bot</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">compl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">himp</span> <span class=\"n\">a</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 293809185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660687861
    },
    {
        "content": "<p>Oh interesting, so the issue also isn't with the bot, just with <code>himp</code></p>",
        "id": 293920984,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1660750518
    }
]