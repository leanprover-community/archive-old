[
    {
        "content": "<p>I just encountered a really peculiar bug of the infoview. In the following code, at the end of line 43, I have the following goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span>\n<span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Profinite</span>\n<span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">limits.cocone</span> <span class=\"o\">(</span><span class=\"n\">discrete.functor</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">sigma_cofan</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ι.app</span> <span class=\"n\">j</span> <span class=\"bp\">≫</span> <span class=\"n\">sigma.desc</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s.ι.app</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.ι.app</span> <span class=\"n\">j</span>\n</code></pre></div>\n<p>which is NOT the expected goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_preconnected</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)),</span> <span class=\"n\">is_preconnected</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"n\">sigma.mk</span> <span class=\"n\">a</span> <span class=\"bp\">''</span> <span class=\"n\">t</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>The faulty code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import topology.category.Profinite<br>\nimport category_theory.limits.shapes.products</p>\n<p>/-!</p>\n<p>In this file we show that a finite disjoint union of profinite sets agrees with the coproduct.<br>\n<em>Note:</em> The existence of the coproduct is currently shown using some abstract nonsense.</p>\n<p>-/</p>\n<p>namespace topology</p>\n<p>lemma is_preconnected.preimage : Prop := sorry</p>\n<p>lemma sigma.univ {α : Type<em>} (X : α → Type</em>) :<br>\n  (set.univ : set (Σ a, X a)) = ⋃ a, <a href=\"http://sigma.mk\">sigma.mk</a> _ '' (set.univ : set (X a)) :=<br>\nby { ext, simp only [set.image_univ, set.mem_preimage, set.mem_Union, set.mem_univ,<br>\n  set.mem_singleton_iff, set.range_sigma_mk, exists_eq'] }</p>\n<p>lemma sigma.is_connected_iff {α : Type<em>} {X : α → Type</em>} [∀ a, topological_space (X a)]<br>\n  {s : set (Σ a, X a)} :<br>\n  is_connected s ↔ ∃ (a : α) (t : set (X a)), is_connected t ∧ s = <a href=\"http://sigma.mk\">sigma.mk</a> _ '' t :=<br>\nbegin<br>\n  refine ⟨λ hs, _, _⟩,<br>\n  { obtain ⟨⟨a, x⟩, hx⟩ := hs.nonempty,<br>\n    refine ⟨a, <a href=\"http://sigma.mk\">sigma.mk</a> a ⁻¹' s, ⟨⟨x, hx⟩, _⟩, _⟩,<br>\n    sorry,<br>\n    sorry<br>\n  },<br>\n  { rintro ⟨a, t, ht, rfl⟩,<br>\n    exact ht.image _ continuous_sigma_mk.continuous_on }<br>\nend</p>\n<p>lemma sigma.is_preconnected_iff {α : Type<em>} [hα : nonempty α] {X : α → Type</em>}<br>\n  [∀ a, topological_space (X a)] {s : set (Σ a, X a)} :<br>\n  is_preconnected s ↔ ∃ (a : α) (t : set (X a)), is_preconnected t ∧ s = <a href=\"http://sigma.mk\">sigma.mk</a> _ '' t :=<br>\nbegin<br>\n  refine ⟨λ hs, _, _⟩,<br>\n  {<br>\n    obtain rfl | h := s.eq_empty_or_nonempty,<br>\n    { obtain a := hα,<br>\n    have := hα.elim,<br>\n      refine ⟨hα.elim _, ∅, _, _⟩, -- weird state here</p>\n<div class=\"codehilite\"><pre><span></span><code>exact set.subsingleton_empty },\nobtain ⟨⟨a, x⟩, hx⟩ := h,\nrefine ⟨a, sigma.mk a ⁻¹&#39; s, _, _⟩,\nsorry\n</code></pre></div>\n\n<p>},<br>\n  { rintro ⟨a, t, ht, rfl⟩,<br>\n    exact ht.image _ continuous_sigma_mk.continuous_on }<br>\nend</p>\n<p>end topology</p>\n<p>namespace Profinite</p>\n<p>universe u<br>\nvariables {α : Type u} [fintype α] (X : α → Profinite.{u})</p>\n<p>def sum.desc {Z} (X Y : Profinite.{u}) (f : X ⟶ Z) (g : Y ⟶ Z) : sum X Y ⟶ Z :=<br>\n{ to_fun := λ x, _root_.sum.rec_on x f g,<br>\n  continuous_to_fun := begin<br>\n    apply continuous_sup_dom,<br>\n    { apply continuous_coinduced_dom, exact f.continuous },<br>\n    { apply continuous_coinduced_dom, exact g.continuous }<br>\n  end }</p>\n<p>def sigma : Profinite.{u} :=<br>\nProfinite.of $ Σ a, X a</p>\n<p>def sigma.ι (a : α) : X a ⟶ sigma X :=<br>\n{ to_fun := λ t, ⟨_,t⟩,<br>\n  continuous_to_fun := sorry }</p>\n<p>def sigma.desc {Y} (f : Π a, X a ⟶ Y) : sigma X ⟶ Y :=<br>\n{ to_fun := λ ⟨a,t⟩, f a t,<br>\n  continuous_to_fun := sorry }</p>\n<p>open category_theory</p>\n<p>def sigma_cofan : limits.cofan X :=<br>\n<a href=\"http://limits.cofan.mk\">limits.cofan.mk</a> (sigma X) (sigma.ι X)</p>\n<p>def sigma_cofan_is_colimit : limits.is_colimit (sigma_cofan X) :=<br>\n{ desc := λ S, sigma.desc _ $ λ a, <a href=\"http://S.ι.app\">S.ι.app</a> a,<br>\n  uniq' := begin<br>\n    intros S m h,<br>\n    apply sigma.hom_ext,<br>\n    intros a,<br>\n    convert h a,<br>\n    simp,<br>\n  end }</p>\n<p>end Profinite</p>\n</div></div>\n<p>Of course, there are lots of errors in the file, but seeing the goal of something that's 40 lines below is odd.</p>",
        "id": 258701308,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634904046
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/468\">lean#468</a>?</p>",
        "id": 258702967,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1634905033
    },
    {
        "content": "<p>aah, the famous \"line 65 column 33 bug\"</p>",
        "id": 258704657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634905968
    },
    {
        "content": "<p>I see tactic.congr was edited recently, presumably something to do with the port, so now maybe the issue occurs in new positions :-)</p>",
        "id": 258705045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634906192
    }
]