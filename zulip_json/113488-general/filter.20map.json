[
    {
        "content": "<p>Is this already somewhere in core or mathlib?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">filter_map_comm</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">filter</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">r</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">filter_cons_of_pos</span><span class=\"o\">,</span> <span class=\"n\">filter_cons_of_neg</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">IH</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126378246,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525977493
    },
    {
        "content": "<p>try:</p>\n<div class=\"codehilite\"><pre><span></span>theorem filter_map_eq_map (f : α → β) : filter_map (some ∘ f) = map f :=\ntheorem filter_map_eq_filter (p : α → Prop) [decidable_pred p] :\n  filter_map (option.guard p) = filter p :=\ntheorem filter_map_filter_map (f : α → option β) (g : β → option γ) (l : list α) :\n  filter_map g (filter_map f l) = filter_map (λ x, (f x).bind g) l :=\n</pre></div>\n\n\n<p>from <code>data.list.basic</code></p>",
        "id": 126379540,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525979325
    },
    {
        "content": "<p>What do you mean? The lemma is not there but there may be a shorter proof using those results?</p>",
        "id": 126379629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525979406
    },
    {
        "content": "<p>Yes exactly. Sorry, I was overly concise</p>",
        "id": 126379663,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525979469
    },
    {
        "content": "<p>It looks at least as complicated as what I already have</p>",
        "id": 126379737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525979559
    },
    {
        "content": "<p>And I don't want to frustrate Kenny by stealing a golfing challenge from him</p>",
        "id": 126379748,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525979582
    },
    {
        "content": "<p>That's very considerate :)</p>",
        "id": 126379819,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525979663
    },
    {
        "content": "<p>Actually I'd rather use Kenny (or anyone else) to help me fighting nat substraction</p>",
        "id": 126379852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525979707
    },
    {
        "content": "<p>For instance:</p>",
        "id": 126379859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525979712
    },
    {
        "content": "<p>I like the resulting proof because it avoids induction</p>",
        "id": 126379865,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525979721
    },
    {
        "content": "<p><code>example (a b k : ℕ) : b + k - (a + k) = b - a </code></p>",
        "id": 126379880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525979755
    },
    {
        "content": "<p>What do you mean avoid induction? <code>map</code> and <code>filter</code> are defined inductively</p>",
        "id": 126379934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525979779
    },
    {
        "content": "<p>You can at best hide induction</p>",
        "id": 126379939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525979786
    },
    {
        "content": "<p>Note that both sides are zero is b is larger than a</p>",
        "id": 126379947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525979809
    },
    {
        "content": "<p>So it looks like a \"false\" result but this one is actually true</p>",
        "id": 126379959,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525979824
    },
    {
        "content": "<p>I think</p>",
        "id": 126379962,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525979826
    },
    {
        "content": "<p>Do you have a solution with <code>filter_map</code>? Actually it could be useful to learn what <code>filter_map</code> is good for</p>",
        "id": 126380041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525979891
    },
    {
        "content": "<blockquote>\n<p>What do you mean avoid induction? <code>map</code> and <code>filter</code> are defined inductively</p>\n</blockquote>\n<p>They're recursively defined. But yeah, you can never get around using induction / recursion directly or indirectly but I feel hiding induction produces nicer interfaces. The laws about <code>filter_map</code> seem like you can prove a lot about <code>filter</code> and <code>map</code> without induction.</p>",
        "id": 126380170,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525980039
    },
    {
        "content": "<p>It's a generalization of both <code>map</code> and <code>filter</code>.</p>",
        "id": 126380179,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525980066
    },
    {
        "content": "<p>I still don't see how it could help me here</p>",
        "id": 126380248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525980157
    },
    {
        "content": "<blockquote>\n<p><code>example (a b k : ℕ) : b + k - (a + k) = b - a </code></p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_right</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 126380518,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525980550
    },
    {
        "content": "<p><span class=\"emoji emoji-1f632\" title=\"astonished\">:astonished:</span></p>",
        "id": 126380569,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525980604
    },
    {
        "content": "<p>I think I overlooked a detail. I thought just doing a <code>rw</code> would work but here is what I get:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">filter_map_eq_map</span>\n     <span class=\"o\">,</span><span class=\"err\">←</span> <span class=\"n\">filter_map_eq_filter</span>\n     <span class=\"o\">,</span><span class=\"err\">←</span> <span class=\"n\">filter_map_eq_filter</span>\n     <span class=\"o\">,</span><span class=\"n\">filter_map_filter_map</span>\n     <span class=\"o\">,</span><span class=\"n\">filter_map_filter_map</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n<span class=\"c1\">-- ⊢ option.bind ((some ∘ f) x) (option.guard P) = option.bind (option.guard (P ∘ f) x) (some ∘ f)</span>\n</pre></div>\n\n\n<p>That should be hard either, but it makes the proof longer than expected</p>",
        "id": 126380590,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525980620
    },
    {
        "content": "<p>That's crazy</p>",
        "id": 126380594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525980635
    },
    {
        "content": "<p>That's also crazy</p>",
        "id": 126380596,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525980652
    },
    {
        "content": "<p>Thanks Reid</p>",
        "id": 126380599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525980660
    },
    {
        "content": "<p>I wasn't hoping for this to be in Lean core...</p>",
        "id": 126380617,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525980703
    },
    {
        "content": "<p>I'm becoming better and better at proof obfuscation. If I ever need to read those proofs, I'll hate myself.</p>",
        "id": 126381158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525981382
    },
    {
        "content": "<p>it's too hard to resist the golf</p>",
        "id": 126381226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525981481
    },
    {
        "content": "<p>Right now I'm staring at line saying <code>congr_n 1 ; funext ; simp only [nat.add_sub_cancel, nat.add_sub_add_right]</code></p>",
        "id": 126381282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525981562
    },
    {
        "content": "<p>I wrote two minutes ago</p>",
        "id": 126381295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525981568
    },
    {
        "content": "<p>And I already have no clue what it does</p>",
        "id": 126381297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525981577
    },
    {
        "content": "<p>Mario and Johannes will be so proud</p>",
        "id": 126381299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525981590
    },
    {
        "content": "<p>Because it's half the proof of some trivial statement, and trivial statement must have obfuscated proof according to mathlib style guide</p>",
        "id": 126381363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525981699
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">big</span><span class=\"bp\">.</span><span class=\"n\">shift</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">big</span><span class=\"o\">[(</span><span class=\"err\">◆</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">nil</span><span class=\"o\">]</span><span class=\"bp\">_</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"bp\">..</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">big</span><span class=\"o\">[(</span><span class=\"err\">◆</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">nil</span><span class=\"o\">]</span><span class=\"bp\">_</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">range&#39;_add_map</span><span class=\"o\">,</span> <span class=\"n\">big</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"o\">],</span>\n  <span class=\"n\">congr_n</span> <span class=\"mi\">1</span> <span class=\"bp\">;</span> <span class=\"n\">funext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_right</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126381371,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525981719
    },
    {
        "content": "<p>(for instance <code>big[(◆)/nil]</code> could be a <code>\\Sum</code> operator</p>",
        "id": 126381380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525981780
    },
    {
        "content": "<p>This is just the sort of stuff which I really needed last November and wasn't there</p>",
        "id": 126381460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525981867
    },
    {
        "content": "<p>I remember having to give up on a 1st year problem sheet question because I couldn't prove that sum from 1 to n was equal to sum from n to 1 :-)</p>",
        "id": 126381471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525981903
    },
    {
        "content": "<p>[at the time]</p>",
        "id": 126381475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525981911
    },
    {
        "content": "<p>imagine where we'd be if Gauss had had a computer</p>",
        "id": 126381521,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525981929
    },
    {
        "content": "<p>I don't even want to think about that</p>",
        "id": 126381527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525981941
    },
    {
        "content": "<p>how much time did Gauss and Euler waste working out examples etc</p>",
        "id": 126381534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525981953
    },
    {
        "content": "<p>They would have had computer aided waste of time instead</p>",
        "id": 126381541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525981977
    },
    {
        "content": "<p>Maybe they would have just played minecraft all day</p>",
        "id": 126381556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525981997
    },
    {
        "content": "<p>and we'd be worse off</p>",
        "id": 126381559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525982003
    },
    {
        "content": "<p>yep</p>",
        "id": 126381562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525982005
    },
    {
        "content": "<p>or watched lol cats on youtube</p>",
        "id": 126381571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525982020
    },
    {
        "content": "<p>If they were functional programmers (esp. in Haskell), I think they would have enjoyed <a href=\"https://spl.smugmug.com/Humor/Lambdacats/\" target=\"_blank\" title=\"https://spl.smugmug.com/Humor/Lambdacats/\">Lambdacats</a>.</p>",
        "id": 126402529,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526022470
    },
    {
        "content": "<p>Hehe, we're slowly eroding formality of this forum :).</p>",
        "id": 126404033,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1526025623
    },
    {
        "content": "<p>I think it was already pretty badly eroded</p>",
        "id": 126404169,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526025926
    },
    {
        "content": "<p>I believe cat pictures are new tho.</p>",
        "id": 126404210,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1526025966
    },
    {
        "content": "<p>Dank memes next.</p>",
        "id": 126404214,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1526025976
    },
    {
        "content": "<blockquote>\n<p>Hehe, we're slowly eroding formality of this forum <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span>.</p>\n</blockquote>\n<p>Given that theorem proving is a formal method, what does an eroded formal method look like? <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span></p>\n<p>Ah ha! <span class=\"emoji emoji-1f4a1\" title=\"light bulb\">:light_bulb:</span> This must be why the name “lean” was chosen: the methodological mountain was so eroded, it couldn't stand up straight.</p>",
        "id": 126405008,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526027605
    }
]