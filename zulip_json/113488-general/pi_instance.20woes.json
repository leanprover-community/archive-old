[
    {
        "content": "<p>A product of topological groups is a topological group.</p>",
        "id": 128076746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998461
    },
    {
        "content": "<p>That doesn't sound too hard!</p>",
        "id": 128076751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998465
    },
    {
        "content": "<p>Attempt 1:</p>",
        "id": 128076814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998495
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_structures</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</pre></div>",
        "id": 128076840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998530
    },
    {
        "content": "<p>unknown identifier: topological_group!</p>",
        "id": 128076846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998540
    },
    {
        "content": "<p>We have topological monoids, topological rings...</p>",
        "id": 128076852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998546
    },
    {
        "content": "<p>but no topological groups :-)</p>",
        "id": 128076856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998551
    },
    {
        "content": "<p>After some digging, I find that we have <code>topological_add_group</code></p>",
        "id": 128076863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998565
    },
    {
        "content": "<p>and given that we also have the insane convention that addition isn't commutative</p>",
        "id": 128076866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998574
    },
    {
        "content": "<p>this will do</p>",
        "id": 128076869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998576
    },
    {
        "content": "<p>Attempt 2:</p>",
        "id": 128076883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998599
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_structures</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</pre></div>",
        "id": 128076925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998604
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nγ : Type,\nF : γ → Type,\ni : γ\n⊢ add_group (F i)\n</pre></div>",
        "id": 128076937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998624
    },
    {
        "content": "<p>(and topological_space too)</p>",
        "id": 128076940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998630
    },
    {
        "content": "<p><em>sigh</em></p>",
        "id": 128076941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998633
    },
    {
        "content": "<p>Attempt 3:</p>",
        "id": 128076965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998677
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_structures</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n<span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 128076968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998680
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nγ : Type,\nF : γ → Type,\n_inst_1 : Π (i : γ), topological_space (F i),\n_inst_2 : Π (i : γ), add_group (F i),\n_inst_3 : ∀ (i : γ), topological_add_group (F i)\n⊢ add_group (Π (i : γ), F i)\n</pre></div>",
        "id": 128076979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998697
    },
    {
        "content": "<p>gaargh</p>",
        "id": 128076981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998699
    },
    {
        "content": "<p>Oh but this is done in pi_instances, right?</p>",
        "id": 128076994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998714
    },
    {
        "content": "<p>Attempt 4</p>",
        "id": 128076996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998715
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_structures</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n<span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n</pre></div>",
        "id": 128077047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998744
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>maximum class-instance resolution depth has been reached (the limit can be increased by setting option &#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option &#39;trace.class_instances&#39;)\n</pre></div>",
        "id": 128077058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998761
    },
    {
        "content": "<p><em>bangs head on table</em></p>",
        "id": 128077062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998765
    },
    {
        "content": "<p>Here's how far I have got:</p>",
        "id": 128077199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998916
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_structures</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n<span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"n\">continuous_neg</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 128077205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998921
    },
    {
        "content": "<p>and the trace looks like this:</p>",
        "id": 128077213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528998932
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/762adae68d4cbe240f4098968b14fe2e\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/762adae68d4cbe240f4098968b14fe2e\">https://gist.github.com/kbuzzard/762adae68d4cbe240f4098968b14fe2e</a></p>",
        "id": 128077316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528999041
    },
    {
        "content": "<p>Oh!</p>",
        "id": 128078022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528999724
    },
    {
        "content": "<p>That trace is just tracing along not looking like anything too serious is happening in terms of loops</p>",
        "id": 128078031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528999743
    },
    {
        "content": "<p>and then right at the end it randomly explodes</p>",
        "id": 128078038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528999749
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances] (4) ?x_28 : ring ?x_27 := @pi.ring ?x_30 ?x_31 ?x_32\n[class_instances] (5) ?x_32 i : ring (?x_31 i) := @pi.ring (?x_33 i) (?x_34 i) (?x_35 i)\n[class_instances] (6) ?x_35 i i_1 : ring (?x_34 i i_1) := @pi.ring (?x_36 i i_1) (?x_37 i i_1) (?x_38 i i_1)\n[class_instances] (7) ?x_38 i i_1 i_2 : ring (?x_37 i i_1 i_2) := @pi.ring (?x_39 i i_1 i_2) (?x_40 i i_1 i_2) (?x_41 i i_1 i_2)\n</pre></div>",
        "id": 128078061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528999787
    },
    {
        "content": "<p>and it just keeps getting bigger and bigger</p>",
        "id": 128078080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528999802
    },
    {
        "content": "<p>What instance are you expecting will resolve this?</p>",
        "id": 128078153,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528999875
    },
    {
        "content": "<p>you are that instance</p>",
        "id": 128078207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528999930
    },
    {
        "content": "<p>my question certainly seems to have nothing to do with rings</p>",
        "id": 128078218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528999950
    },
    {
        "content": "<p><code>apply_instance</code> doesn't have my phone number ;-)</p>",
        "id": 128078250,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529000010
    },
    {
        "content": "<p>I want to prove that the product of top groups is a top group</p>",
        "id": 128078253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000030
    },
    {
        "content": "<p>The instance isn't there yet</p>",
        "id": 128078256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000034
    },
    {
        "content": "<p>but I haven't even got to defining the instance</p>",
        "id": 128078261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000040
    },
    {
        "content": "<p>because of some random type class explosion</p>",
        "id": 128078303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000050
    },
    {
        "content": "<p>You can try <code>by pi_instance</code></p>",
        "id": 128078305,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529000056
    },
    {
        "content": "<p>You will need more arguments, we'll see what errors we get</p>",
        "id": 128078339,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529000136
    },
    {
        "content": "<p>I'm on it</p>",
        "id": 128078402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000211
    },
    {
        "content": "<p>If you use my <code>refine_struct</code> branch, that should be all you need.</p>",
        "id": 128078425,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529000240
    },
    {
        "content": "<p>ooh</p>",
        "id": 128078439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000273
    },
    {
        "content": "<p>so you mean don't use algebra.pi_instances?</p>",
        "id": 128078442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000280
    },
    {
        "content": "<p>Apparently I should prove pi.topological_add_monoid first</p>",
        "id": 128078486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000296
    },
    {
        "content": "<p>No I mean you write <code>by pi_instance</code> and it figures it all out on its own without you having to give more information</p>",
        "id": 128078495,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529000319
    },
    {
        "content": "<p>(if you use <code>refine_struct</code>)</p>",
        "id": 128078506,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529000343
    },
    {
        "content": "<p>so can you give me more clues about exactly what to type, so I can \"use <code>refine_struct</code>\"?</p>",
        "id": 128078695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000603
    },
    {
        "content": "<p>certainly</p>",
        "id": 128078748,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529000645
    },
    {
        "content": "<p>1. delete your <code>_target</code> directory<br>\n2. go in your <code>leanpkg.toml</code> file<br>\n3. replace the <code>mathlib</code> entry with<br>\n<code>mathlib = {git = \"https://github.com/cipher1024/mathlib\", rev = \"e1c15f02a62a0343e5497ae380355e966be9b3e4\"}</code><br>\n4. in a terminal, call <code>leanpkg build</code> on your project</p>",
        "id": 128078852,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529000808
    },
    {
        "content": "<p>You know what</p>",
        "id": 128078880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000855
    },
    {
        "content": "<p>I think the problem might be</p>",
        "id": 128078881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000860
    },
    {
        "content": "<p>that pi_instances doesn't do any topology</p>",
        "id": 128078883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000869
    },
    {
        "content": "<p>and I rather think that putting a topological space structure on a product of types</p>",
        "id": 128078887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000881
    },
    {
        "content": "<p>is actually something which requires an idea</p>",
        "id": 128078926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000887
    },
    {
        "content": "<p>at least if you want to put the correct top space structure on it</p>",
        "id": 128078933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000900
    },
    {
        "content": "<p>Aah sorry</p>",
        "id": 128078941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000924
    },
    {
        "content": "<p>By \"don't use algebra.pi_instances\"</p>",
        "id": 128078950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000939
    },
    {
        "content": "<p>I mean \"don't use official mathlib's algebra.pi_instances\"?</p>",
        "id": 128078959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000948
    },
    {
        "content": "<p>OK I will switch.</p>",
        "id": 128078966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000958
    },
    {
        "content": "<p>It will be interesting to see what happens!</p>",
        "id": 128078972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529000965
    },
    {
        "content": "<p>building</p>",
        "id": 128079136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529001163
    },
    {
        "content": "<p>But I don't think your pi_instances tactic is going to put a topological space structure on a product of topological spaces</p>",
        "id": 128079149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529001187
    },
    {
        "content": "<p>This isn't formal, like a ring structure on a product of rings</p>",
        "id": 128079154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529001199
    },
    {
        "content": "<p>I think this needs to be written by hand.</p>",
        "id": 128079165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529001215
    },
    {
        "content": "<p>Yes, that's right. If the instance relies on any kind of insight that is not already present in the more basic instance, my tactic won't do.</p>",
        "id": 128079374,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529001486
    },
    {
        "content": "<p><code>refine_struct</code> might still be helpful, especially if many of the proofs are of the same shape</p>",
        "id": 128079509,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529001700
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">topological_space</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">generate_from</span> <span class=\"o\">{</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">}</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">u</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 128080056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529002374
    },
    {
        "content": "<p>But now I have this -- assuming I got it right (and I am not entirely sure that introducing both U and u was necessary) -- I wonder if I can persuade pi_instances to go further.</p>",
        "id": 128080077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529002431
    },
    {
        "content": "<p>Now I think there's a chance</p>",
        "id": 128080143,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529002483
    },
    {
        "content": "<p>Actually this might just be hard. Now I can prove that a product of topological groups is a topological space and a group</p>",
        "id": 128080147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529002492
    },
    {
        "content": "<p>but a topological group is more than this</p>",
        "id": 128080150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529002497
    },
    {
        "content": "<p>you want the group structure maps like product and inverse to be continuous</p>",
        "id": 128080163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529002512
    },
    {
        "content": "<p>and these might be lemmas rather than stuff which is formally true</p>",
        "id": 128080174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529002532
    },
    {
        "content": "<p>That Pi type topological space instance is already in <code>topological_space.lean</code> isn't it?</p>",
        "id": 128080184,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529002547
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"err\">⨆</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₂</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 128080241,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529002584
    },
    {
        "content": "<p>Oh did I miss it?</p>",
        "id": 128080249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529002608
    },
    {
        "content": "<p>Oh it's not in pi_instances!</p>",
        "id": 128080258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529002630
    },
    {
        "content": "<p>But it's in the same module that defines <code>topological_space</code></p>",
        "id": 128080261,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529002644
    },
    {
        "content": "<p>Oh okay, it looks like Lean never actually claimed it was missing?</p>",
        "id": 128080275,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529002681
    },
    {
        "content": "<p>No it just gave me terrifying errors</p>",
        "id": 128080318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529002696
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">pi_topological_monoid</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n<span class=\"n\">topological_add_monoid</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 128080358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529002768
    },
    {
        "content": "<p>I get these <code>maximum class-instance resolution depth has been reached </code> errors</p>",
        "id": 128080370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529002796
    },
    {
        "content": "<p>I see</p>",
        "id": 128080442,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529002810
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">pi_topological_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n<span class=\"n\">topological_add_monoid</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">pi_instance</span> <span class=\"o\">[</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_monoid</span><span class=\"o\">,</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 128080848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529003396
    },
    {
        "content": "<p>I don't know what is to be done about that instance resolution loop (I'm pretty sure it has been discussed here before), but as a workaround you can specify the instance you want:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">pi_topological_monoid</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n<span class=\"bp\">@</span><span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_group</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 128080900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529003413
    },
    {
        "content": "<p>my suggestion doesn't work</p>",
        "id": 128080902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529003415
    },
    {
        "content": "<p><code>pi.add_monoid</code> doesn't actually exist, that's why I switched back to <code>add_group</code></p>",
        "id": 128080925,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529003450
    },
    {
        "content": "<p>Of course, you could probably add it</p>",
        "id": 128080931,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529003457
    },
    {
        "content": "<p>If you replace your sorry with <code>{}</code> do you get the runaway typeclass?</p>",
        "id": 128081015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529003527
    },
    {
        "content": "<p>Yes</p>",
        "id": 128081038,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529003569
    },
    {
        "content": "<p>I guess that's because it tried to look up a <code>topological_add_monoid</code> \"parent\" instance to extend, and then that fell into the same loop</p>",
        "id": 128081074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529003622
    },
    {
        "content": "<p>If I specify both <code>continuous_add</code> and <code>continuous_neg</code> (as <code>sorry</code>) then I don't get a loop.</p>",
        "id": 128081137,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529003676
    },
    {
        "content": "<p>you're right :-)</p>",
        "id": 128081299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529003924
    },
    {
        "content": "<p>I love living life on the edge</p>",
        "id": 128081300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529003929
    },
    {
        "content": "<p>one false move</p>",
        "id": 128081302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529003935
    },
    {
        "content": "<p>runaway typeclass</p>",
        "id": 128081303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529003939
    },
    {
        "content": "<p>actually, that was apparently the original issue, too.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">pi_topological_monoid</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n<span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">continuous_add</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_neg</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>also works</p>",
        "id": 128081317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529003982
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">continuous_pi</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_supr_rng</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous_induced_rng</span> <span class=\"err\">$</span> <span class=\"n\">h</span> <span class=\"n\">i</span>\n</pre></div>",
        "id": 128081464,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529004209
    },
    {
        "content": "<p>might be useful</p>",
        "id": 128081466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529004211
    },
    {
        "content": "<p>I tried writing the actual instance but the loop came back :(</p>",
        "id": 128081723,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529004508
    },
    {
        "content": "<p>It should just be <code>continuous_add := continuous_pi $ λ i, continuous.comp continuous_add' (continuous_apply i)</code></p>",
        "id": 128081810,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529004604
    },
    {
        "content": "<p>Er wait, no</p>",
        "id": 128081827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529004648
    },
    {
        "content": "<p>that's totally wrong</p>",
        "id": 128081851,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529004698
    },
    {
        "content": "<p>OK</p>",
        "id": 128082090,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529005012
    },
    {
        "content": "<p><code>continuous_apply</code> has a totally extraneous argument <code>α</code> which makes it unusable. It should be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">pi</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_apply&#39;</span> <span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_supr_dom</span> <span class=\"n\">continuous_induced_dom</span>\n<span class=\"kn\">end</span> <span class=\"n\">pi</span>\n</pre></div>",
        "id": 128082107,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529005048
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">continuous_add</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_pi</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">continuous_add</span>\n      <span class=\"o\">(</span><span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">continuous_fst</span> <span class=\"o\">(</span><span class=\"n\">continuous_apply&#39;</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">continuous_snd</span> <span class=\"o\">(</span><span class=\"n\">continuous_apply&#39;</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 128082114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529005061
    },
    {
        "content": "<p>Alternatively,</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">continuous_add</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_pi</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n      <span class=\"o\">(</span><span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">prod_mk</span>\n        <span class=\"o\">(</span><span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">continuous_fst</span> <span class=\"o\">(</span><span class=\"n\">continuous_apply&#39;</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">continuous_snd</span> <span class=\"o\">(</span><span class=\"n\">continuous_apply&#39;</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n      <span class=\"n\">continuous_add&#39;</span>\n</pre></div>\n\n\n<p>shows the formal structure a little better, because <code>continuous_add'</code> is the actual class method <code>topological_add_monoid.continuous_add</code></p>",
        "id": 128082327,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529005338
    },
    {
        "content": "<p><code>continuous.comp</code> reads from left to right. First you build a pair by (first taking the first component, and then the <code>i</code>th component of that; first taking the second component, and then the <code>i</code>th component of that), and then you add them.</p>",
        "id": 128082403,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529005453
    },
    {
        "content": "<p><code>continuous_neg := continuous_pi (λ i, continuous.comp _ (continuous_neg continuous_id)</code></p>",
        "id": 128082567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529005735
    },
    {
        "content": "<p>but I need to fill in the <code>_</code></p>",
        "id": 128082573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529005743
    },
    {
        "content": "<p><code>continuous (λ (x : Π (i : γ), F i), x i)</code></p>",
        "id": 128082585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529005760
    },
    {
        "content": "<p>Projection is continuous</p>",
        "id": 128082586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529005766
    },
    {
        "content": "<p>is what I need</p>",
        "id": 128082588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529005779
    },
    {
        "content": "<p>and then we're either done</p>",
        "id": 128082764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529005985
    },
    {
        "content": "<p>or we have a runaway instance</p>",
        "id": 128082771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529005991
    },
    {
        "content": "<p>The topological structure on the product is defined as the coarsest topology which makes all the projection maps continuous</p>",
        "id": 128082791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529006040
    },
    {
        "content": "<p>aah I see this is exactly this apply'</p>",
        "id": 128083035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529006350
    },
    {
        "content": "<p>what is going on with apply? :-)</p>",
        "id": 128083037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529006356
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">pi_topological_group</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n<span class=\"bp\">@</span><span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_group</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"n\">continuous_add</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_pi</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">continuous_add</span>\n      <span class=\"o\">(</span><span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">continuous_fst</span> <span class=\"o\">(</span><span class=\"n\">continuous_apply&#39;</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">continuous_snd</span> <span class=\"o\">(</span><span class=\"n\">continuous_apply&#39;</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n<span class=\"n\">continuous_neg</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_pi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">continuous_apply&#39;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">continuous_neg</span> <span class=\"n\">continuous_id</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 128083126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529006424
    },
    {
        "content": "<p>rofl</p>",
        "id": 128083155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529006517
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>continuous_apply :\n  ∀ {α : Type u_1} {ι : Type u_2} {π : ι → Type u_3} [_inst_1 : topological_space α]\n  [_inst_2 : Π (i : ι), topological_space (π i)] (i : ι), continuous (λ (p : Π (i : ι), π i), p i)\n</pre></div>",
        "id": 128083197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529006525
    },
    {
        "content": "<p>I see what Reid means</p>",
        "id": 128083198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529006531
    },
    {
        "content": "<p>It's going to be pretty tough inferring what alpha is given that it's never mentioned :-)</p>",
        "id": 128083202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529006543
    },
    {
        "content": "<blockquote>\n<p>It's going to be pretty tough inferring what alpha is given that it's never mentioned :-)</p>\n</blockquote>\n<p>I fixed this in my simplicial branch. But it hasn't made it into mathlib yet.</p>",
        "id": 128106193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529045577
    }
]