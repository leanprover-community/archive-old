[
    {
        "content": "<p>What is the right way to prove <code>bar_spec</code> in the following snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"c1\">-- Key property: value here depends on (in fact equals) pattern we're matching.</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar_spec</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- No access to fact that `foo n = k + 1` from match.</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>If I remember my Coq correctly, I'd use the so-called \"convoy pattern\" there but I'm hoping there's some tactic that saves me from such things in Lean / Mathlib?</p>",
        "id": 224045214,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1611670999
    },
    {
        "content": "<p><code>cases h : foo n with k</code></p>",
        "id": 224045475,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611671114
    },
    {
        "content": "<p>Thanks :-) I must have tried every variant I could think of except that!</p>",
        "id": 224045527,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1611671146
    }
]