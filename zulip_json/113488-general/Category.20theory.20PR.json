[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I didn‚Äôt understand your suggestion to use ‚Äú<code>functor.id</code> (protected)‚Äù. What is ‚Äúprotected‚Äù?</p>",
        "id": 131024775,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533621458
    },
    {
        "content": "<p>Worked it out.</p>",
        "id": 131025217,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533622140
    },
    {
        "content": "<p>Hm, I see that you renamed the identity functor to <code>category.identity</code> and the identity natural transformation to <code>functor.identity</code>. I assume you did that so that you can use projection notation, but I think it's more confusing than is worth it. What do the mathematicians here think?</p>",
        "id": 131026124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533624018
    },
    {
        "content": "<p>Oh, I'm not at all attached to projection notation here: I'd guessed that was what you'd tell me to do!</p>",
        "id": 131026681,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533625187
    },
    {
        "content": "<p>As far as I'm concerned I would be happy with any of:<br>\n<code>C.identity</code>, <code>Functor.id C</code>, <code>Functor.identity C</code>, or <code>1 : C ‚Üù C</code>.</p>",
        "id": 131026746,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533625262
    },
    {
        "content": "<p>(I know how to arrange for any of those, just want to know what is preferred.)</p>",
        "id": 131026756,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533625285
    },
    {
        "content": "<p>My order of preference would be 4,1,3,2</p>",
        "id": 131026820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533625418
    },
    {
        "content": "<p>Johan, Would you prefer to see <code>1 X</code> or <code>functor.id C X</code> in a goal printout talking about the identity functor applied to an object <code>X</code>?</p>",
        "id": 131026879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533625506
    },
    {
        "content": "<p>(this isn't a rhetorical question)</p>",
        "id": 131026883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533625518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I'm confused why we would want to put <code>protected</code> on the definition of the identity functor. What is the motivation there? It seems if we're going to hide that, we should also hide the lemmas about it.</p>",
        "id": 131026887,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533625532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, seeing that comparison, I really dislike <code>1 X</code>!</p>",
        "id": 131026890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533625555
    },
    {
        "content": "<p>because <code>id</code> is already a global definition, and we don't want to interfere with that</p>",
        "id": 131026923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533625563
    },
    {
        "content": "<p>How about <code>functor.identity C</code>?</p>",
        "id": 131026931,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533625584
    },
    {
        "content": "<p>plus there are like 5 different <code>id</code>s going around and I'd like to know which is which</p>",
        "id": 131026932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533625593
    },
    {
        "content": "<p>No need to collide with the global <code>id</code></p>",
        "id": 131026933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533625595
    },
    {
        "content": "<p>or the <code>category.id</code></p>",
        "id": 131026935,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533625606
    },
    {
        "content": "<p>... :-)</p>",
        "id": 131026936,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533625609
    },
    {
        "content": "<p>the name collision is deliberate though, it's a consistent naming scheme</p>",
        "id": 131026949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533625636
    },
    {
        "content": "<p>In fact, I now really dislike the <code>has_one</code> instances for both <code>C ‚Üù C</code> and <code>F ‚Üù F</code>, and want to remove both.</p>",
        "id": 131026955,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533625656
    },
    {
        "content": "<p>I'm surprised this bothers you given that we already have <code>ùüô X</code></p>",
        "id": 131026995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533625690
    },
    {
        "content": "<p>Okay... so <code>functor.id C</code>, <code>nat_trans.id F</code>, and the only use of the symbol 1 will be <code>ùüô X</code>.</p>",
        "id": 131027003,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533625722
    },
    {
        "content": "<p>I'm okay with that</p>",
        "id": 131027012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533625748
    },
    {
        "content": "<p>the protection is not needed for the theorems since they usually have more specific names that don't collide with core</p>",
        "id": 131027021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533625769
    },
    {
        "content": "<p>they are still namespaced in <code>functor</code> though so you will need to use the prefix unless you have opened it</p>",
        "id": 131027067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533625805
    },
    {
        "content": "<blockquote>\n<p>Johan, Would you prefer to see <code>1 X</code> or <code>functor.id C X</code> in a goal printout talking about the identity functor applied to an object <code>X</code>?</p>\n</blockquote>\n<p>I think I would prefer something like that <code>id_ C</code> or <code>1_ C</code>.</p>",
        "id": 131027091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533625880
    },
    {
        "content": "<p>How about using local notations for that?</p>",
        "id": 131027096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533625902
    },
    {
        "content": "<p>That might work.</p>",
        "id": 131027100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533625921
    },
    {
        "content": "<p>You probably don't need the <code>C</code> most of the time either</p>",
        "id": 131027141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533625940
    },
    {
        "content": "<p>Yes, but it might help to remind you of which cat you're working with.</p>",
        "id": 131027144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533625960
    },
    {
        "content": "<p>Well if it shows up as <code>1_ X</code> then it's inferrable from context</p>",
        "id": 131027148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533625982
    },
    {
        "content": "<p>I might think that is the identity morphism of X</p>",
        "id": 131027156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533625996
    },
    {
        "content": "<p>that's the <em>completely different</em> <code>ùüô X</code> :P</p>",
        "id": 131027160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533626022
    },
    {
        "content": "<p>Yeah, I think we want to make expressions that look even vaguely like <code>1 X</code> unambiguous</p>",
        "id": 131027162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533626035
    },
    {
        "content": "<p>and my preference is that the only similar looking expressions are <code>ùüô X</code>, the identity morphism on <code>X</code>.</p>",
        "id": 131027207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533626060
    },
    {
        "content": "<p>If only there was a triple struck 1</p>",
        "id": 131027211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533626075
    },
    {
        "content": "<p>I keep being reminded of <code>equiv.refl</code> as the only notation for the identity equiv</p>",
        "id": 131027212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533626080
    },
    {
        "content": "<p>Hmm, I prefer <code>ùüô C</code></p>",
        "id": 131027220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533626094
    },
    {
        "content": "<p>If we have <code>ùüô X</code> already.</p>",
        "id": 131027229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533626108
    },
    {
        "content": "<p>I think that will be a thing too</p>",
        "id": 131027232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533626122
    },
    {
        "content": "<p>After all, it is the identity morphism on <code>C</code> in <code>Cat</code>.</p>",
        "id": 131027233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533626123
    },
    {
        "content": "<p>Aah, and they will be defeq, but we can't have only one definition?</p>",
        "id": 131027238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533626141
    },
    {
        "content": "<p>Yeah... that's a bit of a sore point. <code>Cat</code> is of course a 2-category, and thinking of it as a 1-category by just ignoring the top level invites trouble.</p>",
        "id": 131027284,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533626169
    },
    {
        "content": "<p>so that means <code>ùüô C</code> is not (or will be) defeq to <code>functor.id C</code>?</p>",
        "id": 131027304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533626236
    },
    {
        "content": "<p>or does <code>ùüô C</code> just not typecheck?</p>",
        "id": 131027310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533626262
    },
    {
        "content": "<p>At present it just doesn't typecheck</p>",
        "id": 131027356,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533626299
    },
    {
        "content": "<p>Let me investigate this point for a few minutes.</p>",
        "id": 131027360,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533626310
    },
    {
        "content": "<p>Arranging for <code>ùüô C</code> to typecheck may not be impossible, but it will take quite a bit of work which hasn't otherwise been necessary, so I'd like to kick that back to some TODO list. :-)</p>",
        "id": 131028385,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533627935
    },
    {
        "content": "<p>Sure, I'm completely fine with that (-;</p>",
        "id": 131028392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533627960
    },
    {
        "content": "<p>For now you just write <code>functor.id C</code> when you want the identity functor.</p>",
        "id": 131028441,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533627982
    },
    {
        "content": "<p>Sounds like we might want <code>has_id</code> notation.</p>",
        "id": 131028442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533627989
    },
    {
        "content": "<p>And then all sorts of things can be instances of <code>has_id</code>, and you can write a doublestroke 1 in front of them.</p>",
        "id": 131028454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533628023
    },
    {
        "content": "<p>and what would the type of <code>generic.id</code> be?</p>",
        "id": 131028460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533628044
    },
    {
        "content": "<p>What's that?</p>",
        "id": 131028465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533628058
    },
    {
        "content": "<p>if you have a typeclass, you have to decide in advance what the type of the thing is</p>",
        "id": 131028471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533628081
    },
    {
        "content": "<p>You are talking with a \"cargo cult Leaner\"</p>",
        "id": 131028511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533628088
    },
    {
        "content": "<p>So, you mean the type of <code>has_id</code>?</p>",
        "id": 131028520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533628115
    },
    {
        "content": "<p>well, <code>has_id</code> will be a class that contains an identity operation, and that identity operation will have some type</p>",
        "id": 131028530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533628145
    },
    {
        "content": "<p>Aah, I see.</p>",
        "id": 131028534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533628164
    },
    {
        "content": "<p>Yeah... depends...</p>",
        "id": 131028538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533628177
    },
    {
        "content": "<p>And it depends a bit too much to be a dependent type.</p>",
        "id": 131028546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533628195
    },
    {
        "content": "<p>I suspect this will be a sticking point in any such plans</p>",
        "id": 131028593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533628210
    },
    {
        "content": "<p>category theory just has too much overloading here to make sense of it</p>",
        "id": 131028605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533628245
    },
    {
        "content": "<p>Congratulations to Scott for his perseverance in improving this PR for mathlib and even going back to change his library, which could not have been an easy task.</p>",
        "id": 131036160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533638824
    },
    {
        "content": "<p>Phew... I think I've rewritten everything about 4 times now. It does keep getting less bad as a result, whatever that signifies. :-)</p>",
        "id": 131037342,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533640186
    },
    {
        "content": "<p>now that we've got the basic definitions, how about the less basic ones? :D</p>",
        "id": 131037460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533640302
    },
    {
        "content": "<p>Don't worry, there's a <code>category_theory_2</code> branch ready to turn into a PR. :-)</p>",
        "id": 131037525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533640366
    },
    {
        "content": "<p>I'm just having to google how rebasing works!</p>",
        "id": 131037530,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533640374
    },
    {
        "content": "<p>okay... rebasing is still confusing me, but there's a second PR now!</p>",
        "id": 131038016,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533640986
    },
    {
        "content": "<p>Cool! Awesome! Congratulations!</p>",
        "id": 131038508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533641703
    },
    {
        "content": "<p>Oh the first PR has been merged! Fabulous!</p>",
        "id": 131040791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533644556
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> sometime soon we should  do some coordination to combine the category theory development you've been doing in your homotopy theory repo with mine.</p>",
        "id": 131100523,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533725464
    },
    {
        "content": "<p>This should definitely be one of our small groups in Orsay (although you can start online of course).</p>",
        "id": 131100538,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533725521
    }
]