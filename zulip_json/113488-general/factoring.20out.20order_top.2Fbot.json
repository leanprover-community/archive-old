[
    {
        "content": "<p>I'm thinking of unbundling the order structure from <code>order_{top,bot}</code>, making <code>order_top</code> require <code>[has_le]</code> and extend solely <code>[has_top]</code>. The proofs about it will now have a <code>[partial order]</code> added. This is because I'd like to have a type that is both <code>linear_order</code> and <code>order_top</code>. This should also \"simplify\" things like <code>linear_add_comm_group_with_top</code>, those should be separated into something like <code>linear_order, add_comm_group, covariant_class _ _, order_top</code>. What do you think?</p>\n<p>Some complications are that existing classes like <code>semilattice_{inf,sup}_{bot,top}</code> don't exist anymore, and <code>bounded_distrib_lattice</code> becomes something like <code>[distrib_lattice] [bounded]</code> where <code>[bounded]</code> is <code>[order_top] [order_bot]</code>.</p>\n<p>Yury asked that I discuss this in #general.</p>",
        "id": 258042866,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634569395
    },
    {
        "content": "<p>This sounds reasonable to me. It is quite unmanageable to put all combinations into a single class. <br>\nWith your suggested change, we can also get rid of something like docs# conditionally_complete_linear_order_bot.<br>\nIf a certain class (maybe <code>bounded_lattice</code>?) is popular enough, we could still decide that it deserves to stay a single class (instead of being split up into <code>[distrib_lattice] [...]</code>). I think the order refactor so far has shown that this also works quite well (with something like <code>ordered_comm_monoid</code> being able to use lemmas with <code>covariant_class</code> arguments). I'm not saying that we should do this with any particular class, but it's good to keep in mind as an option.</p>",
        "id": 258045582,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634570344
    },
    {
        "content": "<p>+1 for having <code>order_top</code> as a mixin for general purpose lemmas.</p>",
        "id": 258047403,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1634570983
    },
    {
        "content": "<p>My personal experience is that I defined <code>distrib_lattice_bot</code> for generalizing &lt; 10 lemmas and I now need <code>lattice_bot</code> for a definition to be in the correct generality.</p>",
        "id": 258047615,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634571054
    },
    {
        "content": "<p>I've often thought about math libraries with everything being a mixin, e.g. <code>[group α]</code> = <code>[has_mul α] [has_inv α] [has_one α]  [is_identity 1] [associative α] [is_left_inverse (*) (⁻¹)] [is_right_inverse (*) (⁻¹)]</code>, and then when you prove something for a <code>group/ring</code>/whatever the proof assistant would use the minimal axioms actually required</p>",
        "id": 258070587,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634579470
    },
    {
        "content": "<p>I wonder how that would be for a proving experience... anyways, I'm 100% for this</p>",
        "id": 258070608,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634579486
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/pechersky/linear-top-order\">branch#pechersky/linear-top-order</a>, where I've started doing it just to <code>order.bounded_lattice</code> first, since that is where the classes are defined.</p>",
        "id": 258071806,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634579987
    },
    {
        "content": "<p>What do you think of unbundling only <code>bot</code> first?</p>",
        "id": 258071987,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634580025
    },
    {
        "content": "<p>I expect both could be refactored quite independently, and if we prioritise one, I'd say <code>order_bot</code> seems to come up more often.</p>",
        "id": 258072113,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634580076
    },
    {
        "content": "<p>I think <code>with_top</code> comes up often too, in the <code>linear_algebra_structure_with_infty</code> that we have.</p>",
        "id": 258072288,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634580130
    },
    {
        "content": "<p>I think, bot and top should remain order dual, so we should unbundle both of them in one PR.</p>",
        "id": 258073311,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634580518
    }
]