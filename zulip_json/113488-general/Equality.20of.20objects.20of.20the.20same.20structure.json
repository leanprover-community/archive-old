[
    {
        "content": "<p>I have a question regarding structures:<br>\nI don't quite understand equality of objects of structures,<br>\nfor example in the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">point</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ext_point</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.x</span> <span class=\"bp\">=</span> <span class=\"n\">q.x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I want to show that two objects of the structure are equal, if they carry the same data.<br>\nIs this true? If yes, how does one show this?<br>\nIf no, could (or should) one add this as an axiom?</p>\n<p>Thanks in advance!</p>",
        "id": 225172603,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1612451761
    },
    {
        "content": "<p>I forget this one every time - I think the answer is <code>cases p, cases q,</code></p>",
        "id": 225173130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612451956
    },
    {
        "content": "<p>It becomes easier if you put <code>@[ext]</code> before <code>structure point</code>, then your statement is exactly <code>point.ext</code></p>",
        "id": 225173194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612451983
    },
    {
        "content": "<p>Following Eric's comment (the commented out lines use mathlib):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- import tactic</span>\n\n<span class=\"c1\">-- @[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">point</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ext_point</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.x</span> <span class=\"bp\">=</span> <span class=\"n\">q.x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- change p = q at h, -- also works</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- lemma ext_point' (p q : point) (h : p.x = q.x) : p = q :=</span>\n<span class=\"c1\">-- point.ext p q h</span>\n</code></pre></div>",
        "id": 225174059,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612452311
    },
    {
        "content": "<p>Great, that works :)<br>\nThanks a lot.</p>",
        "id": 225176421,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1612453280
    },
    {
        "content": "<p>About your axiom question: when you use the <code>inductive</code> command (or its special case the <code>structure</code> command), Lean does add an axiom to the system, the recursor of the inductive type, here <code>point.rec</code>. If you want to write you proof directly in term of this axiom (and the axiom <code>eq.rec</code> that was created when defining equality), that would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">point</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">point.ext</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.x</span> <span class=\"bp\">=</span> <span class=\"n\">q.x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"n\">point.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q.x</span><span class=\"o\">),</span> <span class=\"n\">point.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">eq.rec</span> <span class=\"n\">rfl</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>You probably don't want to know more about this, but I thought I would show you just in case.</p>",
        "id": 225179753,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612454586
    }
]