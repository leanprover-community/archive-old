[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"n\">n3</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">*</span> <span class=\"n\">n2</span><span class=\"o\">)</span> <span class=\"n\">n3</span> <span class=\"bp\">=</span> <span class=\"n\">function.uncurry</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">*</span> <span class=\"n\">n2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 210980056,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600854374
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/IYfJ06lRXefg_p_w7p6aC9tS/2020-09-23-3.png\"><img src=\"/user_uploads/3121/IYfJ06lRXefg_p_w7p6aC9tS/2020-09-23-3.png\"></a></div>",
        "id": 210980176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600854459
    },
    {
        "content": "<p>VSCode highlights the first <code>(n1 * n2)</code> as the error, when it is in fact the second <code>(n1 * n2)</code> that causes the type mismatch</p>",
        "id": 210980265,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600854489
    },
    {
        "content": "<p>+1 for <code>#check by have</code></p>",
        "id": 210988662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600860540
    },
    {
        "content": "<p>I'm not sure it's a bug. Type inference/checking in languages like ML, Haskell, and Lean is done by collecting and solving some constraints. It doesn't work left-to-right, and it often fails to identify the root cause.</p>",
        "id": 210989370,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600861036
    },
    {
        "content": "<p>it's a bug because if you do this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"n\">n3</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">*</span> <span class=\"n\">n2</span><span class=\"o\">)</span> <span class=\"n\">n3</span> <span class=\"bp\">=</span> <span class=\"n\">function.uncurry</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">*</span> <span class=\"n\">n2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 210989552,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600861160
    },
    {
        "content": "<p>then the error is on the second <code>n1 * n2</code> as it should</p>",
        "id": 210989561,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600861167
    },
    {
        "content": "<p>Maybe it's a bug, but your argument doesn't convince me. ;)</p>",
        "id": 210989663,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600861224
    },
    {
        "content": "<p>well why can it identify the root cause in term mode but not in tactic mode?</p>",
        "id": 210989689,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600861245
    },
    {
        "content": "<p>I don't know the procedure, but for all I know it could be nondeterministic and report random results.</p>",
        "id": 210989732,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600861271
    },
    {
        "content": "<p>(The E prover, for example, compares pointers and is therefore nondetermistic.)</p>",
        "id": 210989890,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600861372
    },
    {
        "content": "<p>Maybe different elaboration strategies are being used for some reason?</p>",
        "id": 210989908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600861387
    },
    {
        "content": "<p>I believe I've seen proofs of the form <code>:= &lt;term&gt;</code> which fail, and then succeed with <code>:= by exact &lt;term&gt;</code></p>",
        "id": 210989946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600861413
    },
    {
        "content": "<p>I get a different error (failed to synthesize type class instance for <code>has_mul (α × α)</code>), but the error reporting is similarly odd. In particular, it reports the first term only when you use the same expression in both places, e.g. if you use <code>n1 * n3</code> on the left then it reports on the right as you would expect. My guess is that it is hash consing the expressions and associating the error location to that, meaning that when we report the error we've forgotten which <code>n1 * n2</code> was responsible for the error</p>",
        "id": 211010635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600871079
    },
    {
        "content": "<p>So then it should be really easy to confuse lean in this way and we probably would have spotted it years ago?</p>",
        "id": 211011246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600871358
    },
    {
        "content": "<p>Indeed. It  could be interacting with another feature though, like the <code>have</code> tactic or some other aspect here making it more niche</p>",
        "id": 211012008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600871658
    },
    {
        "content": "<p>Hash consing is disabled by default IIRC.</p>",
        "id": 211015514,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1600873173
    },
    {
        "content": "<p>Is this at all related to <code>rw</code> thinking that it should rewrite every occurrence of whatever expression it decides to rewrite (e.g., <code>x * y</code>)?</p>",
        "id": 211015905,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600873323
    },
    {
        "content": "<p>No idea what Lean 3 is doing there, but Lean 4 says <a href=\"/user_uploads/3121/aRWAEvVBdIfozTRc-dTYTMgR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/aRWAEvVBdIfozTRc-dTYTMgR/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/aRWAEvVBdIfozTRc-dTYTMgR/image.png\"></a></div>",
        "id": 211018038,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1600874191
    },
    {
        "content": "<p>I see <code>CoeT</code> is dependent now :P</p>",
        "id": 211018170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600874263
    },
    {
        "content": "<p>The only non-hacky way to have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decPropToBool</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeDep</span> <span class=\"kt\">Prop</span> <span class=\"n\">p</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">decide</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 211018617,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1600874455
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 211019316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600874779
    },
    {
        "content": "<p>What's the story behind the change to <code>CamelCase</code>? Is the scope of the change just type classes, or does it extend to lemmas and defs too?</p>",
        "id": 211028655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600878839
    },
    {
        "content": "<p>they thought that lean didn't look enough like java</p>",
        "id": 211031155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600880090
    }
]