[
    {
        "content": "<p>Hi, I'm trying to understand why compilation of <a href=\"https://github.com/leanprover-community/mathlib/issues/1828\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1828\">#1828</a> fails. I noticed the following (works in <code>master</code> branch, no need to checkout PR branch):</p>\n<ol>\n<li>At the top of the proof of <code>normed_ring_top_monoid</code>, if we replace <code>apply squeeze_zero</code> with <code>apply tendsto_of_tendsto_of_tendsto_of_le_of_le</code>, it fails.</li>\n<li>Same location, <code>apply tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds</code> succeeds but adds <code>partial_order ‚Ñù</code> and <code>orderable_topology ‚Ñù</code> to the list of goals.</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">tendsto_of_tendsto_of_tendsto_of_le_of_le</span>\n<span class=\"mi\">350</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">tendsto_of_tendsto_of_tendsto_of_le_of_le</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">orderable_topology</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">},</span>\n    <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n    <span class=\"n\">tendsto</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"err\">‚àà</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"err\">‚àà</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Is it important that it says <code>t : orderable_topology Œ±</code>, not <code>_inst_3 : orderable_topology Œ±</code>?</p>",
        "id": 184303745,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577430066
    },
    {
        "content": "<p>It seems that <code>rw is_open_iff_generate_intervals</code> fails but <code>rw [@is_open_iff_generate_intervals _ _ _ _]</code> works.</p>",
        "id": 184308937,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577436705
    },
    {
        "content": "<p>Does it happen because <code>orderable_topology</code> takes <code>topological_space</code> and <code>partial_order</code> as arguments?</p>",
        "id": 184309983,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577437945
    },
    {
        "content": "<p>This is a known issue: <code>apply</code> is very bad at finding type class instances. Usually you can use <code>refine</code> instead (after figuring out how many underscores you need).</p>",
        "id": 184313603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577442541
    },
    {
        "content": "<p>I'll have a look at your specific issue.</p>",
        "id": 184313828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577442881
    },
    {
        "content": "<p>Then I'll probably drop <a href=\"https://github.com/leanprover-community/mathlib/issues/1828\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1828\">#1828</a>. Restricting <code>squeeze_zero</code> to reals make it possible to use <code>apply squeeze_zero</code>.</p>",
        "id": 184313834,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577442892
    },
    {
        "content": "<p>Do you have any use case besides reals?</p>",
        "id": 184314184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577443377
    },
    {
        "content": "<p>No, I just felt that <code>algebra/ordered</code> is a better place for this lemma. Since it breaks <code>apply</code>, I think it's better to just drop the PR.</p>",
        "id": 184314272,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577443510
    },
    {
        "content": "<p>Ok</p>",
        "id": 184314274,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577443516
    },
    {
        "content": "<p>About the derivative extension PR, you are right that there are many small holes in the API. All those lemmas about closure could have more variation and also <code>continuous_on</code> versions.</p>",
        "id": 184314329,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577443573
    }
]