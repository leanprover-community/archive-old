[
    {
        "content": "<p>In the middle of an involved proof, I've got a goal which looks like <code>(pullback.snd ≫ prod.fst) ≫ pullback.snd ≫ prod.snd = pullback.snd ≫ prod.snd ≫ f.hom</code>. Now this is super opaque, though I'm pretty sure the maths proof should be an easy diagram chase. What would be super helpful then is to see the actual objects involved here so it looks a bit more like <code>(pullback.snd ≫ limits.prod.fst) ≫ pullback.snd ≫ (limits.prod.snd : _ ⨯ B ⟶ B) = pullback.snd ≫ (limits.prod.snd : Q f ⨯ f.left ⟶ f.left) ≫ (f.hom : f.left ⟶ B)</code> (ideally some more, but I've just put these in manually. Essentially I'd like something between the default pretty printer and pp.implicit true - is this possible? (of course under an option)</p>",
        "id": 194957351,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587573211
    },
    {
        "content": "<p>Hmm, if you made a local notation for <code>≫</code> with the objects involved explicit, I think the pretty printer would use it over <code>≫</code>.</p>",
        "id": 194957595,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587573331
    },
    {
        "content": "<p>This seems promising - how do I make the objects explicit in a notation though?</p>",
        "id": 194957942,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587573490
    },
    {
        "content": "<p>Just get them involved in the notation</p>",
        "id": 194958080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587573577
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span><span class=\"err\">%</span> <span class=\"bp\">`</span> <span class=\"n\">A</span> <span class=\"bp\">`</span> <span class=\"err\">%</span><span class=\"bp\">`</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>like this?</p>",
        "id": 194958177,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587573616
    },
    {
        "content": "<p>That doesn't seem to work for me... Am I missing some priority thing?</p>",
        "id": 194958209,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587573636
    },
    {
        "content": "<p>hmm</p>",
        "id": 194958217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587573642
    },
    {
        "content": "<p>I don't know</p>",
        "id": 194958246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587573660
    },
    {
        "content": "<p>I'll make a MWE, one sec</p>",
        "id": 194958263,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587573669
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`#</span> <span class=\"bp\">`</span> <span class=\"n\">A</span> <span class=\"bp\">`</span> <span class=\"bp\">#`</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">g</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"err\">⟶</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"err\">⟶</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194958749,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587573926
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"n\">B</span> <span class=\"bp\">`</span> <span class=\"bp\">&amp;</span> <span class=\"bp\">`</span> <span class=\"n\">f</span> <span class=\"bp\">`#</span> <span class=\"bp\">`</span> <span class=\"n\">A</span> <span class=\"bp\">`</span> <span class=\"bp\">#`</span> <span class=\"n\">g</span> <span class=\"bp\">`</span> <span class=\"bp\">&amp;</span> <span class=\"bp\">`</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>doesn't work either</p>",
        "id": 194963968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587576138
    },
    {
        "content": "<p>A hack which does the job for now: <code>def tag' (n : ℕ) (A B : C) (f : A ⟶ B) : A ⟶ B := f</code></p>",
        "id": 195919597,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588293228
    },
    {
        "content": "<p>Then when my goal is <code>pullback m₁ m₂ ⟶ pullback pullback.snd pullback.snd</code>, I can write</p>",
        "id": 195919671,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588293251
    },
    {
        "content": "<p><code>change pullback m₁ m₂ ⟶ pullback (tag' 0 _ _ pullback.snd) (tag' 1 _ _ pullback.snd),</code></p>",
        "id": 195919677,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588293256
    },
    {
        "content": "<p>which changes the goal to <code>pullback m₁ m₂ ⟶\n    pullback\n      (tag' 0 (pullback (mem (⊤_ C)) (prod.map (hat (m₂ ≫ prod.lift (𝟙 E) (terminal.from E))) (𝟙 (⊤_ C))))\n         (E ⨯ ⊤_ C)\n         pullback.snd)\n      (tag' 1 (pullback (mem (⊤_ C)) (prod.map (hat (m₁ ≫ prod.lift (𝟙 E) (terminal.from E))) (𝟙 (⊤_ C))))\n         (E ⨯ ⊤_ C)\n         pullback.snd)</code>, which is more helpful</p>",
        "id": 195919695,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588293272
    }
]