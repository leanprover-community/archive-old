[
    {
        "content": "<p>I want to prove that the exponent of a group (defined as the smallest n such that x^n=1 for all elements x) is the lowest common multiple of the (multiset of) orders of its elements. However, I didn't manage to define the multiset of orders of elements of the finite group. The following is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.punit_instances</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.gcd_monoid.finset</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lcm_order_dvd_exponent</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">multiset.map</span> <span class=\"n\">order_of</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lcm</span> <span class=\"bp\">∣</span> <span class=\"n\">exponent</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What is the correct way to state this lemma? I'm not asking about the proof.</p>",
        "id": 260863994,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1636493257
    },
    {
        "content": "<p>I guess <code>multiset.map</code> want a <code>multiset</code> instead of <code>G : Type</code>. Is there a <code>multiset.univ : multiset G</code> that you could use there?</p>",
        "id": 260864510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636493493
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.univ\">docs#multiset.univ</a></p>",
        "id": 260864519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636493499
    },
    {
        "content": "<p>Seems like there is not. So you might need to use <code>finset.univ.1</code></p>",
        "id": 260864560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636493522
    },
    {
        "content": "<p>Is there a reason why you want to use multisets instead of finsets?</p>",
        "id": 260864618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636493535
    },
    {
        "content": "<p>You could also use <code>finset.lcm</code>, right?</p>",
        "id": 260864635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636493547
    },
    {
        "content": "<p>Does that exist? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.lcm\">docs#finset.lcm</a> (Edit: hooray, it does)</p>",
        "id": 260864658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636493556
    },
    {
        "content": "<p>While <code>multiset</code> seems like it would be better, <code>finset</code> would work without really losing generality, and it tends to be better-developed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.punit_instances</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.gcd_monoid.finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lcm_order_dvd_exponent</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">order_of</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lcm</span> <span class=\"bp\">∣</span> <span class=\"n\">exponent</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260865387,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636493867
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.lcm\">docs#multiset.lcm</a> exists</p>",
        "id": 260865588,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636493966
    },
    {
        "content": "<p>the API for these setwise lcms /gcds isn't too well developed but does also exist</p>",
        "id": 260865633,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636493991
    },
    {
        "content": "<p>(I was just looking at this yesterday funnilty enough)</p>",
        "id": 260865698,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636494008
    },
    {
        "content": "<p>There was no particular reason to use multiset, I just imagined that it might be easier to deal with the duplicates. Thanks a log Johan and Kyle. I believe in your solution there is an <code>id</code> missing after lcm, Kyle. But then it works fine.</p>",
        "id": 260866393,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1636494354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"317890\">Julian Külshammer</span> has marked this topic as resolved.</p>",
        "id": 260866405,
        "sender_full_name": "Notification Bot",
        "timestamp": 1636494361
    }
]