[
    {
        "content": "<p>Here's a simple proof by <code>exact_dec_trivial</code> :</p>\n<div class=\"codehilite\"><pre><span></span>import data.list.basic\n\ndef foo (n : nat) : Prop := n = 0\n\ninstance : decidable_pred foo :=\nbegin intro n, simp [foo], apply_instance end\n\nexample : ∀ n ∈ [0], foo n :=\nby tactic.exact_dec_trivial\n</pre></div>\n\n\n<p>The proof succeeds because the instance <code>decidable_forall_mem {p : α → Prop} [decidable_pred p] (l : list α) : decidable (∀ x ∈ l, p x)</code> is available. Although not necessary, having an extra instance of this type does not affect the proof:</p>\n<div class=\"codehilite\"><pre><span></span>import data.list.basic\n\ndef foo (n : nat) : Prop := n = 0\n\ninstance : decidable_pred foo :=\nbegin intro n, simp [foo], apply_instance end\n\ninstance bar {α} {p : α → Prop} [decidable_pred p]\n  (l : list α) : decidable (∀ x ∈ l, p x) :=\ndecidable_of_iff _ list.all_iff_forall_prop\n\nexample : ∀ n ∈ [0], foo n :=\nby tactic.exact_dec_trivial\n</pre></div>\n\n\n<p>But if you add a slightly different instance of the same type:</p>\n<div class=\"codehilite\"><pre><span></span>import data.list.basic\n\ndef foo (n : nat) : Prop := n = 0\n\ninstance : decidable_pred foo :=\nbegin intro n, simp [foo], apply_instance end\n\ninstance baz {α} {p : α → Prop} [decidable_pred p]\n  (l : list α) : decidable (∀ x ∈ l, p x) :=\nbegin\n  cases l, apply decidable.is_true, intros x h, cases h,\n  rw list.forall_mem_cons, apply and.decidable,\nend\n\nexample : ∀ n ∈ [0], foo n :=\nby tactic.exact_dec_trivial\n</pre></div>\n\n\n<p>Then <code>exact_dec_trivial</code> doesn't work anymore. What's the difference between <code>bar</code> and <code>baz</code> that causes this?</p>",
        "id": 158824337,
        "sender_full_name": "Seul Baek",
        "timestamp": 1550519233
    },
    {
        "content": "<p>If you set the option <code>pp.proofs</code> to true and <code>#print baz</code>, you're going to see a proof term. Part of it is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">baz</span><span class=\"bp\">._</span><span class=\"n\">proof_2</span> <span class=\"n\">l_hd</span> <span class=\"n\">l_tl</span><span class=\"o\">)</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">decidable</span>\n</pre></div>\n\n\n<p>I'm wondering if, with <code>baz._proof_2</code> being opaque, <code>eq.mpr</code> can't unfold it to do recursion on it.</p>",
        "id": 158824901,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550519742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 158824908,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550519749
    },
    {
        "content": "<p>Actually, now that I look more closely at <code>baz._proof_2</code>, I see that it refers to <code>propext</code> which is an axiom it cannot use for computation.</p>",
        "id": 158825098,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550519915
    },
    {
        "content": "<p>don't use tactics for definitions...</p>",
        "id": 158826822,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550521695
    },
    {
        "content": "<p>I think there's a similar issue with functions defined via <code>nat.strong_rec_on</code> that the kernel/VM cannot unfold proofs</p>",
        "id": 158826859,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550521755
    },
    {
        "content": "<p>Never use <code>rw</code> or <code>cast</code> to construct <code>decidable</code> instances</p>",
        "id": 158839522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550536624
    },
    {
        "content": "<p>use <code>decidable_of_iff</code> instead (you can then prove the iff statement however you want)</p>",
        "id": 158839538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550536652
    },
    {
        "content": "<p>This is important because <code>decidable_of_iff</code> does not use <code>cast</code> to get from one type to another, it pattern matches on one and uses the iff statement to get to the other</p>",
        "id": 158839585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550536698
    },
    {
        "content": "<p>If you use <code>rw</code>, it will cast across <code>propext</code> and the resulting term will get stuck in reduction, even when it should be provable</p>",
        "id": 158839595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550536745
    },
    {
        "content": "<p>This should be pinned or some such, these are impossible to debug for me. The last advice I got wrt. looking into <code>#reduce</code> was to put a breakpoint in C++ code :-/.</p>",
        "id": 158839657,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1550536804
    },
    {
        "content": "<p>here's the important part of the example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"bp\">@</span><span class=\"n\">baz</span> <span class=\"bp\">_</span> <span class=\"n\">foo</span> <span class=\"bp\">_</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"c1\">-- @eq.rec Type (decidable (0 = 0 ∧ ∀ (x : ℕ), false → x = 0)) (λ (_x : Type), _x)</span>\n<span class=\"c1\">--   (@is_true (0 = 0 ∧ ∀ (x : ℕ), false → x = 0) _)</span>\n<span class=\"c1\">--   (decidable (∀ (x : ℕ), x = 0 ∨ false → x = 0))</span>\n<span class=\"c1\">--   (propext _)</span>\n</pre></div>",
        "id": 158839762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550536968
    },
    {
        "content": "<p>it's stuck on a reduction of <code>propext</code></p>",
        "id": 158839773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550536984
    },
    {
        "content": "<p>(example slightly unelided for clarity)</p>",
        "id": 158839783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550537024
    }
]