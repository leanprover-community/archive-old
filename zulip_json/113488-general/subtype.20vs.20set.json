[
    {
        "content": "<p>In the spirit of having a canonical way of doing things, would it be possible for lean/mathlib to consistently use the <code>has_coe_to_sort</code> coercion of a <code>set</code> rather than ever using subtypes directly?  Is there any reason not to do this? Dot notation still works fine.</p>\n<p>It seems that in general it's nicer to work with sets than predicates, and most subtypes I've worked with aren't from raw predicates anyway. Eliminating <code>//</code> vs <code>|</code> (at the expense of introducing the coercion arrow) might make learning Lean just a little bit easier.</p>",
        "id": 257732593,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634318045
    },
    {
        "content": "<p>I'd argue that it's less irritating to use a lemma about subtypes with <code>p = (∈ s)</code> than it is to use one about sets with <code>s = {x | p x}</code>, especially if you then have <code>decidable_pred (∈ {x | p x})</code> obligations that then appear</p>",
        "id": 257740208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634321207
    },
    {
        "content": "<p>Hmm, should we have <code>decidable_set s</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">decidable_set</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257744211,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634322840
    },
    {
        "content": "<p>It might be more irritating to work with <code>{x | p x}</code> subtypes for lemmas, but it seems like it would be less irritating overall to not have these parallel worlds.</p>",
        "id": 257744449,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634322948
    },
    {
        "content": "<p>Removing the <code>set</code> world entirely would probably be awfully unpopular I suppose, even though <code>α → Prop</code> has analogous lattice structures.</p>",
        "id": 257744821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634323101
    },
    {
        "content": "<p>Well there's the issue of dot notation.</p>",
        "id": 257745976,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634323607
    },
    {
        "content": "<p>although I already suggested we could make Lean look under the<code>function</code> namespace when dot notating on <code>α → β</code>.</p>",
        "id": 257746074,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634323660
    },
    {
        "content": "<p>If we can do that, then we can also make it look under the <code>set</code> namespace when dot notating on <code>α → Prop</code>.</p>",
        "id": 257746172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634323702
    },
    {
        "content": "<p>Beyond being unpopular, an issue with removing <code>set</code> is that there's no good way to normalize notation: is it <code>p x</code> or <code>x ∈ p</code>? It would be very nonstandard having to evaluate a predicate using <code>∈</code>.</p>",
        "id": 257747040,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634324121
    },
    {
        "content": "<p>In case anyone's interested in a <code>decidable_set</code>, here's <a href=\"https://github.com/leanprover-community/mathlib/issues/9733\">#9733</a> to start the discussion.  I didn't go through and change all occurrences yet (and not all occurrences can be changed, since I put <code>decidable_set</code> in <code>data.set.basic</code> and not everything imports that).</p>",
        "id": 257748832,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634324901
    },
    {
        "content": "<p>I think <code>decidable_mem</code> would be a better name</p>",
        "id": 257749271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634325127
    },
    {
        "content": "<p>It'd make sense also if it were for <code>has_mem</code></p>",
        "id": 257749320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634325153
    },
    {
        "content": "<p>(Though I sort of wish sometimes that <code>has_mem</code> were only for <code>set</code>, and that to use it for other types you define a coercion to <code>set</code>. This isn't so nice for <code>finset</code> though.)</p>",
        "id": 257749637,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634325307
    },
    {
        "content": "<p>Ok, <a href=\"https://github.com/leanprover-community/mathlib/issues/9733\">#9733</a> is now about <code>decidable_mem</code>.</p>",
        "id": 257751302,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634326046
    }
]