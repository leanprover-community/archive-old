[
    {
        "content": "<p>Is there a <code>set_option</code> that disables the <code>(deterministic) timeout</code> message completely and just lets tactics run as long as they want? I tried <code>set_option timeout 0</code> but that doesn't seem to do the trick.</p>",
        "id": 203812733,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594717902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ??</p>",
        "id": 203812788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594717924
    },
    {
        "content": "<p>You could set it to something absurd</p>",
        "id": 203812792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594717928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Disable.20timeout/near/203812792\">said</a>:</p>\n<blockquote>\n<p>You could set it to something absurd</p>\n</blockquote>\n<p>Actually, I always get the <code>(deterministic) timeout</code> message in the same place, regardless of whether I set <code>set_option timeout 100000000</code> or <code>set_option timeout 1</code></p>",
        "id": 203812835,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594717997
    },
    {
        "content": "<p>from reading the code it appears that <code>set_option timeout 0</code> should indeed act as unbounded</p>",
        "id": 203812943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594718091
    },
    {
        "content": "<p>That's interesting. The following times out for me:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">timeout</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">stupid_tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"s2\">&quot;Hi&quot;</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">stupid_tac</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">stupid_tac</span>\n</code></pre></div>",
        "id": 203813011,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594718159
    },
    {
        "content": "<p>How did that end in the new members stream?</p>",
        "id": 203813107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594718255
    },
    {
        "content": "<p>Sorry, I am sometimes unsure where to put these advanced-but-probably-trivial questions. Feel free to move the topic to a more fitting stream.</p>",
        "id": 203813184,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594718310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> <code>#general</code> is for everything you are unsure about (-;</p>",
        "id": 203813212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594718342
    },
    {
        "content": "<p>There is another rule that applies here: Markus, you are <em>not</em> a new member.</p>",
        "id": 203813337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594718461
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Disable.20timeout\">#new members &gt; Disable timeout</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span></p>",
        "id": 203813356,
        "sender_full_name": "Notification Bot",
        "timestamp": 1594718478
    },
    {
        "content": "<p>FWIW the test has the expected behavior when you run it from console mode (where the default timeout is infinity)</p>",
        "id": 203813429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594718529
    },
    {
        "content": "<p>Can you reproduce the timeout from VS Code?</p>",
        "id": 203813456,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594718558
    },
    {
        "content": "<p>sometimes I post in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> sarcastically</p>",
        "id": 203813480,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594718581
    },
    {
        "content": "<p>although I think it causes a memory leak so you might also be seeing a memory abort</p>",
        "id": 203813484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594718583
    },
    {
        "content": "<p>I can</p>",
        "id": 203813497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594718593
    },
    {
        "content": "<p>Lean doesn't have tail recursion (!) so long loops are basically memory leaks</p>",
        "id": 203813547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594718629
    },
    {
        "content": "<p>Okay, but can the memory leak cause the <code>(deterministic) timeout</code> message?</p>",
        "id": 203813744,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594718764
    },
    {
        "content": "<p>It can definitely contribute to pushing the \"time\" along, but it shouldn't matter if the timeout is unlimited</p>",
        "id": 203813783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594718810
    },
    {
        "content": "<p>\"time\" is actually memory allocations</p>",
        "id": 203813794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594718820
    },
    {
        "content": "<p>On review it looks like that option is read on thread initialization time and on <code>main()</code> but not otherwise</p>",
        "id": 203814803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594719686
    },
    {
        "content": "<p>meaning that you are stuck with whatever timeout is set at the command line</p>",
        "id": 203814830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594719713
    },
    {
        "content": "<p>I believe you can modify the lean server invocation in vscode to include a timeout setting if you want to go that route</p>",
        "id": 203814924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594719781
    },
    {
        "content": "<p>I turns out that there is a \"Lean timeout\" setting in the VS Code settings, and setting this to 0 indeed does the trick.</p>",
        "id": 203816864,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594721454
    },
    {
        "content": "<p>So can <code>set_option timeout</code> be fixed or should we add a remark to the docstring of the timeout option that says that it doesn't work?</p>",
        "id": 203826482,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594729442
    },
    {
        "content": "<p>This is theoretically fixable.  Please file an issue if it is very important to you.</p>",
        "id": 204396618,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595233017
    }
]