[
    {
        "content": "<p>Is it possible to customize the name of a structure projection? I have <code>bar</code> extending <code>foo</code> and would like to call the projection <code>foo.bar</code>, not <code>foo.to_bar</code>, in order to hide the fact that it's a structure as an implementation detail (it is Prop-valued and could have well been unbundled).<br>\ncc <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 272859709,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645560504
    },
    {
        "content": "<p>A possible solution is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"kd\">extends</span> <span class=\"n\">barbar</span> <span class=\"o\">:</span> <span class=\"n\">bar</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo.barbar</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo.to_bar</span> <span class=\"c1\">-- undefined</span>\n</code></pre></div>",
        "id": 272861014,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1645561175
    },
    {
        "content": "<p>First of all, there are some changes in Lean 4 so that don't get to used the projections just yet.</p>",
        "id": 272861094,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645561204
    },
    {
        "content": "<p>It could be <code>bar</code> too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"kd\">extends</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(Then <code>foo.bar</code> is the projection to the parent.)</p>",
        "id": 272861119,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645561222
    },
    {
        "content": "<p>I'm also not sure if changing projection names is high on the priority list.</p>",
        "id": 272861121,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645561224
    },
    {
        "content": "<p>That said, it should be a fairly straightforward change.  I don't think there's any place where we check that a name begins with <code>to_</code>.</p>",
        "id": 272861423,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645561397
    },
    {
        "content": "<p>I can do with one more lemma in the meantime.</p>",
        "id": 272862173,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645561797
    },
    {
        "content": "<p>Doesn't <code>extends</code> have some other effects? Is it really something you can hide as an implementation detail?</p>",
        "id": 272862235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645561812
    },
    {
        "content": "<p>(The implied question being: why not just make the parent projection an actual field instead?)</p>",
        "id": 272868401,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645564842
    },
    {
        "content": "<p>I don't think that registers the structure the same way for use with the <code>{ _ := _ }</code> notation.</p>",
        "id": 272868490,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645564911
    },
    {
        "content": "<p>If you had two fields <code>(a : A) (b : B)</code>, then the notation would be <code>{ a := _, b := _ }</code>. So I guess what you mean is that you <em>don't</em> actually want to hide the fact that (say) <code>A</code> is being extended, because you want to support different notation for <code>{ ... }</code>?</p>",
        "id": 272868664,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645565010
    },
    {
        "content": "<p>namely <code>{ b := _, .. _ }</code>, I guess?</p>",
        "id": 272868696,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645565036
    },
    {
        "content": "<p>In that case I have <code>is_spectral_map</code> (<a href=\"https://github.com/leanprover-community/mathlib/pull/12228\">#12228</a>) that extends <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous\">docs#continuous</a> and I would the <code>to_continuous</code> to be replaced by the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.is_open_preimage\">docs#continuous.is_open_preimage</a> one.</p>",
        "id": 272869475,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645565458
    },
    {
        "content": "<p>That makes sense in principle but I'm a bit surprised because I would have thought that <code>continuous f</code> was the preferred way to say that <code>f</code> is continuous--indeed you use the fact that you can give a proof of <code>continuous</code> in <code>is_spectral_map.comp</code> for example</p>",
        "id": 272869809,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645565648
    },
    {
        "content": "<p>Yes, so if you have <code>continuous f</code>, you use <code>⟨ ⟩</code> notation, and if you want to provide it directly, you use <code>{ _ := _ }</code>.</p>",
        "id": 272869914,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645565717
    },
    {
        "content": "<p>Hmm, that seems rather unexpected to me. Maybe I just like using <code>{}</code> because it tells me the field names--I wouldn't expect this kind of detail to differ</p>",
        "id": 272870028,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645565792
    },
    {
        "content": "<p>I found the difference tremendously useful on my hom crusade.</p>",
        "id": 272870054,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645565819
    },
    {
        "content": "<p>It seems a bit too clever. If you have a proof of <code>is_open_of_whatever</code> you can always just wrap it in a single pair of angle brackets to get to <code>continuous</code>.</p>",
        "id": 272870113,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645565861
    },
    {
        "content": "<p>Yeah, sure, I'm not claiming any of this to be important.</p>",
        "id": 272870236,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645565927
    },
    {
        "content": "<p>Well, I think it's bad. Every Lean user knows that <code>⟨x, y⟩</code> means <code>mk x y</code> means <code>{ a := x, b := y }</code>. Sure, there are some edge cases where this isn't quite true due to unusual binder types or whatever, but that is the default expectation. <em>Intentionally</em> violating the expectation of users (= everyone besides yourself) in this way is just bad software engineering.</p>",
        "id": 272938175,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645617345
    },
    {
        "content": "<p>And in this situation there doesn't even seem to be any real purpose to it, because <code>continuous f</code> is the standard form anyways--I can't speak to other situations because I haven't looked at them.</p>",
        "id": 272938278,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645617399
    },
    {
        "content": "<p>It doesn't mean using <code>extends</code> is wrong here, only that you can't and shouldn't try to \"hide\" the fact that the structure uses <code>extends</code>. If you want to work as though <code>continuous</code> is really a field, don't play cute games with renaming projections--just <em>make it a field</em>.</p>",
        "id": 272939760,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645618326
    },
    {
        "content": "<blockquote>\n<p>Every Lean user knows that [...] mk x y means { a := x, b := y }</p>\n</blockquote>\n<p>Every Lean user may <em>believe</em> that, but it has been wrong for years---since the structure command became the old structure command.  The construction that Yaël outlines is exactly what's already happening, the only thing that the proposal would change is the <em>naming</em> of the subobjects.</p>",
        "id": 272985629,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645638587
    }
]