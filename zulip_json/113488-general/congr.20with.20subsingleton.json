[
    {
        "content": "<p>Is this a bug in <code>congr</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">congr</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">congr</span> <span class=\"c1\">-- ok</span>\n</pre></div>",
        "id": 128141922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529097640
    },
    {
        "content": "<p>what is supposed to the state after the first <code>by congr</code>?</p>",
        "id": 128141939,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529097669
    },
    {
        "content": "<p>\"no goals\"</p>",
        "id": 128141945,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529097678
    },
    {
        "content": "<p>oh</p>",
        "id": 128141948,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529097684
    },
    {
        "content": "<p>Actually, I made the second example slightly poor.</p>",
        "id": 128141949,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529097686
    },
    {
        "content": "<p>Edited now.</p>",
        "id": 128141956,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529097710
    },
    {
        "content": "<p>Not in the sense that I'm not surprised by the result</p>",
        "id": 128141958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529097714
    },
    {
        "content": "<p><code>congr</code> only gets its subsingleton optimization when it actually applies a function</p>",
        "id": 128142002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529097741
    },
    {
        "content": "<p>because it simplifies the congruence lemma for <code>f</code></p>",
        "id": 128142007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529097757
    },
    {
        "content": "<p>so if <code>congr_core</code> applies 0 times the optimization never gets a chance</p>",
        "id": 128142018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529097779
    },
    {
        "content": "<p>I see</p>",
        "id": 128142028,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529097794
    },
    {
        "content": "<p>I have a more complicated example where <code>congr</code> fails even when there is a function being applied, but I need to minimize it first.</p>",
        "id": 128142047,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529097831
    },
    {
        "content": "<p>Is <code>simp</code> supposed to understand subsingletons then? What exactly does it do with them? It can't handle either of these goals</p>",
        "id": 128142090,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529097855
    },
    {
        "content": "<p><code>simp</code> uses <code>congr</code> to enter a term, so it gets subsingleton handling indirectly that way</p>",
        "id": 128142125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529097922
    },
    {
        "content": "<p>but it won't rewrite <code>x</code> to <code>y</code> if that's what you mean</p>",
        "id": 128142133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529097943
    },
    {
        "content": "<p>mostly it's helpful for carrying along dependent arguments</p>",
        "id": 128142180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529097968
    },
    {
        "content": "<p>Oh, so by \"it [<code>congr</code>] simplifies the congruence lemma\" you don't mean using <code>simp</code>?</p>",
        "id": 128142183,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529097981
    },
    {
        "content": "<p>No, I mean that the congruence lemma that is generated lacks an equality subgoal for any subsingleton arguments</p>",
        "id": 128142191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529098014
    },
    {
        "content": "<p>is this stuff in C++, in <code>mk_specialized_congr_lemma</code>?</p>",
        "id": 128142196,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529098020
    },
    {
        "content": "<p>yes</p>",
        "id": 128142203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529098024
    },
    {
        "content": "<p>but you can see the resulting lemma by using the <code>mk_congr_lemma</code> function</p>",
        "id": 128142207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529098045
    },
    {
        "content": "<p>OK, the reason <code>congr</code> didn't work in my actual code is because I only have a subsingleton instance for a particular value of one of the type arguments, and the generated congruence lemma was too general and didn't specify the value of that type.</p>",
        "id": 128142838,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529099024
    },
    {
        "content": "<p>(Namely, I have a subsingleton instance for <code>a ⟶ b</code> only when <code>a</code> is the initial object of a category)</p>",
        "id": 128143036,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529099313
    }
]