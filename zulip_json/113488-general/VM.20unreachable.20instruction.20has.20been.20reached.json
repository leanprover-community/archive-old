[
    {
        "content": "<p>I get \"VM unreachable instruction has been reached\" when I eval n. i know, of course, that n can't be calculated. But why I get this instead of \"noncomputable\" ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">contra</span> <span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span> <span class=\"o\">:=</span> <span class=\"n\">contra.elim</span>\n<span class=\"k\">#eval</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 296083234,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1661859687
    },
    {
        "content": "<p>Noncomputable simply means that lean cannot generate executable code for the function.<br>\nThe first thing to note is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/false.elim\">docs#false.elim</a> is a computable function, its code looks like this (in pseudo-code):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">false.elim</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">):</span>\n<span class=\"c1\">-- check if a is any of the constructors of false</span>\n<span class=\"c1\">-- oh wait there are none</span>\n<span class=\"c1\">-- ok we are done</span>\n<span class=\"n\">unreachable</span>\n</code></pre></div>\n<p>this is a well defined function with executable code, albeit slightly useless..<br>\nYou can see the code generated for any def using the opton <code>set_option trace.compiler.code_gen true</code>, it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">compiler.optimize_bytecode</span><span class=\"o\">]</span>  <span class=\"n\">false.elim</span> <span class=\"mi\">2</span>\n<span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">unreachable</span>\n<span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ret</span>\n</code></pre></div>\n<p>so if this function is ever called with an argument (which should be impossible) we get <code>unreachable</code>.<br>\nNow the reason you may be surprised by this is that axioms usually aren't computable either, we get some error about <code>VM does not have code for blah</code> instead.<br>\nWhat's happening is that <code>false.elim</code> is inlined and the compiler is smart enough to realise it doesn't really matter what the input is and so gets rid of the use of the axiom, leaving you with something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n</span><span class=\"o\">():</span>\n<span class=\"c1\">-- check if _ is any of the constructors of false</span>\n<span class=\"c1\">-- oh wait there are none</span>\n<span class=\"c1\">-- ok we are done</span>\n<span class=\"n\">unreachable</span>\n</code></pre></div>\n<p>maybe the short answer is that if you add false as an axiom you are not really doing anything the system was designed for...</p>",
        "id": 296106905,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661867730
    },
    {
        "content": "<p>I believe the axiom is eliminated for another reason than inlining in this case, which is that <code>contra</code> is a proof, which is erased because proofs are computationally irrelevant. In any case, <code>false.elim</code> certainly is being inlined.</p>",
        "id": 296144441,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661872688
    },
    {
        "content": "<p>Good point, I forgot false was a Prop <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>!</p>",
        "id": 296145253,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661872929
    }
]